/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddRoleToDBClusterMessage from '../model/AddRoleToDBClusterMessage';
import AddSourceIdentifierToSubscriptionMessage from '../model/AddSourceIdentifierToSubscriptionMessage';
import AddSourceIdentifierToSubscriptionResult from '../model/AddSourceIdentifierToSubscriptionResult';
import AddTagsToResourceMessage from '../model/AddTagsToResourceMessage';
import ApplyPendingMaintenanceActionMessage from '../model/ApplyPendingMaintenanceActionMessage';
import ApplyPendingMaintenanceActionResult from '../model/ApplyPendingMaintenanceActionResult';
import CopyDBClusterParameterGroupMessage from '../model/CopyDBClusterParameterGroupMessage';
import CopyDBClusterParameterGroupResult from '../model/CopyDBClusterParameterGroupResult';
import CopyDBClusterSnapshotMessage from '../model/CopyDBClusterSnapshotMessage';
import CopyDBClusterSnapshotResult from '../model/CopyDBClusterSnapshotResult';
import CopyDBParameterGroupMessage from '../model/CopyDBParameterGroupMessage';
import CopyDBParameterGroupResult from '../model/CopyDBParameterGroupResult';
import CreateDBClusterEndpointMessage from '../model/CreateDBClusterEndpointMessage';
import CreateDBClusterEndpointOutput from '../model/CreateDBClusterEndpointOutput';
import CreateDBClusterMessage from '../model/CreateDBClusterMessage';
import CreateDBClusterParameterGroupMessage from '../model/CreateDBClusterParameterGroupMessage';
import CreateDBClusterParameterGroupResult from '../model/CreateDBClusterParameterGroupResult';
import CreateDBClusterResult from '../model/CreateDBClusterResult';
import CreateDBClusterSnapshotMessage from '../model/CreateDBClusterSnapshotMessage';
import CreateDBClusterSnapshotResult from '../model/CreateDBClusterSnapshotResult';
import CreateDBInstanceMessage from '../model/CreateDBInstanceMessage';
import CreateDBInstanceResult from '../model/CreateDBInstanceResult';
import CreateDBParameterGroupMessage from '../model/CreateDBParameterGroupMessage';
import CreateDBParameterGroupResult from '../model/CreateDBParameterGroupResult';
import CreateDBSubnetGroupMessage from '../model/CreateDBSubnetGroupMessage';
import CreateDBSubnetGroupResult from '../model/CreateDBSubnetGroupResult';
import CreateEventSubscriptionMessage from '../model/CreateEventSubscriptionMessage';
import CreateEventSubscriptionResult from '../model/CreateEventSubscriptionResult';
import CreateGlobalClusterMessage from '../model/CreateGlobalClusterMessage';
import CreateGlobalClusterResult from '../model/CreateGlobalClusterResult';
import DBClusterEndpointMessage from '../model/DBClusterEndpointMessage';
import DBClusterMessage from '../model/DBClusterMessage';
import DBClusterParameterGroupDetails from '../model/DBClusterParameterGroupDetails';
import DBClusterParameterGroupNameMessage from '../model/DBClusterParameterGroupNameMessage';
import DBClusterParameterGroupsMessage from '../model/DBClusterParameterGroupsMessage';
import DBClusterSnapshotMessage from '../model/DBClusterSnapshotMessage';
import DBEngineVersionMessage from '../model/DBEngineVersionMessage';
import DBInstanceMessage from '../model/DBInstanceMessage';
import DBParameterGroupDetails from '../model/DBParameterGroupDetails';
import DBParameterGroupNameMessage from '../model/DBParameterGroupNameMessage';
import DBParameterGroupsMessage from '../model/DBParameterGroupsMessage';
import DBSubnetGroupMessage from '../model/DBSubnetGroupMessage';
import DeleteDBClusterEndpointMessage from '../model/DeleteDBClusterEndpointMessage';
import DeleteDBClusterEndpointOutput from '../model/DeleteDBClusterEndpointOutput';
import DeleteDBClusterMessage from '../model/DeleteDBClusterMessage';
import DeleteDBClusterParameterGroupMessage from '../model/DeleteDBClusterParameterGroupMessage';
import DeleteDBClusterResult from '../model/DeleteDBClusterResult';
import DeleteDBClusterSnapshotMessage from '../model/DeleteDBClusterSnapshotMessage';
import DeleteDBClusterSnapshotResult from '../model/DeleteDBClusterSnapshotResult';
import DeleteDBInstanceMessage from '../model/DeleteDBInstanceMessage';
import DeleteDBInstanceResult from '../model/DeleteDBInstanceResult';
import DeleteDBParameterGroupMessage from '../model/DeleteDBParameterGroupMessage';
import DeleteDBSubnetGroupMessage from '../model/DeleteDBSubnetGroupMessage';
import DeleteEventSubscriptionMessage from '../model/DeleteEventSubscriptionMessage';
import DeleteEventSubscriptionResult from '../model/DeleteEventSubscriptionResult';
import DeleteGlobalClusterMessage from '../model/DeleteGlobalClusterMessage';
import DeleteGlobalClusterResult from '../model/DeleteGlobalClusterResult';
import DescribeDBClusterEndpointsMessage from '../model/DescribeDBClusterEndpointsMessage';
import DescribeDBClusterParameterGroupsMessage from '../model/DescribeDBClusterParameterGroupsMessage';
import DescribeDBClusterParametersMessage from '../model/DescribeDBClusterParametersMessage';
import DescribeDBClusterSnapshotAttributesMessage from '../model/DescribeDBClusterSnapshotAttributesMessage';
import DescribeDBClusterSnapshotAttributesResult from '../model/DescribeDBClusterSnapshotAttributesResult';
import DescribeDBClusterSnapshotsMessage from '../model/DescribeDBClusterSnapshotsMessage';
import DescribeDBClustersMessage from '../model/DescribeDBClustersMessage';
import DescribeDBEngineVersionsMessage from '../model/DescribeDBEngineVersionsMessage';
import DescribeDBInstancesMessage from '../model/DescribeDBInstancesMessage';
import DescribeDBParameterGroupsMessage from '../model/DescribeDBParameterGroupsMessage';
import DescribeDBParametersMessage from '../model/DescribeDBParametersMessage';
import DescribeDBSubnetGroupsMessage from '../model/DescribeDBSubnetGroupsMessage';
import DescribeEngineDefaultClusterParametersMessage from '../model/DescribeEngineDefaultClusterParametersMessage';
import DescribeEngineDefaultClusterParametersResult from '../model/DescribeEngineDefaultClusterParametersResult';
import DescribeEngineDefaultParametersMessage from '../model/DescribeEngineDefaultParametersMessage';
import DescribeEngineDefaultParametersResult from '../model/DescribeEngineDefaultParametersResult';
import DescribeEventCategoriesMessage from '../model/DescribeEventCategoriesMessage';
import DescribeEventSubscriptionsMessage from '../model/DescribeEventSubscriptionsMessage';
import DescribeEventsMessage from '../model/DescribeEventsMessage';
import DescribeGlobalClustersMessage from '../model/DescribeGlobalClustersMessage';
import DescribeOrderableDBInstanceOptionsMessage from '../model/DescribeOrderableDBInstanceOptionsMessage';
import DescribePendingMaintenanceActionsMessage from '../model/DescribePendingMaintenanceActionsMessage';
import DescribeValidDBInstanceModificationsMessage from '../model/DescribeValidDBInstanceModificationsMessage';
import DescribeValidDBInstanceModificationsResult from '../model/DescribeValidDBInstanceModificationsResult';
import EventCategoriesMessage from '../model/EventCategoriesMessage';
import EventSubscriptionsMessage from '../model/EventSubscriptionsMessage';
import EventsMessage from '../model/EventsMessage';
import FailoverDBClusterMessage from '../model/FailoverDBClusterMessage';
import FailoverDBClusterResult from '../model/FailoverDBClusterResult';
import FailoverGlobalClusterMessage from '../model/FailoverGlobalClusterMessage';
import FailoverGlobalClusterResult from '../model/FailoverGlobalClusterResult';
import GETAddTagsToResourceTagsParameterInner from '../model/GETAddTagsToResourceTagsParameterInner';
import GETCreateDBClusterServerlessV2ScalingConfigurationParameter from '../model/GETCreateDBClusterServerlessV2ScalingConfigurationParameter';
import GETDescribeDBClusterEndpointsFiltersParameterInner from '../model/GETDescribeDBClusterEndpointsFiltersParameterInner';
import GETModifyDBClusterCloudwatchLogsExportConfigurationParameter from '../model/GETModifyDBClusterCloudwatchLogsExportConfigurationParameter';
import GETModifyDBClusterParameterGroupParametersParameterInner from '../model/GETModifyDBClusterParameterGroupParametersParameterInner';
import GlobalClustersMessage from '../model/GlobalClustersMessage';
import ListTagsForResourceMessage from '../model/ListTagsForResourceMessage';
import ModifyDBClusterEndpointMessage from '../model/ModifyDBClusterEndpointMessage';
import ModifyDBClusterEndpointOutput from '../model/ModifyDBClusterEndpointOutput';
import ModifyDBClusterMessage from '../model/ModifyDBClusterMessage';
import ModifyDBClusterParameterGroupMessage from '../model/ModifyDBClusterParameterGroupMessage';
import ModifyDBClusterResult from '../model/ModifyDBClusterResult';
import ModifyDBClusterSnapshotAttributeMessage from '../model/ModifyDBClusterSnapshotAttributeMessage';
import ModifyDBClusterSnapshotAttributeResult from '../model/ModifyDBClusterSnapshotAttributeResult';
import ModifyDBInstanceMessage from '../model/ModifyDBInstanceMessage';
import ModifyDBInstanceResult from '../model/ModifyDBInstanceResult';
import ModifyDBParameterGroupMessage from '../model/ModifyDBParameterGroupMessage';
import ModifyDBSubnetGroupMessage from '../model/ModifyDBSubnetGroupMessage';
import ModifyDBSubnetGroupResult from '../model/ModifyDBSubnetGroupResult';
import ModifyEventSubscriptionMessage from '../model/ModifyEventSubscriptionMessage';
import ModifyEventSubscriptionResult from '../model/ModifyEventSubscriptionResult';
import ModifyGlobalClusterMessage from '../model/ModifyGlobalClusterMessage';
import ModifyGlobalClusterResult from '../model/ModifyGlobalClusterResult';
import OrderableDBInstanceOptionsMessage from '../model/OrderableDBInstanceOptionsMessage';
import PendingMaintenanceActionsMessage from '../model/PendingMaintenanceActionsMessage';
import PromoteReadReplicaDBClusterMessage from '../model/PromoteReadReplicaDBClusterMessage';
import PromoteReadReplicaDBClusterResult from '../model/PromoteReadReplicaDBClusterResult';
import RebootDBInstanceMessage from '../model/RebootDBInstanceMessage';
import RebootDBInstanceResult from '../model/RebootDBInstanceResult';
import RemoveFromGlobalClusterMessage from '../model/RemoveFromGlobalClusterMessage';
import RemoveFromGlobalClusterResult from '../model/RemoveFromGlobalClusterResult';
import RemoveRoleFromDBClusterMessage from '../model/RemoveRoleFromDBClusterMessage';
import RemoveSourceIdentifierFromSubscriptionMessage from '../model/RemoveSourceIdentifierFromSubscriptionMessage';
import RemoveSourceIdentifierFromSubscriptionResult from '../model/RemoveSourceIdentifierFromSubscriptionResult';
import RemoveTagsFromResourceMessage from '../model/RemoveTagsFromResourceMessage';
import ResetDBClusterParameterGroupMessage from '../model/ResetDBClusterParameterGroupMessage';
import ResetDBParameterGroupMessage from '../model/ResetDBParameterGroupMessage';
import RestoreDBClusterFromSnapshotMessage from '../model/RestoreDBClusterFromSnapshotMessage';
import RestoreDBClusterFromSnapshotResult from '../model/RestoreDBClusterFromSnapshotResult';
import RestoreDBClusterToPointInTimeMessage from '../model/RestoreDBClusterToPointInTimeMessage';
import RestoreDBClusterToPointInTimeResult from '../model/RestoreDBClusterToPointInTimeResult';
import StartDBClusterMessage from '../model/StartDBClusterMessage';
import StartDBClusterResult from '../model/StartDBClusterResult';
import StopDBClusterMessage from '../model/StopDBClusterMessage';
import StopDBClusterResult from '../model/StopDBClusterResult';
import TagListMessage from '../model/TagListMessage';

/**
* Default service.
* @module api/DefaultApi
* @version 2014-10-31
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gETAddRoleToDBCluster operation.
     * @callback module:api/DefaultApi~gETAddRoleToDBClusterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates an Identity and Access Management (IAM) role with an Neptune DB cluster.
     * @param {String} dBClusterIdentifier The name of the DB cluster to associate the IAM role with.
     * @param {String} roleArn The Amazon Resource Name (ARN) of the IAM role to associate with the Neptune DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [featureName] The name of the feature for the Neptune DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a href=\"neptune/latest/userguide/api-other-apis.html#DBEngineVersion\">DBEngineVersion</a>.
     * @param {module:api/DefaultApi~gETAddRoleToDBClusterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETAddRoleToDBCluster(dBClusterIdentifier, roleArn, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBClusterIdentifier' is set
      if (dBClusterIdentifier === undefined || dBClusterIdentifier === null) {
        throw new Error("Missing the required parameter 'dBClusterIdentifier' when calling gETAddRoleToDBCluster");
      }
      // verify the required parameter 'roleArn' is set
      if (roleArn === undefined || roleArn === null) {
        throw new Error("Missing the required parameter 'roleArn' when calling gETAddRoleToDBCluster");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETAddRoleToDBCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETAddRoleToDBCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBClusterIdentifier': dBClusterIdentifier,
        'RoleArn': roleArn,
        'FeatureName': opts['featureName'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=AddRoleToDBCluster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETAddSourceIdentifierToSubscription operation.
     * @callback module:api/DefaultApi~gETAddSourceIdentifierToSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddSourceIdentifierToSubscriptionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a source identifier to an existing event notification subscription.
     * @param {String} subscriptionName The name of the event notification subscription you want to add a source identifier to.
     * @param {String} sourceIdentifier <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETAddSourceIdentifierToSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddSourceIdentifierToSubscriptionResult}
     */
    gETAddSourceIdentifierToSubscription(subscriptionName, sourceIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionName' is set
      if (subscriptionName === undefined || subscriptionName === null) {
        throw new Error("Missing the required parameter 'subscriptionName' when calling gETAddSourceIdentifierToSubscription");
      }
      // verify the required parameter 'sourceIdentifier' is set
      if (sourceIdentifier === undefined || sourceIdentifier === null) {
        throw new Error("Missing the required parameter 'sourceIdentifier' when calling gETAddSourceIdentifierToSubscription");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETAddSourceIdentifierToSubscription");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETAddSourceIdentifierToSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
        'SubscriptionName': subscriptionName,
        'SourceIdentifier': sourceIdentifier,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = AddSourceIdentifierToSubscriptionResult;
      return this.apiClient.callApi(
        '/#Action=AddSourceIdentifierToSubscription', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETAddTagsToResource operation.
     * @callback module:api/DefaultApi~gETAddTagsToResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
     * @param {String} resourceName The Amazon Neptune resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a href=\"https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing\"> Constructing an Amazon Resource Name (ARN)</a>.
     * @param {Array.<module:model/GETAddTagsToResourceTagsParameterInner>} tags The tags to be assigned to the Amazon Neptune resource.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETAddTagsToResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETAddTagsToResource(resourceName, tags, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling gETAddTagsToResource");
      }
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling gETAddTagsToResource");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETAddTagsToResource");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETAddTagsToResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'ResourceName': resourceName,
        'Tags': this.apiClient.buildCollectionParam(tags, 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=AddTagsToResource', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETApplyPendingMaintenanceAction operation.
     * @callback module:api/DefaultApi~gETApplyPendingMaintenanceActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplyPendingMaintenanceActionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Applies a pending maintenance action to a resource (for example, to a DB instance).
     * @param {String} resourceIdentifier The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a href=\"https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing\"> Constructing an Amazon Resource Name (ARN)</a>.
     * @param {String} applyAction <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code> </p>
     * @param {String} optInType <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETApplyPendingMaintenanceActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplyPendingMaintenanceActionResult}
     */
    gETApplyPendingMaintenanceAction(resourceIdentifier, applyAction, optInType, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceIdentifier' is set
      if (resourceIdentifier === undefined || resourceIdentifier === null) {
        throw new Error("Missing the required parameter 'resourceIdentifier' when calling gETApplyPendingMaintenanceAction");
      }
      // verify the required parameter 'applyAction' is set
      if (applyAction === undefined || applyAction === null) {
        throw new Error("Missing the required parameter 'applyAction' when calling gETApplyPendingMaintenanceAction");
      }
      // verify the required parameter 'optInType' is set
      if (optInType === undefined || optInType === null) {
        throw new Error("Missing the required parameter 'optInType' when calling gETApplyPendingMaintenanceAction");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETApplyPendingMaintenanceAction");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETApplyPendingMaintenanceAction");
      }

      let pathParams = {
      };
      let queryParams = {
        'ResourceIdentifier': resourceIdentifier,
        'ApplyAction': applyAction,
        'OptInType': optInType,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ApplyPendingMaintenanceActionResult;
      return this.apiClient.callApi(
        '/#Action=ApplyPendingMaintenanceAction', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCopyDBClusterParameterGroup operation.
     * @callback module:api/DefaultApi~gETCopyDBClusterParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CopyDBClusterParameterGroupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copies the specified DB cluster parameter group.
     * @param {String} sourceDBClusterParameterGroupIdentifier <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a href=\"https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing\"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same Amazon Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different Amazon Region than the copy, specify a valid DB cluster parameter group ARN, for example <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
     * @param {String} targetDBClusterParameterGroupIdentifier <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
     * @param {String} targetDBClusterParameterGroupDescription A description for the copied DB cluster parameter group.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<module:model/GETAddTagsToResourceTagsParameterInner>} [tags] The tags to be assigned to the copied DB cluster parameter group.
     * @param {module:api/DefaultApi~gETCopyDBClusterParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CopyDBClusterParameterGroupResult}
     */
    gETCopyDBClusterParameterGroup(sourceDBClusterParameterGroupIdentifier, targetDBClusterParameterGroupIdentifier, targetDBClusterParameterGroupDescription, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sourceDBClusterParameterGroupIdentifier' is set
      if (sourceDBClusterParameterGroupIdentifier === undefined || sourceDBClusterParameterGroupIdentifier === null) {
        throw new Error("Missing the required parameter 'sourceDBClusterParameterGroupIdentifier' when calling gETCopyDBClusterParameterGroup");
      }
      // verify the required parameter 'targetDBClusterParameterGroupIdentifier' is set
      if (targetDBClusterParameterGroupIdentifier === undefined || targetDBClusterParameterGroupIdentifier === null) {
        throw new Error("Missing the required parameter 'targetDBClusterParameterGroupIdentifier' when calling gETCopyDBClusterParameterGroup");
      }
      // verify the required parameter 'targetDBClusterParameterGroupDescription' is set
      if (targetDBClusterParameterGroupDescription === undefined || targetDBClusterParameterGroupDescription === null) {
        throw new Error("Missing the required parameter 'targetDBClusterParameterGroupDescription' when calling gETCopyDBClusterParameterGroup");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCopyDBClusterParameterGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCopyDBClusterParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'SourceDBClusterParameterGroupIdentifier': sourceDBClusterParameterGroupIdentifier,
        'TargetDBClusterParameterGroupIdentifier': targetDBClusterParameterGroupIdentifier,
        'TargetDBClusterParameterGroupDescription': targetDBClusterParameterGroupDescription,
        'Tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CopyDBClusterParameterGroupResult;
      return this.apiClient.callApi(
        '/#Action=CopyDBClusterParameterGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCopyDBClusterSnapshot operation.
     * @callback module:api/DefaultApi~gETCopyDBClusterSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CopyDBClusterSnapshotResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p>
     * @param {String} sourceDBClusterSnapshotIdentifier <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the \"available\" state.</p> </li> <li> <p>Specify a valid DB snapshot identifier.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
     * @param {String} targetDBClusterSnapshotIdentifier <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [kmsKeyId] <p>The Amazon Amazon KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you copy an encrypted DB cluster snapshot from your Amazon account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.</p> <p>If you copy an encrypted DB cluster snapshot that is shared from another Amazon account, then you must specify a value for <code>KmsKeyId</code>.</p> <p> KMS encryption keys are specific to the Amazon Region that they are created in, and you can't use encryption keys from one Amazon Region in another Amazon Region.</p> <p>You cannot encrypt an unencrypted DB cluster snapshot when you copy it. If you try to copy an unencrypted DB cluster snapshot and specify a value for the KmsKeyId parameter, an error is returned.</p>
     * @param {String} [preSignedUrl] Not currently supported.
     * @param {Boolean} [copyTags] True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.
     * @param {Array.<module:model/GETAddTagsToResourceTagsParameterInner>} [tags] The tags to assign to the new DB cluster snapshot copy.
     * @param {module:api/DefaultApi~gETCopyDBClusterSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CopyDBClusterSnapshotResult}
     */
    gETCopyDBClusterSnapshot(sourceDBClusterSnapshotIdentifier, targetDBClusterSnapshotIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sourceDBClusterSnapshotIdentifier' is set
      if (sourceDBClusterSnapshotIdentifier === undefined || sourceDBClusterSnapshotIdentifier === null) {
        throw new Error("Missing the required parameter 'sourceDBClusterSnapshotIdentifier' when calling gETCopyDBClusterSnapshot");
      }
      // verify the required parameter 'targetDBClusterSnapshotIdentifier' is set
      if (targetDBClusterSnapshotIdentifier === undefined || targetDBClusterSnapshotIdentifier === null) {
        throw new Error("Missing the required parameter 'targetDBClusterSnapshotIdentifier' when calling gETCopyDBClusterSnapshot");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCopyDBClusterSnapshot");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCopyDBClusterSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
        'SourceDBClusterSnapshotIdentifier': sourceDBClusterSnapshotIdentifier,
        'TargetDBClusterSnapshotIdentifier': targetDBClusterSnapshotIdentifier,
        'KmsKeyId': opts['kmsKeyId'],
        'PreSignedUrl': opts['preSignedUrl'],
        'CopyTags': opts['copyTags'],
        'Tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CopyDBClusterSnapshotResult;
      return this.apiClient.callApi(
        '/#Action=CopyDBClusterSnapshot', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCopyDBParameterGroup operation.
     * @callback module:api/DefaultApi~gETCopyDBParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CopyDBParameterGroupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copies the specified DB parameter group.
     * @param {String} sourceDBParameterGroupIdentifier <p>The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a href=\"https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing\"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
     * @param {String} targetDBParameterGroupIdentifier <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
     * @param {String} targetDBParameterGroupDescription A description for the copied DB parameter group.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<module:model/GETAddTagsToResourceTagsParameterInner>} [tags] The tags to be assigned to the copied DB parameter group.
     * @param {module:api/DefaultApi~gETCopyDBParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CopyDBParameterGroupResult}
     */
    gETCopyDBParameterGroup(sourceDBParameterGroupIdentifier, targetDBParameterGroupIdentifier, targetDBParameterGroupDescription, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sourceDBParameterGroupIdentifier' is set
      if (sourceDBParameterGroupIdentifier === undefined || sourceDBParameterGroupIdentifier === null) {
        throw new Error("Missing the required parameter 'sourceDBParameterGroupIdentifier' when calling gETCopyDBParameterGroup");
      }
      // verify the required parameter 'targetDBParameterGroupIdentifier' is set
      if (targetDBParameterGroupIdentifier === undefined || targetDBParameterGroupIdentifier === null) {
        throw new Error("Missing the required parameter 'targetDBParameterGroupIdentifier' when calling gETCopyDBParameterGroup");
      }
      // verify the required parameter 'targetDBParameterGroupDescription' is set
      if (targetDBParameterGroupDescription === undefined || targetDBParameterGroupDescription === null) {
        throw new Error("Missing the required parameter 'targetDBParameterGroupDescription' when calling gETCopyDBParameterGroup");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCopyDBParameterGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCopyDBParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'SourceDBParameterGroupIdentifier': sourceDBParameterGroupIdentifier,
        'TargetDBParameterGroupIdentifier': targetDBParameterGroupIdentifier,
        'TargetDBParameterGroupDescription': targetDBParameterGroupDescription,
        'Tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CopyDBParameterGroupResult;
      return this.apiClient.callApi(
        '/#Action=CopyDBParameterGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateDBCluster operation.
     * @callback module:api/DefaultApi~gETCreateDBClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDBClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p> <p>Note that when you create a new cluster using <code>CreateDBCluster</code> directly, deletion protection is disabled by default (when you create a new production cluster in the console, deletion protection is enabled by default). You can only delete a DB cluster if its <code>DeletionProtection</code> field is set to <code>false</code>.</p>
     * @param {String} dBClusterIdentifier <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
     * @param {String} engine <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>neptune</code> </p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<String>} [availabilityZones] A list of EC2 Availability Zones that instances in the DB cluster can be created in.
     * @param {Number} [backupRetentionPeriod] <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
     * @param {String} [characterSetName]  <i>(Not supported by Neptune)</i> 
     * @param {Boolean} [copyTagsToSnapshot]  <i>If set to <code>true</code>, tags are copied to any snapshot of the DB cluster that is created.</i> 
     * @param {String} [databaseName] The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Neptune will not create a database in the DB cluster you are creating.
     * @param {String} [dBClusterParameterGroupName] <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
     * @param {Array.<String>} [vpcSecurityGroupIds] A list of EC2 VPC security groups to associate with this DB cluster.
     * @param {String} [dBSubnetGroupName] <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
     * @param {String} [engineVersion] <p>The version number of the database engine to use for the new DB cluster.</p> <p>Example: <code>1.0.2.1</code> </p>
     * @param {Number} [port] <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>8182</code> </p>
     * @param {String} [masterUsername] Not supported by Neptune.
     * @param {String} [masterUserPassword] Not supported by Neptune.
     * @param {String} [optionGroupName]  <i>(Not supported by Neptune)</i> 
     * @param {String} [preferredBackupWindow] <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region. To see the time blocks available, see <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html\"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
     * @param {String} [preferredMaintenanceWindow] <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region, occurring on a random day of the week. To see the time blocks available, see <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html\"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
     * @param {String} [replicationSourceIdentifier] The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
     * @param {Array.<module:model/GETAddTagsToResourceTagsParameterInner>} [tags] The tags to assign to the new DB cluster.
     * @param {Boolean} [storageEncrypted] Specifies whether the DB cluster is encrypted.
     * @param {String} [kmsKeyId] <p>The Amazon KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same Amazon account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune will use your default encryption key.</p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is true and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon Neptune will use your default encryption key.</p> </li> </ul> <p>Amazon KMS creates the default encryption key for your Amazon account. Your Amazon account has a different default encryption key for each Amazon Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another Amazon Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination Amazon Region. This key is used to encrypt the Read Replica in that Amazon Region.</p>
     * @param {String} [preSignedUrl] This parameter is not currently supported.
     * @param {Boolean} [enableIAMDatabaseAuthentication] <p>If set to <code>true</code>, enables Amazon Identity and Access Management (IAM) authentication for the entire DB cluster (this cannot be set at an instance level).</p> <p>Default: <code>false</code>.</p>
     * @param {Array.<String>} [enableCloudwatchLogsExports] The list of log types that need to be enabled for exporting to CloudWatch Logs.
     * @param {Boolean} [deletionProtection] A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is enabled.
     * @param {module:model/GETCreateDBClusterServerlessV2ScalingConfigurationParameter} [serverlessV2ScalingConfiguration] 
     * @param {String} [globalClusterIdentifier] The ID of the Neptune global database to which this new DB cluster should be added.
     * @param {module:api/DefaultApi~gETCreateDBClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDBClusterResult}
     */
    gETCreateDBCluster(dBClusterIdentifier, engine, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBClusterIdentifier' is set
      if (dBClusterIdentifier === undefined || dBClusterIdentifier === null) {
        throw new Error("Missing the required parameter 'dBClusterIdentifier' when calling gETCreateDBCluster");
      }
      // verify the required parameter 'engine' is set
      if (engine === undefined || engine === null) {
        throw new Error("Missing the required parameter 'engine' when calling gETCreateDBCluster");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateDBCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateDBCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'AvailabilityZones': this.apiClient.buildCollectionParam(opts['availabilityZones'], 'multi'),
        'BackupRetentionPeriod': opts['backupRetentionPeriod'],
        'CharacterSetName': opts['characterSetName'],
        'CopyTagsToSnapshot': opts['copyTagsToSnapshot'],
        'DatabaseName': opts['databaseName'],
        'DBClusterIdentifier': dBClusterIdentifier,
        'DBClusterParameterGroupName': opts['dBClusterParameterGroupName'],
        'VpcSecurityGroupIds': this.apiClient.buildCollectionParam(opts['vpcSecurityGroupIds'], 'multi'),
        'DBSubnetGroupName': opts['dBSubnetGroupName'],
        'Engine': engine,
        'EngineVersion': opts['engineVersion'],
        'Port': opts['port'],
        'MasterUsername': opts['masterUsername'],
        'MasterUserPassword': opts['masterUserPassword'],
        'OptionGroupName': opts['optionGroupName'],
        'PreferredBackupWindow': opts['preferredBackupWindow'],
        'PreferredMaintenanceWindow': opts['preferredMaintenanceWindow'],
        'ReplicationSourceIdentifier': opts['replicationSourceIdentifier'],
        'Tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'StorageEncrypted': opts['storageEncrypted'],
        'KmsKeyId': opts['kmsKeyId'],
        'PreSignedUrl': opts['preSignedUrl'],
        'EnableIAMDatabaseAuthentication': opts['enableIAMDatabaseAuthentication'],
        'EnableCloudwatchLogsExports': this.apiClient.buildCollectionParam(opts['enableCloudwatchLogsExports'], 'multi'),
        'DeletionProtection': opts['deletionProtection'],
        'ServerlessV2ScalingConfiguration': opts['serverlessV2ScalingConfiguration'],
        'GlobalClusterIdentifier': opts['globalClusterIdentifier'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CreateDBClusterResult;
      return this.apiClient.callApi(
        '/#Action=CreateDBCluster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateDBClusterEndpoint operation.
     * @callback module:api/DefaultApi~gETCreateDBClusterEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDBClusterEndpointOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new custom endpoint and associates it with an Amazon Neptune DB cluster.
     * @param {String} dBClusterIdentifier The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
     * @param {String} dBClusterEndpointIdentifier The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
     * @param {String} endpointType The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<String>} [staticMembers] List of DB instance identifiers that are part of the custom endpoint group.
     * @param {Array.<String>} [excludedMembers] List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
     * @param {Array.<module:model/GETAddTagsToResourceTagsParameterInner>} [tags] The tags to be assigned to the Amazon Neptune resource.
     * @param {module:api/DefaultApi~gETCreateDBClusterEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDBClusterEndpointOutput}
     */
    gETCreateDBClusterEndpoint(dBClusterIdentifier, dBClusterEndpointIdentifier, endpointType, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBClusterIdentifier' is set
      if (dBClusterIdentifier === undefined || dBClusterIdentifier === null) {
        throw new Error("Missing the required parameter 'dBClusterIdentifier' when calling gETCreateDBClusterEndpoint");
      }
      // verify the required parameter 'dBClusterEndpointIdentifier' is set
      if (dBClusterEndpointIdentifier === undefined || dBClusterEndpointIdentifier === null) {
        throw new Error("Missing the required parameter 'dBClusterEndpointIdentifier' when calling gETCreateDBClusterEndpoint");
      }
      // verify the required parameter 'endpointType' is set
      if (endpointType === undefined || endpointType === null) {
        throw new Error("Missing the required parameter 'endpointType' when calling gETCreateDBClusterEndpoint");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateDBClusterEndpoint");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateDBClusterEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBClusterIdentifier': dBClusterIdentifier,
        'DBClusterEndpointIdentifier': dBClusterEndpointIdentifier,
        'EndpointType': endpointType,
        'StaticMembers': this.apiClient.buildCollectionParam(opts['staticMembers'], 'multi'),
        'ExcludedMembers': this.apiClient.buildCollectionParam(opts['excludedMembers'], 'multi'),
        'Tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CreateDBClusterEndpointOutput;
      return this.apiClient.callApi(
        '/#Action=CreateDBClusterEndpoint', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateDBClusterParameterGroup operation.
     * @callback module:api/DefaultApi~gETCreateDBClusterParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDBClusterParameterGroupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href=\"https://console.aws.amazon.com/rds/\">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
     * @param {String} dBClusterParameterGroupName <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBClusterParameterGroup.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
     * @param {String} dBParameterGroupFamily The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.
     * @param {String} description The description for the DB cluster parameter group.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<module:model/GETAddTagsToResourceTagsParameterInner>} [tags] The tags to be assigned to the new DB cluster parameter group.
     * @param {module:api/DefaultApi~gETCreateDBClusterParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDBClusterParameterGroupResult}
     */
    gETCreateDBClusterParameterGroup(dBClusterParameterGroupName, dBParameterGroupFamily, description, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBClusterParameterGroupName' is set
      if (dBClusterParameterGroupName === undefined || dBClusterParameterGroupName === null) {
        throw new Error("Missing the required parameter 'dBClusterParameterGroupName' when calling gETCreateDBClusterParameterGroup");
      }
      // verify the required parameter 'dBParameterGroupFamily' is set
      if (dBParameterGroupFamily === undefined || dBParameterGroupFamily === null) {
        throw new Error("Missing the required parameter 'dBParameterGroupFamily' when calling gETCreateDBClusterParameterGroup");
      }
      // verify the required parameter 'description' is set
      if (description === undefined || description === null) {
        throw new Error("Missing the required parameter 'description' when calling gETCreateDBClusterParameterGroup");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateDBClusterParameterGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateDBClusterParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBClusterParameterGroupName': dBClusterParameterGroupName,
        'DBParameterGroupFamily': dBParameterGroupFamily,
        'Description': description,
        'Tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CreateDBClusterParameterGroupResult;
      return this.apiClient.callApi(
        '/#Action=CreateDBClusterParameterGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateDBClusterSnapshot operation.
     * @callback module:api/DefaultApi~gETCreateDBClusterSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDBClusterSnapshotResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a snapshot of a DB cluster.
     * @param {String} dBClusterSnapshotIdentifier <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
     * @param {String} dBClusterIdentifier <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<module:model/GETAddTagsToResourceTagsParameterInner>} [tags] The tags to be assigned to the DB cluster snapshot.
     * @param {module:api/DefaultApi~gETCreateDBClusterSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDBClusterSnapshotResult}
     */
    gETCreateDBClusterSnapshot(dBClusterSnapshotIdentifier, dBClusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBClusterSnapshotIdentifier' is set
      if (dBClusterSnapshotIdentifier === undefined || dBClusterSnapshotIdentifier === null) {
        throw new Error("Missing the required parameter 'dBClusterSnapshotIdentifier' when calling gETCreateDBClusterSnapshot");
      }
      // verify the required parameter 'dBClusterIdentifier' is set
      if (dBClusterIdentifier === undefined || dBClusterIdentifier === null) {
        throw new Error("Missing the required parameter 'dBClusterIdentifier' when calling gETCreateDBClusterSnapshot");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateDBClusterSnapshot");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateDBClusterSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBClusterSnapshotIdentifier': dBClusterSnapshotIdentifier,
        'DBClusterIdentifier': dBClusterIdentifier,
        'Tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CreateDBClusterSnapshotResult;
      return this.apiClient.callApi(
        '/#Action=CreateDBClusterSnapshot', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateDBInstance operation.
     * @callback module:api/DefaultApi~gETCreateDBInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDBInstanceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new DB instance.
     * @param {String} dBInstanceIdentifier <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
     * @param {String} dBInstanceClass The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all Amazon Regions.
     * @param {String} engine <p>The name of the database engine to be used for this instance.</p> <p>Valid Values: <code>neptune</code> </p>
     * @param {String} dBClusterIdentifier <p>The identifier of the DB cluster that the instance will belong to.</p> <p>For information on creating a DB cluster, see <a>CreateDBCluster</a>.</p> <p>Type: String</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [dBName] Not supported.
     * @param {Number} [allocatedStorage] Not supported by Neptune.
     * @param {String} [masterUsername] Not supported by Neptune.
     * @param {String} [masterUserPassword] Not supported by Neptune.
     * @param {Array.<String>} [dBSecurityGroups] <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
     * @param {Array.<String>} [vpcSecurityGroupIds] <p>A list of EC2 VPC security groups to associate with this DB instance.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
     * @param {String} [availabilityZone] <p> The EC2 Availability Zone that the DB instance is created in</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's Amazon Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to <code>true</code>. The specified Availability Zone must be in the same Amazon Region as the current endpoint.</p>
     * @param {String} [dBSubnetGroupName] <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
     * @param {String} [preferredMaintenanceWindow] <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
     * @param {String} [dBParameterGroupName] <p>The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
     * @param {Number} [backupRetentionPeriod] <p>The number of days for which automated backups are retained.</p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Cannot be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
     * @param {String} [preferredBackupWindow] <p> The daily time range during which automated backups are created.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
     * @param {Number} [port] <p>The port number on which the database accepts connections.</p> <p>Not applicable. The port is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p> Default: <code>8182</code> </p> <p>Type: Integer</p>
     * @param {Boolean} [multiAZ] Specifies if the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.
     * @param {String} [engineVersion] The version number of the database engine to use. Currently, setting this parameter has no effect.
     * @param {Boolean} [autoMinorVersionUpgrade] <p>Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window.</p> <p>Default: <code>true</code> </p>
     * @param {String} [licenseModel] <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
     * @param {Number} [iops] The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
     * @param {String} [optionGroupName]  <i>(Not supported by Neptune)</i> 
     * @param {String} [characterSetName]  <i>(Not supported by Neptune)</i> 
     * @param {Boolean} [publiclyAccessible] This flag should no longer be used.
     * @param {Array.<module:model/GETAddTagsToResourceTagsParameterInner>} [tags] The tags to assign to the new instance.
     * @param {String} [storageType] <p>Specifies the storage type to be associated with the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
     * @param {String} [tdeCredentialArn] The ARN from the key store with which to associate the instance for TDE encryption.
     * @param {String} [tdeCredentialPassword] The password for the given ARN from the key store in order to access the device.
     * @param {Boolean} [storageEncrypted] <p>Specifies whether the DB instance is encrypted.</p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: false</p>
     * @param {String} [kmsKeyId] <p>The Amazon KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same Amazon account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>If the <code>StorageEncrypted</code> parameter is true, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon Neptune will use your default encryption key. Amazon KMS creates the default encryption key for your Amazon account. Your Amazon account has a different default encryption key for each Amazon Region.</p>
     * @param {String} [domain] Specify the Active Directory Domain to create the instance in.
     * @param {Boolean} [copyTagsToSnapshot] True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
     * @param {Number} [monitoringInterval] <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
     * @param {String} [monitoringRoleArn] <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
     * @param {String} [domainIAMRoleName] Specify the name of the IAM role to be used when making API calls to the Directory Service.
     * @param {Number} [promotionTier] <p>A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
     * @param {String} [timezone] The time zone of the DB instance.
     * @param {Boolean} [enableIAMDatabaseAuthentication] Not supported by Neptune (ignored).
     * @param {Boolean} [enablePerformanceInsights]  <i>(Not supported by Neptune)</i> 
     * @param {String} [performanceInsightsKMSKeyId]  <i>(Not supported by Neptune)</i> 
     * @param {Array.<String>} [enableCloudwatchLogsExports] The list of log types that need to be enabled for exporting to CloudWatch Logs.
     * @param {Boolean} [deletionProtection] <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. See <a href=\"https://docs.aws.amazon.com/neptune/latest/userguide/manage-console-instances-delete.html\">Deleting a DB Instance</a>.</p> <p>DB instances in a DB cluster can be deleted even when deletion protection is enabled in their parent DB cluster.</p>
     * @param {module:api/DefaultApi~gETCreateDBInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDBInstanceResult}
     */
    gETCreateDBInstance(dBInstanceIdentifier, dBInstanceClass, engine, dBClusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBInstanceIdentifier' is set
      if (dBInstanceIdentifier === undefined || dBInstanceIdentifier === null) {
        throw new Error("Missing the required parameter 'dBInstanceIdentifier' when calling gETCreateDBInstance");
      }
      // verify the required parameter 'dBInstanceClass' is set
      if (dBInstanceClass === undefined || dBInstanceClass === null) {
        throw new Error("Missing the required parameter 'dBInstanceClass' when calling gETCreateDBInstance");
      }
      // verify the required parameter 'engine' is set
      if (engine === undefined || engine === null) {
        throw new Error("Missing the required parameter 'engine' when calling gETCreateDBInstance");
      }
      // verify the required parameter 'dBClusterIdentifier' is set
      if (dBClusterIdentifier === undefined || dBClusterIdentifier === null) {
        throw new Error("Missing the required parameter 'dBClusterIdentifier' when calling gETCreateDBInstance");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateDBInstance");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateDBInstance");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBName': opts['dBName'],
        'DBInstanceIdentifier': dBInstanceIdentifier,
        'AllocatedStorage': opts['allocatedStorage'],
        'DBInstanceClass': dBInstanceClass,
        'Engine': engine,
        'MasterUsername': opts['masterUsername'],
        'MasterUserPassword': opts['masterUserPassword'],
        'DBSecurityGroups': this.apiClient.buildCollectionParam(opts['dBSecurityGroups'], 'multi'),
        'VpcSecurityGroupIds': this.apiClient.buildCollectionParam(opts['vpcSecurityGroupIds'], 'multi'),
        'AvailabilityZone': opts['availabilityZone'],
        'DBSubnetGroupName': opts['dBSubnetGroupName'],
        'PreferredMaintenanceWindow': opts['preferredMaintenanceWindow'],
        'DBParameterGroupName': opts['dBParameterGroupName'],
        'BackupRetentionPeriod': opts['backupRetentionPeriod'],
        'PreferredBackupWindow': opts['preferredBackupWindow'],
        'Port': opts['port'],
        'MultiAZ': opts['multiAZ'],
        'EngineVersion': opts['engineVersion'],
        'AutoMinorVersionUpgrade': opts['autoMinorVersionUpgrade'],
        'LicenseModel': opts['licenseModel'],
        'Iops': opts['iops'],
        'OptionGroupName': opts['optionGroupName'],
        'CharacterSetName': opts['characterSetName'],
        'PubliclyAccessible': opts['publiclyAccessible'],
        'Tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'DBClusterIdentifier': dBClusterIdentifier,
        'StorageType': opts['storageType'],
        'TdeCredentialArn': opts['tdeCredentialArn'],
        'TdeCredentialPassword': opts['tdeCredentialPassword'],
        'StorageEncrypted': opts['storageEncrypted'],
        'KmsKeyId': opts['kmsKeyId'],
        'Domain': opts['domain'],
        'CopyTagsToSnapshot': opts['copyTagsToSnapshot'],
        'MonitoringInterval': opts['monitoringInterval'],
        'MonitoringRoleArn': opts['monitoringRoleArn'],
        'DomainIAMRoleName': opts['domainIAMRoleName'],
        'PromotionTier': opts['promotionTier'],
        'Timezone': opts['timezone'],
        'EnableIAMDatabaseAuthentication': opts['enableIAMDatabaseAuthentication'],
        'EnablePerformanceInsights': opts['enablePerformanceInsights'],
        'PerformanceInsightsKMSKeyId': opts['performanceInsightsKMSKeyId'],
        'EnableCloudwatchLogsExports': this.apiClient.buildCollectionParam(opts['enableCloudwatchLogsExports'], 'multi'),
        'DeletionProtection': opts['deletionProtection'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CreateDBInstanceResult;
      return this.apiClient.callApi(
        '/#Action=CreateDBInstance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateDBParameterGroup operation.
     * @callback module:api/DefaultApi~gETCreateDBParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDBParameterGroupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
     * @param {String} dBParameterGroupName <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
     * @param {String} dBParameterGroupFamily The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.
     * @param {String} description The description for the DB parameter group.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<module:model/GETAddTagsToResourceTagsParameterInner>} [tags] The tags to be assigned to the new DB parameter group.
     * @param {module:api/DefaultApi~gETCreateDBParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDBParameterGroupResult}
     */
    gETCreateDBParameterGroup(dBParameterGroupName, dBParameterGroupFamily, description, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBParameterGroupName' is set
      if (dBParameterGroupName === undefined || dBParameterGroupName === null) {
        throw new Error("Missing the required parameter 'dBParameterGroupName' when calling gETCreateDBParameterGroup");
      }
      // verify the required parameter 'dBParameterGroupFamily' is set
      if (dBParameterGroupFamily === undefined || dBParameterGroupFamily === null) {
        throw new Error("Missing the required parameter 'dBParameterGroupFamily' when calling gETCreateDBParameterGroup");
      }
      // verify the required parameter 'description' is set
      if (description === undefined || description === null) {
        throw new Error("Missing the required parameter 'description' when calling gETCreateDBParameterGroup");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateDBParameterGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateDBParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBParameterGroupName': dBParameterGroupName,
        'DBParameterGroupFamily': dBParameterGroupFamily,
        'Description': description,
        'Tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CreateDBParameterGroupResult;
      return this.apiClient.callApi(
        '/#Action=CreateDBParameterGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateDBSubnetGroup operation.
     * @callback module:api/DefaultApi~gETCreateDBSubnetGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDBSubnetGroupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the Amazon Region.
     * @param {String} dBSubnetGroupName <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
     * @param {String} dBSubnetGroupDescription The description for the DB subnet group.
     * @param {Array.<String>} subnetIds The EC2 Subnet IDs for the DB subnet group.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<module:model/GETAddTagsToResourceTagsParameterInner>} [tags] The tags to be assigned to the new DB subnet group.
     * @param {module:api/DefaultApi~gETCreateDBSubnetGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDBSubnetGroupResult}
     */
    gETCreateDBSubnetGroup(dBSubnetGroupName, dBSubnetGroupDescription, subnetIds, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBSubnetGroupName' is set
      if (dBSubnetGroupName === undefined || dBSubnetGroupName === null) {
        throw new Error("Missing the required parameter 'dBSubnetGroupName' when calling gETCreateDBSubnetGroup");
      }
      // verify the required parameter 'dBSubnetGroupDescription' is set
      if (dBSubnetGroupDescription === undefined || dBSubnetGroupDescription === null) {
        throw new Error("Missing the required parameter 'dBSubnetGroupDescription' when calling gETCreateDBSubnetGroup");
      }
      // verify the required parameter 'subnetIds' is set
      if (subnetIds === undefined || subnetIds === null) {
        throw new Error("Missing the required parameter 'subnetIds' when calling gETCreateDBSubnetGroup");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateDBSubnetGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateDBSubnetGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBSubnetGroupName': dBSubnetGroupName,
        'DBSubnetGroupDescription': dBSubnetGroupDescription,
        'SubnetIds': this.apiClient.buildCollectionParam(subnetIds, 'multi'),
        'Tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CreateDBSubnetGroupResult;
      return this.apiClient.callApi(
        '/#Action=CreateDBSubnetGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateEventSubscription operation.
     * @callback module:api/DefaultApi~gETCreateEventSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateEventSubscriptionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
     * @param {String} subscriptionName <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
     * @param {String} snsTopicArn The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [sourceType] <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
     * @param {Array.<String>} [eventCategories]  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
     * @param {Array.<String>} [sourceIds] <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
     * @param {Boolean} [enabled]  A Boolean value; set to <b>true</b> to activate the subscription, set to <b>false</b> to create the subscription but not active it.
     * @param {Array.<module:model/GETAddTagsToResourceTagsParameterInner>} [tags] The tags to be applied to the new event subscription.
     * @param {module:api/DefaultApi~gETCreateEventSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateEventSubscriptionResult}
     */
    gETCreateEventSubscription(subscriptionName, snsTopicArn, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionName' is set
      if (subscriptionName === undefined || subscriptionName === null) {
        throw new Error("Missing the required parameter 'subscriptionName' when calling gETCreateEventSubscription");
      }
      // verify the required parameter 'snsTopicArn' is set
      if (snsTopicArn === undefined || snsTopicArn === null) {
        throw new Error("Missing the required parameter 'snsTopicArn' when calling gETCreateEventSubscription");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateEventSubscription");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateEventSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
        'SubscriptionName': subscriptionName,
        'SnsTopicArn': snsTopicArn,
        'SourceType': opts['sourceType'],
        'EventCategories': this.apiClient.buildCollectionParam(opts['eventCategories'], 'multi'),
        'SourceIds': this.apiClient.buildCollectionParam(opts['sourceIds'], 'multi'),
        'Enabled': opts['enabled'],
        'Tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CreateEventSubscriptionResult;
      return this.apiClient.callApi(
        '/#Action=CreateEventSubscription', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateGlobalCluster operation.
     * @callback module:api/DefaultApi~gETCreateGlobalClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateGlobalClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a Neptune global database spread across multiple Amazon Regions. The global database contains a single primary cluster with read-write capability, and read-only secondary clusters that receive data from the primary cluster through high-speed replication performed by the Neptune storage subsystem.</p> <p>You can create a global database that is initially empty, and then add a primary cluster and secondary clusters to it, or you can specify an existing Neptune cluster during the create operation to become the primary cluster of the global database.</p>
     * @param {String} globalClusterIdentifier The cluster identifier of the new global database cluster.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [sourceDBClusterIdentifier] (<i>Optional</i>) The Amazon Resource Name (ARN) of an existing Neptune DB cluster to use as the primary cluster of the new global database.
     * @param {String} [engine] <p>The name of the database engine to be used in the global database.</p> <p>Valid values: <code>neptune</code> </p>
     * @param {String} [engineVersion] <p>The Neptune engine version to be used by the global database.</p> <p>Valid values: <code>1.2.0.0</code> or above.</p>
     * @param {Boolean} [deletionProtection] The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled.
     * @param {Boolean} [storageEncrypted] The storage encryption setting for the new global database cluster.
     * @param {module:api/DefaultApi~gETCreateGlobalClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateGlobalClusterResult}
     */
    gETCreateGlobalCluster(globalClusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'globalClusterIdentifier' is set
      if (globalClusterIdentifier === undefined || globalClusterIdentifier === null) {
        throw new Error("Missing the required parameter 'globalClusterIdentifier' when calling gETCreateGlobalCluster");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateGlobalCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateGlobalCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'GlobalClusterIdentifier': globalClusterIdentifier,
        'SourceDBClusterIdentifier': opts['sourceDBClusterIdentifier'],
        'Engine': opts['engine'],
        'EngineVersion': opts['engineVersion'],
        'DeletionProtection': opts['deletionProtection'],
        'StorageEncrypted': opts['storageEncrypted'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CreateGlobalClusterResult;
      return this.apiClient.callApi(
        '/#Action=CreateGlobalCluster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteDBCluster operation.
     * @callback module:api/DefaultApi~gETDeleteDBClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteDBClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p>Note that the DB Cluster cannot be deleted if deletion protection is enabled. To delete it, you must first set its <code>DeletionProtection</code> field to <code>False</code>.</p>
     * @param {String} dBClusterIdentifier <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [skipFinalSnapshot] <p> Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If <code>true</code> is specified, no DB cluster snapshot is created. If <code>false</code> is specified, a DB cluster snapshot is created before the DB cluster is deleted.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
     * @param {String} [finalDBSnapshotIdentifier] <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is set to <code>false</code>.</p> <note> <p> Specifying this parameter and also setting the <code>SkipFinalShapshot</code> parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
     * @param {module:api/DefaultApi~gETDeleteDBClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteDBClusterResult}
     */
    gETDeleteDBCluster(dBClusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBClusterIdentifier' is set
      if (dBClusterIdentifier === undefined || dBClusterIdentifier === null) {
        throw new Error("Missing the required parameter 'dBClusterIdentifier' when calling gETDeleteDBCluster");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteDBCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteDBCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBClusterIdentifier': dBClusterIdentifier,
        'SkipFinalSnapshot': opts['skipFinalSnapshot'],
        'FinalDBSnapshotIdentifier': opts['finalDBSnapshotIdentifier'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DeleteDBClusterResult;
      return this.apiClient.callApi(
        '/#Action=DeleteDBCluster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteDBClusterEndpoint operation.
     * @callback module:api/DefaultApi~gETDeleteDBClusterEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteDBClusterEndpointOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a custom endpoint and removes it from an Amazon Neptune DB cluster.
     * @param {String} dBClusterEndpointIdentifier The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteDBClusterEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteDBClusterEndpointOutput}
     */
    gETDeleteDBClusterEndpoint(dBClusterEndpointIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBClusterEndpointIdentifier' is set
      if (dBClusterEndpointIdentifier === undefined || dBClusterEndpointIdentifier === null) {
        throw new Error("Missing the required parameter 'dBClusterEndpointIdentifier' when calling gETDeleteDBClusterEndpoint");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteDBClusterEndpoint");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteDBClusterEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBClusterEndpointIdentifier': dBClusterEndpointIdentifier,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DeleteDBClusterEndpointOutput;
      return this.apiClient.callApi(
        '/#Action=DeleteDBClusterEndpoint', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteDBClusterParameterGroup operation.
     * @callback module:api/DefaultApi~gETDeleteDBClusterParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
     * @param {String} dBClusterParameterGroupName <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Cannot be associated with any DB clusters.</p> </li> </ul>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteDBClusterParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETDeleteDBClusterParameterGroup(dBClusterParameterGroupName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBClusterParameterGroupName' is set
      if (dBClusterParameterGroupName === undefined || dBClusterParameterGroupName === null) {
        throw new Error("Missing the required parameter 'dBClusterParameterGroupName' when calling gETDeleteDBClusterParameterGroup");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteDBClusterParameterGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteDBClusterParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBClusterParameterGroupName': dBClusterParameterGroupName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteDBClusterParameterGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteDBClusterSnapshot operation.
     * @callback module:api/DefaultApi~gETDeleteDBClusterSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteDBClusterSnapshotResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
     * @param {String} dBClusterSnapshotIdentifier <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteDBClusterSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteDBClusterSnapshotResult}
     */
    gETDeleteDBClusterSnapshot(dBClusterSnapshotIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBClusterSnapshotIdentifier' is set
      if (dBClusterSnapshotIdentifier === undefined || dBClusterSnapshotIdentifier === null) {
        throw new Error("Missing the required parameter 'dBClusterSnapshotIdentifier' when calling gETDeleteDBClusterSnapshot");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteDBClusterSnapshot");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteDBClusterSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBClusterSnapshotIdentifier': dBClusterSnapshotIdentifier,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DeleteDBClusterSnapshotResult;
      return this.apiClient.callApi(
        '/#Action=DeleteDBClusterSnapshot', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteDBInstance operation.
     * @callback module:api/DefaultApi~gETDeleteDBInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteDBInstanceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster, or if it has deletion protection enabled.</p>
     * @param {String} dBInstanceIdentifier <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [skipFinalSnapshot] <p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to \"true\".</p> <p>Specify <code>true</code> when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
     * @param {String} [finalDBSnapshotIdentifier] <p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>.</p> <note> <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Cannot be specified when deleting a Read Replica.</p> </li> </ul>
     * @param {module:api/DefaultApi~gETDeleteDBInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteDBInstanceResult}
     */
    gETDeleteDBInstance(dBInstanceIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBInstanceIdentifier' is set
      if (dBInstanceIdentifier === undefined || dBInstanceIdentifier === null) {
        throw new Error("Missing the required parameter 'dBInstanceIdentifier' when calling gETDeleteDBInstance");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteDBInstance");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteDBInstance");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBInstanceIdentifier': dBInstanceIdentifier,
        'SkipFinalSnapshot': opts['skipFinalSnapshot'],
        'FinalDBSnapshotIdentifier': opts['finalDBSnapshotIdentifier'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DeleteDBInstanceResult;
      return this.apiClient.callApi(
        '/#Action=DeleteDBInstance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteDBParameterGroup operation.
     * @callback module:api/DefaultApi~gETDeleteDBParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
     * @param {String} dBParameterGroupName <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Cannot be associated with any DB instances</p> </li> </ul>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteDBParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETDeleteDBParameterGroup(dBParameterGroupName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBParameterGroupName' is set
      if (dBParameterGroupName === undefined || dBParameterGroupName === null) {
        throw new Error("Missing the required parameter 'dBParameterGroupName' when calling gETDeleteDBParameterGroup");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteDBParameterGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteDBParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBParameterGroupName': dBParameterGroupName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteDBParameterGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteDBSubnetGroup operation.
     * @callback module:api/DefaultApi~gETDeleteDBSubnetGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
     * @param {String} dBSubnetGroupName <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteDBSubnetGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETDeleteDBSubnetGroup(dBSubnetGroupName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBSubnetGroupName' is set
      if (dBSubnetGroupName === undefined || dBSubnetGroupName === null) {
        throw new Error("Missing the required parameter 'dBSubnetGroupName' when calling gETDeleteDBSubnetGroup");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteDBSubnetGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteDBSubnetGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBSubnetGroupName': dBSubnetGroupName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteDBSubnetGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteEventSubscription operation.
     * @callback module:api/DefaultApi~gETDeleteEventSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteEventSubscriptionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an event notification subscription.
     * @param {String} subscriptionName The name of the event notification subscription you want to delete.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteEventSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteEventSubscriptionResult}
     */
    gETDeleteEventSubscription(subscriptionName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionName' is set
      if (subscriptionName === undefined || subscriptionName === null) {
        throw new Error("Missing the required parameter 'subscriptionName' when calling gETDeleteEventSubscription");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteEventSubscription");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteEventSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
        'SubscriptionName': subscriptionName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DeleteEventSubscriptionResult;
      return this.apiClient.callApi(
        '/#Action=DeleteEventSubscription', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteGlobalCluster operation.
     * @callback module:api/DefaultApi~gETDeleteGlobalClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteGlobalClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a global database. The primary and all secondary clusters must already be detached or deleted first.
     * @param {String} globalClusterIdentifier The cluster identifier of the global database cluster being deleted.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteGlobalClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteGlobalClusterResult}
     */
    gETDeleteGlobalCluster(globalClusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'globalClusterIdentifier' is set
      if (globalClusterIdentifier === undefined || globalClusterIdentifier === null) {
        throw new Error("Missing the required parameter 'globalClusterIdentifier' when calling gETDeleteGlobalCluster");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteGlobalCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteGlobalCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'GlobalClusterIdentifier': globalClusterIdentifier,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DeleteGlobalClusterResult;
      return this.apiClient.callApi(
        '/#Action=DeleteGlobalCluster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeDBClusterEndpoints operation.
     * @callback module:api/DefaultApi~gETDescribeDBClusterEndpointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBClusterEndpointMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns information about endpoints for an Amazon Neptune DB cluster.</p> <note> <p>This operation can also return information for Amazon RDS clusters and Amazon DocDB clusters.</p> </note>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [dBClusterIdentifier] The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
     * @param {String} [dBClusterEndpointIdentifier] The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
     * @param {Array.<module:model/GETDescribeDBClusterEndpointsFiltersParameterInner>} [filters] A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>inactive</code>, <code>modifying</code>. 
     * @param {Number} [maxRecords] <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
     * @param {String} [marker]  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
     * @param {module:api/DefaultApi~gETDescribeDBClusterEndpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBClusterEndpointMessage}
     */
    gETDescribeDBClusterEndpoints(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeDBClusterEndpoints");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeDBClusterEndpoints");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBClusterIdentifier': opts['dBClusterIdentifier'],
        'DBClusterEndpointIdentifier': opts['dBClusterEndpointIdentifier'],
        'Filters': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DBClusterEndpointMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeDBClusterEndpoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeDBClusterParameterGroups operation.
     * @callback module:api/DefaultApi~gETDescribeDBClusterParameterGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBClusterParameterGroupsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [dBClusterParameterGroupName] <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
     * @param {Array.<module:model/GETDescribeDBClusterEndpointsFiltersParameterInner>} [filters] This parameter is not currently supported.
     * @param {Number} [maxRecords] <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
     * @param {String} [marker]  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
     * @param {module:api/DefaultApi~gETDescribeDBClusterParameterGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBClusterParameterGroupsMessage}
     */
    gETDescribeDBClusterParameterGroups(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeDBClusterParameterGroups");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeDBClusterParameterGroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBClusterParameterGroupName': opts['dBClusterParameterGroupName'],
        'Filters': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DBClusterParameterGroupsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeDBClusterParameterGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeDBClusterParameters operation.
     * @callback module:api/DefaultApi~gETDescribeDBClusterParametersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBClusterParameterGroupDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the detailed parameter list for a particular DB cluster parameter group.
     * @param {String} dBClusterParameterGroupName <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [source]  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>.
     * @param {Array.<module:model/GETDescribeDBClusterEndpointsFiltersParameterInner>} [filters] This parameter is not currently supported.
     * @param {Number} [maxRecords] <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
     * @param {String} [marker]  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
     * @param {module:api/DefaultApi~gETDescribeDBClusterParametersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBClusterParameterGroupDetails}
     */
    gETDescribeDBClusterParameters(dBClusterParameterGroupName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBClusterParameterGroupName' is set
      if (dBClusterParameterGroupName === undefined || dBClusterParameterGroupName === null) {
        throw new Error("Missing the required parameter 'dBClusterParameterGroupName' when calling gETDescribeDBClusterParameters");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeDBClusterParameters");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeDBClusterParameters");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBClusterParameterGroupName': dBClusterParameterGroupName,
        'Source': opts['source'],
        'Filters': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DBClusterParameterGroupDetails;
      return this.apiClient.callApi(
        '/#Action=DescribeDBClusterParameters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeDBClusterSnapshotAttributes operation.
     * @callback module:api/DefaultApi~gETDescribeDBClusterSnapshotAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDBClusterSnapshotAttributesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other Amazon accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the Amazon accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all Amazon accounts.</p> <p>To add or remove access for an Amazon account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
     * @param {String} dBClusterSnapshotIdentifier The identifier for the DB cluster snapshot to describe the attributes for.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDescribeDBClusterSnapshotAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDBClusterSnapshotAttributesResult}
     */
    gETDescribeDBClusterSnapshotAttributes(dBClusterSnapshotIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBClusterSnapshotIdentifier' is set
      if (dBClusterSnapshotIdentifier === undefined || dBClusterSnapshotIdentifier === null) {
        throw new Error("Missing the required parameter 'dBClusterSnapshotIdentifier' when calling gETDescribeDBClusterSnapshotAttributes");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeDBClusterSnapshotAttributes");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeDBClusterSnapshotAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBClusterSnapshotIdentifier': dBClusterSnapshotIdentifier,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeDBClusterSnapshotAttributesResult;
      return this.apiClient.callApi(
        '/#Action=DescribeDBClusterSnapshotAttributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeDBClusterSnapshots operation.
     * @callback module:api/DefaultApi~gETDescribeDBClusterSnapshotsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBClusterSnapshotMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about DB cluster snapshots. This API action supports pagination.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [dBClusterIdentifier] <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
     * @param {String} [dBClusterSnapshotIdentifier] <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
     * @param {String} [snapshotType] <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon Neptune for my Amazon account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my Amazon account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my Amazon account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public DB cluster snapshots with these results by setting the <code>IncludePublic</code> parameter to <code>true</code>.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
     * @param {Array.<module:model/GETDescribeDBClusterEndpointsFiltersParameterInner>} [filters] This parameter is not currently supported.
     * @param {Number} [maxRecords] <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
     * @param {String} [marker] An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
     * @param {Boolean} [includeShared] <p>True to include shared manual DB cluster snapshots from other Amazon accounts that this Amazon account has been given permission to copy or restore, and otherwise false. The default is <code>false</code>.</p> <p>You can give an Amazon account permission to restore a manual DB cluster snapshot from another Amazon account by the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
     * @param {Boolean} [includePublic] <p>True to include manual DB cluster snapshots that are public and can be copied or restored by any Amazon account, and otherwise false. The default is <code>false</code>. The default is false.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
     * @param {module:api/DefaultApi~gETDescribeDBClusterSnapshotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBClusterSnapshotMessage}
     */
    gETDescribeDBClusterSnapshots(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeDBClusterSnapshots");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeDBClusterSnapshots");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBClusterIdentifier': opts['dBClusterIdentifier'],
        'DBClusterSnapshotIdentifier': opts['dBClusterSnapshotIdentifier'],
        'SnapshotType': opts['snapshotType'],
        'Filters': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'IncludeShared': opts['includeShared'],
        'IncludePublic': opts['includePublic'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DBClusterSnapshotMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeDBClusterSnapshots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeDBClusters operation.
     * @callback module:api/DefaultApi~gETDescribeDBClustersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBClusterMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns information about provisioned DB clusters, and supports pagination.</p> <note> <p>This operation can also return information for Amazon RDS clusters and Amazon DocDB clusters.</p> </note>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [dBClusterIdentifier] <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
     * @param {Array.<module:model/GETDescribeDBClusterEndpointsFiltersParameterInner>} [filters] <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>engine</code> - Accepts an engine name (such as <code>neptune</code>), and restricts the results list to DB clusters created by that engine.</p> </li> </ul> <p>For example, to invoke this API from the Amazon CLI and filter so that only Neptune DB clusters are returned, you could use the following command:</p>
     * @param {Number} [maxRecords] <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
     * @param {String} [marker] An optional pagination token provided by a previous <a>DescribeDBClusters</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
     * @param {module:api/DefaultApi~gETDescribeDBClustersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBClusterMessage}
     */
    gETDescribeDBClusters(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeDBClusters");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeDBClusters");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBClusterIdentifier': opts['dBClusterIdentifier'],
        'Filters': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DBClusterMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeDBClusters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeDBEngineVersions operation.
     * @callback module:api/DefaultApi~gETDescribeDBEngineVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBEngineVersionMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of the available DB engines.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [engine] The database engine to return.
     * @param {String} [engineVersion] <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
     * @param {String} [dBParameterGroupFamily] <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
     * @param {Array.<module:model/GETDescribeDBClusterEndpointsFiltersParameterInner>} [filters] Not currently supported.
     * @param {Number} [maxRecords] <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
     * @param {String} [marker]  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
     * @param {Boolean} [defaultOnly] Indicates that only the default version of the specified engine or engine and major version combination is returned.
     * @param {Boolean} [listSupportedCharacterSets] If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version.
     * @param {Boolean} [listSupportedTimezones] If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version.
     * @param {module:api/DefaultApi~gETDescribeDBEngineVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBEngineVersionMessage}
     */
    gETDescribeDBEngineVersions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeDBEngineVersions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeDBEngineVersions");
      }

      let pathParams = {
      };
      let queryParams = {
        'Engine': opts['engine'],
        'EngineVersion': opts['engineVersion'],
        'DBParameterGroupFamily': opts['dBParameterGroupFamily'],
        'Filters': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'DefaultOnly': opts['defaultOnly'],
        'ListSupportedCharacterSets': opts['listSupportedCharacterSets'],
        'ListSupportedTimezones': opts['listSupportedTimezones'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DBEngineVersionMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeDBEngineVersions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeDBInstances operation.
     * @callback module:api/DefaultApi~gETDescribeDBInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBInstanceMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns information about provisioned instances, and supports pagination.</p> <note> <p>This operation can also return information for Amazon RDS instances and Amazon DocDB instances.</p> </note>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [dBInstanceIdentifier] <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
     * @param {Array.<module:model/GETDescribeDBClusterEndpointsFiltersParameterInner>} [filters] <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>engine</code> - Accepts an engine name (such as <code>neptune</code>), and restricts the results list to DB instances created by that engine.</p> </li> </ul> <p>For example, to invoke this API from the Amazon CLI and filter so that only Neptune DB instances are returned, you could use the following command:</p>
     * @param {Number} [maxRecords] <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
     * @param {String} [marker]  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
     * @param {module:api/DefaultApi~gETDescribeDBInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBInstanceMessage}
     */
    gETDescribeDBInstances(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeDBInstances");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeDBInstances");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBInstanceIdentifier': opts['dBInstanceIdentifier'],
        'Filters': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DBInstanceMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeDBInstances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeDBParameterGroups operation.
     * @callback module:api/DefaultApi~gETDescribeDBParameterGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBParameterGroupsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [dBParameterGroupName] <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
     * @param {Array.<module:model/GETDescribeDBClusterEndpointsFiltersParameterInner>} [filters] This parameter is not currently supported.
     * @param {Number} [maxRecords] <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
     * @param {String} [marker] An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
     * @param {module:api/DefaultApi~gETDescribeDBParameterGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBParameterGroupsMessage}
     */
    gETDescribeDBParameterGroups(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeDBParameterGroups");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeDBParameterGroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBParameterGroupName': opts['dBParameterGroupName'],
        'Filters': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DBParameterGroupsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeDBParameterGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeDBParameters operation.
     * @callback module:api/DefaultApi~gETDescribeDBParametersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBParameterGroupDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the detailed parameter list for a particular DB parameter group.
     * @param {String} dBParameterGroupName <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [source] <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
     * @param {Array.<module:model/GETDescribeDBClusterEndpointsFiltersParameterInner>} [filters] This parameter is not currently supported.
     * @param {Number} [maxRecords] <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
     * @param {String} [marker] An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
     * @param {module:api/DefaultApi~gETDescribeDBParametersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBParameterGroupDetails}
     */
    gETDescribeDBParameters(dBParameterGroupName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBParameterGroupName' is set
      if (dBParameterGroupName === undefined || dBParameterGroupName === null) {
        throw new Error("Missing the required parameter 'dBParameterGroupName' when calling gETDescribeDBParameters");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeDBParameters");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeDBParameters");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBParameterGroupName': dBParameterGroupName,
        'Source': opts['source'],
        'Filters': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DBParameterGroupDetails;
      return this.apiClient.callApi(
        '/#Action=DescribeDBParameters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeDBSubnetGroups operation.
     * @callback module:api/DefaultApi~gETDescribeDBSubnetGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBSubnetGroupMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href=\"http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\">Wikipedia Tutorial</a>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [dBSubnetGroupName] The name of the DB subnet group to return details for.
     * @param {Array.<module:model/GETDescribeDBClusterEndpointsFiltersParameterInner>} [filters] This parameter is not currently supported.
     * @param {Number} [maxRecords] <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
     * @param {String} [marker]  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
     * @param {module:api/DefaultApi~gETDescribeDBSubnetGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBSubnetGroupMessage}
     */
    gETDescribeDBSubnetGroups(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeDBSubnetGroups");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeDBSubnetGroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBSubnetGroupName': opts['dBSubnetGroupName'],
        'Filters': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DBSubnetGroupMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeDBSubnetGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeEngineDefaultClusterParameters operation.
     * @callback module:api/DefaultApi~gETDescribeEngineDefaultClusterParametersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeEngineDefaultClusterParametersResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the default engine and system parameter information for the cluster database engine.
     * @param {String} dBParameterGroupFamily The name of the DB cluster parameter group family to return engine parameter information for.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<module:model/GETDescribeDBClusterEndpointsFiltersParameterInner>} [filters] This parameter is not currently supported.
     * @param {Number} [maxRecords] <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
     * @param {String} [marker]  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
     * @param {module:api/DefaultApi~gETDescribeEngineDefaultClusterParametersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeEngineDefaultClusterParametersResult}
     */
    gETDescribeEngineDefaultClusterParameters(dBParameterGroupFamily, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBParameterGroupFamily' is set
      if (dBParameterGroupFamily === undefined || dBParameterGroupFamily === null) {
        throw new Error("Missing the required parameter 'dBParameterGroupFamily' when calling gETDescribeEngineDefaultClusterParameters");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeEngineDefaultClusterParameters");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeEngineDefaultClusterParameters");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBParameterGroupFamily': dBParameterGroupFamily,
        'Filters': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeEngineDefaultClusterParametersResult;
      return this.apiClient.callApi(
        '/#Action=DescribeEngineDefaultClusterParameters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeEngineDefaultParameters operation.
     * @callback module:api/DefaultApi~gETDescribeEngineDefaultParametersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeEngineDefaultParametersResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the default engine and system parameter information for the specified database engine.
     * @param {String} dBParameterGroupFamily The name of the DB parameter group family.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<module:model/GETDescribeDBClusterEndpointsFiltersParameterInner>} [filters] Not currently supported.
     * @param {Number} [maxRecords] <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
     * @param {String} [marker]  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
     * @param {module:api/DefaultApi~gETDescribeEngineDefaultParametersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeEngineDefaultParametersResult}
     */
    gETDescribeEngineDefaultParameters(dBParameterGroupFamily, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBParameterGroupFamily' is set
      if (dBParameterGroupFamily === undefined || dBParameterGroupFamily === null) {
        throw new Error("Missing the required parameter 'dBParameterGroupFamily' when calling gETDescribeEngineDefaultParameters");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeEngineDefaultParameters");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeEngineDefaultParameters");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBParameterGroupFamily': dBParameterGroupFamily,
        'Filters': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeEngineDefaultParametersResult;
      return this.apiClient.callApi(
        '/#Action=DescribeEngineDefaultParameters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeEventCategories operation.
     * @callback module:api/DefaultApi~gETDescribeEventCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventCategoriesMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays a list of categories for all event source types, or, if specified, for a specified source type.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [sourceType] <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
     * @param {Array.<module:model/GETDescribeDBClusterEndpointsFiltersParameterInner>} [filters] This parameter is not currently supported.
     * @param {module:api/DefaultApi~gETDescribeEventCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventCategoriesMessage}
     */
    gETDescribeEventCategories(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeEventCategories");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeEventCategories");
      }

      let pathParams = {
      };
      let queryParams = {
        'SourceType': opts['sourceType'],
        'Filters': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = EventCategoriesMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeEventCategories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeEventSubscriptions operation.
     * @callback module:api/DefaultApi~gETDescribeEventSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSubscriptionsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [subscriptionName] The name of the event notification subscription you want to describe.
     * @param {Array.<module:model/GETDescribeDBClusterEndpointsFiltersParameterInner>} [filters] This parameter is not currently supported.
     * @param {Number} [maxRecords] <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
     * @param {String} [marker]  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
     * @param {module:api/DefaultApi~gETDescribeEventSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSubscriptionsMessage}
     */
    gETDescribeEventSubscriptions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeEventSubscriptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeEventSubscriptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'SubscriptionName': opts['subscriptionName'],
        'Filters': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = EventSubscriptionsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeEventSubscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeEvents operation.
     * @callback module:api/DefaultApi~gETDescribeEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [sourceIdentifier] <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
     * @param {module:model/String} [sourceType] The event source to retrieve events for. If no value is specified, all events are returned.
     * @param {Date} [startTime] <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
     * @param {Date} [endTime] <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
     * @param {Number} [duration] <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
     * @param {Array.<String>} [eventCategories] A list of event categories that trigger notifications for a event notification subscription.
     * @param {Array.<module:model/GETDescribeDBClusterEndpointsFiltersParameterInner>} [filters] This parameter is not currently supported.
     * @param {Number} [maxRecords] <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
     * @param {String} [marker]  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
     * @param {module:api/DefaultApi~gETDescribeEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventsMessage}
     */
    gETDescribeEvents(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeEvents");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeEvents");
      }

      let pathParams = {
      };
      let queryParams = {
        'SourceIdentifier': opts['sourceIdentifier'],
        'SourceType': opts['sourceType'],
        'StartTime': opts['startTime'],
        'EndTime': opts['endTime'],
        'Duration': opts['duration'],
        'EventCategories': this.apiClient.buildCollectionParam(opts['eventCategories'], 'multi'),
        'Filters': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = EventsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeEvents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeGlobalClusters operation.
     * @callback module:api/DefaultApi~gETDescribeGlobalClustersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GlobalClustersMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about Neptune global database clusters. This API supports pagination.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [globalClusterIdentifier] <p>The user-supplied DB cluster identifier. If this parameter is specified, only information about the specified DB cluster is returned. This parameter is not case-sensitive.</p> <p>Constraints: If supplied, must match an existing DB cluster identifier.</p>
     * @param {Number} [maxRecords] <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination marker token is included in the response that you can use to retrieve the remaining results.</p> <p>Default: <code>100</code> </p> <p>Constraints: Minimum 20, maximum 100.</p>
     * @param {String} [marker] (<i>Optional</i>) A pagination token returned by a previous call to <code>DescribeGlobalClusters</code>. If this parameter is specified, the response will only include records beyond the marker, up to the number specified by <code>MaxRecords</code>.
     * @param {module:api/DefaultApi~gETDescribeGlobalClustersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GlobalClustersMessage}
     */
    gETDescribeGlobalClusters(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeGlobalClusters");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeGlobalClusters");
      }

      let pathParams = {
      };
      let queryParams = {
        'GlobalClusterIdentifier': opts['globalClusterIdentifier'],
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GlobalClustersMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeGlobalClusters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeOrderableDBInstanceOptions operation.
     * @callback module:api/DefaultApi~gETDescribeOrderableDBInstanceOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderableDBInstanceOptionsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of orderable DB instance options for the specified engine.
     * @param {String} engine The name of the engine to retrieve DB instance options for.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [engineVersion] The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
     * @param {String} [dBInstanceClass] The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
     * @param {String} [licenseModel] The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
     * @param {Boolean} [vpc] The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings.
     * @param {Array.<module:model/GETDescribeDBClusterEndpointsFiltersParameterInner>} [filters] This parameter is not currently supported.
     * @param {Number} [maxRecords] <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
     * @param {String} [marker]  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
     * @param {module:api/DefaultApi~gETDescribeOrderableDBInstanceOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderableDBInstanceOptionsMessage}
     */
    gETDescribeOrderableDBInstanceOptions(engine, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'engine' is set
      if (engine === undefined || engine === null) {
        throw new Error("Missing the required parameter 'engine' when calling gETDescribeOrderableDBInstanceOptions");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeOrderableDBInstanceOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeOrderableDBInstanceOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'Engine': engine,
        'EngineVersion': opts['engineVersion'],
        'DBInstanceClass': opts['dBInstanceClass'],
        'LicenseModel': opts['licenseModel'],
        'Vpc': opts['vpc'],
        'Filters': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = OrderableDBInstanceOptionsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeOrderableDBInstanceOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribePendingMaintenanceActions operation.
     * @callback module:api/DefaultApi~gETDescribePendingMaintenanceActionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PendingMaintenanceActionsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [resourceIdentifier] The ARN of a resource to return pending maintenance actions for.
     * @param {Array.<module:model/GETDescribeDBClusterEndpointsFiltersParameterInner>} [filters] <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
     * @param {String} [marker]  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>.
     * @param {Number} [maxRecords] <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
     * @param {module:api/DefaultApi~gETDescribePendingMaintenanceActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PendingMaintenanceActionsMessage}
     */
    gETDescribePendingMaintenanceActions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribePendingMaintenanceActions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribePendingMaintenanceActions");
      }

      let pathParams = {
      };
      let queryParams = {
        'ResourceIdentifier': opts['resourceIdentifier'],
        'Filters': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'Marker': opts['marker'],
        'MaxRecords': opts['maxRecords'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = PendingMaintenanceActionsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribePendingMaintenanceActions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeValidDBInstanceModifications operation.
     * @callback module:api/DefaultApi~gETDescribeValidDBInstanceModificationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeValidDBInstanceModificationsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
     * @param {String} dBInstanceIdentifier The customer identifier or the ARN of your DB instance.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDescribeValidDBInstanceModificationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeValidDBInstanceModificationsResult}
     */
    gETDescribeValidDBInstanceModifications(dBInstanceIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBInstanceIdentifier' is set
      if (dBInstanceIdentifier === undefined || dBInstanceIdentifier === null) {
        throw new Error("Missing the required parameter 'dBInstanceIdentifier' when calling gETDescribeValidDBInstanceModifications");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeValidDBInstanceModifications");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeValidDBInstanceModifications");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBInstanceIdentifier': dBInstanceIdentifier,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeValidDBInstanceModificationsResult;
      return this.apiClient.callApi(
        '/#Action=DescribeValidDBInstanceModifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETFailoverDBCluster operation.
     * @callback module:api/DefaultApi~gETFailoverDBClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FailoverDBClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [dBClusterIdentifier] <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
     * @param {String} [targetDBInstanceIdentifier] <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Read Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
     * @param {module:api/DefaultApi~gETFailoverDBClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FailoverDBClusterResult}
     */
    gETFailoverDBCluster(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETFailoverDBCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETFailoverDBCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBClusterIdentifier': opts['dBClusterIdentifier'],
        'TargetDBInstanceIdentifier': opts['targetDBInstanceIdentifier'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = FailoverDBClusterResult;
      return this.apiClient.callApi(
        '/#Action=FailoverDBCluster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETFailoverGlobalCluster operation.
     * @callback module:api/DefaultApi~gETFailoverGlobalClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FailoverGlobalClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Initiates the failover process for a Neptune global database.</p> <p>A failover for a Neptune global database promotes one of secondary read-only DB clusters to be the primary DB cluster and demotes the primary DB cluster to being a secondary (read-only) DB cluster. In other words, the role of the current primary DB cluster and the selected target secondary DB cluster are switched. The selected secondary DB cluster assumes full read/write capabilities for the Neptune global database.</p> <note> <p>This action applies <b>only</b> to Neptune global databases. This action is only intended for use on healthy Neptune global databases with healthy Neptune DB clusters and no region-wide outages, to test disaster recovery scenarios or to reconfigure the global database topology.</p> </note>
     * @param {String} globalClusterIdentifier <p>Identifier of the Neptune global database that should be failed over. The identifier is the unique key assigned by the user when the Neptune global database was created. In other words, it's the name of the global database that you want to fail over.</p> <p>Constraints: Must match the identifier of an existing Neptune global database.</p>
     * @param {String} targetDbClusterIdentifier The Amazon Resource Name (ARN) of the secondary Neptune DB cluster that you want to promote to primary for the global database.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETFailoverGlobalClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FailoverGlobalClusterResult}
     */
    gETFailoverGlobalCluster(globalClusterIdentifier, targetDbClusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'globalClusterIdentifier' is set
      if (globalClusterIdentifier === undefined || globalClusterIdentifier === null) {
        throw new Error("Missing the required parameter 'globalClusterIdentifier' when calling gETFailoverGlobalCluster");
      }
      // verify the required parameter 'targetDbClusterIdentifier' is set
      if (targetDbClusterIdentifier === undefined || targetDbClusterIdentifier === null) {
        throw new Error("Missing the required parameter 'targetDbClusterIdentifier' when calling gETFailoverGlobalCluster");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETFailoverGlobalCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETFailoverGlobalCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'GlobalClusterIdentifier': globalClusterIdentifier,
        'TargetDbClusterIdentifier': targetDbClusterIdentifier,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = FailoverGlobalClusterResult;
      return this.apiClient.callApi(
        '/#Action=FailoverGlobalCluster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETListTagsForResource operation.
     * @callback module:api/DefaultApi~gETListTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagListMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all tags on an Amazon Neptune resource.
     * @param {String} resourceName The Amazon Neptune resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a href=\"https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing\"> Constructing an Amazon Resource Name (ARN)</a>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<module:model/GETDescribeDBClusterEndpointsFiltersParameterInner>} [filters] This parameter is not currently supported.
     * @param {module:api/DefaultApi~gETListTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagListMessage}
     */
    gETListTagsForResource(resourceName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling gETListTagsForResource");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETListTagsForResource");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETListTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'ResourceName': resourceName,
        'Filters': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = TagListMessage;
      return this.apiClient.callApi(
        '/#Action=ListTagsForResource', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETModifyDBCluster operation.
     * @callback module:api/DefaultApi~gETModifyDBClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyDBClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
     * @param {String} dBClusterIdentifier <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [newDBClusterIdentifier] <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
     * @param {Boolean} [applyImmediately] <p>A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is set to <code>false</code>, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects <code>NewDBClusterIdentifier</code> values. If you set the <code>ApplyImmediately</code> parameter value to false, then changes to <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>Default: <code>false</code> </p>
     * @param {Number} [backupRetentionPeriod] <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
     * @param {String} [dBClusterParameterGroupName] The name of the DB cluster parameter group to use for the DB cluster.
     * @param {Array.<String>} [vpcSecurityGroupIds] A list of VPC security groups that the DB cluster will belong to.
     * @param {Number} [port] <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
     * @param {String} [masterUserPassword] Not supported by Neptune.
     * @param {String} [optionGroupName]  <i>Not supported by Neptune.</i> 
     * @param {String} [preferredBackupWindow] <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
     * @param {String} [preferredMaintenanceWindow] <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
     * @param {Boolean} [enableIAMDatabaseAuthentication] <p>True to enable mapping of Amazon Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
     * @param {module:model/GETModifyDBClusterCloudwatchLogsExportConfigurationParameter} [cloudwatchLogsExportConfiguration] The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB cluster.
     * @param {String} [engineVersion] <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to true.</p> <p>For a list of valid engine versions, see <a href=\"https://docs.aws.amazon.com/neptune/latest/userguide/engine-releases.html\">Engine Releases for Amazon Neptune</a>, or call <a href=\"https://docs.aws.amazon.com/neptune/latest/userguide/api-other-apis.html#DescribeDBEngineVersions\">DescribeDBEngineVersions</a>.</p>
     * @param {Boolean} [allowMajorVersionUpgrade] <p>A value that indicates whether upgrades between different major versions are allowed.</p> <p>Constraints: You must set the allow-major-version-upgrade flag when providing an <code>EngineVersion</code> parameter that uses a different major version than the DB cluster's current version.</p>
     * @param {String} [dBInstanceParameterGroupName] <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using <code>DBInstanceParameterGroupName</code>, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as the target DB cluster version.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
     * @param {Boolean} [deletionProtection] A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
     * @param {Boolean} [copyTagsToSnapshot]  <i>If set to <code>true</code>, tags are copied to any snapshot of the DB cluster that is created.</i> 
     * @param {module:model/GETCreateDBClusterServerlessV2ScalingConfigurationParameter} [serverlessV2ScalingConfiguration] 
     * @param {module:api/DefaultApi~gETModifyDBClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyDBClusterResult}
     */
    gETModifyDBCluster(dBClusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBClusterIdentifier' is set
      if (dBClusterIdentifier === undefined || dBClusterIdentifier === null) {
        throw new Error("Missing the required parameter 'dBClusterIdentifier' when calling gETModifyDBCluster");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETModifyDBCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETModifyDBCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBClusterIdentifier': dBClusterIdentifier,
        'NewDBClusterIdentifier': opts['newDBClusterIdentifier'],
        'ApplyImmediately': opts['applyImmediately'],
        'BackupRetentionPeriod': opts['backupRetentionPeriod'],
        'DBClusterParameterGroupName': opts['dBClusterParameterGroupName'],
        'VpcSecurityGroupIds': this.apiClient.buildCollectionParam(opts['vpcSecurityGroupIds'], 'multi'),
        'Port': opts['port'],
        'MasterUserPassword': opts['masterUserPassword'],
        'OptionGroupName': opts['optionGroupName'],
        'PreferredBackupWindow': opts['preferredBackupWindow'],
        'PreferredMaintenanceWindow': opts['preferredMaintenanceWindow'],
        'EnableIAMDatabaseAuthentication': opts['enableIAMDatabaseAuthentication'],
        'CloudwatchLogsExportConfiguration': opts['cloudwatchLogsExportConfiguration'],
        'EngineVersion': opts['engineVersion'],
        'AllowMajorVersionUpgrade': opts['allowMajorVersionUpgrade'],
        'DBInstanceParameterGroupName': opts['dBInstanceParameterGroupName'],
        'DeletionProtection': opts['deletionProtection'],
        'CopyTagsToSnapshot': opts['copyTagsToSnapshot'],
        'ServerlessV2ScalingConfiguration': opts['serverlessV2ScalingConfiguration'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ModifyDBClusterResult;
      return this.apiClient.callApi(
        '/#Action=ModifyDBCluster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETModifyDBClusterEndpoint operation.
     * @callback module:api/DefaultApi~gETModifyDBClusterEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyDBClusterEndpointOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the properties of an endpoint in an Amazon Neptune DB cluster.
     * @param {String} dBClusterEndpointIdentifier The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [endpointType] The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
     * @param {Array.<String>} [staticMembers] List of DB instance identifiers that are part of the custom endpoint group.
     * @param {Array.<String>} [excludedMembers] List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
     * @param {module:api/DefaultApi~gETModifyDBClusterEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyDBClusterEndpointOutput}
     */
    gETModifyDBClusterEndpoint(dBClusterEndpointIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBClusterEndpointIdentifier' is set
      if (dBClusterEndpointIdentifier === undefined || dBClusterEndpointIdentifier === null) {
        throw new Error("Missing the required parameter 'dBClusterEndpointIdentifier' when calling gETModifyDBClusterEndpoint");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETModifyDBClusterEndpoint");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETModifyDBClusterEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBClusterEndpointIdentifier': dBClusterEndpointIdentifier,
        'EndpointType': opts['endpointType'],
        'StaticMembers': this.apiClient.buildCollectionParam(opts['staticMembers'], 'multi'),
        'ExcludedMembers': this.apiClient.buildCollectionParam(opts['excludedMembers'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ModifyDBClusterEndpointOutput;
      return this.apiClient.callApi(
        '/#Action=ModifyDBClusterEndpoint', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETModifyDBClusterParameterGroup operation.
     * @callback module:api/DefaultApi~gETModifyDBClusterParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBClusterParameterGroupNameMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
     * @param {String} dBClusterParameterGroupName The name of the DB cluster parameter group to modify.
     * @param {Array.<module:model/GETModifyDBClusterParameterGroupParametersParameterInner>} parameters A list of parameters in the DB cluster parameter group to modify.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETModifyDBClusterParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBClusterParameterGroupNameMessage}
     */
    gETModifyDBClusterParameterGroup(dBClusterParameterGroupName, parameters, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBClusterParameterGroupName' is set
      if (dBClusterParameterGroupName === undefined || dBClusterParameterGroupName === null) {
        throw new Error("Missing the required parameter 'dBClusterParameterGroupName' when calling gETModifyDBClusterParameterGroup");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling gETModifyDBClusterParameterGroup");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETModifyDBClusterParameterGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETModifyDBClusterParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBClusterParameterGroupName': dBClusterParameterGroupName,
        'Parameters': this.apiClient.buildCollectionParam(parameters, 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DBClusterParameterGroupNameMessage;
      return this.apiClient.callApi(
        '/#Action=ModifyDBClusterParameterGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETModifyDBClusterSnapshotAttribute operation.
     * @callback module:api/DefaultApi~gETModifyDBClusterSnapshotAttributeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyDBClusterSnapshotAttributeResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other Amazon accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the Amazon accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all Amazon accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all Amazon accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized Amazon account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which Amazon accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
     * @param {String} dBClusterSnapshotIdentifier The identifier for the DB cluster snapshot to modify the attributes for.
     * @param {String} attributeName <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other Amazon accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<String>} [valuesToAdd] <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other Amazon accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more Amazon account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any Amazon account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all Amazon accounts.</p>
     * @param {Array.<String>} [valuesToRemove] <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other Amazon accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more Amazon account identifiers, or <code>all</code> to remove authorization for any Amazon account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an Amazon account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
     * @param {module:api/DefaultApi~gETModifyDBClusterSnapshotAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyDBClusterSnapshotAttributeResult}
     */
    gETModifyDBClusterSnapshotAttribute(dBClusterSnapshotIdentifier, attributeName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBClusterSnapshotIdentifier' is set
      if (dBClusterSnapshotIdentifier === undefined || dBClusterSnapshotIdentifier === null) {
        throw new Error("Missing the required parameter 'dBClusterSnapshotIdentifier' when calling gETModifyDBClusterSnapshotAttribute");
      }
      // verify the required parameter 'attributeName' is set
      if (attributeName === undefined || attributeName === null) {
        throw new Error("Missing the required parameter 'attributeName' when calling gETModifyDBClusterSnapshotAttribute");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETModifyDBClusterSnapshotAttribute");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETModifyDBClusterSnapshotAttribute");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBClusterSnapshotIdentifier': dBClusterSnapshotIdentifier,
        'AttributeName': attributeName,
        'ValuesToAdd': this.apiClient.buildCollectionParam(opts['valuesToAdd'], 'multi'),
        'ValuesToRemove': this.apiClient.buildCollectionParam(opts['valuesToRemove'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ModifyDBClusterSnapshotAttributeResult;
      return this.apiClient.callApi(
        '/#Action=ModifyDBClusterSnapshotAttribute', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETModifyDBInstance operation.
     * @callback module:api/DefaultApi~gETModifyDBInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyDBInstanceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
     * @param {String} dBInstanceIdentifier <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [allocatedStorage] Not supported by Neptune.
     * @param {String} [dBInstanceClass] <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all Amazon Regions.</p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is specified as <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
     * @param {String} [dBSubnetGroupName] <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC.</p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify <code>true</code> for the <code>ApplyImmediately</code> parameter.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
     * @param {Array.<String>} [dBSecurityGroups] <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
     * @param {Array.<String>} [vpcSecurityGroupIds] <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
     * @param {Boolean} [applyImmediately] <p>Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance.</p> <p> If this parameter is set to <code>false</code>, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot.</p> <p>Default: <code>false</code> </p>
     * @param {String} [masterUserPassword] Not supported by Neptune.
     * @param {String} [dBParameterGroupName] <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
     * @param {Number} [backupRetentionPeriod] <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: Uses existing setting</p>
     * @param {String} [preferredBackupWindow] <p> The daily time range during which automated backups are created if automated backups are enabled.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
     * @param {String} [preferredMaintenanceWindow] <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
     * @param {Boolean} [multiAZ] Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.
     * @param {String} [engineVersion] The version number of the database engine to upgrade to. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the <a>ApplyPendingMaintenanceAction</a> API.
     * @param {Boolean} [allowMajorVersionUpgrade] Indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.
     * @param {Boolean} [autoMinorVersionUpgrade]  Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to <code>true</code> during the maintenance window, and a newer minor version is available, and Neptune has enabled auto patching for that engine version.
     * @param {String} [licenseModel] Not supported by Neptune.
     * @param {Number} [iops] <p>The new Provisioned IOPS (I/O operations per second) value for the instance.</p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
     * @param {String} [optionGroupName]  <i>(Not supported by Neptune)</i> 
     * @param {String} [newDBInstanceIdentifier] <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set <code>Apply Immediately</code> to true, or will occur during the next maintenance window if <code>Apply Immediately</code> to false. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
     * @param {String} [storageType] Not supported.
     * @param {String} [tdeCredentialArn] The ARN from the key store with which to associate the instance for TDE encryption.
     * @param {String} [tdeCredentialPassword] The password for the given ARN from the key store in order to access the device.
     * @param {String} [cACertificateIdentifier] Indicates the certificate that needs to be associated with the instance.
     * @param {String} [domain] Not supported.
     * @param {Boolean} [copyTagsToSnapshot] True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
     * @param {Number} [monitoringInterval] <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
     * @param {Number} [dBPortNumber] <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> Default: <code>8182</code> </p>
     * @param {Boolean} [publiclyAccessible] This flag should no longer be used.
     * @param {String} [monitoringRoleArn] <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
     * @param {String} [domainIAMRoleName] Not supported
     * @param {Number} [promotionTier] <p>A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
     * @param {Boolean} [enableIAMDatabaseAuthentication] <p>True to enable mapping of Amazon Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>You can enable IAM database authentication for the following database engines</p> <p>Not applicable. Mapping Amazon IAM accounts to database accounts is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: <code>false</code> </p>
     * @param {Boolean} [enablePerformanceInsights]  <i>(Not supported by Neptune)</i> 
     * @param {String} [performanceInsightsKMSKeyId]  <i>(Not supported by Neptune)</i> 
     * @param {module:model/GETModifyDBClusterCloudwatchLogsExportConfigurationParameter} [cloudwatchLogsExportConfiguration] The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.
     * @param {Boolean} [deletionProtection] A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. See <a href=\"https://docs.aws.amazon.com/neptune/latest/userguide/manage-console-instances-delete.html\">Deleting a DB Instance</a>.
     * @param {module:api/DefaultApi~gETModifyDBInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyDBInstanceResult}
     */
    gETModifyDBInstance(dBInstanceIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBInstanceIdentifier' is set
      if (dBInstanceIdentifier === undefined || dBInstanceIdentifier === null) {
        throw new Error("Missing the required parameter 'dBInstanceIdentifier' when calling gETModifyDBInstance");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETModifyDBInstance");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETModifyDBInstance");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBInstanceIdentifier': dBInstanceIdentifier,
        'AllocatedStorage': opts['allocatedStorage'],
        'DBInstanceClass': opts['dBInstanceClass'],
        'DBSubnetGroupName': opts['dBSubnetGroupName'],
        'DBSecurityGroups': this.apiClient.buildCollectionParam(opts['dBSecurityGroups'], 'multi'),
        'VpcSecurityGroupIds': this.apiClient.buildCollectionParam(opts['vpcSecurityGroupIds'], 'multi'),
        'ApplyImmediately': opts['applyImmediately'],
        'MasterUserPassword': opts['masterUserPassword'],
        'DBParameterGroupName': opts['dBParameterGroupName'],
        'BackupRetentionPeriod': opts['backupRetentionPeriod'],
        'PreferredBackupWindow': opts['preferredBackupWindow'],
        'PreferredMaintenanceWindow': opts['preferredMaintenanceWindow'],
        'MultiAZ': opts['multiAZ'],
        'EngineVersion': opts['engineVersion'],
        'AllowMajorVersionUpgrade': opts['allowMajorVersionUpgrade'],
        'AutoMinorVersionUpgrade': opts['autoMinorVersionUpgrade'],
        'LicenseModel': opts['licenseModel'],
        'Iops': opts['iops'],
        'OptionGroupName': opts['optionGroupName'],
        'NewDBInstanceIdentifier': opts['newDBInstanceIdentifier'],
        'StorageType': opts['storageType'],
        'TdeCredentialArn': opts['tdeCredentialArn'],
        'TdeCredentialPassword': opts['tdeCredentialPassword'],
        'CACertificateIdentifier': opts['cACertificateIdentifier'],
        'Domain': opts['domain'],
        'CopyTagsToSnapshot': opts['copyTagsToSnapshot'],
        'MonitoringInterval': opts['monitoringInterval'],
        'DBPortNumber': opts['dBPortNumber'],
        'PubliclyAccessible': opts['publiclyAccessible'],
        'MonitoringRoleArn': opts['monitoringRoleArn'],
        'DomainIAMRoleName': opts['domainIAMRoleName'],
        'PromotionTier': opts['promotionTier'],
        'EnableIAMDatabaseAuthentication': opts['enableIAMDatabaseAuthentication'],
        'EnablePerformanceInsights': opts['enablePerformanceInsights'],
        'PerformanceInsightsKMSKeyId': opts['performanceInsightsKMSKeyId'],
        'CloudwatchLogsExportConfiguration': opts['cloudwatchLogsExportConfiguration'],
        'DeletionProtection': opts['deletionProtection'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ModifyDBInstanceResult;
      return this.apiClient.callApi(
        '/#Action=ModifyDBInstance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETModifyDBParameterGroup operation.
     * @callback module:api/DefaultApi~gETModifyDBParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBParameterGroupNameMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
     * @param {String} dBParameterGroupName <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
     * @param {Array.<module:model/GETModifyDBClusterParameterGroupParametersParameterInner>} parameters <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETModifyDBParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBParameterGroupNameMessage}
     */
    gETModifyDBParameterGroup(dBParameterGroupName, parameters, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBParameterGroupName' is set
      if (dBParameterGroupName === undefined || dBParameterGroupName === null) {
        throw new Error("Missing the required parameter 'dBParameterGroupName' when calling gETModifyDBParameterGroup");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling gETModifyDBParameterGroup");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETModifyDBParameterGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETModifyDBParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBParameterGroupName': dBParameterGroupName,
        'Parameters': this.apiClient.buildCollectionParam(parameters, 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DBParameterGroupNameMessage;
      return this.apiClient.callApi(
        '/#Action=ModifyDBParameterGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETModifyDBSubnetGroup operation.
     * @callback module:api/DefaultApi~gETModifyDBSubnetGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyDBSubnetGroupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the Amazon Region.
     * @param {String} dBSubnetGroupName <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
     * @param {Array.<String>} subnetIds The EC2 subnet IDs for the DB subnet group.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [dBSubnetGroupDescription] The description for the DB subnet group.
     * @param {module:api/DefaultApi~gETModifyDBSubnetGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyDBSubnetGroupResult}
     */
    gETModifyDBSubnetGroup(dBSubnetGroupName, subnetIds, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBSubnetGroupName' is set
      if (dBSubnetGroupName === undefined || dBSubnetGroupName === null) {
        throw new Error("Missing the required parameter 'dBSubnetGroupName' when calling gETModifyDBSubnetGroup");
      }
      // verify the required parameter 'subnetIds' is set
      if (subnetIds === undefined || subnetIds === null) {
        throw new Error("Missing the required parameter 'subnetIds' when calling gETModifyDBSubnetGroup");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETModifyDBSubnetGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETModifyDBSubnetGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBSubnetGroupName': dBSubnetGroupName,
        'DBSubnetGroupDescription': opts['dBSubnetGroupDescription'],
        'SubnetIds': this.apiClient.buildCollectionParam(subnetIds, 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ModifyDBSubnetGroupResult;
      return this.apiClient.callApi(
        '/#Action=ModifyDBSubnetGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETModifyEventSubscription operation.
     * @callback module:api/DefaultApi~gETModifyEventSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyEventSubscriptionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
     * @param {String} subscriptionName The name of the event notification subscription.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [snsTopicArn] The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
     * @param {String} [sourceType] <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
     * @param {Array.<String>} [eventCategories]  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
     * @param {Boolean} [enabled]  A Boolean value; set to <b>true</b> to activate the subscription.
     * @param {module:api/DefaultApi~gETModifyEventSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyEventSubscriptionResult}
     */
    gETModifyEventSubscription(subscriptionName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionName' is set
      if (subscriptionName === undefined || subscriptionName === null) {
        throw new Error("Missing the required parameter 'subscriptionName' when calling gETModifyEventSubscription");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETModifyEventSubscription");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETModifyEventSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
        'SubscriptionName': subscriptionName,
        'SnsTopicArn': opts['snsTopicArn'],
        'SourceType': opts['sourceType'],
        'EventCategories': this.apiClient.buildCollectionParam(opts['eventCategories'], 'multi'),
        'Enabled': opts['enabled'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ModifyEventSubscriptionResult;
      return this.apiClient.callApi(
        '/#Action=ModifyEventSubscription', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETModifyGlobalCluster operation.
     * @callback module:api/DefaultApi~gETModifyGlobalClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyGlobalClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify a setting for an Amazon Neptune global cluster. You can change one or more database configuration parameters by specifying these parameters and their new values in the request.
     * @param {String} globalClusterIdentifier <p>The DB cluster identifier for the global cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints: Must match the identifier of an existing global database cluster.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [newGlobalClusterIdentifier] <p>A new cluster identifier to assign to the global database. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
     * @param {Boolean} [deletionProtection] Indicates whether the global database has deletion protection enabled. The global database cannot be deleted when deletion protection is enabled.
     * @param {String} [engineVersion] <p>The version number of the database engine to which you want to upgrade. Changing this parameter will result in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available Neptune engine versions, use the following command:</p>
     * @param {Boolean} [allowMajorVersionUpgrade] <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades if you specify a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p> <p>If you upgrade the major version of a global database, the cluster and DB instance parameter groups are set to the default parameter groups for the new version, so you will need to apply any custom parameter groups after completing the upgrade.</p>
     * @param {module:api/DefaultApi~gETModifyGlobalClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyGlobalClusterResult}
     */
    gETModifyGlobalCluster(globalClusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'globalClusterIdentifier' is set
      if (globalClusterIdentifier === undefined || globalClusterIdentifier === null) {
        throw new Error("Missing the required parameter 'globalClusterIdentifier' when calling gETModifyGlobalCluster");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETModifyGlobalCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETModifyGlobalCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'GlobalClusterIdentifier': globalClusterIdentifier,
        'NewGlobalClusterIdentifier': opts['newGlobalClusterIdentifier'],
        'DeletionProtection': opts['deletionProtection'],
        'EngineVersion': opts['engineVersion'],
        'AllowMajorVersionUpgrade': opts['allowMajorVersionUpgrade'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ModifyGlobalClusterResult;
      return this.apiClient.callApi(
        '/#Action=ModifyGlobalCluster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETPromoteReadReplicaDBCluster operation.
     * @callback module:api/DefaultApi~gETPromoteReadReplicaDBClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PromoteReadReplicaDBClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Not supported.
     * @param {String} dBClusterIdentifier Not supported.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETPromoteReadReplicaDBClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PromoteReadReplicaDBClusterResult}
     */
    gETPromoteReadReplicaDBCluster(dBClusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBClusterIdentifier' is set
      if (dBClusterIdentifier === undefined || dBClusterIdentifier === null) {
        throw new Error("Missing the required parameter 'dBClusterIdentifier' when calling gETPromoteReadReplicaDBCluster");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETPromoteReadReplicaDBCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETPromoteReadReplicaDBCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBClusterIdentifier': dBClusterIdentifier,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = PromoteReadReplicaDBClusterResult;
      return this.apiClient.callApi(
        '/#Action=PromoteReadReplicaDBCluster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETRebootDBInstance operation.
     * @callback module:api/DefaultApi~gETRebootDBInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RebootDBInstanceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
     * @param {String} dBInstanceIdentifier <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [forceFailover] <p> When <code>true</code>, the reboot is conducted through a MultiAZ failover.</p> <p>Constraint: You can't specify <code>true</code> if the instance is not configured for MultiAZ.</p>
     * @param {module:api/DefaultApi~gETRebootDBInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RebootDBInstanceResult}
     */
    gETRebootDBInstance(dBInstanceIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBInstanceIdentifier' is set
      if (dBInstanceIdentifier === undefined || dBInstanceIdentifier === null) {
        throw new Error("Missing the required parameter 'dBInstanceIdentifier' when calling gETRebootDBInstance");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETRebootDBInstance");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETRebootDBInstance");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBInstanceIdentifier': dBInstanceIdentifier,
        'ForceFailover': opts['forceFailover'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = RebootDBInstanceResult;
      return this.apiClient.callApi(
        '/#Action=RebootDBInstance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETRemoveFromGlobalCluster operation.
     * @callback module:api/DefaultApi~gETRemoveFromGlobalClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveFromGlobalClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detaches a Neptune DB cluster from a Neptune global database. A secondary cluster becomes a normal standalone cluster with read-write capability instead of being read-only, and no longer receives data from a the primary cluster.
     * @param {String} globalClusterIdentifier The identifier of the Neptune global database from which to detach the specified Neptune DB cluster.
     * @param {String} dbClusterIdentifier The Amazon Resource Name (ARN) identifying the cluster to be detached from the Neptune global database cluster.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETRemoveFromGlobalClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveFromGlobalClusterResult}
     */
    gETRemoveFromGlobalCluster(globalClusterIdentifier, dbClusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'globalClusterIdentifier' is set
      if (globalClusterIdentifier === undefined || globalClusterIdentifier === null) {
        throw new Error("Missing the required parameter 'globalClusterIdentifier' when calling gETRemoveFromGlobalCluster");
      }
      // verify the required parameter 'dbClusterIdentifier' is set
      if (dbClusterIdentifier === undefined || dbClusterIdentifier === null) {
        throw new Error("Missing the required parameter 'dbClusterIdentifier' when calling gETRemoveFromGlobalCluster");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETRemoveFromGlobalCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETRemoveFromGlobalCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'GlobalClusterIdentifier': globalClusterIdentifier,
        'DbClusterIdentifier': dbClusterIdentifier,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = RemoveFromGlobalClusterResult;
      return this.apiClient.callApi(
        '/#Action=RemoveFromGlobalCluster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETRemoveRoleFromDBCluster operation.
     * @callback module:api/DefaultApi~gETRemoveRoleFromDBClusterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disassociates an Identity and Access Management (IAM) role from a DB cluster.
     * @param {String} dBClusterIdentifier The name of the DB cluster to disassociate the IAM role from.
     * @param {String} roleArn The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [featureName] The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a href=\"https://docs.aws.amazon.com/neptune/latest/userguide/api-other-apis.html#DescribeDBEngineVersions\">DescribeDBEngineVersions</a>.
     * @param {module:api/DefaultApi~gETRemoveRoleFromDBClusterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETRemoveRoleFromDBCluster(dBClusterIdentifier, roleArn, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBClusterIdentifier' is set
      if (dBClusterIdentifier === undefined || dBClusterIdentifier === null) {
        throw new Error("Missing the required parameter 'dBClusterIdentifier' when calling gETRemoveRoleFromDBCluster");
      }
      // verify the required parameter 'roleArn' is set
      if (roleArn === undefined || roleArn === null) {
        throw new Error("Missing the required parameter 'roleArn' when calling gETRemoveRoleFromDBCluster");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETRemoveRoleFromDBCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETRemoveRoleFromDBCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBClusterIdentifier': dBClusterIdentifier,
        'RoleArn': roleArn,
        'FeatureName': opts['featureName'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=RemoveRoleFromDBCluster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETRemoveSourceIdentifierFromSubscription operation.
     * @callback module:api/DefaultApi~gETRemoveSourceIdentifierFromSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveSourceIdentifierFromSubscriptionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a source identifier from an existing event notification subscription.
     * @param {String} subscriptionName The name of the event notification subscription you want to remove a source identifier from.
     * @param {String} sourceIdentifier  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETRemoveSourceIdentifierFromSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveSourceIdentifierFromSubscriptionResult}
     */
    gETRemoveSourceIdentifierFromSubscription(subscriptionName, sourceIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionName' is set
      if (subscriptionName === undefined || subscriptionName === null) {
        throw new Error("Missing the required parameter 'subscriptionName' when calling gETRemoveSourceIdentifierFromSubscription");
      }
      // verify the required parameter 'sourceIdentifier' is set
      if (sourceIdentifier === undefined || sourceIdentifier === null) {
        throw new Error("Missing the required parameter 'sourceIdentifier' when calling gETRemoveSourceIdentifierFromSubscription");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETRemoveSourceIdentifierFromSubscription");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETRemoveSourceIdentifierFromSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
        'SubscriptionName': subscriptionName,
        'SourceIdentifier': sourceIdentifier,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = RemoveSourceIdentifierFromSubscriptionResult;
      return this.apiClient.callApi(
        '/#Action=RemoveSourceIdentifierFromSubscription', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETRemoveTagsFromResource operation.
     * @callback module:api/DefaultApi~gETRemoveTagsFromResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes metadata tags from an Amazon Neptune resource.
     * @param {String} resourceName The Amazon Neptune resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a href=\"https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing\"> Constructing an Amazon Resource Name (ARN)</a>.
     * @param {Array.<String>} tagKeys The tag key (name) of the tag to be removed.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETRemoveTagsFromResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETRemoveTagsFromResource(resourceName, tagKeys, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling gETRemoveTagsFromResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling gETRemoveTagsFromResource");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETRemoveTagsFromResource");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETRemoveTagsFromResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'ResourceName': resourceName,
        'TagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=RemoveTagsFromResource', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETResetDBClusterParameterGroup operation.
     * @callback module:api/DefaultApi~gETResetDBClusterParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBClusterParameterGroupNameMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
     * @param {String} dBClusterParameterGroupName The name of the DB cluster parameter group to reset.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [resetAllParameters] A value that is set to <code>true</code> to reset all parameters in the DB cluster parameter group to their default values, and <code>false</code> otherwise. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
     * @param {Array.<module:model/GETModifyDBClusterParameterGroupParametersParameterInner>} [parameters] A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is set to <code>true</code>.
     * @param {module:api/DefaultApi~gETResetDBClusterParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBClusterParameterGroupNameMessage}
     */
    gETResetDBClusterParameterGroup(dBClusterParameterGroupName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBClusterParameterGroupName' is set
      if (dBClusterParameterGroupName === undefined || dBClusterParameterGroupName === null) {
        throw new Error("Missing the required parameter 'dBClusterParameterGroupName' when calling gETResetDBClusterParameterGroup");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETResetDBClusterParameterGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETResetDBClusterParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBClusterParameterGroupName': dBClusterParameterGroupName,
        'ResetAllParameters': opts['resetAllParameters'],
        'Parameters': this.apiClient.buildCollectionParam(opts['parameters'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DBClusterParameterGroupNameMessage;
      return this.apiClient.callApi(
        '/#Action=ResetDBClusterParameterGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETResetDBParameterGroup operation.
     * @callback module:api/DefaultApi~gETResetDBParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBParameterGroupNameMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
     * @param {String} dBParameterGroupName <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBParameterGroup.</p> </li> </ul>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [resetAllParameters] <p>Specifies whether (<code>true</code>) or not (<code>false</code>) to reset all parameters in the DB parameter group to default values.</p> <p>Default: <code>true</code> </p>
     * @param {Array.<module:model/GETModifyDBClusterParameterGroupParametersParameterInner>} [parameters] <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
     * @param {module:api/DefaultApi~gETResetDBParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBParameterGroupNameMessage}
     */
    gETResetDBParameterGroup(dBParameterGroupName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBParameterGroupName' is set
      if (dBParameterGroupName === undefined || dBParameterGroupName === null) {
        throw new Error("Missing the required parameter 'dBParameterGroupName' when calling gETResetDBParameterGroup");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETResetDBParameterGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETResetDBParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBParameterGroupName': dBParameterGroupName,
        'ResetAllParameters': opts['resetAllParameters'],
        'Parameters': this.apiClient.buildCollectionParam(opts['parameters'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DBParameterGroupNameMessage;
      return this.apiClient.callApi(
        '/#Action=ResetDBParameterGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETRestoreDBClusterFromSnapshot operation.
     * @callback module:api/DefaultApi~gETRestoreDBClusterFromSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestoreDBClusterFromSnapshotResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
     * @param {String} dBClusterIdentifier <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
     * @param {String} snapshotIdentifier <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
     * @param {String} engine <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<String>} [availabilityZones] Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in.
     * @param {String} [engineVersion] The version of the database engine to use for the new DB cluster.
     * @param {Number} [port] <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
     * @param {String} [dBSubnetGroupName] <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
     * @param {String} [databaseName] Not supported.
     * @param {String} [optionGroupName]  <i>(Not supported by Neptune)</i> 
     * @param {Array.<String>} [vpcSecurityGroupIds] A list of VPC security groups that the new DB cluster will belong to.
     * @param {Array.<module:model/GETAddTagsToResourceTagsParameterInner>} [tags] The tags to be assigned to the restored DB cluster.
     * @param {String} [kmsKeyId] <p>The Amazon KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same Amazon account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
     * @param {Boolean} [enableIAMDatabaseAuthentication] <p>True to enable mapping of Amazon Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
     * @param {Array.<String>} [enableCloudwatchLogsExports] The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs.
     * @param {String} [dBClusterParameterGroupName] <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
     * @param {Boolean} [deletionProtection] A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
     * @param {Boolean} [copyTagsToSnapshot]  <i>If set to <code>true</code>, tags are copied to any snapshot of the restored DB cluster that is created.</i> 
     * @param {module:model/GETCreateDBClusterServerlessV2ScalingConfigurationParameter} [serverlessV2ScalingConfiguration] 
     * @param {module:api/DefaultApi~gETRestoreDBClusterFromSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestoreDBClusterFromSnapshotResult}
     */
    gETRestoreDBClusterFromSnapshot(dBClusterIdentifier, snapshotIdentifier, engine, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBClusterIdentifier' is set
      if (dBClusterIdentifier === undefined || dBClusterIdentifier === null) {
        throw new Error("Missing the required parameter 'dBClusterIdentifier' when calling gETRestoreDBClusterFromSnapshot");
      }
      // verify the required parameter 'snapshotIdentifier' is set
      if (snapshotIdentifier === undefined || snapshotIdentifier === null) {
        throw new Error("Missing the required parameter 'snapshotIdentifier' when calling gETRestoreDBClusterFromSnapshot");
      }
      // verify the required parameter 'engine' is set
      if (engine === undefined || engine === null) {
        throw new Error("Missing the required parameter 'engine' when calling gETRestoreDBClusterFromSnapshot");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETRestoreDBClusterFromSnapshot");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETRestoreDBClusterFromSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
        'AvailabilityZones': this.apiClient.buildCollectionParam(opts['availabilityZones'], 'multi'),
        'DBClusterIdentifier': dBClusterIdentifier,
        'SnapshotIdentifier': snapshotIdentifier,
        'Engine': engine,
        'EngineVersion': opts['engineVersion'],
        'Port': opts['port'],
        'DBSubnetGroupName': opts['dBSubnetGroupName'],
        'DatabaseName': opts['databaseName'],
        'OptionGroupName': opts['optionGroupName'],
        'VpcSecurityGroupIds': this.apiClient.buildCollectionParam(opts['vpcSecurityGroupIds'], 'multi'),
        'Tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'KmsKeyId': opts['kmsKeyId'],
        'EnableIAMDatabaseAuthentication': opts['enableIAMDatabaseAuthentication'],
        'EnableCloudwatchLogsExports': this.apiClient.buildCollectionParam(opts['enableCloudwatchLogsExports'], 'multi'),
        'DBClusterParameterGroupName': opts['dBClusterParameterGroupName'],
        'DeletionProtection': opts['deletionProtection'],
        'CopyTagsToSnapshot': opts['copyTagsToSnapshot'],
        'ServerlessV2ScalingConfiguration': opts['serverlessV2ScalingConfiguration'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = RestoreDBClusterFromSnapshotResult;
      return this.apiClient.callApi(
        '/#Action=RestoreDBClusterFromSnapshot', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETRestoreDBClusterToPointInTime operation.
     * @callback module:api/DefaultApi~gETRestoreDBClusterToPointInTimeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestoreDBClusterToPointInTimeResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
     * @param {String} dBClusterIdentifier <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
     * @param {String} sourceDBClusterIdentifier <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [restoreType] <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
     * @param {Date} [restoreToTime] <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Cannot be specified if <code>UseLatestRestorableTime</code> parameter is true</p> </li> <li> <p>Cannot be specified if <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
     * @param {Boolean} [useLatestRestorableTime] <p>A value that is set to <code>true</code> to restore the DB cluster to the latest restorable backup time, and <code>false</code> otherwise.</p> <p>Default: <code>false</code> </p> <p>Constraints: Cannot be specified if <code>RestoreToTime</code> parameter is provided.</p>
     * @param {Number} [port] <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
     * @param {String} [dBSubnetGroupName] <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
     * @param {String} [optionGroupName]  <i>(Not supported by Neptune)</i> 
     * @param {Array.<String>} [vpcSecurityGroupIds] A list of VPC security groups that the new DB cluster belongs to.
     * @param {Array.<module:model/GETAddTagsToResourceTagsParameterInner>} [tags] The tags to be applied to the restored DB cluster.
     * @param {String} [kmsKeyId] <p>The Amazon KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same Amazon account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
     * @param {Boolean} [enableIAMDatabaseAuthentication] <p>True to enable mapping of Amazon Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
     * @param {Array.<String>} [enableCloudwatchLogsExports] The list of logs that the restored DB cluster is to export to CloudWatch Logs.
     * @param {String} [dBClusterParameterGroupName] <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
     * @param {Boolean} [deletionProtection] A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
     * @param {module:model/GETCreateDBClusterServerlessV2ScalingConfigurationParameter} [serverlessV2ScalingConfiguration] 
     * @param {module:api/DefaultApi~gETRestoreDBClusterToPointInTimeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestoreDBClusterToPointInTimeResult}
     */
    gETRestoreDBClusterToPointInTime(dBClusterIdentifier, sourceDBClusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBClusterIdentifier' is set
      if (dBClusterIdentifier === undefined || dBClusterIdentifier === null) {
        throw new Error("Missing the required parameter 'dBClusterIdentifier' when calling gETRestoreDBClusterToPointInTime");
      }
      // verify the required parameter 'sourceDBClusterIdentifier' is set
      if (sourceDBClusterIdentifier === undefined || sourceDBClusterIdentifier === null) {
        throw new Error("Missing the required parameter 'sourceDBClusterIdentifier' when calling gETRestoreDBClusterToPointInTime");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETRestoreDBClusterToPointInTime");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETRestoreDBClusterToPointInTime");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBClusterIdentifier': dBClusterIdentifier,
        'RestoreType': opts['restoreType'],
        'SourceDBClusterIdentifier': sourceDBClusterIdentifier,
        'RestoreToTime': opts['restoreToTime'],
        'UseLatestRestorableTime': opts['useLatestRestorableTime'],
        'Port': opts['port'],
        'DBSubnetGroupName': opts['dBSubnetGroupName'],
        'OptionGroupName': opts['optionGroupName'],
        'VpcSecurityGroupIds': this.apiClient.buildCollectionParam(opts['vpcSecurityGroupIds'], 'multi'),
        'Tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'KmsKeyId': opts['kmsKeyId'],
        'EnableIAMDatabaseAuthentication': opts['enableIAMDatabaseAuthentication'],
        'EnableCloudwatchLogsExports': this.apiClient.buildCollectionParam(opts['enableCloudwatchLogsExports'], 'multi'),
        'DBClusterParameterGroupName': opts['dBClusterParameterGroupName'],
        'DeletionProtection': opts['deletionProtection'],
        'ServerlessV2ScalingConfiguration': opts['serverlessV2ScalingConfiguration'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = RestoreDBClusterToPointInTimeResult;
      return this.apiClient.callApi(
        '/#Action=RestoreDBClusterToPointInTime', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETStartDBCluster operation.
     * @callback module:api/DefaultApi~gETStartDBClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartDBClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts an Amazon Neptune DB cluster that was stopped using the Amazon console, the Amazon CLI stop-db-cluster command, or the StopDBCluster API.
     * @param {String} dBClusterIdentifier The DB cluster identifier of the Neptune DB cluster to be started. This parameter is stored as a lowercase string.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETStartDBClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartDBClusterResult}
     */
    gETStartDBCluster(dBClusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBClusterIdentifier' is set
      if (dBClusterIdentifier === undefined || dBClusterIdentifier === null) {
        throw new Error("Missing the required parameter 'dBClusterIdentifier' when calling gETStartDBCluster");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETStartDBCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETStartDBCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBClusterIdentifier': dBClusterIdentifier,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = StartDBClusterResult;
      return this.apiClient.callApi(
        '/#Action=StartDBCluster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETStopDBCluster operation.
     * @callback module:api/DefaultApi~gETStopDBClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopDBClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Stops an Amazon Neptune DB cluster. When you stop a DB cluster, Neptune retains the DB cluster's metadata, including its endpoints and DB parameter groups.</p> <p>Neptune also retains the transaction logs so you can do a point-in-time restore if necessary.</p>
     * @param {String} dBClusterIdentifier The DB cluster identifier of the Neptune DB cluster to be stopped. This parameter is stored as a lowercase string.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETStopDBClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopDBClusterResult}
     */
    gETStopDBCluster(dBClusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dBClusterIdentifier' is set
      if (dBClusterIdentifier === undefined || dBClusterIdentifier === null) {
        throw new Error("Missing the required parameter 'dBClusterIdentifier' when calling gETStopDBCluster");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETStopDBCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETStopDBCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBClusterIdentifier': dBClusterIdentifier,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = StopDBClusterResult;
      return this.apiClient.callApi(
        '/#Action=StopDBCluster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTAddRoleToDBCluster operation.
     * @callback module:api/DefaultApi~pOSTAddRoleToDBClusterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates an Identity and Access Management (IAM) role with an Neptune DB cluster.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/AddRoleToDBClusterMessage} [addRoleToDBClusterMessage] 
     * @param {module:api/DefaultApi~pOSTAddRoleToDBClusterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pOSTAddRoleToDBCluster(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['addRoleToDBClusterMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTAddRoleToDBCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTAddRoleToDBCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=AddRoleToDBCluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTAddSourceIdentifierToSubscription operation.
     * @callback module:api/DefaultApi~pOSTAddSourceIdentifierToSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddSourceIdentifierToSubscriptionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a source identifier to an existing event notification subscription.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/AddSourceIdentifierToSubscriptionMessage} [addSourceIdentifierToSubscriptionMessage] 
     * @param {module:api/DefaultApi~pOSTAddSourceIdentifierToSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddSourceIdentifierToSubscriptionResult}
     */
    pOSTAddSourceIdentifierToSubscription(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['addSourceIdentifierToSubscriptionMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTAddSourceIdentifierToSubscription");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTAddSourceIdentifierToSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = AddSourceIdentifierToSubscriptionResult;
      return this.apiClient.callApi(
        '/#Action=AddSourceIdentifierToSubscription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTAddTagsToResource operation.
     * @callback module:api/DefaultApi~pOSTAddTagsToResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/AddTagsToResourceMessage} [addTagsToResourceMessage] 
     * @param {module:api/DefaultApi~pOSTAddTagsToResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pOSTAddTagsToResource(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['addTagsToResourceMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTAddTagsToResource");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTAddTagsToResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=AddTagsToResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTApplyPendingMaintenanceAction operation.
     * @callback module:api/DefaultApi~pOSTApplyPendingMaintenanceActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplyPendingMaintenanceActionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Applies a pending maintenance action to a resource (for example, to a DB instance).
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ApplyPendingMaintenanceActionMessage} [applyPendingMaintenanceActionMessage] 
     * @param {module:api/DefaultApi~pOSTApplyPendingMaintenanceActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplyPendingMaintenanceActionResult}
     */
    pOSTApplyPendingMaintenanceAction(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['applyPendingMaintenanceActionMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTApplyPendingMaintenanceAction");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTApplyPendingMaintenanceAction");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ApplyPendingMaintenanceActionResult;
      return this.apiClient.callApi(
        '/#Action=ApplyPendingMaintenanceAction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCopyDBClusterParameterGroup operation.
     * @callback module:api/DefaultApi~pOSTCopyDBClusterParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CopyDBClusterParameterGroupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copies the specified DB cluster parameter group.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CopyDBClusterParameterGroupMessage} [copyDBClusterParameterGroupMessage] 
     * @param {module:api/DefaultApi~pOSTCopyDBClusterParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CopyDBClusterParameterGroupResult}
     */
    pOSTCopyDBClusterParameterGroup(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['copyDBClusterParameterGroupMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCopyDBClusterParameterGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCopyDBClusterParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CopyDBClusterParameterGroupResult;
      return this.apiClient.callApi(
        '/#Action=CopyDBClusterParameterGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCopyDBClusterSnapshot operation.
     * @callback module:api/DefaultApi~pOSTCopyDBClusterSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CopyDBClusterSnapshotResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CopyDBClusterSnapshotMessage} [copyDBClusterSnapshotMessage] 
     * @param {module:api/DefaultApi~pOSTCopyDBClusterSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CopyDBClusterSnapshotResult}
     */
    pOSTCopyDBClusterSnapshot(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['copyDBClusterSnapshotMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCopyDBClusterSnapshot");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCopyDBClusterSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CopyDBClusterSnapshotResult;
      return this.apiClient.callApi(
        '/#Action=CopyDBClusterSnapshot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCopyDBParameterGroup operation.
     * @callback module:api/DefaultApi~pOSTCopyDBParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CopyDBParameterGroupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copies the specified DB parameter group.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CopyDBParameterGroupMessage} [copyDBParameterGroupMessage] 
     * @param {module:api/DefaultApi~pOSTCopyDBParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CopyDBParameterGroupResult}
     */
    pOSTCopyDBParameterGroup(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['copyDBParameterGroupMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCopyDBParameterGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCopyDBParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CopyDBParameterGroupResult;
      return this.apiClient.callApi(
        '/#Action=CopyDBParameterGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateDBCluster operation.
     * @callback module:api/DefaultApi~pOSTCreateDBClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDBClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p> <p>Note that when you create a new cluster using <code>CreateDBCluster</code> directly, deletion protection is disabled by default (when you create a new production cluster in the console, deletion protection is enabled by default). You can only delete a DB cluster if its <code>DeletionProtection</code> field is set to <code>false</code>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateDBClusterMessage} [createDBClusterMessage] 
     * @param {module:api/DefaultApi~pOSTCreateDBClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDBClusterResult}
     */
    pOSTCreateDBCluster(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createDBClusterMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateDBCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateDBCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateDBClusterResult;
      return this.apiClient.callApi(
        '/#Action=CreateDBCluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateDBClusterEndpoint operation.
     * @callback module:api/DefaultApi~pOSTCreateDBClusterEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDBClusterEndpointOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new custom endpoint and associates it with an Amazon Neptune DB cluster.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateDBClusterEndpointMessage} [createDBClusterEndpointMessage] 
     * @param {module:api/DefaultApi~pOSTCreateDBClusterEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDBClusterEndpointOutput}
     */
    pOSTCreateDBClusterEndpoint(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createDBClusterEndpointMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateDBClusterEndpoint");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateDBClusterEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateDBClusterEndpointOutput;
      return this.apiClient.callApi(
        '/#Action=CreateDBClusterEndpoint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateDBClusterParameterGroup operation.
     * @callback module:api/DefaultApi~pOSTCreateDBClusterParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDBClusterParameterGroupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href=\"https://console.aws.amazon.com/rds/\">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateDBClusterParameterGroupMessage} [createDBClusterParameterGroupMessage] 
     * @param {module:api/DefaultApi~pOSTCreateDBClusterParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDBClusterParameterGroupResult}
     */
    pOSTCreateDBClusterParameterGroup(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createDBClusterParameterGroupMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateDBClusterParameterGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateDBClusterParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateDBClusterParameterGroupResult;
      return this.apiClient.callApi(
        '/#Action=CreateDBClusterParameterGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateDBClusterSnapshot operation.
     * @callback module:api/DefaultApi~pOSTCreateDBClusterSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDBClusterSnapshotResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a snapshot of a DB cluster.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateDBClusterSnapshotMessage} [createDBClusterSnapshotMessage] 
     * @param {module:api/DefaultApi~pOSTCreateDBClusterSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDBClusterSnapshotResult}
     */
    pOSTCreateDBClusterSnapshot(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createDBClusterSnapshotMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateDBClusterSnapshot");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateDBClusterSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateDBClusterSnapshotResult;
      return this.apiClient.callApi(
        '/#Action=CreateDBClusterSnapshot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateDBInstance operation.
     * @callback module:api/DefaultApi~pOSTCreateDBInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDBInstanceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new DB instance.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateDBInstanceMessage} [createDBInstanceMessage] 
     * @param {module:api/DefaultApi~pOSTCreateDBInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDBInstanceResult}
     */
    pOSTCreateDBInstance(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createDBInstanceMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateDBInstance");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateDBInstance");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateDBInstanceResult;
      return this.apiClient.callApi(
        '/#Action=CreateDBInstance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateDBParameterGroup operation.
     * @callback module:api/DefaultApi~pOSTCreateDBParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDBParameterGroupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateDBParameterGroupMessage} [createDBParameterGroupMessage] 
     * @param {module:api/DefaultApi~pOSTCreateDBParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDBParameterGroupResult}
     */
    pOSTCreateDBParameterGroup(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createDBParameterGroupMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateDBParameterGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateDBParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateDBParameterGroupResult;
      return this.apiClient.callApi(
        '/#Action=CreateDBParameterGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateDBSubnetGroup operation.
     * @callback module:api/DefaultApi~pOSTCreateDBSubnetGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDBSubnetGroupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the Amazon Region.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateDBSubnetGroupMessage} [createDBSubnetGroupMessage] 
     * @param {module:api/DefaultApi~pOSTCreateDBSubnetGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDBSubnetGroupResult}
     */
    pOSTCreateDBSubnetGroup(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createDBSubnetGroupMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateDBSubnetGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateDBSubnetGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateDBSubnetGroupResult;
      return this.apiClient.callApi(
        '/#Action=CreateDBSubnetGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateEventSubscription operation.
     * @callback module:api/DefaultApi~pOSTCreateEventSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateEventSubscriptionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateEventSubscriptionMessage} [createEventSubscriptionMessage] 
     * @param {module:api/DefaultApi~pOSTCreateEventSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateEventSubscriptionResult}
     */
    pOSTCreateEventSubscription(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createEventSubscriptionMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateEventSubscription");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateEventSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateEventSubscriptionResult;
      return this.apiClient.callApi(
        '/#Action=CreateEventSubscription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateGlobalCluster operation.
     * @callback module:api/DefaultApi~pOSTCreateGlobalClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateGlobalClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a Neptune global database spread across multiple Amazon Regions. The global database contains a single primary cluster with read-write capability, and read-only secondary clusters that receive data from the primary cluster through high-speed replication performed by the Neptune storage subsystem.</p> <p>You can create a global database that is initially empty, and then add a primary cluster and secondary clusters to it, or you can specify an existing Neptune cluster during the create operation to become the primary cluster of the global database.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateGlobalClusterMessage} [createGlobalClusterMessage] 
     * @param {module:api/DefaultApi~pOSTCreateGlobalClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateGlobalClusterResult}
     */
    pOSTCreateGlobalCluster(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createGlobalClusterMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateGlobalCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateGlobalCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateGlobalClusterResult;
      return this.apiClient.callApi(
        '/#Action=CreateGlobalCluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteDBCluster operation.
     * @callback module:api/DefaultApi~pOSTDeleteDBClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteDBClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p>Note that the DB Cluster cannot be deleted if deletion protection is enabled. To delete it, you must first set its <code>DeletionProtection</code> field to <code>False</code>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteDBClusterMessage} [deleteDBClusterMessage] 
     * @param {module:api/DefaultApi~pOSTDeleteDBClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteDBClusterResult}
     */
    pOSTDeleteDBCluster(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteDBClusterMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteDBCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteDBCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DeleteDBClusterResult;
      return this.apiClient.callApi(
        '/#Action=DeleteDBCluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteDBClusterEndpoint operation.
     * @callback module:api/DefaultApi~pOSTDeleteDBClusterEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteDBClusterEndpointOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a custom endpoint and removes it from an Amazon Neptune DB cluster.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteDBClusterEndpointMessage} [deleteDBClusterEndpointMessage] 
     * @param {module:api/DefaultApi~pOSTDeleteDBClusterEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteDBClusterEndpointOutput}
     */
    pOSTDeleteDBClusterEndpoint(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteDBClusterEndpointMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteDBClusterEndpoint");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteDBClusterEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DeleteDBClusterEndpointOutput;
      return this.apiClient.callApi(
        '/#Action=DeleteDBClusterEndpoint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteDBClusterParameterGroup operation.
     * @callback module:api/DefaultApi~pOSTDeleteDBClusterParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteDBClusterParameterGroupMessage} [deleteDBClusterParameterGroupMessage] 
     * @param {module:api/DefaultApi~pOSTDeleteDBClusterParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pOSTDeleteDBClusterParameterGroup(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteDBClusterParameterGroupMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteDBClusterParameterGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteDBClusterParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteDBClusterParameterGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteDBClusterSnapshot operation.
     * @callback module:api/DefaultApi~pOSTDeleteDBClusterSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteDBClusterSnapshotResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteDBClusterSnapshotMessage} [deleteDBClusterSnapshotMessage] 
     * @param {module:api/DefaultApi~pOSTDeleteDBClusterSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteDBClusterSnapshotResult}
     */
    pOSTDeleteDBClusterSnapshot(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteDBClusterSnapshotMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteDBClusterSnapshot");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteDBClusterSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DeleteDBClusterSnapshotResult;
      return this.apiClient.callApi(
        '/#Action=DeleteDBClusterSnapshot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteDBInstance operation.
     * @callback module:api/DefaultApi~pOSTDeleteDBInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteDBInstanceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster, or if it has deletion protection enabled.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteDBInstanceMessage} [deleteDBInstanceMessage] 
     * @param {module:api/DefaultApi~pOSTDeleteDBInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteDBInstanceResult}
     */
    pOSTDeleteDBInstance(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteDBInstanceMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteDBInstance");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteDBInstance");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DeleteDBInstanceResult;
      return this.apiClient.callApi(
        '/#Action=DeleteDBInstance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteDBParameterGroup operation.
     * @callback module:api/DefaultApi~pOSTDeleteDBParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteDBParameterGroupMessage} [deleteDBParameterGroupMessage] 
     * @param {module:api/DefaultApi~pOSTDeleteDBParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pOSTDeleteDBParameterGroup(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteDBParameterGroupMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteDBParameterGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteDBParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteDBParameterGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteDBSubnetGroup operation.
     * @callback module:api/DefaultApi~pOSTDeleteDBSubnetGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteDBSubnetGroupMessage} [deleteDBSubnetGroupMessage] 
     * @param {module:api/DefaultApi~pOSTDeleteDBSubnetGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pOSTDeleteDBSubnetGroup(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteDBSubnetGroupMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteDBSubnetGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteDBSubnetGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteDBSubnetGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteEventSubscription operation.
     * @callback module:api/DefaultApi~pOSTDeleteEventSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteEventSubscriptionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an event notification subscription.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteEventSubscriptionMessage} [deleteEventSubscriptionMessage] 
     * @param {module:api/DefaultApi~pOSTDeleteEventSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteEventSubscriptionResult}
     */
    pOSTDeleteEventSubscription(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteEventSubscriptionMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteEventSubscription");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteEventSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DeleteEventSubscriptionResult;
      return this.apiClient.callApi(
        '/#Action=DeleteEventSubscription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteGlobalCluster operation.
     * @callback module:api/DefaultApi~pOSTDeleteGlobalClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteGlobalClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a global database. The primary and all secondary clusters must already be detached or deleted first.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteGlobalClusterMessage} [deleteGlobalClusterMessage] 
     * @param {module:api/DefaultApi~pOSTDeleteGlobalClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteGlobalClusterResult}
     */
    pOSTDeleteGlobalCluster(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteGlobalClusterMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteGlobalCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteGlobalCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DeleteGlobalClusterResult;
      return this.apiClient.callApi(
        '/#Action=DeleteGlobalCluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeDBClusterEndpoints operation.
     * @callback module:api/DefaultApi~pOSTDescribeDBClusterEndpointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBClusterEndpointMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns information about endpoints for an Amazon Neptune DB cluster.</p> <note> <p>This operation can also return information for Amazon RDS clusters and Amazon DocDB clusters.</p> </note>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeDBClusterEndpointsMessage} [describeDBClusterEndpointsMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeDBClusterEndpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBClusterEndpointMessage}
     */
    pOSTDescribeDBClusterEndpoints(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeDBClusterEndpointsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeDBClusterEndpoints");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeDBClusterEndpoints");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DBClusterEndpointMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeDBClusterEndpoints', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeDBClusterParameterGroups operation.
     * @callback module:api/DefaultApi~pOSTDescribeDBClusterParameterGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBClusterParameterGroupsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeDBClusterParameterGroupsMessage} [describeDBClusterParameterGroupsMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeDBClusterParameterGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBClusterParameterGroupsMessage}
     */
    pOSTDescribeDBClusterParameterGroups(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeDBClusterParameterGroupsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeDBClusterParameterGroups");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeDBClusterParameterGroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DBClusterParameterGroupsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeDBClusterParameterGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeDBClusterParameters operation.
     * @callback module:api/DefaultApi~pOSTDescribeDBClusterParametersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBClusterParameterGroupDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the detailed parameter list for a particular DB cluster parameter group.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeDBClusterParametersMessage} [describeDBClusterParametersMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeDBClusterParametersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBClusterParameterGroupDetails}
     */
    pOSTDescribeDBClusterParameters(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeDBClusterParametersMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeDBClusterParameters");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeDBClusterParameters");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DBClusterParameterGroupDetails;
      return this.apiClient.callApi(
        '/#Action=DescribeDBClusterParameters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeDBClusterSnapshotAttributes operation.
     * @callback module:api/DefaultApi~pOSTDescribeDBClusterSnapshotAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDBClusterSnapshotAttributesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other Amazon accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the Amazon accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all Amazon accounts.</p> <p>To add or remove access for an Amazon account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeDBClusterSnapshotAttributesMessage} [describeDBClusterSnapshotAttributesMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeDBClusterSnapshotAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDBClusterSnapshotAttributesResult}
     */
    pOSTDescribeDBClusterSnapshotAttributes(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeDBClusterSnapshotAttributesMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeDBClusterSnapshotAttributes");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeDBClusterSnapshotAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeDBClusterSnapshotAttributesResult;
      return this.apiClient.callApi(
        '/#Action=DescribeDBClusterSnapshotAttributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeDBClusterSnapshots operation.
     * @callback module:api/DefaultApi~pOSTDescribeDBClusterSnapshotsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBClusterSnapshotMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about DB cluster snapshots. This API action supports pagination.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeDBClusterSnapshotsMessage} [describeDBClusterSnapshotsMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeDBClusterSnapshotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBClusterSnapshotMessage}
     */
    pOSTDescribeDBClusterSnapshots(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeDBClusterSnapshotsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeDBClusterSnapshots");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeDBClusterSnapshots");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DBClusterSnapshotMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeDBClusterSnapshots', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeDBClusters operation.
     * @callback module:api/DefaultApi~pOSTDescribeDBClustersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBClusterMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns information about provisioned DB clusters, and supports pagination.</p> <note> <p>This operation can also return information for Amazon RDS clusters and Amazon DocDB clusters.</p> </note>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeDBClustersMessage} [describeDBClustersMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeDBClustersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBClusterMessage}
     */
    pOSTDescribeDBClusters(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeDBClustersMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeDBClusters");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeDBClusters");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DBClusterMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeDBClusters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeDBEngineVersions operation.
     * @callback module:api/DefaultApi~pOSTDescribeDBEngineVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBEngineVersionMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of the available DB engines.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeDBEngineVersionsMessage} [describeDBEngineVersionsMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeDBEngineVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBEngineVersionMessage}
     */
    pOSTDescribeDBEngineVersions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeDBEngineVersionsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeDBEngineVersions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeDBEngineVersions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DBEngineVersionMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeDBEngineVersions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeDBInstances operation.
     * @callback module:api/DefaultApi~pOSTDescribeDBInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBInstanceMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns information about provisioned instances, and supports pagination.</p> <note> <p>This operation can also return information for Amazon RDS instances and Amazon DocDB instances.</p> </note>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeDBInstancesMessage} [describeDBInstancesMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeDBInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBInstanceMessage}
     */
    pOSTDescribeDBInstances(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeDBInstancesMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeDBInstances");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeDBInstances");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DBInstanceMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeDBInstances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeDBParameterGroups operation.
     * @callback module:api/DefaultApi~pOSTDescribeDBParameterGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBParameterGroupsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeDBParameterGroupsMessage} [describeDBParameterGroupsMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeDBParameterGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBParameterGroupsMessage}
     */
    pOSTDescribeDBParameterGroups(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeDBParameterGroupsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeDBParameterGroups");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeDBParameterGroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DBParameterGroupsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeDBParameterGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeDBParameters operation.
     * @callback module:api/DefaultApi~pOSTDescribeDBParametersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBParameterGroupDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the detailed parameter list for a particular DB parameter group.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeDBParametersMessage} [describeDBParametersMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeDBParametersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBParameterGroupDetails}
     */
    pOSTDescribeDBParameters(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeDBParametersMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeDBParameters");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeDBParameters");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DBParameterGroupDetails;
      return this.apiClient.callApi(
        '/#Action=DescribeDBParameters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeDBSubnetGroups operation.
     * @callback module:api/DefaultApi~pOSTDescribeDBSubnetGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBSubnetGroupMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href=\"http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\">Wikipedia Tutorial</a>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeDBSubnetGroupsMessage} [describeDBSubnetGroupsMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeDBSubnetGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBSubnetGroupMessage}
     */
    pOSTDescribeDBSubnetGroups(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeDBSubnetGroupsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeDBSubnetGroups");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeDBSubnetGroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DBSubnetGroupMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeDBSubnetGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeEngineDefaultClusterParameters operation.
     * @callback module:api/DefaultApi~pOSTDescribeEngineDefaultClusterParametersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeEngineDefaultClusterParametersResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the default engine and system parameter information for the cluster database engine.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeEngineDefaultClusterParametersMessage} [describeEngineDefaultClusterParametersMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeEngineDefaultClusterParametersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeEngineDefaultClusterParametersResult}
     */
    pOSTDescribeEngineDefaultClusterParameters(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeEngineDefaultClusterParametersMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeEngineDefaultClusterParameters");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeEngineDefaultClusterParameters");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeEngineDefaultClusterParametersResult;
      return this.apiClient.callApi(
        '/#Action=DescribeEngineDefaultClusterParameters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeEngineDefaultParameters operation.
     * @callback module:api/DefaultApi~pOSTDescribeEngineDefaultParametersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeEngineDefaultParametersResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the default engine and system parameter information for the specified database engine.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeEngineDefaultParametersMessage} [describeEngineDefaultParametersMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeEngineDefaultParametersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeEngineDefaultParametersResult}
     */
    pOSTDescribeEngineDefaultParameters(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeEngineDefaultParametersMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeEngineDefaultParameters");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeEngineDefaultParameters");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeEngineDefaultParametersResult;
      return this.apiClient.callApi(
        '/#Action=DescribeEngineDefaultParameters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeEventCategories operation.
     * @callback module:api/DefaultApi~pOSTDescribeEventCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventCategoriesMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays a list of categories for all event source types, or, if specified, for a specified source type.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeEventCategoriesMessage} [describeEventCategoriesMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeEventCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventCategoriesMessage}
     */
    pOSTDescribeEventCategories(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeEventCategoriesMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeEventCategories");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeEventCategories");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = EventCategoriesMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeEventCategories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeEventSubscriptions operation.
     * @callback module:api/DefaultApi~pOSTDescribeEventSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSubscriptionsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeEventSubscriptionsMessage} [describeEventSubscriptionsMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeEventSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSubscriptionsMessage}
     */
    pOSTDescribeEventSubscriptions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeEventSubscriptionsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeEventSubscriptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeEventSubscriptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = EventSubscriptionsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeEventSubscriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeEvents operation.
     * @callback module:api/DefaultApi~pOSTDescribeEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeEventsMessage} [describeEventsMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventsMessage}
     */
    pOSTDescribeEvents(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeEventsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeEvents");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeEvents");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = EventsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeEvents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeGlobalClusters operation.
     * @callback module:api/DefaultApi~pOSTDescribeGlobalClustersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GlobalClustersMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about Neptune global database clusters. This API supports pagination.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeGlobalClustersMessage} [describeGlobalClustersMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeGlobalClustersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GlobalClustersMessage}
     */
    pOSTDescribeGlobalClusters(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeGlobalClustersMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeGlobalClusters");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeGlobalClusters");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = GlobalClustersMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeGlobalClusters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeOrderableDBInstanceOptions operation.
     * @callback module:api/DefaultApi~pOSTDescribeOrderableDBInstanceOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderableDBInstanceOptionsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of orderable DB instance options for the specified engine.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeOrderableDBInstanceOptionsMessage} [describeOrderableDBInstanceOptionsMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeOrderableDBInstanceOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderableDBInstanceOptionsMessage}
     */
    pOSTDescribeOrderableDBInstanceOptions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeOrderableDBInstanceOptionsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeOrderableDBInstanceOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeOrderableDBInstanceOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = OrderableDBInstanceOptionsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeOrderableDBInstanceOptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribePendingMaintenanceActions operation.
     * @callback module:api/DefaultApi~pOSTDescribePendingMaintenanceActionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PendingMaintenanceActionsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribePendingMaintenanceActionsMessage} [describePendingMaintenanceActionsMessage] 
     * @param {module:api/DefaultApi~pOSTDescribePendingMaintenanceActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PendingMaintenanceActionsMessage}
     */
    pOSTDescribePendingMaintenanceActions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describePendingMaintenanceActionsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribePendingMaintenanceActions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribePendingMaintenanceActions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = PendingMaintenanceActionsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribePendingMaintenanceActions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeValidDBInstanceModifications operation.
     * @callback module:api/DefaultApi~pOSTDescribeValidDBInstanceModificationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeValidDBInstanceModificationsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeValidDBInstanceModificationsMessage} [describeValidDBInstanceModificationsMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeValidDBInstanceModificationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeValidDBInstanceModificationsResult}
     */
    pOSTDescribeValidDBInstanceModifications(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeValidDBInstanceModificationsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeValidDBInstanceModifications");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeValidDBInstanceModifications");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeValidDBInstanceModificationsResult;
      return this.apiClient.callApi(
        '/#Action=DescribeValidDBInstanceModifications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTFailoverDBCluster operation.
     * @callback module:api/DefaultApi~pOSTFailoverDBClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FailoverDBClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/FailoverDBClusterMessage} [failoverDBClusterMessage] 
     * @param {module:api/DefaultApi~pOSTFailoverDBClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FailoverDBClusterResult}
     */
    pOSTFailoverDBCluster(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['failoverDBClusterMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTFailoverDBCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTFailoverDBCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = FailoverDBClusterResult;
      return this.apiClient.callApi(
        '/#Action=FailoverDBCluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTFailoverGlobalCluster operation.
     * @callback module:api/DefaultApi~pOSTFailoverGlobalClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FailoverGlobalClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Initiates the failover process for a Neptune global database.</p> <p>A failover for a Neptune global database promotes one of secondary read-only DB clusters to be the primary DB cluster and demotes the primary DB cluster to being a secondary (read-only) DB cluster. In other words, the role of the current primary DB cluster and the selected target secondary DB cluster are switched. The selected secondary DB cluster assumes full read/write capabilities for the Neptune global database.</p> <note> <p>This action applies <b>only</b> to Neptune global databases. This action is only intended for use on healthy Neptune global databases with healthy Neptune DB clusters and no region-wide outages, to test disaster recovery scenarios or to reconfigure the global database topology.</p> </note>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/FailoverGlobalClusterMessage} [failoverGlobalClusterMessage] 
     * @param {module:api/DefaultApi~pOSTFailoverGlobalClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FailoverGlobalClusterResult}
     */
    pOSTFailoverGlobalCluster(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['failoverGlobalClusterMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTFailoverGlobalCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTFailoverGlobalCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = FailoverGlobalClusterResult;
      return this.apiClient.callApi(
        '/#Action=FailoverGlobalCluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTListTagsForResource operation.
     * @callback module:api/DefaultApi~pOSTListTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagListMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all tags on an Amazon Neptune resource.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ListTagsForResourceMessage} [listTagsForResourceMessage] 
     * @param {module:api/DefaultApi~pOSTListTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagListMessage}
     */
    pOSTListTagsForResource(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['listTagsForResourceMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTListTagsForResource");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTListTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = TagListMessage;
      return this.apiClient.callApi(
        '/#Action=ListTagsForResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTModifyDBCluster operation.
     * @callback module:api/DefaultApi~pOSTModifyDBClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyDBClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ModifyDBClusterMessage} [modifyDBClusterMessage] 
     * @param {module:api/DefaultApi~pOSTModifyDBClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyDBClusterResult}
     */
    pOSTModifyDBCluster(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifyDBClusterMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTModifyDBCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTModifyDBCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ModifyDBClusterResult;
      return this.apiClient.callApi(
        '/#Action=ModifyDBCluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTModifyDBClusterEndpoint operation.
     * @callback module:api/DefaultApi~pOSTModifyDBClusterEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyDBClusterEndpointOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the properties of an endpoint in an Amazon Neptune DB cluster.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ModifyDBClusterEndpointMessage} [modifyDBClusterEndpointMessage] 
     * @param {module:api/DefaultApi~pOSTModifyDBClusterEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyDBClusterEndpointOutput}
     */
    pOSTModifyDBClusterEndpoint(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifyDBClusterEndpointMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTModifyDBClusterEndpoint");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTModifyDBClusterEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ModifyDBClusterEndpointOutput;
      return this.apiClient.callApi(
        '/#Action=ModifyDBClusterEndpoint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTModifyDBClusterParameterGroup operation.
     * @callback module:api/DefaultApi~pOSTModifyDBClusterParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBClusterParameterGroupNameMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ModifyDBClusterParameterGroupMessage} [modifyDBClusterParameterGroupMessage] 
     * @param {module:api/DefaultApi~pOSTModifyDBClusterParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBClusterParameterGroupNameMessage}
     */
    pOSTModifyDBClusterParameterGroup(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifyDBClusterParameterGroupMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTModifyDBClusterParameterGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTModifyDBClusterParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DBClusterParameterGroupNameMessage;
      return this.apiClient.callApi(
        '/#Action=ModifyDBClusterParameterGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTModifyDBClusterSnapshotAttribute operation.
     * @callback module:api/DefaultApi~pOSTModifyDBClusterSnapshotAttributeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyDBClusterSnapshotAttributeResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other Amazon accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the Amazon accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all Amazon accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all Amazon accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized Amazon account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which Amazon accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ModifyDBClusterSnapshotAttributeMessage} [modifyDBClusterSnapshotAttributeMessage] 
     * @param {module:api/DefaultApi~pOSTModifyDBClusterSnapshotAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyDBClusterSnapshotAttributeResult}
     */
    pOSTModifyDBClusterSnapshotAttribute(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifyDBClusterSnapshotAttributeMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTModifyDBClusterSnapshotAttribute");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTModifyDBClusterSnapshotAttribute");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ModifyDBClusterSnapshotAttributeResult;
      return this.apiClient.callApi(
        '/#Action=ModifyDBClusterSnapshotAttribute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTModifyDBInstance operation.
     * @callback module:api/DefaultApi~pOSTModifyDBInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyDBInstanceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ModifyDBInstanceMessage} [modifyDBInstanceMessage] 
     * @param {module:api/DefaultApi~pOSTModifyDBInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyDBInstanceResult}
     */
    pOSTModifyDBInstance(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifyDBInstanceMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTModifyDBInstance");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTModifyDBInstance");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ModifyDBInstanceResult;
      return this.apiClient.callApi(
        '/#Action=ModifyDBInstance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTModifyDBParameterGroup operation.
     * @callback module:api/DefaultApi~pOSTModifyDBParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBParameterGroupNameMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ModifyDBParameterGroupMessage} [modifyDBParameterGroupMessage] 
     * @param {module:api/DefaultApi~pOSTModifyDBParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBParameterGroupNameMessage}
     */
    pOSTModifyDBParameterGroup(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifyDBParameterGroupMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTModifyDBParameterGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTModifyDBParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DBParameterGroupNameMessage;
      return this.apiClient.callApi(
        '/#Action=ModifyDBParameterGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTModifyDBSubnetGroup operation.
     * @callback module:api/DefaultApi~pOSTModifyDBSubnetGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyDBSubnetGroupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the Amazon Region.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ModifyDBSubnetGroupMessage} [modifyDBSubnetGroupMessage] 
     * @param {module:api/DefaultApi~pOSTModifyDBSubnetGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyDBSubnetGroupResult}
     */
    pOSTModifyDBSubnetGroup(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifyDBSubnetGroupMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTModifyDBSubnetGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTModifyDBSubnetGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ModifyDBSubnetGroupResult;
      return this.apiClient.callApi(
        '/#Action=ModifyDBSubnetGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTModifyEventSubscription operation.
     * @callback module:api/DefaultApi~pOSTModifyEventSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyEventSubscriptionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ModifyEventSubscriptionMessage} [modifyEventSubscriptionMessage] 
     * @param {module:api/DefaultApi~pOSTModifyEventSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyEventSubscriptionResult}
     */
    pOSTModifyEventSubscription(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifyEventSubscriptionMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTModifyEventSubscription");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTModifyEventSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ModifyEventSubscriptionResult;
      return this.apiClient.callApi(
        '/#Action=ModifyEventSubscription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTModifyGlobalCluster operation.
     * @callback module:api/DefaultApi~pOSTModifyGlobalClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyGlobalClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify a setting for an Amazon Neptune global cluster. You can change one or more database configuration parameters by specifying these parameters and their new values in the request.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ModifyGlobalClusterMessage} [modifyGlobalClusterMessage] 
     * @param {module:api/DefaultApi~pOSTModifyGlobalClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyGlobalClusterResult}
     */
    pOSTModifyGlobalCluster(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifyGlobalClusterMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTModifyGlobalCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTModifyGlobalCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ModifyGlobalClusterResult;
      return this.apiClient.callApi(
        '/#Action=ModifyGlobalCluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTPromoteReadReplicaDBCluster operation.
     * @callback module:api/DefaultApi~pOSTPromoteReadReplicaDBClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PromoteReadReplicaDBClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Not supported.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/PromoteReadReplicaDBClusterMessage} [promoteReadReplicaDBClusterMessage] 
     * @param {module:api/DefaultApi~pOSTPromoteReadReplicaDBClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PromoteReadReplicaDBClusterResult}
     */
    pOSTPromoteReadReplicaDBCluster(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['promoteReadReplicaDBClusterMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTPromoteReadReplicaDBCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTPromoteReadReplicaDBCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = PromoteReadReplicaDBClusterResult;
      return this.apiClient.callApi(
        '/#Action=PromoteReadReplicaDBCluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTRebootDBInstance operation.
     * @callback module:api/DefaultApi~pOSTRebootDBInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RebootDBInstanceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/RebootDBInstanceMessage} [rebootDBInstanceMessage] 
     * @param {module:api/DefaultApi~pOSTRebootDBInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RebootDBInstanceResult}
     */
    pOSTRebootDBInstance(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['rebootDBInstanceMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTRebootDBInstance");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTRebootDBInstance");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = RebootDBInstanceResult;
      return this.apiClient.callApi(
        '/#Action=RebootDBInstance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTRemoveFromGlobalCluster operation.
     * @callback module:api/DefaultApi~pOSTRemoveFromGlobalClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveFromGlobalClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detaches a Neptune DB cluster from a Neptune global database. A secondary cluster becomes a normal standalone cluster with read-write capability instead of being read-only, and no longer receives data from a the primary cluster.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/RemoveFromGlobalClusterMessage} [removeFromGlobalClusterMessage] 
     * @param {module:api/DefaultApi~pOSTRemoveFromGlobalClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveFromGlobalClusterResult}
     */
    pOSTRemoveFromGlobalCluster(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['removeFromGlobalClusterMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTRemoveFromGlobalCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTRemoveFromGlobalCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = RemoveFromGlobalClusterResult;
      return this.apiClient.callApi(
        '/#Action=RemoveFromGlobalCluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTRemoveRoleFromDBCluster operation.
     * @callback module:api/DefaultApi~pOSTRemoveRoleFromDBClusterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disassociates an Identity and Access Management (IAM) role from a DB cluster.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/RemoveRoleFromDBClusterMessage} [removeRoleFromDBClusterMessage] 
     * @param {module:api/DefaultApi~pOSTRemoveRoleFromDBClusterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pOSTRemoveRoleFromDBCluster(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['removeRoleFromDBClusterMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTRemoveRoleFromDBCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTRemoveRoleFromDBCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=RemoveRoleFromDBCluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTRemoveSourceIdentifierFromSubscription operation.
     * @callback module:api/DefaultApi~pOSTRemoveSourceIdentifierFromSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveSourceIdentifierFromSubscriptionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a source identifier from an existing event notification subscription.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/RemoveSourceIdentifierFromSubscriptionMessage} [removeSourceIdentifierFromSubscriptionMessage] 
     * @param {module:api/DefaultApi~pOSTRemoveSourceIdentifierFromSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveSourceIdentifierFromSubscriptionResult}
     */
    pOSTRemoveSourceIdentifierFromSubscription(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['removeSourceIdentifierFromSubscriptionMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTRemoveSourceIdentifierFromSubscription");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTRemoveSourceIdentifierFromSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = RemoveSourceIdentifierFromSubscriptionResult;
      return this.apiClient.callApi(
        '/#Action=RemoveSourceIdentifierFromSubscription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTRemoveTagsFromResource operation.
     * @callback module:api/DefaultApi~pOSTRemoveTagsFromResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes metadata tags from an Amazon Neptune resource.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/RemoveTagsFromResourceMessage} [removeTagsFromResourceMessage] 
     * @param {module:api/DefaultApi~pOSTRemoveTagsFromResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pOSTRemoveTagsFromResource(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['removeTagsFromResourceMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTRemoveTagsFromResource");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTRemoveTagsFromResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=RemoveTagsFromResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTResetDBClusterParameterGroup operation.
     * @callback module:api/DefaultApi~pOSTResetDBClusterParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBClusterParameterGroupNameMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ResetDBClusterParameterGroupMessage} [resetDBClusterParameterGroupMessage] 
     * @param {module:api/DefaultApi~pOSTResetDBClusterParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBClusterParameterGroupNameMessage}
     */
    pOSTResetDBClusterParameterGroup(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['resetDBClusterParameterGroupMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTResetDBClusterParameterGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTResetDBClusterParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DBClusterParameterGroupNameMessage;
      return this.apiClient.callApi(
        '/#Action=ResetDBClusterParameterGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTResetDBParameterGroup operation.
     * @callback module:api/DefaultApi~pOSTResetDBParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DBParameterGroupNameMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ResetDBParameterGroupMessage} [resetDBParameterGroupMessage] 
     * @param {module:api/DefaultApi~pOSTResetDBParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DBParameterGroupNameMessage}
     */
    pOSTResetDBParameterGroup(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['resetDBParameterGroupMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTResetDBParameterGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTResetDBParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DBParameterGroupNameMessage;
      return this.apiClient.callApi(
        '/#Action=ResetDBParameterGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTRestoreDBClusterFromSnapshot operation.
     * @callback module:api/DefaultApi~pOSTRestoreDBClusterFromSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestoreDBClusterFromSnapshotResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/RestoreDBClusterFromSnapshotMessage} [restoreDBClusterFromSnapshotMessage] 
     * @param {module:api/DefaultApi~pOSTRestoreDBClusterFromSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestoreDBClusterFromSnapshotResult}
     */
    pOSTRestoreDBClusterFromSnapshot(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['restoreDBClusterFromSnapshotMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTRestoreDBClusterFromSnapshot");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTRestoreDBClusterFromSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = RestoreDBClusterFromSnapshotResult;
      return this.apiClient.callApi(
        '/#Action=RestoreDBClusterFromSnapshot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTRestoreDBClusterToPointInTime operation.
     * @callback module:api/DefaultApi~pOSTRestoreDBClusterToPointInTimeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestoreDBClusterToPointInTimeResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/RestoreDBClusterToPointInTimeMessage} [restoreDBClusterToPointInTimeMessage] 
     * @param {module:api/DefaultApi~pOSTRestoreDBClusterToPointInTimeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestoreDBClusterToPointInTimeResult}
     */
    pOSTRestoreDBClusterToPointInTime(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['restoreDBClusterToPointInTimeMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTRestoreDBClusterToPointInTime");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTRestoreDBClusterToPointInTime");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = RestoreDBClusterToPointInTimeResult;
      return this.apiClient.callApi(
        '/#Action=RestoreDBClusterToPointInTime', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTStartDBCluster operation.
     * @callback module:api/DefaultApi~pOSTStartDBClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartDBClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts an Amazon Neptune DB cluster that was stopped using the Amazon console, the Amazon CLI stop-db-cluster command, or the StopDBCluster API.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/StartDBClusterMessage} [startDBClusterMessage] 
     * @param {module:api/DefaultApi~pOSTStartDBClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartDBClusterResult}
     */
    pOSTStartDBCluster(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['startDBClusterMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTStartDBCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTStartDBCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = StartDBClusterResult;
      return this.apiClient.callApi(
        '/#Action=StartDBCluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTStopDBCluster operation.
     * @callback module:api/DefaultApi~pOSTStopDBClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopDBClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Stops an Amazon Neptune DB cluster. When you stop a DB cluster, Neptune retains the DB cluster's metadata, including its endpoints and DB parameter groups.</p> <p>Neptune also retains the transaction logs so you can do a point-in-time restore if necessary.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/StopDBClusterMessage} [stopDBClusterMessage] 
     * @param {module:api/DefaultApi~pOSTStopDBClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopDBClusterResult}
     */
    pOSTStopDBCluster(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['stopDBClusterMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTStopDBCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTStopDBCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = StopDBClusterResult;
      return this.apiClient.callApi(
        '/#Action=StopDBCluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
