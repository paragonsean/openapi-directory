/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonNeptune);
  }
}(this, function(expect, AmazonNeptune) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonNeptune.DBCluster();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DBCluster', function() {
    it('should create an instance of DBCluster', function() {
      // uncomment below and update the code to test DBCluster
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be.a(AmazonNeptune.DBCluster);
    });

    it('should have the property allocatedStorage (base name: "AllocatedStorage")', function() {
      // uncomment below and update the code to test the property allocatedStorage
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property availabilityZones (base name: "AvailabilityZones")', function() {
      // uncomment below and update the code to test the property availabilityZones
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property backupRetentionPeriod (base name: "BackupRetentionPeriod")', function() {
      // uncomment below and update the code to test the property backupRetentionPeriod
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property characterSetName (base name: "CharacterSetName")', function() {
      // uncomment below and update the code to test the property characterSetName
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property databaseName (base name: "DatabaseName")', function() {
      // uncomment below and update the code to test the property databaseName
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property dBClusterIdentifier (base name: "DBClusterIdentifier")', function() {
      // uncomment below and update the code to test the property dBClusterIdentifier
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property dBClusterParameterGroup (base name: "DBClusterParameterGroup")', function() {
      // uncomment below and update the code to test the property dBClusterParameterGroup
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property dBSubnetGroup (base name: "DBSubnetGroup")', function() {
      // uncomment below and update the code to test the property dBSubnetGroup
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "Status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property percentProgress (base name: "PercentProgress")', function() {
      // uncomment below and update the code to test the property percentProgress
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property earliestRestorableTime (base name: "EarliestRestorableTime")', function() {
      // uncomment below and update the code to test the property earliestRestorableTime
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property endpoint (base name: "Endpoint")', function() {
      // uncomment below and update the code to test the property endpoint
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property readerEndpoint (base name: "ReaderEndpoint")', function() {
      // uncomment below and update the code to test the property readerEndpoint
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property multiAZ (base name: "MultiAZ")', function() {
      // uncomment below and update the code to test the property multiAZ
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property engine (base name: "Engine")', function() {
      // uncomment below and update the code to test the property engine
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property engineVersion (base name: "EngineVersion")', function() {
      // uncomment below and update the code to test the property engineVersion
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property latestRestorableTime (base name: "LatestRestorableTime")', function() {
      // uncomment below and update the code to test the property latestRestorableTime
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property port (base name: "Port")', function() {
      // uncomment below and update the code to test the property port
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property masterUsername (base name: "MasterUsername")', function() {
      // uncomment below and update the code to test the property masterUsername
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property dBClusterOptionGroupMemberships (base name: "DBClusterOptionGroupMemberships")', function() {
      // uncomment below and update the code to test the property dBClusterOptionGroupMemberships
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property preferredBackupWindow (base name: "PreferredBackupWindow")', function() {
      // uncomment below and update the code to test the property preferredBackupWindow
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property preferredMaintenanceWindow (base name: "PreferredMaintenanceWindow")', function() {
      // uncomment below and update the code to test the property preferredMaintenanceWindow
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property replicationSourceIdentifier (base name: "ReplicationSourceIdentifier")', function() {
      // uncomment below and update the code to test the property replicationSourceIdentifier
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property readReplicaIdentifiers (base name: "ReadReplicaIdentifiers")', function() {
      // uncomment below and update the code to test the property readReplicaIdentifiers
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property dBClusterMembers (base name: "DBClusterMembers")', function() {
      // uncomment below and update the code to test the property dBClusterMembers
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property vpcSecurityGroups (base name: "VpcSecurityGroups")', function() {
      // uncomment below and update the code to test the property vpcSecurityGroups
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property hostedZoneId (base name: "HostedZoneId")', function() {
      // uncomment below and update the code to test the property hostedZoneId
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property storageEncrypted (base name: "StorageEncrypted")', function() {
      // uncomment below and update the code to test the property storageEncrypted
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property kmsKeyId (base name: "KmsKeyId")', function() {
      // uncomment below and update the code to test the property kmsKeyId
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property dbClusterResourceId (base name: "DbClusterResourceId")', function() {
      // uncomment below and update the code to test the property dbClusterResourceId
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property dBClusterArn (base name: "DBClusterArn")', function() {
      // uncomment below and update the code to test the property dBClusterArn
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property associatedRoles (base name: "AssociatedRoles")', function() {
      // uncomment below and update the code to test the property associatedRoles
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property iAMDatabaseAuthenticationEnabled (base name: "IAMDatabaseAuthenticationEnabled")', function() {
      // uncomment below and update the code to test the property iAMDatabaseAuthenticationEnabled
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property cloneGroupId (base name: "CloneGroupId")', function() {
      // uncomment below and update the code to test the property cloneGroupId
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property clusterCreateTime (base name: "ClusterCreateTime")', function() {
      // uncomment below and update the code to test the property clusterCreateTime
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property copyTagsToSnapshot (base name: "CopyTagsToSnapshot")', function() {
      // uncomment below and update the code to test the property copyTagsToSnapshot
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property enabledCloudwatchLogsExports (base name: "EnabledCloudwatchLogsExports")', function() {
      // uncomment below and update the code to test the property enabledCloudwatchLogsExports
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property pendingModifiedValues (base name: "PendingModifiedValues")', function() {
      // uncomment below and update the code to test the property pendingModifiedValues
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property deletionProtection (base name: "DeletionProtection")', function() {
      // uncomment below and update the code to test the property deletionProtection
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property crossAccountClone (base name: "CrossAccountClone")', function() {
      // uncomment below and update the code to test the property crossAccountClone
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property automaticRestartTime (base name: "AutomaticRestartTime")', function() {
      // uncomment below and update the code to test the property automaticRestartTime
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property serverlessV2ScalingConfiguration (base name: "ServerlessV2ScalingConfiguration")', function() {
      // uncomment below and update the code to test the property serverlessV2ScalingConfiguration
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property globalClusterIdentifier (base name: "GlobalClusterIdentifier")', function() {
      // uncomment below and update the code to test the property globalClusterIdentifier
      //var instance = new AmazonNeptune.DBCluster();
      //expect(instance).to.be();
    });

  });

}));
