/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonNeptune);
  }
}(this, function(expect, AmazonNeptune) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonNeptune.ModifyDBInstanceMessage();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ModifyDBInstanceMessage', function() {
    it('should create an instance of ModifyDBInstanceMessage', function() {
      // uncomment below and update the code to test ModifyDBInstanceMessage
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be.a(AmazonNeptune.ModifyDBInstanceMessage);
    });

    it('should have the property dBInstanceIdentifier (base name: "DBInstanceIdentifier")', function() {
      // uncomment below and update the code to test the property dBInstanceIdentifier
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property allocatedStorage (base name: "AllocatedStorage")', function() {
      // uncomment below and update the code to test the property allocatedStorage
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property dBInstanceClass (base name: "DBInstanceClass")', function() {
      // uncomment below and update the code to test the property dBInstanceClass
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property dBSubnetGroupName (base name: "DBSubnetGroupName")', function() {
      // uncomment below and update the code to test the property dBSubnetGroupName
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property dBSecurityGroups (base name: "DBSecurityGroups")', function() {
      // uncomment below and update the code to test the property dBSecurityGroups
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property vpcSecurityGroupIds (base name: "VpcSecurityGroupIds")', function() {
      // uncomment below and update the code to test the property vpcSecurityGroupIds
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property applyImmediately (base name: "ApplyImmediately")', function() {
      // uncomment below and update the code to test the property applyImmediately
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property masterUserPassword (base name: "MasterUserPassword")', function() {
      // uncomment below and update the code to test the property masterUserPassword
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property dBParameterGroupName (base name: "DBParameterGroupName")', function() {
      // uncomment below and update the code to test the property dBParameterGroupName
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property backupRetentionPeriod (base name: "BackupRetentionPeriod")', function() {
      // uncomment below and update the code to test the property backupRetentionPeriod
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property preferredBackupWindow (base name: "PreferredBackupWindow")', function() {
      // uncomment below and update the code to test the property preferredBackupWindow
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property preferredMaintenanceWindow (base name: "PreferredMaintenanceWindow")', function() {
      // uncomment below and update the code to test the property preferredMaintenanceWindow
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property multiAZ (base name: "MultiAZ")', function() {
      // uncomment below and update the code to test the property multiAZ
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property engineVersion (base name: "EngineVersion")', function() {
      // uncomment below and update the code to test the property engineVersion
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property allowMajorVersionUpgrade (base name: "AllowMajorVersionUpgrade")', function() {
      // uncomment below and update the code to test the property allowMajorVersionUpgrade
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property autoMinorVersionUpgrade (base name: "AutoMinorVersionUpgrade")', function() {
      // uncomment below and update the code to test the property autoMinorVersionUpgrade
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property licenseModel (base name: "LicenseModel")', function() {
      // uncomment below and update the code to test the property licenseModel
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property iops (base name: "Iops")', function() {
      // uncomment below and update the code to test the property iops
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property optionGroupName (base name: "OptionGroupName")', function() {
      // uncomment below and update the code to test the property optionGroupName
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property newDBInstanceIdentifier (base name: "NewDBInstanceIdentifier")', function() {
      // uncomment below and update the code to test the property newDBInstanceIdentifier
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property storageType (base name: "StorageType")', function() {
      // uncomment below and update the code to test the property storageType
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property tdeCredentialArn (base name: "TdeCredentialArn")', function() {
      // uncomment below and update the code to test the property tdeCredentialArn
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property tdeCredentialPassword (base name: "TdeCredentialPassword")', function() {
      // uncomment below and update the code to test the property tdeCredentialPassword
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property cACertificateIdentifier (base name: "CACertificateIdentifier")', function() {
      // uncomment below and update the code to test the property cACertificateIdentifier
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property domain (base name: "Domain")', function() {
      // uncomment below and update the code to test the property domain
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property copyTagsToSnapshot (base name: "CopyTagsToSnapshot")', function() {
      // uncomment below and update the code to test the property copyTagsToSnapshot
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property monitoringInterval (base name: "MonitoringInterval")', function() {
      // uncomment below and update the code to test the property monitoringInterval
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property dBPortNumber (base name: "DBPortNumber")', function() {
      // uncomment below and update the code to test the property dBPortNumber
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property publiclyAccessible (base name: "PubliclyAccessible")', function() {
      // uncomment below and update the code to test the property publiclyAccessible
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property monitoringRoleArn (base name: "MonitoringRoleArn")', function() {
      // uncomment below and update the code to test the property monitoringRoleArn
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property domainIAMRoleName (base name: "DomainIAMRoleName")', function() {
      // uncomment below and update the code to test the property domainIAMRoleName
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property promotionTier (base name: "PromotionTier")', function() {
      // uncomment below and update the code to test the property promotionTier
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property enableIAMDatabaseAuthentication (base name: "EnableIAMDatabaseAuthentication")', function() {
      // uncomment below and update the code to test the property enableIAMDatabaseAuthentication
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property enablePerformanceInsights (base name: "EnablePerformanceInsights")', function() {
      // uncomment below and update the code to test the property enablePerformanceInsights
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property performanceInsightsKMSKeyId (base name: "PerformanceInsightsKMSKeyId")', function() {
      // uncomment below and update the code to test the property performanceInsightsKMSKeyId
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property cloudwatchLogsExportConfiguration (base name: "CloudwatchLogsExportConfiguration")', function() {
      // uncomment below and update the code to test the property cloudwatchLogsExportConfiguration
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

    it('should have the property deletionProtection (base name: "DeletionProtection")', function() {
      // uncomment below and update the code to test the property deletionProtection
      //var instance = new AmazonNeptune.ModifyDBInstanceMessage();
      //expect(instance).to.be();
    });

  });

}));
