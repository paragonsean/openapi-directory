/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonNeptune);
  }
}(this, function(expect, AmazonNeptune) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonNeptune.DBClusterSnapshot();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DBClusterSnapshot', function() {
    it('should create an instance of DBClusterSnapshot', function() {
      // uncomment below and update the code to test DBClusterSnapshot
      //var instance = new AmazonNeptune.DBClusterSnapshot();
      //expect(instance).to.be.a(AmazonNeptune.DBClusterSnapshot);
    });

    it('should have the property availabilityZones (base name: "AvailabilityZones")', function() {
      // uncomment below and update the code to test the property availabilityZones
      //var instance = new AmazonNeptune.DBClusterSnapshot();
      //expect(instance).to.be();
    });

    it('should have the property dBClusterSnapshotIdentifier (base name: "DBClusterSnapshotIdentifier")', function() {
      // uncomment below and update the code to test the property dBClusterSnapshotIdentifier
      //var instance = new AmazonNeptune.DBClusterSnapshot();
      //expect(instance).to.be();
    });

    it('should have the property dBClusterIdentifier (base name: "DBClusterIdentifier")', function() {
      // uncomment below and update the code to test the property dBClusterIdentifier
      //var instance = new AmazonNeptune.DBClusterSnapshot();
      //expect(instance).to.be();
    });

    it('should have the property snapshotCreateTime (base name: "SnapshotCreateTime")', function() {
      // uncomment below and update the code to test the property snapshotCreateTime
      //var instance = new AmazonNeptune.DBClusterSnapshot();
      //expect(instance).to.be();
    });

    it('should have the property engine (base name: "Engine")', function() {
      // uncomment below and update the code to test the property engine
      //var instance = new AmazonNeptune.DBClusterSnapshot();
      //expect(instance).to.be();
    });

    it('should have the property allocatedStorage (base name: "AllocatedStorage")', function() {
      // uncomment below and update the code to test the property allocatedStorage
      //var instance = new AmazonNeptune.DBClusterSnapshot();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "Status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new AmazonNeptune.DBClusterSnapshot();
      //expect(instance).to.be();
    });

    it('should have the property port (base name: "Port")', function() {
      // uncomment below and update the code to test the property port
      //var instance = new AmazonNeptune.DBClusterSnapshot();
      //expect(instance).to.be();
    });

    it('should have the property vpcId (base name: "VpcId")', function() {
      // uncomment below and update the code to test the property vpcId
      //var instance = new AmazonNeptune.DBClusterSnapshot();
      //expect(instance).to.be();
    });

    it('should have the property clusterCreateTime (base name: "ClusterCreateTime")', function() {
      // uncomment below and update the code to test the property clusterCreateTime
      //var instance = new AmazonNeptune.DBClusterSnapshot();
      //expect(instance).to.be();
    });

    it('should have the property masterUsername (base name: "MasterUsername")', function() {
      // uncomment below and update the code to test the property masterUsername
      //var instance = new AmazonNeptune.DBClusterSnapshot();
      //expect(instance).to.be();
    });

    it('should have the property engineVersion (base name: "EngineVersion")', function() {
      // uncomment below and update the code to test the property engineVersion
      //var instance = new AmazonNeptune.DBClusterSnapshot();
      //expect(instance).to.be();
    });

    it('should have the property licenseModel (base name: "LicenseModel")', function() {
      // uncomment below and update the code to test the property licenseModel
      //var instance = new AmazonNeptune.DBClusterSnapshot();
      //expect(instance).to.be();
    });

    it('should have the property snapshotType (base name: "SnapshotType")', function() {
      // uncomment below and update the code to test the property snapshotType
      //var instance = new AmazonNeptune.DBClusterSnapshot();
      //expect(instance).to.be();
    });

    it('should have the property percentProgress (base name: "PercentProgress")', function() {
      // uncomment below and update the code to test the property percentProgress
      //var instance = new AmazonNeptune.DBClusterSnapshot();
      //expect(instance).to.be();
    });

    it('should have the property storageEncrypted (base name: "StorageEncrypted")', function() {
      // uncomment below and update the code to test the property storageEncrypted
      //var instance = new AmazonNeptune.DBClusterSnapshot();
      //expect(instance).to.be();
    });

    it('should have the property kmsKeyId (base name: "KmsKeyId")', function() {
      // uncomment below and update the code to test the property kmsKeyId
      //var instance = new AmazonNeptune.DBClusterSnapshot();
      //expect(instance).to.be();
    });

    it('should have the property dBClusterSnapshotArn (base name: "DBClusterSnapshotArn")', function() {
      // uncomment below and update the code to test the property dBClusterSnapshotArn
      //var instance = new AmazonNeptune.DBClusterSnapshot();
      //expect(instance).to.be();
    });

    it('should have the property sourceDBClusterSnapshotArn (base name: "SourceDBClusterSnapshotArn")', function() {
      // uncomment below and update the code to test the property sourceDBClusterSnapshotArn
      //var instance = new AmazonNeptune.DBClusterSnapshot();
      //expect(instance).to.be();
    });

    it('should have the property iAMDatabaseAuthenticationEnabled (base name: "IAMDatabaseAuthenticationEnabled")', function() {
      // uncomment below and update the code to test the property iAMDatabaseAuthenticationEnabled
      //var instance = new AmazonNeptune.DBClusterSnapshot();
      //expect(instance).to.be();
    });

  });

}));
