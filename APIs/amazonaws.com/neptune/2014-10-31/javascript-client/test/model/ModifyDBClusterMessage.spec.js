/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonNeptune);
  }
}(this, function(expect, AmazonNeptune) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonNeptune.ModifyDBClusterMessage();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ModifyDBClusterMessage', function() {
    it('should create an instance of ModifyDBClusterMessage', function() {
      // uncomment below and update the code to test ModifyDBClusterMessage
      //var instance = new AmazonNeptune.ModifyDBClusterMessage();
      //expect(instance).to.be.a(AmazonNeptune.ModifyDBClusterMessage);
    });

    it('should have the property dBClusterIdentifier (base name: "DBClusterIdentifier")', function() {
      // uncomment below and update the code to test the property dBClusterIdentifier
      //var instance = new AmazonNeptune.ModifyDBClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property newDBClusterIdentifier (base name: "NewDBClusterIdentifier")', function() {
      // uncomment below and update the code to test the property newDBClusterIdentifier
      //var instance = new AmazonNeptune.ModifyDBClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property applyImmediately (base name: "ApplyImmediately")', function() {
      // uncomment below and update the code to test the property applyImmediately
      //var instance = new AmazonNeptune.ModifyDBClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property backupRetentionPeriod (base name: "BackupRetentionPeriod")', function() {
      // uncomment below and update the code to test the property backupRetentionPeriod
      //var instance = new AmazonNeptune.ModifyDBClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property dBClusterParameterGroupName (base name: "DBClusterParameterGroupName")', function() {
      // uncomment below and update the code to test the property dBClusterParameterGroupName
      //var instance = new AmazonNeptune.ModifyDBClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property vpcSecurityGroupIds (base name: "VpcSecurityGroupIds")', function() {
      // uncomment below and update the code to test the property vpcSecurityGroupIds
      //var instance = new AmazonNeptune.ModifyDBClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property port (base name: "Port")', function() {
      // uncomment below and update the code to test the property port
      //var instance = new AmazonNeptune.ModifyDBClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property masterUserPassword (base name: "MasterUserPassword")', function() {
      // uncomment below and update the code to test the property masterUserPassword
      //var instance = new AmazonNeptune.ModifyDBClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property optionGroupName (base name: "OptionGroupName")', function() {
      // uncomment below and update the code to test the property optionGroupName
      //var instance = new AmazonNeptune.ModifyDBClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property preferredBackupWindow (base name: "PreferredBackupWindow")', function() {
      // uncomment below and update the code to test the property preferredBackupWindow
      //var instance = new AmazonNeptune.ModifyDBClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property preferredMaintenanceWindow (base name: "PreferredMaintenanceWindow")', function() {
      // uncomment below and update the code to test the property preferredMaintenanceWindow
      //var instance = new AmazonNeptune.ModifyDBClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property enableIAMDatabaseAuthentication (base name: "EnableIAMDatabaseAuthentication")', function() {
      // uncomment below and update the code to test the property enableIAMDatabaseAuthentication
      //var instance = new AmazonNeptune.ModifyDBClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property cloudwatchLogsExportConfiguration (base name: "CloudwatchLogsExportConfiguration")', function() {
      // uncomment below and update the code to test the property cloudwatchLogsExportConfiguration
      //var instance = new AmazonNeptune.ModifyDBClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property engineVersion (base name: "EngineVersion")', function() {
      // uncomment below and update the code to test the property engineVersion
      //var instance = new AmazonNeptune.ModifyDBClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property allowMajorVersionUpgrade (base name: "AllowMajorVersionUpgrade")', function() {
      // uncomment below and update the code to test the property allowMajorVersionUpgrade
      //var instance = new AmazonNeptune.ModifyDBClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property dBInstanceParameterGroupName (base name: "DBInstanceParameterGroupName")', function() {
      // uncomment below and update the code to test the property dBInstanceParameterGroupName
      //var instance = new AmazonNeptune.ModifyDBClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property deletionProtection (base name: "DeletionProtection")', function() {
      // uncomment below and update the code to test the property deletionProtection
      //var instance = new AmazonNeptune.ModifyDBClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property copyTagsToSnapshot (base name: "CopyTagsToSnapshot")', function() {
      // uncomment below and update the code to test the property copyTagsToSnapshot
      //var instance = new AmazonNeptune.ModifyDBClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property serverlessV2ScalingConfiguration (base name: "ServerlessV2ScalingConfiguration")', function() {
      // uncomment below and update the code to test the property serverlessV2ScalingConfiguration
      //var instance = new AmazonNeptune.ModifyDBClusterMessage();
      //expect(instance).to.be();
    });

  });

}));
