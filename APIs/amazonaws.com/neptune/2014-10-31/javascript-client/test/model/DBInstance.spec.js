/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonNeptune);
  }
}(this, function(expect, AmazonNeptune) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonNeptune.DBInstance();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DBInstance', function() {
    it('should create an instance of DBInstance', function() {
      // uncomment below and update the code to test DBInstance
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be.a(AmazonNeptune.DBInstance);
    });

    it('should have the property dBInstanceIdentifier (base name: "DBInstanceIdentifier")', function() {
      // uncomment below and update the code to test the property dBInstanceIdentifier
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property dBInstanceClass (base name: "DBInstanceClass")', function() {
      // uncomment below and update the code to test the property dBInstanceClass
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property engine (base name: "Engine")', function() {
      // uncomment below and update the code to test the property engine
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property dBInstanceStatus (base name: "DBInstanceStatus")', function() {
      // uncomment below and update the code to test the property dBInstanceStatus
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property masterUsername (base name: "MasterUsername")', function() {
      // uncomment below and update the code to test the property masterUsername
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property dBName (base name: "DBName")', function() {
      // uncomment below and update the code to test the property dBName
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property endpoint (base name: "Endpoint")', function() {
      // uncomment below and update the code to test the property endpoint
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property allocatedStorage (base name: "AllocatedStorage")', function() {
      // uncomment below and update the code to test the property allocatedStorage
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property instanceCreateTime (base name: "InstanceCreateTime")', function() {
      // uncomment below and update the code to test the property instanceCreateTime
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property preferredBackupWindow (base name: "PreferredBackupWindow")', function() {
      // uncomment below and update the code to test the property preferredBackupWindow
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property backupRetentionPeriod (base name: "BackupRetentionPeriod")', function() {
      // uncomment below and update the code to test the property backupRetentionPeriod
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property dBSecurityGroups (base name: "DBSecurityGroups")', function() {
      // uncomment below and update the code to test the property dBSecurityGroups
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property vpcSecurityGroups (base name: "VpcSecurityGroups")', function() {
      // uncomment below and update the code to test the property vpcSecurityGroups
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property dBParameterGroups (base name: "DBParameterGroups")', function() {
      // uncomment below and update the code to test the property dBParameterGroups
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property availabilityZone (base name: "AvailabilityZone")', function() {
      // uncomment below and update the code to test the property availabilityZone
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property dBSubnetGroup (base name: "DBSubnetGroup")', function() {
      // uncomment below and update the code to test the property dBSubnetGroup
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property preferredMaintenanceWindow (base name: "PreferredMaintenanceWindow")', function() {
      // uncomment below and update the code to test the property preferredMaintenanceWindow
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property pendingModifiedValues (base name: "PendingModifiedValues")', function() {
      // uncomment below and update the code to test the property pendingModifiedValues
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property latestRestorableTime (base name: "LatestRestorableTime")', function() {
      // uncomment below and update the code to test the property latestRestorableTime
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property multiAZ (base name: "MultiAZ")', function() {
      // uncomment below and update the code to test the property multiAZ
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property engineVersion (base name: "EngineVersion")', function() {
      // uncomment below and update the code to test the property engineVersion
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property autoMinorVersionUpgrade (base name: "AutoMinorVersionUpgrade")', function() {
      // uncomment below and update the code to test the property autoMinorVersionUpgrade
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property readReplicaSourceDBInstanceIdentifier (base name: "ReadReplicaSourceDBInstanceIdentifier")', function() {
      // uncomment below and update the code to test the property readReplicaSourceDBInstanceIdentifier
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property readReplicaDBInstanceIdentifiers (base name: "ReadReplicaDBInstanceIdentifiers")', function() {
      // uncomment below and update the code to test the property readReplicaDBInstanceIdentifiers
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property readReplicaDBClusterIdentifiers (base name: "ReadReplicaDBClusterIdentifiers")', function() {
      // uncomment below and update the code to test the property readReplicaDBClusterIdentifiers
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property licenseModel (base name: "LicenseModel")', function() {
      // uncomment below and update the code to test the property licenseModel
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property iops (base name: "Iops")', function() {
      // uncomment below and update the code to test the property iops
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property optionGroupMemberships (base name: "OptionGroupMemberships")', function() {
      // uncomment below and update the code to test the property optionGroupMemberships
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property characterSetName (base name: "CharacterSetName")', function() {
      // uncomment below and update the code to test the property characterSetName
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property secondaryAvailabilityZone (base name: "SecondaryAvailabilityZone")', function() {
      // uncomment below and update the code to test the property secondaryAvailabilityZone
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property publiclyAccessible (base name: "PubliclyAccessible")', function() {
      // uncomment below and update the code to test the property publiclyAccessible
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property statusInfos (base name: "StatusInfos")', function() {
      // uncomment below and update the code to test the property statusInfos
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property storageType (base name: "StorageType")', function() {
      // uncomment below and update the code to test the property storageType
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property tdeCredentialArn (base name: "TdeCredentialArn")', function() {
      // uncomment below and update the code to test the property tdeCredentialArn
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property dbInstancePort (base name: "DbInstancePort")', function() {
      // uncomment below and update the code to test the property dbInstancePort
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property dBClusterIdentifier (base name: "DBClusterIdentifier")', function() {
      // uncomment below and update the code to test the property dBClusterIdentifier
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property storageEncrypted (base name: "StorageEncrypted")', function() {
      // uncomment below and update the code to test the property storageEncrypted
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property kmsKeyId (base name: "KmsKeyId")', function() {
      // uncomment below and update the code to test the property kmsKeyId
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property dbiResourceId (base name: "DbiResourceId")', function() {
      // uncomment below and update the code to test the property dbiResourceId
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property cACertificateIdentifier (base name: "CACertificateIdentifier")', function() {
      // uncomment below and update the code to test the property cACertificateIdentifier
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property domainMemberships (base name: "DomainMemberships")', function() {
      // uncomment below and update the code to test the property domainMemberships
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property copyTagsToSnapshot (base name: "CopyTagsToSnapshot")', function() {
      // uncomment below and update the code to test the property copyTagsToSnapshot
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property monitoringInterval (base name: "MonitoringInterval")', function() {
      // uncomment below and update the code to test the property monitoringInterval
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property enhancedMonitoringResourceArn (base name: "EnhancedMonitoringResourceArn")', function() {
      // uncomment below and update the code to test the property enhancedMonitoringResourceArn
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property monitoringRoleArn (base name: "MonitoringRoleArn")', function() {
      // uncomment below and update the code to test the property monitoringRoleArn
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property promotionTier (base name: "PromotionTier")', function() {
      // uncomment below and update the code to test the property promotionTier
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property dBInstanceArn (base name: "DBInstanceArn")', function() {
      // uncomment below and update the code to test the property dBInstanceArn
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property timezone (base name: "Timezone")', function() {
      // uncomment below and update the code to test the property timezone
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property iAMDatabaseAuthenticationEnabled (base name: "IAMDatabaseAuthenticationEnabled")', function() {
      // uncomment below and update the code to test the property iAMDatabaseAuthenticationEnabled
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property performanceInsightsEnabled (base name: "PerformanceInsightsEnabled")', function() {
      // uncomment below and update the code to test the property performanceInsightsEnabled
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property performanceInsightsKMSKeyId (base name: "PerformanceInsightsKMSKeyId")', function() {
      // uncomment below and update the code to test the property performanceInsightsKMSKeyId
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property enabledCloudwatchLogsExports (base name: "EnabledCloudwatchLogsExports")', function() {
      // uncomment below and update the code to test the property enabledCloudwatchLogsExports
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

    it('should have the property deletionProtection (base name: "DeletionProtection")', function() {
      // uncomment below and update the code to test the property deletionProtection
      //var instance = new AmazonNeptune.DBInstance();
      //expect(instance).to.be();
    });

  });

}));
