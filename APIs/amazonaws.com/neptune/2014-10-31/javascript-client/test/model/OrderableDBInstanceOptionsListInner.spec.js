/**
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonNeptune);
  }
}(this, function(expect, AmazonNeptune) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonNeptune.OrderableDBInstanceOptionsListInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OrderableDBInstanceOptionsListInner', function() {
    it('should create an instance of OrderableDBInstanceOptionsListInner', function() {
      // uncomment below and update the code to test OrderableDBInstanceOptionsListInner
      //var instance = new AmazonNeptune.OrderableDBInstanceOptionsListInner();
      //expect(instance).to.be.a(AmazonNeptune.OrderableDBInstanceOptionsListInner);
    });

    it('should have the property engine (base name: "Engine")', function() {
      // uncomment below and update the code to test the property engine
      //var instance = new AmazonNeptune.OrderableDBInstanceOptionsListInner();
      //expect(instance).to.be();
    });

    it('should have the property engineVersion (base name: "EngineVersion")', function() {
      // uncomment below and update the code to test the property engineVersion
      //var instance = new AmazonNeptune.OrderableDBInstanceOptionsListInner();
      //expect(instance).to.be();
    });

    it('should have the property dBInstanceClass (base name: "DBInstanceClass")', function() {
      // uncomment below and update the code to test the property dBInstanceClass
      //var instance = new AmazonNeptune.OrderableDBInstanceOptionsListInner();
      //expect(instance).to.be();
    });

    it('should have the property licenseModel (base name: "LicenseModel")', function() {
      // uncomment below and update the code to test the property licenseModel
      //var instance = new AmazonNeptune.OrderableDBInstanceOptionsListInner();
      //expect(instance).to.be();
    });

    it('should have the property availabilityZones (base name: "AvailabilityZones")', function() {
      // uncomment below and update the code to test the property availabilityZones
      //var instance = new AmazonNeptune.OrderableDBInstanceOptionsListInner();
      //expect(instance).to.be();
    });

    it('should have the property multiAZCapable (base name: "MultiAZCapable")', function() {
      // uncomment below and update the code to test the property multiAZCapable
      //var instance = new AmazonNeptune.OrderableDBInstanceOptionsListInner();
      //expect(instance).to.be();
    });

    it('should have the property readReplicaCapable (base name: "ReadReplicaCapable")', function() {
      // uncomment below and update the code to test the property readReplicaCapable
      //var instance = new AmazonNeptune.OrderableDBInstanceOptionsListInner();
      //expect(instance).to.be();
    });

    it('should have the property vpc (base name: "Vpc")', function() {
      // uncomment below and update the code to test the property vpc
      //var instance = new AmazonNeptune.OrderableDBInstanceOptionsListInner();
      //expect(instance).to.be();
    });

    it('should have the property supportsStorageEncryption (base name: "SupportsStorageEncryption")', function() {
      // uncomment below and update the code to test the property supportsStorageEncryption
      //var instance = new AmazonNeptune.OrderableDBInstanceOptionsListInner();
      //expect(instance).to.be();
    });

    it('should have the property storageType (base name: "StorageType")', function() {
      // uncomment below and update the code to test the property storageType
      //var instance = new AmazonNeptune.OrderableDBInstanceOptionsListInner();
      //expect(instance).to.be();
    });

    it('should have the property supportsIops (base name: "SupportsIops")', function() {
      // uncomment below and update the code to test the property supportsIops
      //var instance = new AmazonNeptune.OrderableDBInstanceOptionsListInner();
      //expect(instance).to.be();
    });

    it('should have the property supportsEnhancedMonitoring (base name: "SupportsEnhancedMonitoring")', function() {
      // uncomment below and update the code to test the property supportsEnhancedMonitoring
      //var instance = new AmazonNeptune.OrderableDBInstanceOptionsListInner();
      //expect(instance).to.be();
    });

    it('should have the property supportsIAMDatabaseAuthentication (base name: "SupportsIAMDatabaseAuthentication")', function() {
      // uncomment below and update the code to test the property supportsIAMDatabaseAuthentication
      //var instance = new AmazonNeptune.OrderableDBInstanceOptionsListInner();
      //expect(instance).to.be();
    });

    it('should have the property supportsPerformanceInsights (base name: "SupportsPerformanceInsights")', function() {
      // uncomment below and update the code to test the property supportsPerformanceInsights
      //var instance = new AmazonNeptune.OrderableDBInstanceOptionsListInner();
      //expect(instance).to.be();
    });

    it('should have the property minStorageSize (base name: "MinStorageSize")', function() {
      // uncomment below and update the code to test the property minStorageSize
      //var instance = new AmazonNeptune.OrderableDBInstanceOptionsListInner();
      //expect(instance).to.be();
    });

    it('should have the property maxStorageSize (base name: "MaxStorageSize")', function() {
      // uncomment below and update the code to test the property maxStorageSize
      //var instance = new AmazonNeptune.OrderableDBInstanceOptionsListInner();
      //expect(instance).to.be();
    });

    it('should have the property minIopsPerDbInstance (base name: "MinIopsPerDbInstance")', function() {
      // uncomment below and update the code to test the property minIopsPerDbInstance
      //var instance = new AmazonNeptune.OrderableDBInstanceOptionsListInner();
      //expect(instance).to.be();
    });

    it('should have the property maxIopsPerDbInstance (base name: "MaxIopsPerDbInstance")', function() {
      // uncomment below and update the code to test the property maxIopsPerDbInstance
      //var instance = new AmazonNeptune.OrderableDBInstanceOptionsListInner();
      //expect(instance).to.be();
    });

    it('should have the property minIopsPerGib (base name: "MinIopsPerGib")', function() {
      // uncomment below and update the code to test the property minIopsPerGib
      //var instance = new AmazonNeptune.OrderableDBInstanceOptionsListInner();
      //expect(instance).to.be();
    });

    it('should have the property maxIopsPerGib (base name: "MaxIopsPerGib")', function() {
      // uncomment below and update the code to test the property maxIopsPerGib
      //var instance = new AmazonNeptune.OrderableDBInstanceOptionsListInner();
      //expect(instance).to.be();
    });

    it('should have the property supportsGlobalDatabases (base name: "SupportsGlobalDatabases")', function() {
      // uncomment below and update the code to test the property supportsGlobalDatabases
      //var instance = new AmazonNeptune.OrderableDBInstanceOptionsListInner();
      //expect(instance).to.be();
    });

  });

}));
