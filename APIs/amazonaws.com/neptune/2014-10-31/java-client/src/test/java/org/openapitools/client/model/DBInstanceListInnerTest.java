/*
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DBInstanceDBSubnetGroup;
import org.openapitools.client.model.DBInstanceEndpoint;
import org.openapitools.client.model.DBInstancePendingModifiedValues;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for DBInstanceListInner
 */
public class DBInstanceListInnerTest {
    private final DBInstanceListInner model = new DBInstanceListInner();

    /**
     * Model tests for DBInstanceListInner
     */
    @Test
    public void testDBInstanceListInner() {
        // TODO: test DBInstanceListInner
    }

    /**
     * Test the property 'dbInstanceIdentifier'
     */
    @Test
    public void dbInstanceIdentifierTest() {
        // TODO: test dbInstanceIdentifier
    }

    /**
     * Test the property 'dbInstanceClass'
     */
    @Test
    public void dbInstanceClassTest() {
        // TODO: test dbInstanceClass
    }

    /**
     * Test the property 'engine'
     */
    @Test
    public void engineTest() {
        // TODO: test engine
    }

    /**
     * Test the property 'dbInstanceStatus'
     */
    @Test
    public void dbInstanceStatusTest() {
        // TODO: test dbInstanceStatus
    }

    /**
     * Test the property 'masterUsername'
     */
    @Test
    public void masterUsernameTest() {
        // TODO: test masterUsername
    }

    /**
     * Test the property 'dbName'
     */
    @Test
    public void dbNameTest() {
        // TODO: test dbName
    }

    /**
     * Test the property 'endpoint'
     */
    @Test
    public void endpointTest() {
        // TODO: test endpoint
    }

    /**
     * Test the property 'allocatedStorage'
     */
    @Test
    public void allocatedStorageTest() {
        // TODO: test allocatedStorage
    }

    /**
     * Test the property 'instanceCreateTime'
     */
    @Test
    public void instanceCreateTimeTest() {
        // TODO: test instanceCreateTime
    }

    /**
     * Test the property 'preferredBackupWindow'
     */
    @Test
    public void preferredBackupWindowTest() {
        // TODO: test preferredBackupWindow
    }

    /**
     * Test the property 'backupRetentionPeriod'
     */
    @Test
    public void backupRetentionPeriodTest() {
        // TODO: test backupRetentionPeriod
    }

    /**
     * Test the property 'dbSecurityGroups'
     */
    @Test
    public void dbSecurityGroupsTest() {
        // TODO: test dbSecurityGroups
    }

    /**
     * Test the property 'vpcSecurityGroups'
     */
    @Test
    public void vpcSecurityGroupsTest() {
        // TODO: test vpcSecurityGroups
    }

    /**
     * Test the property 'dbParameterGroups'
     */
    @Test
    public void dbParameterGroupsTest() {
        // TODO: test dbParameterGroups
    }

    /**
     * Test the property 'availabilityZone'
     */
    @Test
    public void availabilityZoneTest() {
        // TODO: test availabilityZone
    }

    /**
     * Test the property 'dbSubnetGroup'
     */
    @Test
    public void dbSubnetGroupTest() {
        // TODO: test dbSubnetGroup
    }

    /**
     * Test the property 'preferredMaintenanceWindow'
     */
    @Test
    public void preferredMaintenanceWindowTest() {
        // TODO: test preferredMaintenanceWindow
    }

    /**
     * Test the property 'pendingModifiedValues'
     */
    @Test
    public void pendingModifiedValuesTest() {
        // TODO: test pendingModifiedValues
    }

    /**
     * Test the property 'latestRestorableTime'
     */
    @Test
    public void latestRestorableTimeTest() {
        // TODO: test latestRestorableTime
    }

    /**
     * Test the property 'multiAZ'
     */
    @Test
    public void multiAZTest() {
        // TODO: test multiAZ
    }

    /**
     * Test the property 'engineVersion'
     */
    @Test
    public void engineVersionTest() {
        // TODO: test engineVersion
    }

    /**
     * Test the property 'autoMinorVersionUpgrade'
     */
    @Test
    public void autoMinorVersionUpgradeTest() {
        // TODO: test autoMinorVersionUpgrade
    }

    /**
     * Test the property 'readReplicaSourceDBInstanceIdentifier'
     */
    @Test
    public void readReplicaSourceDBInstanceIdentifierTest() {
        // TODO: test readReplicaSourceDBInstanceIdentifier
    }

    /**
     * Test the property 'readReplicaDBInstanceIdentifiers'
     */
    @Test
    public void readReplicaDBInstanceIdentifiersTest() {
        // TODO: test readReplicaDBInstanceIdentifiers
    }

    /**
     * Test the property 'readReplicaDBClusterIdentifiers'
     */
    @Test
    public void readReplicaDBClusterIdentifiersTest() {
        // TODO: test readReplicaDBClusterIdentifiers
    }

    /**
     * Test the property 'licenseModel'
     */
    @Test
    public void licenseModelTest() {
        // TODO: test licenseModel
    }

    /**
     * Test the property 'iops'
     */
    @Test
    public void iopsTest() {
        // TODO: test iops
    }

    /**
     * Test the property 'optionGroupMemberships'
     */
    @Test
    public void optionGroupMembershipsTest() {
        // TODO: test optionGroupMemberships
    }

    /**
     * Test the property 'characterSetName'
     */
    @Test
    public void characterSetNameTest() {
        // TODO: test characterSetName
    }

    /**
     * Test the property 'secondaryAvailabilityZone'
     */
    @Test
    public void secondaryAvailabilityZoneTest() {
        // TODO: test secondaryAvailabilityZone
    }

    /**
     * Test the property 'publiclyAccessible'
     */
    @Test
    public void publiclyAccessibleTest() {
        // TODO: test publiclyAccessible
    }

    /**
     * Test the property 'statusInfos'
     */
    @Test
    public void statusInfosTest() {
        // TODO: test statusInfos
    }

    /**
     * Test the property 'storageType'
     */
    @Test
    public void storageTypeTest() {
        // TODO: test storageType
    }

    /**
     * Test the property 'tdeCredentialArn'
     */
    @Test
    public void tdeCredentialArnTest() {
        // TODO: test tdeCredentialArn
    }

    /**
     * Test the property 'dbInstancePort'
     */
    @Test
    public void dbInstancePortTest() {
        // TODO: test dbInstancePort
    }

    /**
     * Test the property 'dbClusterIdentifier'
     */
    @Test
    public void dbClusterIdentifierTest() {
        // TODO: test dbClusterIdentifier
    }

    /**
     * Test the property 'storageEncrypted'
     */
    @Test
    public void storageEncryptedTest() {
        // TODO: test storageEncrypted
    }

    /**
     * Test the property 'kmsKeyId'
     */
    @Test
    public void kmsKeyIdTest() {
        // TODO: test kmsKeyId
    }

    /**
     * Test the property 'dbiResourceId'
     */
    @Test
    public void dbiResourceIdTest() {
        // TODO: test dbiResourceId
    }

    /**
     * Test the property 'caCertificateIdentifier'
     */
    @Test
    public void caCertificateIdentifierTest() {
        // TODO: test caCertificateIdentifier
    }

    /**
     * Test the property 'domainMemberships'
     */
    @Test
    public void domainMembershipsTest() {
        // TODO: test domainMemberships
    }

    /**
     * Test the property 'copyTagsToSnapshot'
     */
    @Test
    public void copyTagsToSnapshotTest() {
        // TODO: test copyTagsToSnapshot
    }

    /**
     * Test the property 'monitoringInterval'
     */
    @Test
    public void monitoringIntervalTest() {
        // TODO: test monitoringInterval
    }

    /**
     * Test the property 'enhancedMonitoringResourceArn'
     */
    @Test
    public void enhancedMonitoringResourceArnTest() {
        // TODO: test enhancedMonitoringResourceArn
    }

    /**
     * Test the property 'monitoringRoleArn'
     */
    @Test
    public void monitoringRoleArnTest() {
        // TODO: test monitoringRoleArn
    }

    /**
     * Test the property 'promotionTier'
     */
    @Test
    public void promotionTierTest() {
        // TODO: test promotionTier
    }

    /**
     * Test the property 'dbInstanceArn'
     */
    @Test
    public void dbInstanceArnTest() {
        // TODO: test dbInstanceArn
    }

    /**
     * Test the property 'timezone'
     */
    @Test
    public void timezoneTest() {
        // TODO: test timezone
    }

    /**
     * Test the property 'iaMDatabaseAuthenticationEnabled'
     */
    @Test
    public void iaMDatabaseAuthenticationEnabledTest() {
        // TODO: test iaMDatabaseAuthenticationEnabled
    }

    /**
     * Test the property 'performanceInsightsEnabled'
     */
    @Test
    public void performanceInsightsEnabledTest() {
        // TODO: test performanceInsightsEnabled
    }

    /**
     * Test the property 'performanceInsightsKMSKeyId'
     */
    @Test
    public void performanceInsightsKMSKeyIdTest() {
        // TODO: test performanceInsightsKMSKeyId
    }

    /**
     * Test the property 'enabledCloudwatchLogsExports'
     */
    @Test
    public void enabledCloudwatchLogsExportsTest() {
        // TODO: test enabledCloudwatchLogsExports
    }

    /**
     * Test the property 'deletionProtection'
     */
    @Test
    public void deletionProtectionTest() {
        // TODO: test deletionProtection
    }

}
