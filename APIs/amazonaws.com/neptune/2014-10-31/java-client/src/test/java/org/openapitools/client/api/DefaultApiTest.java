/*
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddRoleToDBClusterMessage;
import org.openapitools.client.model.AddSourceIdentifierToSubscriptionMessage;
import org.openapitools.client.model.AddSourceIdentifierToSubscriptionResult;
import org.openapitools.client.model.AddTagsToResourceMessage;
import org.openapitools.client.model.ApplyPendingMaintenanceActionMessage;
import org.openapitools.client.model.ApplyPendingMaintenanceActionResult;
import org.openapitools.client.model.CopyDBClusterParameterGroupMessage;
import org.openapitools.client.model.CopyDBClusterParameterGroupResult;
import org.openapitools.client.model.CopyDBClusterSnapshotMessage;
import org.openapitools.client.model.CopyDBClusterSnapshotResult;
import org.openapitools.client.model.CopyDBParameterGroupMessage;
import org.openapitools.client.model.CopyDBParameterGroupResult;
import org.openapitools.client.model.CreateDBClusterEndpointMessage;
import org.openapitools.client.model.CreateDBClusterEndpointOutput;
import org.openapitools.client.model.CreateDBClusterMessage;
import org.openapitools.client.model.CreateDBClusterParameterGroupMessage;
import org.openapitools.client.model.CreateDBClusterParameterGroupResult;
import org.openapitools.client.model.CreateDBClusterResult;
import org.openapitools.client.model.CreateDBClusterSnapshotMessage;
import org.openapitools.client.model.CreateDBClusterSnapshotResult;
import org.openapitools.client.model.CreateDBInstanceMessage;
import org.openapitools.client.model.CreateDBInstanceResult;
import org.openapitools.client.model.CreateDBParameterGroupMessage;
import org.openapitools.client.model.CreateDBParameterGroupResult;
import org.openapitools.client.model.CreateDBSubnetGroupMessage;
import org.openapitools.client.model.CreateDBSubnetGroupResult;
import org.openapitools.client.model.CreateEventSubscriptionMessage;
import org.openapitools.client.model.CreateEventSubscriptionResult;
import org.openapitools.client.model.CreateGlobalClusterMessage;
import org.openapitools.client.model.CreateGlobalClusterResult;
import org.openapitools.client.model.DBClusterEndpointMessage;
import org.openapitools.client.model.DBClusterMessage;
import org.openapitools.client.model.DBClusterParameterGroupDetails;
import org.openapitools.client.model.DBClusterParameterGroupNameMessage;
import org.openapitools.client.model.DBClusterParameterGroupsMessage;
import org.openapitools.client.model.DBClusterSnapshotMessage;
import org.openapitools.client.model.DBEngineVersionMessage;
import org.openapitools.client.model.DBInstanceMessage;
import org.openapitools.client.model.DBParameterGroupDetails;
import org.openapitools.client.model.DBParameterGroupNameMessage;
import org.openapitools.client.model.DBParameterGroupsMessage;
import org.openapitools.client.model.DBSubnetGroupMessage;
import org.openapitools.client.model.DeleteDBClusterEndpointMessage;
import org.openapitools.client.model.DeleteDBClusterEndpointOutput;
import org.openapitools.client.model.DeleteDBClusterMessage;
import org.openapitools.client.model.DeleteDBClusterParameterGroupMessage;
import org.openapitools.client.model.DeleteDBClusterResult;
import org.openapitools.client.model.DeleteDBClusterSnapshotMessage;
import org.openapitools.client.model.DeleteDBClusterSnapshotResult;
import org.openapitools.client.model.DeleteDBInstanceMessage;
import org.openapitools.client.model.DeleteDBInstanceResult;
import org.openapitools.client.model.DeleteDBParameterGroupMessage;
import org.openapitools.client.model.DeleteDBSubnetGroupMessage;
import org.openapitools.client.model.DeleteEventSubscriptionMessage;
import org.openapitools.client.model.DeleteEventSubscriptionResult;
import org.openapitools.client.model.DeleteGlobalClusterMessage;
import org.openapitools.client.model.DeleteGlobalClusterResult;
import org.openapitools.client.model.DescribeDBClusterEndpointsMessage;
import org.openapitools.client.model.DescribeDBClusterParameterGroupsMessage;
import org.openapitools.client.model.DescribeDBClusterParametersMessage;
import org.openapitools.client.model.DescribeDBClusterSnapshotAttributesMessage;
import org.openapitools.client.model.DescribeDBClusterSnapshotAttributesResult;
import org.openapitools.client.model.DescribeDBClusterSnapshotsMessage;
import org.openapitools.client.model.DescribeDBClustersMessage;
import org.openapitools.client.model.DescribeDBEngineVersionsMessage;
import org.openapitools.client.model.DescribeDBInstancesMessage;
import org.openapitools.client.model.DescribeDBParameterGroupsMessage;
import org.openapitools.client.model.DescribeDBParametersMessage;
import org.openapitools.client.model.DescribeDBSubnetGroupsMessage;
import org.openapitools.client.model.DescribeEngineDefaultClusterParametersMessage;
import org.openapitools.client.model.DescribeEngineDefaultClusterParametersResult;
import org.openapitools.client.model.DescribeEngineDefaultParametersMessage;
import org.openapitools.client.model.DescribeEngineDefaultParametersResult;
import org.openapitools.client.model.DescribeEventCategoriesMessage;
import org.openapitools.client.model.DescribeEventSubscriptionsMessage;
import org.openapitools.client.model.DescribeEventsMessage;
import org.openapitools.client.model.DescribeGlobalClustersMessage;
import org.openapitools.client.model.DescribeOrderableDBInstanceOptionsMessage;
import org.openapitools.client.model.DescribePendingMaintenanceActionsMessage;
import org.openapitools.client.model.DescribeValidDBInstanceModificationsMessage;
import org.openapitools.client.model.DescribeValidDBInstanceModificationsResult;
import org.openapitools.client.model.EventCategoriesMessage;
import org.openapitools.client.model.EventSubscriptionsMessage;
import org.openapitools.client.model.EventsMessage;
import org.openapitools.client.model.FailoverDBClusterMessage;
import org.openapitools.client.model.FailoverDBClusterResult;
import org.openapitools.client.model.FailoverGlobalClusterMessage;
import org.openapitools.client.model.FailoverGlobalClusterResult;
import org.openapitools.client.model.GETAddTagsToResourceTagsParameterInner;
import org.openapitools.client.model.GETCreateDBClusterServerlessV2ScalingConfigurationParameter;
import org.openapitools.client.model.GETDescribeDBClusterEndpointsFiltersParameterInner;
import org.openapitools.client.model.GETModifyDBClusterCloudwatchLogsExportConfigurationParameter;
import org.openapitools.client.model.GETModifyDBClusterParameterGroupParametersParameterInner;
import org.openapitools.client.model.GlobalClustersMessage;
import org.openapitools.client.model.ListTagsForResourceMessage;
import org.openapitools.client.model.ModifyDBClusterEndpointMessage;
import org.openapitools.client.model.ModifyDBClusterEndpointOutput;
import org.openapitools.client.model.ModifyDBClusterMessage;
import org.openapitools.client.model.ModifyDBClusterParameterGroupMessage;
import org.openapitools.client.model.ModifyDBClusterResult;
import org.openapitools.client.model.ModifyDBClusterSnapshotAttributeMessage;
import org.openapitools.client.model.ModifyDBClusterSnapshotAttributeResult;
import org.openapitools.client.model.ModifyDBInstanceMessage;
import org.openapitools.client.model.ModifyDBInstanceResult;
import org.openapitools.client.model.ModifyDBParameterGroupMessage;
import org.openapitools.client.model.ModifyDBSubnetGroupMessage;
import org.openapitools.client.model.ModifyDBSubnetGroupResult;
import org.openapitools.client.model.ModifyEventSubscriptionMessage;
import org.openapitools.client.model.ModifyEventSubscriptionResult;
import org.openapitools.client.model.ModifyGlobalClusterMessage;
import org.openapitools.client.model.ModifyGlobalClusterResult;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OrderableDBInstanceOptionsMessage;
import org.openapitools.client.model.PendingMaintenanceActionsMessage;
import org.openapitools.client.model.PromoteReadReplicaDBClusterMessage;
import org.openapitools.client.model.PromoteReadReplicaDBClusterResult;
import org.openapitools.client.model.RebootDBInstanceMessage;
import org.openapitools.client.model.RebootDBInstanceResult;
import org.openapitools.client.model.RemoveFromGlobalClusterMessage;
import org.openapitools.client.model.RemoveFromGlobalClusterResult;
import org.openapitools.client.model.RemoveRoleFromDBClusterMessage;
import org.openapitools.client.model.RemoveSourceIdentifierFromSubscriptionMessage;
import org.openapitools.client.model.RemoveSourceIdentifierFromSubscriptionResult;
import org.openapitools.client.model.RemoveTagsFromResourceMessage;
import org.openapitools.client.model.ResetDBClusterParameterGroupMessage;
import org.openapitools.client.model.ResetDBParameterGroupMessage;
import org.openapitools.client.model.RestoreDBClusterFromSnapshotMessage;
import org.openapitools.client.model.RestoreDBClusterFromSnapshotResult;
import org.openapitools.client.model.RestoreDBClusterToPointInTimeMessage;
import org.openapitools.client.model.RestoreDBClusterToPointInTimeResult;
import org.openapitools.client.model.StartDBClusterMessage;
import org.openapitools.client.model.StartDBClusterResult;
import org.openapitools.client.model.StopDBClusterMessage;
import org.openapitools.client.model.StopDBClusterResult;
import org.openapitools.client.model.TagListMessage;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Associates an Identity and Access Management (IAM) role with an Neptune DB cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETAddRoleToDBClusterTest() throws ApiException {
        String dbClusterIdentifier = null;
        String roleArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String featureName = null;
        api.gETAddRoleToDBCluster(dbClusterIdentifier, roleArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, featureName);
        // TODO: test validations
    }

    /**
     * Adds a source identifier to an existing event notification subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETAddSourceIdentifierToSubscriptionTest() throws ApiException {
        String subscriptionName = null;
        String sourceIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddSourceIdentifierToSubscriptionResult response = api.gETAddSourceIdentifierToSubscription(subscriptionName, sourceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETAddTagsToResourceTest() throws ApiException {
        String resourceName = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETAddTagsToResource(resourceName, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Applies a pending maintenance action to a resource (for example, to a DB instance).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETApplyPendingMaintenanceActionTest() throws ApiException {
        String resourceIdentifier = null;
        String applyAction = null;
        String optInType = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ApplyPendingMaintenanceActionResult response = api.gETApplyPendingMaintenanceAction(resourceIdentifier, applyAction, optInType, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Copies the specified DB cluster parameter group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCopyDBClusterParameterGroupTest() throws ApiException {
        String sourceDBClusterParameterGroupIdentifier = null;
        String targetDBClusterParameterGroupIdentifier = null;
        String targetDBClusterParameterGroupDescription = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        CopyDBClusterParameterGroupResult response = api.gETCopyDBClusterParameterGroup(sourceDBClusterParameterGroupIdentifier, targetDBClusterParameterGroupIdentifier, targetDBClusterParameterGroupDescription, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Copies a snapshot of a DB cluster.&lt;/p&gt; &lt;p&gt;To copy a DB cluster snapshot from a shared manual DB cluster snapshot, &lt;code&gt;SourceDBClusterSnapshotIdentifier&lt;/code&gt; must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCopyDBClusterSnapshotTest() throws ApiException {
        String sourceDBClusterSnapshotIdentifier = null;
        String targetDBClusterSnapshotIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String kmsKeyId = null;
        String preSignedUrl = null;
        Boolean copyTags = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        CopyDBClusterSnapshotResult response = api.gETCopyDBClusterSnapshot(sourceDBClusterSnapshotIdentifier, targetDBClusterSnapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, kmsKeyId, preSignedUrl, copyTags, tags);
        // TODO: test validations
    }

    /**
     * Copies the specified DB parameter group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCopyDBParameterGroupTest() throws ApiException {
        String sourceDBParameterGroupIdentifier = null;
        String targetDBParameterGroupIdentifier = null;
        String targetDBParameterGroupDescription = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        CopyDBParameterGroupResult response = api.gETCopyDBParameterGroup(sourceDBParameterGroupIdentifier, targetDBParameterGroupIdentifier, targetDBParameterGroupDescription, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new Amazon Neptune DB cluster.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;ReplicationSourceIdentifier&lt;/code&gt; parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.&lt;/p&gt; &lt;p&gt;Note that when you create a new cluster using &lt;code&gt;CreateDBCluster&lt;/code&gt; directly, deletion protection is disabled by default (when you create a new production cluster in the console, deletion protection is enabled by default). You can only delete a DB cluster if its &lt;code&gt;DeletionProtection&lt;/code&gt; field is set to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateDBClusterTest() throws ApiException {
        String dbClusterIdentifier = null;
        String engine = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> availabilityZones = null;
        Integer backupRetentionPeriod = null;
        String characterSetName = null;
        Boolean copyTagsToSnapshot = null;
        String databaseName = null;
        String dbClusterParameterGroupName = null;
        List<String> vpcSecurityGroupIds = null;
        String dbSubnetGroupName = null;
        String engineVersion = null;
        Integer port = null;
        String masterUsername = null;
        String masterUserPassword = null;
        String optionGroupName = null;
        String preferredBackupWindow = null;
        String preferredMaintenanceWindow = null;
        String replicationSourceIdentifier = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        Boolean storageEncrypted = null;
        String kmsKeyId = null;
        String preSignedUrl = null;
        Boolean enableIAMDatabaseAuthentication = null;
        List<String> enableCloudwatchLogsExports = null;
        Boolean deletionProtection = null;
        GETCreateDBClusterServerlessV2ScalingConfigurationParameter serverlessV2ScalingConfiguration = null;
        String globalClusterIdentifier = null;
        CreateDBClusterResult response = api.gETCreateDBCluster(dbClusterIdentifier, engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, availabilityZones, backupRetentionPeriod, characterSetName, copyTagsToSnapshot, databaseName, dbClusterParameterGroupName, vpcSecurityGroupIds, dbSubnetGroupName, engineVersion, port, masterUsername, masterUserPassword, optionGroupName, preferredBackupWindow, preferredMaintenanceWindow, replicationSourceIdentifier, tags, storageEncrypted, kmsKeyId, preSignedUrl, enableIAMDatabaseAuthentication, enableCloudwatchLogsExports, deletionProtection, serverlessV2ScalingConfiguration, globalClusterIdentifier);
        // TODO: test validations
    }

    /**
     * Creates a new custom endpoint and associates it with an Amazon Neptune DB cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateDBClusterEndpointTest() throws ApiException {
        String dbClusterIdentifier = null;
        String dbClusterEndpointIdentifier = null;
        String endpointType = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> staticMembers = null;
        List<String> excludedMembers = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        CreateDBClusterEndpointOutput response = api.gETCreateDBClusterEndpoint(dbClusterIdentifier, dbClusterEndpointIdentifier, endpointType, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, staticMembers, excludedMembers, tags);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new DB cluster parameter group.&lt;/p&gt; &lt;p&gt;Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.&lt;/p&gt; &lt;p&gt; A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using &lt;a&gt;ModifyDBClusterParameterGroup&lt;/a&gt;. Once you&#39;ve created a DB cluster parameter group, you need to associate it with your DB cluster using &lt;a&gt;ModifyDBCluster&lt;/a&gt;. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.&lt;/p&gt; &lt;important&gt; &lt;p&gt;After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/rds/\&quot;&gt;Amazon Neptune console&lt;/a&gt; or the &lt;a&gt;DescribeDBClusterParameters&lt;/a&gt; command to verify that your DB cluster parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateDBClusterParameterGroupTest() throws ApiException {
        String dbClusterParameterGroupName = null;
        String dbParameterGroupFamily = null;
        String description = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        CreateDBClusterParameterGroupResult response = api.gETCreateDBClusterParameterGroup(dbClusterParameterGroupName, dbParameterGroupFamily, description, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        // TODO: test validations
    }

    /**
     * Creates a snapshot of a DB cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateDBClusterSnapshotTest() throws ApiException {
        String dbClusterSnapshotIdentifier = null;
        String dbClusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        CreateDBClusterSnapshotResult response = api.gETCreateDBClusterSnapshot(dbClusterSnapshotIdentifier, dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        // TODO: test validations
    }

    /**
     * Creates a new DB instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateDBInstanceTest() throws ApiException {
        String dbInstanceIdentifier = null;
        String dbInstanceClass = null;
        String engine = null;
        String dbClusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String dbName = null;
        Integer allocatedStorage = null;
        String masterUsername = null;
        String masterUserPassword = null;
        List<String> dbSecurityGroups = null;
        List<String> vpcSecurityGroupIds = null;
        String availabilityZone = null;
        String dbSubnetGroupName = null;
        String preferredMaintenanceWindow = null;
        String dbParameterGroupName = null;
        Integer backupRetentionPeriod = null;
        String preferredBackupWindow = null;
        Integer port = null;
        Boolean multiAZ = null;
        String engineVersion = null;
        Boolean autoMinorVersionUpgrade = null;
        String licenseModel = null;
        Integer iops = null;
        String optionGroupName = null;
        String characterSetName = null;
        Boolean publiclyAccessible = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        String storageType = null;
        String tdeCredentialArn = null;
        String tdeCredentialPassword = null;
        Boolean storageEncrypted = null;
        String kmsKeyId = null;
        String domain = null;
        Boolean copyTagsToSnapshot = null;
        Integer monitoringInterval = null;
        String monitoringRoleArn = null;
        String domainIAMRoleName = null;
        Integer promotionTier = null;
        String timezone = null;
        Boolean enableIAMDatabaseAuthentication = null;
        Boolean enablePerformanceInsights = null;
        String performanceInsightsKMSKeyId = null;
        List<String> enableCloudwatchLogsExports = null;
        Boolean deletionProtection = null;
        CreateDBInstanceResult response = api.gETCreateDBInstance(dbInstanceIdentifier, dbInstanceClass, engine, dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbName, allocatedStorage, masterUsername, masterUserPassword, dbSecurityGroups, vpcSecurityGroupIds, availabilityZone, dbSubnetGroupName, preferredMaintenanceWindow, dbParameterGroupName, backupRetentionPeriod, preferredBackupWindow, port, multiAZ, engineVersion, autoMinorVersionUpgrade, licenseModel, iops, optionGroupName, characterSetName, publiclyAccessible, tags, storageType, tdeCredentialArn, tdeCredentialPassword, storageEncrypted, kmsKeyId, domain, copyTagsToSnapshot, monitoringInterval, monitoringRoleArn, domainIAMRoleName, promotionTier, timezone, enableIAMDatabaseAuthentication, enablePerformanceInsights, performanceInsightsKMSKeyId, enableCloudwatchLogsExports, deletionProtection);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new DB parameter group.&lt;/p&gt; &lt;p&gt;A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using &lt;i&gt;ModifyDBParameterGroup&lt;/i&gt;. Once you&#39;ve created a DB parameter group, you need to associate it with your DB instance using &lt;i&gt;ModifyDBInstance&lt;/i&gt;. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.&lt;/p&gt; &lt;important&gt; &lt;p&gt;After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the Amazon Neptune console or the &lt;i&gt;DescribeDBParameters&lt;/i&gt; command to verify that your DB parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateDBParameterGroupTest() throws ApiException {
        String dbParameterGroupName = null;
        String dbParameterGroupFamily = null;
        String description = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        CreateDBParameterGroupResult response = api.gETCreateDBParameterGroup(dbParameterGroupName, dbParameterGroupFamily, description, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        // TODO: test validations
    }

    /**
     * Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the Amazon Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateDBSubnetGroupTest() throws ApiException {
        String dbSubnetGroupName = null;
        String dbSubnetGroupDescription = null;
        List<String> subnetIds = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        CreateDBSubnetGroupResult response = api.gETCreateDBSubnetGroup(dbSubnetGroupName, dbSubnetGroupDescription, subnetIds, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.&lt;/p&gt; &lt;p&gt;You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType &#x3D; db-instance, SourceIds &#x3D; mydbinstance1, mydbinstance2 and EventCategories &#x3D; Availability, Backup.&lt;/p&gt; &lt;p&gt;If you specify both the SourceType and SourceIds, such as SourceType &#x3D; db-instance and SourceIdentifier &#x3D; myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateEventSubscriptionTest() throws ApiException {
        String subscriptionName = null;
        String snsTopicArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String sourceType = null;
        List<String> eventCategories = null;
        List<String> sourceIds = null;
        Boolean enabled = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        CreateEventSubscriptionResult response = api.gETCreateEventSubscription(subscriptionName, snsTopicArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceType, eventCategories, sourceIds, enabled, tags);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a Neptune global database spread across multiple Amazon Regions. The global database contains a single primary cluster with read-write capability, and read-only secondary clusters that receive data from the primary cluster through high-speed replication performed by the Neptune storage subsystem.&lt;/p&gt; &lt;p&gt;You can create a global database that is initially empty, and then add a primary cluster and secondary clusters to it, or you can specify an existing Neptune cluster during the create operation to become the primary cluster of the global database.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateGlobalClusterTest() throws ApiException {
        String globalClusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String sourceDBClusterIdentifier = null;
        String engine = null;
        String engineVersion = null;
        Boolean deletionProtection = null;
        Boolean storageEncrypted = null;
        CreateGlobalClusterResult response = api.gETCreateGlobalCluster(globalClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceDBClusterIdentifier, engine, engineVersion, deletionProtection, storageEncrypted);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can&#39;t be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.&lt;/p&gt; &lt;p&gt;Note that the DB Cluster cannot be deleted if deletion protection is enabled. To delete it, you must first set its &lt;code&gt;DeletionProtection&lt;/code&gt; field to &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteDBClusterTest() throws ApiException {
        String dbClusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean skipFinalSnapshot = null;
        String finalDBSnapshotIdentifier = null;
        DeleteDBClusterResult response = api.gETDeleteDBCluster(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, skipFinalSnapshot, finalDBSnapshotIdentifier);
        // TODO: test validations
    }

    /**
     * Deletes a custom endpoint and removes it from an Amazon Neptune DB cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteDBClusterEndpointTest() throws ApiException {
        String dbClusterEndpointIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteDBClusterEndpointOutput response = api.gETDeleteDBClusterEndpoint(dbClusterEndpointIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can&#39;t be associated with any DB clusters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteDBClusterParameterGroupTest() throws ApiException {
        String dbClusterParameterGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETDeleteDBClusterParameterGroup(dbClusterParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The DB cluster snapshot must be in the &lt;code&gt;available&lt;/code&gt; state to be deleted.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteDBClusterSnapshotTest() throws ApiException {
        String dbClusterSnapshotIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteDBClusterSnapshotResult response = api.gETDeleteDBClusterSnapshot(dbClusterSnapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can&#39;t be recovered. Manual DB snapshots of the DB instance to be deleted by &lt;code&gt;DeleteDBInstance&lt;/code&gt; are not deleted.&lt;/p&gt; &lt;p&gt; If you request a final DB snapshot the status of the Amazon Neptune DB instance is &lt;code&gt;deleting&lt;/code&gt; until the DB snapshot is created. The API action &lt;code&gt;DescribeDBInstance&lt;/code&gt; is used to monitor the status of this operation. The action can&#39;t be canceled or reverted once submitted.&lt;/p&gt; &lt;p&gt;Note that when a DB instance is in a failure state and has a status of &lt;code&gt;failed&lt;/code&gt;, &lt;code&gt;incompatible-restore&lt;/code&gt;, or &lt;code&gt;incompatible-network&lt;/code&gt;, you can only delete it when the &lt;code&gt;SkipFinalSnapshot&lt;/code&gt; parameter is set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can&#39;t delete a DB instance if it is the only instance in the DB cluster, or if it has deletion protection enabled.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteDBInstanceTest() throws ApiException {
        String dbInstanceIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean skipFinalSnapshot = null;
        String finalDBSnapshotIdentifier = null;
        DeleteDBInstanceResult response = api.gETDeleteDBInstance(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, skipFinalSnapshot, finalDBSnapshotIdentifier);
        // TODO: test validations
    }

    /**
     * Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can&#39;t be associated with any DB instances.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteDBParameterGroupTest() throws ApiException {
        String dbParameterGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETDeleteDBParameterGroup(dbParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a DB subnet group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The specified database subnet group must not be associated with any DB instances.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteDBSubnetGroupTest() throws ApiException {
        String dbSubnetGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETDeleteDBSubnetGroup(dbSubnetGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an event notification subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteEventSubscriptionTest() throws ApiException {
        String subscriptionName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteEventSubscriptionResult response = api.gETDeleteEventSubscription(subscriptionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a global database. The primary and all secondary clusters must already be detached or deleted first.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteGlobalClusterTest() throws ApiException {
        String globalClusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteGlobalClusterResult response = api.gETDeleteGlobalCluster(globalClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about endpoints for an Amazon Neptune DB cluster.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation can also return information for Amazon RDS clusters and Amazon DocDB clusters.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeDBClusterEndpointsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String dbClusterIdentifier = null;
        String dbClusterEndpointIdentifier = null;
        List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters = null;
        Integer maxRecords = null;
        String marker = null;
        DBClusterEndpointMessage response = api.gETDescribeDBClusterEndpoints(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, dbClusterEndpointIdentifier, filters, maxRecords, marker);
        // TODO: test validations
    }

    /**
     *  Returns a list of &lt;code&gt;DBClusterParameterGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeDBClusterParameterGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String dbClusterParameterGroupName = null;
        List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters = null;
        Integer maxRecords = null;
        String marker = null;
        DBClusterParameterGroupsMessage response = api.gETDescribeDBClusterParameterGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterParameterGroupName, filters, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns the detailed parameter list for a particular DB cluster parameter group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeDBClusterParametersTest() throws ApiException {
        String dbClusterParameterGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String source = null;
        List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters = null;
        Integer maxRecords = null;
        String marker = null;
        DBClusterParameterGroupDetails response = api.gETDescribeDBClusterParameters(dbClusterParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, source, filters, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.&lt;/p&gt; &lt;p&gt;When sharing snapshots with other Amazon accounts, &lt;code&gt;DescribeDBClusterSnapshotAttributes&lt;/code&gt; returns the &lt;code&gt;restore&lt;/code&gt; attribute and a list of IDs for the Amazon accounts that are authorized to copy or restore the manual DB cluster snapshot. If &lt;code&gt;all&lt;/code&gt; is included in the list of values for the &lt;code&gt;restore&lt;/code&gt; attribute, then the manual DB cluster snapshot is public and can be copied or restored by all Amazon accounts.&lt;/p&gt; &lt;p&gt;To add or remove access for an Amazon account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the &lt;a&gt;ModifyDBClusterSnapshotAttribute&lt;/a&gt; API action.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeDBClusterSnapshotAttributesTest() throws ApiException {
        String dbClusterSnapshotIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeDBClusterSnapshotAttributesResult response = api.gETDescribeDBClusterSnapshotAttributes(dbClusterSnapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about DB cluster snapshots. This API action supports pagination.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeDBClusterSnapshotsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String dbClusterIdentifier = null;
        String dbClusterSnapshotIdentifier = null;
        String snapshotType = null;
        List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters = null;
        Integer maxRecords = null;
        String marker = null;
        Boolean includeShared = null;
        Boolean includePublic = null;
        DBClusterSnapshotMessage response = api.gETDescribeDBClusterSnapshots(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, dbClusterSnapshotIdentifier, snapshotType, filters, maxRecords, marker, includeShared, includePublic);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about provisioned DB clusters, and supports pagination.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation can also return information for Amazon RDS clusters and Amazon DocDB clusters.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeDBClustersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String dbClusterIdentifier = null;
        List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters = null;
        Integer maxRecords = null;
        String marker = null;
        DBClusterMessage response = api.gETDescribeDBClusters(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, filters, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns a list of the available DB engines.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeDBEngineVersionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String engine = null;
        String engineVersion = null;
        String dbParameterGroupFamily = null;
        List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters = null;
        Integer maxRecords = null;
        String marker = null;
        Boolean defaultOnly = null;
        Boolean listSupportedCharacterSets = null;
        Boolean listSupportedTimezones = null;
        DBEngineVersionMessage response = api.gETDescribeDBEngineVersions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engine, engineVersion, dbParameterGroupFamily, filters, maxRecords, marker, defaultOnly, listSupportedCharacterSets, listSupportedTimezones);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about provisioned instances, and supports pagination.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation can also return information for Amazon RDS instances and Amazon DocDB instances.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeDBInstancesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String dbInstanceIdentifier = null;
        List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters = null;
        Integer maxRecords = null;
        String marker = null;
        DBInstanceMessage response = api.gETDescribeDBInstances(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbInstanceIdentifier, filters, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns a list of &lt;code&gt;DBParameterGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBParameterGroupName&lt;/code&gt; is specified, the list will contain only the description of the specified DB parameter group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeDBParameterGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String dbParameterGroupName = null;
        List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters = null;
        Integer maxRecords = null;
        String marker = null;
        DBParameterGroupsMessage response = api.gETDescribeDBParameterGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbParameterGroupName, filters, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns the detailed parameter list for a particular DB parameter group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeDBParametersTest() throws ApiException {
        String dbParameterGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String source = null;
        List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters = null;
        Integer maxRecords = null;
        String marker = null;
        DBParameterGroupDetails response = api.gETDescribeDBParameters(dbParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, source, filters, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.&lt;/p&gt; &lt;p&gt;For an overview of CIDR ranges, go to the &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\&quot;&gt;Wikipedia Tutorial&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeDBSubnetGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String dbSubnetGroupName = null;
        List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters = null;
        Integer maxRecords = null;
        String marker = null;
        DBSubnetGroupMessage response = api.gETDescribeDBSubnetGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbSubnetGroupName, filters, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns the default engine and system parameter information for the cluster database engine.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeEngineDefaultClusterParametersTest() throws ApiException {
        String dbParameterGroupFamily = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters = null;
        Integer maxRecords = null;
        String marker = null;
        DescribeEngineDefaultClusterParametersResult response = api.gETDescribeEngineDefaultClusterParameters(dbParameterGroupFamily, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns the default engine and system parameter information for the specified database engine.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeEngineDefaultParametersTest() throws ApiException {
        String dbParameterGroupFamily = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters = null;
        Integer maxRecords = null;
        String marker = null;
        DescribeEngineDefaultParametersResult response = api.gETDescribeEngineDefaultParameters(dbParameterGroupFamily, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Displays a list of categories for all event source types, or, if specified, for a specified source type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeEventCategoriesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String sourceType = null;
        List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters = null;
        EventCategoriesMessage response = api.gETDescribeEventCategories(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceType, filters);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.&lt;/p&gt; &lt;p&gt;If you specify a SubscriptionName, lists the description for that subscription.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeEventSubscriptionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String subscriptionName = null;
        List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters = null;
        Integer maxRecords = null;
        String marker = null;
        EventSubscriptionsMessage response = api.gETDescribeEventSubscriptions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subscriptionName, filters, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeEventsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String sourceIdentifier = null;
        String sourceType = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Integer duration = null;
        List<String> eventCategories = null;
        List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters = null;
        Integer maxRecords = null;
        String marker = null;
        EventsMessage response = api.gETDescribeEvents(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceIdentifier, sourceType, startTime, endTime, duration, eventCategories, filters, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns information about Neptune global database clusters. This API supports pagination.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeGlobalClustersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String globalClusterIdentifier = null;
        Integer maxRecords = null;
        String marker = null;
        GlobalClustersMessage response = api.gETDescribeGlobalClusters(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, globalClusterIdentifier, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns a list of orderable DB instance options for the specified engine.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeOrderableDBInstanceOptionsTest() throws ApiException {
        String engine = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String engineVersion = null;
        String dbInstanceClass = null;
        String licenseModel = null;
        Boolean vpc = null;
        List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters = null;
        Integer maxRecords = null;
        String marker = null;
        OrderableDBInstanceOptionsMessage response = api.gETDescribeOrderableDBInstanceOptions(engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engineVersion, dbInstanceClass, licenseModel, vpc, filters, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribePendingMaintenanceActionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String resourceIdentifier = null;
        List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters = null;
        String marker = null;
        Integer maxRecords = null;
        PendingMaintenanceActionsMessage response = api.gETDescribePendingMaintenanceActions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resourceIdentifier, filters, marker, maxRecords);
        // TODO: test validations
    }

    /**
     * You can call &lt;a&gt;DescribeValidDBInstanceModifications&lt;/a&gt; to learn what modifications you can make to your DB instance. You can use this information when you call &lt;a&gt;ModifyDBInstance&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeValidDBInstanceModificationsTest() throws ApiException {
        String dbInstanceIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeValidDBInstanceModificationsResult response = api.gETDescribeValidDBInstanceModifications(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Forces a failover for a DB cluster.&lt;/p&gt; &lt;p&gt;A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).&lt;/p&gt; &lt;p&gt;Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETFailoverDBClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String dbClusterIdentifier = null;
        String targetDBInstanceIdentifier = null;
        FailoverDBClusterResult response = api.gETFailoverDBCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, targetDBInstanceIdentifier);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Initiates the failover process for a Neptune global database.&lt;/p&gt; &lt;p&gt;A failover for a Neptune global database promotes one of secondary read-only DB clusters to be the primary DB cluster and demotes the primary DB cluster to being a secondary (read-only) DB cluster. In other words, the role of the current primary DB cluster and the selected target secondary DB cluster are switched. The selected secondary DB cluster assumes full read/write capabilities for the Neptune global database.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action applies &lt;b&gt;only&lt;/b&gt; to Neptune global databases. This action is only intended for use on healthy Neptune global databases with healthy Neptune DB clusters and no region-wide outages, to test disaster recovery scenarios or to reconfigure the global database topology.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETFailoverGlobalClusterTest() throws ApiException {
        String globalClusterIdentifier = null;
        String targetDbClusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        FailoverGlobalClusterResult response = api.gETFailoverGlobalCluster(globalClusterIdentifier, targetDbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists all tags on an Amazon Neptune resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETListTagsForResourceTest() throws ApiException {
        String resourceName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters = null;
        TagListMessage response = api.gETListTagsForResource(resourceName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters);
        // TODO: test validations
    }

    /**
     * Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyDBClusterTest() throws ApiException {
        String dbClusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String newDBClusterIdentifier = null;
        Boolean applyImmediately = null;
        Integer backupRetentionPeriod = null;
        String dbClusterParameterGroupName = null;
        List<String> vpcSecurityGroupIds = null;
        Integer port = null;
        String masterUserPassword = null;
        String optionGroupName = null;
        String preferredBackupWindow = null;
        String preferredMaintenanceWindow = null;
        Boolean enableIAMDatabaseAuthentication = null;
        GETModifyDBClusterCloudwatchLogsExportConfigurationParameter cloudwatchLogsExportConfiguration = null;
        String engineVersion = null;
        Boolean allowMajorVersionUpgrade = null;
        String dbInstanceParameterGroupName = null;
        Boolean deletionProtection = null;
        Boolean copyTagsToSnapshot = null;
        GETCreateDBClusterServerlessV2ScalingConfigurationParameter serverlessV2ScalingConfiguration = null;
        ModifyDBClusterResult response = api.gETModifyDBCluster(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, newDBClusterIdentifier, applyImmediately, backupRetentionPeriod, dbClusterParameterGroupName, vpcSecurityGroupIds, port, masterUserPassword, optionGroupName, preferredBackupWindow, preferredMaintenanceWindow, enableIAMDatabaseAuthentication, cloudwatchLogsExportConfiguration, engineVersion, allowMajorVersionUpgrade, dbInstanceParameterGroupName, deletionProtection, copyTagsToSnapshot, serverlessV2ScalingConfiguration);
        // TODO: test validations
    }

    /**
     * Modifies the properties of an endpoint in an Amazon Neptune DB cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyDBClusterEndpointTest() throws ApiException {
        String dbClusterEndpointIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String endpointType = null;
        List<String> staticMembers = null;
        List<String> excludedMembers = null;
        ModifyDBClusterEndpointOutput response = api.gETModifyDBClusterEndpoint(dbClusterEndpointIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, endpointType, staticMembers, excludedMembers);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt;, &lt;code&gt;ParameterValue&lt;/code&gt;, and &lt;code&gt;ApplyMethod&lt;/code&gt;. A maximum of 20 parameters can be modified in a single request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the Amazon Neptune console or the &lt;a&gt;DescribeDBClusterParameters&lt;/a&gt; command to verify that your DB cluster parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyDBClusterParameterGroupTest() throws ApiException {
        String dbClusterParameterGroupName = null;
        List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DBClusterParameterGroupNameMessage response = api.gETModifyDBClusterParameterGroup(dbClusterParameterGroupName, parameters, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.&lt;/p&gt; &lt;p&gt;To share a manual DB cluster snapshot with other Amazon accounts, specify &lt;code&gt;restore&lt;/code&gt; as the &lt;code&gt;AttributeName&lt;/code&gt; and use the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter to add a list of IDs of the Amazon accounts that are authorized to restore the manual DB cluster snapshot. Use the value &lt;code&gt;all&lt;/code&gt; to make the manual DB cluster snapshot public, which means that it can be copied or restored by all Amazon accounts. Do not add the &lt;code&gt;all&lt;/code&gt; value for any manual DB cluster snapshots that contain private information that you don&#39;t want available to all Amazon accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized Amazon account IDs for the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter. You can&#39;t use &lt;code&gt;all&lt;/code&gt; as a value for that parameter in this case.&lt;/p&gt; &lt;p&gt;To view which Amazon accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the &lt;a&gt;DescribeDBClusterSnapshotAttributes&lt;/a&gt; API action.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyDBClusterSnapshotAttributeTest() throws ApiException {
        String dbClusterSnapshotIdentifier = null;
        String attributeName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> valuesToAdd = null;
        List<String> valuesToRemove = null;
        ModifyDBClusterSnapshotAttributeResult response = api.gETModifyDBClusterSnapshotAttribute(dbClusterSnapshotIdentifier, attributeName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, valuesToAdd, valuesToRemove);
        // TODO: test validations
    }

    /**
     * Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call &lt;a&gt;DescribeValidDBInstanceModifications&lt;/a&gt; before you call &lt;a&gt;ModifyDBInstance&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyDBInstanceTest() throws ApiException {
        String dbInstanceIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer allocatedStorage = null;
        String dbInstanceClass = null;
        String dbSubnetGroupName = null;
        List<String> dbSecurityGroups = null;
        List<String> vpcSecurityGroupIds = null;
        Boolean applyImmediately = null;
        String masterUserPassword = null;
        String dbParameterGroupName = null;
        Integer backupRetentionPeriod = null;
        String preferredBackupWindow = null;
        String preferredMaintenanceWindow = null;
        Boolean multiAZ = null;
        String engineVersion = null;
        Boolean allowMajorVersionUpgrade = null;
        Boolean autoMinorVersionUpgrade = null;
        String licenseModel = null;
        Integer iops = null;
        String optionGroupName = null;
        String newDBInstanceIdentifier = null;
        String storageType = null;
        String tdeCredentialArn = null;
        String tdeCredentialPassword = null;
        String caCertificateIdentifier = null;
        String domain = null;
        Boolean copyTagsToSnapshot = null;
        Integer monitoringInterval = null;
        Integer dbPortNumber = null;
        Boolean publiclyAccessible = null;
        String monitoringRoleArn = null;
        String domainIAMRoleName = null;
        Integer promotionTier = null;
        Boolean enableIAMDatabaseAuthentication = null;
        Boolean enablePerformanceInsights = null;
        String performanceInsightsKMSKeyId = null;
        GETModifyDBClusterCloudwatchLogsExportConfigurationParameter cloudwatchLogsExportConfiguration = null;
        Boolean deletionProtection = null;
        ModifyDBInstanceResult response = api.gETModifyDBInstance(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, allocatedStorage, dbInstanceClass, dbSubnetGroupName, dbSecurityGroups, vpcSecurityGroupIds, applyImmediately, masterUserPassword, dbParameterGroupName, backupRetentionPeriod, preferredBackupWindow, preferredMaintenanceWindow, multiAZ, engineVersion, allowMajorVersionUpgrade, autoMinorVersionUpgrade, licenseModel, iops, optionGroupName, newDBInstanceIdentifier, storageType, tdeCredentialArn, tdeCredentialPassword, caCertificateIdentifier, domain, copyTagsToSnapshot, monitoringInterval, dbPortNumber, publiclyAccessible, monitoringRoleArn, domainIAMRoleName, promotionTier, enableIAMDatabaseAuthentication, enablePerformanceInsights, performanceInsightsKMSKeyId, cloudwatchLogsExportConfiguration, deletionProtection);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt;, &lt;code&gt;ParameterValue&lt;/code&gt;, and &lt;code&gt;ApplyMethod&lt;/code&gt;. A maximum of 20 parameters can be modified in a single request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the Amazon Neptune console or the &lt;i&gt;DescribeDBParameters&lt;/i&gt; command to verify that your DB parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyDBParameterGroupTest() throws ApiException {
        String dbParameterGroupName = null;
        List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DBParameterGroupNameMessage response = api.gETModifyDBParameterGroup(dbParameterGroupName, parameters, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the Amazon Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyDBSubnetGroupTest() throws ApiException {
        String dbSubnetGroupName = null;
        List<String> subnetIds = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String dbSubnetGroupDescription = null;
        ModifyDBSubnetGroupResult response = api.gETModifyDBSubnetGroup(dbSubnetGroupName, subnetIds, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbSubnetGroupDescription);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Modifies an existing event notification subscription. Note that you can&#39;t modify the source identifiers using this call; to change source identifiers for a subscription, use the &lt;a&gt;AddSourceIdentifierToSubscription&lt;/a&gt; and &lt;a&gt;RemoveSourceIdentifierFromSubscription&lt;/a&gt; calls.&lt;/p&gt; &lt;p&gt;You can see a list of the event categories for a given SourceType by using the &lt;b&gt;DescribeEventCategories&lt;/b&gt; action.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyEventSubscriptionTest() throws ApiException {
        String subscriptionName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String snsTopicArn = null;
        String sourceType = null;
        List<String> eventCategories = null;
        Boolean enabled = null;
        ModifyEventSubscriptionResult response = api.gETModifyEventSubscription(subscriptionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, snsTopicArn, sourceType, eventCategories, enabled);
        // TODO: test validations
    }

    /**
     * Modify a setting for an Amazon Neptune global cluster. You can change one or more database configuration parameters by specifying these parameters and their new values in the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyGlobalClusterTest() throws ApiException {
        String globalClusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String newGlobalClusterIdentifier = null;
        Boolean deletionProtection = null;
        String engineVersion = null;
        Boolean allowMajorVersionUpgrade = null;
        ModifyGlobalClusterResult response = api.gETModifyGlobalCluster(globalClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, newGlobalClusterIdentifier, deletionProtection, engineVersion, allowMajorVersionUpgrade);
        // TODO: test validations
    }

    /**
     * Not supported.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETPromoteReadReplicaDBClusterTest() throws ApiException {
        String dbClusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PromoteReadReplicaDBClusterResult response = api.gETPromoteReadReplicaDBCluster(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.&lt;/p&gt; &lt;p&gt;Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETRebootDBInstanceTest() throws ApiException {
        String dbInstanceIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean forceFailover = null;
        RebootDBInstanceResult response = api.gETRebootDBInstance(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, forceFailover);
        // TODO: test validations
    }

    /**
     * Detaches a Neptune DB cluster from a Neptune global database. A secondary cluster becomes a normal standalone cluster with read-write capability instead of being read-only, and no longer receives data from a the primary cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETRemoveFromGlobalClusterTest() throws ApiException {
        String globalClusterIdentifier = null;
        String dbClusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RemoveFromGlobalClusterResult response = api.gETRemoveFromGlobalCluster(globalClusterIdentifier, dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates an Identity and Access Management (IAM) role from a DB cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETRemoveRoleFromDBClusterTest() throws ApiException {
        String dbClusterIdentifier = null;
        String roleArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String featureName = null;
        api.gETRemoveRoleFromDBCluster(dbClusterIdentifier, roleArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, featureName);
        // TODO: test validations
    }

    /**
     * Removes a source identifier from an existing event notification subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETRemoveSourceIdentifierFromSubscriptionTest() throws ApiException {
        String subscriptionName = null;
        String sourceIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RemoveSourceIdentifierFromSubscriptionResult response = api.gETRemoveSourceIdentifierFromSubscription(subscriptionName, sourceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes metadata tags from an Amazon Neptune resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETRemoveTagsFromResourceTest() throws ApiException {
        String resourceName = null;
        List<String> tagKeys = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETRemoveTagsFromResource(resourceName, tagKeys, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt; and &lt;code&gt;ApplyMethod&lt;/code&gt;. To reset the entire DB cluster parameter group, specify the &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; and &lt;code&gt;ResetAllParameters&lt;/code&gt; parameters.&lt;/p&gt; &lt;p&gt; When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to &lt;code&gt;pending-reboot&lt;/code&gt; to take effect on the next DB instance restart or &lt;a&gt;RebootDBInstance&lt;/a&gt; request. You must call &lt;a&gt;RebootDBInstance&lt;/a&gt; for every DB instance in your DB cluster that you want the updated static parameter to apply to.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETResetDBClusterParameterGroupTest() throws ApiException {
        String dbClusterParameterGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean resetAllParameters = null;
        List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters = null;
        DBClusterParameterGroupNameMessage response = api.gETResetDBClusterParameterGroup(dbClusterParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetAllParameters, parameters);
        // TODO: test validations
    }

    /**
     * Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: &lt;code&gt;ParameterName&lt;/code&gt; and &lt;code&gt;ApplyMethod&lt;/code&gt;. To reset the entire DB parameter group, specify the &lt;code&gt;DBParameterGroup&lt;/code&gt; name and &lt;code&gt;ResetAllParameters&lt;/code&gt; parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to &lt;code&gt;pending-reboot&lt;/code&gt; to take effect on the next DB instance restart or &lt;code&gt;RebootDBInstance&lt;/code&gt; request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETResetDBParameterGroupTest() throws ApiException {
        String dbParameterGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean resetAllParameters = null;
        List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters = null;
        DBParameterGroupNameMessage response = api.gETResetDBParameterGroup(dbParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetAllParameters, parameters);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new DB cluster from a DB snapshot or DB cluster snapshot.&lt;/p&gt; &lt;p&gt;If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.&lt;/p&gt; &lt;p&gt;If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETRestoreDBClusterFromSnapshotTest() throws ApiException {
        String dbClusterIdentifier = null;
        String snapshotIdentifier = null;
        String engine = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> availabilityZones = null;
        String engineVersion = null;
        Integer port = null;
        String dbSubnetGroupName = null;
        String databaseName = null;
        String optionGroupName = null;
        List<String> vpcSecurityGroupIds = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        String kmsKeyId = null;
        Boolean enableIAMDatabaseAuthentication = null;
        List<String> enableCloudwatchLogsExports = null;
        String dbClusterParameterGroupName = null;
        Boolean deletionProtection = null;
        Boolean copyTagsToSnapshot = null;
        GETCreateDBClusterServerlessV2ScalingConfigurationParameter serverlessV2ScalingConfiguration = null;
        RestoreDBClusterFromSnapshotResult response = api.gETRestoreDBClusterFromSnapshot(dbClusterIdentifier, snapshotIdentifier, engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, availabilityZones, engineVersion, port, dbSubnetGroupName, databaseName, optionGroupName, vpcSecurityGroupIds, tags, kmsKeyId, enableIAMDatabaseAuthentication, enableCloudwatchLogsExports, dbClusterParameterGroupName, deletionProtection, copyTagsToSnapshot, serverlessV2ScalingConfiguration);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before &lt;code&gt;LatestRestorableTime&lt;/code&gt; for up to &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the &lt;a&gt;CreateDBInstance&lt;/a&gt; action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in &lt;code&gt;DBClusterIdentifier&lt;/code&gt;. You can create DB instances only after the &lt;code&gt;RestoreDBClusterToPointInTime&lt;/code&gt; action has completed and the DB cluster is available.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETRestoreDBClusterToPointInTimeTest() throws ApiException {
        String dbClusterIdentifier = null;
        String sourceDBClusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String restoreType = null;
        OffsetDateTime restoreToTime = null;
        Boolean useLatestRestorableTime = null;
        Integer port = null;
        String dbSubnetGroupName = null;
        String optionGroupName = null;
        List<String> vpcSecurityGroupIds = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        String kmsKeyId = null;
        Boolean enableIAMDatabaseAuthentication = null;
        List<String> enableCloudwatchLogsExports = null;
        String dbClusterParameterGroupName = null;
        Boolean deletionProtection = null;
        GETCreateDBClusterServerlessV2ScalingConfigurationParameter serverlessV2ScalingConfiguration = null;
        RestoreDBClusterToPointInTimeResult response = api.gETRestoreDBClusterToPointInTime(dbClusterIdentifier, sourceDBClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreType, restoreToTime, useLatestRestorableTime, port, dbSubnetGroupName, optionGroupName, vpcSecurityGroupIds, tags, kmsKeyId, enableIAMDatabaseAuthentication, enableCloudwatchLogsExports, dbClusterParameterGroupName, deletionProtection, serverlessV2ScalingConfiguration);
        // TODO: test validations
    }

    /**
     * Starts an Amazon Neptune DB cluster that was stopped using the Amazon console, the Amazon CLI stop-db-cluster command, or the StopDBCluster API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETStartDBClusterTest() throws ApiException {
        String dbClusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartDBClusterResult response = api.gETStartDBCluster(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Stops an Amazon Neptune DB cluster. When you stop a DB cluster, Neptune retains the DB cluster&#39;s metadata, including its endpoints and DB parameter groups.&lt;/p&gt; &lt;p&gt;Neptune also retains the transaction logs so you can do a point-in-time restore if necessary.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETStopDBClusterTest() throws ApiException {
        String dbClusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopDBClusterResult response = api.gETStopDBCluster(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associates an Identity and Access Management (IAM) role with an Neptune DB cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTAddRoleToDBClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddRoleToDBClusterMessage addRoleToDBClusterMessage = null;
        api.pOSTAddRoleToDBCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addRoleToDBClusterMessage);
        // TODO: test validations
    }

    /**
     * Adds a source identifier to an existing event notification subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTAddSourceIdentifierToSubscriptionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddSourceIdentifierToSubscriptionMessage addSourceIdentifierToSubscriptionMessage = null;
        AddSourceIdentifierToSubscriptionResult response = api.pOSTAddSourceIdentifierToSubscription(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addSourceIdentifierToSubscriptionMessage);
        // TODO: test validations
    }

    /**
     * Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTAddTagsToResourceTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddTagsToResourceMessage addTagsToResourceMessage = null;
        api.pOSTAddTagsToResource(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addTagsToResourceMessage);
        // TODO: test validations
    }

    /**
     * Applies a pending maintenance action to a resource (for example, to a DB instance).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTApplyPendingMaintenanceActionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ApplyPendingMaintenanceActionMessage applyPendingMaintenanceActionMessage = null;
        ApplyPendingMaintenanceActionResult response = api.pOSTApplyPendingMaintenanceAction(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applyPendingMaintenanceActionMessage);
        // TODO: test validations
    }

    /**
     * Copies the specified DB cluster parameter group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCopyDBClusterParameterGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CopyDBClusterParameterGroupMessage copyDBClusterParameterGroupMessage = null;
        CopyDBClusterParameterGroupResult response = api.pOSTCopyDBClusterParameterGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, copyDBClusterParameterGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Copies a snapshot of a DB cluster.&lt;/p&gt; &lt;p&gt;To copy a DB cluster snapshot from a shared manual DB cluster snapshot, &lt;code&gt;SourceDBClusterSnapshotIdentifier&lt;/code&gt; must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCopyDBClusterSnapshotTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CopyDBClusterSnapshotMessage copyDBClusterSnapshotMessage = null;
        CopyDBClusterSnapshotResult response = api.pOSTCopyDBClusterSnapshot(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, copyDBClusterSnapshotMessage);
        // TODO: test validations
    }

    /**
     * Copies the specified DB parameter group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCopyDBParameterGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CopyDBParameterGroupMessage copyDBParameterGroupMessage = null;
        CopyDBParameterGroupResult response = api.pOSTCopyDBParameterGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, copyDBParameterGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new Amazon Neptune DB cluster.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;ReplicationSourceIdentifier&lt;/code&gt; parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.&lt;/p&gt; &lt;p&gt;Note that when you create a new cluster using &lt;code&gt;CreateDBCluster&lt;/code&gt; directly, deletion protection is disabled by default (when you create a new production cluster in the console, deletion protection is enabled by default). You can only delete a DB cluster if its &lt;code&gt;DeletionProtection&lt;/code&gt; field is set to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateDBClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDBClusterMessage createDBClusterMessage = null;
        CreateDBClusterResult response = api.pOSTCreateDBCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterMessage);
        // TODO: test validations
    }

    /**
     * Creates a new custom endpoint and associates it with an Amazon Neptune DB cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateDBClusterEndpointTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDBClusterEndpointMessage createDBClusterEndpointMessage = null;
        CreateDBClusterEndpointOutput response = api.pOSTCreateDBClusterEndpoint(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterEndpointMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new DB cluster parameter group.&lt;/p&gt; &lt;p&gt;Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.&lt;/p&gt; &lt;p&gt; A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using &lt;a&gt;ModifyDBClusterParameterGroup&lt;/a&gt;. Once you&#39;ve created a DB cluster parameter group, you need to associate it with your DB cluster using &lt;a&gt;ModifyDBCluster&lt;/a&gt;. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.&lt;/p&gt; &lt;important&gt; &lt;p&gt;After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/rds/\&quot;&gt;Amazon Neptune console&lt;/a&gt; or the &lt;a&gt;DescribeDBClusterParameters&lt;/a&gt; command to verify that your DB cluster parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateDBClusterParameterGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDBClusterParameterGroupMessage createDBClusterParameterGroupMessage = null;
        CreateDBClusterParameterGroupResult response = api.pOSTCreateDBClusterParameterGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterParameterGroupMessage);
        // TODO: test validations
    }

    /**
     * Creates a snapshot of a DB cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateDBClusterSnapshotTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDBClusterSnapshotMessage createDBClusterSnapshotMessage = null;
        CreateDBClusterSnapshotResult response = api.pOSTCreateDBClusterSnapshot(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterSnapshotMessage);
        // TODO: test validations
    }

    /**
     * Creates a new DB instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateDBInstanceTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDBInstanceMessage createDBInstanceMessage = null;
        CreateDBInstanceResult response = api.pOSTCreateDBInstance(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBInstanceMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new DB parameter group.&lt;/p&gt; &lt;p&gt;A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using &lt;i&gt;ModifyDBParameterGroup&lt;/i&gt;. Once you&#39;ve created a DB parameter group, you need to associate it with your DB instance using &lt;i&gt;ModifyDBInstance&lt;/i&gt;. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.&lt;/p&gt; &lt;important&gt; &lt;p&gt;After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the Amazon Neptune console or the &lt;i&gt;DescribeDBParameters&lt;/i&gt; command to verify that your DB parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateDBParameterGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDBParameterGroupMessage createDBParameterGroupMessage = null;
        CreateDBParameterGroupResult response = api.pOSTCreateDBParameterGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBParameterGroupMessage);
        // TODO: test validations
    }

    /**
     * Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the Amazon Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateDBSubnetGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDBSubnetGroupMessage createDBSubnetGroupMessage = null;
        CreateDBSubnetGroupResult response = api.pOSTCreateDBSubnetGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBSubnetGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.&lt;/p&gt; &lt;p&gt;You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType &#x3D; db-instance, SourceIds &#x3D; mydbinstance1, mydbinstance2 and EventCategories &#x3D; Availability, Backup.&lt;/p&gt; &lt;p&gt;If you specify both the SourceType and SourceIds, such as SourceType &#x3D; db-instance and SourceIdentifier &#x3D; myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateEventSubscriptionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateEventSubscriptionMessage createEventSubscriptionMessage = null;
        CreateEventSubscriptionResult response = api.pOSTCreateEventSubscription(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createEventSubscriptionMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a Neptune global database spread across multiple Amazon Regions. The global database contains a single primary cluster with read-write capability, and read-only secondary clusters that receive data from the primary cluster through high-speed replication performed by the Neptune storage subsystem.&lt;/p&gt; &lt;p&gt;You can create a global database that is initially empty, and then add a primary cluster and secondary clusters to it, or you can specify an existing Neptune cluster during the create operation to become the primary cluster of the global database.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateGlobalClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateGlobalClusterMessage createGlobalClusterMessage = null;
        CreateGlobalClusterResult response = api.pOSTCreateGlobalCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createGlobalClusterMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can&#39;t be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.&lt;/p&gt; &lt;p&gt;Note that the DB Cluster cannot be deleted if deletion protection is enabled. To delete it, you must first set its &lt;code&gt;DeletionProtection&lt;/code&gt; field to &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteDBClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteDBClusterMessage deleteDBClusterMessage = null;
        DeleteDBClusterResult response = api.pOSTDeleteDBCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterMessage);
        // TODO: test validations
    }

    /**
     * Deletes a custom endpoint and removes it from an Amazon Neptune DB cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteDBClusterEndpointTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteDBClusterEndpointMessage deleteDBClusterEndpointMessage = null;
        DeleteDBClusterEndpointOutput response = api.pOSTDeleteDBClusterEndpoint(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterEndpointMessage);
        // TODO: test validations
    }

    /**
     * Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can&#39;t be associated with any DB clusters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteDBClusterParameterGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteDBClusterParameterGroupMessage deleteDBClusterParameterGroupMessage = null;
        api.pOSTDeleteDBClusterParameterGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterParameterGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The DB cluster snapshot must be in the &lt;code&gt;available&lt;/code&gt; state to be deleted.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteDBClusterSnapshotTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteDBClusterSnapshotMessage deleteDBClusterSnapshotMessage = null;
        DeleteDBClusterSnapshotResult response = api.pOSTDeleteDBClusterSnapshot(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterSnapshotMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can&#39;t be recovered. Manual DB snapshots of the DB instance to be deleted by &lt;code&gt;DeleteDBInstance&lt;/code&gt; are not deleted.&lt;/p&gt; &lt;p&gt; If you request a final DB snapshot the status of the Amazon Neptune DB instance is &lt;code&gt;deleting&lt;/code&gt; until the DB snapshot is created. The API action &lt;code&gt;DescribeDBInstance&lt;/code&gt; is used to monitor the status of this operation. The action can&#39;t be canceled or reverted once submitted.&lt;/p&gt; &lt;p&gt;Note that when a DB instance is in a failure state and has a status of &lt;code&gt;failed&lt;/code&gt;, &lt;code&gt;incompatible-restore&lt;/code&gt;, or &lt;code&gt;incompatible-network&lt;/code&gt;, you can only delete it when the &lt;code&gt;SkipFinalSnapshot&lt;/code&gt; parameter is set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can&#39;t delete a DB instance if it is the only instance in the DB cluster, or if it has deletion protection enabled.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteDBInstanceTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteDBInstanceMessage deleteDBInstanceMessage = null;
        DeleteDBInstanceResult response = api.pOSTDeleteDBInstance(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBInstanceMessage);
        // TODO: test validations
    }

    /**
     * Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can&#39;t be associated with any DB instances.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteDBParameterGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteDBParameterGroupMessage deleteDBParameterGroupMessage = null;
        api.pOSTDeleteDBParameterGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBParameterGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a DB subnet group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The specified database subnet group must not be associated with any DB instances.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteDBSubnetGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteDBSubnetGroupMessage deleteDBSubnetGroupMessage = null;
        api.pOSTDeleteDBSubnetGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBSubnetGroupMessage);
        // TODO: test validations
    }

    /**
     * Deletes an event notification subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteEventSubscriptionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteEventSubscriptionMessage deleteEventSubscriptionMessage = null;
        DeleteEventSubscriptionResult response = api.pOSTDeleteEventSubscription(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteEventSubscriptionMessage);
        // TODO: test validations
    }

    /**
     * Deletes a global database. The primary and all secondary clusters must already be detached or deleted first.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteGlobalClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteGlobalClusterMessage deleteGlobalClusterMessage = null;
        DeleteGlobalClusterResult response = api.pOSTDeleteGlobalCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteGlobalClusterMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about endpoints for an Amazon Neptune DB cluster.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation can also return information for Amazon RDS clusters and Amazon DocDB clusters.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeDBClusterEndpointsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeDBClusterEndpointsMessage describeDBClusterEndpointsMessage = null;
        DBClusterEndpointMessage response = api.pOSTDescribeDBClusterEndpoints(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterEndpointsMessage);
        // TODO: test validations
    }

    /**
     *  Returns a list of &lt;code&gt;DBClusterParameterGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeDBClusterParameterGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeDBClusterParameterGroupsMessage describeDBClusterParameterGroupsMessage = null;
        DBClusterParameterGroupsMessage response = api.pOSTDescribeDBClusterParameterGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterParameterGroupsMessage);
        // TODO: test validations
    }

    /**
     * Returns the detailed parameter list for a particular DB cluster parameter group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeDBClusterParametersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeDBClusterParametersMessage describeDBClusterParametersMessage = null;
        DBClusterParameterGroupDetails response = api.pOSTDescribeDBClusterParameters(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterParametersMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.&lt;/p&gt; &lt;p&gt;When sharing snapshots with other Amazon accounts, &lt;code&gt;DescribeDBClusterSnapshotAttributes&lt;/code&gt; returns the &lt;code&gt;restore&lt;/code&gt; attribute and a list of IDs for the Amazon accounts that are authorized to copy or restore the manual DB cluster snapshot. If &lt;code&gt;all&lt;/code&gt; is included in the list of values for the &lt;code&gt;restore&lt;/code&gt; attribute, then the manual DB cluster snapshot is public and can be copied or restored by all Amazon accounts.&lt;/p&gt; &lt;p&gt;To add or remove access for an Amazon account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the &lt;a&gt;ModifyDBClusterSnapshotAttribute&lt;/a&gt; API action.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeDBClusterSnapshotAttributesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeDBClusterSnapshotAttributesMessage describeDBClusterSnapshotAttributesMessage = null;
        DescribeDBClusterSnapshotAttributesResult response = api.pOSTDescribeDBClusterSnapshotAttributes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeDBClusterSnapshotAttributesMessage);
        // TODO: test validations
    }

    /**
     * Returns information about DB cluster snapshots. This API action supports pagination.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeDBClusterSnapshotsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeDBClusterSnapshotsMessage describeDBClusterSnapshotsMessage = null;
        DBClusterSnapshotMessage response = api.pOSTDescribeDBClusterSnapshots(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterSnapshotsMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about provisioned DB clusters, and supports pagination.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation can also return information for Amazon RDS clusters and Amazon DocDB clusters.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeDBClustersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeDBClustersMessage describeDBClustersMessage = null;
        DBClusterMessage response = api.pOSTDescribeDBClusters(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClustersMessage);
        // TODO: test validations
    }

    /**
     * Returns a list of the available DB engines.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeDBEngineVersionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeDBEngineVersionsMessage describeDBEngineVersionsMessage = null;
        DBEngineVersionMessage response = api.pOSTDescribeDBEngineVersions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBEngineVersionsMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about provisioned instances, and supports pagination.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation can also return information for Amazon RDS instances and Amazon DocDB instances.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeDBInstancesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeDBInstancesMessage describeDBInstancesMessage = null;
        DBInstanceMessage response = api.pOSTDescribeDBInstances(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBInstancesMessage);
        // TODO: test validations
    }

    /**
     * Returns a list of &lt;code&gt;DBParameterGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBParameterGroupName&lt;/code&gt; is specified, the list will contain only the description of the specified DB parameter group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeDBParameterGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeDBParameterGroupsMessage describeDBParameterGroupsMessage = null;
        DBParameterGroupsMessage response = api.pOSTDescribeDBParameterGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBParameterGroupsMessage);
        // TODO: test validations
    }

    /**
     * Returns the detailed parameter list for a particular DB parameter group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeDBParametersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeDBParametersMessage describeDBParametersMessage = null;
        DBParameterGroupDetails response = api.pOSTDescribeDBParameters(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBParametersMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.&lt;/p&gt; &lt;p&gt;For an overview of CIDR ranges, go to the &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\&quot;&gt;Wikipedia Tutorial&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeDBSubnetGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeDBSubnetGroupsMessage describeDBSubnetGroupsMessage = null;
        DBSubnetGroupMessage response = api.pOSTDescribeDBSubnetGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBSubnetGroupsMessage);
        // TODO: test validations
    }

    /**
     * Returns the default engine and system parameter information for the cluster database engine.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeEngineDefaultClusterParametersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeEngineDefaultClusterParametersMessage describeEngineDefaultClusterParametersMessage = null;
        DescribeEngineDefaultClusterParametersResult response = api.pOSTDescribeEngineDefaultClusterParameters(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEngineDefaultClusterParametersMessage);
        // TODO: test validations
    }

    /**
     * Returns the default engine and system parameter information for the specified database engine.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeEngineDefaultParametersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeEngineDefaultParametersMessage describeEngineDefaultParametersMessage = null;
        DescribeEngineDefaultParametersResult response = api.pOSTDescribeEngineDefaultParameters(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEngineDefaultParametersMessage);
        // TODO: test validations
    }

    /**
     * Displays a list of categories for all event source types, or, if specified, for a specified source type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeEventCategoriesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeEventCategoriesMessage describeEventCategoriesMessage = null;
        EventCategoriesMessage response = api.pOSTDescribeEventCategories(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEventCategoriesMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.&lt;/p&gt; &lt;p&gt;If you specify a SubscriptionName, lists the description for that subscription.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeEventSubscriptionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeEventSubscriptionsMessage describeEventSubscriptionsMessage = null;
        EventSubscriptionsMessage response = api.pOSTDescribeEventSubscriptions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEventSubscriptionsMessage);
        // TODO: test validations
    }

    /**
     * Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeEventsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeEventsMessage describeEventsMessage = null;
        EventsMessage response = api.pOSTDescribeEvents(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEventsMessage);
        // TODO: test validations
    }

    /**
     * Returns information about Neptune global database clusters. This API supports pagination.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeGlobalClustersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeGlobalClustersMessage describeGlobalClustersMessage = null;
        GlobalClustersMessage response = api.pOSTDescribeGlobalClusters(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeGlobalClustersMessage);
        // TODO: test validations
    }

    /**
     * Returns a list of orderable DB instance options for the specified engine.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeOrderableDBInstanceOptionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeOrderableDBInstanceOptionsMessage describeOrderableDBInstanceOptionsMessage = null;
        OrderableDBInstanceOptionsMessage response = api.pOSTDescribeOrderableDBInstanceOptions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeOrderableDBInstanceOptionsMessage);
        // TODO: test validations
    }

    /**
     * Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribePendingMaintenanceActionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribePendingMaintenanceActionsMessage describePendingMaintenanceActionsMessage = null;
        PendingMaintenanceActionsMessage response = api.pOSTDescribePendingMaintenanceActions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describePendingMaintenanceActionsMessage);
        // TODO: test validations
    }

    /**
     * You can call &lt;a&gt;DescribeValidDBInstanceModifications&lt;/a&gt; to learn what modifications you can make to your DB instance. You can use this information when you call &lt;a&gt;ModifyDBInstance&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeValidDBInstanceModificationsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeValidDBInstanceModificationsMessage describeValidDBInstanceModificationsMessage = null;
        DescribeValidDBInstanceModificationsResult response = api.pOSTDescribeValidDBInstanceModifications(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeValidDBInstanceModificationsMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Forces a failover for a DB cluster.&lt;/p&gt; &lt;p&gt;A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).&lt;/p&gt; &lt;p&gt;Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTFailoverDBClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        FailoverDBClusterMessage failoverDBClusterMessage = null;
        FailoverDBClusterResult response = api.pOSTFailoverDBCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, failoverDBClusterMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Initiates the failover process for a Neptune global database.&lt;/p&gt; &lt;p&gt;A failover for a Neptune global database promotes one of secondary read-only DB clusters to be the primary DB cluster and demotes the primary DB cluster to being a secondary (read-only) DB cluster. In other words, the role of the current primary DB cluster and the selected target secondary DB cluster are switched. The selected secondary DB cluster assumes full read/write capabilities for the Neptune global database.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action applies &lt;b&gt;only&lt;/b&gt; to Neptune global databases. This action is only intended for use on healthy Neptune global databases with healthy Neptune DB clusters and no region-wide outages, to test disaster recovery scenarios or to reconfigure the global database topology.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTFailoverGlobalClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        FailoverGlobalClusterMessage failoverGlobalClusterMessage = null;
        FailoverGlobalClusterResult response = api.pOSTFailoverGlobalCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, failoverGlobalClusterMessage);
        // TODO: test validations
    }

    /**
     * Lists all tags on an Amazon Neptune resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTListTagsForResourceTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceMessage listTagsForResourceMessage = null;
        TagListMessage response = api.pOSTListTagsForResource(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listTagsForResourceMessage);
        // TODO: test validations
    }

    /**
     * Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyDBClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyDBClusterMessage modifyDBClusterMessage = null;
        ModifyDBClusterResult response = api.pOSTModifyDBCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterMessage);
        // TODO: test validations
    }

    /**
     * Modifies the properties of an endpoint in an Amazon Neptune DB cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyDBClusterEndpointTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyDBClusterEndpointMessage modifyDBClusterEndpointMessage = null;
        ModifyDBClusterEndpointOutput response = api.pOSTModifyDBClusterEndpoint(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterEndpointMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt;, &lt;code&gt;ParameterValue&lt;/code&gt;, and &lt;code&gt;ApplyMethod&lt;/code&gt;. A maximum of 20 parameters can be modified in a single request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the Amazon Neptune console or the &lt;a&gt;DescribeDBClusterParameters&lt;/a&gt; command to verify that your DB cluster parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyDBClusterParameterGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyDBClusterParameterGroupMessage modifyDBClusterParameterGroupMessage = null;
        DBClusterParameterGroupNameMessage response = api.pOSTModifyDBClusterParameterGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterParameterGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.&lt;/p&gt; &lt;p&gt;To share a manual DB cluster snapshot with other Amazon accounts, specify &lt;code&gt;restore&lt;/code&gt; as the &lt;code&gt;AttributeName&lt;/code&gt; and use the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter to add a list of IDs of the Amazon accounts that are authorized to restore the manual DB cluster snapshot. Use the value &lt;code&gt;all&lt;/code&gt; to make the manual DB cluster snapshot public, which means that it can be copied or restored by all Amazon accounts. Do not add the &lt;code&gt;all&lt;/code&gt; value for any manual DB cluster snapshots that contain private information that you don&#39;t want available to all Amazon accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized Amazon account IDs for the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter. You can&#39;t use &lt;code&gt;all&lt;/code&gt; as a value for that parameter in this case.&lt;/p&gt; &lt;p&gt;To view which Amazon accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the &lt;a&gt;DescribeDBClusterSnapshotAttributes&lt;/a&gt; API action.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyDBClusterSnapshotAttributeTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyDBClusterSnapshotAttributeMessage modifyDBClusterSnapshotAttributeMessage = null;
        ModifyDBClusterSnapshotAttributeResult response = api.pOSTModifyDBClusterSnapshotAttribute(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterSnapshotAttributeMessage);
        // TODO: test validations
    }

    /**
     * Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call &lt;a&gt;DescribeValidDBInstanceModifications&lt;/a&gt; before you call &lt;a&gt;ModifyDBInstance&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyDBInstanceTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyDBInstanceMessage modifyDBInstanceMessage = null;
        ModifyDBInstanceResult response = api.pOSTModifyDBInstance(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBInstanceMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt;, &lt;code&gt;ParameterValue&lt;/code&gt;, and &lt;code&gt;ApplyMethod&lt;/code&gt;. A maximum of 20 parameters can be modified in a single request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the Amazon Neptune console or the &lt;i&gt;DescribeDBParameters&lt;/i&gt; command to verify that your DB parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyDBParameterGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyDBParameterGroupMessage modifyDBParameterGroupMessage = null;
        DBParameterGroupNameMessage response = api.pOSTModifyDBParameterGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBParameterGroupMessage);
        // TODO: test validations
    }

    /**
     * Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the Amazon Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyDBSubnetGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyDBSubnetGroupMessage modifyDBSubnetGroupMessage = null;
        ModifyDBSubnetGroupResult response = api.pOSTModifyDBSubnetGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBSubnetGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Modifies an existing event notification subscription. Note that you can&#39;t modify the source identifiers using this call; to change source identifiers for a subscription, use the &lt;a&gt;AddSourceIdentifierToSubscription&lt;/a&gt; and &lt;a&gt;RemoveSourceIdentifierFromSubscription&lt;/a&gt; calls.&lt;/p&gt; &lt;p&gt;You can see a list of the event categories for a given SourceType by using the &lt;b&gt;DescribeEventCategories&lt;/b&gt; action.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyEventSubscriptionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyEventSubscriptionMessage modifyEventSubscriptionMessage = null;
        ModifyEventSubscriptionResult response = api.pOSTModifyEventSubscription(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyEventSubscriptionMessage);
        // TODO: test validations
    }

    /**
     * Modify a setting for an Amazon Neptune global cluster. You can change one or more database configuration parameters by specifying these parameters and their new values in the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyGlobalClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyGlobalClusterMessage modifyGlobalClusterMessage = null;
        ModifyGlobalClusterResult response = api.pOSTModifyGlobalCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyGlobalClusterMessage);
        // TODO: test validations
    }

    /**
     * Not supported.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTPromoteReadReplicaDBClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PromoteReadReplicaDBClusterMessage promoteReadReplicaDBClusterMessage = null;
        PromoteReadReplicaDBClusterResult response = api.pOSTPromoteReadReplicaDBCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, promoteReadReplicaDBClusterMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.&lt;/p&gt; &lt;p&gt;Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTRebootDBInstanceTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RebootDBInstanceMessage rebootDBInstanceMessage = null;
        RebootDBInstanceResult response = api.pOSTRebootDBInstance(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rebootDBInstanceMessage);
        // TODO: test validations
    }

    /**
     * Detaches a Neptune DB cluster from a Neptune global database. A secondary cluster becomes a normal standalone cluster with read-write capability instead of being read-only, and no longer receives data from a the primary cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTRemoveFromGlobalClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RemoveFromGlobalClusterMessage removeFromGlobalClusterMessage = null;
        RemoveFromGlobalClusterResult response = api.pOSTRemoveFromGlobalCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeFromGlobalClusterMessage);
        // TODO: test validations
    }

    /**
     * Disassociates an Identity and Access Management (IAM) role from a DB cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTRemoveRoleFromDBClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RemoveRoleFromDBClusterMessage removeRoleFromDBClusterMessage = null;
        api.pOSTRemoveRoleFromDBCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeRoleFromDBClusterMessage);
        // TODO: test validations
    }

    /**
     * Removes a source identifier from an existing event notification subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTRemoveSourceIdentifierFromSubscriptionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RemoveSourceIdentifierFromSubscriptionMessage removeSourceIdentifierFromSubscriptionMessage = null;
        RemoveSourceIdentifierFromSubscriptionResult response = api.pOSTRemoveSourceIdentifierFromSubscription(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeSourceIdentifierFromSubscriptionMessage);
        // TODO: test validations
    }

    /**
     * Removes metadata tags from an Amazon Neptune resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTRemoveTagsFromResourceTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RemoveTagsFromResourceMessage removeTagsFromResourceMessage = null;
        api.pOSTRemoveTagsFromResource(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeTagsFromResourceMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt; and &lt;code&gt;ApplyMethod&lt;/code&gt;. To reset the entire DB cluster parameter group, specify the &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; and &lt;code&gt;ResetAllParameters&lt;/code&gt; parameters.&lt;/p&gt; &lt;p&gt; When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to &lt;code&gt;pending-reboot&lt;/code&gt; to take effect on the next DB instance restart or &lt;a&gt;RebootDBInstance&lt;/a&gt; request. You must call &lt;a&gt;RebootDBInstance&lt;/a&gt; for every DB instance in your DB cluster that you want the updated static parameter to apply to.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTResetDBClusterParameterGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ResetDBClusterParameterGroupMessage resetDBClusterParameterGroupMessage = null;
        DBClusterParameterGroupNameMessage response = api.pOSTResetDBClusterParameterGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetDBClusterParameterGroupMessage);
        // TODO: test validations
    }

    /**
     * Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: &lt;code&gt;ParameterName&lt;/code&gt; and &lt;code&gt;ApplyMethod&lt;/code&gt;. To reset the entire DB parameter group, specify the &lt;code&gt;DBParameterGroup&lt;/code&gt; name and &lt;code&gt;ResetAllParameters&lt;/code&gt; parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to &lt;code&gt;pending-reboot&lt;/code&gt; to take effect on the next DB instance restart or &lt;code&gt;RebootDBInstance&lt;/code&gt; request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTResetDBParameterGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ResetDBParameterGroupMessage resetDBParameterGroupMessage = null;
        DBParameterGroupNameMessage response = api.pOSTResetDBParameterGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetDBParameterGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new DB cluster from a DB snapshot or DB cluster snapshot.&lt;/p&gt; &lt;p&gt;If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.&lt;/p&gt; &lt;p&gt;If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTRestoreDBClusterFromSnapshotTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RestoreDBClusterFromSnapshotMessage restoreDBClusterFromSnapshotMessage = null;
        RestoreDBClusterFromSnapshotResult response = api.pOSTRestoreDBClusterFromSnapshot(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreDBClusterFromSnapshotMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before &lt;code&gt;LatestRestorableTime&lt;/code&gt; for up to &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the &lt;a&gt;CreateDBInstance&lt;/a&gt; action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in &lt;code&gt;DBClusterIdentifier&lt;/code&gt;. You can create DB instances only after the &lt;code&gt;RestoreDBClusterToPointInTime&lt;/code&gt; action has completed and the DB cluster is available.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTRestoreDBClusterToPointInTimeTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RestoreDBClusterToPointInTimeMessage restoreDBClusterToPointInTimeMessage = null;
        RestoreDBClusterToPointInTimeResult response = api.pOSTRestoreDBClusterToPointInTime(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreDBClusterToPointInTimeMessage);
        // TODO: test validations
    }

    /**
     * Starts an Amazon Neptune DB cluster that was stopped using the Amazon console, the Amazon CLI stop-db-cluster command, or the StopDBCluster API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTStartDBClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartDBClusterMessage startDBClusterMessage = null;
        StartDBClusterResult response = api.pOSTStartDBCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startDBClusterMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Stops an Amazon Neptune DB cluster. When you stop a DB cluster, Neptune retains the DB cluster&#39;s metadata, including its endpoints and DB parameter groups.&lt;/p&gt; &lt;p&gt;Neptune also retains the transaction logs so you can do a point-in-time restore if necessary.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTStopDBClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopDBClusterMessage stopDBClusterMessage = null;
        StopDBClusterResult response = api.pOSTStopDBCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stopDBClusterMessage);
        // TODO: test validations
    }

}
