/*
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DBClusterPendingModifiedValues;
import org.openapitools.client.model.ServerlessV2ScalingConfigurationInfo;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for DBCluster
 */
public class DBClusterTest {
    private final DBCluster model = new DBCluster();

    /**
     * Model tests for DBCluster
     */
    @Test
    public void testDBCluster() {
        // TODO: test DBCluster
    }

    /**
     * Test the property 'allocatedStorage'
     */
    @Test
    public void allocatedStorageTest() {
        // TODO: test allocatedStorage
    }

    /**
     * Test the property 'availabilityZones'
     */
    @Test
    public void availabilityZonesTest() {
        // TODO: test availabilityZones
    }

    /**
     * Test the property 'backupRetentionPeriod'
     */
    @Test
    public void backupRetentionPeriodTest() {
        // TODO: test backupRetentionPeriod
    }

    /**
     * Test the property 'characterSetName'
     */
    @Test
    public void characterSetNameTest() {
        // TODO: test characterSetName
    }

    /**
     * Test the property 'databaseName'
     */
    @Test
    public void databaseNameTest() {
        // TODO: test databaseName
    }

    /**
     * Test the property 'dbClusterIdentifier'
     */
    @Test
    public void dbClusterIdentifierTest() {
        // TODO: test dbClusterIdentifier
    }

    /**
     * Test the property 'dbClusterParameterGroup'
     */
    @Test
    public void dbClusterParameterGroupTest() {
        // TODO: test dbClusterParameterGroup
    }

    /**
     * Test the property 'dbSubnetGroup'
     */
    @Test
    public void dbSubnetGroupTest() {
        // TODO: test dbSubnetGroup
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'percentProgress'
     */
    @Test
    public void percentProgressTest() {
        // TODO: test percentProgress
    }

    /**
     * Test the property 'earliestRestorableTime'
     */
    @Test
    public void earliestRestorableTimeTest() {
        // TODO: test earliestRestorableTime
    }

    /**
     * Test the property 'endpoint'
     */
    @Test
    public void endpointTest() {
        // TODO: test endpoint
    }

    /**
     * Test the property 'readerEndpoint'
     */
    @Test
    public void readerEndpointTest() {
        // TODO: test readerEndpoint
    }

    /**
     * Test the property 'multiAZ'
     */
    @Test
    public void multiAZTest() {
        // TODO: test multiAZ
    }

    /**
     * Test the property 'engine'
     */
    @Test
    public void engineTest() {
        // TODO: test engine
    }

    /**
     * Test the property 'engineVersion'
     */
    @Test
    public void engineVersionTest() {
        // TODO: test engineVersion
    }

    /**
     * Test the property 'latestRestorableTime'
     */
    @Test
    public void latestRestorableTimeTest() {
        // TODO: test latestRestorableTime
    }

    /**
     * Test the property 'port'
     */
    @Test
    public void portTest() {
        // TODO: test port
    }

    /**
     * Test the property 'masterUsername'
     */
    @Test
    public void masterUsernameTest() {
        // TODO: test masterUsername
    }

    /**
     * Test the property 'dbClusterOptionGroupMemberships'
     */
    @Test
    public void dbClusterOptionGroupMembershipsTest() {
        // TODO: test dbClusterOptionGroupMemberships
    }

    /**
     * Test the property 'preferredBackupWindow'
     */
    @Test
    public void preferredBackupWindowTest() {
        // TODO: test preferredBackupWindow
    }

    /**
     * Test the property 'preferredMaintenanceWindow'
     */
    @Test
    public void preferredMaintenanceWindowTest() {
        // TODO: test preferredMaintenanceWindow
    }

    /**
     * Test the property 'replicationSourceIdentifier'
     */
    @Test
    public void replicationSourceIdentifierTest() {
        // TODO: test replicationSourceIdentifier
    }

    /**
     * Test the property 'readReplicaIdentifiers'
     */
    @Test
    public void readReplicaIdentifiersTest() {
        // TODO: test readReplicaIdentifiers
    }

    /**
     * Test the property 'dbClusterMembers'
     */
    @Test
    public void dbClusterMembersTest() {
        // TODO: test dbClusterMembers
    }

    /**
     * Test the property 'vpcSecurityGroups'
     */
    @Test
    public void vpcSecurityGroupsTest() {
        // TODO: test vpcSecurityGroups
    }

    /**
     * Test the property 'hostedZoneId'
     */
    @Test
    public void hostedZoneIdTest() {
        // TODO: test hostedZoneId
    }

    /**
     * Test the property 'storageEncrypted'
     */
    @Test
    public void storageEncryptedTest() {
        // TODO: test storageEncrypted
    }

    /**
     * Test the property 'kmsKeyId'
     */
    @Test
    public void kmsKeyIdTest() {
        // TODO: test kmsKeyId
    }

    /**
     * Test the property 'dbClusterResourceId'
     */
    @Test
    public void dbClusterResourceIdTest() {
        // TODO: test dbClusterResourceId
    }

    /**
     * Test the property 'dbClusterArn'
     */
    @Test
    public void dbClusterArnTest() {
        // TODO: test dbClusterArn
    }

    /**
     * Test the property 'associatedRoles'
     */
    @Test
    public void associatedRolesTest() {
        // TODO: test associatedRoles
    }

    /**
     * Test the property 'iaMDatabaseAuthenticationEnabled'
     */
    @Test
    public void iaMDatabaseAuthenticationEnabledTest() {
        // TODO: test iaMDatabaseAuthenticationEnabled
    }

    /**
     * Test the property 'cloneGroupId'
     */
    @Test
    public void cloneGroupIdTest() {
        // TODO: test cloneGroupId
    }

    /**
     * Test the property 'clusterCreateTime'
     */
    @Test
    public void clusterCreateTimeTest() {
        // TODO: test clusterCreateTime
    }

    /**
     * Test the property 'copyTagsToSnapshot'
     */
    @Test
    public void copyTagsToSnapshotTest() {
        // TODO: test copyTagsToSnapshot
    }

    /**
     * Test the property 'enabledCloudwatchLogsExports'
     */
    @Test
    public void enabledCloudwatchLogsExportsTest() {
        // TODO: test enabledCloudwatchLogsExports
    }

    /**
     * Test the property 'pendingModifiedValues'
     */
    @Test
    public void pendingModifiedValuesTest() {
        // TODO: test pendingModifiedValues
    }

    /**
     * Test the property 'deletionProtection'
     */
    @Test
    public void deletionProtectionTest() {
        // TODO: test deletionProtection
    }

    /**
     * Test the property 'crossAccountClone'
     */
    @Test
    public void crossAccountCloneTest() {
        // TODO: test crossAccountClone
    }

    /**
     * Test the property 'automaticRestartTime'
     */
    @Test
    public void automaticRestartTimeTest() {
        // TODO: test automaticRestartTime
    }

    /**
     * Test the property 'serverlessV2ScalingConfiguration'
     */
    @Test
    public void serverlessV2ScalingConfigurationTest() {
        // TODO: test serverlessV2ScalingConfiguration
    }

    /**
     * Test the property 'globalClusterIdentifier'
     */
    @Test
    public void globalClusterIdentifierTest() {
        // TODO: test globalClusterIdentifier
    }

}
