/*
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ModifyDBInstanceMessageCloudwatchLogsExportConfiguration;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ModifyDBInstanceMessage
 */
public class ModifyDBInstanceMessageTest {
    private final ModifyDBInstanceMessage model = new ModifyDBInstanceMessage();

    /**
     * Model tests for ModifyDBInstanceMessage
     */
    @Test
    public void testModifyDBInstanceMessage() {
        // TODO: test ModifyDBInstanceMessage
    }

    /**
     * Test the property 'dbInstanceIdentifier'
     */
    @Test
    public void dbInstanceIdentifierTest() {
        // TODO: test dbInstanceIdentifier
    }

    /**
     * Test the property 'allocatedStorage'
     */
    @Test
    public void allocatedStorageTest() {
        // TODO: test allocatedStorage
    }

    /**
     * Test the property 'dbInstanceClass'
     */
    @Test
    public void dbInstanceClassTest() {
        // TODO: test dbInstanceClass
    }

    /**
     * Test the property 'dbSubnetGroupName'
     */
    @Test
    public void dbSubnetGroupNameTest() {
        // TODO: test dbSubnetGroupName
    }

    /**
     * Test the property 'dbSecurityGroups'
     */
    @Test
    public void dbSecurityGroupsTest() {
        // TODO: test dbSecurityGroups
    }

    /**
     * Test the property 'vpcSecurityGroupIds'
     */
    @Test
    public void vpcSecurityGroupIdsTest() {
        // TODO: test vpcSecurityGroupIds
    }

    /**
     * Test the property 'applyImmediately'
     */
    @Test
    public void applyImmediatelyTest() {
        // TODO: test applyImmediately
    }

    /**
     * Test the property 'masterUserPassword'
     */
    @Test
    public void masterUserPasswordTest() {
        // TODO: test masterUserPassword
    }

    /**
     * Test the property 'dbParameterGroupName'
     */
    @Test
    public void dbParameterGroupNameTest() {
        // TODO: test dbParameterGroupName
    }

    /**
     * Test the property 'backupRetentionPeriod'
     */
    @Test
    public void backupRetentionPeriodTest() {
        // TODO: test backupRetentionPeriod
    }

    /**
     * Test the property 'preferredBackupWindow'
     */
    @Test
    public void preferredBackupWindowTest() {
        // TODO: test preferredBackupWindow
    }

    /**
     * Test the property 'preferredMaintenanceWindow'
     */
    @Test
    public void preferredMaintenanceWindowTest() {
        // TODO: test preferredMaintenanceWindow
    }

    /**
     * Test the property 'multiAZ'
     */
    @Test
    public void multiAZTest() {
        // TODO: test multiAZ
    }

    /**
     * Test the property 'engineVersion'
     */
    @Test
    public void engineVersionTest() {
        // TODO: test engineVersion
    }

    /**
     * Test the property 'allowMajorVersionUpgrade'
     */
    @Test
    public void allowMajorVersionUpgradeTest() {
        // TODO: test allowMajorVersionUpgrade
    }

    /**
     * Test the property 'autoMinorVersionUpgrade'
     */
    @Test
    public void autoMinorVersionUpgradeTest() {
        // TODO: test autoMinorVersionUpgrade
    }

    /**
     * Test the property 'licenseModel'
     */
    @Test
    public void licenseModelTest() {
        // TODO: test licenseModel
    }

    /**
     * Test the property 'iops'
     */
    @Test
    public void iopsTest() {
        // TODO: test iops
    }

    /**
     * Test the property 'optionGroupName'
     */
    @Test
    public void optionGroupNameTest() {
        // TODO: test optionGroupName
    }

    /**
     * Test the property 'newDBInstanceIdentifier'
     */
    @Test
    public void newDBInstanceIdentifierTest() {
        // TODO: test newDBInstanceIdentifier
    }

    /**
     * Test the property 'storageType'
     */
    @Test
    public void storageTypeTest() {
        // TODO: test storageType
    }

    /**
     * Test the property 'tdeCredentialArn'
     */
    @Test
    public void tdeCredentialArnTest() {
        // TODO: test tdeCredentialArn
    }

    /**
     * Test the property 'tdeCredentialPassword'
     */
    @Test
    public void tdeCredentialPasswordTest() {
        // TODO: test tdeCredentialPassword
    }

    /**
     * Test the property 'caCertificateIdentifier'
     */
    @Test
    public void caCertificateIdentifierTest() {
        // TODO: test caCertificateIdentifier
    }

    /**
     * Test the property 'domain'
     */
    @Test
    public void domainTest() {
        // TODO: test domain
    }

    /**
     * Test the property 'copyTagsToSnapshot'
     */
    @Test
    public void copyTagsToSnapshotTest() {
        // TODO: test copyTagsToSnapshot
    }

    /**
     * Test the property 'monitoringInterval'
     */
    @Test
    public void monitoringIntervalTest() {
        // TODO: test monitoringInterval
    }

    /**
     * Test the property 'dbPortNumber'
     */
    @Test
    public void dbPortNumberTest() {
        // TODO: test dbPortNumber
    }

    /**
     * Test the property 'publiclyAccessible'
     */
    @Test
    public void publiclyAccessibleTest() {
        // TODO: test publiclyAccessible
    }

    /**
     * Test the property 'monitoringRoleArn'
     */
    @Test
    public void monitoringRoleArnTest() {
        // TODO: test monitoringRoleArn
    }

    /**
     * Test the property 'domainIAMRoleName'
     */
    @Test
    public void domainIAMRoleNameTest() {
        // TODO: test domainIAMRoleName
    }

    /**
     * Test the property 'promotionTier'
     */
    @Test
    public void promotionTierTest() {
        // TODO: test promotionTier
    }

    /**
     * Test the property 'enableIAMDatabaseAuthentication'
     */
    @Test
    public void enableIAMDatabaseAuthenticationTest() {
        // TODO: test enableIAMDatabaseAuthentication
    }

    /**
     * Test the property 'enablePerformanceInsights'
     */
    @Test
    public void enablePerformanceInsightsTest() {
        // TODO: test enablePerformanceInsights
    }

    /**
     * Test the property 'performanceInsightsKMSKeyId'
     */
    @Test
    public void performanceInsightsKMSKeyIdTest() {
        // TODO: test performanceInsightsKMSKeyId
    }

    /**
     * Test the property 'cloudwatchLogsExportConfiguration'
     */
    @Test
    public void cloudwatchLogsExportConfigurationTest() {
        // TODO: test cloudwatchLogsExportConfiguration
    }

    /**
     * Test the property 'deletionProtection'
     */
    @Test
    public void deletionProtectionTest() {
        // TODO: test deletionProtection
    }

}
