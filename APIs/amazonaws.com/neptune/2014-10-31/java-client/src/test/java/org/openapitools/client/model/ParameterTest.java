/*
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApplyMethod;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Parameter
 */
public class ParameterTest {
    private final Parameter model = new Parameter();

    /**
     * Model tests for Parameter
     */
    @Test
    public void testParameter() {
        // TODO: test Parameter
    }

    /**
     * Test the property 'parameterName'
     */
    @Test
    public void parameterNameTest() {
        // TODO: test parameterName
    }

    /**
     * Test the property 'parameterValue'
     */
    @Test
    public void parameterValueTest() {
        // TODO: test parameterValue
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'source'
     */
    @Test
    public void sourceTest() {
        // TODO: test source
    }

    /**
     * Test the property 'applyType'
     */
    @Test
    public void applyTypeTest() {
        // TODO: test applyType
    }

    /**
     * Test the property 'dataType'
     */
    @Test
    public void dataTypeTest() {
        // TODO: test dataType
    }

    /**
     * Test the property 'allowedValues'
     */
    @Test
    public void allowedValuesTest() {
        // TODO: test allowedValues
    }

    /**
     * Test the property 'isModifiable'
     */
    @Test
    public void isModifiableTest() {
        // TODO: test isModifiable
    }

    /**
     * Test the property 'minimumEngineVersion'
     */
    @Test
    public void minimumEngineVersionTest() {
        // TODO: test minimumEngineVersion
    }

    /**
     * Test the property 'applyMethod'
     */
    @Test
    public void applyMethodTest() {
        // TODO: test applyMethod
    }

}
