/*
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for OrderableDBInstanceOptionsListInner
 */
public class OrderableDBInstanceOptionsListInnerTest {
    private final OrderableDBInstanceOptionsListInner model = new OrderableDBInstanceOptionsListInner();

    /**
     * Model tests for OrderableDBInstanceOptionsListInner
     */
    @Test
    public void testOrderableDBInstanceOptionsListInner() {
        // TODO: test OrderableDBInstanceOptionsListInner
    }

    /**
     * Test the property 'engine'
     */
    @Test
    public void engineTest() {
        // TODO: test engine
    }

    /**
     * Test the property 'engineVersion'
     */
    @Test
    public void engineVersionTest() {
        // TODO: test engineVersion
    }

    /**
     * Test the property 'dbInstanceClass'
     */
    @Test
    public void dbInstanceClassTest() {
        // TODO: test dbInstanceClass
    }

    /**
     * Test the property 'licenseModel'
     */
    @Test
    public void licenseModelTest() {
        // TODO: test licenseModel
    }

    /**
     * Test the property 'availabilityZones'
     */
    @Test
    public void availabilityZonesTest() {
        // TODO: test availabilityZones
    }

    /**
     * Test the property 'multiAZCapable'
     */
    @Test
    public void multiAZCapableTest() {
        // TODO: test multiAZCapable
    }

    /**
     * Test the property 'readReplicaCapable'
     */
    @Test
    public void readReplicaCapableTest() {
        // TODO: test readReplicaCapable
    }

    /**
     * Test the property 'vpc'
     */
    @Test
    public void vpcTest() {
        // TODO: test vpc
    }

    /**
     * Test the property 'supportsStorageEncryption'
     */
    @Test
    public void supportsStorageEncryptionTest() {
        // TODO: test supportsStorageEncryption
    }

    /**
     * Test the property 'storageType'
     */
    @Test
    public void storageTypeTest() {
        // TODO: test storageType
    }

    /**
     * Test the property 'supportsIops'
     */
    @Test
    public void supportsIopsTest() {
        // TODO: test supportsIops
    }

    /**
     * Test the property 'supportsEnhancedMonitoring'
     */
    @Test
    public void supportsEnhancedMonitoringTest() {
        // TODO: test supportsEnhancedMonitoring
    }

    /**
     * Test the property 'supportsIAMDatabaseAuthentication'
     */
    @Test
    public void supportsIAMDatabaseAuthenticationTest() {
        // TODO: test supportsIAMDatabaseAuthentication
    }

    /**
     * Test the property 'supportsPerformanceInsights'
     */
    @Test
    public void supportsPerformanceInsightsTest() {
        // TODO: test supportsPerformanceInsights
    }

    /**
     * Test the property 'minStorageSize'
     */
    @Test
    public void minStorageSizeTest() {
        // TODO: test minStorageSize
    }

    /**
     * Test the property 'maxStorageSize'
     */
    @Test
    public void maxStorageSizeTest() {
        // TODO: test maxStorageSize
    }

    /**
     * Test the property 'minIopsPerDbInstance'
     */
    @Test
    public void minIopsPerDbInstanceTest() {
        // TODO: test minIopsPerDbInstance
    }

    /**
     * Test the property 'maxIopsPerDbInstance'
     */
    @Test
    public void maxIopsPerDbInstanceTest() {
        // TODO: test maxIopsPerDbInstance
    }

    /**
     * Test the property 'minIopsPerGib'
     */
    @Test
    public void minIopsPerGibTest() {
        // TODO: test minIopsPerGib
    }

    /**
     * Test the property 'maxIopsPerGib'
     */
    @Test
    public void maxIopsPerGibTest() {
        // TODO: test maxIopsPerGib
    }

    /**
     * Test the property 'supportsGlobalDatabases'
     */
    @Test
    public void supportsGlobalDatabasesTest() {
        // TODO: test supportsGlobalDatabases
    }

}
