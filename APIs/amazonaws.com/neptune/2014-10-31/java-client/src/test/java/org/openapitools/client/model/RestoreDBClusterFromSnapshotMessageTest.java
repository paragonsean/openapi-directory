/*
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ServerlessV2ScalingConfiguration;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for RestoreDBClusterFromSnapshotMessage
 */
public class RestoreDBClusterFromSnapshotMessageTest {
    private final RestoreDBClusterFromSnapshotMessage model = new RestoreDBClusterFromSnapshotMessage();

    /**
     * Model tests for RestoreDBClusterFromSnapshotMessage
     */
    @Test
    public void testRestoreDBClusterFromSnapshotMessage() {
        // TODO: test RestoreDBClusterFromSnapshotMessage
    }

    /**
     * Test the property 'availabilityZones'
     */
    @Test
    public void availabilityZonesTest() {
        // TODO: test availabilityZones
    }

    /**
     * Test the property 'dbClusterIdentifier'
     */
    @Test
    public void dbClusterIdentifierTest() {
        // TODO: test dbClusterIdentifier
    }

    /**
     * Test the property 'snapshotIdentifier'
     */
    @Test
    public void snapshotIdentifierTest() {
        // TODO: test snapshotIdentifier
    }

    /**
     * Test the property 'engine'
     */
    @Test
    public void engineTest() {
        // TODO: test engine
    }

    /**
     * Test the property 'engineVersion'
     */
    @Test
    public void engineVersionTest() {
        // TODO: test engineVersion
    }

    /**
     * Test the property 'port'
     */
    @Test
    public void portTest() {
        // TODO: test port
    }

    /**
     * Test the property 'dbSubnetGroupName'
     */
    @Test
    public void dbSubnetGroupNameTest() {
        // TODO: test dbSubnetGroupName
    }

    /**
     * Test the property 'databaseName'
     */
    @Test
    public void databaseNameTest() {
        // TODO: test databaseName
    }

    /**
     * Test the property 'optionGroupName'
     */
    @Test
    public void optionGroupNameTest() {
        // TODO: test optionGroupName
    }

    /**
     * Test the property 'vpcSecurityGroupIds'
     */
    @Test
    public void vpcSecurityGroupIdsTest() {
        // TODO: test vpcSecurityGroupIds
    }

    /**
     * Test the property 'tags'
     */
    @Test
    public void tagsTest() {
        // TODO: test tags
    }

    /**
     * Test the property 'kmsKeyId'
     */
    @Test
    public void kmsKeyIdTest() {
        // TODO: test kmsKeyId
    }

    /**
     * Test the property 'enableIAMDatabaseAuthentication'
     */
    @Test
    public void enableIAMDatabaseAuthenticationTest() {
        // TODO: test enableIAMDatabaseAuthentication
    }

    /**
     * Test the property 'enableCloudwatchLogsExports'
     */
    @Test
    public void enableCloudwatchLogsExportsTest() {
        // TODO: test enableCloudwatchLogsExports
    }

    /**
     * Test the property 'dbClusterParameterGroupName'
     */
    @Test
    public void dbClusterParameterGroupNameTest() {
        // TODO: test dbClusterParameterGroupName
    }

    /**
     * Test the property 'deletionProtection'
     */
    @Test
    public void deletionProtectionTest() {
        // TODO: test deletionProtection
    }

    /**
     * Test the property 'copyTagsToSnapshot'
     */
    @Test
    public void copyTagsToSnapshotTest() {
        // TODO: test copyTagsToSnapshot
    }

    /**
     * Test the property 'serverlessV2ScalingConfiguration'
     */
    @Test
    public void serverlessV2ScalingConfigurationTest() {
        // TODO: test serverlessV2ScalingConfiguration
    }

}
