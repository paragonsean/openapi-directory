/*
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GlobalClusterListInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:52.008602-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GlobalClusterListInner {
  public static final String SERIALIZED_NAME_GLOBAL_CLUSTER_IDENTIFIER = "GlobalClusterIdentifier";
  @SerializedName(SERIALIZED_NAME_GLOBAL_CLUSTER_IDENTIFIER)
  private String globalClusterIdentifier;

  public static final String SERIALIZED_NAME_GLOBAL_CLUSTER_RESOURCE_ID = "GlobalClusterResourceId";
  @SerializedName(SERIALIZED_NAME_GLOBAL_CLUSTER_RESOURCE_ID)
  private String globalClusterResourceId;

  public static final String SERIALIZED_NAME_GLOBAL_CLUSTER_ARN = "GlobalClusterArn";
  @SerializedName(SERIALIZED_NAME_GLOBAL_CLUSTER_ARN)
  private String globalClusterArn;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_ENGINE = "Engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private String engine;

  public static final String SERIALIZED_NAME_ENGINE_VERSION = "EngineVersion";
  @SerializedName(SERIALIZED_NAME_ENGINE_VERSION)
  private String engineVersion;

  public static final String SERIALIZED_NAME_STORAGE_ENCRYPTED = "StorageEncrypted";
  @SerializedName(SERIALIZED_NAME_STORAGE_ENCRYPTED)
  private Boolean storageEncrypted;

  public static final String SERIALIZED_NAME_DELETION_PROTECTION = "DeletionProtection";
  @SerializedName(SERIALIZED_NAME_DELETION_PROTECTION)
  private Boolean deletionProtection;

  public static final String SERIALIZED_NAME_GLOBAL_CLUSTER_MEMBERS = "GlobalClusterMembers";
  @SerializedName(SERIALIZED_NAME_GLOBAL_CLUSTER_MEMBERS)
  private List globalClusterMembers;

  public GlobalClusterListInner() {
  }

  public GlobalClusterListInner globalClusterIdentifier(String globalClusterIdentifier) {
    this.globalClusterIdentifier = globalClusterIdentifier;
    return this;
  }

  /**
   * Get globalClusterIdentifier
   * @return globalClusterIdentifier
   */
  @javax.annotation.Nullable
  public String getGlobalClusterIdentifier() {
    return globalClusterIdentifier;
  }

  public void setGlobalClusterIdentifier(String globalClusterIdentifier) {
    this.globalClusterIdentifier = globalClusterIdentifier;
  }


  public GlobalClusterListInner globalClusterResourceId(String globalClusterResourceId) {
    this.globalClusterResourceId = globalClusterResourceId;
    return this;
  }

  /**
   * Get globalClusterResourceId
   * @return globalClusterResourceId
   */
  @javax.annotation.Nullable
  public String getGlobalClusterResourceId() {
    return globalClusterResourceId;
  }

  public void setGlobalClusterResourceId(String globalClusterResourceId) {
    this.globalClusterResourceId = globalClusterResourceId;
  }


  public GlobalClusterListInner globalClusterArn(String globalClusterArn) {
    this.globalClusterArn = globalClusterArn;
    return this;
  }

  /**
   * Get globalClusterArn
   * @return globalClusterArn
   */
  @javax.annotation.Nullable
  public String getGlobalClusterArn() {
    return globalClusterArn;
  }

  public void setGlobalClusterArn(String globalClusterArn) {
    this.globalClusterArn = globalClusterArn;
  }


  public GlobalClusterListInner status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public GlobalClusterListInner engine(String engine) {
    this.engine = engine;
    return this;
  }

  /**
   * Get engine
   * @return engine
   */
  @javax.annotation.Nullable
  public String getEngine() {
    return engine;
  }

  public void setEngine(String engine) {
    this.engine = engine;
  }


  public GlobalClusterListInner engineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
    return this;
  }

  /**
   * Get engineVersion
   * @return engineVersion
   */
  @javax.annotation.Nullable
  public String getEngineVersion() {
    return engineVersion;
  }

  public void setEngineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
  }


  public GlobalClusterListInner storageEncrypted(Boolean storageEncrypted) {
    this.storageEncrypted = storageEncrypted;
    return this;
  }

  /**
   * Get storageEncrypted
   * @return storageEncrypted
   */
  @javax.annotation.Nullable
  public Boolean getStorageEncrypted() {
    return storageEncrypted;
  }

  public void setStorageEncrypted(Boolean storageEncrypted) {
    this.storageEncrypted = storageEncrypted;
  }


  public GlobalClusterListInner deletionProtection(Boolean deletionProtection) {
    this.deletionProtection = deletionProtection;
    return this;
  }

  /**
   * Get deletionProtection
   * @return deletionProtection
   */
  @javax.annotation.Nullable
  public Boolean getDeletionProtection() {
    return deletionProtection;
  }

  public void setDeletionProtection(Boolean deletionProtection) {
    this.deletionProtection = deletionProtection;
  }


  public GlobalClusterListInner globalClusterMembers(List globalClusterMembers) {
    this.globalClusterMembers = globalClusterMembers;
    return this;
  }

  /**
   * Get globalClusterMembers
   * @return globalClusterMembers
   */
  @javax.annotation.Nullable
  public List getGlobalClusterMembers() {
    return globalClusterMembers;
  }

  public void setGlobalClusterMembers(List globalClusterMembers) {
    this.globalClusterMembers = globalClusterMembers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GlobalClusterListInner globalClusterListInner = (GlobalClusterListInner) o;
    return Objects.equals(this.globalClusterIdentifier, globalClusterListInner.globalClusterIdentifier) &&
        Objects.equals(this.globalClusterResourceId, globalClusterListInner.globalClusterResourceId) &&
        Objects.equals(this.globalClusterArn, globalClusterListInner.globalClusterArn) &&
        Objects.equals(this.status, globalClusterListInner.status) &&
        Objects.equals(this.engine, globalClusterListInner.engine) &&
        Objects.equals(this.engineVersion, globalClusterListInner.engineVersion) &&
        Objects.equals(this.storageEncrypted, globalClusterListInner.storageEncrypted) &&
        Objects.equals(this.deletionProtection, globalClusterListInner.deletionProtection) &&
        Objects.equals(this.globalClusterMembers, globalClusterListInner.globalClusterMembers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(globalClusterIdentifier, globalClusterResourceId, globalClusterArn, status, engine, engineVersion, storageEncrypted, deletionProtection, globalClusterMembers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GlobalClusterListInner {\n");
    sb.append("    globalClusterIdentifier: ").append(toIndentedString(globalClusterIdentifier)).append("\n");
    sb.append("    globalClusterResourceId: ").append(toIndentedString(globalClusterResourceId)).append("\n");
    sb.append("    globalClusterArn: ").append(toIndentedString(globalClusterArn)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    engineVersion: ").append(toIndentedString(engineVersion)).append("\n");
    sb.append("    storageEncrypted: ").append(toIndentedString(storageEncrypted)).append("\n");
    sb.append("    deletionProtection: ").append(toIndentedString(deletionProtection)).append("\n");
    sb.append("    globalClusterMembers: ").append(toIndentedString(globalClusterMembers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("GlobalClusterIdentifier");
    openapiFields.add("GlobalClusterResourceId");
    openapiFields.add("GlobalClusterArn");
    openapiFields.add("Status");
    openapiFields.add("Engine");
    openapiFields.add("EngineVersion");
    openapiFields.add("StorageEncrypted");
    openapiFields.add("DeletionProtection");
    openapiFields.add("GlobalClusterMembers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GlobalClusterListInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GlobalClusterListInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GlobalClusterListInner is not found in the empty JSON string", GlobalClusterListInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GlobalClusterListInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GlobalClusterListInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `GlobalClusterIdentifier`
      if (jsonObj.get("GlobalClusterIdentifier") != null && !jsonObj.get("GlobalClusterIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GlobalClusterIdentifier"));
      }
      // validate the optional field `GlobalClusterResourceId`
      if (jsonObj.get("GlobalClusterResourceId") != null && !jsonObj.get("GlobalClusterResourceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GlobalClusterResourceId"));
      }
      // validate the optional field `GlobalClusterArn`
      if (jsonObj.get("GlobalClusterArn") != null && !jsonObj.get("GlobalClusterArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GlobalClusterArn"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `Engine`
      if (jsonObj.get("Engine") != null && !jsonObj.get("Engine").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Engine"));
      }
      // validate the optional field `EngineVersion`
      if (jsonObj.get("EngineVersion") != null && !jsonObj.get("EngineVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EngineVersion"));
      }
      // validate the optional field `StorageEncrypted`
      if (jsonObj.get("StorageEncrypted") != null && !jsonObj.get("StorageEncrypted").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("StorageEncrypted"));
      }
      // validate the optional field `DeletionProtection`
      if (jsonObj.get("DeletionProtection") != null && !jsonObj.get("DeletionProtection").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DeletionProtection"));
      }
      // validate the optional field `GlobalClusterMembers`
      if (jsonObj.get("GlobalClusterMembers") != null && !jsonObj.get("GlobalClusterMembers").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("GlobalClusterMembers"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GlobalClusterListInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GlobalClusterListInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GlobalClusterListInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GlobalClusterListInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GlobalClusterListInner>() {
           @Override
           public void write(JsonWriter out, GlobalClusterListInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GlobalClusterListInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GlobalClusterListInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GlobalClusterListInner
   * @throws IOException if the JSON string is invalid with respect to GlobalClusterListInner
   */
  public static GlobalClusterListInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GlobalClusterListInner.class);
  }

  /**
   * Convert an instance of GlobalClusterListInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

