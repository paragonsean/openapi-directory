/*
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CopyDBParameterGroupMessage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:52.008602-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CopyDBParameterGroupMessage {
  public static final String SERIALIZED_NAME_SOURCE_D_B_PARAMETER_GROUP_IDENTIFIER = "SourceDBParameterGroupIdentifier";
  @SerializedName(SERIALIZED_NAME_SOURCE_D_B_PARAMETER_GROUP_IDENTIFIER)
  private String sourceDBParameterGroupIdentifier;

  public static final String SERIALIZED_NAME_TARGET_D_B_PARAMETER_GROUP_IDENTIFIER = "TargetDBParameterGroupIdentifier";
  @SerializedName(SERIALIZED_NAME_TARGET_D_B_PARAMETER_GROUP_IDENTIFIER)
  private String targetDBParameterGroupIdentifier;

  public static final String SERIALIZED_NAME_TARGET_D_B_PARAMETER_GROUP_DESCRIPTION = "TargetDBParameterGroupDescription";
  @SerializedName(SERIALIZED_NAME_TARGET_D_B_PARAMETER_GROUP_DESCRIPTION)
  private String targetDBParameterGroupDescription;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public CopyDBParameterGroupMessage() {
  }

  public CopyDBParameterGroupMessage sourceDBParameterGroupIdentifier(String sourceDBParameterGroupIdentifier) {
    this.sourceDBParameterGroupIdentifier = sourceDBParameterGroupIdentifier;
    return this;
  }

  /**
   * Get sourceDBParameterGroupIdentifier
   * @return sourceDBParameterGroupIdentifier
   */
  @javax.annotation.Nonnull
  public String getSourceDBParameterGroupIdentifier() {
    return sourceDBParameterGroupIdentifier;
  }

  public void setSourceDBParameterGroupIdentifier(String sourceDBParameterGroupIdentifier) {
    this.sourceDBParameterGroupIdentifier = sourceDBParameterGroupIdentifier;
  }


  public CopyDBParameterGroupMessage targetDBParameterGroupIdentifier(String targetDBParameterGroupIdentifier) {
    this.targetDBParameterGroupIdentifier = targetDBParameterGroupIdentifier;
    return this;
  }

  /**
   * Get targetDBParameterGroupIdentifier
   * @return targetDBParameterGroupIdentifier
   */
  @javax.annotation.Nonnull
  public String getTargetDBParameterGroupIdentifier() {
    return targetDBParameterGroupIdentifier;
  }

  public void setTargetDBParameterGroupIdentifier(String targetDBParameterGroupIdentifier) {
    this.targetDBParameterGroupIdentifier = targetDBParameterGroupIdentifier;
  }


  public CopyDBParameterGroupMessage targetDBParameterGroupDescription(String targetDBParameterGroupDescription) {
    this.targetDBParameterGroupDescription = targetDBParameterGroupDescription;
    return this;
  }

  /**
   * Get targetDBParameterGroupDescription
   * @return targetDBParameterGroupDescription
   */
  @javax.annotation.Nonnull
  public String getTargetDBParameterGroupDescription() {
    return targetDBParameterGroupDescription;
  }

  public void setTargetDBParameterGroupDescription(String targetDBParameterGroupDescription) {
    this.targetDBParameterGroupDescription = targetDBParameterGroupDescription;
  }


  public CopyDBParameterGroupMessage tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CopyDBParameterGroupMessage copyDBParameterGroupMessage = (CopyDBParameterGroupMessage) o;
    return Objects.equals(this.sourceDBParameterGroupIdentifier, copyDBParameterGroupMessage.sourceDBParameterGroupIdentifier) &&
        Objects.equals(this.targetDBParameterGroupIdentifier, copyDBParameterGroupMessage.targetDBParameterGroupIdentifier) &&
        Objects.equals(this.targetDBParameterGroupDescription, copyDBParameterGroupMessage.targetDBParameterGroupDescription) &&
        Objects.equals(this.tags, copyDBParameterGroupMessage.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceDBParameterGroupIdentifier, targetDBParameterGroupIdentifier, targetDBParameterGroupDescription, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CopyDBParameterGroupMessage {\n");
    sb.append("    sourceDBParameterGroupIdentifier: ").append(toIndentedString(sourceDBParameterGroupIdentifier)).append("\n");
    sb.append("    targetDBParameterGroupIdentifier: ").append(toIndentedString(targetDBParameterGroupIdentifier)).append("\n");
    sb.append("    targetDBParameterGroupDescription: ").append(toIndentedString(targetDBParameterGroupDescription)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SourceDBParameterGroupIdentifier");
    openapiFields.add("TargetDBParameterGroupIdentifier");
    openapiFields.add("TargetDBParameterGroupDescription");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SourceDBParameterGroupIdentifier");
    openapiRequiredFields.add("TargetDBParameterGroupIdentifier");
    openapiRequiredFields.add("TargetDBParameterGroupDescription");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CopyDBParameterGroupMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CopyDBParameterGroupMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CopyDBParameterGroupMessage is not found in the empty JSON string", CopyDBParameterGroupMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CopyDBParameterGroupMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CopyDBParameterGroupMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CopyDBParameterGroupMessage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `SourceDBParameterGroupIdentifier`
      String.validateJsonElement(jsonObj.get("SourceDBParameterGroupIdentifier"));
      // validate the required field `TargetDBParameterGroupIdentifier`
      String.validateJsonElement(jsonObj.get("TargetDBParameterGroupIdentifier"));
      // validate the required field `TargetDBParameterGroupDescription`
      String.validateJsonElement(jsonObj.get("TargetDBParameterGroupDescription"));
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CopyDBParameterGroupMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CopyDBParameterGroupMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CopyDBParameterGroupMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CopyDBParameterGroupMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<CopyDBParameterGroupMessage>() {
           @Override
           public void write(JsonWriter out, CopyDBParameterGroupMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CopyDBParameterGroupMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CopyDBParameterGroupMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CopyDBParameterGroupMessage
   * @throws IOException if the JSON string is invalid with respect to CopyDBParameterGroupMessage
   */
  public static CopyDBParameterGroupMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CopyDBParameterGroupMessage.class);
  }

  /**
   * Convert an instance of CopyDBParameterGroupMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

