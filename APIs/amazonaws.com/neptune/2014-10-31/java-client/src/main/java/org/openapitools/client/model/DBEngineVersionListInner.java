/*
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DBEngineVersionDefaultCharacterSet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DBEngineVersionListInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:52.008602-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DBEngineVersionListInner {
  public static final String SERIALIZED_NAME_ENGINE = "Engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private String engine;

  public static final String SERIALIZED_NAME_ENGINE_VERSION = "EngineVersion";
  @SerializedName(SERIALIZED_NAME_ENGINE_VERSION)
  private String engineVersion;

  public static final String SERIALIZED_NAME_DB_PARAMETER_GROUP_FAMILY = "DBParameterGroupFamily";
  @SerializedName(SERIALIZED_NAME_DB_PARAMETER_GROUP_FAMILY)
  private String dbParameterGroupFamily;

  public static final String SERIALIZED_NAME_DB_ENGINE_DESCRIPTION = "DBEngineDescription";
  @SerializedName(SERIALIZED_NAME_DB_ENGINE_DESCRIPTION)
  private String dbEngineDescription;

  public static final String SERIALIZED_NAME_DB_ENGINE_VERSION_DESCRIPTION = "DBEngineVersionDescription";
  @SerializedName(SERIALIZED_NAME_DB_ENGINE_VERSION_DESCRIPTION)
  private String dbEngineVersionDescription;

  public static final String SERIALIZED_NAME_DEFAULT_CHARACTER_SET = "DefaultCharacterSet";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CHARACTER_SET)
  private DBEngineVersionDefaultCharacterSet defaultCharacterSet;

  public static final String SERIALIZED_NAME_SUPPORTED_CHARACTER_SETS = "SupportedCharacterSets";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_CHARACTER_SETS)
  private List supportedCharacterSets;

  public static final String SERIALIZED_NAME_VALID_UPGRADE_TARGET = "ValidUpgradeTarget";
  @SerializedName(SERIALIZED_NAME_VALID_UPGRADE_TARGET)
  private List validUpgradeTarget;

  public static final String SERIALIZED_NAME_SUPPORTED_TIMEZONES = "SupportedTimezones";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_TIMEZONES)
  private List supportedTimezones;

  public static final String SERIALIZED_NAME_EXPORTABLE_LOG_TYPES = "ExportableLogTypes";
  @SerializedName(SERIALIZED_NAME_EXPORTABLE_LOG_TYPES)
  private List exportableLogTypes;

  public static final String SERIALIZED_NAME_SUPPORTS_LOG_EXPORTS_TO_CLOUDWATCH_LOGS = "SupportsLogExportsToCloudwatchLogs";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_LOG_EXPORTS_TO_CLOUDWATCH_LOGS)
  private Boolean supportsLogExportsToCloudwatchLogs;

  public static final String SERIALIZED_NAME_SUPPORTS_READ_REPLICA = "SupportsReadReplica";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_READ_REPLICA)
  private Boolean supportsReadReplica;

  public static final String SERIALIZED_NAME_SUPPORTS_GLOBAL_DATABASES = "SupportsGlobalDatabases";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_GLOBAL_DATABASES)
  private Boolean supportsGlobalDatabases;

  public DBEngineVersionListInner() {
  }

  public DBEngineVersionListInner engine(String engine) {
    this.engine = engine;
    return this;
  }

  /**
   * Get engine
   * @return engine
   */
  @javax.annotation.Nullable
  public String getEngine() {
    return engine;
  }

  public void setEngine(String engine) {
    this.engine = engine;
  }


  public DBEngineVersionListInner engineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
    return this;
  }

  /**
   * Get engineVersion
   * @return engineVersion
   */
  @javax.annotation.Nullable
  public String getEngineVersion() {
    return engineVersion;
  }

  public void setEngineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
  }


  public DBEngineVersionListInner dbParameterGroupFamily(String dbParameterGroupFamily) {
    this.dbParameterGroupFamily = dbParameterGroupFamily;
    return this;
  }

  /**
   * Get dbParameterGroupFamily
   * @return dbParameterGroupFamily
   */
  @javax.annotation.Nullable
  public String getDbParameterGroupFamily() {
    return dbParameterGroupFamily;
  }

  public void setDbParameterGroupFamily(String dbParameterGroupFamily) {
    this.dbParameterGroupFamily = dbParameterGroupFamily;
  }


  public DBEngineVersionListInner dbEngineDescription(String dbEngineDescription) {
    this.dbEngineDescription = dbEngineDescription;
    return this;
  }

  /**
   * Get dbEngineDescription
   * @return dbEngineDescription
   */
  @javax.annotation.Nullable
  public String getDbEngineDescription() {
    return dbEngineDescription;
  }

  public void setDbEngineDescription(String dbEngineDescription) {
    this.dbEngineDescription = dbEngineDescription;
  }


  public DBEngineVersionListInner dbEngineVersionDescription(String dbEngineVersionDescription) {
    this.dbEngineVersionDescription = dbEngineVersionDescription;
    return this;
  }

  /**
   * Get dbEngineVersionDescription
   * @return dbEngineVersionDescription
   */
  @javax.annotation.Nullable
  public String getDbEngineVersionDescription() {
    return dbEngineVersionDescription;
  }

  public void setDbEngineVersionDescription(String dbEngineVersionDescription) {
    this.dbEngineVersionDescription = dbEngineVersionDescription;
  }


  public DBEngineVersionListInner defaultCharacterSet(DBEngineVersionDefaultCharacterSet defaultCharacterSet) {
    this.defaultCharacterSet = defaultCharacterSet;
    return this;
  }

  /**
   * Get defaultCharacterSet
   * @return defaultCharacterSet
   */
  @javax.annotation.Nullable
  public DBEngineVersionDefaultCharacterSet getDefaultCharacterSet() {
    return defaultCharacterSet;
  }

  public void setDefaultCharacterSet(DBEngineVersionDefaultCharacterSet defaultCharacterSet) {
    this.defaultCharacterSet = defaultCharacterSet;
  }


  public DBEngineVersionListInner supportedCharacterSets(List supportedCharacterSets) {
    this.supportedCharacterSets = supportedCharacterSets;
    return this;
  }

  /**
   * Get supportedCharacterSets
   * @return supportedCharacterSets
   */
  @javax.annotation.Nullable
  public List getSupportedCharacterSets() {
    return supportedCharacterSets;
  }

  public void setSupportedCharacterSets(List supportedCharacterSets) {
    this.supportedCharacterSets = supportedCharacterSets;
  }


  public DBEngineVersionListInner validUpgradeTarget(List validUpgradeTarget) {
    this.validUpgradeTarget = validUpgradeTarget;
    return this;
  }

  /**
   * Get validUpgradeTarget
   * @return validUpgradeTarget
   */
  @javax.annotation.Nullable
  public List getValidUpgradeTarget() {
    return validUpgradeTarget;
  }

  public void setValidUpgradeTarget(List validUpgradeTarget) {
    this.validUpgradeTarget = validUpgradeTarget;
  }


  public DBEngineVersionListInner supportedTimezones(List supportedTimezones) {
    this.supportedTimezones = supportedTimezones;
    return this;
  }

  /**
   * Get supportedTimezones
   * @return supportedTimezones
   */
  @javax.annotation.Nullable
  public List getSupportedTimezones() {
    return supportedTimezones;
  }

  public void setSupportedTimezones(List supportedTimezones) {
    this.supportedTimezones = supportedTimezones;
  }


  public DBEngineVersionListInner exportableLogTypes(List exportableLogTypes) {
    this.exportableLogTypes = exportableLogTypes;
    return this;
  }

  /**
   * Get exportableLogTypes
   * @return exportableLogTypes
   */
  @javax.annotation.Nullable
  public List getExportableLogTypes() {
    return exportableLogTypes;
  }

  public void setExportableLogTypes(List exportableLogTypes) {
    this.exportableLogTypes = exportableLogTypes;
  }


  public DBEngineVersionListInner supportsLogExportsToCloudwatchLogs(Boolean supportsLogExportsToCloudwatchLogs) {
    this.supportsLogExportsToCloudwatchLogs = supportsLogExportsToCloudwatchLogs;
    return this;
  }

  /**
   * Get supportsLogExportsToCloudwatchLogs
   * @return supportsLogExportsToCloudwatchLogs
   */
  @javax.annotation.Nullable
  public Boolean getSupportsLogExportsToCloudwatchLogs() {
    return supportsLogExportsToCloudwatchLogs;
  }

  public void setSupportsLogExportsToCloudwatchLogs(Boolean supportsLogExportsToCloudwatchLogs) {
    this.supportsLogExportsToCloudwatchLogs = supportsLogExportsToCloudwatchLogs;
  }


  public DBEngineVersionListInner supportsReadReplica(Boolean supportsReadReplica) {
    this.supportsReadReplica = supportsReadReplica;
    return this;
  }

  /**
   * Get supportsReadReplica
   * @return supportsReadReplica
   */
  @javax.annotation.Nullable
  public Boolean getSupportsReadReplica() {
    return supportsReadReplica;
  }

  public void setSupportsReadReplica(Boolean supportsReadReplica) {
    this.supportsReadReplica = supportsReadReplica;
  }


  public DBEngineVersionListInner supportsGlobalDatabases(Boolean supportsGlobalDatabases) {
    this.supportsGlobalDatabases = supportsGlobalDatabases;
    return this;
  }

  /**
   * Get supportsGlobalDatabases
   * @return supportsGlobalDatabases
   */
  @javax.annotation.Nullable
  public Boolean getSupportsGlobalDatabases() {
    return supportsGlobalDatabases;
  }

  public void setSupportsGlobalDatabases(Boolean supportsGlobalDatabases) {
    this.supportsGlobalDatabases = supportsGlobalDatabases;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DBEngineVersionListInner dbEngineVersionListInner = (DBEngineVersionListInner) o;
    return Objects.equals(this.engine, dbEngineVersionListInner.engine) &&
        Objects.equals(this.engineVersion, dbEngineVersionListInner.engineVersion) &&
        Objects.equals(this.dbParameterGroupFamily, dbEngineVersionListInner.dbParameterGroupFamily) &&
        Objects.equals(this.dbEngineDescription, dbEngineVersionListInner.dbEngineDescription) &&
        Objects.equals(this.dbEngineVersionDescription, dbEngineVersionListInner.dbEngineVersionDescription) &&
        Objects.equals(this.defaultCharacterSet, dbEngineVersionListInner.defaultCharacterSet) &&
        Objects.equals(this.supportedCharacterSets, dbEngineVersionListInner.supportedCharacterSets) &&
        Objects.equals(this.validUpgradeTarget, dbEngineVersionListInner.validUpgradeTarget) &&
        Objects.equals(this.supportedTimezones, dbEngineVersionListInner.supportedTimezones) &&
        Objects.equals(this.exportableLogTypes, dbEngineVersionListInner.exportableLogTypes) &&
        Objects.equals(this.supportsLogExportsToCloudwatchLogs, dbEngineVersionListInner.supportsLogExportsToCloudwatchLogs) &&
        Objects.equals(this.supportsReadReplica, dbEngineVersionListInner.supportsReadReplica) &&
        Objects.equals(this.supportsGlobalDatabases, dbEngineVersionListInner.supportsGlobalDatabases);
  }

  @Override
  public int hashCode() {
    return Objects.hash(engine, engineVersion, dbParameterGroupFamily, dbEngineDescription, dbEngineVersionDescription, defaultCharacterSet, supportedCharacterSets, validUpgradeTarget, supportedTimezones, exportableLogTypes, supportsLogExportsToCloudwatchLogs, supportsReadReplica, supportsGlobalDatabases);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DBEngineVersionListInner {\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    engineVersion: ").append(toIndentedString(engineVersion)).append("\n");
    sb.append("    dbParameterGroupFamily: ").append(toIndentedString(dbParameterGroupFamily)).append("\n");
    sb.append("    dbEngineDescription: ").append(toIndentedString(dbEngineDescription)).append("\n");
    sb.append("    dbEngineVersionDescription: ").append(toIndentedString(dbEngineVersionDescription)).append("\n");
    sb.append("    defaultCharacterSet: ").append(toIndentedString(defaultCharacterSet)).append("\n");
    sb.append("    supportedCharacterSets: ").append(toIndentedString(supportedCharacterSets)).append("\n");
    sb.append("    validUpgradeTarget: ").append(toIndentedString(validUpgradeTarget)).append("\n");
    sb.append("    supportedTimezones: ").append(toIndentedString(supportedTimezones)).append("\n");
    sb.append("    exportableLogTypes: ").append(toIndentedString(exportableLogTypes)).append("\n");
    sb.append("    supportsLogExportsToCloudwatchLogs: ").append(toIndentedString(supportsLogExportsToCloudwatchLogs)).append("\n");
    sb.append("    supportsReadReplica: ").append(toIndentedString(supportsReadReplica)).append("\n");
    sb.append("    supportsGlobalDatabases: ").append(toIndentedString(supportsGlobalDatabases)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Engine");
    openapiFields.add("EngineVersion");
    openapiFields.add("DBParameterGroupFamily");
    openapiFields.add("DBEngineDescription");
    openapiFields.add("DBEngineVersionDescription");
    openapiFields.add("DefaultCharacterSet");
    openapiFields.add("SupportedCharacterSets");
    openapiFields.add("ValidUpgradeTarget");
    openapiFields.add("SupportedTimezones");
    openapiFields.add("ExportableLogTypes");
    openapiFields.add("SupportsLogExportsToCloudwatchLogs");
    openapiFields.add("SupportsReadReplica");
    openapiFields.add("SupportsGlobalDatabases");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DBEngineVersionListInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DBEngineVersionListInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DBEngineVersionListInner is not found in the empty JSON string", DBEngineVersionListInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DBEngineVersionListInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DBEngineVersionListInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Engine`
      if (jsonObj.get("Engine") != null && !jsonObj.get("Engine").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Engine"));
      }
      // validate the optional field `EngineVersion`
      if (jsonObj.get("EngineVersion") != null && !jsonObj.get("EngineVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EngineVersion"));
      }
      // validate the optional field `DBParameterGroupFamily`
      if (jsonObj.get("DBParameterGroupFamily") != null && !jsonObj.get("DBParameterGroupFamily").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DBParameterGroupFamily"));
      }
      // validate the optional field `DBEngineDescription`
      if (jsonObj.get("DBEngineDescription") != null && !jsonObj.get("DBEngineDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DBEngineDescription"));
      }
      // validate the optional field `DBEngineVersionDescription`
      if (jsonObj.get("DBEngineVersionDescription") != null && !jsonObj.get("DBEngineVersionDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DBEngineVersionDescription"));
      }
      // validate the optional field `DefaultCharacterSet`
      if (jsonObj.get("DefaultCharacterSet") != null && !jsonObj.get("DefaultCharacterSet").isJsonNull()) {
        DBEngineVersionDefaultCharacterSet.validateJsonElement(jsonObj.get("DefaultCharacterSet"));
      }
      // validate the optional field `SupportedCharacterSets`
      if (jsonObj.get("SupportedCharacterSets") != null && !jsonObj.get("SupportedCharacterSets").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SupportedCharacterSets"));
      }
      // validate the optional field `ValidUpgradeTarget`
      if (jsonObj.get("ValidUpgradeTarget") != null && !jsonObj.get("ValidUpgradeTarget").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ValidUpgradeTarget"));
      }
      // validate the optional field `SupportedTimezones`
      if (jsonObj.get("SupportedTimezones") != null && !jsonObj.get("SupportedTimezones").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SupportedTimezones"));
      }
      // validate the optional field `ExportableLogTypes`
      if (jsonObj.get("ExportableLogTypes") != null && !jsonObj.get("ExportableLogTypes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ExportableLogTypes"));
      }
      // validate the optional field `SupportsLogExportsToCloudwatchLogs`
      if (jsonObj.get("SupportsLogExportsToCloudwatchLogs") != null && !jsonObj.get("SupportsLogExportsToCloudwatchLogs").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("SupportsLogExportsToCloudwatchLogs"));
      }
      // validate the optional field `SupportsReadReplica`
      if (jsonObj.get("SupportsReadReplica") != null && !jsonObj.get("SupportsReadReplica").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("SupportsReadReplica"));
      }
      // validate the optional field `SupportsGlobalDatabases`
      if (jsonObj.get("SupportsGlobalDatabases") != null && !jsonObj.get("SupportsGlobalDatabases").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("SupportsGlobalDatabases"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DBEngineVersionListInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DBEngineVersionListInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DBEngineVersionListInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DBEngineVersionListInner.class));

       return (TypeAdapter<T>) new TypeAdapter<DBEngineVersionListInner>() {
           @Override
           public void write(JsonWriter out, DBEngineVersionListInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DBEngineVersionListInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DBEngineVersionListInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DBEngineVersionListInner
   * @throws IOException if the JSON string is invalid with respect to DBEngineVersionListInner
   */
  public static DBEngineVersionListInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DBEngineVersionListInner.class);
  }

  /**
   * Convert an instance of DBEngineVersionListInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

