/*
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ServerlessV2ScalingConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateDBClusterMessage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:52.008602-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateDBClusterMessage {
  public static final String SERIALIZED_NAME_AVAILABILITY_ZONES = "AvailabilityZones";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONES)
  private List availabilityZones;

  public static final String SERIALIZED_NAME_BACKUP_RETENTION_PERIOD = "BackupRetentionPeriod";
  @SerializedName(SERIALIZED_NAME_BACKUP_RETENTION_PERIOD)
  private Integer backupRetentionPeriod;

  public static final String SERIALIZED_NAME_CHARACTER_SET_NAME = "CharacterSetName";
  @SerializedName(SERIALIZED_NAME_CHARACTER_SET_NAME)
  private String characterSetName;

  public static final String SERIALIZED_NAME_COPY_TAGS_TO_SNAPSHOT = "CopyTagsToSnapshot";
  @SerializedName(SERIALIZED_NAME_COPY_TAGS_TO_SNAPSHOT)
  private Boolean copyTagsToSnapshot;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "DatabaseName";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  public static final String SERIALIZED_NAME_DB_CLUSTER_IDENTIFIER = "DBClusterIdentifier";
  @SerializedName(SERIALIZED_NAME_DB_CLUSTER_IDENTIFIER)
  private String dbClusterIdentifier;

  public static final String SERIALIZED_NAME_DB_CLUSTER_PARAMETER_GROUP_NAME = "DBClusterParameterGroupName";
  @SerializedName(SERIALIZED_NAME_DB_CLUSTER_PARAMETER_GROUP_NAME)
  private String dbClusterParameterGroupName;

  public static final String SERIALIZED_NAME_VPC_SECURITY_GROUP_IDS = "VpcSecurityGroupIds";
  @SerializedName(SERIALIZED_NAME_VPC_SECURITY_GROUP_IDS)
  private List vpcSecurityGroupIds;

  public static final String SERIALIZED_NAME_DB_SUBNET_GROUP_NAME = "DBSubnetGroupName";
  @SerializedName(SERIALIZED_NAME_DB_SUBNET_GROUP_NAME)
  private String dbSubnetGroupName;

  public static final String SERIALIZED_NAME_ENGINE = "Engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private String engine;

  public static final String SERIALIZED_NAME_ENGINE_VERSION = "EngineVersion";
  @SerializedName(SERIALIZED_NAME_ENGINE_VERSION)
  private String engineVersion;

  public static final String SERIALIZED_NAME_PORT = "Port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_MASTER_USERNAME = "MasterUsername";
  @SerializedName(SERIALIZED_NAME_MASTER_USERNAME)
  private String masterUsername;

  public static final String SERIALIZED_NAME_MASTER_USER_PASSWORD = "MasterUserPassword";
  @SerializedName(SERIALIZED_NAME_MASTER_USER_PASSWORD)
  private String masterUserPassword;

  public static final String SERIALIZED_NAME_OPTION_GROUP_NAME = "OptionGroupName";
  @SerializedName(SERIALIZED_NAME_OPTION_GROUP_NAME)
  private String optionGroupName;

  public static final String SERIALIZED_NAME_PREFERRED_BACKUP_WINDOW = "PreferredBackupWindow";
  @SerializedName(SERIALIZED_NAME_PREFERRED_BACKUP_WINDOW)
  private String preferredBackupWindow;

  public static final String SERIALIZED_NAME_PREFERRED_MAINTENANCE_WINDOW = "PreferredMaintenanceWindow";
  @SerializedName(SERIALIZED_NAME_PREFERRED_MAINTENANCE_WINDOW)
  private String preferredMaintenanceWindow;

  public static final String SERIALIZED_NAME_REPLICATION_SOURCE_IDENTIFIER = "ReplicationSourceIdentifier";
  @SerializedName(SERIALIZED_NAME_REPLICATION_SOURCE_IDENTIFIER)
  private String replicationSourceIdentifier;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_STORAGE_ENCRYPTED = "StorageEncrypted";
  @SerializedName(SERIALIZED_NAME_STORAGE_ENCRYPTED)
  private Boolean storageEncrypted;

  public static final String SERIALIZED_NAME_KMS_KEY_ID = "KmsKeyId";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_ID)
  private String kmsKeyId;

  public static final String SERIALIZED_NAME_PRE_SIGNED_URL = "PreSignedUrl";
  @SerializedName(SERIALIZED_NAME_PRE_SIGNED_URL)
  private String preSignedUrl;

  public static final String SERIALIZED_NAME_ENABLE_I_A_M_DATABASE_AUTHENTICATION = "EnableIAMDatabaseAuthentication";
  @SerializedName(SERIALIZED_NAME_ENABLE_I_A_M_DATABASE_AUTHENTICATION)
  private Boolean enableIAMDatabaseAuthentication;

  public static final String SERIALIZED_NAME_ENABLE_CLOUDWATCH_LOGS_EXPORTS = "EnableCloudwatchLogsExports";
  @SerializedName(SERIALIZED_NAME_ENABLE_CLOUDWATCH_LOGS_EXPORTS)
  private List enableCloudwatchLogsExports;

  public static final String SERIALIZED_NAME_DELETION_PROTECTION = "DeletionProtection";
  @SerializedName(SERIALIZED_NAME_DELETION_PROTECTION)
  private Boolean deletionProtection;

  public static final String SERIALIZED_NAME_SERVERLESS_V2_SCALING_CONFIGURATION = "ServerlessV2ScalingConfiguration";
  @SerializedName(SERIALIZED_NAME_SERVERLESS_V2_SCALING_CONFIGURATION)
  private ServerlessV2ScalingConfiguration serverlessV2ScalingConfiguration;

  public static final String SERIALIZED_NAME_GLOBAL_CLUSTER_IDENTIFIER = "GlobalClusterIdentifier";
  @SerializedName(SERIALIZED_NAME_GLOBAL_CLUSTER_IDENTIFIER)
  private String globalClusterIdentifier;

  public CreateDBClusterMessage() {
  }

  public CreateDBClusterMessage availabilityZones(List availabilityZones) {
    this.availabilityZones = availabilityZones;
    return this;
  }

  /**
   * Get availabilityZones
   * @return availabilityZones
   */
  @javax.annotation.Nullable
  public List getAvailabilityZones() {
    return availabilityZones;
  }

  public void setAvailabilityZones(List availabilityZones) {
    this.availabilityZones = availabilityZones;
  }


  public CreateDBClusterMessage backupRetentionPeriod(Integer backupRetentionPeriod) {
    this.backupRetentionPeriod = backupRetentionPeriod;
    return this;
  }

  /**
   * Get backupRetentionPeriod
   * @return backupRetentionPeriod
   */
  @javax.annotation.Nullable
  public Integer getBackupRetentionPeriod() {
    return backupRetentionPeriod;
  }

  public void setBackupRetentionPeriod(Integer backupRetentionPeriod) {
    this.backupRetentionPeriod = backupRetentionPeriod;
  }


  public CreateDBClusterMessage characterSetName(String characterSetName) {
    this.characterSetName = characterSetName;
    return this;
  }

  /**
   * Get characterSetName
   * @return characterSetName
   */
  @javax.annotation.Nullable
  public String getCharacterSetName() {
    return characterSetName;
  }

  public void setCharacterSetName(String characterSetName) {
    this.characterSetName = characterSetName;
  }


  public CreateDBClusterMessage copyTagsToSnapshot(Boolean copyTagsToSnapshot) {
    this.copyTagsToSnapshot = copyTagsToSnapshot;
    return this;
  }

  /**
   * Get copyTagsToSnapshot
   * @return copyTagsToSnapshot
   */
  @javax.annotation.Nullable
  public Boolean getCopyTagsToSnapshot() {
    return copyTagsToSnapshot;
  }

  public void setCopyTagsToSnapshot(Boolean copyTagsToSnapshot) {
    this.copyTagsToSnapshot = copyTagsToSnapshot;
  }


  public CreateDBClusterMessage databaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

  /**
   * Get databaseName
   * @return databaseName
   */
  @javax.annotation.Nullable
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }


  public CreateDBClusterMessage dbClusterIdentifier(String dbClusterIdentifier) {
    this.dbClusterIdentifier = dbClusterIdentifier;
    return this;
  }

  /**
   * Get dbClusterIdentifier
   * @return dbClusterIdentifier
   */
  @javax.annotation.Nonnull
  public String getDbClusterIdentifier() {
    return dbClusterIdentifier;
  }

  public void setDbClusterIdentifier(String dbClusterIdentifier) {
    this.dbClusterIdentifier = dbClusterIdentifier;
  }


  public CreateDBClusterMessage dbClusterParameterGroupName(String dbClusterParameterGroupName) {
    this.dbClusterParameterGroupName = dbClusterParameterGroupName;
    return this;
  }

  /**
   * Get dbClusterParameterGroupName
   * @return dbClusterParameterGroupName
   */
  @javax.annotation.Nullable
  public String getDbClusterParameterGroupName() {
    return dbClusterParameterGroupName;
  }

  public void setDbClusterParameterGroupName(String dbClusterParameterGroupName) {
    this.dbClusterParameterGroupName = dbClusterParameterGroupName;
  }


  public CreateDBClusterMessage vpcSecurityGroupIds(List vpcSecurityGroupIds) {
    this.vpcSecurityGroupIds = vpcSecurityGroupIds;
    return this;
  }

  /**
   * Get vpcSecurityGroupIds
   * @return vpcSecurityGroupIds
   */
  @javax.annotation.Nullable
  public List getVpcSecurityGroupIds() {
    return vpcSecurityGroupIds;
  }

  public void setVpcSecurityGroupIds(List vpcSecurityGroupIds) {
    this.vpcSecurityGroupIds = vpcSecurityGroupIds;
  }


  public CreateDBClusterMessage dbSubnetGroupName(String dbSubnetGroupName) {
    this.dbSubnetGroupName = dbSubnetGroupName;
    return this;
  }

  /**
   * Get dbSubnetGroupName
   * @return dbSubnetGroupName
   */
  @javax.annotation.Nullable
  public String getDbSubnetGroupName() {
    return dbSubnetGroupName;
  }

  public void setDbSubnetGroupName(String dbSubnetGroupName) {
    this.dbSubnetGroupName = dbSubnetGroupName;
  }


  public CreateDBClusterMessage engine(String engine) {
    this.engine = engine;
    return this;
  }

  /**
   * Get engine
   * @return engine
   */
  @javax.annotation.Nonnull
  public String getEngine() {
    return engine;
  }

  public void setEngine(String engine) {
    this.engine = engine;
  }


  public CreateDBClusterMessage engineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
    return this;
  }

  /**
   * Get engineVersion
   * @return engineVersion
   */
  @javax.annotation.Nullable
  public String getEngineVersion() {
    return engineVersion;
  }

  public void setEngineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
  }


  public CreateDBClusterMessage port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public CreateDBClusterMessage masterUsername(String masterUsername) {
    this.masterUsername = masterUsername;
    return this;
  }

  /**
   * Get masterUsername
   * @return masterUsername
   */
  @javax.annotation.Nullable
  public String getMasterUsername() {
    return masterUsername;
  }

  public void setMasterUsername(String masterUsername) {
    this.masterUsername = masterUsername;
  }


  public CreateDBClusterMessage masterUserPassword(String masterUserPassword) {
    this.masterUserPassword = masterUserPassword;
    return this;
  }

  /**
   * Get masterUserPassword
   * @return masterUserPassword
   */
  @javax.annotation.Nullable
  public String getMasterUserPassword() {
    return masterUserPassword;
  }

  public void setMasterUserPassword(String masterUserPassword) {
    this.masterUserPassword = masterUserPassword;
  }


  public CreateDBClusterMessage optionGroupName(String optionGroupName) {
    this.optionGroupName = optionGroupName;
    return this;
  }

  /**
   * Get optionGroupName
   * @return optionGroupName
   */
  @javax.annotation.Nullable
  public String getOptionGroupName() {
    return optionGroupName;
  }

  public void setOptionGroupName(String optionGroupName) {
    this.optionGroupName = optionGroupName;
  }


  public CreateDBClusterMessage preferredBackupWindow(String preferredBackupWindow) {
    this.preferredBackupWindow = preferredBackupWindow;
    return this;
  }

  /**
   * Get preferredBackupWindow
   * @return preferredBackupWindow
   */
  @javax.annotation.Nullable
  public String getPreferredBackupWindow() {
    return preferredBackupWindow;
  }

  public void setPreferredBackupWindow(String preferredBackupWindow) {
    this.preferredBackupWindow = preferredBackupWindow;
  }


  public CreateDBClusterMessage preferredMaintenanceWindow(String preferredMaintenanceWindow) {
    this.preferredMaintenanceWindow = preferredMaintenanceWindow;
    return this;
  }

  /**
   * Get preferredMaintenanceWindow
   * @return preferredMaintenanceWindow
   */
  @javax.annotation.Nullable
  public String getPreferredMaintenanceWindow() {
    return preferredMaintenanceWindow;
  }

  public void setPreferredMaintenanceWindow(String preferredMaintenanceWindow) {
    this.preferredMaintenanceWindow = preferredMaintenanceWindow;
  }


  public CreateDBClusterMessage replicationSourceIdentifier(String replicationSourceIdentifier) {
    this.replicationSourceIdentifier = replicationSourceIdentifier;
    return this;
  }

  /**
   * Get replicationSourceIdentifier
   * @return replicationSourceIdentifier
   */
  @javax.annotation.Nullable
  public String getReplicationSourceIdentifier() {
    return replicationSourceIdentifier;
  }

  public void setReplicationSourceIdentifier(String replicationSourceIdentifier) {
    this.replicationSourceIdentifier = replicationSourceIdentifier;
  }


  public CreateDBClusterMessage tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public CreateDBClusterMessage storageEncrypted(Boolean storageEncrypted) {
    this.storageEncrypted = storageEncrypted;
    return this;
  }

  /**
   * Get storageEncrypted
   * @return storageEncrypted
   */
  @javax.annotation.Nullable
  public Boolean getStorageEncrypted() {
    return storageEncrypted;
  }

  public void setStorageEncrypted(Boolean storageEncrypted) {
    this.storageEncrypted = storageEncrypted;
  }


  public CreateDBClusterMessage kmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
    return this;
  }

  /**
   * Get kmsKeyId
   * @return kmsKeyId
   */
  @javax.annotation.Nullable
  public String getKmsKeyId() {
    return kmsKeyId;
  }

  public void setKmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
  }


  public CreateDBClusterMessage preSignedUrl(String preSignedUrl) {
    this.preSignedUrl = preSignedUrl;
    return this;
  }

  /**
   * Get preSignedUrl
   * @return preSignedUrl
   */
  @javax.annotation.Nullable
  public String getPreSignedUrl() {
    return preSignedUrl;
  }

  public void setPreSignedUrl(String preSignedUrl) {
    this.preSignedUrl = preSignedUrl;
  }


  public CreateDBClusterMessage enableIAMDatabaseAuthentication(Boolean enableIAMDatabaseAuthentication) {
    this.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication;
    return this;
  }

  /**
   * Get enableIAMDatabaseAuthentication
   * @return enableIAMDatabaseAuthentication
   */
  @javax.annotation.Nullable
  public Boolean getEnableIAMDatabaseAuthentication() {
    return enableIAMDatabaseAuthentication;
  }

  public void setEnableIAMDatabaseAuthentication(Boolean enableIAMDatabaseAuthentication) {
    this.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication;
  }


  public CreateDBClusterMessage enableCloudwatchLogsExports(List enableCloudwatchLogsExports) {
    this.enableCloudwatchLogsExports = enableCloudwatchLogsExports;
    return this;
  }

  /**
   * Get enableCloudwatchLogsExports
   * @return enableCloudwatchLogsExports
   */
  @javax.annotation.Nullable
  public List getEnableCloudwatchLogsExports() {
    return enableCloudwatchLogsExports;
  }

  public void setEnableCloudwatchLogsExports(List enableCloudwatchLogsExports) {
    this.enableCloudwatchLogsExports = enableCloudwatchLogsExports;
  }


  public CreateDBClusterMessage deletionProtection(Boolean deletionProtection) {
    this.deletionProtection = deletionProtection;
    return this;
  }

  /**
   * Get deletionProtection
   * @return deletionProtection
   */
  @javax.annotation.Nullable
  public Boolean getDeletionProtection() {
    return deletionProtection;
  }

  public void setDeletionProtection(Boolean deletionProtection) {
    this.deletionProtection = deletionProtection;
  }


  public CreateDBClusterMessage serverlessV2ScalingConfiguration(ServerlessV2ScalingConfiguration serverlessV2ScalingConfiguration) {
    this.serverlessV2ScalingConfiguration = serverlessV2ScalingConfiguration;
    return this;
  }

  /**
   * Get serverlessV2ScalingConfiguration
   * @return serverlessV2ScalingConfiguration
   */
  @javax.annotation.Nullable
  public ServerlessV2ScalingConfiguration getServerlessV2ScalingConfiguration() {
    return serverlessV2ScalingConfiguration;
  }

  public void setServerlessV2ScalingConfiguration(ServerlessV2ScalingConfiguration serverlessV2ScalingConfiguration) {
    this.serverlessV2ScalingConfiguration = serverlessV2ScalingConfiguration;
  }


  public CreateDBClusterMessage globalClusterIdentifier(String globalClusterIdentifier) {
    this.globalClusterIdentifier = globalClusterIdentifier;
    return this;
  }

  /**
   * Get globalClusterIdentifier
   * @return globalClusterIdentifier
   */
  @javax.annotation.Nullable
  public String getGlobalClusterIdentifier() {
    return globalClusterIdentifier;
  }

  public void setGlobalClusterIdentifier(String globalClusterIdentifier) {
    this.globalClusterIdentifier = globalClusterIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDBClusterMessage createDBClusterMessage = (CreateDBClusterMessage) o;
    return Objects.equals(this.availabilityZones, createDBClusterMessage.availabilityZones) &&
        Objects.equals(this.backupRetentionPeriod, createDBClusterMessage.backupRetentionPeriod) &&
        Objects.equals(this.characterSetName, createDBClusterMessage.characterSetName) &&
        Objects.equals(this.copyTagsToSnapshot, createDBClusterMessage.copyTagsToSnapshot) &&
        Objects.equals(this.databaseName, createDBClusterMessage.databaseName) &&
        Objects.equals(this.dbClusterIdentifier, createDBClusterMessage.dbClusterIdentifier) &&
        Objects.equals(this.dbClusterParameterGroupName, createDBClusterMessage.dbClusterParameterGroupName) &&
        Objects.equals(this.vpcSecurityGroupIds, createDBClusterMessage.vpcSecurityGroupIds) &&
        Objects.equals(this.dbSubnetGroupName, createDBClusterMessage.dbSubnetGroupName) &&
        Objects.equals(this.engine, createDBClusterMessage.engine) &&
        Objects.equals(this.engineVersion, createDBClusterMessage.engineVersion) &&
        Objects.equals(this.port, createDBClusterMessage.port) &&
        Objects.equals(this.masterUsername, createDBClusterMessage.masterUsername) &&
        Objects.equals(this.masterUserPassword, createDBClusterMessage.masterUserPassword) &&
        Objects.equals(this.optionGroupName, createDBClusterMessage.optionGroupName) &&
        Objects.equals(this.preferredBackupWindow, createDBClusterMessage.preferredBackupWindow) &&
        Objects.equals(this.preferredMaintenanceWindow, createDBClusterMessage.preferredMaintenanceWindow) &&
        Objects.equals(this.replicationSourceIdentifier, createDBClusterMessage.replicationSourceIdentifier) &&
        Objects.equals(this.tags, createDBClusterMessage.tags) &&
        Objects.equals(this.storageEncrypted, createDBClusterMessage.storageEncrypted) &&
        Objects.equals(this.kmsKeyId, createDBClusterMessage.kmsKeyId) &&
        Objects.equals(this.preSignedUrl, createDBClusterMessage.preSignedUrl) &&
        Objects.equals(this.enableIAMDatabaseAuthentication, createDBClusterMessage.enableIAMDatabaseAuthentication) &&
        Objects.equals(this.enableCloudwatchLogsExports, createDBClusterMessage.enableCloudwatchLogsExports) &&
        Objects.equals(this.deletionProtection, createDBClusterMessage.deletionProtection) &&
        Objects.equals(this.serverlessV2ScalingConfiguration, createDBClusterMessage.serverlessV2ScalingConfiguration) &&
        Objects.equals(this.globalClusterIdentifier, createDBClusterMessage.globalClusterIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availabilityZones, backupRetentionPeriod, characterSetName, copyTagsToSnapshot, databaseName, dbClusterIdentifier, dbClusterParameterGroupName, vpcSecurityGroupIds, dbSubnetGroupName, engine, engineVersion, port, masterUsername, masterUserPassword, optionGroupName, preferredBackupWindow, preferredMaintenanceWindow, replicationSourceIdentifier, tags, storageEncrypted, kmsKeyId, preSignedUrl, enableIAMDatabaseAuthentication, enableCloudwatchLogsExports, deletionProtection, serverlessV2ScalingConfiguration, globalClusterIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDBClusterMessage {\n");
    sb.append("    availabilityZones: ").append(toIndentedString(availabilityZones)).append("\n");
    sb.append("    backupRetentionPeriod: ").append(toIndentedString(backupRetentionPeriod)).append("\n");
    sb.append("    characterSetName: ").append(toIndentedString(characterSetName)).append("\n");
    sb.append("    copyTagsToSnapshot: ").append(toIndentedString(copyTagsToSnapshot)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    dbClusterIdentifier: ").append(toIndentedString(dbClusterIdentifier)).append("\n");
    sb.append("    dbClusterParameterGroupName: ").append(toIndentedString(dbClusterParameterGroupName)).append("\n");
    sb.append("    vpcSecurityGroupIds: ").append(toIndentedString(vpcSecurityGroupIds)).append("\n");
    sb.append("    dbSubnetGroupName: ").append(toIndentedString(dbSubnetGroupName)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    engineVersion: ").append(toIndentedString(engineVersion)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    masterUsername: ").append(toIndentedString(masterUsername)).append("\n");
    sb.append("    masterUserPassword: ").append(toIndentedString(masterUserPassword)).append("\n");
    sb.append("    optionGroupName: ").append(toIndentedString(optionGroupName)).append("\n");
    sb.append("    preferredBackupWindow: ").append(toIndentedString(preferredBackupWindow)).append("\n");
    sb.append("    preferredMaintenanceWindow: ").append(toIndentedString(preferredMaintenanceWindow)).append("\n");
    sb.append("    replicationSourceIdentifier: ").append(toIndentedString(replicationSourceIdentifier)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    storageEncrypted: ").append(toIndentedString(storageEncrypted)).append("\n");
    sb.append("    kmsKeyId: ").append(toIndentedString(kmsKeyId)).append("\n");
    sb.append("    preSignedUrl: ").append(toIndentedString(preSignedUrl)).append("\n");
    sb.append("    enableIAMDatabaseAuthentication: ").append(toIndentedString(enableIAMDatabaseAuthentication)).append("\n");
    sb.append("    enableCloudwatchLogsExports: ").append(toIndentedString(enableCloudwatchLogsExports)).append("\n");
    sb.append("    deletionProtection: ").append(toIndentedString(deletionProtection)).append("\n");
    sb.append("    serverlessV2ScalingConfiguration: ").append(toIndentedString(serverlessV2ScalingConfiguration)).append("\n");
    sb.append("    globalClusterIdentifier: ").append(toIndentedString(globalClusterIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AvailabilityZones");
    openapiFields.add("BackupRetentionPeriod");
    openapiFields.add("CharacterSetName");
    openapiFields.add("CopyTagsToSnapshot");
    openapiFields.add("DatabaseName");
    openapiFields.add("DBClusterIdentifier");
    openapiFields.add("DBClusterParameterGroupName");
    openapiFields.add("VpcSecurityGroupIds");
    openapiFields.add("DBSubnetGroupName");
    openapiFields.add("Engine");
    openapiFields.add("EngineVersion");
    openapiFields.add("Port");
    openapiFields.add("MasterUsername");
    openapiFields.add("MasterUserPassword");
    openapiFields.add("OptionGroupName");
    openapiFields.add("PreferredBackupWindow");
    openapiFields.add("PreferredMaintenanceWindow");
    openapiFields.add("ReplicationSourceIdentifier");
    openapiFields.add("Tags");
    openapiFields.add("StorageEncrypted");
    openapiFields.add("KmsKeyId");
    openapiFields.add("PreSignedUrl");
    openapiFields.add("EnableIAMDatabaseAuthentication");
    openapiFields.add("EnableCloudwatchLogsExports");
    openapiFields.add("DeletionProtection");
    openapiFields.add("ServerlessV2ScalingConfiguration");
    openapiFields.add("GlobalClusterIdentifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DBClusterIdentifier");
    openapiRequiredFields.add("Engine");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDBClusterMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDBClusterMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDBClusterMessage is not found in the empty JSON string", CreateDBClusterMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDBClusterMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDBClusterMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateDBClusterMessage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AvailabilityZones`
      if (jsonObj.get("AvailabilityZones") != null && !jsonObj.get("AvailabilityZones").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AvailabilityZones"));
      }
      // validate the optional field `BackupRetentionPeriod`
      if (jsonObj.get("BackupRetentionPeriod") != null && !jsonObj.get("BackupRetentionPeriod").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("BackupRetentionPeriod"));
      }
      // validate the optional field `CharacterSetName`
      if (jsonObj.get("CharacterSetName") != null && !jsonObj.get("CharacterSetName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CharacterSetName"));
      }
      // validate the optional field `CopyTagsToSnapshot`
      if (jsonObj.get("CopyTagsToSnapshot") != null && !jsonObj.get("CopyTagsToSnapshot").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CopyTagsToSnapshot"));
      }
      // validate the optional field `DatabaseName`
      if (jsonObj.get("DatabaseName") != null && !jsonObj.get("DatabaseName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DatabaseName"));
      }
      // validate the required field `DBClusterIdentifier`
      String.validateJsonElement(jsonObj.get("DBClusterIdentifier"));
      // validate the optional field `DBClusterParameterGroupName`
      if (jsonObj.get("DBClusterParameterGroupName") != null && !jsonObj.get("DBClusterParameterGroupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DBClusterParameterGroupName"));
      }
      // validate the optional field `VpcSecurityGroupIds`
      if (jsonObj.get("VpcSecurityGroupIds") != null && !jsonObj.get("VpcSecurityGroupIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("VpcSecurityGroupIds"));
      }
      // validate the optional field `DBSubnetGroupName`
      if (jsonObj.get("DBSubnetGroupName") != null && !jsonObj.get("DBSubnetGroupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DBSubnetGroupName"));
      }
      // validate the required field `Engine`
      String.validateJsonElement(jsonObj.get("Engine"));
      // validate the optional field `EngineVersion`
      if (jsonObj.get("EngineVersion") != null && !jsonObj.get("EngineVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EngineVersion"));
      }
      // validate the optional field `Port`
      if (jsonObj.get("Port") != null && !jsonObj.get("Port").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Port"));
      }
      // validate the optional field `MasterUsername`
      if (jsonObj.get("MasterUsername") != null && !jsonObj.get("MasterUsername").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MasterUsername"));
      }
      // validate the optional field `MasterUserPassword`
      if (jsonObj.get("MasterUserPassword") != null && !jsonObj.get("MasterUserPassword").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MasterUserPassword"));
      }
      // validate the optional field `OptionGroupName`
      if (jsonObj.get("OptionGroupName") != null && !jsonObj.get("OptionGroupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OptionGroupName"));
      }
      // validate the optional field `PreferredBackupWindow`
      if (jsonObj.get("PreferredBackupWindow") != null && !jsonObj.get("PreferredBackupWindow").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PreferredBackupWindow"));
      }
      // validate the optional field `PreferredMaintenanceWindow`
      if (jsonObj.get("PreferredMaintenanceWindow") != null && !jsonObj.get("PreferredMaintenanceWindow").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PreferredMaintenanceWindow"));
      }
      // validate the optional field `ReplicationSourceIdentifier`
      if (jsonObj.get("ReplicationSourceIdentifier") != null && !jsonObj.get("ReplicationSourceIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReplicationSourceIdentifier"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `StorageEncrypted`
      if (jsonObj.get("StorageEncrypted") != null && !jsonObj.get("StorageEncrypted").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("StorageEncrypted"));
      }
      // validate the optional field `KmsKeyId`
      if (jsonObj.get("KmsKeyId") != null && !jsonObj.get("KmsKeyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("KmsKeyId"));
      }
      // validate the optional field `PreSignedUrl`
      if (jsonObj.get("PreSignedUrl") != null && !jsonObj.get("PreSignedUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PreSignedUrl"));
      }
      // validate the optional field `EnableIAMDatabaseAuthentication`
      if (jsonObj.get("EnableIAMDatabaseAuthentication") != null && !jsonObj.get("EnableIAMDatabaseAuthentication").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("EnableIAMDatabaseAuthentication"));
      }
      // validate the optional field `EnableCloudwatchLogsExports`
      if (jsonObj.get("EnableCloudwatchLogsExports") != null && !jsonObj.get("EnableCloudwatchLogsExports").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("EnableCloudwatchLogsExports"));
      }
      // validate the optional field `DeletionProtection`
      if (jsonObj.get("DeletionProtection") != null && !jsonObj.get("DeletionProtection").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DeletionProtection"));
      }
      // validate the optional field `ServerlessV2ScalingConfiguration`
      if (jsonObj.get("ServerlessV2ScalingConfiguration") != null && !jsonObj.get("ServerlessV2ScalingConfiguration").isJsonNull()) {
        ServerlessV2ScalingConfiguration.validateJsonElement(jsonObj.get("ServerlessV2ScalingConfiguration"));
      }
      // validate the optional field `GlobalClusterIdentifier`
      if (jsonObj.get("GlobalClusterIdentifier") != null && !jsonObj.get("GlobalClusterIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GlobalClusterIdentifier"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDBClusterMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDBClusterMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDBClusterMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDBClusterMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDBClusterMessage>() {
           @Override
           public void write(JsonWriter out, CreateDBClusterMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDBClusterMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDBClusterMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDBClusterMessage
   * @throws IOException if the JSON string is invalid with respect to CreateDBClusterMessage
   */
  public static CreateDBClusterMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDBClusterMessage.class);
  }

  /**
   * Convert an instance of CreateDBClusterMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

