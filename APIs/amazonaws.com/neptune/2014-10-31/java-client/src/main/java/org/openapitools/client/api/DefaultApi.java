/*
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddRoleToDBClusterMessage;
import org.openapitools.client.model.AddSourceIdentifierToSubscriptionMessage;
import org.openapitools.client.model.AddSourceIdentifierToSubscriptionResult;
import org.openapitools.client.model.AddTagsToResourceMessage;
import org.openapitools.client.model.ApplyPendingMaintenanceActionMessage;
import org.openapitools.client.model.ApplyPendingMaintenanceActionResult;
import org.openapitools.client.model.CopyDBClusterParameterGroupMessage;
import org.openapitools.client.model.CopyDBClusterParameterGroupResult;
import org.openapitools.client.model.CopyDBClusterSnapshotMessage;
import org.openapitools.client.model.CopyDBClusterSnapshotResult;
import org.openapitools.client.model.CopyDBParameterGroupMessage;
import org.openapitools.client.model.CopyDBParameterGroupResult;
import org.openapitools.client.model.CreateDBClusterEndpointMessage;
import org.openapitools.client.model.CreateDBClusterEndpointOutput;
import org.openapitools.client.model.CreateDBClusterMessage;
import org.openapitools.client.model.CreateDBClusterParameterGroupMessage;
import org.openapitools.client.model.CreateDBClusterParameterGroupResult;
import org.openapitools.client.model.CreateDBClusterResult;
import org.openapitools.client.model.CreateDBClusterSnapshotMessage;
import org.openapitools.client.model.CreateDBClusterSnapshotResult;
import org.openapitools.client.model.CreateDBInstanceMessage;
import org.openapitools.client.model.CreateDBInstanceResult;
import org.openapitools.client.model.CreateDBParameterGroupMessage;
import org.openapitools.client.model.CreateDBParameterGroupResult;
import org.openapitools.client.model.CreateDBSubnetGroupMessage;
import org.openapitools.client.model.CreateDBSubnetGroupResult;
import org.openapitools.client.model.CreateEventSubscriptionMessage;
import org.openapitools.client.model.CreateEventSubscriptionResult;
import org.openapitools.client.model.CreateGlobalClusterMessage;
import org.openapitools.client.model.CreateGlobalClusterResult;
import org.openapitools.client.model.DBClusterEndpointMessage;
import org.openapitools.client.model.DBClusterMessage;
import org.openapitools.client.model.DBClusterParameterGroupDetails;
import org.openapitools.client.model.DBClusterParameterGroupNameMessage;
import org.openapitools.client.model.DBClusterParameterGroupsMessage;
import org.openapitools.client.model.DBClusterSnapshotMessage;
import org.openapitools.client.model.DBEngineVersionMessage;
import org.openapitools.client.model.DBInstanceMessage;
import org.openapitools.client.model.DBParameterGroupDetails;
import org.openapitools.client.model.DBParameterGroupNameMessage;
import org.openapitools.client.model.DBParameterGroupsMessage;
import org.openapitools.client.model.DBSubnetGroupMessage;
import org.openapitools.client.model.DeleteDBClusterEndpointMessage;
import org.openapitools.client.model.DeleteDBClusterEndpointOutput;
import org.openapitools.client.model.DeleteDBClusterMessage;
import org.openapitools.client.model.DeleteDBClusterParameterGroupMessage;
import org.openapitools.client.model.DeleteDBClusterResult;
import org.openapitools.client.model.DeleteDBClusterSnapshotMessage;
import org.openapitools.client.model.DeleteDBClusterSnapshotResult;
import org.openapitools.client.model.DeleteDBInstanceMessage;
import org.openapitools.client.model.DeleteDBInstanceResult;
import org.openapitools.client.model.DeleteDBParameterGroupMessage;
import org.openapitools.client.model.DeleteDBSubnetGroupMessage;
import org.openapitools.client.model.DeleteEventSubscriptionMessage;
import org.openapitools.client.model.DeleteEventSubscriptionResult;
import org.openapitools.client.model.DeleteGlobalClusterMessage;
import org.openapitools.client.model.DeleteGlobalClusterResult;
import org.openapitools.client.model.DescribeDBClusterEndpointsMessage;
import org.openapitools.client.model.DescribeDBClusterParameterGroupsMessage;
import org.openapitools.client.model.DescribeDBClusterParametersMessage;
import org.openapitools.client.model.DescribeDBClusterSnapshotAttributesMessage;
import org.openapitools.client.model.DescribeDBClusterSnapshotAttributesResult;
import org.openapitools.client.model.DescribeDBClusterSnapshotsMessage;
import org.openapitools.client.model.DescribeDBClustersMessage;
import org.openapitools.client.model.DescribeDBEngineVersionsMessage;
import org.openapitools.client.model.DescribeDBInstancesMessage;
import org.openapitools.client.model.DescribeDBParameterGroupsMessage;
import org.openapitools.client.model.DescribeDBParametersMessage;
import org.openapitools.client.model.DescribeDBSubnetGroupsMessage;
import org.openapitools.client.model.DescribeEngineDefaultClusterParametersMessage;
import org.openapitools.client.model.DescribeEngineDefaultClusterParametersResult;
import org.openapitools.client.model.DescribeEngineDefaultParametersMessage;
import org.openapitools.client.model.DescribeEngineDefaultParametersResult;
import org.openapitools.client.model.DescribeEventCategoriesMessage;
import org.openapitools.client.model.DescribeEventSubscriptionsMessage;
import org.openapitools.client.model.DescribeEventsMessage;
import org.openapitools.client.model.DescribeGlobalClustersMessage;
import org.openapitools.client.model.DescribeOrderableDBInstanceOptionsMessage;
import org.openapitools.client.model.DescribePendingMaintenanceActionsMessage;
import org.openapitools.client.model.DescribeValidDBInstanceModificationsMessage;
import org.openapitools.client.model.DescribeValidDBInstanceModificationsResult;
import org.openapitools.client.model.EventCategoriesMessage;
import org.openapitools.client.model.EventSubscriptionsMessage;
import org.openapitools.client.model.EventsMessage;
import org.openapitools.client.model.FailoverDBClusterMessage;
import org.openapitools.client.model.FailoverDBClusterResult;
import org.openapitools.client.model.FailoverGlobalClusterMessage;
import org.openapitools.client.model.FailoverGlobalClusterResult;
import org.openapitools.client.model.GETAddTagsToResourceTagsParameterInner;
import org.openapitools.client.model.GETCreateDBClusterServerlessV2ScalingConfigurationParameter;
import org.openapitools.client.model.GETDescribeDBClusterEndpointsFiltersParameterInner;
import org.openapitools.client.model.GETModifyDBClusterCloudwatchLogsExportConfigurationParameter;
import org.openapitools.client.model.GETModifyDBClusterParameterGroupParametersParameterInner;
import org.openapitools.client.model.GlobalClustersMessage;
import org.openapitools.client.model.ListTagsForResourceMessage;
import org.openapitools.client.model.ModifyDBClusterEndpointMessage;
import org.openapitools.client.model.ModifyDBClusterEndpointOutput;
import org.openapitools.client.model.ModifyDBClusterMessage;
import org.openapitools.client.model.ModifyDBClusterParameterGroupMessage;
import org.openapitools.client.model.ModifyDBClusterResult;
import org.openapitools.client.model.ModifyDBClusterSnapshotAttributeMessage;
import org.openapitools.client.model.ModifyDBClusterSnapshotAttributeResult;
import org.openapitools.client.model.ModifyDBInstanceMessage;
import org.openapitools.client.model.ModifyDBInstanceResult;
import org.openapitools.client.model.ModifyDBParameterGroupMessage;
import org.openapitools.client.model.ModifyDBSubnetGroupMessage;
import org.openapitools.client.model.ModifyDBSubnetGroupResult;
import org.openapitools.client.model.ModifyEventSubscriptionMessage;
import org.openapitools.client.model.ModifyEventSubscriptionResult;
import org.openapitools.client.model.ModifyGlobalClusterMessage;
import org.openapitools.client.model.ModifyGlobalClusterResult;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OrderableDBInstanceOptionsMessage;
import org.openapitools.client.model.PendingMaintenanceActionsMessage;
import org.openapitools.client.model.PromoteReadReplicaDBClusterMessage;
import org.openapitools.client.model.PromoteReadReplicaDBClusterResult;
import org.openapitools.client.model.RebootDBInstanceMessage;
import org.openapitools.client.model.RebootDBInstanceResult;
import org.openapitools.client.model.RemoveFromGlobalClusterMessage;
import org.openapitools.client.model.RemoveFromGlobalClusterResult;
import org.openapitools.client.model.RemoveRoleFromDBClusterMessage;
import org.openapitools.client.model.RemoveSourceIdentifierFromSubscriptionMessage;
import org.openapitools.client.model.RemoveSourceIdentifierFromSubscriptionResult;
import org.openapitools.client.model.RemoveTagsFromResourceMessage;
import org.openapitools.client.model.ResetDBClusterParameterGroupMessage;
import org.openapitools.client.model.ResetDBParameterGroupMessage;
import org.openapitools.client.model.RestoreDBClusterFromSnapshotMessage;
import org.openapitools.client.model.RestoreDBClusterFromSnapshotResult;
import org.openapitools.client.model.RestoreDBClusterToPointInTimeMessage;
import org.openapitools.client.model.RestoreDBClusterToPointInTimeResult;
import org.openapitools.client.model.StartDBClusterMessage;
import org.openapitools.client.model.StartDBClusterResult;
import org.openapitools.client.model.StopDBClusterMessage;
import org.openapitools.client.model.StopDBClusterResult;
import org.openapitools.client.model.TagListMessage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for gETAddRoleToDBCluster
     * @param dbClusterIdentifier The name of the DB cluster to associate the IAM role with. (required)
     * @param roleArn The Amazon Resource Name (ARN) of the IAM role to associate with the Neptune DB cluster, for example &lt;code&gt;arn:aws:iam::123456789012:role/NeptuneAccessRole&lt;/code&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param featureName The name of the feature for the Neptune DB cluster that the IAM role is to be associated with. For the list of supported feature names, see &lt;a href&#x3D;\&quot;neptune/latest/userguide/api-other-apis.html#DBEngineVersion\&quot;&gt;DBEngineVersion&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterRoleAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterRoleQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAddRoleToDBClusterCall(String dbClusterIdentifier, String roleArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String featureName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=AddRoleToDBCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterIdentifier", dbClusterIdentifier));
        }

        if (roleArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RoleArn", roleArn));
        }

        if (featureName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FeatureName", featureName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETAddRoleToDBClusterValidateBeforeCall(String dbClusterIdentifier, String roleArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String featureName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterIdentifier' is set
        if (dbClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterIdentifier' when calling gETAddRoleToDBCluster(Async)");
        }

        // verify the required parameter 'roleArn' is set
        if (roleArn == null) {
            throw new ApiException("Missing the required parameter 'roleArn' when calling gETAddRoleToDBCluster(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETAddRoleToDBCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETAddRoleToDBCluster(Async)");
        }

        return gETAddRoleToDBClusterCall(dbClusterIdentifier, roleArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, featureName, _callback);

    }

    /**
     * 
     * Associates an Identity and Access Management (IAM) role with an Neptune DB cluster.
     * @param dbClusterIdentifier The name of the DB cluster to associate the IAM role with. (required)
     * @param roleArn The Amazon Resource Name (ARN) of the IAM role to associate with the Neptune DB cluster, for example &lt;code&gt;arn:aws:iam::123456789012:role/NeptuneAccessRole&lt;/code&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param featureName The name of the feature for the Neptune DB cluster that the IAM role is to be associated with. For the list of supported feature names, see &lt;a href&#x3D;\&quot;neptune/latest/userguide/api-other-apis.html#DBEngineVersion\&quot;&gt;DBEngineVersion&lt;/a&gt;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterRoleAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterRoleQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public void gETAddRoleToDBCluster(String dbClusterIdentifier, String roleArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String featureName) throws ApiException {
        gETAddRoleToDBClusterWithHttpInfo(dbClusterIdentifier, roleArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, featureName);
    }

    /**
     * 
     * Associates an Identity and Access Management (IAM) role with an Neptune DB cluster.
     * @param dbClusterIdentifier The name of the DB cluster to associate the IAM role with. (required)
     * @param roleArn The Amazon Resource Name (ARN) of the IAM role to associate with the Neptune DB cluster, for example &lt;code&gt;arn:aws:iam::123456789012:role/NeptuneAccessRole&lt;/code&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param featureName The name of the feature for the Neptune DB cluster that the IAM role is to be associated with. For the list of supported feature names, see &lt;a href&#x3D;\&quot;neptune/latest/userguide/api-other-apis.html#DBEngineVersion\&quot;&gt;DBEngineVersion&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterRoleAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterRoleQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETAddRoleToDBClusterWithHttpInfo(String dbClusterIdentifier, String roleArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String featureName) throws ApiException {
        okhttp3.Call localVarCall = gETAddRoleToDBClusterValidateBeforeCall(dbClusterIdentifier, roleArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, featureName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Associates an Identity and Access Management (IAM) role with an Neptune DB cluster.
     * @param dbClusterIdentifier The name of the DB cluster to associate the IAM role with. (required)
     * @param roleArn The Amazon Resource Name (ARN) of the IAM role to associate with the Neptune DB cluster, for example &lt;code&gt;arn:aws:iam::123456789012:role/NeptuneAccessRole&lt;/code&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param featureName The name of the feature for the Neptune DB cluster that the IAM role is to be associated with. For the list of supported feature names, see &lt;a href&#x3D;\&quot;neptune/latest/userguide/api-other-apis.html#DBEngineVersion\&quot;&gt;DBEngineVersion&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterRoleAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterRoleQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAddRoleToDBClusterAsync(String dbClusterIdentifier, String roleArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String featureName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETAddRoleToDBClusterValidateBeforeCall(dbClusterIdentifier, roleArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, featureName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETAddSourceIdentifierToSubscription
     * @param subscriptionName The name of the event notification subscription you want to add a source identifier to. (required)
     * @param sourceIdentifier &lt;p&gt;The identifier of the event source to be added.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB instance, then a &lt;code&gt;DBInstanceIdentifier&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB security group, a &lt;code&gt;DBSecurityGroupName&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB parameter group, a &lt;code&gt;DBParameterGroupName&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB snapshot, a &lt;code&gt;DBSnapshotIdentifier&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAddSourceIdentifierToSubscriptionCall(String subscriptionName, String sourceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=AddSourceIdentifierToSubscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subscriptionName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SubscriptionName", subscriptionName));
        }

        if (sourceIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceIdentifier", sourceIdentifier));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETAddSourceIdentifierToSubscriptionValidateBeforeCall(String subscriptionName, String sourceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionName' is set
        if (subscriptionName == null) {
            throw new ApiException("Missing the required parameter 'subscriptionName' when calling gETAddSourceIdentifierToSubscription(Async)");
        }

        // verify the required parameter 'sourceIdentifier' is set
        if (sourceIdentifier == null) {
            throw new ApiException("Missing the required parameter 'sourceIdentifier' when calling gETAddSourceIdentifierToSubscription(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETAddSourceIdentifierToSubscription(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETAddSourceIdentifierToSubscription(Async)");
        }

        return gETAddSourceIdentifierToSubscriptionCall(subscriptionName, sourceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Adds a source identifier to an existing event notification subscription.
     * @param subscriptionName The name of the event notification subscription you want to add a source identifier to. (required)
     * @param sourceIdentifier &lt;p&gt;The identifier of the event source to be added.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB instance, then a &lt;code&gt;DBInstanceIdentifier&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB security group, a &lt;code&gt;DBSecurityGroupName&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB parameter group, a &lt;code&gt;DBParameterGroupName&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB snapshot, a &lt;code&gt;DBSnapshotIdentifier&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return AddSourceIdentifierToSubscriptionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public AddSourceIdentifierToSubscriptionResult gETAddSourceIdentifierToSubscription(String subscriptionName, String sourceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<AddSourceIdentifierToSubscriptionResult> localVarResp = gETAddSourceIdentifierToSubscriptionWithHttpInfo(subscriptionName, sourceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds a source identifier to an existing event notification subscription.
     * @param subscriptionName The name of the event notification subscription you want to add a source identifier to. (required)
     * @param sourceIdentifier &lt;p&gt;The identifier of the event source to be added.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB instance, then a &lt;code&gt;DBInstanceIdentifier&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB security group, a &lt;code&gt;DBSecurityGroupName&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB parameter group, a &lt;code&gt;DBParameterGroupName&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB snapshot, a &lt;code&gt;DBSnapshotIdentifier&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;AddSourceIdentifierToSubscriptionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddSourceIdentifierToSubscriptionResult> gETAddSourceIdentifierToSubscriptionWithHttpInfo(String subscriptionName, String sourceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETAddSourceIdentifierToSubscriptionValidateBeforeCall(subscriptionName, sourceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<AddSourceIdentifierToSubscriptionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a source identifier to an existing event notification subscription.
     * @param subscriptionName The name of the event notification subscription you want to add a source identifier to. (required)
     * @param sourceIdentifier &lt;p&gt;The identifier of the event source to be added.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB instance, then a &lt;code&gt;DBInstanceIdentifier&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB security group, a &lt;code&gt;DBSecurityGroupName&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB parameter group, a &lt;code&gt;DBParameterGroupName&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB snapshot, a &lt;code&gt;DBSnapshotIdentifier&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAddSourceIdentifierToSubscriptionAsync(String subscriptionName, String sourceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<AddSourceIdentifierToSubscriptionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETAddSourceIdentifierToSubscriptionValidateBeforeCall(subscriptionName, sourceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<AddSourceIdentifierToSubscriptionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETAddTagsToResource
     * @param resourceName The Amazon Neptune resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing\&quot;&gt; Constructing an Amazon Resource Name (ARN)&lt;/a&gt;. (required)
     * @param tags The tags to be assigned to the Amazon Neptune resource. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAddTagsToResourceCall(String resourceName, List<GETAddTagsToResourceTagsParameterInner> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=AddTagsToResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResourceName", resourceName));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETAddTagsToResourceValidateBeforeCall(String resourceName, List<GETAddTagsToResourceTagsParameterInner> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling gETAddTagsToResource(Async)");
        }

        // verify the required parameter 'tags' is set
        if (tags == null) {
            throw new ApiException("Missing the required parameter 'tags' when calling gETAddTagsToResource(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETAddTagsToResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETAddTagsToResource(Async)");
        }

        return gETAddTagsToResourceCall(resourceName, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
     * @param resourceName The Amazon Neptune resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing\&quot;&gt; Constructing an Amazon Resource Name (ARN)&lt;/a&gt;. (required)
     * @param tags The tags to be assigned to the Amazon Neptune resource. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public void gETAddTagsToResource(String resourceName, List<GETAddTagsToResourceTagsParameterInner> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETAddTagsToResourceWithHttpInfo(resourceName, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
     * @param resourceName The Amazon Neptune resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing\&quot;&gt; Constructing an Amazon Resource Name (ARN)&lt;/a&gt;. (required)
     * @param tags The tags to be assigned to the Amazon Neptune resource. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETAddTagsToResourceWithHttpInfo(String resourceName, List<GETAddTagsToResourceTagsParameterInner> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETAddTagsToResourceValidateBeforeCall(resourceName, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
     * @param resourceName The Amazon Neptune resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing\&quot;&gt; Constructing an Amazon Resource Name (ARN)&lt;/a&gt;. (required)
     * @param tags The tags to be assigned to the Amazon Neptune resource. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAddTagsToResourceAsync(String resourceName, List<GETAddTagsToResourceTagsParameterInner> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETAddTagsToResourceValidateBeforeCall(resourceName, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETApplyPendingMaintenanceAction
     * @param resourceIdentifier The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing\&quot;&gt; Constructing an Amazon Resource Name (ARN)&lt;/a&gt;. (required)
     * @param applyAction &lt;p&gt;The pending maintenance action to apply to this resource.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;system-update&lt;/code&gt;, &lt;code&gt;db-upgrade&lt;/code&gt; &lt;/p&gt; (required)
     * @param optInType &lt;p&gt;A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type &lt;code&gt;immediate&lt;/code&gt; can&#39;t be undone.&lt;/p&gt; &lt;p&gt;Valid values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;immediate&lt;/code&gt; - Apply the maintenance action immediately.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;next-maintenance&lt;/code&gt; - Apply the maintenance action during the next maintenance window for the resource.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;undo-opt-in&lt;/code&gt; - Cancel any existing &lt;code&gt;next-maintenance&lt;/code&gt; opt-in requests.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETApplyPendingMaintenanceActionCall(String resourceIdentifier, String applyAction, String optInType, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ApplyPendingMaintenanceAction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResourceIdentifier", resourceIdentifier));
        }

        if (applyAction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplyAction", applyAction));
        }

        if (optInType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OptInType", optInType));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETApplyPendingMaintenanceActionValidateBeforeCall(String resourceIdentifier, String applyAction, String optInType, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceIdentifier' is set
        if (resourceIdentifier == null) {
            throw new ApiException("Missing the required parameter 'resourceIdentifier' when calling gETApplyPendingMaintenanceAction(Async)");
        }

        // verify the required parameter 'applyAction' is set
        if (applyAction == null) {
            throw new ApiException("Missing the required parameter 'applyAction' when calling gETApplyPendingMaintenanceAction(Async)");
        }

        // verify the required parameter 'optInType' is set
        if (optInType == null) {
            throw new ApiException("Missing the required parameter 'optInType' when calling gETApplyPendingMaintenanceAction(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETApplyPendingMaintenanceAction(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETApplyPendingMaintenanceAction(Async)");
        }

        return gETApplyPendingMaintenanceActionCall(resourceIdentifier, applyAction, optInType, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Applies a pending maintenance action to a resource (for example, to a DB instance).
     * @param resourceIdentifier The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing\&quot;&gt; Constructing an Amazon Resource Name (ARN)&lt;/a&gt;. (required)
     * @param applyAction &lt;p&gt;The pending maintenance action to apply to this resource.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;system-update&lt;/code&gt;, &lt;code&gt;db-upgrade&lt;/code&gt; &lt;/p&gt; (required)
     * @param optInType &lt;p&gt;A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type &lt;code&gt;immediate&lt;/code&gt; can&#39;t be undone.&lt;/p&gt; &lt;p&gt;Valid values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;immediate&lt;/code&gt; - Apply the maintenance action immediately.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;next-maintenance&lt;/code&gt; - Apply the maintenance action during the next maintenance window for the resource.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;undo-opt-in&lt;/code&gt; - Cancel any existing &lt;code&gt;next-maintenance&lt;/code&gt; opt-in requests.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApplyPendingMaintenanceActionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApplyPendingMaintenanceActionResult gETApplyPendingMaintenanceAction(String resourceIdentifier, String applyAction, String optInType, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ApplyPendingMaintenanceActionResult> localVarResp = gETApplyPendingMaintenanceActionWithHttpInfo(resourceIdentifier, applyAction, optInType, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Applies a pending maintenance action to a resource (for example, to a DB instance).
     * @param resourceIdentifier The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing\&quot;&gt; Constructing an Amazon Resource Name (ARN)&lt;/a&gt;. (required)
     * @param applyAction &lt;p&gt;The pending maintenance action to apply to this resource.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;system-update&lt;/code&gt;, &lt;code&gt;db-upgrade&lt;/code&gt; &lt;/p&gt; (required)
     * @param optInType &lt;p&gt;A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type &lt;code&gt;immediate&lt;/code&gt; can&#39;t be undone.&lt;/p&gt; &lt;p&gt;Valid values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;immediate&lt;/code&gt; - Apply the maintenance action immediately.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;next-maintenance&lt;/code&gt; - Apply the maintenance action during the next maintenance window for the resource.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;undo-opt-in&lt;/code&gt; - Cancel any existing &lt;code&gt;next-maintenance&lt;/code&gt; opt-in requests.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ApplyPendingMaintenanceActionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplyPendingMaintenanceActionResult> gETApplyPendingMaintenanceActionWithHttpInfo(String resourceIdentifier, String applyAction, String optInType, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETApplyPendingMaintenanceActionValidateBeforeCall(resourceIdentifier, applyAction, optInType, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ApplyPendingMaintenanceActionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Applies a pending maintenance action to a resource (for example, to a DB instance).
     * @param resourceIdentifier The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing\&quot;&gt; Constructing an Amazon Resource Name (ARN)&lt;/a&gt;. (required)
     * @param applyAction &lt;p&gt;The pending maintenance action to apply to this resource.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;system-update&lt;/code&gt;, &lt;code&gt;db-upgrade&lt;/code&gt; &lt;/p&gt; (required)
     * @param optInType &lt;p&gt;A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type &lt;code&gt;immediate&lt;/code&gt; can&#39;t be undone.&lt;/p&gt; &lt;p&gt;Valid values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;immediate&lt;/code&gt; - Apply the maintenance action immediately.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;next-maintenance&lt;/code&gt; - Apply the maintenance action during the next maintenance window for the resource.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;undo-opt-in&lt;/code&gt; - Cancel any existing &lt;code&gt;next-maintenance&lt;/code&gt; opt-in requests.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETApplyPendingMaintenanceActionAsync(String resourceIdentifier, String applyAction, String optInType, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ApplyPendingMaintenanceActionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETApplyPendingMaintenanceActionValidateBeforeCall(resourceIdentifier, applyAction, optInType, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ApplyPendingMaintenanceActionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCopyDBClusterParameterGroup
     * @param sourceDBClusterParameterGroupIdentifier &lt;p&gt;The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing\&quot;&gt; Constructing an Amazon Resource Name (ARN)&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must specify a valid DB cluster parameter group.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source DB cluster parameter group is in the same Amazon Region as the copy, specify a valid DB parameter group identifier, for example &lt;code&gt;my-db-cluster-param-group&lt;/code&gt;, or a valid ARN.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source DB parameter group is in a different Amazon Region than the copy, specify a valid DB cluster parameter group ARN, for example &lt;code&gt;arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param targetDBClusterParameterGroupIdentifier &lt;p&gt;The identifier for the copied DB cluster parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Cannot be null, empty, or blank&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 255 letters, numbers, or hyphens&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster-param-group1&lt;/code&gt; &lt;/p&gt; (required)
     * @param targetDBClusterParameterGroupDescription A description for the copied DB cluster parameter group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the copied DB cluster parameter group. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCopyDBClusterParameterGroupCall(String sourceDBClusterParameterGroupIdentifier, String targetDBClusterParameterGroupIdentifier, String targetDBClusterParameterGroupDescription, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CopyDBClusterParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceDBClusterParameterGroupIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceDBClusterParameterGroupIdentifier", sourceDBClusterParameterGroupIdentifier));
        }

        if (targetDBClusterParameterGroupIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TargetDBClusterParameterGroupIdentifier", targetDBClusterParameterGroupIdentifier));
        }

        if (targetDBClusterParameterGroupDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TargetDBClusterParameterGroupDescription", targetDBClusterParameterGroupDescription));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCopyDBClusterParameterGroupValidateBeforeCall(String sourceDBClusterParameterGroupIdentifier, String targetDBClusterParameterGroupIdentifier, String targetDBClusterParameterGroupDescription, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceDBClusterParameterGroupIdentifier' is set
        if (sourceDBClusterParameterGroupIdentifier == null) {
            throw new ApiException("Missing the required parameter 'sourceDBClusterParameterGroupIdentifier' when calling gETCopyDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'targetDBClusterParameterGroupIdentifier' is set
        if (targetDBClusterParameterGroupIdentifier == null) {
            throw new ApiException("Missing the required parameter 'targetDBClusterParameterGroupIdentifier' when calling gETCopyDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'targetDBClusterParameterGroupDescription' is set
        if (targetDBClusterParameterGroupDescription == null) {
            throw new ApiException("Missing the required parameter 'targetDBClusterParameterGroupDescription' when calling gETCopyDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCopyDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCopyDBClusterParameterGroup(Async)");
        }

        return gETCopyDBClusterParameterGroupCall(sourceDBClusterParameterGroupIdentifier, targetDBClusterParameterGroupIdentifier, targetDBClusterParameterGroupDescription, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, _callback);

    }

    /**
     * 
     * Copies the specified DB cluster parameter group.
     * @param sourceDBClusterParameterGroupIdentifier &lt;p&gt;The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing\&quot;&gt; Constructing an Amazon Resource Name (ARN)&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must specify a valid DB cluster parameter group.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source DB cluster parameter group is in the same Amazon Region as the copy, specify a valid DB parameter group identifier, for example &lt;code&gt;my-db-cluster-param-group&lt;/code&gt;, or a valid ARN.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source DB parameter group is in a different Amazon Region than the copy, specify a valid DB cluster parameter group ARN, for example &lt;code&gt;arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param targetDBClusterParameterGroupIdentifier &lt;p&gt;The identifier for the copied DB cluster parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Cannot be null, empty, or blank&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 255 letters, numbers, or hyphens&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster-param-group1&lt;/code&gt; &lt;/p&gt; (required)
     * @param targetDBClusterParameterGroupDescription A description for the copied DB cluster parameter group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the copied DB cluster parameter group. (optional)
     * @return CopyDBClusterParameterGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public CopyDBClusterParameterGroupResult gETCopyDBClusterParameterGroup(String sourceDBClusterParameterGroupIdentifier, String targetDBClusterParameterGroupIdentifier, String targetDBClusterParameterGroupDescription, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        ApiResponse<CopyDBClusterParameterGroupResult> localVarResp = gETCopyDBClusterParameterGroupWithHttpInfo(sourceDBClusterParameterGroupIdentifier, targetDBClusterParameterGroupIdentifier, targetDBClusterParameterGroupDescription, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * Copies the specified DB cluster parameter group.
     * @param sourceDBClusterParameterGroupIdentifier &lt;p&gt;The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing\&quot;&gt; Constructing an Amazon Resource Name (ARN)&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must specify a valid DB cluster parameter group.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source DB cluster parameter group is in the same Amazon Region as the copy, specify a valid DB parameter group identifier, for example &lt;code&gt;my-db-cluster-param-group&lt;/code&gt;, or a valid ARN.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source DB parameter group is in a different Amazon Region than the copy, specify a valid DB cluster parameter group ARN, for example &lt;code&gt;arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param targetDBClusterParameterGroupIdentifier &lt;p&gt;The identifier for the copied DB cluster parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Cannot be null, empty, or blank&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 255 letters, numbers, or hyphens&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster-param-group1&lt;/code&gt; &lt;/p&gt; (required)
     * @param targetDBClusterParameterGroupDescription A description for the copied DB cluster parameter group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the copied DB cluster parameter group. (optional)
     * @return ApiResponse&lt;CopyDBClusterParameterGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CopyDBClusterParameterGroupResult> gETCopyDBClusterParameterGroupWithHttpInfo(String sourceDBClusterParameterGroupIdentifier, String targetDBClusterParameterGroupIdentifier, String targetDBClusterParameterGroupDescription, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        okhttp3.Call localVarCall = gETCopyDBClusterParameterGroupValidateBeforeCall(sourceDBClusterParameterGroupIdentifier, targetDBClusterParameterGroupIdentifier, targetDBClusterParameterGroupDescription, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, null);
        Type localVarReturnType = new TypeToken<CopyDBClusterParameterGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Copies the specified DB cluster parameter group.
     * @param sourceDBClusterParameterGroupIdentifier &lt;p&gt;The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing\&quot;&gt; Constructing an Amazon Resource Name (ARN)&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must specify a valid DB cluster parameter group.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source DB cluster parameter group is in the same Amazon Region as the copy, specify a valid DB parameter group identifier, for example &lt;code&gt;my-db-cluster-param-group&lt;/code&gt;, or a valid ARN.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source DB parameter group is in a different Amazon Region than the copy, specify a valid DB cluster parameter group ARN, for example &lt;code&gt;arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param targetDBClusterParameterGroupIdentifier &lt;p&gt;The identifier for the copied DB cluster parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Cannot be null, empty, or blank&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 255 letters, numbers, or hyphens&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster-param-group1&lt;/code&gt; &lt;/p&gt; (required)
     * @param targetDBClusterParameterGroupDescription A description for the copied DB cluster parameter group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the copied DB cluster parameter group. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCopyDBClusterParameterGroupAsync(String sourceDBClusterParameterGroupIdentifier, String targetDBClusterParameterGroupIdentifier, String targetDBClusterParameterGroupDescription, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback<CopyDBClusterParameterGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCopyDBClusterParameterGroupValidateBeforeCall(sourceDBClusterParameterGroupIdentifier, targetDBClusterParameterGroupIdentifier, targetDBClusterParameterGroupDescription, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, _callback);
        Type localVarReturnType = new TypeToken<CopyDBClusterParameterGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCopyDBClusterSnapshot
     * @param sourceDBClusterSnapshotIdentifier &lt;p&gt;The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must specify a valid system snapshot in the \&quot;available\&quot; state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Specify a valid DB snapshot identifier.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster-snapshot1&lt;/code&gt; &lt;/p&gt; (required)
     * @param targetDBClusterSnapshotIdentifier &lt;p&gt;The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster-snapshot2&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param kmsKeyId &lt;p&gt;The Amazon Amazon KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.&lt;/p&gt; &lt;p&gt;If you copy an encrypted DB cluster snapshot from your Amazon account, you can specify a value for &lt;code&gt;KmsKeyId&lt;/code&gt; to encrypt the copy with a new KMS encryption key. If you don&#39;t specify a value for &lt;code&gt;KmsKeyId&lt;/code&gt;, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.&lt;/p&gt; &lt;p&gt;If you copy an encrypted DB cluster snapshot that is shared from another Amazon account, then you must specify a value for &lt;code&gt;KmsKeyId&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; KMS encryption keys are specific to the Amazon Region that they are created in, and you can&#39;t use encryption keys from one Amazon Region in another Amazon Region.&lt;/p&gt; &lt;p&gt;You cannot encrypt an unencrypted DB cluster snapshot when you copy it. If you try to copy an unencrypted DB cluster snapshot and specify a value for the KmsKeyId parameter, an error is returned.&lt;/p&gt; (optional)
     * @param preSignedUrl Not currently supported. (optional)
     * @param copyTags True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false. (optional)
     * @param tags The tags to assign to the new DB cluster snapshot copy. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCopyDBClusterSnapshotCall(String sourceDBClusterSnapshotIdentifier, String targetDBClusterSnapshotIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String kmsKeyId, String preSignedUrl, Boolean copyTags, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CopyDBClusterSnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceDBClusterSnapshotIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceDBClusterSnapshotIdentifier", sourceDBClusterSnapshotIdentifier));
        }

        if (targetDBClusterSnapshotIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TargetDBClusterSnapshotIdentifier", targetDBClusterSnapshotIdentifier));
        }

        if (kmsKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("KmsKeyId", kmsKeyId));
        }

        if (preSignedUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PreSignedUrl", preSignedUrl));
        }

        if (copyTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CopyTags", copyTags));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCopyDBClusterSnapshotValidateBeforeCall(String sourceDBClusterSnapshotIdentifier, String targetDBClusterSnapshotIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String kmsKeyId, String preSignedUrl, Boolean copyTags, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceDBClusterSnapshotIdentifier' is set
        if (sourceDBClusterSnapshotIdentifier == null) {
            throw new ApiException("Missing the required parameter 'sourceDBClusterSnapshotIdentifier' when calling gETCopyDBClusterSnapshot(Async)");
        }

        // verify the required parameter 'targetDBClusterSnapshotIdentifier' is set
        if (targetDBClusterSnapshotIdentifier == null) {
            throw new ApiException("Missing the required parameter 'targetDBClusterSnapshotIdentifier' when calling gETCopyDBClusterSnapshot(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCopyDBClusterSnapshot(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCopyDBClusterSnapshot(Async)");
        }

        return gETCopyDBClusterSnapshotCall(sourceDBClusterSnapshotIdentifier, targetDBClusterSnapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, kmsKeyId, preSignedUrl, copyTags, tags, _callback);

    }

    /**
     * 
     * &lt;p&gt;Copies a snapshot of a DB cluster.&lt;/p&gt; &lt;p&gt;To copy a DB cluster snapshot from a shared manual DB cluster snapshot, &lt;code&gt;SourceDBClusterSnapshotIdentifier&lt;/code&gt; must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.&lt;/p&gt;
     * @param sourceDBClusterSnapshotIdentifier &lt;p&gt;The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must specify a valid system snapshot in the \&quot;available\&quot; state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Specify a valid DB snapshot identifier.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster-snapshot1&lt;/code&gt; &lt;/p&gt; (required)
     * @param targetDBClusterSnapshotIdentifier &lt;p&gt;The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster-snapshot2&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param kmsKeyId &lt;p&gt;The Amazon Amazon KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.&lt;/p&gt; &lt;p&gt;If you copy an encrypted DB cluster snapshot from your Amazon account, you can specify a value for &lt;code&gt;KmsKeyId&lt;/code&gt; to encrypt the copy with a new KMS encryption key. If you don&#39;t specify a value for &lt;code&gt;KmsKeyId&lt;/code&gt;, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.&lt;/p&gt; &lt;p&gt;If you copy an encrypted DB cluster snapshot that is shared from another Amazon account, then you must specify a value for &lt;code&gt;KmsKeyId&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; KMS encryption keys are specific to the Amazon Region that they are created in, and you can&#39;t use encryption keys from one Amazon Region in another Amazon Region.&lt;/p&gt; &lt;p&gt;You cannot encrypt an unencrypted DB cluster snapshot when you copy it. If you try to copy an unencrypted DB cluster snapshot and specify a value for the KmsKeyId parameter, an error is returned.&lt;/p&gt; (optional)
     * @param preSignedUrl Not currently supported. (optional)
     * @param copyTags True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false. (optional)
     * @param tags The tags to assign to the new DB cluster snapshot copy. (optional)
     * @return CopyDBClusterSnapshotResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public CopyDBClusterSnapshotResult gETCopyDBClusterSnapshot(String sourceDBClusterSnapshotIdentifier, String targetDBClusterSnapshotIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String kmsKeyId, String preSignedUrl, Boolean copyTags, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        ApiResponse<CopyDBClusterSnapshotResult> localVarResp = gETCopyDBClusterSnapshotWithHttpInfo(sourceDBClusterSnapshotIdentifier, targetDBClusterSnapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, kmsKeyId, preSignedUrl, copyTags, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Copies a snapshot of a DB cluster.&lt;/p&gt; &lt;p&gt;To copy a DB cluster snapshot from a shared manual DB cluster snapshot, &lt;code&gt;SourceDBClusterSnapshotIdentifier&lt;/code&gt; must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.&lt;/p&gt;
     * @param sourceDBClusterSnapshotIdentifier &lt;p&gt;The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must specify a valid system snapshot in the \&quot;available\&quot; state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Specify a valid DB snapshot identifier.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster-snapshot1&lt;/code&gt; &lt;/p&gt; (required)
     * @param targetDBClusterSnapshotIdentifier &lt;p&gt;The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster-snapshot2&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param kmsKeyId &lt;p&gt;The Amazon Amazon KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.&lt;/p&gt; &lt;p&gt;If you copy an encrypted DB cluster snapshot from your Amazon account, you can specify a value for &lt;code&gt;KmsKeyId&lt;/code&gt; to encrypt the copy with a new KMS encryption key. If you don&#39;t specify a value for &lt;code&gt;KmsKeyId&lt;/code&gt;, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.&lt;/p&gt; &lt;p&gt;If you copy an encrypted DB cluster snapshot that is shared from another Amazon account, then you must specify a value for &lt;code&gt;KmsKeyId&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; KMS encryption keys are specific to the Amazon Region that they are created in, and you can&#39;t use encryption keys from one Amazon Region in another Amazon Region.&lt;/p&gt; &lt;p&gt;You cannot encrypt an unencrypted DB cluster snapshot when you copy it. If you try to copy an unencrypted DB cluster snapshot and specify a value for the KmsKeyId parameter, an error is returned.&lt;/p&gt; (optional)
     * @param preSignedUrl Not currently supported. (optional)
     * @param copyTags True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false. (optional)
     * @param tags The tags to assign to the new DB cluster snapshot copy. (optional)
     * @return ApiResponse&lt;CopyDBClusterSnapshotResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CopyDBClusterSnapshotResult> gETCopyDBClusterSnapshotWithHttpInfo(String sourceDBClusterSnapshotIdentifier, String targetDBClusterSnapshotIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String kmsKeyId, String preSignedUrl, Boolean copyTags, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        okhttp3.Call localVarCall = gETCopyDBClusterSnapshotValidateBeforeCall(sourceDBClusterSnapshotIdentifier, targetDBClusterSnapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, kmsKeyId, preSignedUrl, copyTags, tags, null);
        Type localVarReturnType = new TypeToken<CopyDBClusterSnapshotResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Copies a snapshot of a DB cluster.&lt;/p&gt; &lt;p&gt;To copy a DB cluster snapshot from a shared manual DB cluster snapshot, &lt;code&gt;SourceDBClusterSnapshotIdentifier&lt;/code&gt; must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.&lt;/p&gt;
     * @param sourceDBClusterSnapshotIdentifier &lt;p&gt;The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must specify a valid system snapshot in the \&quot;available\&quot; state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Specify a valid DB snapshot identifier.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster-snapshot1&lt;/code&gt; &lt;/p&gt; (required)
     * @param targetDBClusterSnapshotIdentifier &lt;p&gt;The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster-snapshot2&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param kmsKeyId &lt;p&gt;The Amazon Amazon KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.&lt;/p&gt; &lt;p&gt;If you copy an encrypted DB cluster snapshot from your Amazon account, you can specify a value for &lt;code&gt;KmsKeyId&lt;/code&gt; to encrypt the copy with a new KMS encryption key. If you don&#39;t specify a value for &lt;code&gt;KmsKeyId&lt;/code&gt;, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.&lt;/p&gt; &lt;p&gt;If you copy an encrypted DB cluster snapshot that is shared from another Amazon account, then you must specify a value for &lt;code&gt;KmsKeyId&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; KMS encryption keys are specific to the Amazon Region that they are created in, and you can&#39;t use encryption keys from one Amazon Region in another Amazon Region.&lt;/p&gt; &lt;p&gt;You cannot encrypt an unencrypted DB cluster snapshot when you copy it. If you try to copy an unencrypted DB cluster snapshot and specify a value for the KmsKeyId parameter, an error is returned.&lt;/p&gt; (optional)
     * @param preSignedUrl Not currently supported. (optional)
     * @param copyTags True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false. (optional)
     * @param tags The tags to assign to the new DB cluster snapshot copy. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCopyDBClusterSnapshotAsync(String sourceDBClusterSnapshotIdentifier, String targetDBClusterSnapshotIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String kmsKeyId, String preSignedUrl, Boolean copyTags, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback<CopyDBClusterSnapshotResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCopyDBClusterSnapshotValidateBeforeCall(sourceDBClusterSnapshotIdentifier, targetDBClusterSnapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, kmsKeyId, preSignedUrl, copyTags, tags, _callback);
        Type localVarReturnType = new TypeToken<CopyDBClusterSnapshotResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCopyDBParameterGroup
     * @param sourceDBParameterGroupIdentifier &lt;p&gt;The identifier or ARN for the source DB parameter group. For information about creating an ARN, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing\&quot;&gt; Constructing an Amazon Resource Name (ARN)&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must specify a valid DB parameter group.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must specify a valid DB parameter group identifier, for example &lt;code&gt;my-db-param-group&lt;/code&gt;, or a valid ARN.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param targetDBParameterGroupIdentifier &lt;p&gt;The identifier for the copied DB parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Cannot be null, empty, or blank.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 255 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-db-parameter-group&lt;/code&gt; &lt;/p&gt; (required)
     * @param targetDBParameterGroupDescription A description for the copied DB parameter group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the copied DB parameter group. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCopyDBParameterGroupCall(String sourceDBParameterGroupIdentifier, String targetDBParameterGroupIdentifier, String targetDBParameterGroupDescription, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CopyDBParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceDBParameterGroupIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceDBParameterGroupIdentifier", sourceDBParameterGroupIdentifier));
        }

        if (targetDBParameterGroupIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TargetDBParameterGroupIdentifier", targetDBParameterGroupIdentifier));
        }

        if (targetDBParameterGroupDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TargetDBParameterGroupDescription", targetDBParameterGroupDescription));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCopyDBParameterGroupValidateBeforeCall(String sourceDBParameterGroupIdentifier, String targetDBParameterGroupIdentifier, String targetDBParameterGroupDescription, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceDBParameterGroupIdentifier' is set
        if (sourceDBParameterGroupIdentifier == null) {
            throw new ApiException("Missing the required parameter 'sourceDBParameterGroupIdentifier' when calling gETCopyDBParameterGroup(Async)");
        }

        // verify the required parameter 'targetDBParameterGroupIdentifier' is set
        if (targetDBParameterGroupIdentifier == null) {
            throw new ApiException("Missing the required parameter 'targetDBParameterGroupIdentifier' when calling gETCopyDBParameterGroup(Async)");
        }

        // verify the required parameter 'targetDBParameterGroupDescription' is set
        if (targetDBParameterGroupDescription == null) {
            throw new ApiException("Missing the required parameter 'targetDBParameterGroupDescription' when calling gETCopyDBParameterGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCopyDBParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCopyDBParameterGroup(Async)");
        }

        return gETCopyDBParameterGroupCall(sourceDBParameterGroupIdentifier, targetDBParameterGroupIdentifier, targetDBParameterGroupDescription, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, _callback);

    }

    /**
     * 
     * Copies the specified DB parameter group.
     * @param sourceDBParameterGroupIdentifier &lt;p&gt;The identifier or ARN for the source DB parameter group. For information about creating an ARN, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing\&quot;&gt; Constructing an Amazon Resource Name (ARN)&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must specify a valid DB parameter group.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must specify a valid DB parameter group identifier, for example &lt;code&gt;my-db-param-group&lt;/code&gt;, or a valid ARN.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param targetDBParameterGroupIdentifier &lt;p&gt;The identifier for the copied DB parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Cannot be null, empty, or blank.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 255 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-db-parameter-group&lt;/code&gt; &lt;/p&gt; (required)
     * @param targetDBParameterGroupDescription A description for the copied DB parameter group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the copied DB parameter group. (optional)
     * @return CopyDBParameterGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public CopyDBParameterGroupResult gETCopyDBParameterGroup(String sourceDBParameterGroupIdentifier, String targetDBParameterGroupIdentifier, String targetDBParameterGroupDescription, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        ApiResponse<CopyDBParameterGroupResult> localVarResp = gETCopyDBParameterGroupWithHttpInfo(sourceDBParameterGroupIdentifier, targetDBParameterGroupIdentifier, targetDBParameterGroupDescription, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * Copies the specified DB parameter group.
     * @param sourceDBParameterGroupIdentifier &lt;p&gt;The identifier or ARN for the source DB parameter group. For information about creating an ARN, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing\&quot;&gt; Constructing an Amazon Resource Name (ARN)&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must specify a valid DB parameter group.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must specify a valid DB parameter group identifier, for example &lt;code&gt;my-db-param-group&lt;/code&gt;, or a valid ARN.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param targetDBParameterGroupIdentifier &lt;p&gt;The identifier for the copied DB parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Cannot be null, empty, or blank.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 255 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-db-parameter-group&lt;/code&gt; &lt;/p&gt; (required)
     * @param targetDBParameterGroupDescription A description for the copied DB parameter group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the copied DB parameter group. (optional)
     * @return ApiResponse&lt;CopyDBParameterGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CopyDBParameterGroupResult> gETCopyDBParameterGroupWithHttpInfo(String sourceDBParameterGroupIdentifier, String targetDBParameterGroupIdentifier, String targetDBParameterGroupDescription, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        okhttp3.Call localVarCall = gETCopyDBParameterGroupValidateBeforeCall(sourceDBParameterGroupIdentifier, targetDBParameterGroupIdentifier, targetDBParameterGroupDescription, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, null);
        Type localVarReturnType = new TypeToken<CopyDBParameterGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Copies the specified DB parameter group.
     * @param sourceDBParameterGroupIdentifier &lt;p&gt;The identifier or ARN for the source DB parameter group. For information about creating an ARN, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing\&quot;&gt; Constructing an Amazon Resource Name (ARN)&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must specify a valid DB parameter group.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must specify a valid DB parameter group identifier, for example &lt;code&gt;my-db-param-group&lt;/code&gt;, or a valid ARN.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param targetDBParameterGroupIdentifier &lt;p&gt;The identifier for the copied DB parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Cannot be null, empty, or blank.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 255 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-db-parameter-group&lt;/code&gt; &lt;/p&gt; (required)
     * @param targetDBParameterGroupDescription A description for the copied DB parameter group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the copied DB parameter group. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCopyDBParameterGroupAsync(String sourceDBParameterGroupIdentifier, String targetDBParameterGroupIdentifier, String targetDBParameterGroupDescription, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback<CopyDBParameterGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCopyDBParameterGroupValidateBeforeCall(sourceDBParameterGroupIdentifier, targetDBParameterGroupIdentifier, targetDBParameterGroupDescription, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, _callback);
        Type localVarReturnType = new TypeToken<CopyDBParameterGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateDBCluster
     * @param dbClusterIdentifier &lt;p&gt;The DB cluster identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster1&lt;/code&gt; &lt;/p&gt; (required)
     * @param engine &lt;p&gt;The name of the database engine to be used for this DB cluster.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;neptune&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param availabilityZones A list of EC2 Availability Zones that instances in the DB cluster can be created in. (optional)
     * @param backupRetentionPeriod &lt;p&gt;The number of days for which automated backups are retained. You must specify a minimum value of 1.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be a value from 1 to 35&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param characterSetName  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param copyTagsToSnapshot  &lt;i&gt;If set to &lt;code&gt;true&lt;/code&gt;, tags are copied to any snapshot of the DB cluster that is created.&lt;/i&gt;  (optional)
     * @param databaseName The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Neptune will not create a database in the DB cluster you are creating. (optional)
     * @param dbClusterParameterGroupName &lt;p&gt; The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default is used.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBClusterParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param vpcSecurityGroupIds A list of EC2 VPC security groups to associate with this DB cluster. (optional)
     * @param dbSubnetGroupName &lt;p&gt;A DB subnet group to associate with this DB cluster.&lt;/p&gt; &lt;p&gt;Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (optional)
     * @param engineVersion &lt;p&gt;The version number of the database engine to use for the new DB cluster.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;1.0.2.1&lt;/code&gt; &lt;/p&gt; (optional)
     * @param port &lt;p&gt;The port number on which the instances in the DB cluster accept connections.&lt;/p&gt; &lt;p&gt; Default: &lt;code&gt;8182&lt;/code&gt; &lt;/p&gt; (optional)
     * @param masterUsername Not supported by Neptune. (optional)
     * @param masterUserPassword Not supported by Neptune. (optional)
     * @param optionGroupName  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param preferredBackupWindow &lt;p&gt;The daily time range during which automated backups are created if automated backups are enabled using the &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region. To see the time blocks available, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html\&quot;&gt; Adjusting the Preferred Maintenance Window&lt;/a&gt; in the &lt;i&gt;Amazon Neptune User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be in the format &lt;code&gt;hh24:mi-hh24:mi&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must not conflict with the preferred maintenance window.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 30 minutes.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;p&gt;Format: &lt;code&gt;ddd:hh24:mi-ddd:hh24:mi&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region, occurring on a random day of the week. To see the time blocks available, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html\&quot;&gt; Adjusting the Preferred Maintenance Window&lt;/a&gt; in the &lt;i&gt;Amazon Neptune User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.&lt;/p&gt; &lt;p&gt;Constraints: Minimum 30-minute window.&lt;/p&gt; (optional)
     * @param replicationSourceIdentifier The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica. (optional)
     * @param tags The tags to assign to the new DB cluster. (optional)
     * @param storageEncrypted Specifies whether the DB cluster is encrypted. (optional)
     * @param kmsKeyId &lt;p&gt;The Amazon KMS key identifier for an encrypted DB cluster.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same Amazon account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.&lt;/p&gt; &lt;p&gt;If an encryption key is not specified in &lt;code&gt;KmsKeyId&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If &lt;code&gt;ReplicationSourceIdentifier&lt;/code&gt; identifies an encrypted source, then Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune will use your default encryption key.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the &lt;code&gt;StorageEncrypted&lt;/code&gt; parameter is true and &lt;code&gt;ReplicationSourceIdentifier&lt;/code&gt; is not specified, then Amazon Neptune will use your default encryption key.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Amazon KMS creates the default encryption key for your Amazon account. Your Amazon account has a different default encryption key for each Amazon Region.&lt;/p&gt; &lt;p&gt;If you create a Read Replica of an encrypted DB cluster in another Amazon Region, you must set &lt;code&gt;KmsKeyId&lt;/code&gt; to a KMS key ID that is valid in the destination Amazon Region. This key is used to encrypt the Read Replica in that Amazon Region.&lt;/p&gt; (optional)
     * @param preSignedUrl This parameter is not currently supported. (optional)
     * @param enableIAMDatabaseAuthentication &lt;p&gt;If set to &lt;code&gt;true&lt;/code&gt;, enables Amazon Identity and Access Management (IAM) authentication for the entire DB cluster (this cannot be set at an instance level).&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param enableCloudwatchLogsExports The list of log types that need to be enabled for exporting to CloudWatch Logs. (optional)
     * @param deletionProtection A value that indicates whether the DB cluster has deletion protection enabled. The database can&#39;t be deleted when deletion protection is enabled. By default, deletion protection is enabled. (optional)
     * @param serverlessV2ScalingConfiguration  (optional)
     * @param globalClusterIdentifier The ID of the Neptune global database to which this new DB cluster should be added. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateDBClusterCall(String dbClusterIdentifier, String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> availabilityZones, Integer backupRetentionPeriod, String characterSetName, Boolean copyTagsToSnapshot, String databaseName, String dbClusterParameterGroupName, List<String> vpcSecurityGroupIds, String dbSubnetGroupName, String engineVersion, Integer port, String masterUsername, String masterUserPassword, String optionGroupName, String preferredBackupWindow, String preferredMaintenanceWindow, String replicationSourceIdentifier, List<GETAddTagsToResourceTagsParameterInner> tags, Boolean storageEncrypted, String kmsKeyId, String preSignedUrl, Boolean enableIAMDatabaseAuthentication, List<String> enableCloudwatchLogsExports, Boolean deletionProtection, GETCreateDBClusterServerlessV2ScalingConfigurationParameter serverlessV2ScalingConfiguration, String globalClusterIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateDBCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (availabilityZones != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AvailabilityZones", availabilityZones));
        }

        if (backupRetentionPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("BackupRetentionPeriod", backupRetentionPeriod));
        }

        if (characterSetName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CharacterSetName", characterSetName));
        }

        if (copyTagsToSnapshot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CopyTagsToSnapshot", copyTagsToSnapshot));
        }

        if (databaseName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DatabaseName", databaseName));
        }

        if (dbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterIdentifier", dbClusterIdentifier));
        }

        if (dbClusterParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterParameterGroupName", dbClusterParameterGroupName));
        }

        if (vpcSecurityGroupIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "VpcSecurityGroupIds", vpcSecurityGroupIds));
        }

        if (dbSubnetGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBSubnetGroupName", dbSubnetGroupName));
        }

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Engine", engine));
        }

        if (engineVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EngineVersion", engineVersion));
        }

        if (port != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Port", port));
        }

        if (masterUsername != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MasterUsername", masterUsername));
        }

        if (masterUserPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MasterUserPassword", masterUserPassword));
        }

        if (optionGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OptionGroupName", optionGroupName));
        }

        if (preferredBackupWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PreferredBackupWindow", preferredBackupWindow));
        }

        if (preferredMaintenanceWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PreferredMaintenanceWindow", preferredMaintenanceWindow));
        }

        if (replicationSourceIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReplicationSourceIdentifier", replicationSourceIdentifier));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (storageEncrypted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StorageEncrypted", storageEncrypted));
        }

        if (kmsKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("KmsKeyId", kmsKeyId));
        }

        if (preSignedUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PreSignedUrl", preSignedUrl));
        }

        if (enableIAMDatabaseAuthentication != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnableIAMDatabaseAuthentication", enableIAMDatabaseAuthentication));
        }

        if (enableCloudwatchLogsExports != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "EnableCloudwatchLogsExports", enableCloudwatchLogsExports));
        }

        if (deletionProtection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DeletionProtection", deletionProtection));
        }

        if (serverlessV2ScalingConfiguration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ServerlessV2ScalingConfiguration", serverlessV2ScalingConfiguration));
        }

        if (globalClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GlobalClusterIdentifier", globalClusterIdentifier));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateDBClusterValidateBeforeCall(String dbClusterIdentifier, String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> availabilityZones, Integer backupRetentionPeriod, String characterSetName, Boolean copyTagsToSnapshot, String databaseName, String dbClusterParameterGroupName, List<String> vpcSecurityGroupIds, String dbSubnetGroupName, String engineVersion, Integer port, String masterUsername, String masterUserPassword, String optionGroupName, String preferredBackupWindow, String preferredMaintenanceWindow, String replicationSourceIdentifier, List<GETAddTagsToResourceTagsParameterInner> tags, Boolean storageEncrypted, String kmsKeyId, String preSignedUrl, Boolean enableIAMDatabaseAuthentication, List<String> enableCloudwatchLogsExports, Boolean deletionProtection, GETCreateDBClusterServerlessV2ScalingConfigurationParameter serverlessV2ScalingConfiguration, String globalClusterIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterIdentifier' is set
        if (dbClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterIdentifier' when calling gETCreateDBCluster(Async)");
        }

        // verify the required parameter 'engine' is set
        if (engine == null) {
            throw new ApiException("Missing the required parameter 'engine' when calling gETCreateDBCluster(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateDBCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateDBCluster(Async)");
        }

        return gETCreateDBClusterCall(dbClusterIdentifier, engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, availabilityZones, backupRetentionPeriod, characterSetName, copyTagsToSnapshot, databaseName, dbClusterParameterGroupName, vpcSecurityGroupIds, dbSubnetGroupName, engineVersion, port, masterUsername, masterUserPassword, optionGroupName, preferredBackupWindow, preferredMaintenanceWindow, replicationSourceIdentifier, tags, storageEncrypted, kmsKeyId, preSignedUrl, enableIAMDatabaseAuthentication, enableCloudwatchLogsExports, deletionProtection, serverlessV2ScalingConfiguration, globalClusterIdentifier, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new Amazon Neptune DB cluster.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;ReplicationSourceIdentifier&lt;/code&gt; parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.&lt;/p&gt; &lt;p&gt;Note that when you create a new cluster using &lt;code&gt;CreateDBCluster&lt;/code&gt; directly, deletion protection is disabled by default (when you create a new production cluster in the console, deletion protection is enabled by default). You can only delete a DB cluster if its &lt;code&gt;DeletionProtection&lt;/code&gt; field is set to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
     * @param dbClusterIdentifier &lt;p&gt;The DB cluster identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster1&lt;/code&gt; &lt;/p&gt; (required)
     * @param engine &lt;p&gt;The name of the database engine to be used for this DB cluster.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;neptune&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param availabilityZones A list of EC2 Availability Zones that instances in the DB cluster can be created in. (optional)
     * @param backupRetentionPeriod &lt;p&gt;The number of days for which automated backups are retained. You must specify a minimum value of 1.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be a value from 1 to 35&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param characterSetName  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param copyTagsToSnapshot  &lt;i&gt;If set to &lt;code&gt;true&lt;/code&gt;, tags are copied to any snapshot of the DB cluster that is created.&lt;/i&gt;  (optional)
     * @param databaseName The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Neptune will not create a database in the DB cluster you are creating. (optional)
     * @param dbClusterParameterGroupName &lt;p&gt; The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default is used.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBClusterParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param vpcSecurityGroupIds A list of EC2 VPC security groups to associate with this DB cluster. (optional)
     * @param dbSubnetGroupName &lt;p&gt;A DB subnet group to associate with this DB cluster.&lt;/p&gt; &lt;p&gt;Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (optional)
     * @param engineVersion &lt;p&gt;The version number of the database engine to use for the new DB cluster.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;1.0.2.1&lt;/code&gt; &lt;/p&gt; (optional)
     * @param port &lt;p&gt;The port number on which the instances in the DB cluster accept connections.&lt;/p&gt; &lt;p&gt; Default: &lt;code&gt;8182&lt;/code&gt; &lt;/p&gt; (optional)
     * @param masterUsername Not supported by Neptune. (optional)
     * @param masterUserPassword Not supported by Neptune. (optional)
     * @param optionGroupName  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param preferredBackupWindow &lt;p&gt;The daily time range during which automated backups are created if automated backups are enabled using the &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region. To see the time blocks available, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html\&quot;&gt; Adjusting the Preferred Maintenance Window&lt;/a&gt; in the &lt;i&gt;Amazon Neptune User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be in the format &lt;code&gt;hh24:mi-hh24:mi&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must not conflict with the preferred maintenance window.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 30 minutes.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;p&gt;Format: &lt;code&gt;ddd:hh24:mi-ddd:hh24:mi&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region, occurring on a random day of the week. To see the time blocks available, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html\&quot;&gt; Adjusting the Preferred Maintenance Window&lt;/a&gt; in the &lt;i&gt;Amazon Neptune User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.&lt;/p&gt; &lt;p&gt;Constraints: Minimum 30-minute window.&lt;/p&gt; (optional)
     * @param replicationSourceIdentifier The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica. (optional)
     * @param tags The tags to assign to the new DB cluster. (optional)
     * @param storageEncrypted Specifies whether the DB cluster is encrypted. (optional)
     * @param kmsKeyId &lt;p&gt;The Amazon KMS key identifier for an encrypted DB cluster.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same Amazon account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.&lt;/p&gt; &lt;p&gt;If an encryption key is not specified in &lt;code&gt;KmsKeyId&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If &lt;code&gt;ReplicationSourceIdentifier&lt;/code&gt; identifies an encrypted source, then Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune will use your default encryption key.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the &lt;code&gt;StorageEncrypted&lt;/code&gt; parameter is true and &lt;code&gt;ReplicationSourceIdentifier&lt;/code&gt; is not specified, then Amazon Neptune will use your default encryption key.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Amazon KMS creates the default encryption key for your Amazon account. Your Amazon account has a different default encryption key for each Amazon Region.&lt;/p&gt; &lt;p&gt;If you create a Read Replica of an encrypted DB cluster in another Amazon Region, you must set &lt;code&gt;KmsKeyId&lt;/code&gt; to a KMS key ID that is valid in the destination Amazon Region. This key is used to encrypt the Read Replica in that Amazon Region.&lt;/p&gt; (optional)
     * @param preSignedUrl This parameter is not currently supported. (optional)
     * @param enableIAMDatabaseAuthentication &lt;p&gt;If set to &lt;code&gt;true&lt;/code&gt;, enables Amazon Identity and Access Management (IAM) authentication for the entire DB cluster (this cannot be set at an instance level).&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param enableCloudwatchLogsExports The list of log types that need to be enabled for exporting to CloudWatch Logs. (optional)
     * @param deletionProtection A value that indicates whether the DB cluster has deletion protection enabled. The database can&#39;t be deleted when deletion protection is enabled. By default, deletion protection is enabled. (optional)
     * @param serverlessV2ScalingConfiguration  (optional)
     * @param globalClusterIdentifier The ID of the Neptune global database to which this new DB cluster should be added. (optional)
     * @return CreateDBClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateDBClusterResult gETCreateDBCluster(String dbClusterIdentifier, String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> availabilityZones, Integer backupRetentionPeriod, String characterSetName, Boolean copyTagsToSnapshot, String databaseName, String dbClusterParameterGroupName, List<String> vpcSecurityGroupIds, String dbSubnetGroupName, String engineVersion, Integer port, String masterUsername, String masterUserPassword, String optionGroupName, String preferredBackupWindow, String preferredMaintenanceWindow, String replicationSourceIdentifier, List<GETAddTagsToResourceTagsParameterInner> tags, Boolean storageEncrypted, String kmsKeyId, String preSignedUrl, Boolean enableIAMDatabaseAuthentication, List<String> enableCloudwatchLogsExports, Boolean deletionProtection, GETCreateDBClusterServerlessV2ScalingConfigurationParameter serverlessV2ScalingConfiguration, String globalClusterIdentifier) throws ApiException {
        ApiResponse<CreateDBClusterResult> localVarResp = gETCreateDBClusterWithHttpInfo(dbClusterIdentifier, engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, availabilityZones, backupRetentionPeriod, characterSetName, copyTagsToSnapshot, databaseName, dbClusterParameterGroupName, vpcSecurityGroupIds, dbSubnetGroupName, engineVersion, port, masterUsername, masterUserPassword, optionGroupName, preferredBackupWindow, preferredMaintenanceWindow, replicationSourceIdentifier, tags, storageEncrypted, kmsKeyId, preSignedUrl, enableIAMDatabaseAuthentication, enableCloudwatchLogsExports, deletionProtection, serverlessV2ScalingConfiguration, globalClusterIdentifier);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new Amazon Neptune DB cluster.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;ReplicationSourceIdentifier&lt;/code&gt; parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.&lt;/p&gt; &lt;p&gt;Note that when you create a new cluster using &lt;code&gt;CreateDBCluster&lt;/code&gt; directly, deletion protection is disabled by default (when you create a new production cluster in the console, deletion protection is enabled by default). You can only delete a DB cluster if its &lt;code&gt;DeletionProtection&lt;/code&gt; field is set to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
     * @param dbClusterIdentifier &lt;p&gt;The DB cluster identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster1&lt;/code&gt; &lt;/p&gt; (required)
     * @param engine &lt;p&gt;The name of the database engine to be used for this DB cluster.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;neptune&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param availabilityZones A list of EC2 Availability Zones that instances in the DB cluster can be created in. (optional)
     * @param backupRetentionPeriod &lt;p&gt;The number of days for which automated backups are retained. You must specify a minimum value of 1.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be a value from 1 to 35&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param characterSetName  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param copyTagsToSnapshot  &lt;i&gt;If set to &lt;code&gt;true&lt;/code&gt;, tags are copied to any snapshot of the DB cluster that is created.&lt;/i&gt;  (optional)
     * @param databaseName The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Neptune will not create a database in the DB cluster you are creating. (optional)
     * @param dbClusterParameterGroupName &lt;p&gt; The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default is used.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBClusterParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param vpcSecurityGroupIds A list of EC2 VPC security groups to associate with this DB cluster. (optional)
     * @param dbSubnetGroupName &lt;p&gt;A DB subnet group to associate with this DB cluster.&lt;/p&gt; &lt;p&gt;Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (optional)
     * @param engineVersion &lt;p&gt;The version number of the database engine to use for the new DB cluster.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;1.0.2.1&lt;/code&gt; &lt;/p&gt; (optional)
     * @param port &lt;p&gt;The port number on which the instances in the DB cluster accept connections.&lt;/p&gt; &lt;p&gt; Default: &lt;code&gt;8182&lt;/code&gt; &lt;/p&gt; (optional)
     * @param masterUsername Not supported by Neptune. (optional)
     * @param masterUserPassword Not supported by Neptune. (optional)
     * @param optionGroupName  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param preferredBackupWindow &lt;p&gt;The daily time range during which automated backups are created if automated backups are enabled using the &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region. To see the time blocks available, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html\&quot;&gt; Adjusting the Preferred Maintenance Window&lt;/a&gt; in the &lt;i&gt;Amazon Neptune User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be in the format &lt;code&gt;hh24:mi-hh24:mi&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must not conflict with the preferred maintenance window.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 30 minutes.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;p&gt;Format: &lt;code&gt;ddd:hh24:mi-ddd:hh24:mi&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region, occurring on a random day of the week. To see the time blocks available, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html\&quot;&gt; Adjusting the Preferred Maintenance Window&lt;/a&gt; in the &lt;i&gt;Amazon Neptune User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.&lt;/p&gt; &lt;p&gt;Constraints: Minimum 30-minute window.&lt;/p&gt; (optional)
     * @param replicationSourceIdentifier The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica. (optional)
     * @param tags The tags to assign to the new DB cluster. (optional)
     * @param storageEncrypted Specifies whether the DB cluster is encrypted. (optional)
     * @param kmsKeyId &lt;p&gt;The Amazon KMS key identifier for an encrypted DB cluster.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same Amazon account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.&lt;/p&gt; &lt;p&gt;If an encryption key is not specified in &lt;code&gt;KmsKeyId&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If &lt;code&gt;ReplicationSourceIdentifier&lt;/code&gt; identifies an encrypted source, then Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune will use your default encryption key.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the &lt;code&gt;StorageEncrypted&lt;/code&gt; parameter is true and &lt;code&gt;ReplicationSourceIdentifier&lt;/code&gt; is not specified, then Amazon Neptune will use your default encryption key.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Amazon KMS creates the default encryption key for your Amazon account. Your Amazon account has a different default encryption key for each Amazon Region.&lt;/p&gt; &lt;p&gt;If you create a Read Replica of an encrypted DB cluster in another Amazon Region, you must set &lt;code&gt;KmsKeyId&lt;/code&gt; to a KMS key ID that is valid in the destination Amazon Region. This key is used to encrypt the Read Replica in that Amazon Region.&lt;/p&gt; (optional)
     * @param preSignedUrl This parameter is not currently supported. (optional)
     * @param enableIAMDatabaseAuthentication &lt;p&gt;If set to &lt;code&gt;true&lt;/code&gt;, enables Amazon Identity and Access Management (IAM) authentication for the entire DB cluster (this cannot be set at an instance level).&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param enableCloudwatchLogsExports The list of log types that need to be enabled for exporting to CloudWatch Logs. (optional)
     * @param deletionProtection A value that indicates whether the DB cluster has deletion protection enabled. The database can&#39;t be deleted when deletion protection is enabled. By default, deletion protection is enabled. (optional)
     * @param serverlessV2ScalingConfiguration  (optional)
     * @param globalClusterIdentifier The ID of the Neptune global database to which this new DB cluster should be added. (optional)
     * @return ApiResponse&lt;CreateDBClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDBClusterResult> gETCreateDBClusterWithHttpInfo(String dbClusterIdentifier, String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> availabilityZones, Integer backupRetentionPeriod, String characterSetName, Boolean copyTagsToSnapshot, String databaseName, String dbClusterParameterGroupName, List<String> vpcSecurityGroupIds, String dbSubnetGroupName, String engineVersion, Integer port, String masterUsername, String masterUserPassword, String optionGroupName, String preferredBackupWindow, String preferredMaintenanceWindow, String replicationSourceIdentifier, List<GETAddTagsToResourceTagsParameterInner> tags, Boolean storageEncrypted, String kmsKeyId, String preSignedUrl, Boolean enableIAMDatabaseAuthentication, List<String> enableCloudwatchLogsExports, Boolean deletionProtection, GETCreateDBClusterServerlessV2ScalingConfigurationParameter serverlessV2ScalingConfiguration, String globalClusterIdentifier) throws ApiException {
        okhttp3.Call localVarCall = gETCreateDBClusterValidateBeforeCall(dbClusterIdentifier, engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, availabilityZones, backupRetentionPeriod, characterSetName, copyTagsToSnapshot, databaseName, dbClusterParameterGroupName, vpcSecurityGroupIds, dbSubnetGroupName, engineVersion, port, masterUsername, masterUserPassword, optionGroupName, preferredBackupWindow, preferredMaintenanceWindow, replicationSourceIdentifier, tags, storageEncrypted, kmsKeyId, preSignedUrl, enableIAMDatabaseAuthentication, enableCloudwatchLogsExports, deletionProtection, serverlessV2ScalingConfiguration, globalClusterIdentifier, null);
        Type localVarReturnType = new TypeToken<CreateDBClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new Amazon Neptune DB cluster.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;ReplicationSourceIdentifier&lt;/code&gt; parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.&lt;/p&gt; &lt;p&gt;Note that when you create a new cluster using &lt;code&gt;CreateDBCluster&lt;/code&gt; directly, deletion protection is disabled by default (when you create a new production cluster in the console, deletion protection is enabled by default). You can only delete a DB cluster if its &lt;code&gt;DeletionProtection&lt;/code&gt; field is set to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
     * @param dbClusterIdentifier &lt;p&gt;The DB cluster identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster1&lt;/code&gt; &lt;/p&gt; (required)
     * @param engine &lt;p&gt;The name of the database engine to be used for this DB cluster.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;neptune&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param availabilityZones A list of EC2 Availability Zones that instances in the DB cluster can be created in. (optional)
     * @param backupRetentionPeriod &lt;p&gt;The number of days for which automated backups are retained. You must specify a minimum value of 1.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be a value from 1 to 35&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param characterSetName  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param copyTagsToSnapshot  &lt;i&gt;If set to &lt;code&gt;true&lt;/code&gt;, tags are copied to any snapshot of the DB cluster that is created.&lt;/i&gt;  (optional)
     * @param databaseName The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Neptune will not create a database in the DB cluster you are creating. (optional)
     * @param dbClusterParameterGroupName &lt;p&gt; The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default is used.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBClusterParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param vpcSecurityGroupIds A list of EC2 VPC security groups to associate with this DB cluster. (optional)
     * @param dbSubnetGroupName &lt;p&gt;A DB subnet group to associate with this DB cluster.&lt;/p&gt; &lt;p&gt;Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (optional)
     * @param engineVersion &lt;p&gt;The version number of the database engine to use for the new DB cluster.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;1.0.2.1&lt;/code&gt; &lt;/p&gt; (optional)
     * @param port &lt;p&gt;The port number on which the instances in the DB cluster accept connections.&lt;/p&gt; &lt;p&gt; Default: &lt;code&gt;8182&lt;/code&gt; &lt;/p&gt; (optional)
     * @param masterUsername Not supported by Neptune. (optional)
     * @param masterUserPassword Not supported by Neptune. (optional)
     * @param optionGroupName  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param preferredBackupWindow &lt;p&gt;The daily time range during which automated backups are created if automated backups are enabled using the &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region. To see the time blocks available, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html\&quot;&gt; Adjusting the Preferred Maintenance Window&lt;/a&gt; in the &lt;i&gt;Amazon Neptune User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be in the format &lt;code&gt;hh24:mi-hh24:mi&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must not conflict with the preferred maintenance window.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 30 minutes.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;p&gt;Format: &lt;code&gt;ddd:hh24:mi-ddd:hh24:mi&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region, occurring on a random day of the week. To see the time blocks available, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html\&quot;&gt; Adjusting the Preferred Maintenance Window&lt;/a&gt; in the &lt;i&gt;Amazon Neptune User Guide.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.&lt;/p&gt; &lt;p&gt;Constraints: Minimum 30-minute window.&lt;/p&gt; (optional)
     * @param replicationSourceIdentifier The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica. (optional)
     * @param tags The tags to assign to the new DB cluster. (optional)
     * @param storageEncrypted Specifies whether the DB cluster is encrypted. (optional)
     * @param kmsKeyId &lt;p&gt;The Amazon KMS key identifier for an encrypted DB cluster.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same Amazon account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.&lt;/p&gt; &lt;p&gt;If an encryption key is not specified in &lt;code&gt;KmsKeyId&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If &lt;code&gt;ReplicationSourceIdentifier&lt;/code&gt; identifies an encrypted source, then Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune will use your default encryption key.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the &lt;code&gt;StorageEncrypted&lt;/code&gt; parameter is true and &lt;code&gt;ReplicationSourceIdentifier&lt;/code&gt; is not specified, then Amazon Neptune will use your default encryption key.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Amazon KMS creates the default encryption key for your Amazon account. Your Amazon account has a different default encryption key for each Amazon Region.&lt;/p&gt; &lt;p&gt;If you create a Read Replica of an encrypted DB cluster in another Amazon Region, you must set &lt;code&gt;KmsKeyId&lt;/code&gt; to a KMS key ID that is valid in the destination Amazon Region. This key is used to encrypt the Read Replica in that Amazon Region.&lt;/p&gt; (optional)
     * @param preSignedUrl This parameter is not currently supported. (optional)
     * @param enableIAMDatabaseAuthentication &lt;p&gt;If set to &lt;code&gt;true&lt;/code&gt;, enables Amazon Identity and Access Management (IAM) authentication for the entire DB cluster (this cannot be set at an instance level).&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param enableCloudwatchLogsExports The list of log types that need to be enabled for exporting to CloudWatch Logs. (optional)
     * @param deletionProtection A value that indicates whether the DB cluster has deletion protection enabled. The database can&#39;t be deleted when deletion protection is enabled. By default, deletion protection is enabled. (optional)
     * @param serverlessV2ScalingConfiguration  (optional)
     * @param globalClusterIdentifier The ID of the Neptune global database to which this new DB cluster should be added. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateDBClusterAsync(String dbClusterIdentifier, String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> availabilityZones, Integer backupRetentionPeriod, String characterSetName, Boolean copyTagsToSnapshot, String databaseName, String dbClusterParameterGroupName, List<String> vpcSecurityGroupIds, String dbSubnetGroupName, String engineVersion, Integer port, String masterUsername, String masterUserPassword, String optionGroupName, String preferredBackupWindow, String preferredMaintenanceWindow, String replicationSourceIdentifier, List<GETAddTagsToResourceTagsParameterInner> tags, Boolean storageEncrypted, String kmsKeyId, String preSignedUrl, Boolean enableIAMDatabaseAuthentication, List<String> enableCloudwatchLogsExports, Boolean deletionProtection, GETCreateDBClusterServerlessV2ScalingConfigurationParameter serverlessV2ScalingConfiguration, String globalClusterIdentifier, final ApiCallback<CreateDBClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateDBClusterValidateBeforeCall(dbClusterIdentifier, engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, availabilityZones, backupRetentionPeriod, characterSetName, copyTagsToSnapshot, databaseName, dbClusterParameterGroupName, vpcSecurityGroupIds, dbSubnetGroupName, engineVersion, port, masterUsername, masterUserPassword, optionGroupName, preferredBackupWindow, preferredMaintenanceWindow, replicationSourceIdentifier, tags, storageEncrypted, kmsKeyId, preSignedUrl, enableIAMDatabaseAuthentication, enableCloudwatchLogsExports, deletionProtection, serverlessV2ScalingConfiguration, globalClusterIdentifier, _callback);
        Type localVarReturnType = new TypeToken<CreateDBClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateDBClusterEndpoint
     * @param dbClusterIdentifier The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string. (required)
     * @param dbClusterEndpointIdentifier The identifier to use for the new endpoint. This parameter is stored as a lowercase string. (required)
     * @param endpointType The type of the endpoint. One of: &lt;code&gt;READER&lt;/code&gt;, &lt;code&gt;WRITER&lt;/code&gt;, &lt;code&gt;ANY&lt;/code&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param staticMembers List of DB instance identifiers that are part of the custom endpoint group. (optional)
     * @param excludedMembers List of DB instance identifiers that aren&#39;t part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty. (optional)
     * @param tags The tags to be assigned to the Amazon Neptune resource. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterEndpointQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterEndpointAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateDBClusterEndpointCall(String dbClusterIdentifier, String dbClusterEndpointIdentifier, String endpointType, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> staticMembers, List<String> excludedMembers, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateDBClusterEndpoint";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterIdentifier", dbClusterIdentifier));
        }

        if (dbClusterEndpointIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterEndpointIdentifier", dbClusterEndpointIdentifier));
        }

        if (endpointType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndpointType", endpointType));
        }

        if (staticMembers != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "StaticMembers", staticMembers));
        }

        if (excludedMembers != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ExcludedMembers", excludedMembers));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateDBClusterEndpointValidateBeforeCall(String dbClusterIdentifier, String dbClusterEndpointIdentifier, String endpointType, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> staticMembers, List<String> excludedMembers, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterIdentifier' is set
        if (dbClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterIdentifier' when calling gETCreateDBClusterEndpoint(Async)");
        }

        // verify the required parameter 'dbClusterEndpointIdentifier' is set
        if (dbClusterEndpointIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterEndpointIdentifier' when calling gETCreateDBClusterEndpoint(Async)");
        }

        // verify the required parameter 'endpointType' is set
        if (endpointType == null) {
            throw new ApiException("Missing the required parameter 'endpointType' when calling gETCreateDBClusterEndpoint(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateDBClusterEndpoint(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateDBClusterEndpoint(Async)");
        }

        return gETCreateDBClusterEndpointCall(dbClusterIdentifier, dbClusterEndpointIdentifier, endpointType, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, staticMembers, excludedMembers, tags, _callback);

    }

    /**
     * 
     * Creates a new custom endpoint and associates it with an Amazon Neptune DB cluster.
     * @param dbClusterIdentifier The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string. (required)
     * @param dbClusterEndpointIdentifier The identifier to use for the new endpoint. This parameter is stored as a lowercase string. (required)
     * @param endpointType The type of the endpoint. One of: &lt;code&gt;READER&lt;/code&gt;, &lt;code&gt;WRITER&lt;/code&gt;, &lt;code&gt;ANY&lt;/code&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param staticMembers List of DB instance identifiers that are part of the custom endpoint group. (optional)
     * @param excludedMembers List of DB instance identifiers that aren&#39;t part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty. (optional)
     * @param tags The tags to be assigned to the Amazon Neptune resource. (optional)
     * @return CreateDBClusterEndpointOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterEndpointQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterEndpointAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateDBClusterEndpointOutput gETCreateDBClusterEndpoint(String dbClusterIdentifier, String dbClusterEndpointIdentifier, String endpointType, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> staticMembers, List<String> excludedMembers, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        ApiResponse<CreateDBClusterEndpointOutput> localVarResp = gETCreateDBClusterEndpointWithHttpInfo(dbClusterIdentifier, dbClusterEndpointIdentifier, endpointType, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, staticMembers, excludedMembers, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new custom endpoint and associates it with an Amazon Neptune DB cluster.
     * @param dbClusterIdentifier The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string. (required)
     * @param dbClusterEndpointIdentifier The identifier to use for the new endpoint. This parameter is stored as a lowercase string. (required)
     * @param endpointType The type of the endpoint. One of: &lt;code&gt;READER&lt;/code&gt;, &lt;code&gt;WRITER&lt;/code&gt;, &lt;code&gt;ANY&lt;/code&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param staticMembers List of DB instance identifiers that are part of the custom endpoint group. (optional)
     * @param excludedMembers List of DB instance identifiers that aren&#39;t part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty. (optional)
     * @param tags The tags to be assigned to the Amazon Neptune resource. (optional)
     * @return ApiResponse&lt;CreateDBClusterEndpointOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterEndpointQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterEndpointAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDBClusterEndpointOutput> gETCreateDBClusterEndpointWithHttpInfo(String dbClusterIdentifier, String dbClusterEndpointIdentifier, String endpointType, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> staticMembers, List<String> excludedMembers, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        okhttp3.Call localVarCall = gETCreateDBClusterEndpointValidateBeforeCall(dbClusterIdentifier, dbClusterEndpointIdentifier, endpointType, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, staticMembers, excludedMembers, tags, null);
        Type localVarReturnType = new TypeToken<CreateDBClusterEndpointOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new custom endpoint and associates it with an Amazon Neptune DB cluster.
     * @param dbClusterIdentifier The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string. (required)
     * @param dbClusterEndpointIdentifier The identifier to use for the new endpoint. This parameter is stored as a lowercase string. (required)
     * @param endpointType The type of the endpoint. One of: &lt;code&gt;READER&lt;/code&gt;, &lt;code&gt;WRITER&lt;/code&gt;, &lt;code&gt;ANY&lt;/code&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param staticMembers List of DB instance identifiers that are part of the custom endpoint group. (optional)
     * @param excludedMembers List of DB instance identifiers that aren&#39;t part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty. (optional)
     * @param tags The tags to be assigned to the Amazon Neptune resource. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterEndpointQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterEndpointAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateDBClusterEndpointAsync(String dbClusterIdentifier, String dbClusterEndpointIdentifier, String endpointType, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> staticMembers, List<String> excludedMembers, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback<CreateDBClusterEndpointOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateDBClusterEndpointValidateBeforeCall(dbClusterIdentifier, dbClusterEndpointIdentifier, endpointType, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, staticMembers, excludedMembers, tags, _callback);
        Type localVarReturnType = new TypeToken<CreateDBClusterEndpointOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateDBClusterParameterGroup
     * @param dbClusterParameterGroupName &lt;p&gt;The name of the DB cluster parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the name of an existing DBClusterParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;This value is stored as a lowercase string.&lt;/p&gt; &lt;/note&gt; (required)
     * @param dbParameterGroupFamily The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family. (required)
     * @param description The description for the DB cluster parameter group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the new DB cluster parameter group. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateDBClusterParameterGroupCall(String dbClusterParameterGroupName, String dbParameterGroupFamily, String description, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateDBClusterParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterParameterGroupName", dbClusterParameterGroupName));
        }

        if (dbParameterGroupFamily != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBParameterGroupFamily", dbParameterGroupFamily));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Description", description));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateDBClusterParameterGroupValidateBeforeCall(String dbClusterParameterGroupName, String dbParameterGroupFamily, String description, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterParameterGroupName' is set
        if (dbClusterParameterGroupName == null) {
            throw new ApiException("Missing the required parameter 'dbClusterParameterGroupName' when calling gETCreateDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'dbParameterGroupFamily' is set
        if (dbParameterGroupFamily == null) {
            throw new ApiException("Missing the required parameter 'dbParameterGroupFamily' when calling gETCreateDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling gETCreateDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateDBClusterParameterGroup(Async)");
        }

        return gETCreateDBClusterParameterGroupCall(dbClusterParameterGroupName, dbParameterGroupFamily, description, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new DB cluster parameter group.&lt;/p&gt; &lt;p&gt;Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.&lt;/p&gt; &lt;p&gt; A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using &lt;a&gt;ModifyDBClusterParameterGroup&lt;/a&gt;. Once you&#39;ve created a DB cluster parameter group, you need to associate it with your DB cluster using &lt;a&gt;ModifyDBCluster&lt;/a&gt;. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.&lt;/p&gt; &lt;important&gt; &lt;p&gt;After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/rds/\&quot;&gt;Amazon Neptune console&lt;/a&gt; or the &lt;a&gt;DescribeDBClusterParameters&lt;/a&gt; command to verify that your DB cluster parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     * @param dbClusterParameterGroupName &lt;p&gt;The name of the DB cluster parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the name of an existing DBClusterParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;This value is stored as a lowercase string.&lt;/p&gt; &lt;/note&gt; (required)
     * @param dbParameterGroupFamily The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family. (required)
     * @param description The description for the DB cluster parameter group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the new DB cluster parameter group. (optional)
     * @return CreateDBClusterParameterGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateDBClusterParameterGroupResult gETCreateDBClusterParameterGroup(String dbClusterParameterGroupName, String dbParameterGroupFamily, String description, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        ApiResponse<CreateDBClusterParameterGroupResult> localVarResp = gETCreateDBClusterParameterGroupWithHttpInfo(dbClusterParameterGroupName, dbParameterGroupFamily, description, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new DB cluster parameter group.&lt;/p&gt; &lt;p&gt;Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.&lt;/p&gt; &lt;p&gt; A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using &lt;a&gt;ModifyDBClusterParameterGroup&lt;/a&gt;. Once you&#39;ve created a DB cluster parameter group, you need to associate it with your DB cluster using &lt;a&gt;ModifyDBCluster&lt;/a&gt;. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.&lt;/p&gt; &lt;important&gt; &lt;p&gt;After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/rds/\&quot;&gt;Amazon Neptune console&lt;/a&gt; or the &lt;a&gt;DescribeDBClusterParameters&lt;/a&gt; command to verify that your DB cluster parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     * @param dbClusterParameterGroupName &lt;p&gt;The name of the DB cluster parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the name of an existing DBClusterParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;This value is stored as a lowercase string.&lt;/p&gt; &lt;/note&gt; (required)
     * @param dbParameterGroupFamily The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family. (required)
     * @param description The description for the DB cluster parameter group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the new DB cluster parameter group. (optional)
     * @return ApiResponse&lt;CreateDBClusterParameterGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDBClusterParameterGroupResult> gETCreateDBClusterParameterGroupWithHttpInfo(String dbClusterParameterGroupName, String dbParameterGroupFamily, String description, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        okhttp3.Call localVarCall = gETCreateDBClusterParameterGroupValidateBeforeCall(dbClusterParameterGroupName, dbParameterGroupFamily, description, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, null);
        Type localVarReturnType = new TypeToken<CreateDBClusterParameterGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new DB cluster parameter group.&lt;/p&gt; &lt;p&gt;Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.&lt;/p&gt; &lt;p&gt; A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using &lt;a&gt;ModifyDBClusterParameterGroup&lt;/a&gt;. Once you&#39;ve created a DB cluster parameter group, you need to associate it with your DB cluster using &lt;a&gt;ModifyDBCluster&lt;/a&gt;. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.&lt;/p&gt; &lt;important&gt; &lt;p&gt;After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/rds/\&quot;&gt;Amazon Neptune console&lt;/a&gt; or the &lt;a&gt;DescribeDBClusterParameters&lt;/a&gt; command to verify that your DB cluster parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     * @param dbClusterParameterGroupName &lt;p&gt;The name of the DB cluster parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the name of an existing DBClusterParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;This value is stored as a lowercase string.&lt;/p&gt; &lt;/note&gt; (required)
     * @param dbParameterGroupFamily The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family. (required)
     * @param description The description for the DB cluster parameter group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the new DB cluster parameter group. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateDBClusterParameterGroupAsync(String dbClusterParameterGroupName, String dbParameterGroupFamily, String description, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback<CreateDBClusterParameterGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateDBClusterParameterGroupValidateBeforeCall(dbClusterParameterGroupName, dbParameterGroupFamily, description, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, _callback);
        Type localVarReturnType = new TypeToken<CreateDBClusterParameterGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateDBClusterSnapshot
     * @param dbClusterSnapshotIdentifier &lt;p&gt;The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster1-snapshot1&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbClusterIdentifier &lt;p&gt;The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing DBCluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster1&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the DB cluster snapshot. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateDBClusterSnapshotCall(String dbClusterSnapshotIdentifier, String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateDBClusterSnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterSnapshotIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterSnapshotIdentifier", dbClusterSnapshotIdentifier));
        }

        if (dbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterIdentifier", dbClusterIdentifier));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateDBClusterSnapshotValidateBeforeCall(String dbClusterSnapshotIdentifier, String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterSnapshotIdentifier' is set
        if (dbClusterSnapshotIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterSnapshotIdentifier' when calling gETCreateDBClusterSnapshot(Async)");
        }

        // verify the required parameter 'dbClusterIdentifier' is set
        if (dbClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterIdentifier' when calling gETCreateDBClusterSnapshot(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateDBClusterSnapshot(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateDBClusterSnapshot(Async)");
        }

        return gETCreateDBClusterSnapshotCall(dbClusterSnapshotIdentifier, dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, _callback);

    }

    /**
     * 
     * Creates a snapshot of a DB cluster.
     * @param dbClusterSnapshotIdentifier &lt;p&gt;The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster1-snapshot1&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbClusterIdentifier &lt;p&gt;The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing DBCluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster1&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the DB cluster snapshot. (optional)
     * @return CreateDBClusterSnapshotResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateDBClusterSnapshotResult gETCreateDBClusterSnapshot(String dbClusterSnapshotIdentifier, String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        ApiResponse<CreateDBClusterSnapshotResult> localVarResp = gETCreateDBClusterSnapshotWithHttpInfo(dbClusterSnapshotIdentifier, dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a snapshot of a DB cluster.
     * @param dbClusterSnapshotIdentifier &lt;p&gt;The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster1-snapshot1&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbClusterIdentifier &lt;p&gt;The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing DBCluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster1&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the DB cluster snapshot. (optional)
     * @return ApiResponse&lt;CreateDBClusterSnapshotResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDBClusterSnapshotResult> gETCreateDBClusterSnapshotWithHttpInfo(String dbClusterSnapshotIdentifier, String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        okhttp3.Call localVarCall = gETCreateDBClusterSnapshotValidateBeforeCall(dbClusterSnapshotIdentifier, dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, null);
        Type localVarReturnType = new TypeToken<CreateDBClusterSnapshotResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a snapshot of a DB cluster.
     * @param dbClusterSnapshotIdentifier &lt;p&gt;The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster1-snapshot1&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbClusterIdentifier &lt;p&gt;The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing DBCluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster1&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the DB cluster snapshot. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateDBClusterSnapshotAsync(String dbClusterSnapshotIdentifier, String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback<CreateDBClusterSnapshotResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateDBClusterSnapshotValidateBeforeCall(dbClusterSnapshotIdentifier, dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, _callback);
        Type localVarReturnType = new TypeToken<CreateDBClusterSnapshotResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateDBInstance
     * @param dbInstanceIdentifier &lt;p&gt;The DB instance identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;mydbinstance&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbInstanceClass The compute and memory capacity of the DB instance, for example, &lt;code&gt;db.m4.large&lt;/code&gt;. Not all DB instance classes are available in all Amazon Regions. (required)
     * @param engine &lt;p&gt;The name of the database engine to be used for this instance.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;neptune&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbClusterIdentifier &lt;p&gt;The identifier of the DB cluster that the instance will belong to.&lt;/p&gt; &lt;p&gt;For information on creating a DB cluster, see &lt;a&gt;CreateDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Type: String&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbName Not supported. (optional)
     * @param allocatedStorage Not supported by Neptune. (optional)
     * @param masterUsername Not supported by Neptune. (optional)
     * @param masterUserPassword Not supported by Neptune. (optional)
     * @param dbSecurityGroups &lt;p&gt;A list of DB security groups to associate with this DB instance.&lt;/p&gt; &lt;p&gt;Default: The default DB security group for the database engine.&lt;/p&gt; (optional)
     * @param vpcSecurityGroupIds &lt;p&gt;A list of EC2 VPC security groups to associate with this DB instance.&lt;/p&gt; &lt;p&gt;Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see &lt;a&gt;CreateDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Default: The default EC2 VPC security group for the DB subnet group&#39;s VPC.&lt;/p&gt; (optional)
     * @param availabilityZone &lt;p&gt; The EC2 Availability Zone that the DB instance is created in&lt;/p&gt; &lt;p&gt;Default: A random, system-chosen Availability Zone in the endpoint&#39;s Amazon Region.&lt;/p&gt; &lt;p&gt; Example: &lt;code&gt;us-east-1d&lt;/code&gt; &lt;/p&gt; &lt;p&gt; Constraint: The AvailabilityZone parameter can&#39;t be specified if the MultiAZ parameter is set to &lt;code&gt;true&lt;/code&gt;. The specified Availability Zone must be in the same Amazon Region as the current endpoint.&lt;/p&gt; (optional)
     * @param dbSubnetGroupName &lt;p&gt;A DB subnet group to associate with this DB instance.&lt;/p&gt; &lt;p&gt;If there is no DB subnet group, then it is a non-VPC DB instance.&lt;/p&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;p&gt; Format: &lt;code&gt;ddd:hh24:mi-ddd:hh24:mi&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region, occurring on a random day of the week.&lt;/p&gt; &lt;p&gt;Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.&lt;/p&gt; &lt;p&gt;Constraints: Minimum 30-minute window.&lt;/p&gt; (optional)
     * @param dbParameterGroupName &lt;p&gt;The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be 1 to 255 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param backupRetentionPeriod &lt;p&gt;The number of days for which automated backups are retained.&lt;/p&gt; &lt;p&gt;Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see &lt;a&gt;CreateDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be a value from 0 to 35&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be set to 0 if the DB instance is a source to Read Replicas&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param preferredBackupWindow &lt;p&gt; The daily time range during which automated backups are created.&lt;/p&gt; &lt;p&gt;Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see &lt;a&gt;CreateDBCluster&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param port &lt;p&gt;The port number on which the database accepts connections.&lt;/p&gt; &lt;p&gt;Not applicable. The port is managed by the DB cluster. For more information, see &lt;a&gt;CreateDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; Default: &lt;code&gt;8182&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Type: Integer&lt;/p&gt; (optional)
     * @param multiAZ Specifies if the DB instance is a Multi-AZ deployment. You can&#39;t set the AvailabilityZone parameter if the MultiAZ parameter is set to true. (optional)
     * @param engineVersion The version number of the database engine to use. Currently, setting this parameter has no effect. (optional)
     * @param autoMinorVersionUpgrade &lt;p&gt;Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;true&lt;/code&gt; &lt;/p&gt; (optional)
     * @param licenseModel &lt;p&gt;License model information for this DB instance.&lt;/p&gt; &lt;p&gt; Valid values: &lt;code&gt;license-included&lt;/code&gt; | &lt;code&gt;bring-your-own-license&lt;/code&gt; | &lt;code&gt;general-public-license&lt;/code&gt; &lt;/p&gt; (optional)
     * @param iops The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. (optional)
     * @param optionGroupName  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param characterSetName  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param publiclyAccessible This flag should no longer be used. (optional)
     * @param tags The tags to assign to the new instance. (optional)
     * @param storageType &lt;p&gt;Specifies the storage type to be associated with the DB instance.&lt;/p&gt; &lt;p&gt;Not applicable. Storage is managed by the DB Cluster.&lt;/p&gt; (optional)
     * @param tdeCredentialArn The ARN from the key store with which to associate the instance for TDE encryption. (optional)
     * @param tdeCredentialPassword The password for the given ARN from the key store in order to access the device. (optional)
     * @param storageEncrypted &lt;p&gt;Specifies whether the DB instance is encrypted.&lt;/p&gt; &lt;p&gt;Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see &lt;a&gt;CreateDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Default: false&lt;/p&gt; (optional)
     * @param kmsKeyId &lt;p&gt;The Amazon KMS key identifier for an encrypted DB instance.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same Amazon account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.&lt;/p&gt; &lt;p&gt;Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see &lt;a&gt;CreateDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If the &lt;code&gt;StorageEncrypted&lt;/code&gt; parameter is true, and you do not specify a value for the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter, then Amazon Neptune will use your default encryption key. Amazon KMS creates the default encryption key for your Amazon account. Your Amazon account has a different default encryption key for each Amazon Region.&lt;/p&gt; (optional)
     * @param domain Specify the Active Directory Domain to create the instance in. (optional)
     * @param copyTagsToSnapshot True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false. (optional)
     * @param monitoringInterval &lt;p&gt;The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;MonitoringRoleArn&lt;/code&gt; is specified, then you must also set &lt;code&gt;MonitoringInterval&lt;/code&gt; to a value other than 0.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;0, 1, 5, 10, 15, 30, 60&lt;/code&gt; &lt;/p&gt; (optional)
     * @param monitoringRoleArn &lt;p&gt;The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, &lt;code&gt;arn:aws:iam:123456789012:role/emaccess&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;MonitoringInterval&lt;/code&gt; is set to a value other than 0, then you must supply a &lt;code&gt;MonitoringRoleArn&lt;/code&gt; value.&lt;/p&gt; (optional)
     * @param domainIAMRoleName Specify the name of the IAM role to be used when making API calls to the Directory Service. (optional)
     * @param promotionTier &lt;p&gt;A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. &lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Valid Values: 0 - 15&lt;/p&gt; (optional)
     * @param timezone The time zone of the DB instance. (optional)
     * @param enableIAMDatabaseAuthentication Not supported by Neptune (ignored). (optional)
     * @param enablePerformanceInsights  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param performanceInsightsKMSKeyId  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param enableCloudwatchLogsExports The list of log types that need to be enabled for exporting to CloudWatch Logs. (optional)
     * @param deletionProtection &lt;p&gt;A value that indicates whether the DB instance has deletion protection enabled. The database can&#39;t be deleted when deletion protection is enabled. By default, deletion protection is disabled. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/userguide/manage-console-instances-delete.html\&quot;&gt;Deleting a DB Instance&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;DB instances in a DB cluster can be deleted even when deletion protection is enabled in their parent DB cluster.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InstanceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> ProvisionedIopsNotAvailableInAZFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> DomainNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateDBInstanceCall(String dbInstanceIdentifier, String dbInstanceClass, String engine, String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbName, Integer allocatedStorage, String masterUsername, String masterUserPassword, List<String> dbSecurityGroups, List<String> vpcSecurityGroupIds, String availabilityZone, String dbSubnetGroupName, String preferredMaintenanceWindow, String dbParameterGroupName, Integer backupRetentionPeriod, String preferredBackupWindow, Integer port, Boolean multiAZ, String engineVersion, Boolean autoMinorVersionUpgrade, String licenseModel, Integer iops, String optionGroupName, String characterSetName, Boolean publiclyAccessible, List<GETAddTagsToResourceTagsParameterInner> tags, String storageType, String tdeCredentialArn, String tdeCredentialPassword, Boolean storageEncrypted, String kmsKeyId, String domain, Boolean copyTagsToSnapshot, Integer monitoringInterval, String monitoringRoleArn, String domainIAMRoleName, Integer promotionTier, String timezone, Boolean enableIAMDatabaseAuthentication, Boolean enablePerformanceInsights, String performanceInsightsKMSKeyId, List<String> enableCloudwatchLogsExports, Boolean deletionProtection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateDBInstance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBName", dbName));
        }

        if (dbInstanceIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBInstanceIdentifier", dbInstanceIdentifier));
        }

        if (allocatedStorage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AllocatedStorage", allocatedStorage));
        }

        if (dbInstanceClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBInstanceClass", dbInstanceClass));
        }

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Engine", engine));
        }

        if (masterUsername != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MasterUsername", masterUsername));
        }

        if (masterUserPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MasterUserPassword", masterUserPassword));
        }

        if (dbSecurityGroups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "DBSecurityGroups", dbSecurityGroups));
        }

        if (vpcSecurityGroupIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "VpcSecurityGroupIds", vpcSecurityGroupIds));
        }

        if (availabilityZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AvailabilityZone", availabilityZone));
        }

        if (dbSubnetGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBSubnetGroupName", dbSubnetGroupName));
        }

        if (preferredMaintenanceWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PreferredMaintenanceWindow", preferredMaintenanceWindow));
        }

        if (dbParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBParameterGroupName", dbParameterGroupName));
        }

        if (backupRetentionPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("BackupRetentionPeriod", backupRetentionPeriod));
        }

        if (preferredBackupWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PreferredBackupWindow", preferredBackupWindow));
        }

        if (port != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Port", port));
        }

        if (multiAZ != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MultiAZ", multiAZ));
        }

        if (engineVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EngineVersion", engineVersion));
        }

        if (autoMinorVersionUpgrade != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoMinorVersionUpgrade", autoMinorVersionUpgrade));
        }

        if (licenseModel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LicenseModel", licenseModel));
        }

        if (iops != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Iops", iops));
        }

        if (optionGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OptionGroupName", optionGroupName));
        }

        if (characterSetName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CharacterSetName", characterSetName));
        }

        if (publiclyAccessible != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PubliclyAccessible", publiclyAccessible));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (dbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterIdentifier", dbClusterIdentifier));
        }

        if (storageType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StorageType", storageType));
        }

        if (tdeCredentialArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TdeCredentialArn", tdeCredentialArn));
        }

        if (tdeCredentialPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TdeCredentialPassword", tdeCredentialPassword));
        }

        if (storageEncrypted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StorageEncrypted", storageEncrypted));
        }

        if (kmsKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("KmsKeyId", kmsKeyId));
        }

        if (domain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Domain", domain));
        }

        if (copyTagsToSnapshot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CopyTagsToSnapshot", copyTagsToSnapshot));
        }

        if (monitoringInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MonitoringInterval", monitoringInterval));
        }

        if (monitoringRoleArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MonitoringRoleArn", monitoringRoleArn));
        }

        if (domainIAMRoleName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DomainIAMRoleName", domainIAMRoleName));
        }

        if (promotionTier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PromotionTier", promotionTier));
        }

        if (timezone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Timezone", timezone));
        }

        if (enableIAMDatabaseAuthentication != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnableIAMDatabaseAuthentication", enableIAMDatabaseAuthentication));
        }

        if (enablePerformanceInsights != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnablePerformanceInsights", enablePerformanceInsights));
        }

        if (performanceInsightsKMSKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerformanceInsightsKMSKeyId", performanceInsightsKMSKeyId));
        }

        if (enableCloudwatchLogsExports != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "EnableCloudwatchLogsExports", enableCloudwatchLogsExports));
        }

        if (deletionProtection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DeletionProtection", deletionProtection));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateDBInstanceValidateBeforeCall(String dbInstanceIdentifier, String dbInstanceClass, String engine, String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbName, Integer allocatedStorage, String masterUsername, String masterUserPassword, List<String> dbSecurityGroups, List<String> vpcSecurityGroupIds, String availabilityZone, String dbSubnetGroupName, String preferredMaintenanceWindow, String dbParameterGroupName, Integer backupRetentionPeriod, String preferredBackupWindow, Integer port, Boolean multiAZ, String engineVersion, Boolean autoMinorVersionUpgrade, String licenseModel, Integer iops, String optionGroupName, String characterSetName, Boolean publiclyAccessible, List<GETAddTagsToResourceTagsParameterInner> tags, String storageType, String tdeCredentialArn, String tdeCredentialPassword, Boolean storageEncrypted, String kmsKeyId, String domain, Boolean copyTagsToSnapshot, Integer monitoringInterval, String monitoringRoleArn, String domainIAMRoleName, Integer promotionTier, String timezone, Boolean enableIAMDatabaseAuthentication, Boolean enablePerformanceInsights, String performanceInsightsKMSKeyId, List<String> enableCloudwatchLogsExports, Boolean deletionProtection, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbInstanceIdentifier' is set
        if (dbInstanceIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbInstanceIdentifier' when calling gETCreateDBInstance(Async)");
        }

        // verify the required parameter 'dbInstanceClass' is set
        if (dbInstanceClass == null) {
            throw new ApiException("Missing the required parameter 'dbInstanceClass' when calling gETCreateDBInstance(Async)");
        }

        // verify the required parameter 'engine' is set
        if (engine == null) {
            throw new ApiException("Missing the required parameter 'engine' when calling gETCreateDBInstance(Async)");
        }

        // verify the required parameter 'dbClusterIdentifier' is set
        if (dbClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterIdentifier' when calling gETCreateDBInstance(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateDBInstance(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateDBInstance(Async)");
        }

        return gETCreateDBInstanceCall(dbInstanceIdentifier, dbInstanceClass, engine, dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbName, allocatedStorage, masterUsername, masterUserPassword, dbSecurityGroups, vpcSecurityGroupIds, availabilityZone, dbSubnetGroupName, preferredMaintenanceWindow, dbParameterGroupName, backupRetentionPeriod, preferredBackupWindow, port, multiAZ, engineVersion, autoMinorVersionUpgrade, licenseModel, iops, optionGroupName, characterSetName, publiclyAccessible, tags, storageType, tdeCredentialArn, tdeCredentialPassword, storageEncrypted, kmsKeyId, domain, copyTagsToSnapshot, monitoringInterval, monitoringRoleArn, domainIAMRoleName, promotionTier, timezone, enableIAMDatabaseAuthentication, enablePerformanceInsights, performanceInsightsKMSKeyId, enableCloudwatchLogsExports, deletionProtection, _callback);

    }

    /**
     * 
     * Creates a new DB instance.
     * @param dbInstanceIdentifier &lt;p&gt;The DB instance identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;mydbinstance&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbInstanceClass The compute and memory capacity of the DB instance, for example, &lt;code&gt;db.m4.large&lt;/code&gt;. Not all DB instance classes are available in all Amazon Regions. (required)
     * @param engine &lt;p&gt;The name of the database engine to be used for this instance.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;neptune&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbClusterIdentifier &lt;p&gt;The identifier of the DB cluster that the instance will belong to.&lt;/p&gt; &lt;p&gt;For information on creating a DB cluster, see &lt;a&gt;CreateDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Type: String&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbName Not supported. (optional)
     * @param allocatedStorage Not supported by Neptune. (optional)
     * @param masterUsername Not supported by Neptune. (optional)
     * @param masterUserPassword Not supported by Neptune. (optional)
     * @param dbSecurityGroups &lt;p&gt;A list of DB security groups to associate with this DB instance.&lt;/p&gt; &lt;p&gt;Default: The default DB security group for the database engine.&lt;/p&gt; (optional)
     * @param vpcSecurityGroupIds &lt;p&gt;A list of EC2 VPC security groups to associate with this DB instance.&lt;/p&gt; &lt;p&gt;Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see &lt;a&gt;CreateDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Default: The default EC2 VPC security group for the DB subnet group&#39;s VPC.&lt;/p&gt; (optional)
     * @param availabilityZone &lt;p&gt; The EC2 Availability Zone that the DB instance is created in&lt;/p&gt; &lt;p&gt;Default: A random, system-chosen Availability Zone in the endpoint&#39;s Amazon Region.&lt;/p&gt; &lt;p&gt; Example: &lt;code&gt;us-east-1d&lt;/code&gt; &lt;/p&gt; &lt;p&gt; Constraint: The AvailabilityZone parameter can&#39;t be specified if the MultiAZ parameter is set to &lt;code&gt;true&lt;/code&gt;. The specified Availability Zone must be in the same Amazon Region as the current endpoint.&lt;/p&gt; (optional)
     * @param dbSubnetGroupName &lt;p&gt;A DB subnet group to associate with this DB instance.&lt;/p&gt; &lt;p&gt;If there is no DB subnet group, then it is a non-VPC DB instance.&lt;/p&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;p&gt; Format: &lt;code&gt;ddd:hh24:mi-ddd:hh24:mi&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region, occurring on a random day of the week.&lt;/p&gt; &lt;p&gt;Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.&lt;/p&gt; &lt;p&gt;Constraints: Minimum 30-minute window.&lt;/p&gt; (optional)
     * @param dbParameterGroupName &lt;p&gt;The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be 1 to 255 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param backupRetentionPeriod &lt;p&gt;The number of days for which automated backups are retained.&lt;/p&gt; &lt;p&gt;Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see &lt;a&gt;CreateDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be a value from 0 to 35&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be set to 0 if the DB instance is a source to Read Replicas&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param preferredBackupWindow &lt;p&gt; The daily time range during which automated backups are created.&lt;/p&gt; &lt;p&gt;Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see &lt;a&gt;CreateDBCluster&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param port &lt;p&gt;The port number on which the database accepts connections.&lt;/p&gt; &lt;p&gt;Not applicable. The port is managed by the DB cluster. For more information, see &lt;a&gt;CreateDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; Default: &lt;code&gt;8182&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Type: Integer&lt;/p&gt; (optional)
     * @param multiAZ Specifies if the DB instance is a Multi-AZ deployment. You can&#39;t set the AvailabilityZone parameter if the MultiAZ parameter is set to true. (optional)
     * @param engineVersion The version number of the database engine to use. Currently, setting this parameter has no effect. (optional)
     * @param autoMinorVersionUpgrade &lt;p&gt;Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;true&lt;/code&gt; &lt;/p&gt; (optional)
     * @param licenseModel &lt;p&gt;License model information for this DB instance.&lt;/p&gt; &lt;p&gt; Valid values: &lt;code&gt;license-included&lt;/code&gt; | &lt;code&gt;bring-your-own-license&lt;/code&gt; | &lt;code&gt;general-public-license&lt;/code&gt; &lt;/p&gt; (optional)
     * @param iops The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. (optional)
     * @param optionGroupName  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param characterSetName  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param publiclyAccessible This flag should no longer be used. (optional)
     * @param tags The tags to assign to the new instance. (optional)
     * @param storageType &lt;p&gt;Specifies the storage type to be associated with the DB instance.&lt;/p&gt; &lt;p&gt;Not applicable. Storage is managed by the DB Cluster.&lt;/p&gt; (optional)
     * @param tdeCredentialArn The ARN from the key store with which to associate the instance for TDE encryption. (optional)
     * @param tdeCredentialPassword The password for the given ARN from the key store in order to access the device. (optional)
     * @param storageEncrypted &lt;p&gt;Specifies whether the DB instance is encrypted.&lt;/p&gt; &lt;p&gt;Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see &lt;a&gt;CreateDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Default: false&lt;/p&gt; (optional)
     * @param kmsKeyId &lt;p&gt;The Amazon KMS key identifier for an encrypted DB instance.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same Amazon account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.&lt;/p&gt; &lt;p&gt;Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see &lt;a&gt;CreateDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If the &lt;code&gt;StorageEncrypted&lt;/code&gt; parameter is true, and you do not specify a value for the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter, then Amazon Neptune will use your default encryption key. Amazon KMS creates the default encryption key for your Amazon account. Your Amazon account has a different default encryption key for each Amazon Region.&lt;/p&gt; (optional)
     * @param domain Specify the Active Directory Domain to create the instance in. (optional)
     * @param copyTagsToSnapshot True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false. (optional)
     * @param monitoringInterval &lt;p&gt;The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;MonitoringRoleArn&lt;/code&gt; is specified, then you must also set &lt;code&gt;MonitoringInterval&lt;/code&gt; to a value other than 0.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;0, 1, 5, 10, 15, 30, 60&lt;/code&gt; &lt;/p&gt; (optional)
     * @param monitoringRoleArn &lt;p&gt;The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, &lt;code&gt;arn:aws:iam:123456789012:role/emaccess&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;MonitoringInterval&lt;/code&gt; is set to a value other than 0, then you must supply a &lt;code&gt;MonitoringRoleArn&lt;/code&gt; value.&lt;/p&gt; (optional)
     * @param domainIAMRoleName Specify the name of the IAM role to be used when making API calls to the Directory Service. (optional)
     * @param promotionTier &lt;p&gt;A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. &lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Valid Values: 0 - 15&lt;/p&gt; (optional)
     * @param timezone The time zone of the DB instance. (optional)
     * @param enableIAMDatabaseAuthentication Not supported by Neptune (ignored). (optional)
     * @param enablePerformanceInsights  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param performanceInsightsKMSKeyId  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param enableCloudwatchLogsExports The list of log types that need to be enabled for exporting to CloudWatch Logs. (optional)
     * @param deletionProtection &lt;p&gt;A value that indicates whether the DB instance has deletion protection enabled. The database can&#39;t be deleted when deletion protection is enabled. By default, deletion protection is disabled. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/userguide/manage-console-instances-delete.html\&quot;&gt;Deleting a DB Instance&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;DB instances in a DB cluster can be deleted even when deletion protection is enabled in their parent DB cluster.&lt;/p&gt; (optional)
     * @return CreateDBInstanceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InstanceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> ProvisionedIopsNotAvailableInAZFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> DomainNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateDBInstanceResult gETCreateDBInstance(String dbInstanceIdentifier, String dbInstanceClass, String engine, String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbName, Integer allocatedStorage, String masterUsername, String masterUserPassword, List<String> dbSecurityGroups, List<String> vpcSecurityGroupIds, String availabilityZone, String dbSubnetGroupName, String preferredMaintenanceWindow, String dbParameterGroupName, Integer backupRetentionPeriod, String preferredBackupWindow, Integer port, Boolean multiAZ, String engineVersion, Boolean autoMinorVersionUpgrade, String licenseModel, Integer iops, String optionGroupName, String characterSetName, Boolean publiclyAccessible, List<GETAddTagsToResourceTagsParameterInner> tags, String storageType, String tdeCredentialArn, String tdeCredentialPassword, Boolean storageEncrypted, String kmsKeyId, String domain, Boolean copyTagsToSnapshot, Integer monitoringInterval, String monitoringRoleArn, String domainIAMRoleName, Integer promotionTier, String timezone, Boolean enableIAMDatabaseAuthentication, Boolean enablePerformanceInsights, String performanceInsightsKMSKeyId, List<String> enableCloudwatchLogsExports, Boolean deletionProtection) throws ApiException {
        ApiResponse<CreateDBInstanceResult> localVarResp = gETCreateDBInstanceWithHttpInfo(dbInstanceIdentifier, dbInstanceClass, engine, dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbName, allocatedStorage, masterUsername, masterUserPassword, dbSecurityGroups, vpcSecurityGroupIds, availabilityZone, dbSubnetGroupName, preferredMaintenanceWindow, dbParameterGroupName, backupRetentionPeriod, preferredBackupWindow, port, multiAZ, engineVersion, autoMinorVersionUpgrade, licenseModel, iops, optionGroupName, characterSetName, publiclyAccessible, tags, storageType, tdeCredentialArn, tdeCredentialPassword, storageEncrypted, kmsKeyId, domain, copyTagsToSnapshot, monitoringInterval, monitoringRoleArn, domainIAMRoleName, promotionTier, timezone, enableIAMDatabaseAuthentication, enablePerformanceInsights, performanceInsightsKMSKeyId, enableCloudwatchLogsExports, deletionProtection);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new DB instance.
     * @param dbInstanceIdentifier &lt;p&gt;The DB instance identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;mydbinstance&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbInstanceClass The compute and memory capacity of the DB instance, for example, &lt;code&gt;db.m4.large&lt;/code&gt;. Not all DB instance classes are available in all Amazon Regions. (required)
     * @param engine &lt;p&gt;The name of the database engine to be used for this instance.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;neptune&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbClusterIdentifier &lt;p&gt;The identifier of the DB cluster that the instance will belong to.&lt;/p&gt; &lt;p&gt;For information on creating a DB cluster, see &lt;a&gt;CreateDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Type: String&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbName Not supported. (optional)
     * @param allocatedStorage Not supported by Neptune. (optional)
     * @param masterUsername Not supported by Neptune. (optional)
     * @param masterUserPassword Not supported by Neptune. (optional)
     * @param dbSecurityGroups &lt;p&gt;A list of DB security groups to associate with this DB instance.&lt;/p&gt; &lt;p&gt;Default: The default DB security group for the database engine.&lt;/p&gt; (optional)
     * @param vpcSecurityGroupIds &lt;p&gt;A list of EC2 VPC security groups to associate with this DB instance.&lt;/p&gt; &lt;p&gt;Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see &lt;a&gt;CreateDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Default: The default EC2 VPC security group for the DB subnet group&#39;s VPC.&lt;/p&gt; (optional)
     * @param availabilityZone &lt;p&gt; The EC2 Availability Zone that the DB instance is created in&lt;/p&gt; &lt;p&gt;Default: A random, system-chosen Availability Zone in the endpoint&#39;s Amazon Region.&lt;/p&gt; &lt;p&gt; Example: &lt;code&gt;us-east-1d&lt;/code&gt; &lt;/p&gt; &lt;p&gt; Constraint: The AvailabilityZone parameter can&#39;t be specified if the MultiAZ parameter is set to &lt;code&gt;true&lt;/code&gt;. The specified Availability Zone must be in the same Amazon Region as the current endpoint.&lt;/p&gt; (optional)
     * @param dbSubnetGroupName &lt;p&gt;A DB subnet group to associate with this DB instance.&lt;/p&gt; &lt;p&gt;If there is no DB subnet group, then it is a non-VPC DB instance.&lt;/p&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;p&gt; Format: &lt;code&gt;ddd:hh24:mi-ddd:hh24:mi&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region, occurring on a random day of the week.&lt;/p&gt; &lt;p&gt;Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.&lt;/p&gt; &lt;p&gt;Constraints: Minimum 30-minute window.&lt;/p&gt; (optional)
     * @param dbParameterGroupName &lt;p&gt;The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be 1 to 255 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param backupRetentionPeriod &lt;p&gt;The number of days for which automated backups are retained.&lt;/p&gt; &lt;p&gt;Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see &lt;a&gt;CreateDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be a value from 0 to 35&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be set to 0 if the DB instance is a source to Read Replicas&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param preferredBackupWindow &lt;p&gt; The daily time range during which automated backups are created.&lt;/p&gt; &lt;p&gt;Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see &lt;a&gt;CreateDBCluster&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param port &lt;p&gt;The port number on which the database accepts connections.&lt;/p&gt; &lt;p&gt;Not applicable. The port is managed by the DB cluster. For more information, see &lt;a&gt;CreateDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; Default: &lt;code&gt;8182&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Type: Integer&lt;/p&gt; (optional)
     * @param multiAZ Specifies if the DB instance is a Multi-AZ deployment. You can&#39;t set the AvailabilityZone parameter if the MultiAZ parameter is set to true. (optional)
     * @param engineVersion The version number of the database engine to use. Currently, setting this parameter has no effect. (optional)
     * @param autoMinorVersionUpgrade &lt;p&gt;Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;true&lt;/code&gt; &lt;/p&gt; (optional)
     * @param licenseModel &lt;p&gt;License model information for this DB instance.&lt;/p&gt; &lt;p&gt; Valid values: &lt;code&gt;license-included&lt;/code&gt; | &lt;code&gt;bring-your-own-license&lt;/code&gt; | &lt;code&gt;general-public-license&lt;/code&gt; &lt;/p&gt; (optional)
     * @param iops The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. (optional)
     * @param optionGroupName  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param characterSetName  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param publiclyAccessible This flag should no longer be used. (optional)
     * @param tags The tags to assign to the new instance. (optional)
     * @param storageType &lt;p&gt;Specifies the storage type to be associated with the DB instance.&lt;/p&gt; &lt;p&gt;Not applicable. Storage is managed by the DB Cluster.&lt;/p&gt; (optional)
     * @param tdeCredentialArn The ARN from the key store with which to associate the instance for TDE encryption. (optional)
     * @param tdeCredentialPassword The password for the given ARN from the key store in order to access the device. (optional)
     * @param storageEncrypted &lt;p&gt;Specifies whether the DB instance is encrypted.&lt;/p&gt; &lt;p&gt;Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see &lt;a&gt;CreateDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Default: false&lt;/p&gt; (optional)
     * @param kmsKeyId &lt;p&gt;The Amazon KMS key identifier for an encrypted DB instance.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same Amazon account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.&lt;/p&gt; &lt;p&gt;Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see &lt;a&gt;CreateDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If the &lt;code&gt;StorageEncrypted&lt;/code&gt; parameter is true, and you do not specify a value for the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter, then Amazon Neptune will use your default encryption key. Amazon KMS creates the default encryption key for your Amazon account. Your Amazon account has a different default encryption key for each Amazon Region.&lt;/p&gt; (optional)
     * @param domain Specify the Active Directory Domain to create the instance in. (optional)
     * @param copyTagsToSnapshot True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false. (optional)
     * @param monitoringInterval &lt;p&gt;The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;MonitoringRoleArn&lt;/code&gt; is specified, then you must also set &lt;code&gt;MonitoringInterval&lt;/code&gt; to a value other than 0.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;0, 1, 5, 10, 15, 30, 60&lt;/code&gt; &lt;/p&gt; (optional)
     * @param monitoringRoleArn &lt;p&gt;The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, &lt;code&gt;arn:aws:iam:123456789012:role/emaccess&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;MonitoringInterval&lt;/code&gt; is set to a value other than 0, then you must supply a &lt;code&gt;MonitoringRoleArn&lt;/code&gt; value.&lt;/p&gt; (optional)
     * @param domainIAMRoleName Specify the name of the IAM role to be used when making API calls to the Directory Service. (optional)
     * @param promotionTier &lt;p&gt;A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. &lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Valid Values: 0 - 15&lt;/p&gt; (optional)
     * @param timezone The time zone of the DB instance. (optional)
     * @param enableIAMDatabaseAuthentication Not supported by Neptune (ignored). (optional)
     * @param enablePerformanceInsights  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param performanceInsightsKMSKeyId  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param enableCloudwatchLogsExports The list of log types that need to be enabled for exporting to CloudWatch Logs. (optional)
     * @param deletionProtection &lt;p&gt;A value that indicates whether the DB instance has deletion protection enabled. The database can&#39;t be deleted when deletion protection is enabled. By default, deletion protection is disabled. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/userguide/manage-console-instances-delete.html\&quot;&gt;Deleting a DB Instance&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;DB instances in a DB cluster can be deleted even when deletion protection is enabled in their parent DB cluster.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;CreateDBInstanceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InstanceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> ProvisionedIopsNotAvailableInAZFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> DomainNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDBInstanceResult> gETCreateDBInstanceWithHttpInfo(String dbInstanceIdentifier, String dbInstanceClass, String engine, String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbName, Integer allocatedStorage, String masterUsername, String masterUserPassword, List<String> dbSecurityGroups, List<String> vpcSecurityGroupIds, String availabilityZone, String dbSubnetGroupName, String preferredMaintenanceWindow, String dbParameterGroupName, Integer backupRetentionPeriod, String preferredBackupWindow, Integer port, Boolean multiAZ, String engineVersion, Boolean autoMinorVersionUpgrade, String licenseModel, Integer iops, String optionGroupName, String characterSetName, Boolean publiclyAccessible, List<GETAddTagsToResourceTagsParameterInner> tags, String storageType, String tdeCredentialArn, String tdeCredentialPassword, Boolean storageEncrypted, String kmsKeyId, String domain, Boolean copyTagsToSnapshot, Integer monitoringInterval, String monitoringRoleArn, String domainIAMRoleName, Integer promotionTier, String timezone, Boolean enableIAMDatabaseAuthentication, Boolean enablePerformanceInsights, String performanceInsightsKMSKeyId, List<String> enableCloudwatchLogsExports, Boolean deletionProtection) throws ApiException {
        okhttp3.Call localVarCall = gETCreateDBInstanceValidateBeforeCall(dbInstanceIdentifier, dbInstanceClass, engine, dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbName, allocatedStorage, masterUsername, masterUserPassword, dbSecurityGroups, vpcSecurityGroupIds, availabilityZone, dbSubnetGroupName, preferredMaintenanceWindow, dbParameterGroupName, backupRetentionPeriod, preferredBackupWindow, port, multiAZ, engineVersion, autoMinorVersionUpgrade, licenseModel, iops, optionGroupName, characterSetName, publiclyAccessible, tags, storageType, tdeCredentialArn, tdeCredentialPassword, storageEncrypted, kmsKeyId, domain, copyTagsToSnapshot, monitoringInterval, monitoringRoleArn, domainIAMRoleName, promotionTier, timezone, enableIAMDatabaseAuthentication, enablePerformanceInsights, performanceInsightsKMSKeyId, enableCloudwatchLogsExports, deletionProtection, null);
        Type localVarReturnType = new TypeToken<CreateDBInstanceResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new DB instance.
     * @param dbInstanceIdentifier &lt;p&gt;The DB instance identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;mydbinstance&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbInstanceClass The compute and memory capacity of the DB instance, for example, &lt;code&gt;db.m4.large&lt;/code&gt;. Not all DB instance classes are available in all Amazon Regions. (required)
     * @param engine &lt;p&gt;The name of the database engine to be used for this instance.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;neptune&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbClusterIdentifier &lt;p&gt;The identifier of the DB cluster that the instance will belong to.&lt;/p&gt; &lt;p&gt;For information on creating a DB cluster, see &lt;a&gt;CreateDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Type: String&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbName Not supported. (optional)
     * @param allocatedStorage Not supported by Neptune. (optional)
     * @param masterUsername Not supported by Neptune. (optional)
     * @param masterUserPassword Not supported by Neptune. (optional)
     * @param dbSecurityGroups &lt;p&gt;A list of DB security groups to associate with this DB instance.&lt;/p&gt; &lt;p&gt;Default: The default DB security group for the database engine.&lt;/p&gt; (optional)
     * @param vpcSecurityGroupIds &lt;p&gt;A list of EC2 VPC security groups to associate with this DB instance.&lt;/p&gt; &lt;p&gt;Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see &lt;a&gt;CreateDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Default: The default EC2 VPC security group for the DB subnet group&#39;s VPC.&lt;/p&gt; (optional)
     * @param availabilityZone &lt;p&gt; The EC2 Availability Zone that the DB instance is created in&lt;/p&gt; &lt;p&gt;Default: A random, system-chosen Availability Zone in the endpoint&#39;s Amazon Region.&lt;/p&gt; &lt;p&gt; Example: &lt;code&gt;us-east-1d&lt;/code&gt; &lt;/p&gt; &lt;p&gt; Constraint: The AvailabilityZone parameter can&#39;t be specified if the MultiAZ parameter is set to &lt;code&gt;true&lt;/code&gt;. The specified Availability Zone must be in the same Amazon Region as the current endpoint.&lt;/p&gt; (optional)
     * @param dbSubnetGroupName &lt;p&gt;A DB subnet group to associate with this DB instance.&lt;/p&gt; &lt;p&gt;If there is no DB subnet group, then it is a non-VPC DB instance.&lt;/p&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;p&gt; Format: &lt;code&gt;ddd:hh24:mi-ddd:hh24:mi&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region, occurring on a random day of the week.&lt;/p&gt; &lt;p&gt;Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.&lt;/p&gt; &lt;p&gt;Constraints: Minimum 30-minute window.&lt;/p&gt; (optional)
     * @param dbParameterGroupName &lt;p&gt;The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be 1 to 255 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param backupRetentionPeriod &lt;p&gt;The number of days for which automated backups are retained.&lt;/p&gt; &lt;p&gt;Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see &lt;a&gt;CreateDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be a value from 0 to 35&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be set to 0 if the DB instance is a source to Read Replicas&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param preferredBackupWindow &lt;p&gt; The daily time range during which automated backups are created.&lt;/p&gt; &lt;p&gt;Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see &lt;a&gt;CreateDBCluster&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param port &lt;p&gt;The port number on which the database accepts connections.&lt;/p&gt; &lt;p&gt;Not applicable. The port is managed by the DB cluster. For more information, see &lt;a&gt;CreateDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; Default: &lt;code&gt;8182&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Type: Integer&lt;/p&gt; (optional)
     * @param multiAZ Specifies if the DB instance is a Multi-AZ deployment. You can&#39;t set the AvailabilityZone parameter if the MultiAZ parameter is set to true. (optional)
     * @param engineVersion The version number of the database engine to use. Currently, setting this parameter has no effect. (optional)
     * @param autoMinorVersionUpgrade &lt;p&gt;Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;true&lt;/code&gt; &lt;/p&gt; (optional)
     * @param licenseModel &lt;p&gt;License model information for this DB instance.&lt;/p&gt; &lt;p&gt; Valid values: &lt;code&gt;license-included&lt;/code&gt; | &lt;code&gt;bring-your-own-license&lt;/code&gt; | &lt;code&gt;general-public-license&lt;/code&gt; &lt;/p&gt; (optional)
     * @param iops The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. (optional)
     * @param optionGroupName  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param characterSetName  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param publiclyAccessible This flag should no longer be used. (optional)
     * @param tags The tags to assign to the new instance. (optional)
     * @param storageType &lt;p&gt;Specifies the storage type to be associated with the DB instance.&lt;/p&gt; &lt;p&gt;Not applicable. Storage is managed by the DB Cluster.&lt;/p&gt; (optional)
     * @param tdeCredentialArn The ARN from the key store with which to associate the instance for TDE encryption. (optional)
     * @param tdeCredentialPassword The password for the given ARN from the key store in order to access the device. (optional)
     * @param storageEncrypted &lt;p&gt;Specifies whether the DB instance is encrypted.&lt;/p&gt; &lt;p&gt;Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see &lt;a&gt;CreateDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Default: false&lt;/p&gt; (optional)
     * @param kmsKeyId &lt;p&gt;The Amazon KMS key identifier for an encrypted DB instance.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same Amazon account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.&lt;/p&gt; &lt;p&gt;Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see &lt;a&gt;CreateDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If the &lt;code&gt;StorageEncrypted&lt;/code&gt; parameter is true, and you do not specify a value for the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter, then Amazon Neptune will use your default encryption key. Amazon KMS creates the default encryption key for your Amazon account. Your Amazon account has a different default encryption key for each Amazon Region.&lt;/p&gt; (optional)
     * @param domain Specify the Active Directory Domain to create the instance in. (optional)
     * @param copyTagsToSnapshot True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false. (optional)
     * @param monitoringInterval &lt;p&gt;The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;MonitoringRoleArn&lt;/code&gt; is specified, then you must also set &lt;code&gt;MonitoringInterval&lt;/code&gt; to a value other than 0.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;0, 1, 5, 10, 15, 30, 60&lt;/code&gt; &lt;/p&gt; (optional)
     * @param monitoringRoleArn &lt;p&gt;The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, &lt;code&gt;arn:aws:iam:123456789012:role/emaccess&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;MonitoringInterval&lt;/code&gt; is set to a value other than 0, then you must supply a &lt;code&gt;MonitoringRoleArn&lt;/code&gt; value.&lt;/p&gt; (optional)
     * @param domainIAMRoleName Specify the name of the IAM role to be used when making API calls to the Directory Service. (optional)
     * @param promotionTier &lt;p&gt;A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. &lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Valid Values: 0 - 15&lt;/p&gt; (optional)
     * @param timezone The time zone of the DB instance. (optional)
     * @param enableIAMDatabaseAuthentication Not supported by Neptune (ignored). (optional)
     * @param enablePerformanceInsights  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param performanceInsightsKMSKeyId  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param enableCloudwatchLogsExports The list of log types that need to be enabled for exporting to CloudWatch Logs. (optional)
     * @param deletionProtection &lt;p&gt;A value that indicates whether the DB instance has deletion protection enabled. The database can&#39;t be deleted when deletion protection is enabled. By default, deletion protection is disabled. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/userguide/manage-console-instances-delete.html\&quot;&gt;Deleting a DB Instance&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;DB instances in a DB cluster can be deleted even when deletion protection is enabled in their parent DB cluster.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InstanceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> ProvisionedIopsNotAvailableInAZFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> DomainNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateDBInstanceAsync(String dbInstanceIdentifier, String dbInstanceClass, String engine, String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbName, Integer allocatedStorage, String masterUsername, String masterUserPassword, List<String> dbSecurityGroups, List<String> vpcSecurityGroupIds, String availabilityZone, String dbSubnetGroupName, String preferredMaintenanceWindow, String dbParameterGroupName, Integer backupRetentionPeriod, String preferredBackupWindow, Integer port, Boolean multiAZ, String engineVersion, Boolean autoMinorVersionUpgrade, String licenseModel, Integer iops, String optionGroupName, String characterSetName, Boolean publiclyAccessible, List<GETAddTagsToResourceTagsParameterInner> tags, String storageType, String tdeCredentialArn, String tdeCredentialPassword, Boolean storageEncrypted, String kmsKeyId, String domain, Boolean copyTagsToSnapshot, Integer monitoringInterval, String monitoringRoleArn, String domainIAMRoleName, Integer promotionTier, String timezone, Boolean enableIAMDatabaseAuthentication, Boolean enablePerformanceInsights, String performanceInsightsKMSKeyId, List<String> enableCloudwatchLogsExports, Boolean deletionProtection, final ApiCallback<CreateDBInstanceResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateDBInstanceValidateBeforeCall(dbInstanceIdentifier, dbInstanceClass, engine, dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbName, allocatedStorage, masterUsername, masterUserPassword, dbSecurityGroups, vpcSecurityGroupIds, availabilityZone, dbSubnetGroupName, preferredMaintenanceWindow, dbParameterGroupName, backupRetentionPeriod, preferredBackupWindow, port, multiAZ, engineVersion, autoMinorVersionUpgrade, licenseModel, iops, optionGroupName, characterSetName, publiclyAccessible, tags, storageType, tdeCredentialArn, tdeCredentialPassword, storageEncrypted, kmsKeyId, domain, copyTagsToSnapshot, monitoringInterval, monitoringRoleArn, domainIAMRoleName, promotionTier, timezone, enableIAMDatabaseAuthentication, enablePerformanceInsights, performanceInsightsKMSKeyId, enableCloudwatchLogsExports, deletionProtection, _callback);
        Type localVarReturnType = new TypeToken<CreateDBInstanceResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateDBParameterGroup
     * @param dbParameterGroupName &lt;p&gt;The name of the DB parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be 1 to 255 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;This value is stored as a lowercase string.&lt;/p&gt; &lt;/note&gt; (required)
     * @param dbParameterGroupFamily The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family. (required)
     * @param description The description for the DB parameter group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the new DB parameter group. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateDBParameterGroupCall(String dbParameterGroupName, String dbParameterGroupFamily, String description, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateDBParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBParameterGroupName", dbParameterGroupName));
        }

        if (dbParameterGroupFamily != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBParameterGroupFamily", dbParameterGroupFamily));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Description", description));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateDBParameterGroupValidateBeforeCall(String dbParameterGroupName, String dbParameterGroupFamily, String description, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbParameterGroupName' is set
        if (dbParameterGroupName == null) {
            throw new ApiException("Missing the required parameter 'dbParameterGroupName' when calling gETCreateDBParameterGroup(Async)");
        }

        // verify the required parameter 'dbParameterGroupFamily' is set
        if (dbParameterGroupFamily == null) {
            throw new ApiException("Missing the required parameter 'dbParameterGroupFamily' when calling gETCreateDBParameterGroup(Async)");
        }

        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling gETCreateDBParameterGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateDBParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateDBParameterGroup(Async)");
        }

        return gETCreateDBParameterGroupCall(dbParameterGroupName, dbParameterGroupFamily, description, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new DB parameter group.&lt;/p&gt; &lt;p&gt;A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using &lt;i&gt;ModifyDBParameterGroup&lt;/i&gt;. Once you&#39;ve created a DB parameter group, you need to associate it with your DB instance using &lt;i&gt;ModifyDBInstance&lt;/i&gt;. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.&lt;/p&gt; &lt;important&gt; &lt;p&gt;After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the Amazon Neptune console or the &lt;i&gt;DescribeDBParameters&lt;/i&gt; command to verify that your DB parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     * @param dbParameterGroupName &lt;p&gt;The name of the DB parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be 1 to 255 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;This value is stored as a lowercase string.&lt;/p&gt; &lt;/note&gt; (required)
     * @param dbParameterGroupFamily The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family. (required)
     * @param description The description for the DB parameter group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the new DB parameter group. (optional)
     * @return CreateDBParameterGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateDBParameterGroupResult gETCreateDBParameterGroup(String dbParameterGroupName, String dbParameterGroupFamily, String description, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        ApiResponse<CreateDBParameterGroupResult> localVarResp = gETCreateDBParameterGroupWithHttpInfo(dbParameterGroupName, dbParameterGroupFamily, description, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new DB parameter group.&lt;/p&gt; &lt;p&gt;A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using &lt;i&gt;ModifyDBParameterGroup&lt;/i&gt;. Once you&#39;ve created a DB parameter group, you need to associate it with your DB instance using &lt;i&gt;ModifyDBInstance&lt;/i&gt;. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.&lt;/p&gt; &lt;important&gt; &lt;p&gt;After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the Amazon Neptune console or the &lt;i&gt;DescribeDBParameters&lt;/i&gt; command to verify that your DB parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     * @param dbParameterGroupName &lt;p&gt;The name of the DB parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be 1 to 255 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;This value is stored as a lowercase string.&lt;/p&gt; &lt;/note&gt; (required)
     * @param dbParameterGroupFamily The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family. (required)
     * @param description The description for the DB parameter group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the new DB parameter group. (optional)
     * @return ApiResponse&lt;CreateDBParameterGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDBParameterGroupResult> gETCreateDBParameterGroupWithHttpInfo(String dbParameterGroupName, String dbParameterGroupFamily, String description, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        okhttp3.Call localVarCall = gETCreateDBParameterGroupValidateBeforeCall(dbParameterGroupName, dbParameterGroupFamily, description, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, null);
        Type localVarReturnType = new TypeToken<CreateDBParameterGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new DB parameter group.&lt;/p&gt; &lt;p&gt;A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using &lt;i&gt;ModifyDBParameterGroup&lt;/i&gt;. Once you&#39;ve created a DB parameter group, you need to associate it with your DB instance using &lt;i&gt;ModifyDBInstance&lt;/i&gt;. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.&lt;/p&gt; &lt;important&gt; &lt;p&gt;After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the Amazon Neptune console or the &lt;i&gt;DescribeDBParameters&lt;/i&gt; command to verify that your DB parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     * @param dbParameterGroupName &lt;p&gt;The name of the DB parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be 1 to 255 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;This value is stored as a lowercase string.&lt;/p&gt; &lt;/note&gt; (required)
     * @param dbParameterGroupFamily The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family. (required)
     * @param description The description for the DB parameter group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the new DB parameter group. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateDBParameterGroupAsync(String dbParameterGroupName, String dbParameterGroupFamily, String description, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback<CreateDBParameterGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateDBParameterGroupValidateBeforeCall(dbParameterGroupName, dbParameterGroupFamily, description, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, _callback);
        Type localVarReturnType = new TypeToken<CreateDBParameterGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateDBSubnetGroup
     * @param dbSubnetGroupName &lt;p&gt;The name for the DB subnet group. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbSubnetGroupDescription The description for the DB subnet group. (required)
     * @param subnetIds The EC2 Subnet IDs for the DB subnet group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the new DB subnet group. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateDBSubnetGroupCall(String dbSubnetGroupName, String dbSubnetGroupDescription, List<String> subnetIds, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateDBSubnetGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbSubnetGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBSubnetGroupName", dbSubnetGroupName));
        }

        if (dbSubnetGroupDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBSubnetGroupDescription", dbSubnetGroupDescription));
        }

        if (subnetIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "SubnetIds", subnetIds));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateDBSubnetGroupValidateBeforeCall(String dbSubnetGroupName, String dbSubnetGroupDescription, List<String> subnetIds, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbSubnetGroupName' is set
        if (dbSubnetGroupName == null) {
            throw new ApiException("Missing the required parameter 'dbSubnetGroupName' when calling gETCreateDBSubnetGroup(Async)");
        }

        // verify the required parameter 'dbSubnetGroupDescription' is set
        if (dbSubnetGroupDescription == null) {
            throw new ApiException("Missing the required parameter 'dbSubnetGroupDescription' when calling gETCreateDBSubnetGroup(Async)");
        }

        // verify the required parameter 'subnetIds' is set
        if (subnetIds == null) {
            throw new ApiException("Missing the required parameter 'subnetIds' when calling gETCreateDBSubnetGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateDBSubnetGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateDBSubnetGroup(Async)");
        }

        return gETCreateDBSubnetGroupCall(dbSubnetGroupName, dbSubnetGroupDescription, subnetIds, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, _callback);

    }

    /**
     * 
     * Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the Amazon Region.
     * @param dbSubnetGroupName &lt;p&gt;The name for the DB subnet group. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbSubnetGroupDescription The description for the DB subnet group. (required)
     * @param subnetIds The EC2 Subnet IDs for the DB subnet group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the new DB subnet group. (optional)
     * @return CreateDBSubnetGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public CreateDBSubnetGroupResult gETCreateDBSubnetGroup(String dbSubnetGroupName, String dbSubnetGroupDescription, List<String> subnetIds, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        ApiResponse<CreateDBSubnetGroupResult> localVarResp = gETCreateDBSubnetGroupWithHttpInfo(dbSubnetGroupName, dbSubnetGroupDescription, subnetIds, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the Amazon Region.
     * @param dbSubnetGroupName &lt;p&gt;The name for the DB subnet group. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbSubnetGroupDescription The description for the DB subnet group. (required)
     * @param subnetIds The EC2 Subnet IDs for the DB subnet group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the new DB subnet group. (optional)
     * @return ApiResponse&lt;CreateDBSubnetGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDBSubnetGroupResult> gETCreateDBSubnetGroupWithHttpInfo(String dbSubnetGroupName, String dbSubnetGroupDescription, List<String> subnetIds, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        okhttp3.Call localVarCall = gETCreateDBSubnetGroupValidateBeforeCall(dbSubnetGroupName, dbSubnetGroupDescription, subnetIds, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, null);
        Type localVarReturnType = new TypeToken<CreateDBSubnetGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the Amazon Region.
     * @param dbSubnetGroupName &lt;p&gt;The name for the DB subnet group. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbSubnetGroupDescription The description for the DB subnet group. (required)
     * @param subnetIds The EC2 Subnet IDs for the DB subnet group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the new DB subnet group. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateDBSubnetGroupAsync(String dbSubnetGroupName, String dbSubnetGroupDescription, List<String> subnetIds, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback<CreateDBSubnetGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateDBSubnetGroupValidateBeforeCall(dbSubnetGroupName, dbSubnetGroupDescription, subnetIds, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, _callback);
        Type localVarReturnType = new TypeToken<CreateDBSubnetGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateEventSubscription
     * @param subscriptionName &lt;p&gt;The name of the subscription.&lt;/p&gt; &lt;p&gt;Constraints: The name must be less than 255 characters.&lt;/p&gt; (required)
     * @param snsTopicArn The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceType &lt;p&gt;The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;db-instance&lt;/code&gt; | &lt;code&gt;db-cluster&lt;/code&gt; | &lt;code&gt;db-parameter-group&lt;/code&gt; | &lt;code&gt;db-security-group&lt;/code&gt; | &lt;code&gt;db-snapshot&lt;/code&gt; | &lt;code&gt;db-cluster-snapshot&lt;/code&gt; &lt;/p&gt; (optional)
     * @param eventCategories  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the &lt;b&gt;DescribeEventCategories&lt;/b&gt; action. (optional)
     * @param sourceIds &lt;p&gt;The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can&#39;t end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If SourceIds are supplied, SourceType must also be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB instance, then a &lt;code&gt;DBInstanceIdentifier&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB security group, a &lt;code&gt;DBSecurityGroupName&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB parameter group, a &lt;code&gt;DBParameterGroupName&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB snapshot, a &lt;code&gt;DBSnapshotIdentifier&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param enabled  A Boolean value; set to &lt;b&gt;true&lt;/b&gt; to activate the subscription, set to &lt;b&gt;false&lt;/b&gt; to create the subscription but not active it. (optional)
     * @param tags The tags to be applied to the new event subscription. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionAlreadyExistFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateEventSubscriptionCall(String subscriptionName, String snsTopicArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceType, List<String> eventCategories, List<String> sourceIds, Boolean enabled, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateEventSubscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subscriptionName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SubscriptionName", subscriptionName));
        }

        if (snsTopicArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SnsTopicArn", snsTopicArn));
        }

        if (sourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceType", sourceType));
        }

        if (eventCategories != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "EventCategories", eventCategories));
        }

        if (sourceIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "SourceIds", sourceIds));
        }

        if (enabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Enabled", enabled));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateEventSubscriptionValidateBeforeCall(String subscriptionName, String snsTopicArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceType, List<String> eventCategories, List<String> sourceIds, Boolean enabled, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionName' is set
        if (subscriptionName == null) {
            throw new ApiException("Missing the required parameter 'subscriptionName' when calling gETCreateEventSubscription(Async)");
        }

        // verify the required parameter 'snsTopicArn' is set
        if (snsTopicArn == null) {
            throw new ApiException("Missing the required parameter 'snsTopicArn' when calling gETCreateEventSubscription(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateEventSubscription(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateEventSubscription(Async)");
        }

        return gETCreateEventSubscriptionCall(subscriptionName, snsTopicArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceType, eventCategories, sourceIds, enabled, tags, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.&lt;/p&gt; &lt;p&gt;You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType &#x3D; db-instance, SourceIds &#x3D; mydbinstance1, mydbinstance2 and EventCategories &#x3D; Availability, Backup.&lt;/p&gt; &lt;p&gt;If you specify both the SourceType and SourceIds, such as SourceType &#x3D; db-instance and SourceIdentifier &#x3D; myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.&lt;/p&gt;
     * @param subscriptionName &lt;p&gt;The name of the subscription.&lt;/p&gt; &lt;p&gt;Constraints: The name must be less than 255 characters.&lt;/p&gt; (required)
     * @param snsTopicArn The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceType &lt;p&gt;The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;db-instance&lt;/code&gt; | &lt;code&gt;db-cluster&lt;/code&gt; | &lt;code&gt;db-parameter-group&lt;/code&gt; | &lt;code&gt;db-security-group&lt;/code&gt; | &lt;code&gt;db-snapshot&lt;/code&gt; | &lt;code&gt;db-cluster-snapshot&lt;/code&gt; &lt;/p&gt; (optional)
     * @param eventCategories  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the &lt;b&gt;DescribeEventCategories&lt;/b&gt; action. (optional)
     * @param sourceIds &lt;p&gt;The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can&#39;t end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If SourceIds are supplied, SourceType must also be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB instance, then a &lt;code&gt;DBInstanceIdentifier&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB security group, a &lt;code&gt;DBSecurityGroupName&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB parameter group, a &lt;code&gt;DBParameterGroupName&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB snapshot, a &lt;code&gt;DBSnapshotIdentifier&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param enabled  A Boolean value; set to &lt;b&gt;true&lt;/b&gt; to activate the subscription, set to &lt;b&gt;false&lt;/b&gt; to create the subscription but not active it. (optional)
     * @param tags The tags to be applied to the new event subscription. (optional)
     * @return CreateEventSubscriptionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionAlreadyExistFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateEventSubscriptionResult gETCreateEventSubscription(String subscriptionName, String snsTopicArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceType, List<String> eventCategories, List<String> sourceIds, Boolean enabled, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        ApiResponse<CreateEventSubscriptionResult> localVarResp = gETCreateEventSubscriptionWithHttpInfo(subscriptionName, snsTopicArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceType, eventCategories, sourceIds, enabled, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.&lt;/p&gt; &lt;p&gt;You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType &#x3D; db-instance, SourceIds &#x3D; mydbinstance1, mydbinstance2 and EventCategories &#x3D; Availability, Backup.&lt;/p&gt; &lt;p&gt;If you specify both the SourceType and SourceIds, such as SourceType &#x3D; db-instance and SourceIdentifier &#x3D; myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.&lt;/p&gt;
     * @param subscriptionName &lt;p&gt;The name of the subscription.&lt;/p&gt; &lt;p&gt;Constraints: The name must be less than 255 characters.&lt;/p&gt; (required)
     * @param snsTopicArn The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceType &lt;p&gt;The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;db-instance&lt;/code&gt; | &lt;code&gt;db-cluster&lt;/code&gt; | &lt;code&gt;db-parameter-group&lt;/code&gt; | &lt;code&gt;db-security-group&lt;/code&gt; | &lt;code&gt;db-snapshot&lt;/code&gt; | &lt;code&gt;db-cluster-snapshot&lt;/code&gt; &lt;/p&gt; (optional)
     * @param eventCategories  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the &lt;b&gt;DescribeEventCategories&lt;/b&gt; action. (optional)
     * @param sourceIds &lt;p&gt;The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can&#39;t end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If SourceIds are supplied, SourceType must also be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB instance, then a &lt;code&gt;DBInstanceIdentifier&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB security group, a &lt;code&gt;DBSecurityGroupName&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB parameter group, a &lt;code&gt;DBParameterGroupName&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB snapshot, a &lt;code&gt;DBSnapshotIdentifier&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param enabled  A Boolean value; set to &lt;b&gt;true&lt;/b&gt; to activate the subscription, set to &lt;b&gt;false&lt;/b&gt; to create the subscription but not active it. (optional)
     * @param tags The tags to be applied to the new event subscription. (optional)
     * @return ApiResponse&lt;CreateEventSubscriptionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionAlreadyExistFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateEventSubscriptionResult> gETCreateEventSubscriptionWithHttpInfo(String subscriptionName, String snsTopicArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceType, List<String> eventCategories, List<String> sourceIds, Boolean enabled, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        okhttp3.Call localVarCall = gETCreateEventSubscriptionValidateBeforeCall(subscriptionName, snsTopicArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceType, eventCategories, sourceIds, enabled, tags, null);
        Type localVarReturnType = new TypeToken<CreateEventSubscriptionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.&lt;/p&gt; &lt;p&gt;You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType &#x3D; db-instance, SourceIds &#x3D; mydbinstance1, mydbinstance2 and EventCategories &#x3D; Availability, Backup.&lt;/p&gt; &lt;p&gt;If you specify both the SourceType and SourceIds, such as SourceType &#x3D; db-instance and SourceIdentifier &#x3D; myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.&lt;/p&gt;
     * @param subscriptionName &lt;p&gt;The name of the subscription.&lt;/p&gt; &lt;p&gt;Constraints: The name must be less than 255 characters.&lt;/p&gt; (required)
     * @param snsTopicArn The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceType &lt;p&gt;The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;db-instance&lt;/code&gt; | &lt;code&gt;db-cluster&lt;/code&gt; | &lt;code&gt;db-parameter-group&lt;/code&gt; | &lt;code&gt;db-security-group&lt;/code&gt; | &lt;code&gt;db-snapshot&lt;/code&gt; | &lt;code&gt;db-cluster-snapshot&lt;/code&gt; &lt;/p&gt; (optional)
     * @param eventCategories  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the &lt;b&gt;DescribeEventCategories&lt;/b&gt; action. (optional)
     * @param sourceIds &lt;p&gt;The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can&#39;t end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If SourceIds are supplied, SourceType must also be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB instance, then a &lt;code&gt;DBInstanceIdentifier&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB security group, a &lt;code&gt;DBSecurityGroupName&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB parameter group, a &lt;code&gt;DBParameterGroupName&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a DB snapshot, a &lt;code&gt;DBSnapshotIdentifier&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param enabled  A Boolean value; set to &lt;b&gt;true&lt;/b&gt; to activate the subscription, set to &lt;b&gt;false&lt;/b&gt; to create the subscription but not active it. (optional)
     * @param tags The tags to be applied to the new event subscription. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionAlreadyExistFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateEventSubscriptionAsync(String subscriptionName, String snsTopicArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceType, List<String> eventCategories, List<String> sourceIds, Boolean enabled, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback<CreateEventSubscriptionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateEventSubscriptionValidateBeforeCall(subscriptionName, snsTopicArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceType, eventCategories, sourceIds, enabled, tags, _callback);
        Type localVarReturnType = new TypeToken<CreateEventSubscriptionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateGlobalCluster
     * @param globalClusterIdentifier The cluster identifier of the new global database cluster. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceDBClusterIdentifier (&lt;i&gt;Optional&lt;/i&gt;) The Amazon Resource Name (ARN) of an existing Neptune DB cluster to use as the primary cluster of the new global database. (optional)
     * @param engine &lt;p&gt;The name of the database engine to be used in the global database.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;neptune&lt;/code&gt; &lt;/p&gt; (optional)
     * @param engineVersion &lt;p&gt;The Neptune engine version to be used by the global database.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;1.2.0.0&lt;/code&gt; or above.&lt;/p&gt; (optional)
     * @param deletionProtection The deletion protection setting for the new global database. The global database can&#39;t be deleted when deletion protection is enabled. (optional)
     * @param storageEncrypted The storage encryption setting for the new global database cluster. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> GlobalClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateGlobalClusterCall(String globalClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceDBClusterIdentifier, String engine, String engineVersion, Boolean deletionProtection, Boolean storageEncrypted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateGlobalCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (globalClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GlobalClusterIdentifier", globalClusterIdentifier));
        }

        if (sourceDBClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceDBClusterIdentifier", sourceDBClusterIdentifier));
        }

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Engine", engine));
        }

        if (engineVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EngineVersion", engineVersion));
        }

        if (deletionProtection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DeletionProtection", deletionProtection));
        }

        if (storageEncrypted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StorageEncrypted", storageEncrypted));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateGlobalClusterValidateBeforeCall(String globalClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceDBClusterIdentifier, String engine, String engineVersion, Boolean deletionProtection, Boolean storageEncrypted, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'globalClusterIdentifier' is set
        if (globalClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'globalClusterIdentifier' when calling gETCreateGlobalCluster(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateGlobalCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateGlobalCluster(Async)");
        }

        return gETCreateGlobalClusterCall(globalClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceDBClusterIdentifier, engine, engineVersion, deletionProtection, storageEncrypted, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a Neptune global database spread across multiple Amazon Regions. The global database contains a single primary cluster with read-write capability, and read-only secondary clusters that receive data from the primary cluster through high-speed replication performed by the Neptune storage subsystem.&lt;/p&gt; &lt;p&gt;You can create a global database that is initially empty, and then add a primary cluster and secondary clusters to it, or you can specify an existing Neptune cluster during the create operation to become the primary cluster of the global database.&lt;/p&gt;
     * @param globalClusterIdentifier The cluster identifier of the new global database cluster. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceDBClusterIdentifier (&lt;i&gt;Optional&lt;/i&gt;) The Amazon Resource Name (ARN) of an existing Neptune DB cluster to use as the primary cluster of the new global database. (optional)
     * @param engine &lt;p&gt;The name of the database engine to be used in the global database.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;neptune&lt;/code&gt; &lt;/p&gt; (optional)
     * @param engineVersion &lt;p&gt;The Neptune engine version to be used by the global database.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;1.2.0.0&lt;/code&gt; or above.&lt;/p&gt; (optional)
     * @param deletionProtection The deletion protection setting for the new global database. The global database can&#39;t be deleted when deletion protection is enabled. (optional)
     * @param storageEncrypted The storage encryption setting for the new global database cluster. (optional)
     * @return CreateGlobalClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> GlobalClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateGlobalClusterResult gETCreateGlobalCluster(String globalClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceDBClusterIdentifier, String engine, String engineVersion, Boolean deletionProtection, Boolean storageEncrypted) throws ApiException {
        ApiResponse<CreateGlobalClusterResult> localVarResp = gETCreateGlobalClusterWithHttpInfo(globalClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceDBClusterIdentifier, engine, engineVersion, deletionProtection, storageEncrypted);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a Neptune global database spread across multiple Amazon Regions. The global database contains a single primary cluster with read-write capability, and read-only secondary clusters that receive data from the primary cluster through high-speed replication performed by the Neptune storage subsystem.&lt;/p&gt; &lt;p&gt;You can create a global database that is initially empty, and then add a primary cluster and secondary clusters to it, or you can specify an existing Neptune cluster during the create operation to become the primary cluster of the global database.&lt;/p&gt;
     * @param globalClusterIdentifier The cluster identifier of the new global database cluster. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceDBClusterIdentifier (&lt;i&gt;Optional&lt;/i&gt;) The Amazon Resource Name (ARN) of an existing Neptune DB cluster to use as the primary cluster of the new global database. (optional)
     * @param engine &lt;p&gt;The name of the database engine to be used in the global database.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;neptune&lt;/code&gt; &lt;/p&gt; (optional)
     * @param engineVersion &lt;p&gt;The Neptune engine version to be used by the global database.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;1.2.0.0&lt;/code&gt; or above.&lt;/p&gt; (optional)
     * @param deletionProtection The deletion protection setting for the new global database. The global database can&#39;t be deleted when deletion protection is enabled. (optional)
     * @param storageEncrypted The storage encryption setting for the new global database cluster. (optional)
     * @return ApiResponse&lt;CreateGlobalClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> GlobalClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGlobalClusterResult> gETCreateGlobalClusterWithHttpInfo(String globalClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceDBClusterIdentifier, String engine, String engineVersion, Boolean deletionProtection, Boolean storageEncrypted) throws ApiException {
        okhttp3.Call localVarCall = gETCreateGlobalClusterValidateBeforeCall(globalClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceDBClusterIdentifier, engine, engineVersion, deletionProtection, storageEncrypted, null);
        Type localVarReturnType = new TypeToken<CreateGlobalClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a Neptune global database spread across multiple Amazon Regions. The global database contains a single primary cluster with read-write capability, and read-only secondary clusters that receive data from the primary cluster through high-speed replication performed by the Neptune storage subsystem.&lt;/p&gt; &lt;p&gt;You can create a global database that is initially empty, and then add a primary cluster and secondary clusters to it, or you can specify an existing Neptune cluster during the create operation to become the primary cluster of the global database.&lt;/p&gt;
     * @param globalClusterIdentifier The cluster identifier of the new global database cluster. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceDBClusterIdentifier (&lt;i&gt;Optional&lt;/i&gt;) The Amazon Resource Name (ARN) of an existing Neptune DB cluster to use as the primary cluster of the new global database. (optional)
     * @param engine &lt;p&gt;The name of the database engine to be used in the global database.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;neptune&lt;/code&gt; &lt;/p&gt; (optional)
     * @param engineVersion &lt;p&gt;The Neptune engine version to be used by the global database.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;1.2.0.0&lt;/code&gt; or above.&lt;/p&gt; (optional)
     * @param deletionProtection The deletion protection setting for the new global database. The global database can&#39;t be deleted when deletion protection is enabled. (optional)
     * @param storageEncrypted The storage encryption setting for the new global database cluster. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> GlobalClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateGlobalClusterAsync(String globalClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceDBClusterIdentifier, String engine, String engineVersion, Boolean deletionProtection, Boolean storageEncrypted, final ApiCallback<CreateGlobalClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateGlobalClusterValidateBeforeCall(globalClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceDBClusterIdentifier, engine, engineVersion, deletionProtection, storageEncrypted, _callback);
        Type localVarReturnType = new TypeToken<CreateGlobalClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteDBCluster
     * @param dbClusterIdentifier &lt;p&gt;The DB cluster identifier for the DB cluster to be deleted. This parameter isn&#39;t case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match an existing DBClusterIdentifier.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param skipFinalSnapshot &lt;p&gt; Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If &lt;code&gt;true&lt;/code&gt; is specified, no DB cluster snapshot is created. If &lt;code&gt;false&lt;/code&gt; is specified, a DB cluster snapshot is created before the DB cluster is deleted.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You must specify a &lt;code&gt;FinalDBSnapshotIdentifier&lt;/code&gt; parameter if &lt;code&gt;SkipFinalSnapshot&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param finalDBSnapshotIdentifier &lt;p&gt; The DB cluster snapshot identifier of the new DB cluster snapshot created when &lt;code&gt;SkipFinalSnapshot&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt; Specifying this parameter and also setting the &lt;code&gt;SkipFinalShapshot&lt;/code&gt; parameter to true results in an error.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be 1 to 255 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteDBClusterCall(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean skipFinalSnapshot, String finalDBSnapshotIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteDBCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterIdentifier", dbClusterIdentifier));
        }

        if (skipFinalSnapshot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SkipFinalSnapshot", skipFinalSnapshot));
        }

        if (finalDBSnapshotIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FinalDBSnapshotIdentifier", finalDBSnapshotIdentifier));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteDBClusterValidateBeforeCall(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean skipFinalSnapshot, String finalDBSnapshotIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterIdentifier' is set
        if (dbClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterIdentifier' when calling gETDeleteDBCluster(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteDBCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteDBCluster(Async)");
        }

        return gETDeleteDBClusterCall(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, skipFinalSnapshot, finalDBSnapshotIdentifier, _callback);

    }

    /**
     * 
     * &lt;p&gt;The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can&#39;t be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.&lt;/p&gt; &lt;p&gt;Note that the DB Cluster cannot be deleted if deletion protection is enabled. To delete it, you must first set its &lt;code&gt;DeletionProtection&lt;/code&gt; field to &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
     * @param dbClusterIdentifier &lt;p&gt;The DB cluster identifier for the DB cluster to be deleted. This parameter isn&#39;t case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match an existing DBClusterIdentifier.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param skipFinalSnapshot &lt;p&gt; Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If &lt;code&gt;true&lt;/code&gt; is specified, no DB cluster snapshot is created. If &lt;code&gt;false&lt;/code&gt; is specified, a DB cluster snapshot is created before the DB cluster is deleted.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You must specify a &lt;code&gt;FinalDBSnapshotIdentifier&lt;/code&gt; parameter if &lt;code&gt;SkipFinalSnapshot&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param finalDBSnapshotIdentifier &lt;p&gt; The DB cluster snapshot identifier of the new DB cluster snapshot created when &lt;code&gt;SkipFinalSnapshot&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt; Specifying this parameter and also setting the &lt;code&gt;SkipFinalShapshot&lt;/code&gt; parameter to true results in an error.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be 1 to 255 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return DeleteDBClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDBClusterResult gETDeleteDBCluster(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean skipFinalSnapshot, String finalDBSnapshotIdentifier) throws ApiException {
        ApiResponse<DeleteDBClusterResult> localVarResp = gETDeleteDBClusterWithHttpInfo(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, skipFinalSnapshot, finalDBSnapshotIdentifier);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can&#39;t be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.&lt;/p&gt; &lt;p&gt;Note that the DB Cluster cannot be deleted if deletion protection is enabled. To delete it, you must first set its &lt;code&gt;DeletionProtection&lt;/code&gt; field to &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
     * @param dbClusterIdentifier &lt;p&gt;The DB cluster identifier for the DB cluster to be deleted. This parameter isn&#39;t case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match an existing DBClusterIdentifier.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param skipFinalSnapshot &lt;p&gt; Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If &lt;code&gt;true&lt;/code&gt; is specified, no DB cluster snapshot is created. If &lt;code&gt;false&lt;/code&gt; is specified, a DB cluster snapshot is created before the DB cluster is deleted.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You must specify a &lt;code&gt;FinalDBSnapshotIdentifier&lt;/code&gt; parameter if &lt;code&gt;SkipFinalSnapshot&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param finalDBSnapshotIdentifier &lt;p&gt; The DB cluster snapshot identifier of the new DB cluster snapshot created when &lt;code&gt;SkipFinalSnapshot&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt; Specifying this parameter and also setting the &lt;code&gt;SkipFinalShapshot&lt;/code&gt; parameter to true results in an error.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be 1 to 255 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ApiResponse&lt;DeleteDBClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteDBClusterResult> gETDeleteDBClusterWithHttpInfo(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean skipFinalSnapshot, String finalDBSnapshotIdentifier) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteDBClusterValidateBeforeCall(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, skipFinalSnapshot, finalDBSnapshotIdentifier, null);
        Type localVarReturnType = new TypeToken<DeleteDBClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can&#39;t be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.&lt;/p&gt; &lt;p&gt;Note that the DB Cluster cannot be deleted if deletion protection is enabled. To delete it, you must first set its &lt;code&gt;DeletionProtection&lt;/code&gt; field to &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
     * @param dbClusterIdentifier &lt;p&gt;The DB cluster identifier for the DB cluster to be deleted. This parameter isn&#39;t case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match an existing DBClusterIdentifier.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param skipFinalSnapshot &lt;p&gt; Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If &lt;code&gt;true&lt;/code&gt; is specified, no DB cluster snapshot is created. If &lt;code&gt;false&lt;/code&gt; is specified, a DB cluster snapshot is created before the DB cluster is deleted.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You must specify a &lt;code&gt;FinalDBSnapshotIdentifier&lt;/code&gt; parameter if &lt;code&gt;SkipFinalSnapshot&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param finalDBSnapshotIdentifier &lt;p&gt; The DB cluster snapshot identifier of the new DB cluster snapshot created when &lt;code&gt;SkipFinalSnapshot&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt; Specifying this parameter and also setting the &lt;code&gt;SkipFinalShapshot&lt;/code&gt; parameter to true results in an error.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be 1 to 255 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteDBClusterAsync(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean skipFinalSnapshot, String finalDBSnapshotIdentifier, final ApiCallback<DeleteDBClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteDBClusterValidateBeforeCall(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, skipFinalSnapshot, finalDBSnapshotIdentifier, _callback);
        Type localVarReturnType = new TypeToken<DeleteDBClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteDBClusterEndpoint
     * @param dbClusterEndpointIdentifier The identifier associated with the custom endpoint. This parameter is stored as a lowercase string. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterEndpointStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterEndpointNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteDBClusterEndpointCall(String dbClusterEndpointIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteDBClusterEndpoint";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterEndpointIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterEndpointIdentifier", dbClusterEndpointIdentifier));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteDBClusterEndpointValidateBeforeCall(String dbClusterEndpointIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterEndpointIdentifier' is set
        if (dbClusterEndpointIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterEndpointIdentifier' when calling gETDeleteDBClusterEndpoint(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteDBClusterEndpoint(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteDBClusterEndpoint(Async)");
        }

        return gETDeleteDBClusterEndpointCall(dbClusterEndpointIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes a custom endpoint and removes it from an Amazon Neptune DB cluster.
     * @param dbClusterEndpointIdentifier The identifier associated with the custom endpoint. This parameter is stored as a lowercase string. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteDBClusterEndpointOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterEndpointStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterEndpointNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDBClusterEndpointOutput gETDeleteDBClusterEndpoint(String dbClusterEndpointIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteDBClusterEndpointOutput> localVarResp = gETDeleteDBClusterEndpointWithHttpInfo(dbClusterEndpointIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a custom endpoint and removes it from an Amazon Neptune DB cluster.
     * @param dbClusterEndpointIdentifier The identifier associated with the custom endpoint. This parameter is stored as a lowercase string. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteDBClusterEndpointOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterEndpointStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterEndpointNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteDBClusterEndpointOutput> gETDeleteDBClusterEndpointWithHttpInfo(String dbClusterEndpointIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteDBClusterEndpointValidateBeforeCall(dbClusterEndpointIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteDBClusterEndpointOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a custom endpoint and removes it from an Amazon Neptune DB cluster.
     * @param dbClusterEndpointIdentifier The identifier associated with the custom endpoint. This parameter is stored as a lowercase string. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterEndpointStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterEndpointNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteDBClusterEndpointAsync(String dbClusterEndpointIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteDBClusterEndpointOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteDBClusterEndpointValidateBeforeCall(dbClusterEndpointIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteDBClusterEndpointOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteDBClusterParameterGroup
     * @param dbClusterParameterGroupName &lt;p&gt;The name of the DB cluster parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be the name of an existing DB cluster parameter group.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can&#39;t delete a default DB cluster parameter group.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be associated with any DB clusters.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteDBClusterParameterGroupCall(String dbClusterParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteDBClusterParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterParameterGroupName", dbClusterParameterGroupName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteDBClusterParameterGroupValidateBeforeCall(String dbClusterParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterParameterGroupName' is set
        if (dbClusterParameterGroupName == null) {
            throw new ApiException("Missing the required parameter 'dbClusterParameterGroupName' when calling gETDeleteDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteDBClusterParameterGroup(Async)");
        }

        return gETDeleteDBClusterParameterGroupCall(dbClusterParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can&#39;t be associated with any DB clusters.
     * @param dbClusterParameterGroupName &lt;p&gt;The name of the DB cluster parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be the name of an existing DB cluster parameter group.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can&#39;t delete a default DB cluster parameter group.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be associated with any DB clusters.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public void gETDeleteDBClusterParameterGroup(String dbClusterParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETDeleteDBClusterParameterGroupWithHttpInfo(dbClusterParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can&#39;t be associated with any DB clusters.
     * @param dbClusterParameterGroupName &lt;p&gt;The name of the DB cluster parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be the name of an existing DB cluster parameter group.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can&#39;t delete a default DB cluster parameter group.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be associated with any DB clusters.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETDeleteDBClusterParameterGroupWithHttpInfo(String dbClusterParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteDBClusterParameterGroupValidateBeforeCall(dbClusterParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can&#39;t be associated with any DB clusters.
     * @param dbClusterParameterGroupName &lt;p&gt;The name of the DB cluster parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be the name of an existing DB cluster parameter group.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can&#39;t delete a default DB cluster parameter group.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be associated with any DB clusters.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteDBClusterParameterGroupAsync(String dbClusterParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteDBClusterParameterGroupValidateBeforeCall(dbClusterParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteDBClusterSnapshot
     * @param dbClusterSnapshotIdentifier &lt;p&gt;The identifier of the DB cluster snapshot to delete.&lt;/p&gt; &lt;p&gt;Constraints: Must be the name of an existing DB cluster snapshot in the &lt;code&gt;available&lt;/code&gt; state.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteDBClusterSnapshotCall(String dbClusterSnapshotIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteDBClusterSnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterSnapshotIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterSnapshotIdentifier", dbClusterSnapshotIdentifier));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteDBClusterSnapshotValidateBeforeCall(String dbClusterSnapshotIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterSnapshotIdentifier' is set
        if (dbClusterSnapshotIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterSnapshotIdentifier' when calling gETDeleteDBClusterSnapshot(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteDBClusterSnapshot(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteDBClusterSnapshot(Async)");
        }

        return gETDeleteDBClusterSnapshotCall(dbClusterSnapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The DB cluster snapshot must be in the &lt;code&gt;available&lt;/code&gt; state to be deleted.&lt;/p&gt; &lt;/note&gt;
     * @param dbClusterSnapshotIdentifier &lt;p&gt;The identifier of the DB cluster snapshot to delete.&lt;/p&gt; &lt;p&gt;Constraints: Must be the name of an existing DB cluster snapshot in the &lt;code&gt;available&lt;/code&gt; state.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteDBClusterSnapshotResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDBClusterSnapshotResult gETDeleteDBClusterSnapshot(String dbClusterSnapshotIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteDBClusterSnapshotResult> localVarResp = gETDeleteDBClusterSnapshotWithHttpInfo(dbClusterSnapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The DB cluster snapshot must be in the &lt;code&gt;available&lt;/code&gt; state to be deleted.&lt;/p&gt; &lt;/note&gt;
     * @param dbClusterSnapshotIdentifier &lt;p&gt;The identifier of the DB cluster snapshot to delete.&lt;/p&gt; &lt;p&gt;Constraints: Must be the name of an existing DB cluster snapshot in the &lt;code&gt;available&lt;/code&gt; state.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteDBClusterSnapshotResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteDBClusterSnapshotResult> gETDeleteDBClusterSnapshotWithHttpInfo(String dbClusterSnapshotIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteDBClusterSnapshotValidateBeforeCall(dbClusterSnapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteDBClusterSnapshotResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The DB cluster snapshot must be in the &lt;code&gt;available&lt;/code&gt; state to be deleted.&lt;/p&gt; &lt;/note&gt;
     * @param dbClusterSnapshotIdentifier &lt;p&gt;The identifier of the DB cluster snapshot to delete.&lt;/p&gt; &lt;p&gt;Constraints: Must be the name of an existing DB cluster snapshot in the &lt;code&gt;available&lt;/code&gt; state.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteDBClusterSnapshotAsync(String dbClusterSnapshotIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteDBClusterSnapshotResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteDBClusterSnapshotValidateBeforeCall(dbClusterSnapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteDBClusterSnapshotResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteDBInstance
     * @param dbInstanceIdentifier &lt;p&gt;The DB instance identifier for the DB instance to be deleted. This parameter isn&#39;t case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the name of an existing DB instance.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param skipFinalSnapshot &lt;p&gt; Determines whether a final DB snapshot is created before the DB instance is deleted. If &lt;code&gt;true&lt;/code&gt; is specified, no DBSnapshot is created. If &lt;code&gt;false&lt;/code&gt; is specified, a DB snapshot is created before the DB instance is deleted.&lt;/p&gt; &lt;p&gt;Note that when a DB instance is in a failure state and has a status of &#39;failed&#39;, &#39;incompatible-restore&#39;, or &#39;incompatible-network&#39;, it can only be deleted when the SkipFinalSnapshot parameter is set to \&quot;true\&quot;.&lt;/p&gt; &lt;p&gt;Specify &lt;code&gt;true&lt;/code&gt; when deleting a Read Replica.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param finalDBSnapshotIdentifier &lt;p&gt; The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be 1 to 255 letters or numbers.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be specified when deleting a Read Replica.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteDBInstanceCall(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean skipFinalSnapshot, String finalDBSnapshotIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteDBInstance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbInstanceIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBInstanceIdentifier", dbInstanceIdentifier));
        }

        if (skipFinalSnapshot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SkipFinalSnapshot", skipFinalSnapshot));
        }

        if (finalDBSnapshotIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FinalDBSnapshotIdentifier", finalDBSnapshotIdentifier));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteDBInstanceValidateBeforeCall(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean skipFinalSnapshot, String finalDBSnapshotIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbInstanceIdentifier' is set
        if (dbInstanceIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbInstanceIdentifier' when calling gETDeleteDBInstance(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteDBInstance(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteDBInstance(Async)");
        }

        return gETDeleteDBInstanceCall(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, skipFinalSnapshot, finalDBSnapshotIdentifier, _callback);

    }

    /**
     * 
     * &lt;p&gt;The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can&#39;t be recovered. Manual DB snapshots of the DB instance to be deleted by &lt;code&gt;DeleteDBInstance&lt;/code&gt; are not deleted.&lt;/p&gt; &lt;p&gt; If you request a final DB snapshot the status of the Amazon Neptune DB instance is &lt;code&gt;deleting&lt;/code&gt; until the DB snapshot is created. The API action &lt;code&gt;DescribeDBInstance&lt;/code&gt; is used to monitor the status of this operation. The action can&#39;t be canceled or reverted once submitted.&lt;/p&gt; &lt;p&gt;Note that when a DB instance is in a failure state and has a status of &lt;code&gt;failed&lt;/code&gt;, &lt;code&gt;incompatible-restore&lt;/code&gt;, or &lt;code&gt;incompatible-network&lt;/code&gt;, you can only delete it when the &lt;code&gt;SkipFinalSnapshot&lt;/code&gt; parameter is set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can&#39;t delete a DB instance if it is the only instance in the DB cluster, or if it has deletion protection enabled.&lt;/p&gt;
     * @param dbInstanceIdentifier &lt;p&gt;The DB instance identifier for the DB instance to be deleted. This parameter isn&#39;t case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the name of an existing DB instance.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param skipFinalSnapshot &lt;p&gt; Determines whether a final DB snapshot is created before the DB instance is deleted. If &lt;code&gt;true&lt;/code&gt; is specified, no DBSnapshot is created. If &lt;code&gt;false&lt;/code&gt; is specified, a DB snapshot is created before the DB instance is deleted.&lt;/p&gt; &lt;p&gt;Note that when a DB instance is in a failure state and has a status of &#39;failed&#39;, &#39;incompatible-restore&#39;, or &#39;incompatible-network&#39;, it can only be deleted when the SkipFinalSnapshot parameter is set to \&quot;true\&quot;.&lt;/p&gt; &lt;p&gt;Specify &lt;code&gt;true&lt;/code&gt; when deleting a Read Replica.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param finalDBSnapshotIdentifier &lt;p&gt; The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be 1 to 255 letters or numbers.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be specified when deleting a Read Replica.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return DeleteDBInstanceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDBInstanceResult gETDeleteDBInstance(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean skipFinalSnapshot, String finalDBSnapshotIdentifier) throws ApiException {
        ApiResponse<DeleteDBInstanceResult> localVarResp = gETDeleteDBInstanceWithHttpInfo(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, skipFinalSnapshot, finalDBSnapshotIdentifier);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can&#39;t be recovered. Manual DB snapshots of the DB instance to be deleted by &lt;code&gt;DeleteDBInstance&lt;/code&gt; are not deleted.&lt;/p&gt; &lt;p&gt; If you request a final DB snapshot the status of the Amazon Neptune DB instance is &lt;code&gt;deleting&lt;/code&gt; until the DB snapshot is created. The API action &lt;code&gt;DescribeDBInstance&lt;/code&gt; is used to monitor the status of this operation. The action can&#39;t be canceled or reverted once submitted.&lt;/p&gt; &lt;p&gt;Note that when a DB instance is in a failure state and has a status of &lt;code&gt;failed&lt;/code&gt;, &lt;code&gt;incompatible-restore&lt;/code&gt;, or &lt;code&gt;incompatible-network&lt;/code&gt;, you can only delete it when the &lt;code&gt;SkipFinalSnapshot&lt;/code&gt; parameter is set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can&#39;t delete a DB instance if it is the only instance in the DB cluster, or if it has deletion protection enabled.&lt;/p&gt;
     * @param dbInstanceIdentifier &lt;p&gt;The DB instance identifier for the DB instance to be deleted. This parameter isn&#39;t case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the name of an existing DB instance.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param skipFinalSnapshot &lt;p&gt; Determines whether a final DB snapshot is created before the DB instance is deleted. If &lt;code&gt;true&lt;/code&gt; is specified, no DBSnapshot is created. If &lt;code&gt;false&lt;/code&gt; is specified, a DB snapshot is created before the DB instance is deleted.&lt;/p&gt; &lt;p&gt;Note that when a DB instance is in a failure state and has a status of &#39;failed&#39;, &#39;incompatible-restore&#39;, or &#39;incompatible-network&#39;, it can only be deleted when the SkipFinalSnapshot parameter is set to \&quot;true\&quot;.&lt;/p&gt; &lt;p&gt;Specify &lt;code&gt;true&lt;/code&gt; when deleting a Read Replica.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param finalDBSnapshotIdentifier &lt;p&gt; The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be 1 to 255 letters or numbers.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be specified when deleting a Read Replica.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ApiResponse&lt;DeleteDBInstanceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteDBInstanceResult> gETDeleteDBInstanceWithHttpInfo(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean skipFinalSnapshot, String finalDBSnapshotIdentifier) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteDBInstanceValidateBeforeCall(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, skipFinalSnapshot, finalDBSnapshotIdentifier, null);
        Type localVarReturnType = new TypeToken<DeleteDBInstanceResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can&#39;t be recovered. Manual DB snapshots of the DB instance to be deleted by &lt;code&gt;DeleteDBInstance&lt;/code&gt; are not deleted.&lt;/p&gt; &lt;p&gt; If you request a final DB snapshot the status of the Amazon Neptune DB instance is &lt;code&gt;deleting&lt;/code&gt; until the DB snapshot is created. The API action &lt;code&gt;DescribeDBInstance&lt;/code&gt; is used to monitor the status of this operation. The action can&#39;t be canceled or reverted once submitted.&lt;/p&gt; &lt;p&gt;Note that when a DB instance is in a failure state and has a status of &lt;code&gt;failed&lt;/code&gt;, &lt;code&gt;incompatible-restore&lt;/code&gt;, or &lt;code&gt;incompatible-network&lt;/code&gt;, you can only delete it when the &lt;code&gt;SkipFinalSnapshot&lt;/code&gt; parameter is set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can&#39;t delete a DB instance if it is the only instance in the DB cluster, or if it has deletion protection enabled.&lt;/p&gt;
     * @param dbInstanceIdentifier &lt;p&gt;The DB instance identifier for the DB instance to be deleted. This parameter isn&#39;t case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the name of an existing DB instance.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param skipFinalSnapshot &lt;p&gt; Determines whether a final DB snapshot is created before the DB instance is deleted. If &lt;code&gt;true&lt;/code&gt; is specified, no DBSnapshot is created. If &lt;code&gt;false&lt;/code&gt; is specified, a DB snapshot is created before the DB instance is deleted.&lt;/p&gt; &lt;p&gt;Note that when a DB instance is in a failure state and has a status of &#39;failed&#39;, &#39;incompatible-restore&#39;, or &#39;incompatible-network&#39;, it can only be deleted when the SkipFinalSnapshot parameter is set to \&quot;true\&quot;.&lt;/p&gt; &lt;p&gt;Specify &lt;code&gt;true&lt;/code&gt; when deleting a Read Replica.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param finalDBSnapshotIdentifier &lt;p&gt; The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be 1 to 255 letters or numbers.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be specified when deleting a Read Replica.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteDBInstanceAsync(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean skipFinalSnapshot, String finalDBSnapshotIdentifier, final ApiCallback<DeleteDBInstanceResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteDBInstanceValidateBeforeCall(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, skipFinalSnapshot, finalDBSnapshotIdentifier, _callback);
        Type localVarReturnType = new TypeToken<DeleteDBInstanceResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteDBParameterGroup
     * @param dbParameterGroupName &lt;p&gt;The name of the DB parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be the name of an existing DB parameter group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can&#39;t delete a default DB parameter group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be associated with any DB instances&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteDBParameterGroupCall(String dbParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteDBParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBParameterGroupName", dbParameterGroupName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteDBParameterGroupValidateBeforeCall(String dbParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbParameterGroupName' is set
        if (dbParameterGroupName == null) {
            throw new ApiException("Missing the required parameter 'dbParameterGroupName' when calling gETDeleteDBParameterGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteDBParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteDBParameterGroup(Async)");
        }

        return gETDeleteDBParameterGroupCall(dbParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can&#39;t be associated with any DB instances.
     * @param dbParameterGroupName &lt;p&gt;The name of the DB parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be the name of an existing DB parameter group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can&#39;t delete a default DB parameter group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be associated with any DB instances&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public void gETDeleteDBParameterGroup(String dbParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETDeleteDBParameterGroupWithHttpInfo(dbParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can&#39;t be associated with any DB instances.
     * @param dbParameterGroupName &lt;p&gt;The name of the DB parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be the name of an existing DB parameter group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can&#39;t delete a default DB parameter group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be associated with any DB instances&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETDeleteDBParameterGroupWithHttpInfo(String dbParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteDBParameterGroupValidateBeforeCall(dbParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can&#39;t be associated with any DB instances.
     * @param dbParameterGroupName &lt;p&gt;The name of the DB parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be the name of an existing DB parameter group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can&#39;t delete a default DB parameter group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be associated with any DB instances&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteDBParameterGroupAsync(String dbParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteDBParameterGroupValidateBeforeCall(dbParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteDBSubnetGroup
     * @param dbSubnetGroupName &lt;p&gt;The name of the database subnet group to delete.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can&#39;t delete the default subnet group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;p&gt;Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSubnetStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteDBSubnetGroupCall(String dbSubnetGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteDBSubnetGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbSubnetGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBSubnetGroupName", dbSubnetGroupName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteDBSubnetGroupValidateBeforeCall(String dbSubnetGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbSubnetGroupName' is set
        if (dbSubnetGroupName == null) {
            throw new ApiException("Missing the required parameter 'dbSubnetGroupName' when calling gETDeleteDBSubnetGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteDBSubnetGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteDBSubnetGroup(Async)");
        }

        return gETDeleteDBSubnetGroupCall(dbSubnetGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a DB subnet group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The specified database subnet group must not be associated with any DB instances.&lt;/p&gt; &lt;/note&gt;
     * @param dbSubnetGroupName &lt;p&gt;The name of the database subnet group to delete.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can&#39;t delete the default subnet group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;p&gt;Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSubnetStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public void gETDeleteDBSubnetGroup(String dbSubnetGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETDeleteDBSubnetGroupWithHttpInfo(dbSubnetGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes a DB subnet group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The specified database subnet group must not be associated with any DB instances.&lt;/p&gt; &lt;/note&gt;
     * @param dbSubnetGroupName &lt;p&gt;The name of the database subnet group to delete.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can&#39;t delete the default subnet group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;p&gt;Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSubnetStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETDeleteDBSubnetGroupWithHttpInfo(String dbSubnetGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteDBSubnetGroupValidateBeforeCall(dbSubnetGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a DB subnet group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The specified database subnet group must not be associated with any DB instances.&lt;/p&gt; &lt;/note&gt;
     * @param dbSubnetGroupName &lt;p&gt;The name of the database subnet group to delete.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can&#39;t delete the default subnet group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;p&gt;Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSubnetStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteDBSubnetGroupAsync(String dbSubnetGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteDBSubnetGroupValidateBeforeCall(dbSubnetGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteEventSubscription
     * @param subscriptionName The name of the event notification subscription you want to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEventSubscriptionStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteEventSubscriptionCall(String subscriptionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteEventSubscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subscriptionName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SubscriptionName", subscriptionName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteEventSubscriptionValidateBeforeCall(String subscriptionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionName' is set
        if (subscriptionName == null) {
            throw new ApiException("Missing the required parameter 'subscriptionName' when calling gETDeleteEventSubscription(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteEventSubscription(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteEventSubscription(Async)");
        }

        return gETDeleteEventSubscriptionCall(subscriptionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes an event notification subscription.
     * @param subscriptionName The name of the event notification subscription you want to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteEventSubscriptionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEventSubscriptionStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DeleteEventSubscriptionResult gETDeleteEventSubscription(String subscriptionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteEventSubscriptionResult> localVarResp = gETDeleteEventSubscriptionWithHttpInfo(subscriptionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes an event notification subscription.
     * @param subscriptionName The name of the event notification subscription you want to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteEventSubscriptionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEventSubscriptionStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteEventSubscriptionResult> gETDeleteEventSubscriptionWithHttpInfo(String subscriptionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteEventSubscriptionValidateBeforeCall(subscriptionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteEventSubscriptionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an event notification subscription.
     * @param subscriptionName The name of the event notification subscription you want to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEventSubscriptionStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteEventSubscriptionAsync(String subscriptionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteEventSubscriptionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteEventSubscriptionValidateBeforeCall(subscriptionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteEventSubscriptionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteGlobalCluster
     * @param globalClusterIdentifier The cluster identifier of the global database cluster being deleted. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteGlobalClusterCall(String globalClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteGlobalCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (globalClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GlobalClusterIdentifier", globalClusterIdentifier));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteGlobalClusterValidateBeforeCall(String globalClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'globalClusterIdentifier' is set
        if (globalClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'globalClusterIdentifier' when calling gETDeleteGlobalCluster(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteGlobalCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteGlobalCluster(Async)");
        }

        return gETDeleteGlobalClusterCall(globalClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes a global database. The primary and all secondary clusters must already be detached or deleted first.
     * @param globalClusterIdentifier The cluster identifier of the global database cluster being deleted. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteGlobalClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DeleteGlobalClusterResult gETDeleteGlobalCluster(String globalClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteGlobalClusterResult> localVarResp = gETDeleteGlobalClusterWithHttpInfo(globalClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a global database. The primary and all secondary clusters must already be detached or deleted first.
     * @param globalClusterIdentifier The cluster identifier of the global database cluster being deleted. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteGlobalClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteGlobalClusterResult> gETDeleteGlobalClusterWithHttpInfo(String globalClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteGlobalClusterValidateBeforeCall(globalClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteGlobalClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a global database. The primary and all secondary clusters must already be detached or deleted first.
     * @param globalClusterIdentifier The cluster identifier of the global database cluster being deleted. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteGlobalClusterAsync(String globalClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteGlobalClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteGlobalClusterValidateBeforeCall(globalClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteGlobalClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeDBClusterEndpoints
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterIdentifier The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string. (optional)
     * @param dbClusterEndpointIdentifier The identifier of the endpoint to describe. This parameter is stored as a lowercase string. (optional)
     * @param filters A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format &lt;code&gt;Name&#x3D;&lt;i&gt;endpoint_type&lt;/i&gt;,Values&#x3D;&lt;i&gt;endpoint_type1&lt;/i&gt;,&lt;i&gt;endpoint_type2&lt;/i&gt;,...&lt;/code&gt;. &lt;code&gt;Name&lt;/code&gt; can be one of: &lt;code&gt;db-cluster-endpoint-type&lt;/code&gt;, &lt;code&gt;db-cluster-endpoint-custom-type&lt;/code&gt;, &lt;code&gt;db-cluster-endpoint-id&lt;/code&gt;, &lt;code&gt;db-cluster-endpoint-status&lt;/code&gt;. &lt;code&gt;Values&lt;/code&gt; for the &lt;code&gt; db-cluster-endpoint-type&lt;/code&gt; filter can be one or more of: &lt;code&gt;reader&lt;/code&gt;, &lt;code&gt;writer&lt;/code&gt;, &lt;code&gt;custom&lt;/code&gt;. &lt;code&gt;Values&lt;/code&gt; for the &lt;code&gt;db-cluster-endpoint-custom-type&lt;/code&gt; filter can be one or more of: &lt;code&gt;reader&lt;/code&gt;, &lt;code&gt;any&lt;/code&gt;. &lt;code&gt;Values&lt;/code&gt; for the &lt;code&gt;db-cluster-endpoint-status&lt;/code&gt; filter can be one or more of: &lt;code&gt;available&lt;/code&gt;, &lt;code&gt;creating&lt;/code&gt;, &lt;code&gt;deleting&lt;/code&gt;, &lt;code&gt;inactive&lt;/code&gt;, &lt;code&gt;modifying&lt;/code&gt;.  (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so you can retrieve the remaining results. &lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous &lt;code&gt;DescribeDBClusterEndpoints&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBClusterEndpointsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, String dbClusterEndpointIdentifier, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBClusterEndpoints";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterIdentifier", dbClusterIdentifier));
        }

        if (dbClusterEndpointIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterEndpointIdentifier", dbClusterEndpointIdentifier));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeDBClusterEndpointsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, String dbClusterEndpointIdentifier, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeDBClusterEndpoints(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeDBClusterEndpoints(Async)");
        }

        return gETDescribeDBClusterEndpointsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, dbClusterEndpointIdentifier, filters, maxRecords, marker, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about endpoints for an Amazon Neptune DB cluster.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation can also return information for Amazon RDS clusters and Amazon DocDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterIdentifier The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string. (optional)
     * @param dbClusterEndpointIdentifier The identifier of the endpoint to describe. This parameter is stored as a lowercase string. (optional)
     * @param filters A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format &lt;code&gt;Name&#x3D;&lt;i&gt;endpoint_type&lt;/i&gt;,Values&#x3D;&lt;i&gt;endpoint_type1&lt;/i&gt;,&lt;i&gt;endpoint_type2&lt;/i&gt;,...&lt;/code&gt;. &lt;code&gt;Name&lt;/code&gt; can be one of: &lt;code&gt;db-cluster-endpoint-type&lt;/code&gt;, &lt;code&gt;db-cluster-endpoint-custom-type&lt;/code&gt;, &lt;code&gt;db-cluster-endpoint-id&lt;/code&gt;, &lt;code&gt;db-cluster-endpoint-status&lt;/code&gt;. &lt;code&gt;Values&lt;/code&gt; for the &lt;code&gt; db-cluster-endpoint-type&lt;/code&gt; filter can be one or more of: &lt;code&gt;reader&lt;/code&gt;, &lt;code&gt;writer&lt;/code&gt;, &lt;code&gt;custom&lt;/code&gt;. &lt;code&gt;Values&lt;/code&gt; for the &lt;code&gt;db-cluster-endpoint-custom-type&lt;/code&gt; filter can be one or more of: &lt;code&gt;reader&lt;/code&gt;, &lt;code&gt;any&lt;/code&gt;. &lt;code&gt;Values&lt;/code&gt; for the &lt;code&gt;db-cluster-endpoint-status&lt;/code&gt; filter can be one or more of: &lt;code&gt;available&lt;/code&gt;, &lt;code&gt;creating&lt;/code&gt;, &lt;code&gt;deleting&lt;/code&gt;, &lt;code&gt;inactive&lt;/code&gt;, &lt;code&gt;modifying&lt;/code&gt;.  (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so you can retrieve the remaining results. &lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous &lt;code&gt;DescribeDBClusterEndpoints&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;.  (optional)
     * @return DBClusterEndpointMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBClusterEndpointMessage gETDescribeDBClusterEndpoints(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, String dbClusterEndpointIdentifier, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<DBClusterEndpointMessage> localVarResp = gETDescribeDBClusterEndpointsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, dbClusterEndpointIdentifier, filters, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about endpoints for an Amazon Neptune DB cluster.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation can also return information for Amazon RDS clusters and Amazon DocDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterIdentifier The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string. (optional)
     * @param dbClusterEndpointIdentifier The identifier of the endpoint to describe. This parameter is stored as a lowercase string. (optional)
     * @param filters A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format &lt;code&gt;Name&#x3D;&lt;i&gt;endpoint_type&lt;/i&gt;,Values&#x3D;&lt;i&gt;endpoint_type1&lt;/i&gt;,&lt;i&gt;endpoint_type2&lt;/i&gt;,...&lt;/code&gt;. &lt;code&gt;Name&lt;/code&gt; can be one of: &lt;code&gt;db-cluster-endpoint-type&lt;/code&gt;, &lt;code&gt;db-cluster-endpoint-custom-type&lt;/code&gt;, &lt;code&gt;db-cluster-endpoint-id&lt;/code&gt;, &lt;code&gt;db-cluster-endpoint-status&lt;/code&gt;. &lt;code&gt;Values&lt;/code&gt; for the &lt;code&gt; db-cluster-endpoint-type&lt;/code&gt; filter can be one or more of: &lt;code&gt;reader&lt;/code&gt;, &lt;code&gt;writer&lt;/code&gt;, &lt;code&gt;custom&lt;/code&gt;. &lt;code&gt;Values&lt;/code&gt; for the &lt;code&gt;db-cluster-endpoint-custom-type&lt;/code&gt; filter can be one or more of: &lt;code&gt;reader&lt;/code&gt;, &lt;code&gt;any&lt;/code&gt;. &lt;code&gt;Values&lt;/code&gt; for the &lt;code&gt;db-cluster-endpoint-status&lt;/code&gt; filter can be one or more of: &lt;code&gt;available&lt;/code&gt;, &lt;code&gt;creating&lt;/code&gt;, &lt;code&gt;deleting&lt;/code&gt;, &lt;code&gt;inactive&lt;/code&gt;, &lt;code&gt;modifying&lt;/code&gt;.  (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so you can retrieve the remaining results. &lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous &lt;code&gt;DescribeDBClusterEndpoints&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;.  (optional)
     * @return ApiResponse&lt;DBClusterEndpointMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBClusterEndpointMessage> gETDescribeDBClusterEndpointsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, String dbClusterEndpointIdentifier, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeDBClusterEndpointsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, dbClusterEndpointIdentifier, filters, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DBClusterEndpointMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about endpoints for an Amazon Neptune DB cluster.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation can also return information for Amazon RDS clusters and Amazon DocDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterIdentifier The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string. (optional)
     * @param dbClusterEndpointIdentifier The identifier of the endpoint to describe. This parameter is stored as a lowercase string. (optional)
     * @param filters A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format &lt;code&gt;Name&#x3D;&lt;i&gt;endpoint_type&lt;/i&gt;,Values&#x3D;&lt;i&gt;endpoint_type1&lt;/i&gt;,&lt;i&gt;endpoint_type2&lt;/i&gt;,...&lt;/code&gt;. &lt;code&gt;Name&lt;/code&gt; can be one of: &lt;code&gt;db-cluster-endpoint-type&lt;/code&gt;, &lt;code&gt;db-cluster-endpoint-custom-type&lt;/code&gt;, &lt;code&gt;db-cluster-endpoint-id&lt;/code&gt;, &lt;code&gt;db-cluster-endpoint-status&lt;/code&gt;. &lt;code&gt;Values&lt;/code&gt; for the &lt;code&gt; db-cluster-endpoint-type&lt;/code&gt; filter can be one or more of: &lt;code&gt;reader&lt;/code&gt;, &lt;code&gt;writer&lt;/code&gt;, &lt;code&gt;custom&lt;/code&gt;. &lt;code&gt;Values&lt;/code&gt; for the &lt;code&gt;db-cluster-endpoint-custom-type&lt;/code&gt; filter can be one or more of: &lt;code&gt;reader&lt;/code&gt;, &lt;code&gt;any&lt;/code&gt;. &lt;code&gt;Values&lt;/code&gt; for the &lt;code&gt;db-cluster-endpoint-status&lt;/code&gt; filter can be one or more of: &lt;code&gt;available&lt;/code&gt;, &lt;code&gt;creating&lt;/code&gt;, &lt;code&gt;deleting&lt;/code&gt;, &lt;code&gt;inactive&lt;/code&gt;, &lt;code&gt;modifying&lt;/code&gt;.  (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so you can retrieve the remaining results. &lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous &lt;code&gt;DescribeDBClusterEndpoints&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBClusterEndpointsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, String dbClusterEndpointIdentifier, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback<DBClusterEndpointMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeDBClusterEndpointsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, dbClusterEndpointIdentifier, filters, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DBClusterEndpointMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeDBClusterParameterGroups
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterParameterGroupName &lt;p&gt;The name of a specific DB cluster parameter group to return details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBClusterParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous &lt;code&gt;DescribeDBClusterParameterGroups&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBClusterParameterGroupsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterParameterGroupName, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBClusterParameterGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterParameterGroupName", dbClusterParameterGroupName));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeDBClusterParameterGroupsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterParameterGroupName, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeDBClusterParameterGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeDBClusterParameterGroups(Async)");
        }

        return gETDescribeDBClusterParameterGroupsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterParameterGroupName, filters, maxRecords, marker, _callback);

    }

    /**
     * 
     *  Returns a list of &lt;code&gt;DBClusterParameterGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterParameterGroupName &lt;p&gt;The name of a specific DB cluster parameter group to return details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBClusterParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous &lt;code&gt;DescribeDBClusterParameterGroups&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return DBClusterParameterGroupsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBClusterParameterGroupsMessage gETDescribeDBClusterParameterGroups(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterParameterGroupName, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<DBClusterParameterGroupsMessage> localVarResp = gETDescribeDBClusterParameterGroupsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterParameterGroupName, filters, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     *  Returns a list of &lt;code&gt;DBClusterParameterGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterParameterGroupName &lt;p&gt;The name of a specific DB cluster parameter group to return details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBClusterParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous &lt;code&gt;DescribeDBClusterParameterGroups&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;DBClusterParameterGroupsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBClusterParameterGroupsMessage> gETDescribeDBClusterParameterGroupsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterParameterGroupName, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeDBClusterParameterGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterParameterGroupName, filters, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Returns a list of &lt;code&gt;DBClusterParameterGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterParameterGroupName &lt;p&gt;The name of a specific DB cluster parameter group to return details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBClusterParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous &lt;code&gt;DescribeDBClusterParameterGroups&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBClusterParameterGroupsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterParameterGroupName, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback<DBClusterParameterGroupsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeDBClusterParameterGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterParameterGroupName, filters, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeDBClusterParameters
     * @param dbClusterParameterGroupName &lt;p&gt;The name of a specific DB cluster parameter group to return parameter details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBClusterParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param source  A value that indicates to return only parameters for a specific source. Parameter sources can be &lt;code&gt;engine&lt;/code&gt;, &lt;code&gt;service&lt;/code&gt;, or &lt;code&gt;customer&lt;/code&gt;. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous &lt;code&gt;DescribeDBClusterParameters&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBClusterParametersCall(String dbClusterParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String source, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBClusterParameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterParameterGroupName", dbClusterParameterGroupName));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Source", source));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeDBClusterParametersValidateBeforeCall(String dbClusterParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String source, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterParameterGroupName' is set
        if (dbClusterParameterGroupName == null) {
            throw new ApiException("Missing the required parameter 'dbClusterParameterGroupName' when calling gETDescribeDBClusterParameters(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeDBClusterParameters(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeDBClusterParameters(Async)");
        }

        return gETDescribeDBClusterParametersCall(dbClusterParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, source, filters, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns the detailed parameter list for a particular DB cluster parameter group.
     * @param dbClusterParameterGroupName &lt;p&gt;The name of a specific DB cluster parameter group to return parameter details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBClusterParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param source  A value that indicates to return only parameters for a specific source. Parameter sources can be &lt;code&gt;engine&lt;/code&gt;, &lt;code&gt;service&lt;/code&gt;, or &lt;code&gt;customer&lt;/code&gt;. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous &lt;code&gt;DescribeDBClusterParameters&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;.  (optional)
     * @return DBClusterParameterGroupDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBClusterParameterGroupDetails gETDescribeDBClusterParameters(String dbClusterParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String source, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<DBClusterParameterGroupDetails> localVarResp = gETDescribeDBClusterParametersWithHttpInfo(dbClusterParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, source, filters, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the detailed parameter list for a particular DB cluster parameter group.
     * @param dbClusterParameterGroupName &lt;p&gt;The name of a specific DB cluster parameter group to return parameter details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBClusterParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param source  A value that indicates to return only parameters for a specific source. Parameter sources can be &lt;code&gt;engine&lt;/code&gt;, &lt;code&gt;service&lt;/code&gt;, or &lt;code&gt;customer&lt;/code&gt;. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous &lt;code&gt;DescribeDBClusterParameters&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;.  (optional)
     * @return ApiResponse&lt;DBClusterParameterGroupDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBClusterParameterGroupDetails> gETDescribeDBClusterParametersWithHttpInfo(String dbClusterParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String source, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeDBClusterParametersValidateBeforeCall(dbClusterParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, source, filters, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the detailed parameter list for a particular DB cluster parameter group.
     * @param dbClusterParameterGroupName &lt;p&gt;The name of a specific DB cluster parameter group to return parameter details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBClusterParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param source  A value that indicates to return only parameters for a specific source. Parameter sources can be &lt;code&gt;engine&lt;/code&gt;, &lt;code&gt;service&lt;/code&gt;, or &lt;code&gt;customer&lt;/code&gt;. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous &lt;code&gt;DescribeDBClusterParameters&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBClusterParametersAsync(String dbClusterParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String source, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback<DBClusterParameterGroupDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeDBClusterParametersValidateBeforeCall(dbClusterParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, source, filters, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeDBClusterSnapshotAttributes
     * @param dbClusterSnapshotIdentifier The identifier for the DB cluster snapshot to describe the attributes for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBClusterSnapshotAttributesCall(String dbClusterSnapshotIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBClusterSnapshotAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterSnapshotIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterSnapshotIdentifier", dbClusterSnapshotIdentifier));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeDBClusterSnapshotAttributesValidateBeforeCall(String dbClusterSnapshotIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterSnapshotIdentifier' is set
        if (dbClusterSnapshotIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterSnapshotIdentifier' when calling gETDescribeDBClusterSnapshotAttributes(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeDBClusterSnapshotAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeDBClusterSnapshotAttributes(Async)");
        }

        return gETDescribeDBClusterSnapshotAttributesCall(dbClusterSnapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.&lt;/p&gt; &lt;p&gt;When sharing snapshots with other Amazon accounts, &lt;code&gt;DescribeDBClusterSnapshotAttributes&lt;/code&gt; returns the &lt;code&gt;restore&lt;/code&gt; attribute and a list of IDs for the Amazon accounts that are authorized to copy or restore the manual DB cluster snapshot. If &lt;code&gt;all&lt;/code&gt; is included in the list of values for the &lt;code&gt;restore&lt;/code&gt; attribute, then the manual DB cluster snapshot is public and can be copied or restored by all Amazon accounts.&lt;/p&gt; &lt;p&gt;To add or remove access for an Amazon account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the &lt;a&gt;ModifyDBClusterSnapshotAttribute&lt;/a&gt; API action.&lt;/p&gt;
     * @param dbClusterSnapshotIdentifier The identifier for the DB cluster snapshot to describe the attributes for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeDBClusterSnapshotAttributesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeDBClusterSnapshotAttributesResult gETDescribeDBClusterSnapshotAttributes(String dbClusterSnapshotIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeDBClusterSnapshotAttributesResult> localVarResp = gETDescribeDBClusterSnapshotAttributesWithHttpInfo(dbClusterSnapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.&lt;/p&gt; &lt;p&gt;When sharing snapshots with other Amazon accounts, &lt;code&gt;DescribeDBClusterSnapshotAttributes&lt;/code&gt; returns the &lt;code&gt;restore&lt;/code&gt; attribute and a list of IDs for the Amazon accounts that are authorized to copy or restore the manual DB cluster snapshot. If &lt;code&gt;all&lt;/code&gt; is included in the list of values for the &lt;code&gt;restore&lt;/code&gt; attribute, then the manual DB cluster snapshot is public and can be copied or restored by all Amazon accounts.&lt;/p&gt; &lt;p&gt;To add or remove access for an Amazon account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the &lt;a&gt;ModifyDBClusterSnapshotAttribute&lt;/a&gt; API action.&lt;/p&gt;
     * @param dbClusterSnapshotIdentifier The identifier for the DB cluster snapshot to describe the attributes for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeDBClusterSnapshotAttributesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeDBClusterSnapshotAttributesResult> gETDescribeDBClusterSnapshotAttributesWithHttpInfo(String dbClusterSnapshotIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeDBClusterSnapshotAttributesValidateBeforeCall(dbClusterSnapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeDBClusterSnapshotAttributesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.&lt;/p&gt; &lt;p&gt;When sharing snapshots with other Amazon accounts, &lt;code&gt;DescribeDBClusterSnapshotAttributes&lt;/code&gt; returns the &lt;code&gt;restore&lt;/code&gt; attribute and a list of IDs for the Amazon accounts that are authorized to copy or restore the manual DB cluster snapshot. If &lt;code&gt;all&lt;/code&gt; is included in the list of values for the &lt;code&gt;restore&lt;/code&gt; attribute, then the manual DB cluster snapshot is public and can be copied or restored by all Amazon accounts.&lt;/p&gt; &lt;p&gt;To add or remove access for an Amazon account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the &lt;a&gt;ModifyDBClusterSnapshotAttribute&lt;/a&gt; API action.&lt;/p&gt;
     * @param dbClusterSnapshotIdentifier The identifier for the DB cluster snapshot to describe the attributes for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBClusterSnapshotAttributesAsync(String dbClusterSnapshotIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeDBClusterSnapshotAttributesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeDBClusterSnapshotAttributesValidateBeforeCall(dbClusterSnapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeDBClusterSnapshotAttributesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeDBClusterSnapshots
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterIdentifier &lt;p&gt;The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can&#39;t be used in conjunction with the &lt;code&gt;DBClusterSnapshotIdentifier&lt;/code&gt; parameter. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the identifier of an existing DBCluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param dbClusterSnapshotIdentifier &lt;p&gt;A specific DB cluster snapshot identifier to describe. This parameter can&#39;t be used in conjunction with the &lt;code&gt;DBClusterIdentifier&lt;/code&gt; parameter. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the identifier of an existing DBClusterSnapshot.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If this identifier is for an automated snapshot, the &lt;code&gt;SnapshotType&lt;/code&gt; parameter must also be specified.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param snapshotType &lt;p&gt;The type of DB cluster snapshots to be returned. You can specify one of the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;automated&lt;/code&gt; - Return all DB cluster snapshots that have been automatically taken by Amazon Neptune for my Amazon account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;manual&lt;/code&gt; - Return all DB cluster snapshots that have been taken by my Amazon account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;shared&lt;/code&gt; - Return all manual DB cluster snapshots that have been shared to my Amazon account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;public&lt;/code&gt; - Return all DB cluster snapshots that have been marked as public.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you don&#39;t specify a &lt;code&gt;SnapshotType&lt;/code&gt; value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the &lt;code&gt;IncludeShared&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt;. You can include public DB cluster snapshots with these results by setting the &lt;code&gt;IncludePublic&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;IncludeShared&lt;/code&gt; and &lt;code&gt;IncludePublic&lt;/code&gt; parameters don&#39;t apply for &lt;code&gt;SnapshotType&lt;/code&gt; values of &lt;code&gt;manual&lt;/code&gt; or &lt;code&gt;automated&lt;/code&gt;. The &lt;code&gt;IncludePublic&lt;/code&gt; parameter doesn&#39;t apply when &lt;code&gt;SnapshotType&lt;/code&gt; is set to &lt;code&gt;shared&lt;/code&gt;. The &lt;code&gt;IncludeShared&lt;/code&gt; parameter doesn&#39;t apply when &lt;code&gt;SnapshotType&lt;/code&gt; is set to &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous &lt;code&gt;DescribeDBClusterSnapshots&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;.  (optional)
     * @param includeShared &lt;p&gt;True to include shared manual DB cluster snapshots from other Amazon accounts that this Amazon account has been given permission to copy or restore, and otherwise false. The default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can give an Amazon account permission to restore a manual DB cluster snapshot from another Amazon account by the &lt;a&gt;ModifyDBClusterSnapshotAttribute&lt;/a&gt; API action.&lt;/p&gt; (optional)
     * @param includePublic &lt;p&gt;True to include manual DB cluster snapshots that are public and can be copied or restored by any Amazon account, and otherwise false. The default is &lt;code&gt;false&lt;/code&gt;. The default is false.&lt;/p&gt; &lt;p&gt;You can share a manual DB cluster snapshot as public by using the &lt;a&gt;ModifyDBClusterSnapshotAttribute&lt;/a&gt; API action.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBClusterSnapshotsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, String dbClusterSnapshotIdentifier, String snapshotType, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, Boolean includeShared, Boolean includePublic, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBClusterSnapshots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterIdentifier", dbClusterIdentifier));
        }

        if (dbClusterSnapshotIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterSnapshotIdentifier", dbClusterSnapshotIdentifier));
        }

        if (snapshotType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SnapshotType", snapshotType));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (includeShared != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IncludeShared", includeShared));
        }

        if (includePublic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IncludePublic", includePublic));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeDBClusterSnapshotsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, String dbClusterSnapshotIdentifier, String snapshotType, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, Boolean includeShared, Boolean includePublic, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeDBClusterSnapshots(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeDBClusterSnapshots(Async)");
        }

        return gETDescribeDBClusterSnapshotsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, dbClusterSnapshotIdentifier, snapshotType, filters, maxRecords, marker, includeShared, includePublic, _callback);

    }

    /**
     * 
     * Returns information about DB cluster snapshots. This API action supports pagination.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterIdentifier &lt;p&gt;The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can&#39;t be used in conjunction with the &lt;code&gt;DBClusterSnapshotIdentifier&lt;/code&gt; parameter. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the identifier of an existing DBCluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param dbClusterSnapshotIdentifier &lt;p&gt;A specific DB cluster snapshot identifier to describe. This parameter can&#39;t be used in conjunction with the &lt;code&gt;DBClusterIdentifier&lt;/code&gt; parameter. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the identifier of an existing DBClusterSnapshot.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If this identifier is for an automated snapshot, the &lt;code&gt;SnapshotType&lt;/code&gt; parameter must also be specified.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param snapshotType &lt;p&gt;The type of DB cluster snapshots to be returned. You can specify one of the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;automated&lt;/code&gt; - Return all DB cluster snapshots that have been automatically taken by Amazon Neptune for my Amazon account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;manual&lt;/code&gt; - Return all DB cluster snapshots that have been taken by my Amazon account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;shared&lt;/code&gt; - Return all manual DB cluster snapshots that have been shared to my Amazon account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;public&lt;/code&gt; - Return all DB cluster snapshots that have been marked as public.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you don&#39;t specify a &lt;code&gt;SnapshotType&lt;/code&gt; value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the &lt;code&gt;IncludeShared&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt;. You can include public DB cluster snapshots with these results by setting the &lt;code&gt;IncludePublic&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;IncludeShared&lt;/code&gt; and &lt;code&gt;IncludePublic&lt;/code&gt; parameters don&#39;t apply for &lt;code&gt;SnapshotType&lt;/code&gt; values of &lt;code&gt;manual&lt;/code&gt; or &lt;code&gt;automated&lt;/code&gt;. The &lt;code&gt;IncludePublic&lt;/code&gt; parameter doesn&#39;t apply when &lt;code&gt;SnapshotType&lt;/code&gt; is set to &lt;code&gt;shared&lt;/code&gt;. The &lt;code&gt;IncludeShared&lt;/code&gt; parameter doesn&#39;t apply when &lt;code&gt;SnapshotType&lt;/code&gt; is set to &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous &lt;code&gt;DescribeDBClusterSnapshots&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;.  (optional)
     * @param includeShared &lt;p&gt;True to include shared manual DB cluster snapshots from other Amazon accounts that this Amazon account has been given permission to copy or restore, and otherwise false. The default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can give an Amazon account permission to restore a manual DB cluster snapshot from another Amazon account by the &lt;a&gt;ModifyDBClusterSnapshotAttribute&lt;/a&gt; API action.&lt;/p&gt; (optional)
     * @param includePublic &lt;p&gt;True to include manual DB cluster snapshots that are public and can be copied or restored by any Amazon account, and otherwise false. The default is &lt;code&gt;false&lt;/code&gt;. The default is false.&lt;/p&gt; &lt;p&gt;You can share a manual DB cluster snapshot as public by using the &lt;a&gt;ModifyDBClusterSnapshotAttribute&lt;/a&gt; API action.&lt;/p&gt; (optional)
     * @return DBClusterSnapshotMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBClusterSnapshotMessage gETDescribeDBClusterSnapshots(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, String dbClusterSnapshotIdentifier, String snapshotType, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, Boolean includeShared, Boolean includePublic) throws ApiException {
        ApiResponse<DBClusterSnapshotMessage> localVarResp = gETDescribeDBClusterSnapshotsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, dbClusterSnapshotIdentifier, snapshotType, filters, maxRecords, marker, includeShared, includePublic);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about DB cluster snapshots. This API action supports pagination.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterIdentifier &lt;p&gt;The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can&#39;t be used in conjunction with the &lt;code&gt;DBClusterSnapshotIdentifier&lt;/code&gt; parameter. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the identifier of an existing DBCluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param dbClusterSnapshotIdentifier &lt;p&gt;A specific DB cluster snapshot identifier to describe. This parameter can&#39;t be used in conjunction with the &lt;code&gt;DBClusterIdentifier&lt;/code&gt; parameter. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the identifier of an existing DBClusterSnapshot.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If this identifier is for an automated snapshot, the &lt;code&gt;SnapshotType&lt;/code&gt; parameter must also be specified.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param snapshotType &lt;p&gt;The type of DB cluster snapshots to be returned. You can specify one of the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;automated&lt;/code&gt; - Return all DB cluster snapshots that have been automatically taken by Amazon Neptune for my Amazon account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;manual&lt;/code&gt; - Return all DB cluster snapshots that have been taken by my Amazon account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;shared&lt;/code&gt; - Return all manual DB cluster snapshots that have been shared to my Amazon account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;public&lt;/code&gt; - Return all DB cluster snapshots that have been marked as public.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you don&#39;t specify a &lt;code&gt;SnapshotType&lt;/code&gt; value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the &lt;code&gt;IncludeShared&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt;. You can include public DB cluster snapshots with these results by setting the &lt;code&gt;IncludePublic&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;IncludeShared&lt;/code&gt; and &lt;code&gt;IncludePublic&lt;/code&gt; parameters don&#39;t apply for &lt;code&gt;SnapshotType&lt;/code&gt; values of &lt;code&gt;manual&lt;/code&gt; or &lt;code&gt;automated&lt;/code&gt;. The &lt;code&gt;IncludePublic&lt;/code&gt; parameter doesn&#39;t apply when &lt;code&gt;SnapshotType&lt;/code&gt; is set to &lt;code&gt;shared&lt;/code&gt;. The &lt;code&gt;IncludeShared&lt;/code&gt; parameter doesn&#39;t apply when &lt;code&gt;SnapshotType&lt;/code&gt; is set to &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous &lt;code&gt;DescribeDBClusterSnapshots&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;.  (optional)
     * @param includeShared &lt;p&gt;True to include shared manual DB cluster snapshots from other Amazon accounts that this Amazon account has been given permission to copy or restore, and otherwise false. The default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can give an Amazon account permission to restore a manual DB cluster snapshot from another Amazon account by the &lt;a&gt;ModifyDBClusterSnapshotAttribute&lt;/a&gt; API action.&lt;/p&gt; (optional)
     * @param includePublic &lt;p&gt;True to include manual DB cluster snapshots that are public and can be copied or restored by any Amazon account, and otherwise false. The default is &lt;code&gt;false&lt;/code&gt;. The default is false.&lt;/p&gt; &lt;p&gt;You can share a manual DB cluster snapshot as public by using the &lt;a&gt;ModifyDBClusterSnapshotAttribute&lt;/a&gt; API action.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;DBClusterSnapshotMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBClusterSnapshotMessage> gETDescribeDBClusterSnapshotsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, String dbClusterSnapshotIdentifier, String snapshotType, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, Boolean includeShared, Boolean includePublic) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeDBClusterSnapshotsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, dbClusterSnapshotIdentifier, snapshotType, filters, maxRecords, marker, includeShared, includePublic, null);
        Type localVarReturnType = new TypeToken<DBClusterSnapshotMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about DB cluster snapshots. This API action supports pagination.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterIdentifier &lt;p&gt;The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can&#39;t be used in conjunction with the &lt;code&gt;DBClusterSnapshotIdentifier&lt;/code&gt; parameter. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the identifier of an existing DBCluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param dbClusterSnapshotIdentifier &lt;p&gt;A specific DB cluster snapshot identifier to describe. This parameter can&#39;t be used in conjunction with the &lt;code&gt;DBClusterIdentifier&lt;/code&gt; parameter. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the identifier of an existing DBClusterSnapshot.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If this identifier is for an automated snapshot, the &lt;code&gt;SnapshotType&lt;/code&gt; parameter must also be specified.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param snapshotType &lt;p&gt;The type of DB cluster snapshots to be returned. You can specify one of the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;automated&lt;/code&gt; - Return all DB cluster snapshots that have been automatically taken by Amazon Neptune for my Amazon account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;manual&lt;/code&gt; - Return all DB cluster snapshots that have been taken by my Amazon account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;shared&lt;/code&gt; - Return all manual DB cluster snapshots that have been shared to my Amazon account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;public&lt;/code&gt; - Return all DB cluster snapshots that have been marked as public.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you don&#39;t specify a &lt;code&gt;SnapshotType&lt;/code&gt; value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the &lt;code&gt;IncludeShared&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt;. You can include public DB cluster snapshots with these results by setting the &lt;code&gt;IncludePublic&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;IncludeShared&lt;/code&gt; and &lt;code&gt;IncludePublic&lt;/code&gt; parameters don&#39;t apply for &lt;code&gt;SnapshotType&lt;/code&gt; values of &lt;code&gt;manual&lt;/code&gt; or &lt;code&gt;automated&lt;/code&gt;. The &lt;code&gt;IncludePublic&lt;/code&gt; parameter doesn&#39;t apply when &lt;code&gt;SnapshotType&lt;/code&gt; is set to &lt;code&gt;shared&lt;/code&gt;. The &lt;code&gt;IncludeShared&lt;/code&gt; parameter doesn&#39;t apply when &lt;code&gt;SnapshotType&lt;/code&gt; is set to &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous &lt;code&gt;DescribeDBClusterSnapshots&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;.  (optional)
     * @param includeShared &lt;p&gt;True to include shared manual DB cluster snapshots from other Amazon accounts that this Amazon account has been given permission to copy or restore, and otherwise false. The default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can give an Amazon account permission to restore a manual DB cluster snapshot from another Amazon account by the &lt;a&gt;ModifyDBClusterSnapshotAttribute&lt;/a&gt; API action.&lt;/p&gt; (optional)
     * @param includePublic &lt;p&gt;True to include manual DB cluster snapshots that are public and can be copied or restored by any Amazon account, and otherwise false. The default is &lt;code&gt;false&lt;/code&gt;. The default is false.&lt;/p&gt; &lt;p&gt;You can share a manual DB cluster snapshot as public by using the &lt;a&gt;ModifyDBClusterSnapshotAttribute&lt;/a&gt; API action.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBClusterSnapshotsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, String dbClusterSnapshotIdentifier, String snapshotType, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, Boolean includeShared, Boolean includePublic, final ApiCallback<DBClusterSnapshotMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeDBClusterSnapshotsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, dbClusterSnapshotIdentifier, snapshotType, filters, maxRecords, marker, includeShared, includePublic, _callback);
        Type localVarReturnType = new TypeToken<DBClusterSnapshotMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeDBClusters
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterIdentifier &lt;p&gt;The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn&#39;t case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match an existing DBClusterIdentifier.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters &lt;p&gt;A filter that specifies one or more DB clusters to describe.&lt;/p&gt; &lt;p&gt;Supported filters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-cluster-id&lt;/code&gt; - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;engine&lt;/code&gt; - Accepts an engine name (such as &lt;code&gt;neptune&lt;/code&gt;), and restricts the results list to DB clusters created by that engine.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For example, to invoke this API from the Amazon CLI and filter so that only Neptune DB clusters are returned, you could use the following command:&lt;/p&gt; (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous &lt;a&gt;DescribeDBClusters&lt;/a&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBClustersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBClusters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterIdentifier", dbClusterIdentifier));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeDBClustersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeDBClusters(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeDBClusters(Async)");
        }

        return gETDescribeDBClustersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, filters, maxRecords, marker, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about provisioned DB clusters, and supports pagination.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation can also return information for Amazon RDS clusters and Amazon DocDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterIdentifier &lt;p&gt;The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn&#39;t case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match an existing DBClusterIdentifier.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters &lt;p&gt;A filter that specifies one or more DB clusters to describe.&lt;/p&gt; &lt;p&gt;Supported filters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-cluster-id&lt;/code&gt; - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;engine&lt;/code&gt; - Accepts an engine name (such as &lt;code&gt;neptune&lt;/code&gt;), and restricts the results list to DB clusters created by that engine.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For example, to invoke this API from the Amazon CLI and filter so that only Neptune DB clusters are returned, you could use the following command:&lt;/p&gt; (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous &lt;a&gt;DescribeDBClusters&lt;/a&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return DBClusterMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBClusterMessage gETDescribeDBClusters(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<DBClusterMessage> localVarResp = gETDescribeDBClustersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, filters, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about provisioned DB clusters, and supports pagination.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation can also return information for Amazon RDS clusters and Amazon DocDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterIdentifier &lt;p&gt;The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn&#39;t case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match an existing DBClusterIdentifier.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters &lt;p&gt;A filter that specifies one or more DB clusters to describe.&lt;/p&gt; &lt;p&gt;Supported filters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-cluster-id&lt;/code&gt; - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;engine&lt;/code&gt; - Accepts an engine name (such as &lt;code&gt;neptune&lt;/code&gt;), and restricts the results list to DB clusters created by that engine.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For example, to invoke this API from the Amazon CLI and filter so that only Neptune DB clusters are returned, you could use the following command:&lt;/p&gt; (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous &lt;a&gt;DescribeDBClusters&lt;/a&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;DBClusterMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBClusterMessage> gETDescribeDBClustersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeDBClustersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, filters, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DBClusterMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about provisioned DB clusters, and supports pagination.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation can also return information for Amazon RDS clusters and Amazon DocDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterIdentifier &lt;p&gt;The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn&#39;t case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match an existing DBClusterIdentifier.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters &lt;p&gt;A filter that specifies one or more DB clusters to describe.&lt;/p&gt; &lt;p&gt;Supported filters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-cluster-id&lt;/code&gt; - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;engine&lt;/code&gt; - Accepts an engine name (such as &lt;code&gt;neptune&lt;/code&gt;), and restricts the results list to DB clusters created by that engine.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For example, to invoke this API from the Amazon CLI and filter so that only Neptune DB clusters are returned, you could use the following command:&lt;/p&gt; (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous &lt;a&gt;DescribeDBClusters&lt;/a&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBClustersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback<DBClusterMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeDBClustersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, filters, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DBClusterMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeDBEngineVersions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param engine The database engine to return. (optional)
     * @param engineVersion &lt;p&gt;The database engine version to return.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;5.1.49&lt;/code&gt; &lt;/p&gt; (optional)
     * @param dbParameterGroupFamily &lt;p&gt;The name of a specific DB parameter group family to return details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match an existing DBParameterGroupFamily.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters Not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more than the &lt;code&gt;MaxRecords&lt;/code&gt; value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param defaultOnly Indicates that only the default version of the specified engine or engine and major version combination is returned. (optional)
     * @param listSupportedCharacterSets If this parameter is specified and the requested engine supports the &lt;code&gt;CharacterSetName&lt;/code&gt; parameter for &lt;code&gt;CreateDBInstance&lt;/code&gt;, the response includes a list of supported character sets for each engine version. (optional)
     * @param listSupportedTimezones If this parameter is specified and the requested engine supports the &lt;code&gt;TimeZone&lt;/code&gt; parameter for &lt;code&gt;CreateDBInstance&lt;/code&gt;, the response includes a list of supported time zones for each engine version. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBEngineVersionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String engine, String engineVersion, String dbParameterGroupFamily, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, Boolean defaultOnly, Boolean listSupportedCharacterSets, Boolean listSupportedTimezones, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBEngineVersions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Engine", engine));
        }

        if (engineVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EngineVersion", engineVersion));
        }

        if (dbParameterGroupFamily != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBParameterGroupFamily", dbParameterGroupFamily));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (defaultOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DefaultOnly", defaultOnly));
        }

        if (listSupportedCharacterSets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ListSupportedCharacterSets", listSupportedCharacterSets));
        }

        if (listSupportedTimezones != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ListSupportedTimezones", listSupportedTimezones));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeDBEngineVersionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String engine, String engineVersion, String dbParameterGroupFamily, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, Boolean defaultOnly, Boolean listSupportedCharacterSets, Boolean listSupportedTimezones, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeDBEngineVersions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeDBEngineVersions(Async)");
        }

        return gETDescribeDBEngineVersionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engine, engineVersion, dbParameterGroupFamily, filters, maxRecords, marker, defaultOnly, listSupportedCharacterSets, listSupportedTimezones, _callback);

    }

    /**
     * 
     * Returns a list of the available DB engines.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param engine The database engine to return. (optional)
     * @param engineVersion &lt;p&gt;The database engine version to return.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;5.1.49&lt;/code&gt; &lt;/p&gt; (optional)
     * @param dbParameterGroupFamily &lt;p&gt;The name of a specific DB parameter group family to return details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match an existing DBParameterGroupFamily.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters Not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more than the &lt;code&gt;MaxRecords&lt;/code&gt; value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param defaultOnly Indicates that only the default version of the specified engine or engine and major version combination is returned. (optional)
     * @param listSupportedCharacterSets If this parameter is specified and the requested engine supports the &lt;code&gt;CharacterSetName&lt;/code&gt; parameter for &lt;code&gt;CreateDBInstance&lt;/code&gt;, the response includes a list of supported character sets for each engine version. (optional)
     * @param listSupportedTimezones If this parameter is specified and the requested engine supports the &lt;code&gt;TimeZone&lt;/code&gt; parameter for &lt;code&gt;CreateDBInstance&lt;/code&gt;, the response includes a list of supported time zones for each engine version. (optional)
     * @return DBEngineVersionMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DBEngineVersionMessage gETDescribeDBEngineVersions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String engine, String engineVersion, String dbParameterGroupFamily, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, Boolean defaultOnly, Boolean listSupportedCharacterSets, Boolean listSupportedTimezones) throws ApiException {
        ApiResponse<DBEngineVersionMessage> localVarResp = gETDescribeDBEngineVersionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engine, engineVersion, dbParameterGroupFamily, filters, maxRecords, marker, defaultOnly, listSupportedCharacterSets, listSupportedTimezones);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of the available DB engines.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param engine The database engine to return. (optional)
     * @param engineVersion &lt;p&gt;The database engine version to return.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;5.1.49&lt;/code&gt; &lt;/p&gt; (optional)
     * @param dbParameterGroupFamily &lt;p&gt;The name of a specific DB parameter group family to return details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match an existing DBParameterGroupFamily.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters Not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more than the &lt;code&gt;MaxRecords&lt;/code&gt; value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param defaultOnly Indicates that only the default version of the specified engine or engine and major version combination is returned. (optional)
     * @param listSupportedCharacterSets If this parameter is specified and the requested engine supports the &lt;code&gt;CharacterSetName&lt;/code&gt; parameter for &lt;code&gt;CreateDBInstance&lt;/code&gt;, the response includes a list of supported character sets for each engine version. (optional)
     * @param listSupportedTimezones If this parameter is specified and the requested engine supports the &lt;code&gt;TimeZone&lt;/code&gt; parameter for &lt;code&gt;CreateDBInstance&lt;/code&gt;, the response includes a list of supported time zones for each engine version. (optional)
     * @return ApiResponse&lt;DBEngineVersionMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBEngineVersionMessage> gETDescribeDBEngineVersionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String engine, String engineVersion, String dbParameterGroupFamily, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, Boolean defaultOnly, Boolean listSupportedCharacterSets, Boolean listSupportedTimezones) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeDBEngineVersionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engine, engineVersion, dbParameterGroupFamily, filters, maxRecords, marker, defaultOnly, listSupportedCharacterSets, listSupportedTimezones, null);
        Type localVarReturnType = new TypeToken<DBEngineVersionMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of the available DB engines.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param engine The database engine to return. (optional)
     * @param engineVersion &lt;p&gt;The database engine version to return.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;5.1.49&lt;/code&gt; &lt;/p&gt; (optional)
     * @param dbParameterGroupFamily &lt;p&gt;The name of a specific DB parameter group family to return details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match an existing DBParameterGroupFamily.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters Not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more than the &lt;code&gt;MaxRecords&lt;/code&gt; value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param defaultOnly Indicates that only the default version of the specified engine or engine and major version combination is returned. (optional)
     * @param listSupportedCharacterSets If this parameter is specified and the requested engine supports the &lt;code&gt;CharacterSetName&lt;/code&gt; parameter for &lt;code&gt;CreateDBInstance&lt;/code&gt;, the response includes a list of supported character sets for each engine version. (optional)
     * @param listSupportedTimezones If this parameter is specified and the requested engine supports the &lt;code&gt;TimeZone&lt;/code&gt; parameter for &lt;code&gt;CreateDBInstance&lt;/code&gt;, the response includes a list of supported time zones for each engine version. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBEngineVersionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String engine, String engineVersion, String dbParameterGroupFamily, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, Boolean defaultOnly, Boolean listSupportedCharacterSets, Boolean listSupportedTimezones, final ApiCallback<DBEngineVersionMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeDBEngineVersionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engine, engineVersion, dbParameterGroupFamily, filters, maxRecords, marker, defaultOnly, listSupportedCharacterSets, listSupportedTimezones, _callback);
        Type localVarReturnType = new TypeToken<DBEngineVersionMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeDBInstances
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbInstanceIdentifier &lt;p&gt;The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn&#39;t case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the identifier of an existing DBInstance.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters &lt;p&gt;A filter that specifies one or more DB instances to describe.&lt;/p&gt; &lt;p&gt;Supported filters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-cluster-id&lt;/code&gt; - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;engine&lt;/code&gt; - Accepts an engine name (such as &lt;code&gt;neptune&lt;/code&gt;), and restricts the results list to DB instances created by that engine.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For example, to invoke this API from the Amazon CLI and filter so that only Neptune DB instances are returned, you could use the following command:&lt;/p&gt; (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous &lt;code&gt;DescribeDBInstances&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBInstancesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbInstanceIdentifier, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBInstances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbInstanceIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBInstanceIdentifier", dbInstanceIdentifier));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeDBInstancesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbInstanceIdentifier, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeDBInstances(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeDBInstances(Async)");
        }

        return gETDescribeDBInstancesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbInstanceIdentifier, filters, maxRecords, marker, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about provisioned instances, and supports pagination.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation can also return information for Amazon RDS instances and Amazon DocDB instances.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbInstanceIdentifier &lt;p&gt;The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn&#39;t case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the identifier of an existing DBInstance.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters &lt;p&gt;A filter that specifies one or more DB instances to describe.&lt;/p&gt; &lt;p&gt;Supported filters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-cluster-id&lt;/code&gt; - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;engine&lt;/code&gt; - Accepts an engine name (such as &lt;code&gt;neptune&lt;/code&gt;), and restricts the results list to DB instances created by that engine.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For example, to invoke this API from the Amazon CLI and filter so that only Neptune DB instances are returned, you could use the following command:&lt;/p&gt; (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous &lt;code&gt;DescribeDBInstances&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return DBInstanceMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBInstanceMessage gETDescribeDBInstances(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbInstanceIdentifier, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<DBInstanceMessage> localVarResp = gETDescribeDBInstancesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbInstanceIdentifier, filters, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about provisioned instances, and supports pagination.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation can also return information for Amazon RDS instances and Amazon DocDB instances.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbInstanceIdentifier &lt;p&gt;The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn&#39;t case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the identifier of an existing DBInstance.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters &lt;p&gt;A filter that specifies one or more DB instances to describe.&lt;/p&gt; &lt;p&gt;Supported filters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-cluster-id&lt;/code&gt; - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;engine&lt;/code&gt; - Accepts an engine name (such as &lt;code&gt;neptune&lt;/code&gt;), and restricts the results list to DB instances created by that engine.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For example, to invoke this API from the Amazon CLI and filter so that only Neptune DB instances are returned, you could use the following command:&lt;/p&gt; (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous &lt;code&gt;DescribeDBInstances&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;DBInstanceMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBInstanceMessage> gETDescribeDBInstancesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbInstanceIdentifier, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeDBInstancesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbInstanceIdentifier, filters, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DBInstanceMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about provisioned instances, and supports pagination.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation can also return information for Amazon RDS instances and Amazon DocDB instances.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbInstanceIdentifier &lt;p&gt;The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn&#39;t case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the identifier of an existing DBInstance.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters &lt;p&gt;A filter that specifies one or more DB instances to describe.&lt;/p&gt; &lt;p&gt;Supported filters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-cluster-id&lt;/code&gt; - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;engine&lt;/code&gt; - Accepts an engine name (such as &lt;code&gt;neptune&lt;/code&gt;), and restricts the results list to DB instances created by that engine.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For example, to invoke this API from the Amazon CLI and filter so that only Neptune DB instances are returned, you could use the following command:&lt;/p&gt; (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous &lt;code&gt;DescribeDBInstances&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBInstancesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbInstanceIdentifier, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback<DBInstanceMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeDBInstancesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbInstanceIdentifier, filters, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DBInstanceMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeDBParameterGroups
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbParameterGroupName &lt;p&gt;The name of a specific DB parameter group to return details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBClusterParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous &lt;code&gt;DescribeDBParameterGroups&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBParameterGroupsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbParameterGroupName, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBParameterGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBParameterGroupName", dbParameterGroupName));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeDBParameterGroupsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbParameterGroupName, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeDBParameterGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeDBParameterGroups(Async)");
        }

        return gETDescribeDBParameterGroupsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbParameterGroupName, filters, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns a list of &lt;code&gt;DBParameterGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBParameterGroupName&lt;/code&gt; is specified, the list will contain only the description of the specified DB parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbParameterGroupName &lt;p&gt;The name of a specific DB parameter group to return details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBClusterParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous &lt;code&gt;DescribeDBParameterGroups&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return DBParameterGroupsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBParameterGroupsMessage gETDescribeDBParameterGroups(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbParameterGroupName, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<DBParameterGroupsMessage> localVarResp = gETDescribeDBParameterGroupsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbParameterGroupName, filters, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of &lt;code&gt;DBParameterGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBParameterGroupName&lt;/code&gt; is specified, the list will contain only the description of the specified DB parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbParameterGroupName &lt;p&gt;The name of a specific DB parameter group to return details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBClusterParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous &lt;code&gt;DescribeDBParameterGroups&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;DBParameterGroupsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBParameterGroupsMessage> gETDescribeDBParameterGroupsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbParameterGroupName, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeDBParameterGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbParameterGroupName, filters, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DBParameterGroupsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of &lt;code&gt;DBParameterGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBParameterGroupName&lt;/code&gt; is specified, the list will contain only the description of the specified DB parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbParameterGroupName &lt;p&gt;The name of a specific DB parameter group to return details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBClusterParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous &lt;code&gt;DescribeDBParameterGroups&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBParameterGroupsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbParameterGroupName, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback<DBParameterGroupsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeDBParameterGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbParameterGroupName, filters, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DBParameterGroupsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeDBParameters
     * @param dbParameterGroupName &lt;p&gt;The name of a specific DB parameter group to return details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param source &lt;p&gt;The parameter types to return.&lt;/p&gt; &lt;p&gt;Default: All parameter types returned&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;user | system | engine-default&lt;/code&gt; &lt;/p&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous &lt;code&gt;DescribeDBParameters&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBParametersCall(String dbParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String source, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBParameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBParameterGroupName", dbParameterGroupName));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Source", source));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeDBParametersValidateBeforeCall(String dbParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String source, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbParameterGroupName' is set
        if (dbParameterGroupName == null) {
            throw new ApiException("Missing the required parameter 'dbParameterGroupName' when calling gETDescribeDBParameters(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeDBParameters(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeDBParameters(Async)");
        }

        return gETDescribeDBParametersCall(dbParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, source, filters, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns the detailed parameter list for a particular DB parameter group.
     * @param dbParameterGroupName &lt;p&gt;The name of a specific DB parameter group to return details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param source &lt;p&gt;The parameter types to return.&lt;/p&gt; &lt;p&gt;Default: All parameter types returned&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;user | system | engine-default&lt;/code&gt; &lt;/p&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous &lt;code&gt;DescribeDBParameters&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return DBParameterGroupDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBParameterGroupDetails gETDescribeDBParameters(String dbParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String source, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<DBParameterGroupDetails> localVarResp = gETDescribeDBParametersWithHttpInfo(dbParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, source, filters, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the detailed parameter list for a particular DB parameter group.
     * @param dbParameterGroupName &lt;p&gt;The name of a specific DB parameter group to return details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param source &lt;p&gt;The parameter types to return.&lt;/p&gt; &lt;p&gt;Default: All parameter types returned&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;user | system | engine-default&lt;/code&gt; &lt;/p&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous &lt;code&gt;DescribeDBParameters&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;DBParameterGroupDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBParameterGroupDetails> gETDescribeDBParametersWithHttpInfo(String dbParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String source, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeDBParametersValidateBeforeCall(dbParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, source, filters, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DBParameterGroupDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the detailed parameter list for a particular DB parameter group.
     * @param dbParameterGroupName &lt;p&gt;The name of a specific DB parameter group to return details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param source &lt;p&gt;The parameter types to return.&lt;/p&gt; &lt;p&gt;Default: All parameter types returned&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;user | system | engine-default&lt;/code&gt; &lt;/p&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous &lt;code&gt;DescribeDBParameters&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBParametersAsync(String dbParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String source, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback<DBParameterGroupDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeDBParametersValidateBeforeCall(dbParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, source, filters, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DBParameterGroupDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeDBSubnetGroups
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbSubnetGroupName The name of the DB subnet group to return details for. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBSubnetGroupsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbSubnetGroupName, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBSubnetGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbSubnetGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBSubnetGroupName", dbSubnetGroupName));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeDBSubnetGroupsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbSubnetGroupName, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeDBSubnetGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeDBSubnetGroups(Async)");
        }

        return gETDescribeDBSubnetGroupsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbSubnetGroupName, filters, maxRecords, marker, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.&lt;/p&gt; &lt;p&gt;For an overview of CIDR ranges, go to the &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\&quot;&gt;Wikipedia Tutorial&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbSubnetGroupName The name of the DB subnet group to return details for. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return DBSubnetGroupMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBSubnetGroupMessage gETDescribeDBSubnetGroups(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbSubnetGroupName, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<DBSubnetGroupMessage> localVarResp = gETDescribeDBSubnetGroupsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbSubnetGroupName, filters, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.&lt;/p&gt; &lt;p&gt;For an overview of CIDR ranges, go to the &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\&quot;&gt;Wikipedia Tutorial&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbSubnetGroupName The name of the DB subnet group to return details for. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;DBSubnetGroupMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBSubnetGroupMessage> gETDescribeDBSubnetGroupsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbSubnetGroupName, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeDBSubnetGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbSubnetGroupName, filters, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DBSubnetGroupMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.&lt;/p&gt; &lt;p&gt;For an overview of CIDR ranges, go to the &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\&quot;&gt;Wikipedia Tutorial&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbSubnetGroupName The name of the DB subnet group to return details for. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBSubnetGroupsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbSubnetGroupName, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback<DBSubnetGroupMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeDBSubnetGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbSubnetGroupName, filters, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DBSubnetGroupMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeEngineDefaultClusterParameters
     * @param dbParameterGroupFamily The name of the DB cluster parameter group family to return engine parameter information for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous &lt;code&gt;DescribeEngineDefaultClusterParameters&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEngineDefaultClusterParametersCall(String dbParameterGroupFamily, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEngineDefaultClusterParameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbParameterGroupFamily != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBParameterGroupFamily", dbParameterGroupFamily));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeEngineDefaultClusterParametersValidateBeforeCall(String dbParameterGroupFamily, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbParameterGroupFamily' is set
        if (dbParameterGroupFamily == null) {
            throw new ApiException("Missing the required parameter 'dbParameterGroupFamily' when calling gETDescribeEngineDefaultClusterParameters(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeEngineDefaultClusterParameters(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeEngineDefaultClusterParameters(Async)");
        }

        return gETDescribeEngineDefaultClusterParametersCall(dbParameterGroupFamily, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns the default engine and system parameter information for the cluster database engine.
     * @param dbParameterGroupFamily The name of the DB cluster parameter group family to return engine parameter information for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous &lt;code&gt;DescribeEngineDefaultClusterParameters&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return DescribeEngineDefaultClusterParametersResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeEngineDefaultClusterParametersResult gETDescribeEngineDefaultClusterParameters(String dbParameterGroupFamily, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<DescribeEngineDefaultClusterParametersResult> localVarResp = gETDescribeEngineDefaultClusterParametersWithHttpInfo(dbParameterGroupFamily, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the default engine and system parameter information for the cluster database engine.
     * @param dbParameterGroupFamily The name of the DB cluster parameter group family to return engine parameter information for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous &lt;code&gt;DescribeEngineDefaultClusterParameters&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;DescribeEngineDefaultClusterParametersResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeEngineDefaultClusterParametersResult> gETDescribeEngineDefaultClusterParametersWithHttpInfo(String dbParameterGroupFamily, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeEngineDefaultClusterParametersValidateBeforeCall(dbParameterGroupFamily, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DescribeEngineDefaultClusterParametersResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the default engine and system parameter information for the cluster database engine.
     * @param dbParameterGroupFamily The name of the DB cluster parameter group family to return engine parameter information for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous &lt;code&gt;DescribeEngineDefaultClusterParameters&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEngineDefaultClusterParametersAsync(String dbParameterGroupFamily, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback<DescribeEngineDefaultClusterParametersResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeEngineDefaultClusterParametersValidateBeforeCall(dbParameterGroupFamily, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DescribeEngineDefaultClusterParametersResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeEngineDefaultParameters
     * @param dbParameterGroupFamily The name of the DB parameter group family. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters Not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous &lt;code&gt;DescribeEngineDefaultParameters&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEngineDefaultParametersCall(String dbParameterGroupFamily, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEngineDefaultParameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbParameterGroupFamily != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBParameterGroupFamily", dbParameterGroupFamily));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeEngineDefaultParametersValidateBeforeCall(String dbParameterGroupFamily, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbParameterGroupFamily' is set
        if (dbParameterGroupFamily == null) {
            throw new ApiException("Missing the required parameter 'dbParameterGroupFamily' when calling gETDescribeEngineDefaultParameters(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeEngineDefaultParameters(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeEngineDefaultParameters(Async)");
        }

        return gETDescribeEngineDefaultParametersCall(dbParameterGroupFamily, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns the default engine and system parameter information for the specified database engine.
     * @param dbParameterGroupFamily The name of the DB parameter group family. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters Not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous &lt;code&gt;DescribeEngineDefaultParameters&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return DescribeEngineDefaultParametersResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeEngineDefaultParametersResult gETDescribeEngineDefaultParameters(String dbParameterGroupFamily, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<DescribeEngineDefaultParametersResult> localVarResp = gETDescribeEngineDefaultParametersWithHttpInfo(dbParameterGroupFamily, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the default engine and system parameter information for the specified database engine.
     * @param dbParameterGroupFamily The name of the DB parameter group family. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters Not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous &lt;code&gt;DescribeEngineDefaultParameters&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;DescribeEngineDefaultParametersResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeEngineDefaultParametersResult> gETDescribeEngineDefaultParametersWithHttpInfo(String dbParameterGroupFamily, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeEngineDefaultParametersValidateBeforeCall(dbParameterGroupFamily, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DescribeEngineDefaultParametersResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the default engine and system parameter information for the specified database engine.
     * @param dbParameterGroupFamily The name of the DB parameter group family. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters Not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous &lt;code&gt;DescribeEngineDefaultParameters&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEngineDefaultParametersAsync(String dbParameterGroupFamily, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback<DescribeEngineDefaultParametersResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeEngineDefaultParametersValidateBeforeCall(dbParameterGroupFamily, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DescribeEngineDefaultParametersResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeEventCategories
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceType &lt;p&gt;The type of source that is generating the events.&lt;/p&gt; &lt;p&gt;Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot&lt;/p&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEventCategoriesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceType, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEventCategories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceType", sourceType));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeEventCategoriesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceType, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeEventCategories(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeEventCategories(Async)");
        }

        return gETDescribeEventCategoriesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceType, filters, _callback);

    }

    /**
     * 
     * Displays a list of categories for all event source types, or, if specified, for a specified source type.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceType &lt;p&gt;The type of source that is generating the events.&lt;/p&gt; &lt;p&gt;Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot&lt;/p&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @return EventCategoriesMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EventCategoriesMessage gETDescribeEventCategories(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceType, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters) throws ApiException {
        ApiResponse<EventCategoriesMessage> localVarResp = gETDescribeEventCategoriesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceType, filters);
        return localVarResp.getData();
    }

    /**
     * 
     * Displays a list of categories for all event source types, or, if specified, for a specified source type.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceType &lt;p&gt;The type of source that is generating the events.&lt;/p&gt; &lt;p&gt;Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot&lt;/p&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @return ApiResponse&lt;EventCategoriesMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventCategoriesMessage> gETDescribeEventCategoriesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceType, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeEventCategoriesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceType, filters, null);
        Type localVarReturnType = new TypeToken<EventCategoriesMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Displays a list of categories for all event source types, or, if specified, for a specified source type.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceType &lt;p&gt;The type of source that is generating the events.&lt;/p&gt; &lt;p&gt;Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot&lt;/p&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEventCategoriesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceType, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, final ApiCallback<EventCategoriesMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeEventCategoriesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceType, filters, _callback);
        Type localVarReturnType = new TypeToken<EventCategoriesMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeEventSubscriptions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subscriptionName The name of the event notification subscription you want to describe. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt; . (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEventSubscriptionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subscriptionName, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEventSubscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subscriptionName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SubscriptionName", subscriptionName));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeEventSubscriptionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subscriptionName, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeEventSubscriptions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeEventSubscriptions(Async)");
        }

        return gETDescribeEventSubscriptionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subscriptionName, filters, maxRecords, marker, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.&lt;/p&gt; &lt;p&gt;If you specify a SubscriptionName, lists the description for that subscription.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subscriptionName The name of the event notification subscription you want to describe. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt; . (optional)
     * @return EventSubscriptionsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public EventSubscriptionsMessage gETDescribeEventSubscriptions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subscriptionName, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<EventSubscriptionsMessage> localVarResp = gETDescribeEventSubscriptionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subscriptionName, filters, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.&lt;/p&gt; &lt;p&gt;If you specify a SubscriptionName, lists the description for that subscription.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subscriptionName The name of the event notification subscription you want to describe. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt; . (optional)
     * @return ApiResponse&lt;EventSubscriptionsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventSubscriptionsMessage> gETDescribeEventSubscriptionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subscriptionName, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeEventSubscriptionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subscriptionName, filters, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<EventSubscriptionsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.&lt;/p&gt; &lt;p&gt;If you specify a SubscriptionName, lists the description for that subscription.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subscriptionName The name of the event notification subscription you want to describe. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt; . (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEventSubscriptionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subscriptionName, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback<EventSubscriptionsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeEventSubscriptionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subscriptionName, filters, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<EventSubscriptionsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeEvents
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceIdentifier &lt;p&gt;The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If SourceIdentifier is supplied, SourceType must also be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBInstance&lt;/code&gt;, then a &lt;code&gt;DBInstanceIdentifier&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBSecurityGroup&lt;/code&gt;, a &lt;code&gt;DBSecurityGroupName&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBParameterGroup&lt;/code&gt;, a &lt;code&gt;DBParameterGroupName&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBSnapshot&lt;/code&gt;, a &lt;code&gt;DBSnapshotIdentifier&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param sourceType The event source to retrieve events for. If no value is specified, all events are returned. (optional)
     * @param startTime &lt;p&gt; The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO8601 Wikipedia page.&lt;/a&gt; &lt;/p&gt; &lt;p&gt;Example: 2009-07-08T18:00Z&lt;/p&gt; (optional)
     * @param endTime &lt;p&gt; The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO8601 Wikipedia page.&lt;/a&gt; &lt;/p&gt; &lt;p&gt;Example: 2009-07-08T18:00Z&lt;/p&gt; (optional)
     * @param duration &lt;p&gt;The number of minutes to retrieve events for.&lt;/p&gt; &lt;p&gt;Default: 60&lt;/p&gt; (optional)
     * @param eventCategories A list of event categories that trigger notifications for a event notification subscription. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEventsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceIdentifier, String sourceType, OffsetDateTime startTime, OffsetDateTime endTime, Integer duration, List<String> eventCategories, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEvents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceIdentifier", sourceIdentifier));
        }

        if (sourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceType", sourceType));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndTime", endTime));
        }

        if (duration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Duration", duration));
        }

        if (eventCategories != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "EventCategories", eventCategories));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeEventsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceIdentifier, String sourceType, OffsetDateTime startTime, OffsetDateTime endTime, Integer duration, List<String> eventCategories, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeEvents(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeEvents(Async)");
        }

        return gETDescribeEventsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceIdentifier, sourceType, startTime, endTime, duration, eventCategories, filters, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceIdentifier &lt;p&gt;The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If SourceIdentifier is supplied, SourceType must also be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBInstance&lt;/code&gt;, then a &lt;code&gt;DBInstanceIdentifier&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBSecurityGroup&lt;/code&gt;, a &lt;code&gt;DBSecurityGroupName&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBParameterGroup&lt;/code&gt;, a &lt;code&gt;DBParameterGroupName&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBSnapshot&lt;/code&gt;, a &lt;code&gt;DBSnapshotIdentifier&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param sourceType The event source to retrieve events for. If no value is specified, all events are returned. (optional)
     * @param startTime &lt;p&gt; The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO8601 Wikipedia page.&lt;/a&gt; &lt;/p&gt; &lt;p&gt;Example: 2009-07-08T18:00Z&lt;/p&gt; (optional)
     * @param endTime &lt;p&gt; The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO8601 Wikipedia page.&lt;/a&gt; &lt;/p&gt; &lt;p&gt;Example: 2009-07-08T18:00Z&lt;/p&gt; (optional)
     * @param duration &lt;p&gt;The number of minutes to retrieve events for.&lt;/p&gt; &lt;p&gt;Default: 60&lt;/p&gt; (optional)
     * @param eventCategories A list of event categories that trigger notifications for a event notification subscription. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return EventsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EventsMessage gETDescribeEvents(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceIdentifier, String sourceType, OffsetDateTime startTime, OffsetDateTime endTime, Integer duration, List<String> eventCategories, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<EventsMessage> localVarResp = gETDescribeEventsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceIdentifier, sourceType, startTime, endTime, duration, eventCategories, filters, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceIdentifier &lt;p&gt;The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If SourceIdentifier is supplied, SourceType must also be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBInstance&lt;/code&gt;, then a &lt;code&gt;DBInstanceIdentifier&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBSecurityGroup&lt;/code&gt;, a &lt;code&gt;DBSecurityGroupName&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBParameterGroup&lt;/code&gt;, a &lt;code&gt;DBParameterGroupName&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBSnapshot&lt;/code&gt;, a &lt;code&gt;DBSnapshotIdentifier&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param sourceType The event source to retrieve events for. If no value is specified, all events are returned. (optional)
     * @param startTime &lt;p&gt; The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO8601 Wikipedia page.&lt;/a&gt; &lt;/p&gt; &lt;p&gt;Example: 2009-07-08T18:00Z&lt;/p&gt; (optional)
     * @param endTime &lt;p&gt; The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO8601 Wikipedia page.&lt;/a&gt; &lt;/p&gt; &lt;p&gt;Example: 2009-07-08T18:00Z&lt;/p&gt; (optional)
     * @param duration &lt;p&gt;The number of minutes to retrieve events for.&lt;/p&gt; &lt;p&gt;Default: 60&lt;/p&gt; (optional)
     * @param eventCategories A list of event categories that trigger notifications for a event notification subscription. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;EventsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventsMessage> gETDescribeEventsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceIdentifier, String sourceType, OffsetDateTime startTime, OffsetDateTime endTime, Integer duration, List<String> eventCategories, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeEventsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceIdentifier, sourceType, startTime, endTime, duration, eventCategories, filters, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<EventsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceIdentifier &lt;p&gt;The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If SourceIdentifier is supplied, SourceType must also be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBInstance&lt;/code&gt;, then a &lt;code&gt;DBInstanceIdentifier&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBSecurityGroup&lt;/code&gt;, a &lt;code&gt;DBSecurityGroupName&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBParameterGroup&lt;/code&gt;, a &lt;code&gt;DBParameterGroupName&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBSnapshot&lt;/code&gt;, a &lt;code&gt;DBSnapshotIdentifier&lt;/code&gt; must be supplied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param sourceType The event source to retrieve events for. If no value is specified, all events are returned. (optional)
     * @param startTime &lt;p&gt; The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO8601 Wikipedia page.&lt;/a&gt; &lt;/p&gt; &lt;p&gt;Example: 2009-07-08T18:00Z&lt;/p&gt; (optional)
     * @param endTime &lt;p&gt; The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO8601 Wikipedia page.&lt;/a&gt; &lt;/p&gt; &lt;p&gt;Example: 2009-07-08T18:00Z&lt;/p&gt; (optional)
     * @param duration &lt;p&gt;The number of minutes to retrieve events for.&lt;/p&gt; &lt;p&gt;Default: 60&lt;/p&gt; (optional)
     * @param eventCategories A list of event categories that trigger notifications for a event notification subscription. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEventsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceIdentifier, String sourceType, OffsetDateTime startTime, OffsetDateTime endTime, Integer duration, List<String> eventCategories, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback<EventsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeEventsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceIdentifier, sourceType, startTime, endTime, duration, eventCategories, filters, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<EventsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeGlobalClusters
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param globalClusterIdentifier &lt;p&gt;The user-supplied DB cluster identifier. If this parameter is specified, only information about the specified DB cluster is returned. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints: If supplied, must match an existing DB cluster identifier.&lt;/p&gt; (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination marker token is included in the response that you can use to retrieve the remaining results.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;100&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker (&lt;i&gt;Optional&lt;/i&gt;) A pagination token returned by a previous call to &lt;code&gt;DescribeGlobalClusters&lt;/code&gt;. If this parameter is specified, the response will only include records beyond the marker, up to the number specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeGlobalClustersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String globalClusterIdentifier, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeGlobalClusters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (globalClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GlobalClusterIdentifier", globalClusterIdentifier));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeGlobalClustersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String globalClusterIdentifier, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeGlobalClusters(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeGlobalClusters(Async)");
        }

        return gETDescribeGlobalClustersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, globalClusterIdentifier, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns information about Neptune global database clusters. This API supports pagination.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param globalClusterIdentifier &lt;p&gt;The user-supplied DB cluster identifier. If this parameter is specified, only information about the specified DB cluster is returned. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints: If supplied, must match an existing DB cluster identifier.&lt;/p&gt; (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination marker token is included in the response that you can use to retrieve the remaining results.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;100&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker (&lt;i&gt;Optional&lt;/i&gt;) A pagination token returned by a previous call to &lt;code&gt;DescribeGlobalClusters&lt;/code&gt;. If this parameter is specified, the response will only include records beyond the marker, up to the number specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return GlobalClustersMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public GlobalClustersMessage gETDescribeGlobalClusters(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String globalClusterIdentifier, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<GlobalClustersMessage> localVarResp = gETDescribeGlobalClustersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, globalClusterIdentifier, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about Neptune global database clusters. This API supports pagination.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param globalClusterIdentifier &lt;p&gt;The user-supplied DB cluster identifier. If this parameter is specified, only information about the specified DB cluster is returned. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints: If supplied, must match an existing DB cluster identifier.&lt;/p&gt; (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination marker token is included in the response that you can use to retrieve the remaining results.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;100&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker (&lt;i&gt;Optional&lt;/i&gt;) A pagination token returned by a previous call to &lt;code&gt;DescribeGlobalClusters&lt;/code&gt;. If this parameter is specified, the response will only include records beyond the marker, up to the number specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;GlobalClustersMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GlobalClustersMessage> gETDescribeGlobalClustersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String globalClusterIdentifier, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeGlobalClustersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, globalClusterIdentifier, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<GlobalClustersMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about Neptune global database clusters. This API supports pagination.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param globalClusterIdentifier &lt;p&gt;The user-supplied DB cluster identifier. If this parameter is specified, only information about the specified DB cluster is returned. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints: If supplied, must match an existing DB cluster identifier.&lt;/p&gt; (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination marker token is included in the response that you can use to retrieve the remaining results.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;100&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker (&lt;i&gt;Optional&lt;/i&gt;) A pagination token returned by a previous call to &lt;code&gt;DescribeGlobalClusters&lt;/code&gt;. If this parameter is specified, the response will only include records beyond the marker, up to the number specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeGlobalClustersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String globalClusterIdentifier, Integer maxRecords, String marker, final ApiCallback<GlobalClustersMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeGlobalClustersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, globalClusterIdentifier, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<GlobalClustersMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeOrderableDBInstanceOptions
     * @param engine The name of the engine to retrieve DB instance options for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param engineVersion The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version. (optional)
     * @param dbInstanceClass The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class. (optional)
     * @param licenseModel The license model filter value. Specify this parameter to show only the available offerings matching the specified license model. (optional)
     * @param vpc The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt; . (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeOrderableDBInstanceOptionsCall(String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String engineVersion, String dbInstanceClass, String licenseModel, Boolean vpc, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeOrderableDBInstanceOptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Engine", engine));
        }

        if (engineVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EngineVersion", engineVersion));
        }

        if (dbInstanceClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBInstanceClass", dbInstanceClass));
        }

        if (licenseModel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LicenseModel", licenseModel));
        }

        if (vpc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Vpc", vpc));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeOrderableDBInstanceOptionsValidateBeforeCall(String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String engineVersion, String dbInstanceClass, String licenseModel, Boolean vpc, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'engine' is set
        if (engine == null) {
            throw new ApiException("Missing the required parameter 'engine' when calling gETDescribeOrderableDBInstanceOptions(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeOrderableDBInstanceOptions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeOrderableDBInstanceOptions(Async)");
        }

        return gETDescribeOrderableDBInstanceOptionsCall(engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engineVersion, dbInstanceClass, licenseModel, vpc, filters, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns a list of orderable DB instance options for the specified engine.
     * @param engine The name of the engine to retrieve DB instance options for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param engineVersion The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version. (optional)
     * @param dbInstanceClass The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class. (optional)
     * @param licenseModel The license model filter value. Specify this parameter to show only the available offerings matching the specified license model. (optional)
     * @param vpc The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt; . (optional)
     * @return OrderableDBInstanceOptionsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public OrderableDBInstanceOptionsMessage gETDescribeOrderableDBInstanceOptions(String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String engineVersion, String dbInstanceClass, String licenseModel, Boolean vpc, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<OrderableDBInstanceOptionsMessage> localVarResp = gETDescribeOrderableDBInstanceOptionsWithHttpInfo(engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engineVersion, dbInstanceClass, licenseModel, vpc, filters, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of orderable DB instance options for the specified engine.
     * @param engine The name of the engine to retrieve DB instance options for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param engineVersion The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version. (optional)
     * @param dbInstanceClass The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class. (optional)
     * @param licenseModel The license model filter value. Specify this parameter to show only the available offerings matching the specified license model. (optional)
     * @param vpc The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt; . (optional)
     * @return ApiResponse&lt;OrderableDBInstanceOptionsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderableDBInstanceOptionsMessage> gETDescribeOrderableDBInstanceOptionsWithHttpInfo(String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String engineVersion, String dbInstanceClass, String licenseModel, Boolean vpc, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeOrderableDBInstanceOptionsValidateBeforeCall(engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engineVersion, dbInstanceClass, licenseModel, vpc, filters, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<OrderableDBInstanceOptionsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of orderable DB instance options for the specified engine.
     * @param engine The name of the engine to retrieve DB instance options for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param engineVersion The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version. (optional)
     * @param dbInstanceClass The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class. (optional)
     * @param licenseModel The license model filter value. Specify this parameter to show only the available offerings matching the specified license model. (optional)
     * @param vpc The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt; . (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeOrderableDBInstanceOptionsAsync(String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String engineVersion, String dbInstanceClass, String licenseModel, Boolean vpc, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback<OrderableDBInstanceOptionsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeOrderableDBInstanceOptionsValidateBeforeCall(engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engineVersion, dbInstanceClass, licenseModel, vpc, filters, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<OrderableDBInstanceOptionsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribePendingMaintenanceActions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resourceIdentifier The ARN of a resource to return pending maintenance actions for. (optional)
     * @param filters &lt;p&gt;A filter that specifies one or more resources to return pending maintenance actions for.&lt;/p&gt; &lt;p&gt;Supported filters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-cluster-id&lt;/code&gt; - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-instance-id&lt;/code&gt; - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param marker  An optional pagination token provided by a previous &lt;code&gt;DescribePendingMaintenanceActions&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribePendingMaintenanceActionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String resourceIdentifier, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, String marker, Integer maxRecords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribePendingMaintenanceActions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResourceIdentifier", resourceIdentifier));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribePendingMaintenanceActionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String resourceIdentifier, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, String marker, Integer maxRecords, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribePendingMaintenanceActions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribePendingMaintenanceActions(Async)");
        }

        return gETDescribePendingMaintenanceActionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resourceIdentifier, filters, marker, maxRecords, _callback);

    }

    /**
     * 
     * Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resourceIdentifier The ARN of a resource to return pending maintenance actions for. (optional)
     * @param filters &lt;p&gt;A filter that specifies one or more resources to return pending maintenance actions for.&lt;/p&gt; &lt;p&gt;Supported filters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-cluster-id&lt;/code&gt; - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-instance-id&lt;/code&gt; - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param marker  An optional pagination token provided by a previous &lt;code&gt;DescribePendingMaintenanceActions&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @return PendingMaintenanceActionsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public PendingMaintenanceActionsMessage gETDescribePendingMaintenanceActions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String resourceIdentifier, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, String marker, Integer maxRecords) throws ApiException {
        ApiResponse<PendingMaintenanceActionsMessage> localVarResp = gETDescribePendingMaintenanceActionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resourceIdentifier, filters, marker, maxRecords);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resourceIdentifier The ARN of a resource to return pending maintenance actions for. (optional)
     * @param filters &lt;p&gt;A filter that specifies one or more resources to return pending maintenance actions for.&lt;/p&gt; &lt;p&gt;Supported filters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-cluster-id&lt;/code&gt; - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-instance-id&lt;/code&gt; - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param marker  An optional pagination token provided by a previous &lt;code&gt;DescribePendingMaintenanceActions&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;PendingMaintenanceActionsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PendingMaintenanceActionsMessage> gETDescribePendingMaintenanceActionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String resourceIdentifier, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, String marker, Integer maxRecords) throws ApiException {
        okhttp3.Call localVarCall = gETDescribePendingMaintenanceActionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resourceIdentifier, filters, marker, maxRecords, null);
        Type localVarReturnType = new TypeToken<PendingMaintenanceActionsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resourceIdentifier The ARN of a resource to return pending maintenance actions for. (optional)
     * @param filters &lt;p&gt;A filter that specifies one or more resources to return pending maintenance actions for.&lt;/p&gt; &lt;p&gt;Supported filters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-cluster-id&lt;/code&gt; - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-instance-id&lt;/code&gt; - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param marker  An optional pagination token provided by a previous &lt;code&gt;DescribePendingMaintenanceActions&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribePendingMaintenanceActionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String resourceIdentifier, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, String marker, Integer maxRecords, final ApiCallback<PendingMaintenanceActionsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribePendingMaintenanceActionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resourceIdentifier, filters, marker, maxRecords, _callback);
        Type localVarReturnType = new TypeToken<PendingMaintenanceActionsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeValidDBInstanceModifications
     * @param dbInstanceIdentifier The customer identifier or the ARN of your DB instance. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeValidDBInstanceModificationsCall(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeValidDBInstanceModifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbInstanceIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBInstanceIdentifier", dbInstanceIdentifier));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeValidDBInstanceModificationsValidateBeforeCall(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbInstanceIdentifier' is set
        if (dbInstanceIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbInstanceIdentifier' when calling gETDescribeValidDBInstanceModifications(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeValidDBInstanceModifications(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeValidDBInstanceModifications(Async)");
        }

        return gETDescribeValidDBInstanceModificationsCall(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * You can call &lt;a&gt;DescribeValidDBInstanceModifications&lt;/a&gt; to learn what modifications you can make to your DB instance. You can use this information when you call &lt;a&gt;ModifyDBInstance&lt;/a&gt;.
     * @param dbInstanceIdentifier The customer identifier or the ARN of your DB instance. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeValidDBInstanceModificationsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeValidDBInstanceModificationsResult gETDescribeValidDBInstanceModifications(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeValidDBInstanceModificationsResult> localVarResp = gETDescribeValidDBInstanceModificationsWithHttpInfo(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * You can call &lt;a&gt;DescribeValidDBInstanceModifications&lt;/a&gt; to learn what modifications you can make to your DB instance. You can use this information when you call &lt;a&gt;ModifyDBInstance&lt;/a&gt;.
     * @param dbInstanceIdentifier The customer identifier or the ARN of your DB instance. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeValidDBInstanceModificationsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeValidDBInstanceModificationsResult> gETDescribeValidDBInstanceModificationsWithHttpInfo(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeValidDBInstanceModificationsValidateBeforeCall(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeValidDBInstanceModificationsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You can call &lt;a&gt;DescribeValidDBInstanceModifications&lt;/a&gt; to learn what modifications you can make to your DB instance. You can use this information when you call &lt;a&gt;ModifyDBInstance&lt;/a&gt;.
     * @param dbInstanceIdentifier The customer identifier or the ARN of your DB instance. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeValidDBInstanceModificationsAsync(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeValidDBInstanceModificationsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeValidDBInstanceModificationsValidateBeforeCall(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeValidDBInstanceModificationsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETFailoverDBCluster
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterIdentifier &lt;p&gt;A DB cluster identifier to force a failover for. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing DBCluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param targetDBInstanceIdentifier &lt;p&gt;The name of the instance to promote to the primary instance.&lt;/p&gt; &lt;p&gt;You must specify the instance identifier for an Read Replica in the DB cluster. For example, &lt;code&gt;mydbcluster-replica1&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETFailoverDBClusterCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, String targetDBInstanceIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=FailoverDBCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterIdentifier", dbClusterIdentifier));
        }

        if (targetDBInstanceIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TargetDBInstanceIdentifier", targetDBInstanceIdentifier));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETFailoverDBClusterValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, String targetDBInstanceIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETFailoverDBCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETFailoverDBCluster(Async)");
        }

        return gETFailoverDBClusterCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, targetDBInstanceIdentifier, _callback);

    }

    /**
     * 
     * &lt;p&gt;Forces a failover for a DB cluster.&lt;/p&gt; &lt;p&gt;A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).&lt;/p&gt; &lt;p&gt;Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterIdentifier &lt;p&gt;A DB cluster identifier to force a failover for. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing DBCluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param targetDBInstanceIdentifier &lt;p&gt;The name of the instance to promote to the primary instance.&lt;/p&gt; &lt;p&gt;You must specify the instance identifier for an Read Replica in the DB cluster. For example, &lt;code&gt;mydbcluster-replica1&lt;/code&gt;.&lt;/p&gt; (optional)
     * @return FailoverDBClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public FailoverDBClusterResult gETFailoverDBCluster(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, String targetDBInstanceIdentifier) throws ApiException {
        ApiResponse<FailoverDBClusterResult> localVarResp = gETFailoverDBClusterWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, targetDBInstanceIdentifier);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Forces a failover for a DB cluster.&lt;/p&gt; &lt;p&gt;A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).&lt;/p&gt; &lt;p&gt;Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterIdentifier &lt;p&gt;A DB cluster identifier to force a failover for. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing DBCluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param targetDBInstanceIdentifier &lt;p&gt;The name of the instance to promote to the primary instance.&lt;/p&gt; &lt;p&gt;You must specify the instance identifier for an Read Replica in the DB cluster. For example, &lt;code&gt;mydbcluster-replica1&lt;/code&gt;.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;FailoverDBClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FailoverDBClusterResult> gETFailoverDBClusterWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, String targetDBInstanceIdentifier) throws ApiException {
        okhttp3.Call localVarCall = gETFailoverDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, targetDBInstanceIdentifier, null);
        Type localVarReturnType = new TypeToken<FailoverDBClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Forces a failover for a DB cluster.&lt;/p&gt; &lt;p&gt;A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).&lt;/p&gt; &lt;p&gt;Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterIdentifier &lt;p&gt;A DB cluster identifier to force a failover for. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing DBCluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param targetDBInstanceIdentifier &lt;p&gt;The name of the instance to promote to the primary instance.&lt;/p&gt; &lt;p&gt;You must specify the instance identifier for an Read Replica in the DB cluster. For example, &lt;code&gt;mydbcluster-replica1&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETFailoverDBClusterAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, String targetDBInstanceIdentifier, final ApiCallback<FailoverDBClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETFailoverDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, targetDBInstanceIdentifier, _callback);
        Type localVarReturnType = new TypeToken<FailoverDBClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETFailoverGlobalCluster
     * @param globalClusterIdentifier &lt;p&gt;Identifier of the Neptune global database that should be failed over. The identifier is the unique key assigned by the user when the Neptune global database was created. In other words, it&#39;s the name of the global database that you want to fail over.&lt;/p&gt; &lt;p&gt;Constraints: Must match the identifier of an existing Neptune global database.&lt;/p&gt; (required)
     * @param targetDbClusterIdentifier The Amazon Resource Name (ARN) of the secondary Neptune DB cluster that you want to promote to primary for the global database. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETFailoverGlobalClusterCall(String globalClusterIdentifier, String targetDbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=FailoverGlobalCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (globalClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GlobalClusterIdentifier", globalClusterIdentifier));
        }

        if (targetDbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TargetDbClusterIdentifier", targetDbClusterIdentifier));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETFailoverGlobalClusterValidateBeforeCall(String globalClusterIdentifier, String targetDbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'globalClusterIdentifier' is set
        if (globalClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'globalClusterIdentifier' when calling gETFailoverGlobalCluster(Async)");
        }

        // verify the required parameter 'targetDbClusterIdentifier' is set
        if (targetDbClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'targetDbClusterIdentifier' when calling gETFailoverGlobalCluster(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETFailoverGlobalCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETFailoverGlobalCluster(Async)");
        }

        return gETFailoverGlobalClusterCall(globalClusterIdentifier, targetDbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Initiates the failover process for a Neptune global database.&lt;/p&gt; &lt;p&gt;A failover for a Neptune global database promotes one of secondary read-only DB clusters to be the primary DB cluster and demotes the primary DB cluster to being a secondary (read-only) DB cluster. In other words, the role of the current primary DB cluster and the selected target secondary DB cluster are switched. The selected secondary DB cluster assumes full read/write capabilities for the Neptune global database.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action applies &lt;b&gt;only&lt;/b&gt; to Neptune global databases. This action is only intended for use on healthy Neptune global databases with healthy Neptune DB clusters and no region-wide outages, to test disaster recovery scenarios or to reconfigure the global database topology.&lt;/p&gt; &lt;/note&gt;
     * @param globalClusterIdentifier &lt;p&gt;Identifier of the Neptune global database that should be failed over. The identifier is the unique key assigned by the user when the Neptune global database was created. In other words, it&#39;s the name of the global database that you want to fail over.&lt;/p&gt; &lt;p&gt;Constraints: Must match the identifier of an existing Neptune global database.&lt;/p&gt; (required)
     * @param targetDbClusterIdentifier The Amazon Resource Name (ARN) of the secondary Neptune DB cluster that you want to promote to primary for the global database. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return FailoverGlobalClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public FailoverGlobalClusterResult gETFailoverGlobalCluster(String globalClusterIdentifier, String targetDbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<FailoverGlobalClusterResult> localVarResp = gETFailoverGlobalClusterWithHttpInfo(globalClusterIdentifier, targetDbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Initiates the failover process for a Neptune global database.&lt;/p&gt; &lt;p&gt;A failover for a Neptune global database promotes one of secondary read-only DB clusters to be the primary DB cluster and demotes the primary DB cluster to being a secondary (read-only) DB cluster. In other words, the role of the current primary DB cluster and the selected target secondary DB cluster are switched. The selected secondary DB cluster assumes full read/write capabilities for the Neptune global database.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action applies &lt;b&gt;only&lt;/b&gt; to Neptune global databases. This action is only intended for use on healthy Neptune global databases with healthy Neptune DB clusters and no region-wide outages, to test disaster recovery scenarios or to reconfigure the global database topology.&lt;/p&gt; &lt;/note&gt;
     * @param globalClusterIdentifier &lt;p&gt;Identifier of the Neptune global database that should be failed over. The identifier is the unique key assigned by the user when the Neptune global database was created. In other words, it&#39;s the name of the global database that you want to fail over.&lt;/p&gt; &lt;p&gt;Constraints: Must match the identifier of an existing Neptune global database.&lt;/p&gt; (required)
     * @param targetDbClusterIdentifier The Amazon Resource Name (ARN) of the secondary Neptune DB cluster that you want to promote to primary for the global database. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;FailoverGlobalClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FailoverGlobalClusterResult> gETFailoverGlobalClusterWithHttpInfo(String globalClusterIdentifier, String targetDbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETFailoverGlobalClusterValidateBeforeCall(globalClusterIdentifier, targetDbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<FailoverGlobalClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Initiates the failover process for a Neptune global database.&lt;/p&gt; &lt;p&gt;A failover for a Neptune global database promotes one of secondary read-only DB clusters to be the primary DB cluster and demotes the primary DB cluster to being a secondary (read-only) DB cluster. In other words, the role of the current primary DB cluster and the selected target secondary DB cluster are switched. The selected secondary DB cluster assumes full read/write capabilities for the Neptune global database.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action applies &lt;b&gt;only&lt;/b&gt; to Neptune global databases. This action is only intended for use on healthy Neptune global databases with healthy Neptune DB clusters and no region-wide outages, to test disaster recovery scenarios or to reconfigure the global database topology.&lt;/p&gt; &lt;/note&gt;
     * @param globalClusterIdentifier &lt;p&gt;Identifier of the Neptune global database that should be failed over. The identifier is the unique key assigned by the user when the Neptune global database was created. In other words, it&#39;s the name of the global database that you want to fail over.&lt;/p&gt; &lt;p&gt;Constraints: Must match the identifier of an existing Neptune global database.&lt;/p&gt; (required)
     * @param targetDbClusterIdentifier The Amazon Resource Name (ARN) of the secondary Neptune DB cluster that you want to promote to primary for the global database. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETFailoverGlobalClusterAsync(String globalClusterIdentifier, String targetDbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<FailoverGlobalClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETFailoverGlobalClusterValidateBeforeCall(globalClusterIdentifier, targetDbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<FailoverGlobalClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListTagsForResource
     * @param resourceName The Amazon Neptune resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing\&quot;&gt; Constructing an Amazon Resource Name (ARN)&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListTagsForResourceCall(String resourceName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListTagsForResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResourceName", resourceName));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListTagsForResourceValidateBeforeCall(String resourceName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling gETListTagsForResource(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListTagsForResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListTagsForResource(Async)");
        }

        return gETListTagsForResourceCall(resourceName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, _callback);

    }

    /**
     * 
     * Lists all tags on an Amazon Neptune resource.
     * @param resourceName The Amazon Neptune resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing\&quot;&gt; Constructing an Amazon Resource Name (ARN)&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @return TagListMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public TagListMessage gETListTagsForResource(String resourceName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters) throws ApiException {
        ApiResponse<TagListMessage> localVarResp = gETListTagsForResourceWithHttpInfo(resourceName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all tags on an Amazon Neptune resource.
     * @param resourceName The Amazon Neptune resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing\&quot;&gt; Constructing an Amazon Resource Name (ARN)&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @return ApiResponse&lt;TagListMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagListMessage> gETListTagsForResourceWithHttpInfo(String resourceName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters) throws ApiException {
        okhttp3.Call localVarCall = gETListTagsForResourceValidateBeforeCall(resourceName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, null);
        Type localVarReturnType = new TypeToken<TagListMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all tags on an Amazon Neptune resource.
     * @param resourceName The Amazon Neptune resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing\&quot;&gt; Constructing an Amazon Resource Name (ARN)&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListTagsForResourceAsync(String resourceName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETDescribeDBClusterEndpointsFiltersParameterInner> filters, final ApiCallback<TagListMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListTagsForResourceValidateBeforeCall(resourceName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, _callback);
        Type localVarReturnType = new TypeToken<TagListMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETModifyDBCluster
     * @param dbClusterIdentifier &lt;p&gt;The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing DBCluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param newDBClusterIdentifier &lt;p&gt;The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster2&lt;/code&gt; &lt;/p&gt; (optional)
     * @param applyImmediately &lt;p&gt;A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the &lt;code&gt;PreferredMaintenanceWindow&lt;/code&gt; setting for the DB cluster. If this parameter is set to &lt;code&gt;false&lt;/code&gt;, changes to the DB cluster are applied during the next maintenance window.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter only affects &lt;code&gt;NewDBClusterIdentifier&lt;/code&gt; values. If you set the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter value to false, then changes to &lt;code&gt;NewDBClusterIdentifier&lt;/code&gt; values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param backupRetentionPeriod &lt;p&gt;The number of days for which automated backups are retained. You must specify a minimum value of 1.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be a value from 1 to 35&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param dbClusterParameterGroupName The name of the DB cluster parameter group to use for the DB cluster. (optional)
     * @param vpcSecurityGroupIds A list of VPC security groups that the DB cluster will belong to. (optional)
     * @param port &lt;p&gt;The port number on which the DB cluster accepts connections.&lt;/p&gt; &lt;p&gt;Constraints: Value must be &lt;code&gt;1150-65535&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Default: The same port as the original DB cluster.&lt;/p&gt; (optional)
     * @param masterUserPassword Not supported by Neptune. (optional)
     * @param optionGroupName  &lt;i&gt;Not supported by Neptune.&lt;/i&gt;  (optional)
     * @param preferredBackupWindow &lt;p&gt;The daily time range during which automated backups are created if automated backups are enabled, using the &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be in the format &lt;code&gt;hh24:mi-hh24:mi&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must not conflict with the preferred maintenance window.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 30 minutes.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;p&gt;Format: &lt;code&gt;ddd:hh24:mi-ddd:hh24:mi&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region, occurring on a random day of the week.&lt;/p&gt; &lt;p&gt;Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.&lt;/p&gt; &lt;p&gt;Constraints: Minimum 30-minute window.&lt;/p&gt; (optional)
     * @param enableIAMDatabaseAuthentication &lt;p&gt;True to enable mapping of Amazon Identity and Access Management (IAM) accounts to database accounts, and otherwise false.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param cloudwatchLogsExportConfiguration The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB cluster. (optional)
     * @param engineVersion &lt;p&gt;The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter is set to true.&lt;/p&gt; &lt;p&gt;For a list of valid engine versions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/userguide/engine-releases.html\&quot;&gt;Engine Releases for Amazon Neptune&lt;/a&gt;, or call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/userguide/api-other-apis.html#DescribeDBEngineVersions\&quot;&gt;DescribeDBEngineVersions&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param allowMajorVersionUpgrade &lt;p&gt;A value that indicates whether upgrades between different major versions are allowed.&lt;/p&gt; &lt;p&gt;Constraints: You must set the allow-major-version-upgrade flag when providing an &lt;code&gt;EngineVersion&lt;/code&gt; parameter that uses a different major version than the DB cluster&#39;s current version.&lt;/p&gt; (optional)
     * @param dbInstanceParameterGroupName &lt;p&gt;The name of the DB parameter group to apply to all instances of the DB cluster. &lt;/p&gt; &lt;note&gt; &lt;p&gt;When you apply a parameter group using &lt;code&gt;DBInstanceParameterGroupName&lt;/code&gt;, parameter changes aren&#39;t applied during the next maintenance window but instead are applied immediately.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Default: The existing name setting&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The DB parameter group must be in the same DB parameter group family as the target DB cluster version.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;DBInstanceParameterGroupName&lt;/code&gt; parameter is only valid in combination with the &lt;code&gt;AllowMajorVersionUpgrade&lt;/code&gt; parameter.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param deletionProtection A value that indicates whether the DB cluster has deletion protection enabled. The database can&#39;t be deleted when deletion protection is enabled. By default, deletion protection is disabled. (optional)
     * @param copyTagsToSnapshot  &lt;i&gt;If set to &lt;code&gt;true&lt;/code&gt;, tags are copied to any snapshot of the DB cluster that is created.&lt;/i&gt;  (optional)
     * @param serverlessV2ScalingConfiguration  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyDBClusterCall(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String newDBClusterIdentifier, Boolean applyImmediately, Integer backupRetentionPeriod, String dbClusterParameterGroupName, List<String> vpcSecurityGroupIds, Integer port, String masterUserPassword, String optionGroupName, String preferredBackupWindow, String preferredMaintenanceWindow, Boolean enableIAMDatabaseAuthentication, GETModifyDBClusterCloudwatchLogsExportConfigurationParameter cloudwatchLogsExportConfiguration, String engineVersion, Boolean allowMajorVersionUpgrade, String dbInstanceParameterGroupName, Boolean deletionProtection, Boolean copyTagsToSnapshot, GETCreateDBClusterServerlessV2ScalingConfigurationParameter serverlessV2ScalingConfiguration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ModifyDBCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterIdentifier", dbClusterIdentifier));
        }

        if (newDBClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NewDBClusterIdentifier", newDBClusterIdentifier));
        }

        if (applyImmediately != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplyImmediately", applyImmediately));
        }

        if (backupRetentionPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("BackupRetentionPeriod", backupRetentionPeriod));
        }

        if (dbClusterParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterParameterGroupName", dbClusterParameterGroupName));
        }

        if (vpcSecurityGroupIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "VpcSecurityGroupIds", vpcSecurityGroupIds));
        }

        if (port != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Port", port));
        }

        if (masterUserPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MasterUserPassword", masterUserPassword));
        }

        if (optionGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OptionGroupName", optionGroupName));
        }

        if (preferredBackupWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PreferredBackupWindow", preferredBackupWindow));
        }

        if (preferredMaintenanceWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PreferredMaintenanceWindow", preferredMaintenanceWindow));
        }

        if (enableIAMDatabaseAuthentication != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnableIAMDatabaseAuthentication", enableIAMDatabaseAuthentication));
        }

        if (cloudwatchLogsExportConfiguration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CloudwatchLogsExportConfiguration", cloudwatchLogsExportConfiguration));
        }

        if (engineVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EngineVersion", engineVersion));
        }

        if (allowMajorVersionUpgrade != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AllowMajorVersionUpgrade", allowMajorVersionUpgrade));
        }

        if (dbInstanceParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBInstanceParameterGroupName", dbInstanceParameterGroupName));
        }

        if (deletionProtection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DeletionProtection", deletionProtection));
        }

        if (copyTagsToSnapshot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CopyTagsToSnapshot", copyTagsToSnapshot));
        }

        if (serverlessV2ScalingConfiguration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ServerlessV2ScalingConfiguration", serverlessV2ScalingConfiguration));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETModifyDBClusterValidateBeforeCall(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String newDBClusterIdentifier, Boolean applyImmediately, Integer backupRetentionPeriod, String dbClusterParameterGroupName, List<String> vpcSecurityGroupIds, Integer port, String masterUserPassword, String optionGroupName, String preferredBackupWindow, String preferredMaintenanceWindow, Boolean enableIAMDatabaseAuthentication, GETModifyDBClusterCloudwatchLogsExportConfigurationParameter cloudwatchLogsExportConfiguration, String engineVersion, Boolean allowMajorVersionUpgrade, String dbInstanceParameterGroupName, Boolean deletionProtection, Boolean copyTagsToSnapshot, GETCreateDBClusterServerlessV2ScalingConfigurationParameter serverlessV2ScalingConfiguration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterIdentifier' is set
        if (dbClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterIdentifier' when calling gETModifyDBCluster(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETModifyDBCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETModifyDBCluster(Async)");
        }

        return gETModifyDBClusterCall(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, newDBClusterIdentifier, applyImmediately, backupRetentionPeriod, dbClusterParameterGroupName, vpcSecurityGroupIds, port, masterUserPassword, optionGroupName, preferredBackupWindow, preferredMaintenanceWindow, enableIAMDatabaseAuthentication, cloudwatchLogsExportConfiguration, engineVersion, allowMajorVersionUpgrade, dbInstanceParameterGroupName, deletionProtection, copyTagsToSnapshot, serverlessV2ScalingConfiguration, _callback);

    }

    /**
     * 
     * Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
     * @param dbClusterIdentifier &lt;p&gt;The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing DBCluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param newDBClusterIdentifier &lt;p&gt;The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster2&lt;/code&gt; &lt;/p&gt; (optional)
     * @param applyImmediately &lt;p&gt;A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the &lt;code&gt;PreferredMaintenanceWindow&lt;/code&gt; setting for the DB cluster. If this parameter is set to &lt;code&gt;false&lt;/code&gt;, changes to the DB cluster are applied during the next maintenance window.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter only affects &lt;code&gt;NewDBClusterIdentifier&lt;/code&gt; values. If you set the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter value to false, then changes to &lt;code&gt;NewDBClusterIdentifier&lt;/code&gt; values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param backupRetentionPeriod &lt;p&gt;The number of days for which automated backups are retained. You must specify a minimum value of 1.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be a value from 1 to 35&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param dbClusterParameterGroupName The name of the DB cluster parameter group to use for the DB cluster. (optional)
     * @param vpcSecurityGroupIds A list of VPC security groups that the DB cluster will belong to. (optional)
     * @param port &lt;p&gt;The port number on which the DB cluster accepts connections.&lt;/p&gt; &lt;p&gt;Constraints: Value must be &lt;code&gt;1150-65535&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Default: The same port as the original DB cluster.&lt;/p&gt; (optional)
     * @param masterUserPassword Not supported by Neptune. (optional)
     * @param optionGroupName  &lt;i&gt;Not supported by Neptune.&lt;/i&gt;  (optional)
     * @param preferredBackupWindow &lt;p&gt;The daily time range during which automated backups are created if automated backups are enabled, using the &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be in the format &lt;code&gt;hh24:mi-hh24:mi&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must not conflict with the preferred maintenance window.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 30 minutes.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;p&gt;Format: &lt;code&gt;ddd:hh24:mi-ddd:hh24:mi&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region, occurring on a random day of the week.&lt;/p&gt; &lt;p&gt;Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.&lt;/p&gt; &lt;p&gt;Constraints: Minimum 30-minute window.&lt;/p&gt; (optional)
     * @param enableIAMDatabaseAuthentication &lt;p&gt;True to enable mapping of Amazon Identity and Access Management (IAM) accounts to database accounts, and otherwise false.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param cloudwatchLogsExportConfiguration The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB cluster. (optional)
     * @param engineVersion &lt;p&gt;The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter is set to true.&lt;/p&gt; &lt;p&gt;For a list of valid engine versions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/userguide/engine-releases.html\&quot;&gt;Engine Releases for Amazon Neptune&lt;/a&gt;, or call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/userguide/api-other-apis.html#DescribeDBEngineVersions\&quot;&gt;DescribeDBEngineVersions&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param allowMajorVersionUpgrade &lt;p&gt;A value that indicates whether upgrades between different major versions are allowed.&lt;/p&gt; &lt;p&gt;Constraints: You must set the allow-major-version-upgrade flag when providing an &lt;code&gt;EngineVersion&lt;/code&gt; parameter that uses a different major version than the DB cluster&#39;s current version.&lt;/p&gt; (optional)
     * @param dbInstanceParameterGroupName &lt;p&gt;The name of the DB parameter group to apply to all instances of the DB cluster. &lt;/p&gt; &lt;note&gt; &lt;p&gt;When you apply a parameter group using &lt;code&gt;DBInstanceParameterGroupName&lt;/code&gt;, parameter changes aren&#39;t applied during the next maintenance window but instead are applied immediately.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Default: The existing name setting&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The DB parameter group must be in the same DB parameter group family as the target DB cluster version.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;DBInstanceParameterGroupName&lt;/code&gt; parameter is only valid in combination with the &lt;code&gt;AllowMajorVersionUpgrade&lt;/code&gt; parameter.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param deletionProtection A value that indicates whether the DB cluster has deletion protection enabled. The database can&#39;t be deleted when deletion protection is enabled. By default, deletion protection is disabled. (optional)
     * @param copyTagsToSnapshot  &lt;i&gt;If set to &lt;code&gt;true&lt;/code&gt;, tags are copied to any snapshot of the DB cluster that is created.&lt;/i&gt;  (optional)
     * @param serverlessV2ScalingConfiguration  (optional)
     * @return ModifyDBClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public ModifyDBClusterResult gETModifyDBCluster(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String newDBClusterIdentifier, Boolean applyImmediately, Integer backupRetentionPeriod, String dbClusterParameterGroupName, List<String> vpcSecurityGroupIds, Integer port, String masterUserPassword, String optionGroupName, String preferredBackupWindow, String preferredMaintenanceWindow, Boolean enableIAMDatabaseAuthentication, GETModifyDBClusterCloudwatchLogsExportConfigurationParameter cloudwatchLogsExportConfiguration, String engineVersion, Boolean allowMajorVersionUpgrade, String dbInstanceParameterGroupName, Boolean deletionProtection, Boolean copyTagsToSnapshot, GETCreateDBClusterServerlessV2ScalingConfigurationParameter serverlessV2ScalingConfiguration) throws ApiException {
        ApiResponse<ModifyDBClusterResult> localVarResp = gETModifyDBClusterWithHttpInfo(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, newDBClusterIdentifier, applyImmediately, backupRetentionPeriod, dbClusterParameterGroupName, vpcSecurityGroupIds, port, masterUserPassword, optionGroupName, preferredBackupWindow, preferredMaintenanceWindow, enableIAMDatabaseAuthentication, cloudwatchLogsExportConfiguration, engineVersion, allowMajorVersionUpgrade, dbInstanceParameterGroupName, deletionProtection, copyTagsToSnapshot, serverlessV2ScalingConfiguration);
        return localVarResp.getData();
    }

    /**
     * 
     * Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
     * @param dbClusterIdentifier &lt;p&gt;The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing DBCluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param newDBClusterIdentifier &lt;p&gt;The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster2&lt;/code&gt; &lt;/p&gt; (optional)
     * @param applyImmediately &lt;p&gt;A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the &lt;code&gt;PreferredMaintenanceWindow&lt;/code&gt; setting for the DB cluster. If this parameter is set to &lt;code&gt;false&lt;/code&gt;, changes to the DB cluster are applied during the next maintenance window.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter only affects &lt;code&gt;NewDBClusterIdentifier&lt;/code&gt; values. If you set the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter value to false, then changes to &lt;code&gt;NewDBClusterIdentifier&lt;/code&gt; values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param backupRetentionPeriod &lt;p&gt;The number of days for which automated backups are retained. You must specify a minimum value of 1.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be a value from 1 to 35&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param dbClusterParameterGroupName The name of the DB cluster parameter group to use for the DB cluster. (optional)
     * @param vpcSecurityGroupIds A list of VPC security groups that the DB cluster will belong to. (optional)
     * @param port &lt;p&gt;The port number on which the DB cluster accepts connections.&lt;/p&gt; &lt;p&gt;Constraints: Value must be &lt;code&gt;1150-65535&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Default: The same port as the original DB cluster.&lt;/p&gt; (optional)
     * @param masterUserPassword Not supported by Neptune. (optional)
     * @param optionGroupName  &lt;i&gt;Not supported by Neptune.&lt;/i&gt;  (optional)
     * @param preferredBackupWindow &lt;p&gt;The daily time range during which automated backups are created if automated backups are enabled, using the &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be in the format &lt;code&gt;hh24:mi-hh24:mi&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must not conflict with the preferred maintenance window.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 30 minutes.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;p&gt;Format: &lt;code&gt;ddd:hh24:mi-ddd:hh24:mi&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region, occurring on a random day of the week.&lt;/p&gt; &lt;p&gt;Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.&lt;/p&gt; &lt;p&gt;Constraints: Minimum 30-minute window.&lt;/p&gt; (optional)
     * @param enableIAMDatabaseAuthentication &lt;p&gt;True to enable mapping of Amazon Identity and Access Management (IAM) accounts to database accounts, and otherwise false.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param cloudwatchLogsExportConfiguration The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB cluster. (optional)
     * @param engineVersion &lt;p&gt;The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter is set to true.&lt;/p&gt; &lt;p&gt;For a list of valid engine versions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/userguide/engine-releases.html\&quot;&gt;Engine Releases for Amazon Neptune&lt;/a&gt;, or call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/userguide/api-other-apis.html#DescribeDBEngineVersions\&quot;&gt;DescribeDBEngineVersions&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param allowMajorVersionUpgrade &lt;p&gt;A value that indicates whether upgrades between different major versions are allowed.&lt;/p&gt; &lt;p&gt;Constraints: You must set the allow-major-version-upgrade flag when providing an &lt;code&gt;EngineVersion&lt;/code&gt; parameter that uses a different major version than the DB cluster&#39;s current version.&lt;/p&gt; (optional)
     * @param dbInstanceParameterGroupName &lt;p&gt;The name of the DB parameter group to apply to all instances of the DB cluster. &lt;/p&gt; &lt;note&gt; &lt;p&gt;When you apply a parameter group using &lt;code&gt;DBInstanceParameterGroupName&lt;/code&gt;, parameter changes aren&#39;t applied during the next maintenance window but instead are applied immediately.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Default: The existing name setting&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The DB parameter group must be in the same DB parameter group family as the target DB cluster version.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;DBInstanceParameterGroupName&lt;/code&gt; parameter is only valid in combination with the &lt;code&gt;AllowMajorVersionUpgrade&lt;/code&gt; parameter.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param deletionProtection A value that indicates whether the DB cluster has deletion protection enabled. The database can&#39;t be deleted when deletion protection is enabled. By default, deletion protection is disabled. (optional)
     * @param copyTagsToSnapshot  &lt;i&gt;If set to &lt;code&gt;true&lt;/code&gt;, tags are copied to any snapshot of the DB cluster that is created.&lt;/i&gt;  (optional)
     * @param serverlessV2ScalingConfiguration  (optional)
     * @return ApiResponse&lt;ModifyDBClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyDBClusterResult> gETModifyDBClusterWithHttpInfo(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String newDBClusterIdentifier, Boolean applyImmediately, Integer backupRetentionPeriod, String dbClusterParameterGroupName, List<String> vpcSecurityGroupIds, Integer port, String masterUserPassword, String optionGroupName, String preferredBackupWindow, String preferredMaintenanceWindow, Boolean enableIAMDatabaseAuthentication, GETModifyDBClusterCloudwatchLogsExportConfigurationParameter cloudwatchLogsExportConfiguration, String engineVersion, Boolean allowMajorVersionUpgrade, String dbInstanceParameterGroupName, Boolean deletionProtection, Boolean copyTagsToSnapshot, GETCreateDBClusterServerlessV2ScalingConfigurationParameter serverlessV2ScalingConfiguration) throws ApiException {
        okhttp3.Call localVarCall = gETModifyDBClusterValidateBeforeCall(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, newDBClusterIdentifier, applyImmediately, backupRetentionPeriod, dbClusterParameterGroupName, vpcSecurityGroupIds, port, masterUserPassword, optionGroupName, preferredBackupWindow, preferredMaintenanceWindow, enableIAMDatabaseAuthentication, cloudwatchLogsExportConfiguration, engineVersion, allowMajorVersionUpgrade, dbInstanceParameterGroupName, deletionProtection, copyTagsToSnapshot, serverlessV2ScalingConfiguration, null);
        Type localVarReturnType = new TypeToken<ModifyDBClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
     * @param dbClusterIdentifier &lt;p&gt;The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing DBCluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param newDBClusterIdentifier &lt;p&gt;The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster2&lt;/code&gt; &lt;/p&gt; (optional)
     * @param applyImmediately &lt;p&gt;A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the &lt;code&gt;PreferredMaintenanceWindow&lt;/code&gt; setting for the DB cluster. If this parameter is set to &lt;code&gt;false&lt;/code&gt;, changes to the DB cluster are applied during the next maintenance window.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter only affects &lt;code&gt;NewDBClusterIdentifier&lt;/code&gt; values. If you set the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter value to false, then changes to &lt;code&gt;NewDBClusterIdentifier&lt;/code&gt; values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param backupRetentionPeriod &lt;p&gt;The number of days for which automated backups are retained. You must specify a minimum value of 1.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be a value from 1 to 35&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param dbClusterParameterGroupName The name of the DB cluster parameter group to use for the DB cluster. (optional)
     * @param vpcSecurityGroupIds A list of VPC security groups that the DB cluster will belong to. (optional)
     * @param port &lt;p&gt;The port number on which the DB cluster accepts connections.&lt;/p&gt; &lt;p&gt;Constraints: Value must be &lt;code&gt;1150-65535&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Default: The same port as the original DB cluster.&lt;/p&gt; (optional)
     * @param masterUserPassword Not supported by Neptune. (optional)
     * @param optionGroupName  &lt;i&gt;Not supported by Neptune.&lt;/i&gt;  (optional)
     * @param preferredBackupWindow &lt;p&gt;The daily time range during which automated backups are created if automated backups are enabled, using the &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be in the format &lt;code&gt;hh24:mi-hh24:mi&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must not conflict with the preferred maintenance window.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 30 minutes.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;p&gt;Format: &lt;code&gt;ddd:hh24:mi-ddd:hh24:mi&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Region, occurring on a random day of the week.&lt;/p&gt; &lt;p&gt;Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.&lt;/p&gt; &lt;p&gt;Constraints: Minimum 30-minute window.&lt;/p&gt; (optional)
     * @param enableIAMDatabaseAuthentication &lt;p&gt;True to enable mapping of Amazon Identity and Access Management (IAM) accounts to database accounts, and otherwise false.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param cloudwatchLogsExportConfiguration The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB cluster. (optional)
     * @param engineVersion &lt;p&gt;The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter is set to true.&lt;/p&gt; &lt;p&gt;For a list of valid engine versions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/userguide/engine-releases.html\&quot;&gt;Engine Releases for Amazon Neptune&lt;/a&gt;, or call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/userguide/api-other-apis.html#DescribeDBEngineVersions\&quot;&gt;DescribeDBEngineVersions&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param allowMajorVersionUpgrade &lt;p&gt;A value that indicates whether upgrades between different major versions are allowed.&lt;/p&gt; &lt;p&gt;Constraints: You must set the allow-major-version-upgrade flag when providing an &lt;code&gt;EngineVersion&lt;/code&gt; parameter that uses a different major version than the DB cluster&#39;s current version.&lt;/p&gt; (optional)
     * @param dbInstanceParameterGroupName &lt;p&gt;The name of the DB parameter group to apply to all instances of the DB cluster. &lt;/p&gt; &lt;note&gt; &lt;p&gt;When you apply a parameter group using &lt;code&gt;DBInstanceParameterGroupName&lt;/code&gt;, parameter changes aren&#39;t applied during the next maintenance window but instead are applied immediately.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Default: The existing name setting&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The DB parameter group must be in the same DB parameter group family as the target DB cluster version.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;DBInstanceParameterGroupName&lt;/code&gt; parameter is only valid in combination with the &lt;code&gt;AllowMajorVersionUpgrade&lt;/code&gt; parameter.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param deletionProtection A value that indicates whether the DB cluster has deletion protection enabled. The database can&#39;t be deleted when deletion protection is enabled. By default, deletion protection is disabled. (optional)
     * @param copyTagsToSnapshot  &lt;i&gt;If set to &lt;code&gt;true&lt;/code&gt;, tags are copied to any snapshot of the DB cluster that is created.&lt;/i&gt;  (optional)
     * @param serverlessV2ScalingConfiguration  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyDBClusterAsync(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String newDBClusterIdentifier, Boolean applyImmediately, Integer backupRetentionPeriod, String dbClusterParameterGroupName, List<String> vpcSecurityGroupIds, Integer port, String masterUserPassword, String optionGroupName, String preferredBackupWindow, String preferredMaintenanceWindow, Boolean enableIAMDatabaseAuthentication, GETModifyDBClusterCloudwatchLogsExportConfigurationParameter cloudwatchLogsExportConfiguration, String engineVersion, Boolean allowMajorVersionUpgrade, String dbInstanceParameterGroupName, Boolean deletionProtection, Boolean copyTagsToSnapshot, GETCreateDBClusterServerlessV2ScalingConfigurationParameter serverlessV2ScalingConfiguration, final ApiCallback<ModifyDBClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETModifyDBClusterValidateBeforeCall(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, newDBClusterIdentifier, applyImmediately, backupRetentionPeriod, dbClusterParameterGroupName, vpcSecurityGroupIds, port, masterUserPassword, optionGroupName, preferredBackupWindow, preferredMaintenanceWindow, enableIAMDatabaseAuthentication, cloudwatchLogsExportConfiguration, engineVersion, allowMajorVersionUpgrade, dbInstanceParameterGroupName, deletionProtection, copyTagsToSnapshot, serverlessV2ScalingConfiguration, _callback);
        Type localVarReturnType = new TypeToken<ModifyDBClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETModifyDBClusterEndpoint
     * @param dbClusterEndpointIdentifier The identifier of the endpoint to modify. This parameter is stored as a lowercase string. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param endpointType The type of the endpoint. One of: &lt;code&gt;READER&lt;/code&gt;, &lt;code&gt;WRITER&lt;/code&gt;, &lt;code&gt;ANY&lt;/code&gt;. (optional)
     * @param staticMembers List of DB instance identifiers that are part of the custom endpoint group. (optional)
     * @param excludedMembers List of DB instance identifiers that aren&#39;t part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterEndpointStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterEndpointNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyDBClusterEndpointCall(String dbClusterEndpointIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String endpointType, List<String> staticMembers, List<String> excludedMembers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ModifyDBClusterEndpoint";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterEndpointIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterEndpointIdentifier", dbClusterEndpointIdentifier));
        }

        if (endpointType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndpointType", endpointType));
        }

        if (staticMembers != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "StaticMembers", staticMembers));
        }

        if (excludedMembers != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ExcludedMembers", excludedMembers));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETModifyDBClusterEndpointValidateBeforeCall(String dbClusterEndpointIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String endpointType, List<String> staticMembers, List<String> excludedMembers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterEndpointIdentifier' is set
        if (dbClusterEndpointIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterEndpointIdentifier' when calling gETModifyDBClusterEndpoint(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETModifyDBClusterEndpoint(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETModifyDBClusterEndpoint(Async)");
        }

        return gETModifyDBClusterEndpointCall(dbClusterEndpointIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, endpointType, staticMembers, excludedMembers, _callback);

    }

    /**
     * 
     * Modifies the properties of an endpoint in an Amazon Neptune DB cluster.
     * @param dbClusterEndpointIdentifier The identifier of the endpoint to modify. This parameter is stored as a lowercase string. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param endpointType The type of the endpoint. One of: &lt;code&gt;READER&lt;/code&gt;, &lt;code&gt;WRITER&lt;/code&gt;, &lt;code&gt;ANY&lt;/code&gt;. (optional)
     * @param staticMembers List of DB instance identifiers that are part of the custom endpoint group. (optional)
     * @param excludedMembers List of DB instance identifiers that aren&#39;t part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty. (optional)
     * @return ModifyDBClusterEndpointOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterEndpointStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterEndpointNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ModifyDBClusterEndpointOutput gETModifyDBClusterEndpoint(String dbClusterEndpointIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String endpointType, List<String> staticMembers, List<String> excludedMembers) throws ApiException {
        ApiResponse<ModifyDBClusterEndpointOutput> localVarResp = gETModifyDBClusterEndpointWithHttpInfo(dbClusterEndpointIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, endpointType, staticMembers, excludedMembers);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies the properties of an endpoint in an Amazon Neptune DB cluster.
     * @param dbClusterEndpointIdentifier The identifier of the endpoint to modify. This parameter is stored as a lowercase string. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param endpointType The type of the endpoint. One of: &lt;code&gt;READER&lt;/code&gt;, &lt;code&gt;WRITER&lt;/code&gt;, &lt;code&gt;ANY&lt;/code&gt;. (optional)
     * @param staticMembers List of DB instance identifiers that are part of the custom endpoint group. (optional)
     * @param excludedMembers List of DB instance identifiers that aren&#39;t part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty. (optional)
     * @return ApiResponse&lt;ModifyDBClusterEndpointOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterEndpointStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterEndpointNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyDBClusterEndpointOutput> gETModifyDBClusterEndpointWithHttpInfo(String dbClusterEndpointIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String endpointType, List<String> staticMembers, List<String> excludedMembers) throws ApiException {
        okhttp3.Call localVarCall = gETModifyDBClusterEndpointValidateBeforeCall(dbClusterEndpointIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, endpointType, staticMembers, excludedMembers, null);
        Type localVarReturnType = new TypeToken<ModifyDBClusterEndpointOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies the properties of an endpoint in an Amazon Neptune DB cluster.
     * @param dbClusterEndpointIdentifier The identifier of the endpoint to modify. This parameter is stored as a lowercase string. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param endpointType The type of the endpoint. One of: &lt;code&gt;READER&lt;/code&gt;, &lt;code&gt;WRITER&lt;/code&gt;, &lt;code&gt;ANY&lt;/code&gt;. (optional)
     * @param staticMembers List of DB instance identifiers that are part of the custom endpoint group. (optional)
     * @param excludedMembers List of DB instance identifiers that aren&#39;t part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterEndpointStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterEndpointNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyDBClusterEndpointAsync(String dbClusterEndpointIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String endpointType, List<String> staticMembers, List<String> excludedMembers, final ApiCallback<ModifyDBClusterEndpointOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETModifyDBClusterEndpointValidateBeforeCall(dbClusterEndpointIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, endpointType, staticMembers, excludedMembers, _callback);
        Type localVarReturnType = new TypeToken<ModifyDBClusterEndpointOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETModifyDBClusterParameterGroup
     * @param dbClusterParameterGroupName The name of the DB cluster parameter group to modify. (required)
     * @param parameters A list of parameters in the DB cluster parameter group to modify. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyDBClusterParameterGroupCall(String dbClusterParameterGroupName, List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ModifyDBClusterParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterParameterGroupName", dbClusterParameterGroupName));
        }

        if (parameters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Parameters", parameters));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETModifyDBClusterParameterGroupValidateBeforeCall(String dbClusterParameterGroupName, List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterParameterGroupName' is set
        if (dbClusterParameterGroupName == null) {
            throw new ApiException("Missing the required parameter 'dbClusterParameterGroupName' when calling gETModifyDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling gETModifyDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETModifyDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETModifyDBClusterParameterGroup(Async)");
        }

        return gETModifyDBClusterParameterGroupCall(dbClusterParameterGroupName, parameters, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt; Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt;, &lt;code&gt;ParameterValue&lt;/code&gt;, and &lt;code&gt;ApplyMethod&lt;/code&gt;. A maximum of 20 parameters can be modified in a single request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the Amazon Neptune console or the &lt;a&gt;DescribeDBClusterParameters&lt;/a&gt; command to verify that your DB cluster parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     * @param dbClusterParameterGroupName The name of the DB cluster parameter group to modify. (required)
     * @param parameters A list of parameters in the DB cluster parameter group to modify. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DBClusterParameterGroupNameMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DBClusterParameterGroupNameMessage gETModifyDBClusterParameterGroup(String dbClusterParameterGroupName, List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DBClusterParameterGroupNameMessage> localVarResp = gETModifyDBClusterParameterGroupWithHttpInfo(dbClusterParameterGroupName, parameters, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt;, &lt;code&gt;ParameterValue&lt;/code&gt;, and &lt;code&gt;ApplyMethod&lt;/code&gt;. A maximum of 20 parameters can be modified in a single request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the Amazon Neptune console or the &lt;a&gt;DescribeDBClusterParameters&lt;/a&gt; command to verify that your DB cluster parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     * @param dbClusterParameterGroupName The name of the DB cluster parameter group to modify. (required)
     * @param parameters A list of parameters in the DB cluster parameter group to modify. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DBClusterParameterGroupNameMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBClusterParameterGroupNameMessage> gETModifyDBClusterParameterGroupWithHttpInfo(String dbClusterParameterGroupName, List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETModifyDBClusterParameterGroupValidateBeforeCall(dbClusterParameterGroupName, parameters, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupNameMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt;, &lt;code&gt;ParameterValue&lt;/code&gt;, and &lt;code&gt;ApplyMethod&lt;/code&gt;. A maximum of 20 parameters can be modified in a single request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the Amazon Neptune console or the &lt;a&gt;DescribeDBClusterParameters&lt;/a&gt; command to verify that your DB cluster parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     * @param dbClusterParameterGroupName The name of the DB cluster parameter group to modify. (required)
     * @param parameters A list of parameters in the DB cluster parameter group to modify. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyDBClusterParameterGroupAsync(String dbClusterParameterGroupName, List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DBClusterParameterGroupNameMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETModifyDBClusterParameterGroupValidateBeforeCall(dbClusterParameterGroupName, parameters, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupNameMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETModifyDBClusterSnapshotAttribute
     * @param dbClusterSnapshotIdentifier The identifier for the DB cluster snapshot to modify the attributes for. (required)
     * @param attributeName &lt;p&gt;The name of the DB cluster snapshot attribute to modify.&lt;/p&gt; &lt;p&gt;To manage authorization for other Amazon accounts to copy or restore a manual DB cluster snapshot, set this value to &lt;code&gt;restore&lt;/code&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param valuesToAdd &lt;p&gt;A list of DB cluster snapshot attributes to add to the attribute specified by &lt;code&gt;AttributeName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To authorize other Amazon accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more Amazon account IDs, or &lt;code&gt;all&lt;/code&gt; to make the manual DB cluster snapshot restorable by any Amazon account. Do not add the &lt;code&gt;all&lt;/code&gt; value for any manual DB cluster snapshots that contain private information that you don&#39;t want available to all Amazon accounts.&lt;/p&gt; (optional)
     * @param valuesToRemove &lt;p&gt;A list of DB cluster snapshot attributes to remove from the attribute specified by &lt;code&gt;AttributeName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To remove authorization for other Amazon accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more Amazon account identifiers, or &lt;code&gt;all&lt;/code&gt; to remove authorization for any Amazon account to copy or restore the DB cluster snapshot. If you specify &lt;code&gt;all&lt;/code&gt;, an Amazon account whose account ID is explicitly added to the &lt;code&gt;restore&lt;/code&gt; attribute can still copy or restore a manual DB cluster snapshot.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SharedSnapshotQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyDBClusterSnapshotAttributeCall(String dbClusterSnapshotIdentifier, String attributeName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> valuesToAdd, List<String> valuesToRemove, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ModifyDBClusterSnapshotAttribute";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterSnapshotIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterSnapshotIdentifier", dbClusterSnapshotIdentifier));
        }

        if (attributeName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AttributeName", attributeName));
        }

        if (valuesToAdd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ValuesToAdd", valuesToAdd));
        }

        if (valuesToRemove != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ValuesToRemove", valuesToRemove));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETModifyDBClusterSnapshotAttributeValidateBeforeCall(String dbClusterSnapshotIdentifier, String attributeName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> valuesToAdd, List<String> valuesToRemove, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterSnapshotIdentifier' is set
        if (dbClusterSnapshotIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterSnapshotIdentifier' when calling gETModifyDBClusterSnapshotAttribute(Async)");
        }

        // verify the required parameter 'attributeName' is set
        if (attributeName == null) {
            throw new ApiException("Missing the required parameter 'attributeName' when calling gETModifyDBClusterSnapshotAttribute(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETModifyDBClusterSnapshotAttribute(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETModifyDBClusterSnapshotAttribute(Async)");
        }

        return gETModifyDBClusterSnapshotAttributeCall(dbClusterSnapshotIdentifier, attributeName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, valuesToAdd, valuesToRemove, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.&lt;/p&gt; &lt;p&gt;To share a manual DB cluster snapshot with other Amazon accounts, specify &lt;code&gt;restore&lt;/code&gt; as the &lt;code&gt;AttributeName&lt;/code&gt; and use the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter to add a list of IDs of the Amazon accounts that are authorized to restore the manual DB cluster snapshot. Use the value &lt;code&gt;all&lt;/code&gt; to make the manual DB cluster snapshot public, which means that it can be copied or restored by all Amazon accounts. Do not add the &lt;code&gt;all&lt;/code&gt; value for any manual DB cluster snapshots that contain private information that you don&#39;t want available to all Amazon accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized Amazon account IDs for the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter. You can&#39;t use &lt;code&gt;all&lt;/code&gt; as a value for that parameter in this case.&lt;/p&gt; &lt;p&gt;To view which Amazon accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the &lt;a&gt;DescribeDBClusterSnapshotAttributes&lt;/a&gt; API action.&lt;/p&gt;
     * @param dbClusterSnapshotIdentifier The identifier for the DB cluster snapshot to modify the attributes for. (required)
     * @param attributeName &lt;p&gt;The name of the DB cluster snapshot attribute to modify.&lt;/p&gt; &lt;p&gt;To manage authorization for other Amazon accounts to copy or restore a manual DB cluster snapshot, set this value to &lt;code&gt;restore&lt;/code&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param valuesToAdd &lt;p&gt;A list of DB cluster snapshot attributes to add to the attribute specified by &lt;code&gt;AttributeName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To authorize other Amazon accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more Amazon account IDs, or &lt;code&gt;all&lt;/code&gt; to make the manual DB cluster snapshot restorable by any Amazon account. Do not add the &lt;code&gt;all&lt;/code&gt; value for any manual DB cluster snapshots that contain private information that you don&#39;t want available to all Amazon accounts.&lt;/p&gt; (optional)
     * @param valuesToRemove &lt;p&gt;A list of DB cluster snapshot attributes to remove from the attribute specified by &lt;code&gt;AttributeName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To remove authorization for other Amazon accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more Amazon account identifiers, or &lt;code&gt;all&lt;/code&gt; to remove authorization for any Amazon account to copy or restore the DB cluster snapshot. If you specify &lt;code&gt;all&lt;/code&gt;, an Amazon account whose account ID is explicitly added to the &lt;code&gt;restore&lt;/code&gt; attribute can still copy or restore a manual DB cluster snapshot.&lt;/p&gt; (optional)
     * @return ModifyDBClusterSnapshotAttributeResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SharedSnapshotQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public ModifyDBClusterSnapshotAttributeResult gETModifyDBClusterSnapshotAttribute(String dbClusterSnapshotIdentifier, String attributeName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> valuesToAdd, List<String> valuesToRemove) throws ApiException {
        ApiResponse<ModifyDBClusterSnapshotAttributeResult> localVarResp = gETModifyDBClusterSnapshotAttributeWithHttpInfo(dbClusterSnapshotIdentifier, attributeName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, valuesToAdd, valuesToRemove);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.&lt;/p&gt; &lt;p&gt;To share a manual DB cluster snapshot with other Amazon accounts, specify &lt;code&gt;restore&lt;/code&gt; as the &lt;code&gt;AttributeName&lt;/code&gt; and use the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter to add a list of IDs of the Amazon accounts that are authorized to restore the manual DB cluster snapshot. Use the value &lt;code&gt;all&lt;/code&gt; to make the manual DB cluster snapshot public, which means that it can be copied or restored by all Amazon accounts. Do not add the &lt;code&gt;all&lt;/code&gt; value for any manual DB cluster snapshots that contain private information that you don&#39;t want available to all Amazon accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized Amazon account IDs for the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter. You can&#39;t use &lt;code&gt;all&lt;/code&gt; as a value for that parameter in this case.&lt;/p&gt; &lt;p&gt;To view which Amazon accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the &lt;a&gt;DescribeDBClusterSnapshotAttributes&lt;/a&gt; API action.&lt;/p&gt;
     * @param dbClusterSnapshotIdentifier The identifier for the DB cluster snapshot to modify the attributes for. (required)
     * @param attributeName &lt;p&gt;The name of the DB cluster snapshot attribute to modify.&lt;/p&gt; &lt;p&gt;To manage authorization for other Amazon accounts to copy or restore a manual DB cluster snapshot, set this value to &lt;code&gt;restore&lt;/code&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param valuesToAdd &lt;p&gt;A list of DB cluster snapshot attributes to add to the attribute specified by &lt;code&gt;AttributeName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To authorize other Amazon accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more Amazon account IDs, or &lt;code&gt;all&lt;/code&gt; to make the manual DB cluster snapshot restorable by any Amazon account. Do not add the &lt;code&gt;all&lt;/code&gt; value for any manual DB cluster snapshots that contain private information that you don&#39;t want available to all Amazon accounts.&lt;/p&gt; (optional)
     * @param valuesToRemove &lt;p&gt;A list of DB cluster snapshot attributes to remove from the attribute specified by &lt;code&gt;AttributeName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To remove authorization for other Amazon accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more Amazon account identifiers, or &lt;code&gt;all&lt;/code&gt; to remove authorization for any Amazon account to copy or restore the DB cluster snapshot. If you specify &lt;code&gt;all&lt;/code&gt;, an Amazon account whose account ID is explicitly added to the &lt;code&gt;restore&lt;/code&gt; attribute can still copy or restore a manual DB cluster snapshot.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;ModifyDBClusterSnapshotAttributeResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SharedSnapshotQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyDBClusterSnapshotAttributeResult> gETModifyDBClusterSnapshotAttributeWithHttpInfo(String dbClusterSnapshotIdentifier, String attributeName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> valuesToAdd, List<String> valuesToRemove) throws ApiException {
        okhttp3.Call localVarCall = gETModifyDBClusterSnapshotAttributeValidateBeforeCall(dbClusterSnapshotIdentifier, attributeName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, valuesToAdd, valuesToRemove, null);
        Type localVarReturnType = new TypeToken<ModifyDBClusterSnapshotAttributeResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.&lt;/p&gt; &lt;p&gt;To share a manual DB cluster snapshot with other Amazon accounts, specify &lt;code&gt;restore&lt;/code&gt; as the &lt;code&gt;AttributeName&lt;/code&gt; and use the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter to add a list of IDs of the Amazon accounts that are authorized to restore the manual DB cluster snapshot. Use the value &lt;code&gt;all&lt;/code&gt; to make the manual DB cluster snapshot public, which means that it can be copied or restored by all Amazon accounts. Do not add the &lt;code&gt;all&lt;/code&gt; value for any manual DB cluster snapshots that contain private information that you don&#39;t want available to all Amazon accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized Amazon account IDs for the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter. You can&#39;t use &lt;code&gt;all&lt;/code&gt; as a value for that parameter in this case.&lt;/p&gt; &lt;p&gt;To view which Amazon accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the &lt;a&gt;DescribeDBClusterSnapshotAttributes&lt;/a&gt; API action.&lt;/p&gt;
     * @param dbClusterSnapshotIdentifier The identifier for the DB cluster snapshot to modify the attributes for. (required)
     * @param attributeName &lt;p&gt;The name of the DB cluster snapshot attribute to modify.&lt;/p&gt; &lt;p&gt;To manage authorization for other Amazon accounts to copy or restore a manual DB cluster snapshot, set this value to &lt;code&gt;restore&lt;/code&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param valuesToAdd &lt;p&gt;A list of DB cluster snapshot attributes to add to the attribute specified by &lt;code&gt;AttributeName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To authorize other Amazon accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more Amazon account IDs, or &lt;code&gt;all&lt;/code&gt; to make the manual DB cluster snapshot restorable by any Amazon account. Do not add the &lt;code&gt;all&lt;/code&gt; value for any manual DB cluster snapshots that contain private information that you don&#39;t want available to all Amazon accounts.&lt;/p&gt; (optional)
     * @param valuesToRemove &lt;p&gt;A list of DB cluster snapshot attributes to remove from the attribute specified by &lt;code&gt;AttributeName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To remove authorization for other Amazon accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more Amazon account identifiers, or &lt;code&gt;all&lt;/code&gt; to remove authorization for any Amazon account to copy or restore the DB cluster snapshot. If you specify &lt;code&gt;all&lt;/code&gt;, an Amazon account whose account ID is explicitly added to the &lt;code&gt;restore&lt;/code&gt; attribute can still copy or restore a manual DB cluster snapshot.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SharedSnapshotQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyDBClusterSnapshotAttributeAsync(String dbClusterSnapshotIdentifier, String attributeName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> valuesToAdd, List<String> valuesToRemove, final ApiCallback<ModifyDBClusterSnapshotAttributeResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETModifyDBClusterSnapshotAttributeValidateBeforeCall(dbClusterSnapshotIdentifier, attributeName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, valuesToAdd, valuesToRemove, _callback);
        Type localVarReturnType = new TypeToken<ModifyDBClusterSnapshotAttributeResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETModifyDBInstance
     * @param dbInstanceIdentifier &lt;p&gt;The DB instance identifier. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing DBInstance.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param allocatedStorage Not supported by Neptune. (optional)
     * @param dbInstanceClass &lt;p&gt;The new compute and memory capacity of the DB instance, for example, &lt;code&gt;db.m4.large&lt;/code&gt;. Not all DB instance classes are available in all Amazon Regions.&lt;/p&gt; &lt;p&gt;If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless &lt;code&gt;ApplyImmediately&lt;/code&gt; is specified as &lt;code&gt;true&lt;/code&gt; for this request.&lt;/p&gt; &lt;p&gt;Default: Uses existing setting&lt;/p&gt; (optional)
     * @param dbSubnetGroupName &lt;p&gt;The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC.&lt;/p&gt; &lt;p&gt;Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify &lt;code&gt;true&lt;/code&gt; for the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;Constraints: If supplied, must match the name of an existing DBSubnetGroup.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetGroup&lt;/code&gt; &lt;/p&gt; (optional)
     * @param dbSecurityGroups &lt;p&gt;A list of DB security groups to authorize on this DB instance. Changing this setting doesn&#39;t result in an outage and the change is asynchronously applied as soon as possible.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match existing DBSecurityGroups.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param vpcSecurityGroupIds &lt;p&gt;A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.&lt;/p&gt; &lt;p&gt;Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see &lt;a&gt;ModifyDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match existing VpcSecurityGroupIds.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param applyImmediately &lt;p&gt;Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the &lt;code&gt;PreferredMaintenanceWindow&lt;/code&gt; setting for the DB instance.&lt;/p&gt; &lt;p&gt; If this parameter is set to &lt;code&gt;false&lt;/code&gt;, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to &lt;a&gt;RebootDBInstance&lt;/a&gt;, or the next failure reboot.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param masterUserPassword Not supported by Neptune. (optional)
     * @param dbParameterGroupName &lt;p&gt;The name of the DB parameter group to apply to the DB instance. Changing this setting doesn&#39;t result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window.&lt;/p&gt; &lt;p&gt;Default: Uses existing setting&lt;/p&gt; &lt;p&gt;Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.&lt;/p&gt; (optional)
     * @param backupRetentionPeriod &lt;p&gt;Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see &lt;a&gt;ModifyDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Default: Uses existing setting&lt;/p&gt; (optional)
     * @param preferredBackupWindow &lt;p&gt; The daily time range during which automated backups are created if automated backups are enabled.&lt;/p&gt; &lt;p&gt;Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see &lt;a&gt;ModifyDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be in the format hh24:mi-hh24:mi&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be in Universal Time Coordinated (UTC)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must not conflict with the preferred maintenance window&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 30 minutes&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn&#39;t result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.&lt;/p&gt; &lt;p&gt;Default: Uses existing setting&lt;/p&gt; &lt;p&gt;Format: ddd:hh24:mi-ddd:hh24:mi&lt;/p&gt; &lt;p&gt;Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun&lt;/p&gt; &lt;p&gt;Constraints: Must be at least 30 minutes&lt;/p&gt; (optional)
     * @param multiAZ Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn&#39;t result in an outage and the change is applied during the next maintenance window unless the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter is set to &lt;code&gt;true&lt;/code&gt; for this request. (optional)
     * @param engineVersion The version number of the database engine to upgrade to. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the &lt;a&gt;ApplyPendingMaintenanceAction&lt;/a&gt; API. (optional)
     * @param allowMajorVersionUpgrade Indicates that major version upgrades are allowed. Changing this parameter doesn&#39;t result in an outage and the change is asynchronously applied as soon as possible. (optional)
     * @param autoMinorVersionUpgrade  Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn&#39;t result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to &lt;code&gt;true&lt;/code&gt; during the maintenance window, and a newer minor version is available, and Neptune has enabled auto patching for that engine version. (optional)
     * @param licenseModel Not supported by Neptune. (optional)
     * @param iops &lt;p&gt;The new Provisioned IOPS (I/O operations per second) value for the instance.&lt;/p&gt; &lt;p&gt;Changing this setting doesn&#39;t result in an outage and the change is applied during the next maintenance window unless the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter is set to &lt;code&gt;true&lt;/code&gt; for this request.&lt;/p&gt; &lt;p&gt;Default: Uses existing setting&lt;/p&gt; (optional)
     * @param optionGroupName  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param newDBInstanceIdentifier &lt;p&gt; The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set &lt;code&gt;Apply Immediately&lt;/code&gt; to true, or will occur during the next maintenance window if &lt;code&gt;Apply Immediately&lt;/code&gt; to false. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;mydbinstance&lt;/code&gt; &lt;/p&gt; (optional)
     * @param storageType Not supported. (optional)
     * @param tdeCredentialArn The ARN from the key store with which to associate the instance for TDE encryption. (optional)
     * @param tdeCredentialPassword The password for the given ARN from the key store in order to access the device. (optional)
     * @param caCertificateIdentifier Indicates the certificate that needs to be associated with the instance. (optional)
     * @param domain Not supported. (optional)
     * @param copyTagsToSnapshot True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false. (optional)
     * @param monitoringInterval &lt;p&gt;The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;MonitoringRoleArn&lt;/code&gt; is specified, then you must also set &lt;code&gt;MonitoringInterval&lt;/code&gt; to a value other than 0.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;0, 1, 5, 10, 15, 30, 60&lt;/code&gt; &lt;/p&gt; (optional)
     * @param dbPortNumber &lt;p&gt;The port number on which the database accepts connections.&lt;/p&gt; &lt;p&gt;The value of the &lt;code&gt;DBPortNumber&lt;/code&gt; parameter must not match any of the port values specified for options in the option group for the DB instance.&lt;/p&gt; &lt;p&gt;Your database will restart when you change the &lt;code&gt;DBPortNumber&lt;/code&gt; value regardless of the value of the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt; Default: &lt;code&gt;8182&lt;/code&gt; &lt;/p&gt; (optional)
     * @param publiclyAccessible This flag should no longer be used. (optional)
     * @param monitoringRoleArn &lt;p&gt;The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, &lt;code&gt;arn:aws:iam:123456789012:role/emaccess&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;MonitoringInterval&lt;/code&gt; is set to a value other than 0, then you must supply a &lt;code&gt;MonitoringRoleArn&lt;/code&gt; value.&lt;/p&gt; (optional)
     * @param domainIAMRoleName Not supported (optional)
     * @param promotionTier &lt;p&gt;A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Valid Values: 0 - 15&lt;/p&gt; (optional)
     * @param enableIAMDatabaseAuthentication &lt;p&gt;True to enable mapping of Amazon Identity and Access Management (IAM) accounts to database accounts, and otherwise false.&lt;/p&gt; &lt;p&gt;You can enable IAM database authentication for the following database engines&lt;/p&gt; &lt;p&gt;Not applicable. Mapping Amazon IAM accounts to database accounts is managed by the DB cluster. For more information, see &lt;a&gt;ModifyDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param enablePerformanceInsights  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param performanceInsightsKMSKeyId  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param cloudwatchLogsExportConfiguration The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster. (optional)
     * @param deletionProtection A value that indicates whether the DB instance has deletion protection enabled. The database can&#39;t be deleted when deletion protection is enabled. By default, deletion protection is disabled. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/userguide/manage-console-instances-delete.html\&quot;&gt;Deleting a DB Instance&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ProvisionedIopsNotAvailableInAZFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> DBUpgradeDependencyFailureFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> CertificateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> DomainNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyDBInstanceCall(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer allocatedStorage, String dbInstanceClass, String dbSubnetGroupName, List<String> dbSecurityGroups, List<String> vpcSecurityGroupIds, Boolean applyImmediately, String masterUserPassword, String dbParameterGroupName, Integer backupRetentionPeriod, String preferredBackupWindow, String preferredMaintenanceWindow, Boolean multiAZ, String engineVersion, Boolean allowMajorVersionUpgrade, Boolean autoMinorVersionUpgrade, String licenseModel, Integer iops, String optionGroupName, String newDBInstanceIdentifier, String storageType, String tdeCredentialArn, String tdeCredentialPassword, String caCertificateIdentifier, String domain, Boolean copyTagsToSnapshot, Integer monitoringInterval, Integer dbPortNumber, Boolean publiclyAccessible, String monitoringRoleArn, String domainIAMRoleName, Integer promotionTier, Boolean enableIAMDatabaseAuthentication, Boolean enablePerformanceInsights, String performanceInsightsKMSKeyId, GETModifyDBClusterCloudwatchLogsExportConfigurationParameter cloudwatchLogsExportConfiguration, Boolean deletionProtection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ModifyDBInstance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbInstanceIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBInstanceIdentifier", dbInstanceIdentifier));
        }

        if (allocatedStorage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AllocatedStorage", allocatedStorage));
        }

        if (dbInstanceClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBInstanceClass", dbInstanceClass));
        }

        if (dbSubnetGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBSubnetGroupName", dbSubnetGroupName));
        }

        if (dbSecurityGroups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "DBSecurityGroups", dbSecurityGroups));
        }

        if (vpcSecurityGroupIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "VpcSecurityGroupIds", vpcSecurityGroupIds));
        }

        if (applyImmediately != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplyImmediately", applyImmediately));
        }

        if (masterUserPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MasterUserPassword", masterUserPassword));
        }

        if (dbParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBParameterGroupName", dbParameterGroupName));
        }

        if (backupRetentionPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("BackupRetentionPeriod", backupRetentionPeriod));
        }

        if (preferredBackupWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PreferredBackupWindow", preferredBackupWindow));
        }

        if (preferredMaintenanceWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PreferredMaintenanceWindow", preferredMaintenanceWindow));
        }

        if (multiAZ != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MultiAZ", multiAZ));
        }

        if (engineVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EngineVersion", engineVersion));
        }

        if (allowMajorVersionUpgrade != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AllowMajorVersionUpgrade", allowMajorVersionUpgrade));
        }

        if (autoMinorVersionUpgrade != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoMinorVersionUpgrade", autoMinorVersionUpgrade));
        }

        if (licenseModel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LicenseModel", licenseModel));
        }

        if (iops != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Iops", iops));
        }

        if (optionGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OptionGroupName", optionGroupName));
        }

        if (newDBInstanceIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NewDBInstanceIdentifier", newDBInstanceIdentifier));
        }

        if (storageType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StorageType", storageType));
        }

        if (tdeCredentialArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TdeCredentialArn", tdeCredentialArn));
        }

        if (tdeCredentialPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TdeCredentialPassword", tdeCredentialPassword));
        }

        if (caCertificateIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CACertificateIdentifier", caCertificateIdentifier));
        }

        if (domain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Domain", domain));
        }

        if (copyTagsToSnapshot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CopyTagsToSnapshot", copyTagsToSnapshot));
        }

        if (monitoringInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MonitoringInterval", monitoringInterval));
        }

        if (dbPortNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBPortNumber", dbPortNumber));
        }

        if (publiclyAccessible != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PubliclyAccessible", publiclyAccessible));
        }

        if (monitoringRoleArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MonitoringRoleArn", monitoringRoleArn));
        }

        if (domainIAMRoleName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DomainIAMRoleName", domainIAMRoleName));
        }

        if (promotionTier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PromotionTier", promotionTier));
        }

        if (enableIAMDatabaseAuthentication != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnableIAMDatabaseAuthentication", enableIAMDatabaseAuthentication));
        }

        if (enablePerformanceInsights != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnablePerformanceInsights", enablePerformanceInsights));
        }

        if (performanceInsightsKMSKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerformanceInsightsKMSKeyId", performanceInsightsKMSKeyId));
        }

        if (cloudwatchLogsExportConfiguration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CloudwatchLogsExportConfiguration", cloudwatchLogsExportConfiguration));
        }

        if (deletionProtection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DeletionProtection", deletionProtection));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETModifyDBInstanceValidateBeforeCall(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer allocatedStorage, String dbInstanceClass, String dbSubnetGroupName, List<String> dbSecurityGroups, List<String> vpcSecurityGroupIds, Boolean applyImmediately, String masterUserPassword, String dbParameterGroupName, Integer backupRetentionPeriod, String preferredBackupWindow, String preferredMaintenanceWindow, Boolean multiAZ, String engineVersion, Boolean allowMajorVersionUpgrade, Boolean autoMinorVersionUpgrade, String licenseModel, Integer iops, String optionGroupName, String newDBInstanceIdentifier, String storageType, String tdeCredentialArn, String tdeCredentialPassword, String caCertificateIdentifier, String domain, Boolean copyTagsToSnapshot, Integer monitoringInterval, Integer dbPortNumber, Boolean publiclyAccessible, String monitoringRoleArn, String domainIAMRoleName, Integer promotionTier, Boolean enableIAMDatabaseAuthentication, Boolean enablePerformanceInsights, String performanceInsightsKMSKeyId, GETModifyDBClusterCloudwatchLogsExportConfigurationParameter cloudwatchLogsExportConfiguration, Boolean deletionProtection, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbInstanceIdentifier' is set
        if (dbInstanceIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbInstanceIdentifier' when calling gETModifyDBInstance(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETModifyDBInstance(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETModifyDBInstance(Async)");
        }

        return gETModifyDBInstanceCall(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, allocatedStorage, dbInstanceClass, dbSubnetGroupName, dbSecurityGroups, vpcSecurityGroupIds, applyImmediately, masterUserPassword, dbParameterGroupName, backupRetentionPeriod, preferredBackupWindow, preferredMaintenanceWindow, multiAZ, engineVersion, allowMajorVersionUpgrade, autoMinorVersionUpgrade, licenseModel, iops, optionGroupName, newDBInstanceIdentifier, storageType, tdeCredentialArn, tdeCredentialPassword, caCertificateIdentifier, domain, copyTagsToSnapshot, monitoringInterval, dbPortNumber, publiclyAccessible, monitoringRoleArn, domainIAMRoleName, promotionTier, enableIAMDatabaseAuthentication, enablePerformanceInsights, performanceInsightsKMSKeyId, cloudwatchLogsExportConfiguration, deletionProtection, _callback);

    }

    /**
     * 
     * Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call &lt;a&gt;DescribeValidDBInstanceModifications&lt;/a&gt; before you call &lt;a&gt;ModifyDBInstance&lt;/a&gt;.
     * @param dbInstanceIdentifier &lt;p&gt;The DB instance identifier. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing DBInstance.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param allocatedStorage Not supported by Neptune. (optional)
     * @param dbInstanceClass &lt;p&gt;The new compute and memory capacity of the DB instance, for example, &lt;code&gt;db.m4.large&lt;/code&gt;. Not all DB instance classes are available in all Amazon Regions.&lt;/p&gt; &lt;p&gt;If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless &lt;code&gt;ApplyImmediately&lt;/code&gt; is specified as &lt;code&gt;true&lt;/code&gt; for this request.&lt;/p&gt; &lt;p&gt;Default: Uses existing setting&lt;/p&gt; (optional)
     * @param dbSubnetGroupName &lt;p&gt;The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC.&lt;/p&gt; &lt;p&gt;Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify &lt;code&gt;true&lt;/code&gt; for the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;Constraints: If supplied, must match the name of an existing DBSubnetGroup.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetGroup&lt;/code&gt; &lt;/p&gt; (optional)
     * @param dbSecurityGroups &lt;p&gt;A list of DB security groups to authorize on this DB instance. Changing this setting doesn&#39;t result in an outage and the change is asynchronously applied as soon as possible.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match existing DBSecurityGroups.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param vpcSecurityGroupIds &lt;p&gt;A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.&lt;/p&gt; &lt;p&gt;Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see &lt;a&gt;ModifyDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match existing VpcSecurityGroupIds.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param applyImmediately &lt;p&gt;Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the &lt;code&gt;PreferredMaintenanceWindow&lt;/code&gt; setting for the DB instance.&lt;/p&gt; &lt;p&gt; If this parameter is set to &lt;code&gt;false&lt;/code&gt;, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to &lt;a&gt;RebootDBInstance&lt;/a&gt;, or the next failure reboot.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param masterUserPassword Not supported by Neptune. (optional)
     * @param dbParameterGroupName &lt;p&gt;The name of the DB parameter group to apply to the DB instance. Changing this setting doesn&#39;t result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window.&lt;/p&gt; &lt;p&gt;Default: Uses existing setting&lt;/p&gt; &lt;p&gt;Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.&lt;/p&gt; (optional)
     * @param backupRetentionPeriod &lt;p&gt;Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see &lt;a&gt;ModifyDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Default: Uses existing setting&lt;/p&gt; (optional)
     * @param preferredBackupWindow &lt;p&gt; The daily time range during which automated backups are created if automated backups are enabled.&lt;/p&gt; &lt;p&gt;Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see &lt;a&gt;ModifyDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be in the format hh24:mi-hh24:mi&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be in Universal Time Coordinated (UTC)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must not conflict with the preferred maintenance window&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 30 minutes&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn&#39;t result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.&lt;/p&gt; &lt;p&gt;Default: Uses existing setting&lt;/p&gt; &lt;p&gt;Format: ddd:hh24:mi-ddd:hh24:mi&lt;/p&gt; &lt;p&gt;Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun&lt;/p&gt; &lt;p&gt;Constraints: Must be at least 30 minutes&lt;/p&gt; (optional)
     * @param multiAZ Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn&#39;t result in an outage and the change is applied during the next maintenance window unless the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter is set to &lt;code&gt;true&lt;/code&gt; for this request. (optional)
     * @param engineVersion The version number of the database engine to upgrade to. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the &lt;a&gt;ApplyPendingMaintenanceAction&lt;/a&gt; API. (optional)
     * @param allowMajorVersionUpgrade Indicates that major version upgrades are allowed. Changing this parameter doesn&#39;t result in an outage and the change is asynchronously applied as soon as possible. (optional)
     * @param autoMinorVersionUpgrade  Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn&#39;t result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to &lt;code&gt;true&lt;/code&gt; during the maintenance window, and a newer minor version is available, and Neptune has enabled auto patching for that engine version. (optional)
     * @param licenseModel Not supported by Neptune. (optional)
     * @param iops &lt;p&gt;The new Provisioned IOPS (I/O operations per second) value for the instance.&lt;/p&gt; &lt;p&gt;Changing this setting doesn&#39;t result in an outage and the change is applied during the next maintenance window unless the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter is set to &lt;code&gt;true&lt;/code&gt; for this request.&lt;/p&gt; &lt;p&gt;Default: Uses existing setting&lt;/p&gt; (optional)
     * @param optionGroupName  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param newDBInstanceIdentifier &lt;p&gt; The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set &lt;code&gt;Apply Immediately&lt;/code&gt; to true, or will occur during the next maintenance window if &lt;code&gt;Apply Immediately&lt;/code&gt; to false. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;mydbinstance&lt;/code&gt; &lt;/p&gt; (optional)
     * @param storageType Not supported. (optional)
     * @param tdeCredentialArn The ARN from the key store with which to associate the instance for TDE encryption. (optional)
     * @param tdeCredentialPassword The password for the given ARN from the key store in order to access the device. (optional)
     * @param caCertificateIdentifier Indicates the certificate that needs to be associated with the instance. (optional)
     * @param domain Not supported. (optional)
     * @param copyTagsToSnapshot True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false. (optional)
     * @param monitoringInterval &lt;p&gt;The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;MonitoringRoleArn&lt;/code&gt; is specified, then you must also set &lt;code&gt;MonitoringInterval&lt;/code&gt; to a value other than 0.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;0, 1, 5, 10, 15, 30, 60&lt;/code&gt; &lt;/p&gt; (optional)
     * @param dbPortNumber &lt;p&gt;The port number on which the database accepts connections.&lt;/p&gt; &lt;p&gt;The value of the &lt;code&gt;DBPortNumber&lt;/code&gt; parameter must not match any of the port values specified for options in the option group for the DB instance.&lt;/p&gt; &lt;p&gt;Your database will restart when you change the &lt;code&gt;DBPortNumber&lt;/code&gt; value regardless of the value of the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt; Default: &lt;code&gt;8182&lt;/code&gt; &lt;/p&gt; (optional)
     * @param publiclyAccessible This flag should no longer be used. (optional)
     * @param monitoringRoleArn &lt;p&gt;The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, &lt;code&gt;arn:aws:iam:123456789012:role/emaccess&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;MonitoringInterval&lt;/code&gt; is set to a value other than 0, then you must supply a &lt;code&gt;MonitoringRoleArn&lt;/code&gt; value.&lt;/p&gt; (optional)
     * @param domainIAMRoleName Not supported (optional)
     * @param promotionTier &lt;p&gt;A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Valid Values: 0 - 15&lt;/p&gt; (optional)
     * @param enableIAMDatabaseAuthentication &lt;p&gt;True to enable mapping of Amazon Identity and Access Management (IAM) accounts to database accounts, and otherwise false.&lt;/p&gt; &lt;p&gt;You can enable IAM database authentication for the following database engines&lt;/p&gt; &lt;p&gt;Not applicable. Mapping Amazon IAM accounts to database accounts is managed by the DB cluster. For more information, see &lt;a&gt;ModifyDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param enablePerformanceInsights  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param performanceInsightsKMSKeyId  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param cloudwatchLogsExportConfiguration The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster. (optional)
     * @param deletionProtection A value that indicates whether the DB instance has deletion protection enabled. The database can&#39;t be deleted when deletion protection is enabled. By default, deletion protection is disabled. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/userguide/manage-console-instances-delete.html\&quot;&gt;Deleting a DB Instance&lt;/a&gt;. (optional)
     * @return ModifyDBInstanceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ProvisionedIopsNotAvailableInAZFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> DBUpgradeDependencyFailureFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> CertificateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> DomainNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ModifyDBInstanceResult gETModifyDBInstance(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer allocatedStorage, String dbInstanceClass, String dbSubnetGroupName, List<String> dbSecurityGroups, List<String> vpcSecurityGroupIds, Boolean applyImmediately, String masterUserPassword, String dbParameterGroupName, Integer backupRetentionPeriod, String preferredBackupWindow, String preferredMaintenanceWindow, Boolean multiAZ, String engineVersion, Boolean allowMajorVersionUpgrade, Boolean autoMinorVersionUpgrade, String licenseModel, Integer iops, String optionGroupName, String newDBInstanceIdentifier, String storageType, String tdeCredentialArn, String tdeCredentialPassword, String caCertificateIdentifier, String domain, Boolean copyTagsToSnapshot, Integer monitoringInterval, Integer dbPortNumber, Boolean publiclyAccessible, String monitoringRoleArn, String domainIAMRoleName, Integer promotionTier, Boolean enableIAMDatabaseAuthentication, Boolean enablePerformanceInsights, String performanceInsightsKMSKeyId, GETModifyDBClusterCloudwatchLogsExportConfigurationParameter cloudwatchLogsExportConfiguration, Boolean deletionProtection) throws ApiException {
        ApiResponse<ModifyDBInstanceResult> localVarResp = gETModifyDBInstanceWithHttpInfo(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, allocatedStorage, dbInstanceClass, dbSubnetGroupName, dbSecurityGroups, vpcSecurityGroupIds, applyImmediately, masterUserPassword, dbParameterGroupName, backupRetentionPeriod, preferredBackupWindow, preferredMaintenanceWindow, multiAZ, engineVersion, allowMajorVersionUpgrade, autoMinorVersionUpgrade, licenseModel, iops, optionGroupName, newDBInstanceIdentifier, storageType, tdeCredentialArn, tdeCredentialPassword, caCertificateIdentifier, domain, copyTagsToSnapshot, monitoringInterval, dbPortNumber, publiclyAccessible, monitoringRoleArn, domainIAMRoleName, promotionTier, enableIAMDatabaseAuthentication, enablePerformanceInsights, performanceInsightsKMSKeyId, cloudwatchLogsExportConfiguration, deletionProtection);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call &lt;a&gt;DescribeValidDBInstanceModifications&lt;/a&gt; before you call &lt;a&gt;ModifyDBInstance&lt;/a&gt;.
     * @param dbInstanceIdentifier &lt;p&gt;The DB instance identifier. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing DBInstance.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param allocatedStorage Not supported by Neptune. (optional)
     * @param dbInstanceClass &lt;p&gt;The new compute and memory capacity of the DB instance, for example, &lt;code&gt;db.m4.large&lt;/code&gt;. Not all DB instance classes are available in all Amazon Regions.&lt;/p&gt; &lt;p&gt;If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless &lt;code&gt;ApplyImmediately&lt;/code&gt; is specified as &lt;code&gt;true&lt;/code&gt; for this request.&lt;/p&gt; &lt;p&gt;Default: Uses existing setting&lt;/p&gt; (optional)
     * @param dbSubnetGroupName &lt;p&gt;The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC.&lt;/p&gt; &lt;p&gt;Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify &lt;code&gt;true&lt;/code&gt; for the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;Constraints: If supplied, must match the name of an existing DBSubnetGroup.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetGroup&lt;/code&gt; &lt;/p&gt; (optional)
     * @param dbSecurityGroups &lt;p&gt;A list of DB security groups to authorize on this DB instance. Changing this setting doesn&#39;t result in an outage and the change is asynchronously applied as soon as possible.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match existing DBSecurityGroups.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param vpcSecurityGroupIds &lt;p&gt;A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.&lt;/p&gt; &lt;p&gt;Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see &lt;a&gt;ModifyDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match existing VpcSecurityGroupIds.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param applyImmediately &lt;p&gt;Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the &lt;code&gt;PreferredMaintenanceWindow&lt;/code&gt; setting for the DB instance.&lt;/p&gt; &lt;p&gt; If this parameter is set to &lt;code&gt;false&lt;/code&gt;, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to &lt;a&gt;RebootDBInstance&lt;/a&gt;, or the next failure reboot.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param masterUserPassword Not supported by Neptune. (optional)
     * @param dbParameterGroupName &lt;p&gt;The name of the DB parameter group to apply to the DB instance. Changing this setting doesn&#39;t result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window.&lt;/p&gt; &lt;p&gt;Default: Uses existing setting&lt;/p&gt; &lt;p&gt;Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.&lt;/p&gt; (optional)
     * @param backupRetentionPeriod &lt;p&gt;Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see &lt;a&gt;ModifyDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Default: Uses existing setting&lt;/p&gt; (optional)
     * @param preferredBackupWindow &lt;p&gt; The daily time range during which automated backups are created if automated backups are enabled.&lt;/p&gt; &lt;p&gt;Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see &lt;a&gt;ModifyDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be in the format hh24:mi-hh24:mi&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be in Universal Time Coordinated (UTC)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must not conflict with the preferred maintenance window&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 30 minutes&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn&#39;t result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.&lt;/p&gt; &lt;p&gt;Default: Uses existing setting&lt;/p&gt; &lt;p&gt;Format: ddd:hh24:mi-ddd:hh24:mi&lt;/p&gt; &lt;p&gt;Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun&lt;/p&gt; &lt;p&gt;Constraints: Must be at least 30 minutes&lt;/p&gt; (optional)
     * @param multiAZ Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn&#39;t result in an outage and the change is applied during the next maintenance window unless the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter is set to &lt;code&gt;true&lt;/code&gt; for this request. (optional)
     * @param engineVersion The version number of the database engine to upgrade to. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the &lt;a&gt;ApplyPendingMaintenanceAction&lt;/a&gt; API. (optional)
     * @param allowMajorVersionUpgrade Indicates that major version upgrades are allowed. Changing this parameter doesn&#39;t result in an outage and the change is asynchronously applied as soon as possible. (optional)
     * @param autoMinorVersionUpgrade  Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn&#39;t result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to &lt;code&gt;true&lt;/code&gt; during the maintenance window, and a newer minor version is available, and Neptune has enabled auto patching for that engine version. (optional)
     * @param licenseModel Not supported by Neptune. (optional)
     * @param iops &lt;p&gt;The new Provisioned IOPS (I/O operations per second) value for the instance.&lt;/p&gt; &lt;p&gt;Changing this setting doesn&#39;t result in an outage and the change is applied during the next maintenance window unless the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter is set to &lt;code&gt;true&lt;/code&gt; for this request.&lt;/p&gt; &lt;p&gt;Default: Uses existing setting&lt;/p&gt; (optional)
     * @param optionGroupName  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param newDBInstanceIdentifier &lt;p&gt; The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set &lt;code&gt;Apply Immediately&lt;/code&gt; to true, or will occur during the next maintenance window if &lt;code&gt;Apply Immediately&lt;/code&gt; to false. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;mydbinstance&lt;/code&gt; &lt;/p&gt; (optional)
     * @param storageType Not supported. (optional)
     * @param tdeCredentialArn The ARN from the key store with which to associate the instance for TDE encryption. (optional)
     * @param tdeCredentialPassword The password for the given ARN from the key store in order to access the device. (optional)
     * @param caCertificateIdentifier Indicates the certificate that needs to be associated with the instance. (optional)
     * @param domain Not supported. (optional)
     * @param copyTagsToSnapshot True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false. (optional)
     * @param monitoringInterval &lt;p&gt;The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;MonitoringRoleArn&lt;/code&gt; is specified, then you must also set &lt;code&gt;MonitoringInterval&lt;/code&gt; to a value other than 0.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;0, 1, 5, 10, 15, 30, 60&lt;/code&gt; &lt;/p&gt; (optional)
     * @param dbPortNumber &lt;p&gt;The port number on which the database accepts connections.&lt;/p&gt; &lt;p&gt;The value of the &lt;code&gt;DBPortNumber&lt;/code&gt; parameter must not match any of the port values specified for options in the option group for the DB instance.&lt;/p&gt; &lt;p&gt;Your database will restart when you change the &lt;code&gt;DBPortNumber&lt;/code&gt; value regardless of the value of the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt; Default: &lt;code&gt;8182&lt;/code&gt; &lt;/p&gt; (optional)
     * @param publiclyAccessible This flag should no longer be used. (optional)
     * @param monitoringRoleArn &lt;p&gt;The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, &lt;code&gt;arn:aws:iam:123456789012:role/emaccess&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;MonitoringInterval&lt;/code&gt; is set to a value other than 0, then you must supply a &lt;code&gt;MonitoringRoleArn&lt;/code&gt; value.&lt;/p&gt; (optional)
     * @param domainIAMRoleName Not supported (optional)
     * @param promotionTier &lt;p&gt;A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Valid Values: 0 - 15&lt;/p&gt; (optional)
     * @param enableIAMDatabaseAuthentication &lt;p&gt;True to enable mapping of Amazon Identity and Access Management (IAM) accounts to database accounts, and otherwise false.&lt;/p&gt; &lt;p&gt;You can enable IAM database authentication for the following database engines&lt;/p&gt; &lt;p&gt;Not applicable. Mapping Amazon IAM accounts to database accounts is managed by the DB cluster. For more information, see &lt;a&gt;ModifyDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param enablePerformanceInsights  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param performanceInsightsKMSKeyId  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param cloudwatchLogsExportConfiguration The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster. (optional)
     * @param deletionProtection A value that indicates whether the DB instance has deletion protection enabled. The database can&#39;t be deleted when deletion protection is enabled. By default, deletion protection is disabled. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/userguide/manage-console-instances-delete.html\&quot;&gt;Deleting a DB Instance&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;ModifyDBInstanceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ProvisionedIopsNotAvailableInAZFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> DBUpgradeDependencyFailureFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> CertificateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> DomainNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyDBInstanceResult> gETModifyDBInstanceWithHttpInfo(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer allocatedStorage, String dbInstanceClass, String dbSubnetGroupName, List<String> dbSecurityGroups, List<String> vpcSecurityGroupIds, Boolean applyImmediately, String masterUserPassword, String dbParameterGroupName, Integer backupRetentionPeriod, String preferredBackupWindow, String preferredMaintenanceWindow, Boolean multiAZ, String engineVersion, Boolean allowMajorVersionUpgrade, Boolean autoMinorVersionUpgrade, String licenseModel, Integer iops, String optionGroupName, String newDBInstanceIdentifier, String storageType, String tdeCredentialArn, String tdeCredentialPassword, String caCertificateIdentifier, String domain, Boolean copyTagsToSnapshot, Integer monitoringInterval, Integer dbPortNumber, Boolean publiclyAccessible, String monitoringRoleArn, String domainIAMRoleName, Integer promotionTier, Boolean enableIAMDatabaseAuthentication, Boolean enablePerformanceInsights, String performanceInsightsKMSKeyId, GETModifyDBClusterCloudwatchLogsExportConfigurationParameter cloudwatchLogsExportConfiguration, Boolean deletionProtection) throws ApiException {
        okhttp3.Call localVarCall = gETModifyDBInstanceValidateBeforeCall(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, allocatedStorage, dbInstanceClass, dbSubnetGroupName, dbSecurityGroups, vpcSecurityGroupIds, applyImmediately, masterUserPassword, dbParameterGroupName, backupRetentionPeriod, preferredBackupWindow, preferredMaintenanceWindow, multiAZ, engineVersion, allowMajorVersionUpgrade, autoMinorVersionUpgrade, licenseModel, iops, optionGroupName, newDBInstanceIdentifier, storageType, tdeCredentialArn, tdeCredentialPassword, caCertificateIdentifier, domain, copyTagsToSnapshot, monitoringInterval, dbPortNumber, publiclyAccessible, monitoringRoleArn, domainIAMRoleName, promotionTier, enableIAMDatabaseAuthentication, enablePerformanceInsights, performanceInsightsKMSKeyId, cloudwatchLogsExportConfiguration, deletionProtection, null);
        Type localVarReturnType = new TypeToken<ModifyDBInstanceResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call &lt;a&gt;DescribeValidDBInstanceModifications&lt;/a&gt; before you call &lt;a&gt;ModifyDBInstance&lt;/a&gt;.
     * @param dbInstanceIdentifier &lt;p&gt;The DB instance identifier. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing DBInstance.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param allocatedStorage Not supported by Neptune. (optional)
     * @param dbInstanceClass &lt;p&gt;The new compute and memory capacity of the DB instance, for example, &lt;code&gt;db.m4.large&lt;/code&gt;. Not all DB instance classes are available in all Amazon Regions.&lt;/p&gt; &lt;p&gt;If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless &lt;code&gt;ApplyImmediately&lt;/code&gt; is specified as &lt;code&gt;true&lt;/code&gt; for this request.&lt;/p&gt; &lt;p&gt;Default: Uses existing setting&lt;/p&gt; (optional)
     * @param dbSubnetGroupName &lt;p&gt;The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC.&lt;/p&gt; &lt;p&gt;Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify &lt;code&gt;true&lt;/code&gt; for the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;Constraints: If supplied, must match the name of an existing DBSubnetGroup.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetGroup&lt;/code&gt; &lt;/p&gt; (optional)
     * @param dbSecurityGroups &lt;p&gt;A list of DB security groups to authorize on this DB instance. Changing this setting doesn&#39;t result in an outage and the change is asynchronously applied as soon as possible.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match existing DBSecurityGroups.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param vpcSecurityGroupIds &lt;p&gt;A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.&lt;/p&gt; &lt;p&gt;Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see &lt;a&gt;ModifyDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match existing VpcSecurityGroupIds.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param applyImmediately &lt;p&gt;Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the &lt;code&gt;PreferredMaintenanceWindow&lt;/code&gt; setting for the DB instance.&lt;/p&gt; &lt;p&gt; If this parameter is set to &lt;code&gt;false&lt;/code&gt;, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to &lt;a&gt;RebootDBInstance&lt;/a&gt;, or the next failure reboot.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param masterUserPassword Not supported by Neptune. (optional)
     * @param dbParameterGroupName &lt;p&gt;The name of the DB parameter group to apply to the DB instance. Changing this setting doesn&#39;t result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window.&lt;/p&gt; &lt;p&gt;Default: Uses existing setting&lt;/p&gt; &lt;p&gt;Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.&lt;/p&gt; (optional)
     * @param backupRetentionPeriod &lt;p&gt;Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see &lt;a&gt;ModifyDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Default: Uses existing setting&lt;/p&gt; (optional)
     * @param preferredBackupWindow &lt;p&gt; The daily time range during which automated backups are created if automated backups are enabled.&lt;/p&gt; &lt;p&gt;Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see &lt;a&gt;ModifyDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be in the format hh24:mi-hh24:mi&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be in Universal Time Coordinated (UTC)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must not conflict with the preferred maintenance window&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 30 minutes&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn&#39;t result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.&lt;/p&gt; &lt;p&gt;Default: Uses existing setting&lt;/p&gt; &lt;p&gt;Format: ddd:hh24:mi-ddd:hh24:mi&lt;/p&gt; &lt;p&gt;Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun&lt;/p&gt; &lt;p&gt;Constraints: Must be at least 30 minutes&lt;/p&gt; (optional)
     * @param multiAZ Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn&#39;t result in an outage and the change is applied during the next maintenance window unless the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter is set to &lt;code&gt;true&lt;/code&gt; for this request. (optional)
     * @param engineVersion The version number of the database engine to upgrade to. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the &lt;a&gt;ApplyPendingMaintenanceAction&lt;/a&gt; API. (optional)
     * @param allowMajorVersionUpgrade Indicates that major version upgrades are allowed. Changing this parameter doesn&#39;t result in an outage and the change is asynchronously applied as soon as possible. (optional)
     * @param autoMinorVersionUpgrade  Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn&#39;t result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to &lt;code&gt;true&lt;/code&gt; during the maintenance window, and a newer minor version is available, and Neptune has enabled auto patching for that engine version. (optional)
     * @param licenseModel Not supported by Neptune. (optional)
     * @param iops &lt;p&gt;The new Provisioned IOPS (I/O operations per second) value for the instance.&lt;/p&gt; &lt;p&gt;Changing this setting doesn&#39;t result in an outage and the change is applied during the next maintenance window unless the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter is set to &lt;code&gt;true&lt;/code&gt; for this request.&lt;/p&gt; &lt;p&gt;Default: Uses existing setting&lt;/p&gt; (optional)
     * @param optionGroupName  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param newDBInstanceIdentifier &lt;p&gt; The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set &lt;code&gt;Apply Immediately&lt;/code&gt; to true, or will occur during the next maintenance window if &lt;code&gt;Apply Immediately&lt;/code&gt; to false. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;mydbinstance&lt;/code&gt; &lt;/p&gt; (optional)
     * @param storageType Not supported. (optional)
     * @param tdeCredentialArn The ARN from the key store with which to associate the instance for TDE encryption. (optional)
     * @param tdeCredentialPassword The password for the given ARN from the key store in order to access the device. (optional)
     * @param caCertificateIdentifier Indicates the certificate that needs to be associated with the instance. (optional)
     * @param domain Not supported. (optional)
     * @param copyTagsToSnapshot True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false. (optional)
     * @param monitoringInterval &lt;p&gt;The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;MonitoringRoleArn&lt;/code&gt; is specified, then you must also set &lt;code&gt;MonitoringInterval&lt;/code&gt; to a value other than 0.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;0, 1, 5, 10, 15, 30, 60&lt;/code&gt; &lt;/p&gt; (optional)
     * @param dbPortNumber &lt;p&gt;The port number on which the database accepts connections.&lt;/p&gt; &lt;p&gt;The value of the &lt;code&gt;DBPortNumber&lt;/code&gt; parameter must not match any of the port values specified for options in the option group for the DB instance.&lt;/p&gt; &lt;p&gt;Your database will restart when you change the &lt;code&gt;DBPortNumber&lt;/code&gt; value regardless of the value of the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt; Default: &lt;code&gt;8182&lt;/code&gt; &lt;/p&gt; (optional)
     * @param publiclyAccessible This flag should no longer be used. (optional)
     * @param monitoringRoleArn &lt;p&gt;The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, &lt;code&gt;arn:aws:iam:123456789012:role/emaccess&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;MonitoringInterval&lt;/code&gt; is set to a value other than 0, then you must supply a &lt;code&gt;MonitoringRoleArn&lt;/code&gt; value.&lt;/p&gt; (optional)
     * @param domainIAMRoleName Not supported (optional)
     * @param promotionTier &lt;p&gt;A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Valid Values: 0 - 15&lt;/p&gt; (optional)
     * @param enableIAMDatabaseAuthentication &lt;p&gt;True to enable mapping of Amazon Identity and Access Management (IAM) accounts to database accounts, and otherwise false.&lt;/p&gt; &lt;p&gt;You can enable IAM database authentication for the following database engines&lt;/p&gt; &lt;p&gt;Not applicable. Mapping Amazon IAM accounts to database accounts is managed by the DB cluster. For more information, see &lt;a&gt;ModifyDBCluster&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param enablePerformanceInsights  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param performanceInsightsKMSKeyId  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param cloudwatchLogsExportConfiguration The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster. (optional)
     * @param deletionProtection A value that indicates whether the DB instance has deletion protection enabled. The database can&#39;t be deleted when deletion protection is enabled. By default, deletion protection is disabled. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/userguide/manage-console-instances-delete.html\&quot;&gt;Deleting a DB Instance&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ProvisionedIopsNotAvailableInAZFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> DBUpgradeDependencyFailureFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> CertificateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> DomainNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyDBInstanceAsync(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer allocatedStorage, String dbInstanceClass, String dbSubnetGroupName, List<String> dbSecurityGroups, List<String> vpcSecurityGroupIds, Boolean applyImmediately, String masterUserPassword, String dbParameterGroupName, Integer backupRetentionPeriod, String preferredBackupWindow, String preferredMaintenanceWindow, Boolean multiAZ, String engineVersion, Boolean allowMajorVersionUpgrade, Boolean autoMinorVersionUpgrade, String licenseModel, Integer iops, String optionGroupName, String newDBInstanceIdentifier, String storageType, String tdeCredentialArn, String tdeCredentialPassword, String caCertificateIdentifier, String domain, Boolean copyTagsToSnapshot, Integer monitoringInterval, Integer dbPortNumber, Boolean publiclyAccessible, String monitoringRoleArn, String domainIAMRoleName, Integer promotionTier, Boolean enableIAMDatabaseAuthentication, Boolean enablePerformanceInsights, String performanceInsightsKMSKeyId, GETModifyDBClusterCloudwatchLogsExportConfigurationParameter cloudwatchLogsExportConfiguration, Boolean deletionProtection, final ApiCallback<ModifyDBInstanceResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETModifyDBInstanceValidateBeforeCall(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, allocatedStorage, dbInstanceClass, dbSubnetGroupName, dbSecurityGroups, vpcSecurityGroupIds, applyImmediately, masterUserPassword, dbParameterGroupName, backupRetentionPeriod, preferredBackupWindow, preferredMaintenanceWindow, multiAZ, engineVersion, allowMajorVersionUpgrade, autoMinorVersionUpgrade, licenseModel, iops, optionGroupName, newDBInstanceIdentifier, storageType, tdeCredentialArn, tdeCredentialPassword, caCertificateIdentifier, domain, copyTagsToSnapshot, monitoringInterval, dbPortNumber, publiclyAccessible, monitoringRoleArn, domainIAMRoleName, promotionTier, enableIAMDatabaseAuthentication, enablePerformanceInsights, performanceInsightsKMSKeyId, cloudwatchLogsExportConfiguration, deletionProtection, _callback);
        Type localVarReturnType = new TypeToken<ModifyDBInstanceResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETModifyDBParameterGroup
     * @param dbParameterGroupName &lt;p&gt;The name of the DB parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param parameters &lt;p&gt;An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.&lt;/p&gt; &lt;p&gt;Valid Values (for the application method): &lt;code&gt;immediate | pending-reboot&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyDBParameterGroupCall(String dbParameterGroupName, List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ModifyDBParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBParameterGroupName", dbParameterGroupName));
        }

        if (parameters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Parameters", parameters));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETModifyDBParameterGroupValidateBeforeCall(String dbParameterGroupName, List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbParameterGroupName' is set
        if (dbParameterGroupName == null) {
            throw new ApiException("Missing the required parameter 'dbParameterGroupName' when calling gETModifyDBParameterGroup(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling gETModifyDBParameterGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETModifyDBParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETModifyDBParameterGroup(Async)");
        }

        return gETModifyDBParameterGroupCall(dbParameterGroupName, parameters, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt;, &lt;code&gt;ParameterValue&lt;/code&gt;, and &lt;code&gt;ApplyMethod&lt;/code&gt;. A maximum of 20 parameters can be modified in a single request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the Amazon Neptune console or the &lt;i&gt;DescribeDBParameters&lt;/i&gt; command to verify that your DB parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     * @param dbParameterGroupName &lt;p&gt;The name of the DB parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param parameters &lt;p&gt;An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.&lt;/p&gt; &lt;p&gt;Valid Values (for the application method): &lt;code&gt;immediate | pending-reboot&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DBParameterGroupNameMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DBParameterGroupNameMessage gETModifyDBParameterGroup(String dbParameterGroupName, List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DBParameterGroupNameMessage> localVarResp = gETModifyDBParameterGroupWithHttpInfo(dbParameterGroupName, parameters, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt;, &lt;code&gt;ParameterValue&lt;/code&gt;, and &lt;code&gt;ApplyMethod&lt;/code&gt;. A maximum of 20 parameters can be modified in a single request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the Amazon Neptune console or the &lt;i&gt;DescribeDBParameters&lt;/i&gt; command to verify that your DB parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     * @param dbParameterGroupName &lt;p&gt;The name of the DB parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param parameters &lt;p&gt;An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.&lt;/p&gt; &lt;p&gt;Valid Values (for the application method): &lt;code&gt;immediate | pending-reboot&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DBParameterGroupNameMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBParameterGroupNameMessage> gETModifyDBParameterGroupWithHttpInfo(String dbParameterGroupName, List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETModifyDBParameterGroupValidateBeforeCall(dbParameterGroupName, parameters, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DBParameterGroupNameMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt;, &lt;code&gt;ParameterValue&lt;/code&gt;, and &lt;code&gt;ApplyMethod&lt;/code&gt;. A maximum of 20 parameters can be modified in a single request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the Amazon Neptune console or the &lt;i&gt;DescribeDBParameters&lt;/i&gt; command to verify that your DB parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     * @param dbParameterGroupName &lt;p&gt;The name of the DB parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param parameters &lt;p&gt;An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.&lt;/p&gt; &lt;p&gt;Valid Values (for the application method): &lt;code&gt;immediate | pending-reboot&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyDBParameterGroupAsync(String dbParameterGroupName, List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DBParameterGroupNameMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETModifyDBParameterGroupValidateBeforeCall(dbParameterGroupName, parameters, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DBParameterGroupNameMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETModifyDBSubnetGroup
     * @param dbSubnetGroupName &lt;p&gt;The name for the DB subnet group. This value is stored as a lowercase string. You can&#39;t modify the default subnet group.&lt;/p&gt; &lt;p&gt;Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param subnetIds The EC2 subnet IDs for the DB subnet group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbSubnetGroupDescription The description for the DB subnet group. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetAlreadyInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyDBSubnetGroupCall(String dbSubnetGroupName, List<String> subnetIds, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbSubnetGroupDescription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ModifyDBSubnetGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbSubnetGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBSubnetGroupName", dbSubnetGroupName));
        }

        if (dbSubnetGroupDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBSubnetGroupDescription", dbSubnetGroupDescription));
        }

        if (subnetIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "SubnetIds", subnetIds));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETModifyDBSubnetGroupValidateBeforeCall(String dbSubnetGroupName, List<String> subnetIds, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbSubnetGroupDescription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbSubnetGroupName' is set
        if (dbSubnetGroupName == null) {
            throw new ApiException("Missing the required parameter 'dbSubnetGroupName' when calling gETModifyDBSubnetGroup(Async)");
        }

        // verify the required parameter 'subnetIds' is set
        if (subnetIds == null) {
            throw new ApiException("Missing the required parameter 'subnetIds' when calling gETModifyDBSubnetGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETModifyDBSubnetGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETModifyDBSubnetGroup(Async)");
        }

        return gETModifyDBSubnetGroupCall(dbSubnetGroupName, subnetIds, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbSubnetGroupDescription, _callback);

    }

    /**
     * 
     * Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the Amazon Region.
     * @param dbSubnetGroupName &lt;p&gt;The name for the DB subnet group. This value is stored as a lowercase string. You can&#39;t modify the default subnet group.&lt;/p&gt; &lt;p&gt;Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param subnetIds The EC2 subnet IDs for the DB subnet group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbSubnetGroupDescription The description for the DB subnet group. (optional)
     * @return ModifyDBSubnetGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetAlreadyInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public ModifyDBSubnetGroupResult gETModifyDBSubnetGroup(String dbSubnetGroupName, List<String> subnetIds, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbSubnetGroupDescription) throws ApiException {
        ApiResponse<ModifyDBSubnetGroupResult> localVarResp = gETModifyDBSubnetGroupWithHttpInfo(dbSubnetGroupName, subnetIds, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbSubnetGroupDescription);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the Amazon Region.
     * @param dbSubnetGroupName &lt;p&gt;The name for the DB subnet group. This value is stored as a lowercase string. You can&#39;t modify the default subnet group.&lt;/p&gt; &lt;p&gt;Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param subnetIds The EC2 subnet IDs for the DB subnet group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbSubnetGroupDescription The description for the DB subnet group. (optional)
     * @return ApiResponse&lt;ModifyDBSubnetGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetAlreadyInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyDBSubnetGroupResult> gETModifyDBSubnetGroupWithHttpInfo(String dbSubnetGroupName, List<String> subnetIds, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbSubnetGroupDescription) throws ApiException {
        okhttp3.Call localVarCall = gETModifyDBSubnetGroupValidateBeforeCall(dbSubnetGroupName, subnetIds, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbSubnetGroupDescription, null);
        Type localVarReturnType = new TypeToken<ModifyDBSubnetGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the Amazon Region.
     * @param dbSubnetGroupName &lt;p&gt;The name for the DB subnet group. This value is stored as a lowercase string. You can&#39;t modify the default subnet group.&lt;/p&gt; &lt;p&gt;Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param subnetIds The EC2 subnet IDs for the DB subnet group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbSubnetGroupDescription The description for the DB subnet group. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetAlreadyInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyDBSubnetGroupAsync(String dbSubnetGroupName, List<String> subnetIds, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbSubnetGroupDescription, final ApiCallback<ModifyDBSubnetGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETModifyDBSubnetGroupValidateBeforeCall(dbSubnetGroupName, subnetIds, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbSubnetGroupDescription, _callback);
        Type localVarReturnType = new TypeToken<ModifyDBSubnetGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETModifyEventSubscription
     * @param subscriptionName The name of the event notification subscription. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param snsTopicArn The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it. (optional)
     * @param sourceType &lt;p&gt;The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.&lt;/p&gt; &lt;p&gt;Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot&lt;/p&gt; (optional)
     * @param eventCategories  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the &lt;b&gt;DescribeEventCategories&lt;/b&gt; action. (optional)
     * @param enabled  A Boolean value; set to &lt;b&gt;true&lt;/b&gt; to activate the subscription. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyEventSubscriptionCall(String subscriptionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String snsTopicArn, String sourceType, List<String> eventCategories, Boolean enabled, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ModifyEventSubscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subscriptionName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SubscriptionName", subscriptionName));
        }

        if (snsTopicArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SnsTopicArn", snsTopicArn));
        }

        if (sourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceType", sourceType));
        }

        if (eventCategories != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "EventCategories", eventCategories));
        }

        if (enabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Enabled", enabled));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETModifyEventSubscriptionValidateBeforeCall(String subscriptionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String snsTopicArn, String sourceType, List<String> eventCategories, Boolean enabled, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionName' is set
        if (subscriptionName == null) {
            throw new ApiException("Missing the required parameter 'subscriptionName' when calling gETModifyEventSubscription(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETModifyEventSubscription(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETModifyEventSubscription(Async)");
        }

        return gETModifyEventSubscriptionCall(subscriptionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, snsTopicArn, sourceType, eventCategories, enabled, _callback);

    }

    /**
     * 
     * &lt;p&gt;Modifies an existing event notification subscription. Note that you can&#39;t modify the source identifiers using this call; to change source identifiers for a subscription, use the &lt;a&gt;AddSourceIdentifierToSubscription&lt;/a&gt; and &lt;a&gt;RemoveSourceIdentifierFromSubscription&lt;/a&gt; calls.&lt;/p&gt; &lt;p&gt;You can see a list of the event categories for a given SourceType by using the &lt;b&gt;DescribeEventCategories&lt;/b&gt; action.&lt;/p&gt;
     * @param subscriptionName The name of the event notification subscription. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param snsTopicArn The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it. (optional)
     * @param sourceType &lt;p&gt;The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.&lt;/p&gt; &lt;p&gt;Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot&lt;/p&gt; (optional)
     * @param eventCategories  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the &lt;b&gt;DescribeEventCategories&lt;/b&gt; action. (optional)
     * @param enabled  A Boolean value; set to &lt;b&gt;true&lt;/b&gt; to activate the subscription. (optional)
     * @return ModifyEventSubscriptionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ModifyEventSubscriptionResult gETModifyEventSubscription(String subscriptionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String snsTopicArn, String sourceType, List<String> eventCategories, Boolean enabled) throws ApiException {
        ApiResponse<ModifyEventSubscriptionResult> localVarResp = gETModifyEventSubscriptionWithHttpInfo(subscriptionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, snsTopicArn, sourceType, eventCategories, enabled);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Modifies an existing event notification subscription. Note that you can&#39;t modify the source identifiers using this call; to change source identifiers for a subscription, use the &lt;a&gt;AddSourceIdentifierToSubscription&lt;/a&gt; and &lt;a&gt;RemoveSourceIdentifierFromSubscription&lt;/a&gt; calls.&lt;/p&gt; &lt;p&gt;You can see a list of the event categories for a given SourceType by using the &lt;b&gt;DescribeEventCategories&lt;/b&gt; action.&lt;/p&gt;
     * @param subscriptionName The name of the event notification subscription. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param snsTopicArn The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it. (optional)
     * @param sourceType &lt;p&gt;The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.&lt;/p&gt; &lt;p&gt;Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot&lt;/p&gt; (optional)
     * @param eventCategories  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the &lt;b&gt;DescribeEventCategories&lt;/b&gt; action. (optional)
     * @param enabled  A Boolean value; set to &lt;b&gt;true&lt;/b&gt; to activate the subscription. (optional)
     * @return ApiResponse&lt;ModifyEventSubscriptionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyEventSubscriptionResult> gETModifyEventSubscriptionWithHttpInfo(String subscriptionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String snsTopicArn, String sourceType, List<String> eventCategories, Boolean enabled) throws ApiException {
        okhttp3.Call localVarCall = gETModifyEventSubscriptionValidateBeforeCall(subscriptionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, snsTopicArn, sourceType, eventCategories, enabled, null);
        Type localVarReturnType = new TypeToken<ModifyEventSubscriptionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Modifies an existing event notification subscription. Note that you can&#39;t modify the source identifiers using this call; to change source identifiers for a subscription, use the &lt;a&gt;AddSourceIdentifierToSubscription&lt;/a&gt; and &lt;a&gt;RemoveSourceIdentifierFromSubscription&lt;/a&gt; calls.&lt;/p&gt; &lt;p&gt;You can see a list of the event categories for a given SourceType by using the &lt;b&gt;DescribeEventCategories&lt;/b&gt; action.&lt;/p&gt;
     * @param subscriptionName The name of the event notification subscription. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param snsTopicArn The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it. (optional)
     * @param sourceType &lt;p&gt;The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.&lt;/p&gt; &lt;p&gt;Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot&lt;/p&gt; (optional)
     * @param eventCategories  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the &lt;b&gt;DescribeEventCategories&lt;/b&gt; action. (optional)
     * @param enabled  A Boolean value; set to &lt;b&gt;true&lt;/b&gt; to activate the subscription. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyEventSubscriptionAsync(String subscriptionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String snsTopicArn, String sourceType, List<String> eventCategories, Boolean enabled, final ApiCallback<ModifyEventSubscriptionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETModifyEventSubscriptionValidateBeforeCall(subscriptionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, snsTopicArn, sourceType, eventCategories, enabled, _callback);
        Type localVarReturnType = new TypeToken<ModifyEventSubscriptionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETModifyGlobalCluster
     * @param globalClusterIdentifier &lt;p&gt;The DB cluster identifier for the global cluster being modified. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints: Must match the identifier of an existing global database cluster.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param newGlobalClusterIdentifier &lt;p&gt;A new cluster identifier to assign to the global database. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Can&#39;t end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster2&lt;/code&gt; &lt;/p&gt; (optional)
     * @param deletionProtection Indicates whether the global database has deletion protection enabled. The global database cannot be deleted when deletion protection is enabled. (optional)
     * @param engineVersion &lt;p&gt;The version number of the database engine to which you want to upgrade. Changing this parameter will result in an outage. The change is applied during the next maintenance window unless &lt;code&gt;ApplyImmediately&lt;/code&gt; is enabled.&lt;/p&gt; &lt;p&gt;To list all of the available Neptune engine versions, use the following command:&lt;/p&gt; (optional)
     * @param allowMajorVersionUpgrade &lt;p&gt;A value that indicates whether major version upgrades are allowed.&lt;/p&gt; &lt;p&gt;Constraints: You must allow major version upgrades if you specify a value for the &lt;code&gt;EngineVersion&lt;/code&gt; parameter that is a different major version than the DB cluster&#39;s current version.&lt;/p&gt; &lt;p&gt;If you upgrade the major version of a global database, the cluster and DB instance parameter groups are set to the default parameter groups for the new version, so you will need to apply any custom parameter groups after completing the upgrade.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyGlobalClusterCall(String globalClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String newGlobalClusterIdentifier, Boolean deletionProtection, String engineVersion, Boolean allowMajorVersionUpgrade, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ModifyGlobalCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (globalClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GlobalClusterIdentifier", globalClusterIdentifier));
        }

        if (newGlobalClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NewGlobalClusterIdentifier", newGlobalClusterIdentifier));
        }

        if (deletionProtection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DeletionProtection", deletionProtection));
        }

        if (engineVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EngineVersion", engineVersion));
        }

        if (allowMajorVersionUpgrade != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AllowMajorVersionUpgrade", allowMajorVersionUpgrade));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETModifyGlobalClusterValidateBeforeCall(String globalClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String newGlobalClusterIdentifier, Boolean deletionProtection, String engineVersion, Boolean allowMajorVersionUpgrade, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'globalClusterIdentifier' is set
        if (globalClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'globalClusterIdentifier' when calling gETModifyGlobalCluster(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETModifyGlobalCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETModifyGlobalCluster(Async)");
        }

        return gETModifyGlobalClusterCall(globalClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, newGlobalClusterIdentifier, deletionProtection, engineVersion, allowMajorVersionUpgrade, _callback);

    }

    /**
     * 
     * Modify a setting for an Amazon Neptune global cluster. You can change one or more database configuration parameters by specifying these parameters and their new values in the request.
     * @param globalClusterIdentifier &lt;p&gt;The DB cluster identifier for the global cluster being modified. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints: Must match the identifier of an existing global database cluster.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param newGlobalClusterIdentifier &lt;p&gt;A new cluster identifier to assign to the global database. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Can&#39;t end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster2&lt;/code&gt; &lt;/p&gt; (optional)
     * @param deletionProtection Indicates whether the global database has deletion protection enabled. The global database cannot be deleted when deletion protection is enabled. (optional)
     * @param engineVersion &lt;p&gt;The version number of the database engine to which you want to upgrade. Changing this parameter will result in an outage. The change is applied during the next maintenance window unless &lt;code&gt;ApplyImmediately&lt;/code&gt; is enabled.&lt;/p&gt; &lt;p&gt;To list all of the available Neptune engine versions, use the following command:&lt;/p&gt; (optional)
     * @param allowMajorVersionUpgrade &lt;p&gt;A value that indicates whether major version upgrades are allowed.&lt;/p&gt; &lt;p&gt;Constraints: You must allow major version upgrades if you specify a value for the &lt;code&gt;EngineVersion&lt;/code&gt; parameter that is a different major version than the DB cluster&#39;s current version.&lt;/p&gt; &lt;p&gt;If you upgrade the major version of a global database, the cluster and DB instance parameter groups are set to the default parameter groups for the new version, so you will need to apply any custom parameter groups after completing the upgrade.&lt;/p&gt; (optional)
     * @return ModifyGlobalClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ModifyGlobalClusterResult gETModifyGlobalCluster(String globalClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String newGlobalClusterIdentifier, Boolean deletionProtection, String engineVersion, Boolean allowMajorVersionUpgrade) throws ApiException {
        ApiResponse<ModifyGlobalClusterResult> localVarResp = gETModifyGlobalClusterWithHttpInfo(globalClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, newGlobalClusterIdentifier, deletionProtection, engineVersion, allowMajorVersionUpgrade);
        return localVarResp.getData();
    }

    /**
     * 
     * Modify a setting for an Amazon Neptune global cluster. You can change one or more database configuration parameters by specifying these parameters and their new values in the request.
     * @param globalClusterIdentifier &lt;p&gt;The DB cluster identifier for the global cluster being modified. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints: Must match the identifier of an existing global database cluster.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param newGlobalClusterIdentifier &lt;p&gt;A new cluster identifier to assign to the global database. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Can&#39;t end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster2&lt;/code&gt; &lt;/p&gt; (optional)
     * @param deletionProtection Indicates whether the global database has deletion protection enabled. The global database cannot be deleted when deletion protection is enabled. (optional)
     * @param engineVersion &lt;p&gt;The version number of the database engine to which you want to upgrade. Changing this parameter will result in an outage. The change is applied during the next maintenance window unless &lt;code&gt;ApplyImmediately&lt;/code&gt; is enabled.&lt;/p&gt; &lt;p&gt;To list all of the available Neptune engine versions, use the following command:&lt;/p&gt; (optional)
     * @param allowMajorVersionUpgrade &lt;p&gt;A value that indicates whether major version upgrades are allowed.&lt;/p&gt; &lt;p&gt;Constraints: You must allow major version upgrades if you specify a value for the &lt;code&gt;EngineVersion&lt;/code&gt; parameter that is a different major version than the DB cluster&#39;s current version.&lt;/p&gt; &lt;p&gt;If you upgrade the major version of a global database, the cluster and DB instance parameter groups are set to the default parameter groups for the new version, so you will need to apply any custom parameter groups after completing the upgrade.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;ModifyGlobalClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyGlobalClusterResult> gETModifyGlobalClusterWithHttpInfo(String globalClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String newGlobalClusterIdentifier, Boolean deletionProtection, String engineVersion, Boolean allowMajorVersionUpgrade) throws ApiException {
        okhttp3.Call localVarCall = gETModifyGlobalClusterValidateBeforeCall(globalClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, newGlobalClusterIdentifier, deletionProtection, engineVersion, allowMajorVersionUpgrade, null);
        Type localVarReturnType = new TypeToken<ModifyGlobalClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modify a setting for an Amazon Neptune global cluster. You can change one or more database configuration parameters by specifying these parameters and their new values in the request.
     * @param globalClusterIdentifier &lt;p&gt;The DB cluster identifier for the global cluster being modified. This parameter is not case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints: Must match the identifier of an existing global database cluster.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param newGlobalClusterIdentifier &lt;p&gt;A new cluster identifier to assign to the global database. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Can&#39;t end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster2&lt;/code&gt; &lt;/p&gt; (optional)
     * @param deletionProtection Indicates whether the global database has deletion protection enabled. The global database cannot be deleted when deletion protection is enabled. (optional)
     * @param engineVersion &lt;p&gt;The version number of the database engine to which you want to upgrade. Changing this parameter will result in an outage. The change is applied during the next maintenance window unless &lt;code&gt;ApplyImmediately&lt;/code&gt; is enabled.&lt;/p&gt; &lt;p&gt;To list all of the available Neptune engine versions, use the following command:&lt;/p&gt; (optional)
     * @param allowMajorVersionUpgrade &lt;p&gt;A value that indicates whether major version upgrades are allowed.&lt;/p&gt; &lt;p&gt;Constraints: You must allow major version upgrades if you specify a value for the &lt;code&gt;EngineVersion&lt;/code&gt; parameter that is a different major version than the DB cluster&#39;s current version.&lt;/p&gt; &lt;p&gt;If you upgrade the major version of a global database, the cluster and DB instance parameter groups are set to the default parameter groups for the new version, so you will need to apply any custom parameter groups after completing the upgrade.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyGlobalClusterAsync(String globalClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String newGlobalClusterIdentifier, Boolean deletionProtection, String engineVersion, Boolean allowMajorVersionUpgrade, final ApiCallback<ModifyGlobalClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETModifyGlobalClusterValidateBeforeCall(globalClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, newGlobalClusterIdentifier, deletionProtection, engineVersion, allowMajorVersionUpgrade, _callback);
        Type localVarReturnType = new TypeToken<ModifyGlobalClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETPromoteReadReplicaDBCluster
     * @param dbClusterIdentifier Not supported. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPromoteReadReplicaDBClusterCall(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=PromoteReadReplicaDBCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterIdentifier", dbClusterIdentifier));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETPromoteReadReplicaDBClusterValidateBeforeCall(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterIdentifier' is set
        if (dbClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterIdentifier' when calling gETPromoteReadReplicaDBCluster(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETPromoteReadReplicaDBCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETPromoteReadReplicaDBCluster(Async)");
        }

        return gETPromoteReadReplicaDBClusterCall(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Not supported.
     * @param dbClusterIdentifier Not supported. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PromoteReadReplicaDBClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public PromoteReadReplicaDBClusterResult gETPromoteReadReplicaDBCluster(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PromoteReadReplicaDBClusterResult> localVarResp = gETPromoteReadReplicaDBClusterWithHttpInfo(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Not supported.
     * @param dbClusterIdentifier Not supported. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PromoteReadReplicaDBClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PromoteReadReplicaDBClusterResult> gETPromoteReadReplicaDBClusterWithHttpInfo(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETPromoteReadReplicaDBClusterValidateBeforeCall(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PromoteReadReplicaDBClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Not supported.
     * @param dbClusterIdentifier Not supported. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPromoteReadReplicaDBClusterAsync(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PromoteReadReplicaDBClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETPromoteReadReplicaDBClusterValidateBeforeCall(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PromoteReadReplicaDBClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRebootDBInstance
     * @param dbInstanceIdentifier &lt;p&gt;The DB instance identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing DBInstance.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param forceFailover &lt;p&gt; When &lt;code&gt;true&lt;/code&gt;, the reboot is conducted through a MultiAZ failover.&lt;/p&gt; &lt;p&gt;Constraint: You can&#39;t specify &lt;code&gt;true&lt;/code&gt; if the instance is not configured for MultiAZ.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRebootDBInstanceCall(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean forceFailover, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RebootDBInstance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbInstanceIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBInstanceIdentifier", dbInstanceIdentifier));
        }

        if (forceFailover != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ForceFailover", forceFailover));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRebootDBInstanceValidateBeforeCall(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean forceFailover, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbInstanceIdentifier' is set
        if (dbInstanceIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbInstanceIdentifier' when calling gETRebootDBInstance(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRebootDBInstance(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRebootDBInstance(Async)");
        }

        return gETRebootDBInstanceCall(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, forceFailover, _callback);

    }

    /**
     * 
     * &lt;p&gt;You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.&lt;/p&gt; &lt;p&gt;Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.&lt;/p&gt;
     * @param dbInstanceIdentifier &lt;p&gt;The DB instance identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing DBInstance.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param forceFailover &lt;p&gt; When &lt;code&gt;true&lt;/code&gt;, the reboot is conducted through a MultiAZ failover.&lt;/p&gt; &lt;p&gt;Constraint: You can&#39;t specify &lt;code&gt;true&lt;/code&gt; if the instance is not configured for MultiAZ.&lt;/p&gt; (optional)
     * @return RebootDBInstanceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public RebootDBInstanceResult gETRebootDBInstance(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean forceFailover) throws ApiException {
        ApiResponse<RebootDBInstanceResult> localVarResp = gETRebootDBInstanceWithHttpInfo(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, forceFailover);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.&lt;/p&gt; &lt;p&gt;Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.&lt;/p&gt;
     * @param dbInstanceIdentifier &lt;p&gt;The DB instance identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing DBInstance.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param forceFailover &lt;p&gt; When &lt;code&gt;true&lt;/code&gt;, the reboot is conducted through a MultiAZ failover.&lt;/p&gt; &lt;p&gt;Constraint: You can&#39;t specify &lt;code&gt;true&lt;/code&gt; if the instance is not configured for MultiAZ.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;RebootDBInstanceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RebootDBInstanceResult> gETRebootDBInstanceWithHttpInfo(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean forceFailover) throws ApiException {
        okhttp3.Call localVarCall = gETRebootDBInstanceValidateBeforeCall(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, forceFailover, null);
        Type localVarReturnType = new TypeToken<RebootDBInstanceResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.&lt;/p&gt; &lt;p&gt;Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.&lt;/p&gt;
     * @param dbInstanceIdentifier &lt;p&gt;The DB instance identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing DBInstance.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param forceFailover &lt;p&gt; When &lt;code&gt;true&lt;/code&gt;, the reboot is conducted through a MultiAZ failover.&lt;/p&gt; &lt;p&gt;Constraint: You can&#39;t specify &lt;code&gt;true&lt;/code&gt; if the instance is not configured for MultiAZ.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRebootDBInstanceAsync(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean forceFailover, final ApiCallback<RebootDBInstanceResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRebootDBInstanceValidateBeforeCall(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, forceFailover, _callback);
        Type localVarReturnType = new TypeToken<RebootDBInstanceResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRemoveFromGlobalCluster
     * @param globalClusterIdentifier The identifier of the Neptune global database from which to detach the specified Neptune DB cluster. (required)
     * @param dbClusterIdentifier The Amazon Resource Name (ARN) identifying the cluster to be detached from the Neptune global database cluster. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRemoveFromGlobalClusterCall(String globalClusterIdentifier, String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RemoveFromGlobalCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (globalClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GlobalClusterIdentifier", globalClusterIdentifier));
        }

        if (dbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DbClusterIdentifier", dbClusterIdentifier));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRemoveFromGlobalClusterValidateBeforeCall(String globalClusterIdentifier, String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'globalClusterIdentifier' is set
        if (globalClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'globalClusterIdentifier' when calling gETRemoveFromGlobalCluster(Async)");
        }

        // verify the required parameter 'dbClusterIdentifier' is set
        if (dbClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterIdentifier' when calling gETRemoveFromGlobalCluster(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRemoveFromGlobalCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRemoveFromGlobalCluster(Async)");
        }

        return gETRemoveFromGlobalClusterCall(globalClusterIdentifier, dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Detaches a Neptune DB cluster from a Neptune global database. A secondary cluster becomes a normal standalone cluster with read-write capability instead of being read-only, and no longer receives data from a the primary cluster.
     * @param globalClusterIdentifier The identifier of the Neptune global database from which to detach the specified Neptune DB cluster. (required)
     * @param dbClusterIdentifier The Amazon Resource Name (ARN) identifying the cluster to be detached from the Neptune global database cluster. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return RemoveFromGlobalClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFromGlobalClusterResult gETRemoveFromGlobalCluster(String globalClusterIdentifier, String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<RemoveFromGlobalClusterResult> localVarResp = gETRemoveFromGlobalClusterWithHttpInfo(globalClusterIdentifier, dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Detaches a Neptune DB cluster from a Neptune global database. A secondary cluster becomes a normal standalone cluster with read-write capability instead of being read-only, and no longer receives data from a the primary cluster.
     * @param globalClusterIdentifier The identifier of the Neptune global database from which to detach the specified Neptune DB cluster. (required)
     * @param dbClusterIdentifier The Amazon Resource Name (ARN) identifying the cluster to be detached from the Neptune global database cluster. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;RemoveFromGlobalClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemoveFromGlobalClusterResult> gETRemoveFromGlobalClusterWithHttpInfo(String globalClusterIdentifier, String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETRemoveFromGlobalClusterValidateBeforeCall(globalClusterIdentifier, dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<RemoveFromGlobalClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Detaches a Neptune DB cluster from a Neptune global database. A secondary cluster becomes a normal standalone cluster with read-write capability instead of being read-only, and no longer receives data from a the primary cluster.
     * @param globalClusterIdentifier The identifier of the Neptune global database from which to detach the specified Neptune DB cluster. (required)
     * @param dbClusterIdentifier The Amazon Resource Name (ARN) identifying the cluster to be detached from the Neptune global database cluster. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRemoveFromGlobalClusterAsync(String globalClusterIdentifier, String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<RemoveFromGlobalClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRemoveFromGlobalClusterValidateBeforeCall(globalClusterIdentifier, dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<RemoveFromGlobalClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRemoveRoleFromDBCluster
     * @param dbClusterIdentifier The name of the DB cluster to disassociate the IAM role from. (required)
     * @param roleArn The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB cluster, for example &lt;code&gt;arn:aws:iam::123456789012:role/NeptuneAccessRole&lt;/code&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param featureName The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/userguide/api-other-apis.html#DescribeDBEngineVersions\&quot;&gt;DescribeDBEngineVersions&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRemoveRoleFromDBClusterCall(String dbClusterIdentifier, String roleArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String featureName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RemoveRoleFromDBCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterIdentifier", dbClusterIdentifier));
        }

        if (roleArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RoleArn", roleArn));
        }

        if (featureName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FeatureName", featureName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRemoveRoleFromDBClusterValidateBeforeCall(String dbClusterIdentifier, String roleArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String featureName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterIdentifier' is set
        if (dbClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterIdentifier' when calling gETRemoveRoleFromDBCluster(Async)");
        }

        // verify the required parameter 'roleArn' is set
        if (roleArn == null) {
            throw new ApiException("Missing the required parameter 'roleArn' when calling gETRemoveRoleFromDBCluster(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRemoveRoleFromDBCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRemoveRoleFromDBCluster(Async)");
        }

        return gETRemoveRoleFromDBClusterCall(dbClusterIdentifier, roleArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, featureName, _callback);

    }

    /**
     * 
     * Disassociates an Identity and Access Management (IAM) role from a DB cluster.
     * @param dbClusterIdentifier The name of the DB cluster to disassociate the IAM role from. (required)
     * @param roleArn The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB cluster, for example &lt;code&gt;arn:aws:iam::123456789012:role/NeptuneAccessRole&lt;/code&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param featureName The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/userguide/api-other-apis.html#DescribeDBEngineVersions\&quot;&gt;DescribeDBEngineVersions&lt;/a&gt;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public void gETRemoveRoleFromDBCluster(String dbClusterIdentifier, String roleArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String featureName) throws ApiException {
        gETRemoveRoleFromDBClusterWithHttpInfo(dbClusterIdentifier, roleArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, featureName);
    }

    /**
     * 
     * Disassociates an Identity and Access Management (IAM) role from a DB cluster.
     * @param dbClusterIdentifier The name of the DB cluster to disassociate the IAM role from. (required)
     * @param roleArn The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB cluster, for example &lt;code&gt;arn:aws:iam::123456789012:role/NeptuneAccessRole&lt;/code&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param featureName The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/userguide/api-other-apis.html#DescribeDBEngineVersions\&quot;&gt;DescribeDBEngineVersions&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETRemoveRoleFromDBClusterWithHttpInfo(String dbClusterIdentifier, String roleArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String featureName) throws ApiException {
        okhttp3.Call localVarCall = gETRemoveRoleFromDBClusterValidateBeforeCall(dbClusterIdentifier, roleArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, featureName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Disassociates an Identity and Access Management (IAM) role from a DB cluster.
     * @param dbClusterIdentifier The name of the DB cluster to disassociate the IAM role from. (required)
     * @param roleArn The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB cluster, for example &lt;code&gt;arn:aws:iam::123456789012:role/NeptuneAccessRole&lt;/code&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param featureName The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/userguide/api-other-apis.html#DescribeDBEngineVersions\&quot;&gt;DescribeDBEngineVersions&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRemoveRoleFromDBClusterAsync(String dbClusterIdentifier, String roleArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String featureName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRemoveRoleFromDBClusterValidateBeforeCall(dbClusterIdentifier, roleArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, featureName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRemoveSourceIdentifierFromSubscription
     * @param subscriptionName The name of the event notification subscription you want to remove a source identifier from. (required)
     * @param sourceIdentifier  The source identifier to be removed from the subscription, such as the &lt;b&gt;DB instance identifier&lt;/b&gt; for a DB instance or the name of a security group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRemoveSourceIdentifierFromSubscriptionCall(String subscriptionName, String sourceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RemoveSourceIdentifierFromSubscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subscriptionName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SubscriptionName", subscriptionName));
        }

        if (sourceIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceIdentifier", sourceIdentifier));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRemoveSourceIdentifierFromSubscriptionValidateBeforeCall(String subscriptionName, String sourceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionName' is set
        if (subscriptionName == null) {
            throw new ApiException("Missing the required parameter 'subscriptionName' when calling gETRemoveSourceIdentifierFromSubscription(Async)");
        }

        // verify the required parameter 'sourceIdentifier' is set
        if (sourceIdentifier == null) {
            throw new ApiException("Missing the required parameter 'sourceIdentifier' when calling gETRemoveSourceIdentifierFromSubscription(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRemoveSourceIdentifierFromSubscription(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRemoveSourceIdentifierFromSubscription(Async)");
        }

        return gETRemoveSourceIdentifierFromSubscriptionCall(subscriptionName, sourceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Removes a source identifier from an existing event notification subscription.
     * @param subscriptionName The name of the event notification subscription you want to remove a source identifier from. (required)
     * @param sourceIdentifier  The source identifier to be removed from the subscription, such as the &lt;b&gt;DB instance identifier&lt;/b&gt; for a DB instance or the name of a security group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return RemoveSourceIdentifierFromSubscriptionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public RemoveSourceIdentifierFromSubscriptionResult gETRemoveSourceIdentifierFromSubscription(String subscriptionName, String sourceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<RemoveSourceIdentifierFromSubscriptionResult> localVarResp = gETRemoveSourceIdentifierFromSubscriptionWithHttpInfo(subscriptionName, sourceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes a source identifier from an existing event notification subscription.
     * @param subscriptionName The name of the event notification subscription you want to remove a source identifier from. (required)
     * @param sourceIdentifier  The source identifier to be removed from the subscription, such as the &lt;b&gt;DB instance identifier&lt;/b&gt; for a DB instance or the name of a security group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;RemoveSourceIdentifierFromSubscriptionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemoveSourceIdentifierFromSubscriptionResult> gETRemoveSourceIdentifierFromSubscriptionWithHttpInfo(String subscriptionName, String sourceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETRemoveSourceIdentifierFromSubscriptionValidateBeforeCall(subscriptionName, sourceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<RemoveSourceIdentifierFromSubscriptionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes a source identifier from an existing event notification subscription.
     * @param subscriptionName The name of the event notification subscription you want to remove a source identifier from. (required)
     * @param sourceIdentifier  The source identifier to be removed from the subscription, such as the &lt;b&gt;DB instance identifier&lt;/b&gt; for a DB instance or the name of a security group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRemoveSourceIdentifierFromSubscriptionAsync(String subscriptionName, String sourceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<RemoveSourceIdentifierFromSubscriptionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRemoveSourceIdentifierFromSubscriptionValidateBeforeCall(subscriptionName, sourceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<RemoveSourceIdentifierFromSubscriptionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRemoveTagsFromResource
     * @param resourceName The Amazon Neptune resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing\&quot;&gt; Constructing an Amazon Resource Name (ARN)&lt;/a&gt;. (required)
     * @param tagKeys The tag key (name) of the tag to be removed. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRemoveTagsFromResourceCall(String resourceName, List<String> tagKeys, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RemoveTagsFromResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResourceName", resourceName));
        }

        if (tagKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "TagKeys", tagKeys));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRemoveTagsFromResourceValidateBeforeCall(String resourceName, List<String> tagKeys, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling gETRemoveTagsFromResource(Async)");
        }

        // verify the required parameter 'tagKeys' is set
        if (tagKeys == null) {
            throw new ApiException("Missing the required parameter 'tagKeys' when calling gETRemoveTagsFromResource(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRemoveTagsFromResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRemoveTagsFromResource(Async)");
        }

        return gETRemoveTagsFromResourceCall(resourceName, tagKeys, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Removes metadata tags from an Amazon Neptune resource.
     * @param resourceName The Amazon Neptune resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing\&quot;&gt; Constructing an Amazon Resource Name (ARN)&lt;/a&gt;. (required)
     * @param tagKeys The tag key (name) of the tag to be removed. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public void gETRemoveTagsFromResource(String resourceName, List<String> tagKeys, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETRemoveTagsFromResourceWithHttpInfo(resourceName, tagKeys, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Removes metadata tags from an Amazon Neptune resource.
     * @param resourceName The Amazon Neptune resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing\&quot;&gt; Constructing an Amazon Resource Name (ARN)&lt;/a&gt;. (required)
     * @param tagKeys The tag key (name) of the tag to be removed. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETRemoveTagsFromResourceWithHttpInfo(String resourceName, List<String> tagKeys, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETRemoveTagsFromResourceValidateBeforeCall(resourceName, tagKeys, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Removes metadata tags from an Amazon Neptune resource.
     * @param resourceName The Amazon Neptune resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing\&quot;&gt; Constructing an Amazon Resource Name (ARN)&lt;/a&gt;. (required)
     * @param tagKeys The tag key (name) of the tag to be removed. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRemoveTagsFromResourceAsync(String resourceName, List<String> tagKeys, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRemoveTagsFromResourceValidateBeforeCall(resourceName, tagKeys, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETResetDBClusterParameterGroup
     * @param dbClusterParameterGroupName The name of the DB cluster parameter group to reset. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetAllParameters A value that is set to &lt;code&gt;true&lt;/code&gt; to reset all parameters in the DB cluster parameter group to their default values, and &lt;code&gt;false&lt;/code&gt; otherwise. You can&#39;t use this parameter if there is a list of parameter names specified for the &lt;code&gt;Parameters&lt;/code&gt; parameter. (optional)
     * @param parameters A list of parameter names in the DB cluster parameter group to reset to the default values. You can&#39;t use this parameter if the &lt;code&gt;ResetAllParameters&lt;/code&gt; parameter is set to &lt;code&gt;true&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETResetDBClusterParameterGroupCall(String dbClusterParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean resetAllParameters, List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ResetDBClusterParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterParameterGroupName", dbClusterParameterGroupName));
        }

        if (resetAllParameters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResetAllParameters", resetAllParameters));
        }

        if (parameters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Parameters", parameters));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETResetDBClusterParameterGroupValidateBeforeCall(String dbClusterParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean resetAllParameters, List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterParameterGroupName' is set
        if (dbClusterParameterGroupName == null) {
            throw new ApiException("Missing the required parameter 'dbClusterParameterGroupName' when calling gETResetDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETResetDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETResetDBClusterParameterGroup(Async)");
        }

        return gETResetDBClusterParameterGroupCall(dbClusterParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetAllParameters, parameters, _callback);

    }

    /**
     * 
     * &lt;p&gt; Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt; and &lt;code&gt;ApplyMethod&lt;/code&gt;. To reset the entire DB cluster parameter group, specify the &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; and &lt;code&gt;ResetAllParameters&lt;/code&gt; parameters.&lt;/p&gt; &lt;p&gt; When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to &lt;code&gt;pending-reboot&lt;/code&gt; to take effect on the next DB instance restart or &lt;a&gt;RebootDBInstance&lt;/a&gt; request. You must call &lt;a&gt;RebootDBInstance&lt;/a&gt; for every DB instance in your DB cluster that you want the updated static parameter to apply to.&lt;/p&gt;
     * @param dbClusterParameterGroupName The name of the DB cluster parameter group to reset. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetAllParameters A value that is set to &lt;code&gt;true&lt;/code&gt; to reset all parameters in the DB cluster parameter group to their default values, and &lt;code&gt;false&lt;/code&gt; otherwise. You can&#39;t use this parameter if there is a list of parameter names specified for the &lt;code&gt;Parameters&lt;/code&gt; parameter. (optional)
     * @param parameters A list of parameter names in the DB cluster parameter group to reset to the default values. You can&#39;t use this parameter if the &lt;code&gt;ResetAllParameters&lt;/code&gt; parameter is set to &lt;code&gt;true&lt;/code&gt;. (optional)
     * @return DBClusterParameterGroupNameMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBClusterParameterGroupNameMessage gETResetDBClusterParameterGroup(String dbClusterParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean resetAllParameters, List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters) throws ApiException {
        ApiResponse<DBClusterParameterGroupNameMessage> localVarResp = gETResetDBClusterParameterGroupWithHttpInfo(dbClusterParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetAllParameters, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt; and &lt;code&gt;ApplyMethod&lt;/code&gt;. To reset the entire DB cluster parameter group, specify the &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; and &lt;code&gt;ResetAllParameters&lt;/code&gt; parameters.&lt;/p&gt; &lt;p&gt; When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to &lt;code&gt;pending-reboot&lt;/code&gt; to take effect on the next DB instance restart or &lt;a&gt;RebootDBInstance&lt;/a&gt; request. You must call &lt;a&gt;RebootDBInstance&lt;/a&gt; for every DB instance in your DB cluster that you want the updated static parameter to apply to.&lt;/p&gt;
     * @param dbClusterParameterGroupName The name of the DB cluster parameter group to reset. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetAllParameters A value that is set to &lt;code&gt;true&lt;/code&gt; to reset all parameters in the DB cluster parameter group to their default values, and &lt;code&gt;false&lt;/code&gt; otherwise. You can&#39;t use this parameter if there is a list of parameter names specified for the &lt;code&gt;Parameters&lt;/code&gt; parameter. (optional)
     * @param parameters A list of parameter names in the DB cluster parameter group to reset to the default values. You can&#39;t use this parameter if the &lt;code&gt;ResetAllParameters&lt;/code&gt; parameter is set to &lt;code&gt;true&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;DBClusterParameterGroupNameMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBClusterParameterGroupNameMessage> gETResetDBClusterParameterGroupWithHttpInfo(String dbClusterParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean resetAllParameters, List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters) throws ApiException {
        okhttp3.Call localVarCall = gETResetDBClusterParameterGroupValidateBeforeCall(dbClusterParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetAllParameters, parameters, null);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupNameMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt; and &lt;code&gt;ApplyMethod&lt;/code&gt;. To reset the entire DB cluster parameter group, specify the &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; and &lt;code&gt;ResetAllParameters&lt;/code&gt; parameters.&lt;/p&gt; &lt;p&gt; When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to &lt;code&gt;pending-reboot&lt;/code&gt; to take effect on the next DB instance restart or &lt;a&gt;RebootDBInstance&lt;/a&gt; request. You must call &lt;a&gt;RebootDBInstance&lt;/a&gt; for every DB instance in your DB cluster that you want the updated static parameter to apply to.&lt;/p&gt;
     * @param dbClusterParameterGroupName The name of the DB cluster parameter group to reset. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetAllParameters A value that is set to &lt;code&gt;true&lt;/code&gt; to reset all parameters in the DB cluster parameter group to their default values, and &lt;code&gt;false&lt;/code&gt; otherwise. You can&#39;t use this parameter if there is a list of parameter names specified for the &lt;code&gt;Parameters&lt;/code&gt; parameter. (optional)
     * @param parameters A list of parameter names in the DB cluster parameter group to reset to the default values. You can&#39;t use this parameter if the &lt;code&gt;ResetAllParameters&lt;/code&gt; parameter is set to &lt;code&gt;true&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETResetDBClusterParameterGroupAsync(String dbClusterParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean resetAllParameters, List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters, final ApiCallback<DBClusterParameterGroupNameMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETResetDBClusterParameterGroupValidateBeforeCall(dbClusterParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetAllParameters, parameters, _callback);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupNameMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETResetDBParameterGroup
     * @param dbParameterGroupName &lt;p&gt;The name of the DB parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the name of an existing DBParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetAllParameters &lt;p&gt;Specifies whether (&lt;code&gt;true&lt;/code&gt;) or not (&lt;code&gt;false&lt;/code&gt;) to reset all parameters in the DB parameter group to default values.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;true&lt;/code&gt; &lt;/p&gt; (optional)
     * @param parameters &lt;p&gt;To reset the entire DB parameter group, specify the &lt;code&gt;DBParameterGroup&lt;/code&gt; name and &lt;code&gt;ResetAllParameters&lt;/code&gt; parameters. To reset specific parameters, provide a list of the following: &lt;code&gt;ParameterName&lt;/code&gt; and &lt;code&gt;ApplyMethod&lt;/code&gt;. A maximum of 20 parameters can be modified in a single request.&lt;/p&gt; &lt;p&gt;Valid Values (for Apply method): &lt;code&gt;pending-reboot&lt;/code&gt; &lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETResetDBParameterGroupCall(String dbParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean resetAllParameters, List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ResetDBParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBParameterGroupName", dbParameterGroupName));
        }

        if (resetAllParameters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResetAllParameters", resetAllParameters));
        }

        if (parameters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Parameters", parameters));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETResetDBParameterGroupValidateBeforeCall(String dbParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean resetAllParameters, List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbParameterGroupName' is set
        if (dbParameterGroupName == null) {
            throw new ApiException("Missing the required parameter 'dbParameterGroupName' when calling gETResetDBParameterGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETResetDBParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETResetDBParameterGroup(Async)");
        }

        return gETResetDBParameterGroupCall(dbParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetAllParameters, parameters, _callback);

    }

    /**
     * 
     * Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: &lt;code&gt;ParameterName&lt;/code&gt; and &lt;code&gt;ApplyMethod&lt;/code&gt;. To reset the entire DB parameter group, specify the &lt;code&gt;DBParameterGroup&lt;/code&gt; name and &lt;code&gt;ResetAllParameters&lt;/code&gt; parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to &lt;code&gt;pending-reboot&lt;/code&gt; to take effect on the next DB instance restart or &lt;code&gt;RebootDBInstance&lt;/code&gt; request.
     * @param dbParameterGroupName &lt;p&gt;The name of the DB parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the name of an existing DBParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetAllParameters &lt;p&gt;Specifies whether (&lt;code&gt;true&lt;/code&gt;) or not (&lt;code&gt;false&lt;/code&gt;) to reset all parameters in the DB parameter group to default values.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;true&lt;/code&gt; &lt;/p&gt; (optional)
     * @param parameters &lt;p&gt;To reset the entire DB parameter group, specify the &lt;code&gt;DBParameterGroup&lt;/code&gt; name and &lt;code&gt;ResetAllParameters&lt;/code&gt; parameters. To reset specific parameters, provide a list of the following: &lt;code&gt;ParameterName&lt;/code&gt; and &lt;code&gt;ApplyMethod&lt;/code&gt;. A maximum of 20 parameters can be modified in a single request.&lt;/p&gt; &lt;p&gt;Valid Values (for Apply method): &lt;code&gt;pending-reboot&lt;/code&gt; &lt;/p&gt; (optional)
     * @return DBParameterGroupNameMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBParameterGroupNameMessage gETResetDBParameterGroup(String dbParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean resetAllParameters, List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters) throws ApiException {
        ApiResponse<DBParameterGroupNameMessage> localVarResp = gETResetDBParameterGroupWithHttpInfo(dbParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetAllParameters, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: &lt;code&gt;ParameterName&lt;/code&gt; and &lt;code&gt;ApplyMethod&lt;/code&gt;. To reset the entire DB parameter group, specify the &lt;code&gt;DBParameterGroup&lt;/code&gt; name and &lt;code&gt;ResetAllParameters&lt;/code&gt; parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to &lt;code&gt;pending-reboot&lt;/code&gt; to take effect on the next DB instance restart or &lt;code&gt;RebootDBInstance&lt;/code&gt; request.
     * @param dbParameterGroupName &lt;p&gt;The name of the DB parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the name of an existing DBParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetAllParameters &lt;p&gt;Specifies whether (&lt;code&gt;true&lt;/code&gt;) or not (&lt;code&gt;false&lt;/code&gt;) to reset all parameters in the DB parameter group to default values.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;true&lt;/code&gt; &lt;/p&gt; (optional)
     * @param parameters &lt;p&gt;To reset the entire DB parameter group, specify the &lt;code&gt;DBParameterGroup&lt;/code&gt; name and &lt;code&gt;ResetAllParameters&lt;/code&gt; parameters. To reset specific parameters, provide a list of the following: &lt;code&gt;ParameterName&lt;/code&gt; and &lt;code&gt;ApplyMethod&lt;/code&gt;. A maximum of 20 parameters can be modified in a single request.&lt;/p&gt; &lt;p&gt;Valid Values (for Apply method): &lt;code&gt;pending-reboot&lt;/code&gt; &lt;/p&gt; (optional)
     * @return ApiResponse&lt;DBParameterGroupNameMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBParameterGroupNameMessage> gETResetDBParameterGroupWithHttpInfo(String dbParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean resetAllParameters, List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters) throws ApiException {
        okhttp3.Call localVarCall = gETResetDBParameterGroupValidateBeforeCall(dbParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetAllParameters, parameters, null);
        Type localVarReturnType = new TypeToken<DBParameterGroupNameMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: &lt;code&gt;ParameterName&lt;/code&gt; and &lt;code&gt;ApplyMethod&lt;/code&gt;. To reset the entire DB parameter group, specify the &lt;code&gt;DBParameterGroup&lt;/code&gt; name and &lt;code&gt;ResetAllParameters&lt;/code&gt; parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to &lt;code&gt;pending-reboot&lt;/code&gt; to take effect on the next DB instance restart or &lt;code&gt;RebootDBInstance&lt;/code&gt; request.
     * @param dbParameterGroupName &lt;p&gt;The name of the DB parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the name of an existing DBParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetAllParameters &lt;p&gt;Specifies whether (&lt;code&gt;true&lt;/code&gt;) or not (&lt;code&gt;false&lt;/code&gt;) to reset all parameters in the DB parameter group to default values.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;true&lt;/code&gt; &lt;/p&gt; (optional)
     * @param parameters &lt;p&gt;To reset the entire DB parameter group, specify the &lt;code&gt;DBParameterGroup&lt;/code&gt; name and &lt;code&gt;ResetAllParameters&lt;/code&gt; parameters. To reset specific parameters, provide a list of the following: &lt;code&gt;ParameterName&lt;/code&gt; and &lt;code&gt;ApplyMethod&lt;/code&gt;. A maximum of 20 parameters can be modified in a single request.&lt;/p&gt; &lt;p&gt;Valid Values (for Apply method): &lt;code&gt;pending-reboot&lt;/code&gt; &lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETResetDBParameterGroupAsync(String dbParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean resetAllParameters, List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters, final ApiCallback<DBParameterGroupNameMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETResetDBParameterGroupValidateBeforeCall(dbParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetAllParameters, parameters, _callback);
        Type localVarReturnType = new TypeToken<DBParameterGroupNameMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRestoreDBClusterFromSnapshot
     * @param dbClusterIdentifier &lt;p&gt;The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn&#39;t case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-snapshot-id&lt;/code&gt; &lt;/p&gt; (required)
     * @param snapshotIdentifier &lt;p&gt;The identifier for the DB snapshot or DB cluster snapshot to restore from.&lt;/p&gt; &lt;p&gt;You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing Snapshot.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param engine &lt;p&gt;The database engine to use for the new DB cluster.&lt;/p&gt; &lt;p&gt;Default: The same as source&lt;/p&gt; &lt;p&gt;Constraint: Must be compatible with the engine of the source&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param availabilityZones Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in. (optional)
     * @param engineVersion The version of the database engine to use for the new DB cluster. (optional)
     * @param port &lt;p&gt;The port number on which the new DB cluster accepts connections.&lt;/p&gt; &lt;p&gt;Constraints: Value must be &lt;code&gt;1150-65535&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Default: The same port as the original DB cluster.&lt;/p&gt; (optional)
     * @param dbSubnetGroupName &lt;p&gt;The name of the DB subnet group to use for the new DB cluster.&lt;/p&gt; &lt;p&gt;Constraints: If supplied, must match the name of an existing DBSubnetGroup.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (optional)
     * @param databaseName Not supported. (optional)
     * @param optionGroupName  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param vpcSecurityGroupIds A list of VPC security groups that the new DB cluster will belong to. (optional)
     * @param tags The tags to be assigned to the restored DB cluster. (optional)
     * @param kmsKeyId &lt;p&gt;The Amazon KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same Amazon account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.&lt;/p&gt; &lt;p&gt;If you do not specify a value for the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter, then the following will occur:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the DB snapshot or DB cluster snapshot in &lt;code&gt;SnapshotIdentifier&lt;/code&gt; is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the DB snapshot or DB cluster snapshot in &lt;code&gt;SnapshotIdentifier&lt;/code&gt; is not encrypted, then the restored DB cluster is not encrypted.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param enableIAMDatabaseAuthentication &lt;p&gt;True to enable mapping of Amazon Identity and Access Management (IAM) accounts to database accounts, and otherwise false.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param enableCloudwatchLogsExports The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. (optional)
     * @param dbClusterParameterGroupName &lt;p&gt;The name of the DB cluster parameter group to associate with the new DB cluster.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBClusterParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param deletionProtection A value that indicates whether the DB cluster has deletion protection enabled. The database can&#39;t be deleted when deletion protection is enabled. By default, deletion protection is disabled.  (optional)
     * @param copyTagsToSnapshot  &lt;i&gt;If set to &lt;code&gt;true&lt;/code&gt;, tags are copied to any snapshot of the restored DB cluster that is created.&lt;/i&gt;  (optional)
     * @param serverlessV2ScalingConfiguration  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRestoreDBClusterFromSnapshotCall(String dbClusterIdentifier, String snapshotIdentifier, String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> availabilityZones, String engineVersion, Integer port, String dbSubnetGroupName, String databaseName, String optionGroupName, List<String> vpcSecurityGroupIds, List<GETAddTagsToResourceTagsParameterInner> tags, String kmsKeyId, Boolean enableIAMDatabaseAuthentication, List<String> enableCloudwatchLogsExports, String dbClusterParameterGroupName, Boolean deletionProtection, Boolean copyTagsToSnapshot, GETCreateDBClusterServerlessV2ScalingConfigurationParameter serverlessV2ScalingConfiguration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RestoreDBClusterFromSnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (availabilityZones != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AvailabilityZones", availabilityZones));
        }

        if (dbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterIdentifier", dbClusterIdentifier));
        }

        if (snapshotIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SnapshotIdentifier", snapshotIdentifier));
        }

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Engine", engine));
        }

        if (engineVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EngineVersion", engineVersion));
        }

        if (port != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Port", port));
        }

        if (dbSubnetGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBSubnetGroupName", dbSubnetGroupName));
        }

        if (databaseName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DatabaseName", databaseName));
        }

        if (optionGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OptionGroupName", optionGroupName));
        }

        if (vpcSecurityGroupIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "VpcSecurityGroupIds", vpcSecurityGroupIds));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (kmsKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("KmsKeyId", kmsKeyId));
        }

        if (enableIAMDatabaseAuthentication != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnableIAMDatabaseAuthentication", enableIAMDatabaseAuthentication));
        }

        if (enableCloudwatchLogsExports != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "EnableCloudwatchLogsExports", enableCloudwatchLogsExports));
        }

        if (dbClusterParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterParameterGroupName", dbClusterParameterGroupName));
        }

        if (deletionProtection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DeletionProtection", deletionProtection));
        }

        if (copyTagsToSnapshot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CopyTagsToSnapshot", copyTagsToSnapshot));
        }

        if (serverlessV2ScalingConfiguration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ServerlessV2ScalingConfiguration", serverlessV2ScalingConfiguration));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRestoreDBClusterFromSnapshotValidateBeforeCall(String dbClusterIdentifier, String snapshotIdentifier, String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> availabilityZones, String engineVersion, Integer port, String dbSubnetGroupName, String databaseName, String optionGroupName, List<String> vpcSecurityGroupIds, List<GETAddTagsToResourceTagsParameterInner> tags, String kmsKeyId, Boolean enableIAMDatabaseAuthentication, List<String> enableCloudwatchLogsExports, String dbClusterParameterGroupName, Boolean deletionProtection, Boolean copyTagsToSnapshot, GETCreateDBClusterServerlessV2ScalingConfigurationParameter serverlessV2ScalingConfiguration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterIdentifier' is set
        if (dbClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterIdentifier' when calling gETRestoreDBClusterFromSnapshot(Async)");
        }

        // verify the required parameter 'snapshotIdentifier' is set
        if (snapshotIdentifier == null) {
            throw new ApiException("Missing the required parameter 'snapshotIdentifier' when calling gETRestoreDBClusterFromSnapshot(Async)");
        }

        // verify the required parameter 'engine' is set
        if (engine == null) {
            throw new ApiException("Missing the required parameter 'engine' when calling gETRestoreDBClusterFromSnapshot(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRestoreDBClusterFromSnapshot(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRestoreDBClusterFromSnapshot(Async)");
        }

        return gETRestoreDBClusterFromSnapshotCall(dbClusterIdentifier, snapshotIdentifier, engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, availabilityZones, engineVersion, port, dbSubnetGroupName, databaseName, optionGroupName, vpcSecurityGroupIds, tags, kmsKeyId, enableIAMDatabaseAuthentication, enableCloudwatchLogsExports, dbClusterParameterGroupName, deletionProtection, copyTagsToSnapshot, serverlessV2ScalingConfiguration, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new DB cluster from a DB snapshot or DB cluster snapshot.&lt;/p&gt; &lt;p&gt;If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.&lt;/p&gt; &lt;p&gt;If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.&lt;/p&gt;
     * @param dbClusterIdentifier &lt;p&gt;The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn&#39;t case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-snapshot-id&lt;/code&gt; &lt;/p&gt; (required)
     * @param snapshotIdentifier &lt;p&gt;The identifier for the DB snapshot or DB cluster snapshot to restore from.&lt;/p&gt; &lt;p&gt;You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing Snapshot.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param engine &lt;p&gt;The database engine to use for the new DB cluster.&lt;/p&gt; &lt;p&gt;Default: The same as source&lt;/p&gt; &lt;p&gt;Constraint: Must be compatible with the engine of the source&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param availabilityZones Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in. (optional)
     * @param engineVersion The version of the database engine to use for the new DB cluster. (optional)
     * @param port &lt;p&gt;The port number on which the new DB cluster accepts connections.&lt;/p&gt; &lt;p&gt;Constraints: Value must be &lt;code&gt;1150-65535&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Default: The same port as the original DB cluster.&lt;/p&gt; (optional)
     * @param dbSubnetGroupName &lt;p&gt;The name of the DB subnet group to use for the new DB cluster.&lt;/p&gt; &lt;p&gt;Constraints: If supplied, must match the name of an existing DBSubnetGroup.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (optional)
     * @param databaseName Not supported. (optional)
     * @param optionGroupName  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param vpcSecurityGroupIds A list of VPC security groups that the new DB cluster will belong to. (optional)
     * @param tags The tags to be assigned to the restored DB cluster. (optional)
     * @param kmsKeyId &lt;p&gt;The Amazon KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same Amazon account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.&lt;/p&gt; &lt;p&gt;If you do not specify a value for the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter, then the following will occur:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the DB snapshot or DB cluster snapshot in &lt;code&gt;SnapshotIdentifier&lt;/code&gt; is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the DB snapshot or DB cluster snapshot in &lt;code&gt;SnapshotIdentifier&lt;/code&gt; is not encrypted, then the restored DB cluster is not encrypted.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param enableIAMDatabaseAuthentication &lt;p&gt;True to enable mapping of Amazon Identity and Access Management (IAM) accounts to database accounts, and otherwise false.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param enableCloudwatchLogsExports The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. (optional)
     * @param dbClusterParameterGroupName &lt;p&gt;The name of the DB cluster parameter group to associate with the new DB cluster.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBClusterParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param deletionProtection A value that indicates whether the DB cluster has deletion protection enabled. The database can&#39;t be deleted when deletion protection is enabled. By default, deletion protection is disabled.  (optional)
     * @param copyTagsToSnapshot  &lt;i&gt;If set to &lt;code&gt;true&lt;/code&gt;, tags are copied to any snapshot of the restored DB cluster that is created.&lt;/i&gt;  (optional)
     * @param serverlessV2ScalingConfiguration  (optional)
     * @return RestoreDBClusterFromSnapshotResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public RestoreDBClusterFromSnapshotResult gETRestoreDBClusterFromSnapshot(String dbClusterIdentifier, String snapshotIdentifier, String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> availabilityZones, String engineVersion, Integer port, String dbSubnetGroupName, String databaseName, String optionGroupName, List<String> vpcSecurityGroupIds, List<GETAddTagsToResourceTagsParameterInner> tags, String kmsKeyId, Boolean enableIAMDatabaseAuthentication, List<String> enableCloudwatchLogsExports, String dbClusterParameterGroupName, Boolean deletionProtection, Boolean copyTagsToSnapshot, GETCreateDBClusterServerlessV2ScalingConfigurationParameter serverlessV2ScalingConfiguration) throws ApiException {
        ApiResponse<RestoreDBClusterFromSnapshotResult> localVarResp = gETRestoreDBClusterFromSnapshotWithHttpInfo(dbClusterIdentifier, snapshotIdentifier, engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, availabilityZones, engineVersion, port, dbSubnetGroupName, databaseName, optionGroupName, vpcSecurityGroupIds, tags, kmsKeyId, enableIAMDatabaseAuthentication, enableCloudwatchLogsExports, dbClusterParameterGroupName, deletionProtection, copyTagsToSnapshot, serverlessV2ScalingConfiguration);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new DB cluster from a DB snapshot or DB cluster snapshot.&lt;/p&gt; &lt;p&gt;If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.&lt;/p&gt; &lt;p&gt;If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.&lt;/p&gt;
     * @param dbClusterIdentifier &lt;p&gt;The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn&#39;t case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-snapshot-id&lt;/code&gt; &lt;/p&gt; (required)
     * @param snapshotIdentifier &lt;p&gt;The identifier for the DB snapshot or DB cluster snapshot to restore from.&lt;/p&gt; &lt;p&gt;You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing Snapshot.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param engine &lt;p&gt;The database engine to use for the new DB cluster.&lt;/p&gt; &lt;p&gt;Default: The same as source&lt;/p&gt; &lt;p&gt;Constraint: Must be compatible with the engine of the source&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param availabilityZones Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in. (optional)
     * @param engineVersion The version of the database engine to use for the new DB cluster. (optional)
     * @param port &lt;p&gt;The port number on which the new DB cluster accepts connections.&lt;/p&gt; &lt;p&gt;Constraints: Value must be &lt;code&gt;1150-65535&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Default: The same port as the original DB cluster.&lt;/p&gt; (optional)
     * @param dbSubnetGroupName &lt;p&gt;The name of the DB subnet group to use for the new DB cluster.&lt;/p&gt; &lt;p&gt;Constraints: If supplied, must match the name of an existing DBSubnetGroup.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (optional)
     * @param databaseName Not supported. (optional)
     * @param optionGroupName  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param vpcSecurityGroupIds A list of VPC security groups that the new DB cluster will belong to. (optional)
     * @param tags The tags to be assigned to the restored DB cluster. (optional)
     * @param kmsKeyId &lt;p&gt;The Amazon KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same Amazon account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.&lt;/p&gt; &lt;p&gt;If you do not specify a value for the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter, then the following will occur:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the DB snapshot or DB cluster snapshot in &lt;code&gt;SnapshotIdentifier&lt;/code&gt; is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the DB snapshot or DB cluster snapshot in &lt;code&gt;SnapshotIdentifier&lt;/code&gt; is not encrypted, then the restored DB cluster is not encrypted.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param enableIAMDatabaseAuthentication &lt;p&gt;True to enable mapping of Amazon Identity and Access Management (IAM) accounts to database accounts, and otherwise false.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param enableCloudwatchLogsExports The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. (optional)
     * @param dbClusterParameterGroupName &lt;p&gt;The name of the DB cluster parameter group to associate with the new DB cluster.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBClusterParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param deletionProtection A value that indicates whether the DB cluster has deletion protection enabled. The database can&#39;t be deleted when deletion protection is enabled. By default, deletion protection is disabled.  (optional)
     * @param copyTagsToSnapshot  &lt;i&gt;If set to &lt;code&gt;true&lt;/code&gt;, tags are copied to any snapshot of the restored DB cluster that is created.&lt;/i&gt;  (optional)
     * @param serverlessV2ScalingConfiguration  (optional)
     * @return ApiResponse&lt;RestoreDBClusterFromSnapshotResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestoreDBClusterFromSnapshotResult> gETRestoreDBClusterFromSnapshotWithHttpInfo(String dbClusterIdentifier, String snapshotIdentifier, String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> availabilityZones, String engineVersion, Integer port, String dbSubnetGroupName, String databaseName, String optionGroupName, List<String> vpcSecurityGroupIds, List<GETAddTagsToResourceTagsParameterInner> tags, String kmsKeyId, Boolean enableIAMDatabaseAuthentication, List<String> enableCloudwatchLogsExports, String dbClusterParameterGroupName, Boolean deletionProtection, Boolean copyTagsToSnapshot, GETCreateDBClusterServerlessV2ScalingConfigurationParameter serverlessV2ScalingConfiguration) throws ApiException {
        okhttp3.Call localVarCall = gETRestoreDBClusterFromSnapshotValidateBeforeCall(dbClusterIdentifier, snapshotIdentifier, engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, availabilityZones, engineVersion, port, dbSubnetGroupName, databaseName, optionGroupName, vpcSecurityGroupIds, tags, kmsKeyId, enableIAMDatabaseAuthentication, enableCloudwatchLogsExports, dbClusterParameterGroupName, deletionProtection, copyTagsToSnapshot, serverlessV2ScalingConfiguration, null);
        Type localVarReturnType = new TypeToken<RestoreDBClusterFromSnapshotResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new DB cluster from a DB snapshot or DB cluster snapshot.&lt;/p&gt; &lt;p&gt;If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.&lt;/p&gt; &lt;p&gt;If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.&lt;/p&gt;
     * @param dbClusterIdentifier &lt;p&gt;The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn&#39;t case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-snapshot-id&lt;/code&gt; &lt;/p&gt; (required)
     * @param snapshotIdentifier &lt;p&gt;The identifier for the DB snapshot or DB cluster snapshot to restore from.&lt;/p&gt; &lt;p&gt;You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing Snapshot.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param engine &lt;p&gt;The database engine to use for the new DB cluster.&lt;/p&gt; &lt;p&gt;Default: The same as source&lt;/p&gt; &lt;p&gt;Constraint: Must be compatible with the engine of the source&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param availabilityZones Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in. (optional)
     * @param engineVersion The version of the database engine to use for the new DB cluster. (optional)
     * @param port &lt;p&gt;The port number on which the new DB cluster accepts connections.&lt;/p&gt; &lt;p&gt;Constraints: Value must be &lt;code&gt;1150-65535&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Default: The same port as the original DB cluster.&lt;/p&gt; (optional)
     * @param dbSubnetGroupName &lt;p&gt;The name of the DB subnet group to use for the new DB cluster.&lt;/p&gt; &lt;p&gt;Constraints: If supplied, must match the name of an existing DBSubnetGroup.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (optional)
     * @param databaseName Not supported. (optional)
     * @param optionGroupName  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param vpcSecurityGroupIds A list of VPC security groups that the new DB cluster will belong to. (optional)
     * @param tags The tags to be assigned to the restored DB cluster. (optional)
     * @param kmsKeyId &lt;p&gt;The Amazon KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same Amazon account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.&lt;/p&gt; &lt;p&gt;If you do not specify a value for the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter, then the following will occur:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the DB snapshot or DB cluster snapshot in &lt;code&gt;SnapshotIdentifier&lt;/code&gt; is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the DB snapshot or DB cluster snapshot in &lt;code&gt;SnapshotIdentifier&lt;/code&gt; is not encrypted, then the restored DB cluster is not encrypted.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param enableIAMDatabaseAuthentication &lt;p&gt;True to enable mapping of Amazon Identity and Access Management (IAM) accounts to database accounts, and otherwise false.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param enableCloudwatchLogsExports The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. (optional)
     * @param dbClusterParameterGroupName &lt;p&gt;The name of the DB cluster parameter group to associate with the new DB cluster.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBClusterParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param deletionProtection A value that indicates whether the DB cluster has deletion protection enabled. The database can&#39;t be deleted when deletion protection is enabled. By default, deletion protection is disabled.  (optional)
     * @param copyTagsToSnapshot  &lt;i&gt;If set to &lt;code&gt;true&lt;/code&gt;, tags are copied to any snapshot of the restored DB cluster that is created.&lt;/i&gt;  (optional)
     * @param serverlessV2ScalingConfiguration  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRestoreDBClusterFromSnapshotAsync(String dbClusterIdentifier, String snapshotIdentifier, String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> availabilityZones, String engineVersion, Integer port, String dbSubnetGroupName, String databaseName, String optionGroupName, List<String> vpcSecurityGroupIds, List<GETAddTagsToResourceTagsParameterInner> tags, String kmsKeyId, Boolean enableIAMDatabaseAuthentication, List<String> enableCloudwatchLogsExports, String dbClusterParameterGroupName, Boolean deletionProtection, Boolean copyTagsToSnapshot, GETCreateDBClusterServerlessV2ScalingConfigurationParameter serverlessV2ScalingConfiguration, final ApiCallback<RestoreDBClusterFromSnapshotResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRestoreDBClusterFromSnapshotValidateBeforeCall(dbClusterIdentifier, snapshotIdentifier, engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, availabilityZones, engineVersion, port, dbSubnetGroupName, databaseName, optionGroupName, vpcSecurityGroupIds, tags, kmsKeyId, enableIAMDatabaseAuthentication, enableCloudwatchLogsExports, dbClusterParameterGroupName, deletionProtection, copyTagsToSnapshot, serverlessV2ScalingConfiguration, _callback);
        Type localVarReturnType = new TypeToken<RestoreDBClusterFromSnapshotResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRestoreDBClusterToPointInTime
     * @param dbClusterIdentifier &lt;p&gt;The name of the new DB cluster to be created.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param sourceDBClusterIdentifier &lt;p&gt;The identifier of the source DB cluster from which to restore.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing DBCluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param restoreType &lt;p&gt;The type of restore to be performed. You can specify one of the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;full-copy&lt;/code&gt; - The new DB cluster is restored as a full copy of the source DB cluster.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;copy-on-write&lt;/code&gt; - The new DB cluster is restored as a clone of the source DB cluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you don&#39;t specify a &lt;code&gt;RestoreType&lt;/code&gt; value, then the new DB cluster is restored as a full copy of the source DB cluster.&lt;/p&gt; (optional)
     * @param restoreToTime &lt;p&gt;The date and time to restore the DB cluster to.&lt;/p&gt; &lt;p&gt;Valid Values: Value must be a time in Universal Coordinated Time (UTC) format&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be before the latest restorable time for the DB instance&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be specified if &lt;code&gt;UseLatestRestorableTime&lt;/code&gt; parameter is not provided&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be specified if &lt;code&gt;UseLatestRestorableTime&lt;/code&gt; parameter is true&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be specified if &lt;code&gt;RestoreType&lt;/code&gt; parameter is &lt;code&gt;copy-on-write&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;2015-03-07T23:45:00Z&lt;/code&gt; &lt;/p&gt; (optional)
     * @param useLatestRestorableTime &lt;p&gt;A value that is set to &lt;code&gt;true&lt;/code&gt; to restore the DB cluster to the latest restorable backup time, and &lt;code&gt;false&lt;/code&gt; otherwise.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Constraints: Cannot be specified if &lt;code&gt;RestoreToTime&lt;/code&gt; parameter is provided.&lt;/p&gt; (optional)
     * @param port &lt;p&gt;The port number on which the new DB cluster accepts connections.&lt;/p&gt; &lt;p&gt;Constraints: Value must be &lt;code&gt;1150-65535&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Default: The same port as the original DB cluster.&lt;/p&gt; (optional)
     * @param dbSubnetGroupName &lt;p&gt;The DB subnet group name to use for the new DB cluster.&lt;/p&gt; &lt;p&gt;Constraints: If supplied, must match the name of an existing DBSubnetGroup.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (optional)
     * @param optionGroupName  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param vpcSecurityGroupIds A list of VPC security groups that the new DB cluster belongs to. (optional)
     * @param tags The tags to be applied to the restored DB cluster. (optional)
     * @param kmsKeyId &lt;p&gt;The Amazon KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same Amazon account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.&lt;/p&gt; &lt;p&gt;You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;If you do not specify a value for the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter, then the following will occur:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If &lt;code&gt;DBClusterIdentifier&lt;/code&gt; refers to a DB cluster that is not encrypted, then the restore request is rejected.&lt;/p&gt; (optional)
     * @param enableIAMDatabaseAuthentication &lt;p&gt;True to enable mapping of Amazon Identity and Access Management (IAM) accounts to database accounts, and otherwise false.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param enableCloudwatchLogsExports The list of logs that the restored DB cluster is to export to CloudWatch Logs. (optional)
     * @param dbClusterParameterGroupName &lt;p&gt;The name of the DB cluster parameter group to associate with the new DB cluster.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBClusterParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param deletionProtection A value that indicates whether the DB cluster has deletion protection enabled. The database can&#39;t be deleted when deletion protection is enabled. By default, deletion protection is disabled.  (optional)
     * @param serverlessV2ScalingConfiguration  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRestoreDBClusterToPointInTimeCall(String dbClusterIdentifier, String sourceDBClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String restoreType, OffsetDateTime restoreToTime, Boolean useLatestRestorableTime, Integer port, String dbSubnetGroupName, String optionGroupName, List<String> vpcSecurityGroupIds, List<GETAddTagsToResourceTagsParameterInner> tags, String kmsKeyId, Boolean enableIAMDatabaseAuthentication, List<String> enableCloudwatchLogsExports, String dbClusterParameterGroupName, Boolean deletionProtection, GETCreateDBClusterServerlessV2ScalingConfigurationParameter serverlessV2ScalingConfiguration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RestoreDBClusterToPointInTime";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterIdentifier", dbClusterIdentifier));
        }

        if (restoreType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RestoreType", restoreType));
        }

        if (sourceDBClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceDBClusterIdentifier", sourceDBClusterIdentifier));
        }

        if (restoreToTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RestoreToTime", restoreToTime));
        }

        if (useLatestRestorableTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UseLatestRestorableTime", useLatestRestorableTime));
        }

        if (port != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Port", port));
        }

        if (dbSubnetGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBSubnetGroupName", dbSubnetGroupName));
        }

        if (optionGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OptionGroupName", optionGroupName));
        }

        if (vpcSecurityGroupIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "VpcSecurityGroupIds", vpcSecurityGroupIds));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (kmsKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("KmsKeyId", kmsKeyId));
        }

        if (enableIAMDatabaseAuthentication != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnableIAMDatabaseAuthentication", enableIAMDatabaseAuthentication));
        }

        if (enableCloudwatchLogsExports != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "EnableCloudwatchLogsExports", enableCloudwatchLogsExports));
        }

        if (dbClusterParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterParameterGroupName", dbClusterParameterGroupName));
        }

        if (deletionProtection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DeletionProtection", deletionProtection));
        }

        if (serverlessV2ScalingConfiguration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ServerlessV2ScalingConfiguration", serverlessV2ScalingConfiguration));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRestoreDBClusterToPointInTimeValidateBeforeCall(String dbClusterIdentifier, String sourceDBClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String restoreType, OffsetDateTime restoreToTime, Boolean useLatestRestorableTime, Integer port, String dbSubnetGroupName, String optionGroupName, List<String> vpcSecurityGroupIds, List<GETAddTagsToResourceTagsParameterInner> tags, String kmsKeyId, Boolean enableIAMDatabaseAuthentication, List<String> enableCloudwatchLogsExports, String dbClusterParameterGroupName, Boolean deletionProtection, GETCreateDBClusterServerlessV2ScalingConfigurationParameter serverlessV2ScalingConfiguration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterIdentifier' is set
        if (dbClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterIdentifier' when calling gETRestoreDBClusterToPointInTime(Async)");
        }

        // verify the required parameter 'sourceDBClusterIdentifier' is set
        if (sourceDBClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'sourceDBClusterIdentifier' when calling gETRestoreDBClusterToPointInTime(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRestoreDBClusterToPointInTime(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRestoreDBClusterToPointInTime(Async)");
        }

        return gETRestoreDBClusterToPointInTimeCall(dbClusterIdentifier, sourceDBClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreType, restoreToTime, useLatestRestorableTime, port, dbSubnetGroupName, optionGroupName, vpcSecurityGroupIds, tags, kmsKeyId, enableIAMDatabaseAuthentication, enableCloudwatchLogsExports, dbClusterParameterGroupName, deletionProtection, serverlessV2ScalingConfiguration, _callback);

    }

    /**
     * 
     * &lt;p&gt;Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before &lt;code&gt;LatestRestorableTime&lt;/code&gt; for up to &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the &lt;a&gt;CreateDBInstance&lt;/a&gt; action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in &lt;code&gt;DBClusterIdentifier&lt;/code&gt;. You can create DB instances only after the &lt;code&gt;RestoreDBClusterToPointInTime&lt;/code&gt; action has completed and the DB cluster is available.&lt;/p&gt; &lt;/note&gt;
     * @param dbClusterIdentifier &lt;p&gt;The name of the new DB cluster to be created.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param sourceDBClusterIdentifier &lt;p&gt;The identifier of the source DB cluster from which to restore.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing DBCluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param restoreType &lt;p&gt;The type of restore to be performed. You can specify one of the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;full-copy&lt;/code&gt; - The new DB cluster is restored as a full copy of the source DB cluster.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;copy-on-write&lt;/code&gt; - The new DB cluster is restored as a clone of the source DB cluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you don&#39;t specify a &lt;code&gt;RestoreType&lt;/code&gt; value, then the new DB cluster is restored as a full copy of the source DB cluster.&lt;/p&gt; (optional)
     * @param restoreToTime &lt;p&gt;The date and time to restore the DB cluster to.&lt;/p&gt; &lt;p&gt;Valid Values: Value must be a time in Universal Coordinated Time (UTC) format&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be before the latest restorable time for the DB instance&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be specified if &lt;code&gt;UseLatestRestorableTime&lt;/code&gt; parameter is not provided&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be specified if &lt;code&gt;UseLatestRestorableTime&lt;/code&gt; parameter is true&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be specified if &lt;code&gt;RestoreType&lt;/code&gt; parameter is &lt;code&gt;copy-on-write&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;2015-03-07T23:45:00Z&lt;/code&gt; &lt;/p&gt; (optional)
     * @param useLatestRestorableTime &lt;p&gt;A value that is set to &lt;code&gt;true&lt;/code&gt; to restore the DB cluster to the latest restorable backup time, and &lt;code&gt;false&lt;/code&gt; otherwise.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Constraints: Cannot be specified if &lt;code&gt;RestoreToTime&lt;/code&gt; parameter is provided.&lt;/p&gt; (optional)
     * @param port &lt;p&gt;The port number on which the new DB cluster accepts connections.&lt;/p&gt; &lt;p&gt;Constraints: Value must be &lt;code&gt;1150-65535&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Default: The same port as the original DB cluster.&lt;/p&gt; (optional)
     * @param dbSubnetGroupName &lt;p&gt;The DB subnet group name to use for the new DB cluster.&lt;/p&gt; &lt;p&gt;Constraints: If supplied, must match the name of an existing DBSubnetGroup.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (optional)
     * @param optionGroupName  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param vpcSecurityGroupIds A list of VPC security groups that the new DB cluster belongs to. (optional)
     * @param tags The tags to be applied to the restored DB cluster. (optional)
     * @param kmsKeyId &lt;p&gt;The Amazon KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same Amazon account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.&lt;/p&gt; &lt;p&gt;You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;If you do not specify a value for the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter, then the following will occur:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If &lt;code&gt;DBClusterIdentifier&lt;/code&gt; refers to a DB cluster that is not encrypted, then the restore request is rejected.&lt;/p&gt; (optional)
     * @param enableIAMDatabaseAuthentication &lt;p&gt;True to enable mapping of Amazon Identity and Access Management (IAM) accounts to database accounts, and otherwise false.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param enableCloudwatchLogsExports The list of logs that the restored DB cluster is to export to CloudWatch Logs. (optional)
     * @param dbClusterParameterGroupName &lt;p&gt;The name of the DB cluster parameter group to associate with the new DB cluster.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBClusterParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param deletionProtection A value that indicates whether the DB cluster has deletion protection enabled. The database can&#39;t be deleted when deletion protection is enabled. By default, deletion protection is disabled.  (optional)
     * @param serverlessV2ScalingConfiguration  (optional)
     * @return RestoreDBClusterToPointInTimeResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public RestoreDBClusterToPointInTimeResult gETRestoreDBClusterToPointInTime(String dbClusterIdentifier, String sourceDBClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String restoreType, OffsetDateTime restoreToTime, Boolean useLatestRestorableTime, Integer port, String dbSubnetGroupName, String optionGroupName, List<String> vpcSecurityGroupIds, List<GETAddTagsToResourceTagsParameterInner> tags, String kmsKeyId, Boolean enableIAMDatabaseAuthentication, List<String> enableCloudwatchLogsExports, String dbClusterParameterGroupName, Boolean deletionProtection, GETCreateDBClusterServerlessV2ScalingConfigurationParameter serverlessV2ScalingConfiguration) throws ApiException {
        ApiResponse<RestoreDBClusterToPointInTimeResult> localVarResp = gETRestoreDBClusterToPointInTimeWithHttpInfo(dbClusterIdentifier, sourceDBClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreType, restoreToTime, useLatestRestorableTime, port, dbSubnetGroupName, optionGroupName, vpcSecurityGroupIds, tags, kmsKeyId, enableIAMDatabaseAuthentication, enableCloudwatchLogsExports, dbClusterParameterGroupName, deletionProtection, serverlessV2ScalingConfiguration);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before &lt;code&gt;LatestRestorableTime&lt;/code&gt; for up to &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the &lt;a&gt;CreateDBInstance&lt;/a&gt; action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in &lt;code&gt;DBClusterIdentifier&lt;/code&gt;. You can create DB instances only after the &lt;code&gt;RestoreDBClusterToPointInTime&lt;/code&gt; action has completed and the DB cluster is available.&lt;/p&gt; &lt;/note&gt;
     * @param dbClusterIdentifier &lt;p&gt;The name of the new DB cluster to be created.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param sourceDBClusterIdentifier &lt;p&gt;The identifier of the source DB cluster from which to restore.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing DBCluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param restoreType &lt;p&gt;The type of restore to be performed. You can specify one of the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;full-copy&lt;/code&gt; - The new DB cluster is restored as a full copy of the source DB cluster.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;copy-on-write&lt;/code&gt; - The new DB cluster is restored as a clone of the source DB cluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you don&#39;t specify a &lt;code&gt;RestoreType&lt;/code&gt; value, then the new DB cluster is restored as a full copy of the source DB cluster.&lt;/p&gt; (optional)
     * @param restoreToTime &lt;p&gt;The date and time to restore the DB cluster to.&lt;/p&gt; &lt;p&gt;Valid Values: Value must be a time in Universal Coordinated Time (UTC) format&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be before the latest restorable time for the DB instance&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be specified if &lt;code&gt;UseLatestRestorableTime&lt;/code&gt; parameter is not provided&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be specified if &lt;code&gt;UseLatestRestorableTime&lt;/code&gt; parameter is true&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be specified if &lt;code&gt;RestoreType&lt;/code&gt; parameter is &lt;code&gt;copy-on-write&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;2015-03-07T23:45:00Z&lt;/code&gt; &lt;/p&gt; (optional)
     * @param useLatestRestorableTime &lt;p&gt;A value that is set to &lt;code&gt;true&lt;/code&gt; to restore the DB cluster to the latest restorable backup time, and &lt;code&gt;false&lt;/code&gt; otherwise.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Constraints: Cannot be specified if &lt;code&gt;RestoreToTime&lt;/code&gt; parameter is provided.&lt;/p&gt; (optional)
     * @param port &lt;p&gt;The port number on which the new DB cluster accepts connections.&lt;/p&gt; &lt;p&gt;Constraints: Value must be &lt;code&gt;1150-65535&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Default: The same port as the original DB cluster.&lt;/p&gt; (optional)
     * @param dbSubnetGroupName &lt;p&gt;The DB subnet group name to use for the new DB cluster.&lt;/p&gt; &lt;p&gt;Constraints: If supplied, must match the name of an existing DBSubnetGroup.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (optional)
     * @param optionGroupName  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param vpcSecurityGroupIds A list of VPC security groups that the new DB cluster belongs to. (optional)
     * @param tags The tags to be applied to the restored DB cluster. (optional)
     * @param kmsKeyId &lt;p&gt;The Amazon KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same Amazon account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.&lt;/p&gt; &lt;p&gt;You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;If you do not specify a value for the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter, then the following will occur:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If &lt;code&gt;DBClusterIdentifier&lt;/code&gt; refers to a DB cluster that is not encrypted, then the restore request is rejected.&lt;/p&gt; (optional)
     * @param enableIAMDatabaseAuthentication &lt;p&gt;True to enable mapping of Amazon Identity and Access Management (IAM) accounts to database accounts, and otherwise false.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param enableCloudwatchLogsExports The list of logs that the restored DB cluster is to export to CloudWatch Logs. (optional)
     * @param dbClusterParameterGroupName &lt;p&gt;The name of the DB cluster parameter group to associate with the new DB cluster.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBClusterParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param deletionProtection A value that indicates whether the DB cluster has deletion protection enabled. The database can&#39;t be deleted when deletion protection is enabled. By default, deletion protection is disabled.  (optional)
     * @param serverlessV2ScalingConfiguration  (optional)
     * @return ApiResponse&lt;RestoreDBClusterToPointInTimeResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestoreDBClusterToPointInTimeResult> gETRestoreDBClusterToPointInTimeWithHttpInfo(String dbClusterIdentifier, String sourceDBClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String restoreType, OffsetDateTime restoreToTime, Boolean useLatestRestorableTime, Integer port, String dbSubnetGroupName, String optionGroupName, List<String> vpcSecurityGroupIds, List<GETAddTagsToResourceTagsParameterInner> tags, String kmsKeyId, Boolean enableIAMDatabaseAuthentication, List<String> enableCloudwatchLogsExports, String dbClusterParameterGroupName, Boolean deletionProtection, GETCreateDBClusterServerlessV2ScalingConfigurationParameter serverlessV2ScalingConfiguration) throws ApiException {
        okhttp3.Call localVarCall = gETRestoreDBClusterToPointInTimeValidateBeforeCall(dbClusterIdentifier, sourceDBClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreType, restoreToTime, useLatestRestorableTime, port, dbSubnetGroupName, optionGroupName, vpcSecurityGroupIds, tags, kmsKeyId, enableIAMDatabaseAuthentication, enableCloudwatchLogsExports, dbClusterParameterGroupName, deletionProtection, serverlessV2ScalingConfiguration, null);
        Type localVarReturnType = new TypeToken<RestoreDBClusterToPointInTimeResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before &lt;code&gt;LatestRestorableTime&lt;/code&gt; for up to &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the &lt;a&gt;CreateDBInstance&lt;/a&gt; action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in &lt;code&gt;DBClusterIdentifier&lt;/code&gt;. You can create DB instances only after the &lt;code&gt;RestoreDBClusterToPointInTime&lt;/code&gt; action has completed and the DB cluster is available.&lt;/p&gt; &lt;/note&gt;
     * @param dbClusterIdentifier &lt;p&gt;The name of the new DB cluster to be created.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param sourceDBClusterIdentifier &lt;p&gt;The identifier of the source DB cluster from which to restore.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing DBCluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param restoreType &lt;p&gt;The type of restore to be performed. You can specify one of the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;full-copy&lt;/code&gt; - The new DB cluster is restored as a full copy of the source DB cluster.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;copy-on-write&lt;/code&gt; - The new DB cluster is restored as a clone of the source DB cluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you don&#39;t specify a &lt;code&gt;RestoreType&lt;/code&gt; value, then the new DB cluster is restored as a full copy of the source DB cluster.&lt;/p&gt; (optional)
     * @param restoreToTime &lt;p&gt;The date and time to restore the DB cluster to.&lt;/p&gt; &lt;p&gt;Valid Values: Value must be a time in Universal Coordinated Time (UTC) format&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be before the latest restorable time for the DB instance&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be specified if &lt;code&gt;UseLatestRestorableTime&lt;/code&gt; parameter is not provided&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be specified if &lt;code&gt;UseLatestRestorableTime&lt;/code&gt; parameter is true&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be specified if &lt;code&gt;RestoreType&lt;/code&gt; parameter is &lt;code&gt;copy-on-write&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;2015-03-07T23:45:00Z&lt;/code&gt; &lt;/p&gt; (optional)
     * @param useLatestRestorableTime &lt;p&gt;A value that is set to &lt;code&gt;true&lt;/code&gt; to restore the DB cluster to the latest restorable backup time, and &lt;code&gt;false&lt;/code&gt; otherwise.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Constraints: Cannot be specified if &lt;code&gt;RestoreToTime&lt;/code&gt; parameter is provided.&lt;/p&gt; (optional)
     * @param port &lt;p&gt;The port number on which the new DB cluster accepts connections.&lt;/p&gt; &lt;p&gt;Constraints: Value must be &lt;code&gt;1150-65535&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Default: The same port as the original DB cluster.&lt;/p&gt; (optional)
     * @param dbSubnetGroupName &lt;p&gt;The DB subnet group name to use for the new DB cluster.&lt;/p&gt; &lt;p&gt;Constraints: If supplied, must match the name of an existing DBSubnetGroup.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (optional)
     * @param optionGroupName  &lt;i&gt;(Not supported by Neptune)&lt;/i&gt;  (optional)
     * @param vpcSecurityGroupIds A list of VPC security groups that the new DB cluster belongs to. (optional)
     * @param tags The tags to be applied to the restored DB cluster. (optional)
     * @param kmsKeyId &lt;p&gt;The Amazon KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same Amazon account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.&lt;/p&gt; &lt;p&gt;You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;If you do not specify a value for the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter, then the following will occur:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If &lt;code&gt;DBClusterIdentifier&lt;/code&gt; refers to a DB cluster that is not encrypted, then the restore request is rejected.&lt;/p&gt; (optional)
     * @param enableIAMDatabaseAuthentication &lt;p&gt;True to enable mapping of Amazon Identity and Access Management (IAM) accounts to database accounts, and otherwise false.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param enableCloudwatchLogsExports The list of logs that the restored DB cluster is to export to CloudWatch Logs. (optional)
     * @param dbClusterParameterGroupName &lt;p&gt;The name of the DB cluster parameter group to associate with the new DB cluster.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If supplied, must match the name of an existing DBClusterParameterGroup.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param deletionProtection A value that indicates whether the DB cluster has deletion protection enabled. The database can&#39;t be deleted when deletion protection is enabled. By default, deletion protection is disabled.  (optional)
     * @param serverlessV2ScalingConfiguration  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRestoreDBClusterToPointInTimeAsync(String dbClusterIdentifier, String sourceDBClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String restoreType, OffsetDateTime restoreToTime, Boolean useLatestRestorableTime, Integer port, String dbSubnetGroupName, String optionGroupName, List<String> vpcSecurityGroupIds, List<GETAddTagsToResourceTagsParameterInner> tags, String kmsKeyId, Boolean enableIAMDatabaseAuthentication, List<String> enableCloudwatchLogsExports, String dbClusterParameterGroupName, Boolean deletionProtection, GETCreateDBClusterServerlessV2ScalingConfigurationParameter serverlessV2ScalingConfiguration, final ApiCallback<RestoreDBClusterToPointInTimeResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRestoreDBClusterToPointInTimeValidateBeforeCall(dbClusterIdentifier, sourceDBClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreType, restoreToTime, useLatestRestorableTime, port, dbSubnetGroupName, optionGroupName, vpcSecurityGroupIds, tags, kmsKeyId, enableIAMDatabaseAuthentication, enableCloudwatchLogsExports, dbClusterParameterGroupName, deletionProtection, serverlessV2ScalingConfiguration, _callback);
        Type localVarReturnType = new TypeToken<RestoreDBClusterToPointInTimeResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETStartDBCluster
     * @param dbClusterIdentifier The DB cluster identifier of the Neptune DB cluster to be started. This parameter is stored as a lowercase string. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETStartDBClusterCall(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=StartDBCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterIdentifier", dbClusterIdentifier));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETStartDBClusterValidateBeforeCall(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterIdentifier' is set
        if (dbClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterIdentifier' when calling gETStartDBCluster(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETStartDBCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETStartDBCluster(Async)");
        }

        return gETStartDBClusterCall(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Starts an Amazon Neptune DB cluster that was stopped using the Amazon console, the Amazon CLI stop-db-cluster command, or the StopDBCluster API.
     * @param dbClusterIdentifier The DB cluster identifier of the Neptune DB cluster to be started. This parameter is stored as a lowercase string. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return StartDBClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public StartDBClusterResult gETStartDBCluster(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<StartDBClusterResult> localVarResp = gETStartDBClusterWithHttpInfo(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Starts an Amazon Neptune DB cluster that was stopped using the Amazon console, the Amazon CLI stop-db-cluster command, or the StopDBCluster API.
     * @param dbClusterIdentifier The DB cluster identifier of the Neptune DB cluster to be started. This parameter is stored as a lowercase string. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;StartDBClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartDBClusterResult> gETStartDBClusterWithHttpInfo(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETStartDBClusterValidateBeforeCall(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<StartDBClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Starts an Amazon Neptune DB cluster that was stopped using the Amazon console, the Amazon CLI stop-db-cluster command, or the StopDBCluster API.
     * @param dbClusterIdentifier The DB cluster identifier of the Neptune DB cluster to be started. This parameter is stored as a lowercase string. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETStartDBClusterAsync(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<StartDBClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETStartDBClusterValidateBeforeCall(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<StartDBClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETStopDBCluster
     * @param dbClusterIdentifier The DB cluster identifier of the Neptune DB cluster to be stopped. This parameter is stored as a lowercase string. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETStopDBClusterCall(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=StopDBCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterIdentifier", dbClusterIdentifier));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETStopDBClusterValidateBeforeCall(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterIdentifier' is set
        if (dbClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterIdentifier' when calling gETStopDBCluster(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETStopDBCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETStopDBCluster(Async)");
        }

        return gETStopDBClusterCall(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Stops an Amazon Neptune DB cluster. When you stop a DB cluster, Neptune retains the DB cluster&#39;s metadata, including its endpoints and DB parameter groups.&lt;/p&gt; &lt;p&gt;Neptune also retains the transaction logs so you can do a point-in-time restore if necessary.&lt;/p&gt;
     * @param dbClusterIdentifier The DB cluster identifier of the Neptune DB cluster to be stopped. This parameter is stored as a lowercase string. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return StopDBClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public StopDBClusterResult gETStopDBCluster(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<StopDBClusterResult> localVarResp = gETStopDBClusterWithHttpInfo(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Stops an Amazon Neptune DB cluster. When you stop a DB cluster, Neptune retains the DB cluster&#39;s metadata, including its endpoints and DB parameter groups.&lt;/p&gt; &lt;p&gt;Neptune also retains the transaction logs so you can do a point-in-time restore if necessary.&lt;/p&gt;
     * @param dbClusterIdentifier The DB cluster identifier of the Neptune DB cluster to be stopped. This parameter is stored as a lowercase string. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;StopDBClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StopDBClusterResult> gETStopDBClusterWithHttpInfo(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETStopDBClusterValidateBeforeCall(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<StopDBClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Stops an Amazon Neptune DB cluster. When you stop a DB cluster, Neptune retains the DB cluster&#39;s metadata, including its endpoints and DB parameter groups.&lt;/p&gt; &lt;p&gt;Neptune also retains the transaction logs so you can do a point-in-time restore if necessary.&lt;/p&gt;
     * @param dbClusterIdentifier The DB cluster identifier of the Neptune DB cluster to be stopped. This parameter is stored as a lowercase string. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETStopDBClusterAsync(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<StopDBClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETStopDBClusterValidateBeforeCall(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<StopDBClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTAddRoleToDBCluster
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addRoleToDBClusterMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterRoleAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterRoleQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAddRoleToDBClusterCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddRoleToDBClusterMessage addRoleToDBClusterMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addRoleToDBClusterMessage;

        // create path and map variables
        String localVarPath = "/#Action=AddRoleToDBCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTAddRoleToDBClusterValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddRoleToDBClusterMessage addRoleToDBClusterMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTAddRoleToDBCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTAddRoleToDBCluster(Async)");
        }

        return pOSTAddRoleToDBClusterCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addRoleToDBClusterMessage, _callback);

    }

    /**
     * 
     * Associates an Identity and Access Management (IAM) role with an Neptune DB cluster.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addRoleToDBClusterMessage  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterRoleAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterRoleQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTAddRoleToDBCluster(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddRoleToDBClusterMessage addRoleToDBClusterMessage) throws ApiException {
        pOSTAddRoleToDBClusterWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addRoleToDBClusterMessage);
    }

    /**
     * 
     * Associates an Identity and Access Management (IAM) role with an Neptune DB cluster.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addRoleToDBClusterMessage  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterRoleAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterRoleQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTAddRoleToDBClusterWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddRoleToDBClusterMessage addRoleToDBClusterMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTAddRoleToDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addRoleToDBClusterMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Associates an Identity and Access Management (IAM) role with an Neptune DB cluster.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addRoleToDBClusterMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterRoleAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterRoleQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAddRoleToDBClusterAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddRoleToDBClusterMessage addRoleToDBClusterMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTAddRoleToDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addRoleToDBClusterMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTAddSourceIdentifierToSubscription
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addSourceIdentifierToSubscriptionMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAddSourceIdentifierToSubscriptionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddSourceIdentifierToSubscriptionMessage addSourceIdentifierToSubscriptionMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addSourceIdentifierToSubscriptionMessage;

        // create path and map variables
        String localVarPath = "/#Action=AddSourceIdentifierToSubscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTAddSourceIdentifierToSubscriptionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddSourceIdentifierToSubscriptionMessage addSourceIdentifierToSubscriptionMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTAddSourceIdentifierToSubscription(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTAddSourceIdentifierToSubscription(Async)");
        }

        return pOSTAddSourceIdentifierToSubscriptionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addSourceIdentifierToSubscriptionMessage, _callback);

    }

    /**
     * 
     * Adds a source identifier to an existing event notification subscription.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addSourceIdentifierToSubscriptionMessage  (optional)
     * @return AddSourceIdentifierToSubscriptionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public AddSourceIdentifierToSubscriptionResult pOSTAddSourceIdentifierToSubscription(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddSourceIdentifierToSubscriptionMessage addSourceIdentifierToSubscriptionMessage) throws ApiException {
        ApiResponse<AddSourceIdentifierToSubscriptionResult> localVarResp = pOSTAddSourceIdentifierToSubscriptionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addSourceIdentifierToSubscriptionMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds a source identifier to an existing event notification subscription.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addSourceIdentifierToSubscriptionMessage  (optional)
     * @return ApiResponse&lt;AddSourceIdentifierToSubscriptionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddSourceIdentifierToSubscriptionResult> pOSTAddSourceIdentifierToSubscriptionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddSourceIdentifierToSubscriptionMessage addSourceIdentifierToSubscriptionMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTAddSourceIdentifierToSubscriptionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addSourceIdentifierToSubscriptionMessage, null);
        Type localVarReturnType = new TypeToken<AddSourceIdentifierToSubscriptionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a source identifier to an existing event notification subscription.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addSourceIdentifierToSubscriptionMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAddSourceIdentifierToSubscriptionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddSourceIdentifierToSubscriptionMessage addSourceIdentifierToSubscriptionMessage, final ApiCallback<AddSourceIdentifierToSubscriptionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTAddSourceIdentifierToSubscriptionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addSourceIdentifierToSubscriptionMessage, _callback);
        Type localVarReturnType = new TypeToken<AddSourceIdentifierToSubscriptionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTAddTagsToResource
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addTagsToResourceMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAddTagsToResourceCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddTagsToResourceMessage addTagsToResourceMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addTagsToResourceMessage;

        // create path and map variables
        String localVarPath = "/#Action=AddTagsToResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTAddTagsToResourceValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddTagsToResourceMessage addTagsToResourceMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTAddTagsToResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTAddTagsToResource(Async)");
        }

        return pOSTAddTagsToResourceCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addTagsToResourceMessage, _callback);

    }

    /**
     * 
     * Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addTagsToResourceMessage  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTAddTagsToResource(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddTagsToResourceMessage addTagsToResourceMessage) throws ApiException {
        pOSTAddTagsToResourceWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addTagsToResourceMessage);
    }

    /**
     * 
     * Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addTagsToResourceMessage  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTAddTagsToResourceWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddTagsToResourceMessage addTagsToResourceMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTAddTagsToResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addTagsToResourceMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addTagsToResourceMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAddTagsToResourceAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddTagsToResourceMessage addTagsToResourceMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTAddTagsToResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addTagsToResourceMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTApplyPendingMaintenanceAction
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applyPendingMaintenanceActionMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTApplyPendingMaintenanceActionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ApplyPendingMaintenanceActionMessage applyPendingMaintenanceActionMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applyPendingMaintenanceActionMessage;

        // create path and map variables
        String localVarPath = "/#Action=ApplyPendingMaintenanceAction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTApplyPendingMaintenanceActionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ApplyPendingMaintenanceActionMessage applyPendingMaintenanceActionMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTApplyPendingMaintenanceAction(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTApplyPendingMaintenanceAction(Async)");
        }

        return pOSTApplyPendingMaintenanceActionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applyPendingMaintenanceActionMessage, _callback);

    }

    /**
     * 
     * Applies a pending maintenance action to a resource (for example, to a DB instance).
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applyPendingMaintenanceActionMessage  (optional)
     * @return ApplyPendingMaintenanceActionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApplyPendingMaintenanceActionResult pOSTApplyPendingMaintenanceAction(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ApplyPendingMaintenanceActionMessage applyPendingMaintenanceActionMessage) throws ApiException {
        ApiResponse<ApplyPendingMaintenanceActionResult> localVarResp = pOSTApplyPendingMaintenanceActionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applyPendingMaintenanceActionMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Applies a pending maintenance action to a resource (for example, to a DB instance).
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applyPendingMaintenanceActionMessage  (optional)
     * @return ApiResponse&lt;ApplyPendingMaintenanceActionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplyPendingMaintenanceActionResult> pOSTApplyPendingMaintenanceActionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ApplyPendingMaintenanceActionMessage applyPendingMaintenanceActionMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTApplyPendingMaintenanceActionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applyPendingMaintenanceActionMessage, null);
        Type localVarReturnType = new TypeToken<ApplyPendingMaintenanceActionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Applies a pending maintenance action to a resource (for example, to a DB instance).
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applyPendingMaintenanceActionMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTApplyPendingMaintenanceActionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ApplyPendingMaintenanceActionMessage applyPendingMaintenanceActionMessage, final ApiCallback<ApplyPendingMaintenanceActionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTApplyPendingMaintenanceActionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applyPendingMaintenanceActionMessage, _callback);
        Type localVarReturnType = new TypeToken<ApplyPendingMaintenanceActionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCopyDBClusterParameterGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param copyDBClusterParameterGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCopyDBClusterParameterGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CopyDBClusterParameterGroupMessage copyDBClusterParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = copyDBClusterParameterGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=CopyDBClusterParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCopyDBClusterParameterGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CopyDBClusterParameterGroupMessage copyDBClusterParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCopyDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCopyDBClusterParameterGroup(Async)");
        }

        return pOSTCopyDBClusterParameterGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, copyDBClusterParameterGroupMessage, _callback);

    }

    /**
     * 
     * Copies the specified DB cluster parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param copyDBClusterParameterGroupMessage  (optional)
     * @return CopyDBClusterParameterGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public CopyDBClusterParameterGroupResult pOSTCopyDBClusterParameterGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CopyDBClusterParameterGroupMessage copyDBClusterParameterGroupMessage) throws ApiException {
        ApiResponse<CopyDBClusterParameterGroupResult> localVarResp = pOSTCopyDBClusterParameterGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, copyDBClusterParameterGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Copies the specified DB cluster parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param copyDBClusterParameterGroupMessage  (optional)
     * @return ApiResponse&lt;CopyDBClusterParameterGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CopyDBClusterParameterGroupResult> pOSTCopyDBClusterParameterGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CopyDBClusterParameterGroupMessage copyDBClusterParameterGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCopyDBClusterParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, copyDBClusterParameterGroupMessage, null);
        Type localVarReturnType = new TypeToken<CopyDBClusterParameterGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Copies the specified DB cluster parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param copyDBClusterParameterGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCopyDBClusterParameterGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CopyDBClusterParameterGroupMessage copyDBClusterParameterGroupMessage, final ApiCallback<CopyDBClusterParameterGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCopyDBClusterParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, copyDBClusterParameterGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<CopyDBClusterParameterGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCopyDBClusterSnapshot
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param copyDBClusterSnapshotMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCopyDBClusterSnapshotCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CopyDBClusterSnapshotMessage copyDBClusterSnapshotMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = copyDBClusterSnapshotMessage;

        // create path and map variables
        String localVarPath = "/#Action=CopyDBClusterSnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCopyDBClusterSnapshotValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CopyDBClusterSnapshotMessage copyDBClusterSnapshotMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCopyDBClusterSnapshot(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCopyDBClusterSnapshot(Async)");
        }

        return pOSTCopyDBClusterSnapshotCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, copyDBClusterSnapshotMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Copies a snapshot of a DB cluster.&lt;/p&gt; &lt;p&gt;To copy a DB cluster snapshot from a shared manual DB cluster snapshot, &lt;code&gt;SourceDBClusterSnapshotIdentifier&lt;/code&gt; must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param copyDBClusterSnapshotMessage  (optional)
     * @return CopyDBClusterSnapshotResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public CopyDBClusterSnapshotResult pOSTCopyDBClusterSnapshot(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CopyDBClusterSnapshotMessage copyDBClusterSnapshotMessage) throws ApiException {
        ApiResponse<CopyDBClusterSnapshotResult> localVarResp = pOSTCopyDBClusterSnapshotWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, copyDBClusterSnapshotMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Copies a snapshot of a DB cluster.&lt;/p&gt; &lt;p&gt;To copy a DB cluster snapshot from a shared manual DB cluster snapshot, &lt;code&gt;SourceDBClusterSnapshotIdentifier&lt;/code&gt; must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param copyDBClusterSnapshotMessage  (optional)
     * @return ApiResponse&lt;CopyDBClusterSnapshotResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CopyDBClusterSnapshotResult> pOSTCopyDBClusterSnapshotWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CopyDBClusterSnapshotMessage copyDBClusterSnapshotMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCopyDBClusterSnapshotValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, copyDBClusterSnapshotMessage, null);
        Type localVarReturnType = new TypeToken<CopyDBClusterSnapshotResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Copies a snapshot of a DB cluster.&lt;/p&gt; &lt;p&gt;To copy a DB cluster snapshot from a shared manual DB cluster snapshot, &lt;code&gt;SourceDBClusterSnapshotIdentifier&lt;/code&gt; must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param copyDBClusterSnapshotMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCopyDBClusterSnapshotAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CopyDBClusterSnapshotMessage copyDBClusterSnapshotMessage, final ApiCallback<CopyDBClusterSnapshotResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCopyDBClusterSnapshotValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, copyDBClusterSnapshotMessage, _callback);
        Type localVarReturnType = new TypeToken<CopyDBClusterSnapshotResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCopyDBParameterGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param copyDBParameterGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCopyDBParameterGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CopyDBParameterGroupMessage copyDBParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = copyDBParameterGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=CopyDBParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCopyDBParameterGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CopyDBParameterGroupMessage copyDBParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCopyDBParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCopyDBParameterGroup(Async)");
        }

        return pOSTCopyDBParameterGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, copyDBParameterGroupMessage, _callback);

    }

    /**
     * 
     * Copies the specified DB parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param copyDBParameterGroupMessage  (optional)
     * @return CopyDBParameterGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public CopyDBParameterGroupResult pOSTCopyDBParameterGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CopyDBParameterGroupMessage copyDBParameterGroupMessage) throws ApiException {
        ApiResponse<CopyDBParameterGroupResult> localVarResp = pOSTCopyDBParameterGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, copyDBParameterGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Copies the specified DB parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param copyDBParameterGroupMessage  (optional)
     * @return ApiResponse&lt;CopyDBParameterGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CopyDBParameterGroupResult> pOSTCopyDBParameterGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CopyDBParameterGroupMessage copyDBParameterGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCopyDBParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, copyDBParameterGroupMessage, null);
        Type localVarReturnType = new TypeToken<CopyDBParameterGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Copies the specified DB parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param copyDBParameterGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCopyDBParameterGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CopyDBParameterGroupMessage copyDBParameterGroupMessage, final ApiCallback<CopyDBParameterGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCopyDBParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, copyDBParameterGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<CopyDBParameterGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateDBCluster
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBClusterMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateDBClusterCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterMessage createDBClusterMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDBClusterMessage;

        // create path and map variables
        String localVarPath = "/#Action=CreateDBCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateDBClusterValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterMessage createDBClusterMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateDBCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateDBCluster(Async)");
        }

        return pOSTCreateDBClusterCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new Amazon Neptune DB cluster.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;ReplicationSourceIdentifier&lt;/code&gt; parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.&lt;/p&gt; &lt;p&gt;Note that when you create a new cluster using &lt;code&gt;CreateDBCluster&lt;/code&gt; directly, deletion protection is disabled by default (when you create a new production cluster in the console, deletion protection is enabled by default). You can only delete a DB cluster if its &lt;code&gt;DeletionProtection&lt;/code&gt; field is set to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBClusterMessage  (optional)
     * @return CreateDBClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateDBClusterResult pOSTCreateDBCluster(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterMessage createDBClusterMessage) throws ApiException {
        ApiResponse<CreateDBClusterResult> localVarResp = pOSTCreateDBClusterWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new Amazon Neptune DB cluster.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;ReplicationSourceIdentifier&lt;/code&gt; parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.&lt;/p&gt; &lt;p&gt;Note that when you create a new cluster using &lt;code&gt;CreateDBCluster&lt;/code&gt; directly, deletion protection is disabled by default (when you create a new production cluster in the console, deletion protection is enabled by default). You can only delete a DB cluster if its &lt;code&gt;DeletionProtection&lt;/code&gt; field is set to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBClusterMessage  (optional)
     * @return ApiResponse&lt;CreateDBClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDBClusterResult> pOSTCreateDBClusterWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterMessage createDBClusterMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterMessage, null);
        Type localVarReturnType = new TypeToken<CreateDBClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new Amazon Neptune DB cluster.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;ReplicationSourceIdentifier&lt;/code&gt; parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.&lt;/p&gt; &lt;p&gt;Note that when you create a new cluster using &lt;code&gt;CreateDBCluster&lt;/code&gt; directly, deletion protection is disabled by default (when you create a new production cluster in the console, deletion protection is enabled by default). You can only delete a DB cluster if its &lt;code&gt;DeletionProtection&lt;/code&gt; field is set to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBClusterMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateDBClusterAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterMessage createDBClusterMessage, final ApiCallback<CreateDBClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterMessage, _callback);
        Type localVarReturnType = new TypeToken<CreateDBClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateDBClusterEndpoint
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBClusterEndpointMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterEndpointQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterEndpointAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateDBClusterEndpointCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterEndpointMessage createDBClusterEndpointMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDBClusterEndpointMessage;

        // create path and map variables
        String localVarPath = "/#Action=CreateDBClusterEndpoint";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateDBClusterEndpointValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterEndpointMessage createDBClusterEndpointMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateDBClusterEndpoint(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateDBClusterEndpoint(Async)");
        }

        return pOSTCreateDBClusterEndpointCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterEndpointMessage, _callback);

    }

    /**
     * 
     * Creates a new custom endpoint and associates it with an Amazon Neptune DB cluster.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBClusterEndpointMessage  (optional)
     * @return CreateDBClusterEndpointOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterEndpointQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterEndpointAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateDBClusterEndpointOutput pOSTCreateDBClusterEndpoint(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterEndpointMessage createDBClusterEndpointMessage) throws ApiException {
        ApiResponse<CreateDBClusterEndpointOutput> localVarResp = pOSTCreateDBClusterEndpointWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterEndpointMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new custom endpoint and associates it with an Amazon Neptune DB cluster.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBClusterEndpointMessage  (optional)
     * @return ApiResponse&lt;CreateDBClusterEndpointOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterEndpointQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterEndpointAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDBClusterEndpointOutput> pOSTCreateDBClusterEndpointWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterEndpointMessage createDBClusterEndpointMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateDBClusterEndpointValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterEndpointMessage, null);
        Type localVarReturnType = new TypeToken<CreateDBClusterEndpointOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new custom endpoint and associates it with an Amazon Neptune DB cluster.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBClusterEndpointMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterEndpointQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterEndpointAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateDBClusterEndpointAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterEndpointMessage createDBClusterEndpointMessage, final ApiCallback<CreateDBClusterEndpointOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateDBClusterEndpointValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterEndpointMessage, _callback);
        Type localVarReturnType = new TypeToken<CreateDBClusterEndpointOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateDBClusterParameterGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBClusterParameterGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateDBClusterParameterGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterParameterGroupMessage createDBClusterParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDBClusterParameterGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=CreateDBClusterParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateDBClusterParameterGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterParameterGroupMessage createDBClusterParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateDBClusterParameterGroup(Async)");
        }

        return pOSTCreateDBClusterParameterGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterParameterGroupMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new DB cluster parameter group.&lt;/p&gt; &lt;p&gt;Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.&lt;/p&gt; &lt;p&gt; A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using &lt;a&gt;ModifyDBClusterParameterGroup&lt;/a&gt;. Once you&#39;ve created a DB cluster parameter group, you need to associate it with your DB cluster using &lt;a&gt;ModifyDBCluster&lt;/a&gt;. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.&lt;/p&gt; &lt;important&gt; &lt;p&gt;After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/rds/\&quot;&gt;Amazon Neptune console&lt;/a&gt; or the &lt;a&gt;DescribeDBClusterParameters&lt;/a&gt; command to verify that your DB cluster parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBClusterParameterGroupMessage  (optional)
     * @return CreateDBClusterParameterGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateDBClusterParameterGroupResult pOSTCreateDBClusterParameterGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterParameterGroupMessage createDBClusterParameterGroupMessage) throws ApiException {
        ApiResponse<CreateDBClusterParameterGroupResult> localVarResp = pOSTCreateDBClusterParameterGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterParameterGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new DB cluster parameter group.&lt;/p&gt; &lt;p&gt;Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.&lt;/p&gt; &lt;p&gt; A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using &lt;a&gt;ModifyDBClusterParameterGroup&lt;/a&gt;. Once you&#39;ve created a DB cluster parameter group, you need to associate it with your DB cluster using &lt;a&gt;ModifyDBCluster&lt;/a&gt;. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.&lt;/p&gt; &lt;important&gt; &lt;p&gt;After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/rds/\&quot;&gt;Amazon Neptune console&lt;/a&gt; or the &lt;a&gt;DescribeDBClusterParameters&lt;/a&gt; command to verify that your DB cluster parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBClusterParameterGroupMessage  (optional)
     * @return ApiResponse&lt;CreateDBClusterParameterGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDBClusterParameterGroupResult> pOSTCreateDBClusterParameterGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterParameterGroupMessage createDBClusterParameterGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateDBClusterParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterParameterGroupMessage, null);
        Type localVarReturnType = new TypeToken<CreateDBClusterParameterGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new DB cluster parameter group.&lt;/p&gt; &lt;p&gt;Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.&lt;/p&gt; &lt;p&gt; A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using &lt;a&gt;ModifyDBClusterParameterGroup&lt;/a&gt;. Once you&#39;ve created a DB cluster parameter group, you need to associate it with your DB cluster using &lt;a&gt;ModifyDBCluster&lt;/a&gt;. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.&lt;/p&gt; &lt;important&gt; &lt;p&gt;After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/rds/\&quot;&gt;Amazon Neptune console&lt;/a&gt; or the &lt;a&gt;DescribeDBClusterParameters&lt;/a&gt; command to verify that your DB cluster parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBClusterParameterGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateDBClusterParameterGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterParameterGroupMessage createDBClusterParameterGroupMessage, final ApiCallback<CreateDBClusterParameterGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateDBClusterParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterParameterGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<CreateDBClusterParameterGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateDBClusterSnapshot
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBClusterSnapshotMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateDBClusterSnapshotCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterSnapshotMessage createDBClusterSnapshotMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDBClusterSnapshotMessage;

        // create path and map variables
        String localVarPath = "/#Action=CreateDBClusterSnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateDBClusterSnapshotValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterSnapshotMessage createDBClusterSnapshotMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateDBClusterSnapshot(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateDBClusterSnapshot(Async)");
        }

        return pOSTCreateDBClusterSnapshotCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterSnapshotMessage, _callback);

    }

    /**
     * 
     * Creates a snapshot of a DB cluster.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBClusterSnapshotMessage  (optional)
     * @return CreateDBClusterSnapshotResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateDBClusterSnapshotResult pOSTCreateDBClusterSnapshot(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterSnapshotMessage createDBClusterSnapshotMessage) throws ApiException {
        ApiResponse<CreateDBClusterSnapshotResult> localVarResp = pOSTCreateDBClusterSnapshotWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterSnapshotMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a snapshot of a DB cluster.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBClusterSnapshotMessage  (optional)
     * @return ApiResponse&lt;CreateDBClusterSnapshotResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDBClusterSnapshotResult> pOSTCreateDBClusterSnapshotWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterSnapshotMessage createDBClusterSnapshotMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateDBClusterSnapshotValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterSnapshotMessage, null);
        Type localVarReturnType = new TypeToken<CreateDBClusterSnapshotResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a snapshot of a DB cluster.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBClusterSnapshotMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateDBClusterSnapshotAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterSnapshotMessage createDBClusterSnapshotMessage, final ApiCallback<CreateDBClusterSnapshotResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateDBClusterSnapshotValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterSnapshotMessage, _callback);
        Type localVarReturnType = new TypeToken<CreateDBClusterSnapshotResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateDBInstance
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBInstanceMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InstanceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> ProvisionedIopsNotAvailableInAZFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> DomainNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateDBInstanceCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBInstanceMessage createDBInstanceMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDBInstanceMessage;

        // create path and map variables
        String localVarPath = "/#Action=CreateDBInstance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateDBInstanceValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBInstanceMessage createDBInstanceMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateDBInstance(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateDBInstance(Async)");
        }

        return pOSTCreateDBInstanceCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBInstanceMessage, _callback);

    }

    /**
     * 
     * Creates a new DB instance.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBInstanceMessage  (optional)
     * @return CreateDBInstanceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InstanceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> ProvisionedIopsNotAvailableInAZFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> DomainNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateDBInstanceResult pOSTCreateDBInstance(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBInstanceMessage createDBInstanceMessage) throws ApiException {
        ApiResponse<CreateDBInstanceResult> localVarResp = pOSTCreateDBInstanceWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBInstanceMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new DB instance.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBInstanceMessage  (optional)
     * @return ApiResponse&lt;CreateDBInstanceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InstanceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> ProvisionedIopsNotAvailableInAZFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> DomainNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDBInstanceResult> pOSTCreateDBInstanceWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBInstanceMessage createDBInstanceMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateDBInstanceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBInstanceMessage, null);
        Type localVarReturnType = new TypeToken<CreateDBInstanceResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new DB instance.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBInstanceMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InstanceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> ProvisionedIopsNotAvailableInAZFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> DomainNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateDBInstanceAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBInstanceMessage createDBInstanceMessage, final ApiCallback<CreateDBInstanceResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateDBInstanceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBInstanceMessage, _callback);
        Type localVarReturnType = new TypeToken<CreateDBInstanceResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateDBParameterGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBParameterGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateDBParameterGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBParameterGroupMessage createDBParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDBParameterGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=CreateDBParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateDBParameterGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBParameterGroupMessage createDBParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateDBParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateDBParameterGroup(Async)");
        }

        return pOSTCreateDBParameterGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBParameterGroupMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new DB parameter group.&lt;/p&gt; &lt;p&gt;A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using &lt;i&gt;ModifyDBParameterGroup&lt;/i&gt;. Once you&#39;ve created a DB parameter group, you need to associate it with your DB instance using &lt;i&gt;ModifyDBInstance&lt;/i&gt;. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.&lt;/p&gt; &lt;important&gt; &lt;p&gt;After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the Amazon Neptune console or the &lt;i&gt;DescribeDBParameters&lt;/i&gt; command to verify that your DB parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBParameterGroupMessage  (optional)
     * @return CreateDBParameterGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateDBParameterGroupResult pOSTCreateDBParameterGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBParameterGroupMessage createDBParameterGroupMessage) throws ApiException {
        ApiResponse<CreateDBParameterGroupResult> localVarResp = pOSTCreateDBParameterGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBParameterGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new DB parameter group.&lt;/p&gt; &lt;p&gt;A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using &lt;i&gt;ModifyDBParameterGroup&lt;/i&gt;. Once you&#39;ve created a DB parameter group, you need to associate it with your DB instance using &lt;i&gt;ModifyDBInstance&lt;/i&gt;. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.&lt;/p&gt; &lt;important&gt; &lt;p&gt;After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the Amazon Neptune console or the &lt;i&gt;DescribeDBParameters&lt;/i&gt; command to verify that your DB parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBParameterGroupMessage  (optional)
     * @return ApiResponse&lt;CreateDBParameterGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDBParameterGroupResult> pOSTCreateDBParameterGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBParameterGroupMessage createDBParameterGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateDBParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBParameterGroupMessage, null);
        Type localVarReturnType = new TypeToken<CreateDBParameterGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new DB parameter group.&lt;/p&gt; &lt;p&gt;A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using &lt;i&gt;ModifyDBParameterGroup&lt;/i&gt;. Once you&#39;ve created a DB parameter group, you need to associate it with your DB instance using &lt;i&gt;ModifyDBInstance&lt;/i&gt;. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.&lt;/p&gt; &lt;important&gt; &lt;p&gt;After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the Amazon Neptune console or the &lt;i&gt;DescribeDBParameters&lt;/i&gt; command to verify that your DB parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBParameterGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateDBParameterGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBParameterGroupMessage createDBParameterGroupMessage, final ApiCallback<CreateDBParameterGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateDBParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBParameterGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<CreateDBParameterGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateDBSubnetGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBSubnetGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateDBSubnetGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBSubnetGroupMessage createDBSubnetGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDBSubnetGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=CreateDBSubnetGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateDBSubnetGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBSubnetGroupMessage createDBSubnetGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateDBSubnetGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateDBSubnetGroup(Async)");
        }

        return pOSTCreateDBSubnetGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBSubnetGroupMessage, _callback);

    }

    /**
     * 
     * Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the Amazon Region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBSubnetGroupMessage  (optional)
     * @return CreateDBSubnetGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public CreateDBSubnetGroupResult pOSTCreateDBSubnetGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBSubnetGroupMessage createDBSubnetGroupMessage) throws ApiException {
        ApiResponse<CreateDBSubnetGroupResult> localVarResp = pOSTCreateDBSubnetGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBSubnetGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the Amazon Region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBSubnetGroupMessage  (optional)
     * @return ApiResponse&lt;CreateDBSubnetGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDBSubnetGroupResult> pOSTCreateDBSubnetGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBSubnetGroupMessage createDBSubnetGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateDBSubnetGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBSubnetGroupMessage, null);
        Type localVarReturnType = new TypeToken<CreateDBSubnetGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the Amazon Region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBSubnetGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateDBSubnetGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBSubnetGroupMessage createDBSubnetGroupMessage, final ApiCallback<CreateDBSubnetGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateDBSubnetGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBSubnetGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<CreateDBSubnetGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateEventSubscription
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createEventSubscriptionMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionAlreadyExistFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateEventSubscriptionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateEventSubscriptionMessage createEventSubscriptionMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createEventSubscriptionMessage;

        // create path and map variables
        String localVarPath = "/#Action=CreateEventSubscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateEventSubscriptionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateEventSubscriptionMessage createEventSubscriptionMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateEventSubscription(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateEventSubscription(Async)");
        }

        return pOSTCreateEventSubscriptionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createEventSubscriptionMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.&lt;/p&gt; &lt;p&gt;You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType &#x3D; db-instance, SourceIds &#x3D; mydbinstance1, mydbinstance2 and EventCategories &#x3D; Availability, Backup.&lt;/p&gt; &lt;p&gt;If you specify both the SourceType and SourceIds, such as SourceType &#x3D; db-instance and SourceIdentifier &#x3D; myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createEventSubscriptionMessage  (optional)
     * @return CreateEventSubscriptionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionAlreadyExistFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateEventSubscriptionResult pOSTCreateEventSubscription(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateEventSubscriptionMessage createEventSubscriptionMessage) throws ApiException {
        ApiResponse<CreateEventSubscriptionResult> localVarResp = pOSTCreateEventSubscriptionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createEventSubscriptionMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.&lt;/p&gt; &lt;p&gt;You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType &#x3D; db-instance, SourceIds &#x3D; mydbinstance1, mydbinstance2 and EventCategories &#x3D; Availability, Backup.&lt;/p&gt; &lt;p&gt;If you specify both the SourceType and SourceIds, such as SourceType &#x3D; db-instance and SourceIdentifier &#x3D; myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createEventSubscriptionMessage  (optional)
     * @return ApiResponse&lt;CreateEventSubscriptionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionAlreadyExistFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateEventSubscriptionResult> pOSTCreateEventSubscriptionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateEventSubscriptionMessage createEventSubscriptionMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateEventSubscriptionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createEventSubscriptionMessage, null);
        Type localVarReturnType = new TypeToken<CreateEventSubscriptionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.&lt;/p&gt; &lt;p&gt;You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType &#x3D; db-instance, SourceIds &#x3D; mydbinstance1, mydbinstance2 and EventCategories &#x3D; Availability, Backup.&lt;/p&gt; &lt;p&gt;If you specify both the SourceType and SourceIds, such as SourceType &#x3D; db-instance and SourceIdentifier &#x3D; myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createEventSubscriptionMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionAlreadyExistFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateEventSubscriptionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateEventSubscriptionMessage createEventSubscriptionMessage, final ApiCallback<CreateEventSubscriptionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateEventSubscriptionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createEventSubscriptionMessage, _callback);
        Type localVarReturnType = new TypeToken<CreateEventSubscriptionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateGlobalCluster
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createGlobalClusterMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> GlobalClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateGlobalClusterCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateGlobalClusterMessage createGlobalClusterMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGlobalClusterMessage;

        // create path and map variables
        String localVarPath = "/#Action=CreateGlobalCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateGlobalClusterValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateGlobalClusterMessage createGlobalClusterMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateGlobalCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateGlobalCluster(Async)");
        }

        return pOSTCreateGlobalClusterCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createGlobalClusterMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a Neptune global database spread across multiple Amazon Regions. The global database contains a single primary cluster with read-write capability, and read-only secondary clusters that receive data from the primary cluster through high-speed replication performed by the Neptune storage subsystem.&lt;/p&gt; &lt;p&gt;You can create a global database that is initially empty, and then add a primary cluster and secondary clusters to it, or you can specify an existing Neptune cluster during the create operation to become the primary cluster of the global database.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createGlobalClusterMessage  (optional)
     * @return CreateGlobalClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> GlobalClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateGlobalClusterResult pOSTCreateGlobalCluster(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateGlobalClusterMessage createGlobalClusterMessage) throws ApiException {
        ApiResponse<CreateGlobalClusterResult> localVarResp = pOSTCreateGlobalClusterWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createGlobalClusterMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a Neptune global database spread across multiple Amazon Regions. The global database contains a single primary cluster with read-write capability, and read-only secondary clusters that receive data from the primary cluster through high-speed replication performed by the Neptune storage subsystem.&lt;/p&gt; &lt;p&gt;You can create a global database that is initially empty, and then add a primary cluster and secondary clusters to it, or you can specify an existing Neptune cluster during the create operation to become the primary cluster of the global database.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createGlobalClusterMessage  (optional)
     * @return ApiResponse&lt;CreateGlobalClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> GlobalClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGlobalClusterResult> pOSTCreateGlobalClusterWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateGlobalClusterMessage createGlobalClusterMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateGlobalClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createGlobalClusterMessage, null);
        Type localVarReturnType = new TypeToken<CreateGlobalClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a Neptune global database spread across multiple Amazon Regions. The global database contains a single primary cluster with read-write capability, and read-only secondary clusters that receive data from the primary cluster through high-speed replication performed by the Neptune storage subsystem.&lt;/p&gt; &lt;p&gt;You can create a global database that is initially empty, and then add a primary cluster and secondary clusters to it, or you can specify an existing Neptune cluster during the create operation to become the primary cluster of the global database.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createGlobalClusterMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> GlobalClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateGlobalClusterAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateGlobalClusterMessage createGlobalClusterMessage, final ApiCallback<CreateGlobalClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateGlobalClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createGlobalClusterMessage, _callback);
        Type localVarReturnType = new TypeToken<CreateGlobalClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteDBCluster
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBClusterMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteDBClusterCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterMessage deleteDBClusterMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteDBClusterMessage;

        // create path and map variables
        String localVarPath = "/#Action=DeleteDBCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteDBClusterValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterMessage deleteDBClusterMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteDBCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteDBCluster(Async)");
        }

        return pOSTDeleteDBClusterCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can&#39;t be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.&lt;/p&gt; &lt;p&gt;Note that the DB Cluster cannot be deleted if deletion protection is enabled. To delete it, you must first set its &lt;code&gt;DeletionProtection&lt;/code&gt; field to &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBClusterMessage  (optional)
     * @return DeleteDBClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDBClusterResult pOSTDeleteDBCluster(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterMessage deleteDBClusterMessage) throws ApiException {
        ApiResponse<DeleteDBClusterResult> localVarResp = pOSTDeleteDBClusterWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can&#39;t be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.&lt;/p&gt; &lt;p&gt;Note that the DB Cluster cannot be deleted if deletion protection is enabled. To delete it, you must first set its &lt;code&gt;DeletionProtection&lt;/code&gt; field to &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBClusterMessage  (optional)
     * @return ApiResponse&lt;DeleteDBClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteDBClusterResult> pOSTDeleteDBClusterWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterMessage deleteDBClusterMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterMessage, null);
        Type localVarReturnType = new TypeToken<DeleteDBClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can&#39;t be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.&lt;/p&gt; &lt;p&gt;Note that the DB Cluster cannot be deleted if deletion protection is enabled. To delete it, you must first set its &lt;code&gt;DeletionProtection&lt;/code&gt; field to &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBClusterMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteDBClusterAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterMessage deleteDBClusterMessage, final ApiCallback<DeleteDBClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterMessage, _callback);
        Type localVarReturnType = new TypeToken<DeleteDBClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteDBClusterEndpoint
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBClusterEndpointMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterEndpointStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterEndpointNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteDBClusterEndpointCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterEndpointMessage deleteDBClusterEndpointMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteDBClusterEndpointMessage;

        // create path and map variables
        String localVarPath = "/#Action=DeleteDBClusterEndpoint";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteDBClusterEndpointValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterEndpointMessage deleteDBClusterEndpointMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteDBClusterEndpoint(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteDBClusterEndpoint(Async)");
        }

        return pOSTDeleteDBClusterEndpointCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterEndpointMessage, _callback);

    }

    /**
     * 
     * Deletes a custom endpoint and removes it from an Amazon Neptune DB cluster.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBClusterEndpointMessage  (optional)
     * @return DeleteDBClusterEndpointOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterEndpointStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterEndpointNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDBClusterEndpointOutput pOSTDeleteDBClusterEndpoint(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterEndpointMessage deleteDBClusterEndpointMessage) throws ApiException {
        ApiResponse<DeleteDBClusterEndpointOutput> localVarResp = pOSTDeleteDBClusterEndpointWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterEndpointMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a custom endpoint and removes it from an Amazon Neptune DB cluster.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBClusterEndpointMessage  (optional)
     * @return ApiResponse&lt;DeleteDBClusterEndpointOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterEndpointStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterEndpointNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteDBClusterEndpointOutput> pOSTDeleteDBClusterEndpointWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterEndpointMessage deleteDBClusterEndpointMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteDBClusterEndpointValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterEndpointMessage, null);
        Type localVarReturnType = new TypeToken<DeleteDBClusterEndpointOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a custom endpoint and removes it from an Amazon Neptune DB cluster.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBClusterEndpointMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterEndpointStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterEndpointNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteDBClusterEndpointAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterEndpointMessage deleteDBClusterEndpointMessage, final ApiCallback<DeleteDBClusterEndpointOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteDBClusterEndpointValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterEndpointMessage, _callback);
        Type localVarReturnType = new TypeToken<DeleteDBClusterEndpointOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteDBClusterParameterGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBClusterParameterGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteDBClusterParameterGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterParameterGroupMessage deleteDBClusterParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteDBClusterParameterGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=DeleteDBClusterParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteDBClusterParameterGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterParameterGroupMessage deleteDBClusterParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteDBClusterParameterGroup(Async)");
        }

        return pOSTDeleteDBClusterParameterGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterParameterGroupMessage, _callback);

    }

    /**
     * 
     * Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can&#39;t be associated with any DB clusters.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBClusterParameterGroupMessage  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTDeleteDBClusterParameterGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterParameterGroupMessage deleteDBClusterParameterGroupMessage) throws ApiException {
        pOSTDeleteDBClusterParameterGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterParameterGroupMessage);
    }

    /**
     * 
     * Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can&#39;t be associated with any DB clusters.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBClusterParameterGroupMessage  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTDeleteDBClusterParameterGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterParameterGroupMessage deleteDBClusterParameterGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteDBClusterParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterParameterGroupMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can&#39;t be associated with any DB clusters.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBClusterParameterGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteDBClusterParameterGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterParameterGroupMessage deleteDBClusterParameterGroupMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteDBClusterParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterParameterGroupMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteDBClusterSnapshot
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBClusterSnapshotMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteDBClusterSnapshotCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterSnapshotMessage deleteDBClusterSnapshotMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteDBClusterSnapshotMessage;

        // create path and map variables
        String localVarPath = "/#Action=DeleteDBClusterSnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteDBClusterSnapshotValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterSnapshotMessage deleteDBClusterSnapshotMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteDBClusterSnapshot(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteDBClusterSnapshot(Async)");
        }

        return pOSTDeleteDBClusterSnapshotCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterSnapshotMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The DB cluster snapshot must be in the &lt;code&gt;available&lt;/code&gt; state to be deleted.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBClusterSnapshotMessage  (optional)
     * @return DeleteDBClusterSnapshotResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDBClusterSnapshotResult pOSTDeleteDBClusterSnapshot(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterSnapshotMessage deleteDBClusterSnapshotMessage) throws ApiException {
        ApiResponse<DeleteDBClusterSnapshotResult> localVarResp = pOSTDeleteDBClusterSnapshotWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterSnapshotMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The DB cluster snapshot must be in the &lt;code&gt;available&lt;/code&gt; state to be deleted.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBClusterSnapshotMessage  (optional)
     * @return ApiResponse&lt;DeleteDBClusterSnapshotResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteDBClusterSnapshotResult> pOSTDeleteDBClusterSnapshotWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterSnapshotMessage deleteDBClusterSnapshotMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteDBClusterSnapshotValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterSnapshotMessage, null);
        Type localVarReturnType = new TypeToken<DeleteDBClusterSnapshotResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The DB cluster snapshot must be in the &lt;code&gt;available&lt;/code&gt; state to be deleted.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBClusterSnapshotMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteDBClusterSnapshotAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterSnapshotMessage deleteDBClusterSnapshotMessage, final ApiCallback<DeleteDBClusterSnapshotResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteDBClusterSnapshotValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterSnapshotMessage, _callback);
        Type localVarReturnType = new TypeToken<DeleteDBClusterSnapshotResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteDBInstance
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBInstanceMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteDBInstanceCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBInstanceMessage deleteDBInstanceMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteDBInstanceMessage;

        // create path and map variables
        String localVarPath = "/#Action=DeleteDBInstance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteDBInstanceValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBInstanceMessage deleteDBInstanceMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteDBInstance(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteDBInstance(Async)");
        }

        return pOSTDeleteDBInstanceCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBInstanceMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can&#39;t be recovered. Manual DB snapshots of the DB instance to be deleted by &lt;code&gt;DeleteDBInstance&lt;/code&gt; are not deleted.&lt;/p&gt; &lt;p&gt; If you request a final DB snapshot the status of the Amazon Neptune DB instance is &lt;code&gt;deleting&lt;/code&gt; until the DB snapshot is created. The API action &lt;code&gt;DescribeDBInstance&lt;/code&gt; is used to monitor the status of this operation. The action can&#39;t be canceled or reverted once submitted.&lt;/p&gt; &lt;p&gt;Note that when a DB instance is in a failure state and has a status of &lt;code&gt;failed&lt;/code&gt;, &lt;code&gt;incompatible-restore&lt;/code&gt;, or &lt;code&gt;incompatible-network&lt;/code&gt;, you can only delete it when the &lt;code&gt;SkipFinalSnapshot&lt;/code&gt; parameter is set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can&#39;t delete a DB instance if it is the only instance in the DB cluster, or if it has deletion protection enabled.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBInstanceMessage  (optional)
     * @return DeleteDBInstanceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDBInstanceResult pOSTDeleteDBInstance(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBInstanceMessage deleteDBInstanceMessage) throws ApiException {
        ApiResponse<DeleteDBInstanceResult> localVarResp = pOSTDeleteDBInstanceWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBInstanceMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can&#39;t be recovered. Manual DB snapshots of the DB instance to be deleted by &lt;code&gt;DeleteDBInstance&lt;/code&gt; are not deleted.&lt;/p&gt; &lt;p&gt; If you request a final DB snapshot the status of the Amazon Neptune DB instance is &lt;code&gt;deleting&lt;/code&gt; until the DB snapshot is created. The API action &lt;code&gt;DescribeDBInstance&lt;/code&gt; is used to monitor the status of this operation. The action can&#39;t be canceled or reverted once submitted.&lt;/p&gt; &lt;p&gt;Note that when a DB instance is in a failure state and has a status of &lt;code&gt;failed&lt;/code&gt;, &lt;code&gt;incompatible-restore&lt;/code&gt;, or &lt;code&gt;incompatible-network&lt;/code&gt;, you can only delete it when the &lt;code&gt;SkipFinalSnapshot&lt;/code&gt; parameter is set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can&#39;t delete a DB instance if it is the only instance in the DB cluster, or if it has deletion protection enabled.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBInstanceMessage  (optional)
     * @return ApiResponse&lt;DeleteDBInstanceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteDBInstanceResult> pOSTDeleteDBInstanceWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBInstanceMessage deleteDBInstanceMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteDBInstanceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBInstanceMessage, null);
        Type localVarReturnType = new TypeToken<DeleteDBInstanceResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can&#39;t be recovered. Manual DB snapshots of the DB instance to be deleted by &lt;code&gt;DeleteDBInstance&lt;/code&gt; are not deleted.&lt;/p&gt; &lt;p&gt; If you request a final DB snapshot the status of the Amazon Neptune DB instance is &lt;code&gt;deleting&lt;/code&gt; until the DB snapshot is created. The API action &lt;code&gt;DescribeDBInstance&lt;/code&gt; is used to monitor the status of this operation. The action can&#39;t be canceled or reverted once submitted.&lt;/p&gt; &lt;p&gt;Note that when a DB instance is in a failure state and has a status of &lt;code&gt;failed&lt;/code&gt;, &lt;code&gt;incompatible-restore&lt;/code&gt;, or &lt;code&gt;incompatible-network&lt;/code&gt;, you can only delete it when the &lt;code&gt;SkipFinalSnapshot&lt;/code&gt; parameter is set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can&#39;t delete a DB instance if it is the only instance in the DB cluster, or if it has deletion protection enabled.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBInstanceMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteDBInstanceAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBInstanceMessage deleteDBInstanceMessage, final ApiCallback<DeleteDBInstanceResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteDBInstanceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBInstanceMessage, _callback);
        Type localVarReturnType = new TypeToken<DeleteDBInstanceResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteDBParameterGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBParameterGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteDBParameterGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBParameterGroupMessage deleteDBParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteDBParameterGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=DeleteDBParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteDBParameterGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBParameterGroupMessage deleteDBParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteDBParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteDBParameterGroup(Async)");
        }

        return pOSTDeleteDBParameterGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBParameterGroupMessage, _callback);

    }

    /**
     * 
     * Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can&#39;t be associated with any DB instances.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBParameterGroupMessage  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTDeleteDBParameterGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBParameterGroupMessage deleteDBParameterGroupMessage) throws ApiException {
        pOSTDeleteDBParameterGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBParameterGroupMessage);
    }

    /**
     * 
     * Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can&#39;t be associated with any DB instances.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBParameterGroupMessage  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTDeleteDBParameterGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBParameterGroupMessage deleteDBParameterGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteDBParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBParameterGroupMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can&#39;t be associated with any DB instances.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBParameterGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteDBParameterGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBParameterGroupMessage deleteDBParameterGroupMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteDBParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBParameterGroupMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteDBSubnetGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBSubnetGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSubnetStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteDBSubnetGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBSubnetGroupMessage deleteDBSubnetGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteDBSubnetGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=DeleteDBSubnetGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteDBSubnetGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBSubnetGroupMessage deleteDBSubnetGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteDBSubnetGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteDBSubnetGroup(Async)");
        }

        return pOSTDeleteDBSubnetGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBSubnetGroupMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a DB subnet group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The specified database subnet group must not be associated with any DB instances.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBSubnetGroupMessage  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSubnetStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTDeleteDBSubnetGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBSubnetGroupMessage deleteDBSubnetGroupMessage) throws ApiException {
        pOSTDeleteDBSubnetGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBSubnetGroupMessage);
    }

    /**
     * 
     * &lt;p&gt;Deletes a DB subnet group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The specified database subnet group must not be associated with any DB instances.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBSubnetGroupMessage  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSubnetStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTDeleteDBSubnetGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBSubnetGroupMessage deleteDBSubnetGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteDBSubnetGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBSubnetGroupMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a DB subnet group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The specified database subnet group must not be associated with any DB instances.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBSubnetGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSubnetStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteDBSubnetGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBSubnetGroupMessage deleteDBSubnetGroupMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteDBSubnetGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBSubnetGroupMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteEventSubscription
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteEventSubscriptionMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEventSubscriptionStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteEventSubscriptionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteEventSubscriptionMessage deleteEventSubscriptionMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteEventSubscriptionMessage;

        // create path and map variables
        String localVarPath = "/#Action=DeleteEventSubscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteEventSubscriptionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteEventSubscriptionMessage deleteEventSubscriptionMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteEventSubscription(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteEventSubscription(Async)");
        }

        return pOSTDeleteEventSubscriptionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteEventSubscriptionMessage, _callback);

    }

    /**
     * 
     * Deletes an event notification subscription.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteEventSubscriptionMessage  (optional)
     * @return DeleteEventSubscriptionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEventSubscriptionStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DeleteEventSubscriptionResult pOSTDeleteEventSubscription(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteEventSubscriptionMessage deleteEventSubscriptionMessage) throws ApiException {
        ApiResponse<DeleteEventSubscriptionResult> localVarResp = pOSTDeleteEventSubscriptionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteEventSubscriptionMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes an event notification subscription.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteEventSubscriptionMessage  (optional)
     * @return ApiResponse&lt;DeleteEventSubscriptionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEventSubscriptionStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteEventSubscriptionResult> pOSTDeleteEventSubscriptionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteEventSubscriptionMessage deleteEventSubscriptionMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteEventSubscriptionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteEventSubscriptionMessage, null);
        Type localVarReturnType = new TypeToken<DeleteEventSubscriptionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an event notification subscription.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteEventSubscriptionMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEventSubscriptionStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteEventSubscriptionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteEventSubscriptionMessage deleteEventSubscriptionMessage, final ApiCallback<DeleteEventSubscriptionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteEventSubscriptionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteEventSubscriptionMessage, _callback);
        Type localVarReturnType = new TypeToken<DeleteEventSubscriptionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteGlobalCluster
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteGlobalClusterMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteGlobalClusterCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteGlobalClusterMessage deleteGlobalClusterMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteGlobalClusterMessage;

        // create path and map variables
        String localVarPath = "/#Action=DeleteGlobalCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteGlobalClusterValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteGlobalClusterMessage deleteGlobalClusterMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteGlobalCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteGlobalCluster(Async)");
        }

        return pOSTDeleteGlobalClusterCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteGlobalClusterMessage, _callback);

    }

    /**
     * 
     * Deletes a global database. The primary and all secondary clusters must already be detached or deleted first.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteGlobalClusterMessage  (optional)
     * @return DeleteGlobalClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DeleteGlobalClusterResult pOSTDeleteGlobalCluster(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteGlobalClusterMessage deleteGlobalClusterMessage) throws ApiException {
        ApiResponse<DeleteGlobalClusterResult> localVarResp = pOSTDeleteGlobalClusterWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteGlobalClusterMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a global database. The primary and all secondary clusters must already be detached or deleted first.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteGlobalClusterMessage  (optional)
     * @return ApiResponse&lt;DeleteGlobalClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteGlobalClusterResult> pOSTDeleteGlobalClusterWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteGlobalClusterMessage deleteGlobalClusterMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteGlobalClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteGlobalClusterMessage, null);
        Type localVarReturnType = new TypeToken<DeleteGlobalClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a global database. The primary and all secondary clusters must already be detached or deleted first.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteGlobalClusterMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteGlobalClusterAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteGlobalClusterMessage deleteGlobalClusterMessage, final ApiCallback<DeleteGlobalClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteGlobalClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteGlobalClusterMessage, _callback);
        Type localVarReturnType = new TypeToken<DeleteGlobalClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeDBClusterEndpoints
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClusterEndpointsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBClusterEndpointsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterEndpointsMessage describeDBClusterEndpointsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeDBClusterEndpointsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBClusterEndpoints";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeDBClusterEndpointsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterEndpointsMessage describeDBClusterEndpointsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeDBClusterEndpoints(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeDBClusterEndpoints(Async)");
        }

        return pOSTDescribeDBClusterEndpointsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterEndpointsMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about endpoints for an Amazon Neptune DB cluster.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation can also return information for Amazon RDS clusters and Amazon DocDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClusterEndpointsMessage  (optional)
     * @return DBClusterEndpointMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBClusterEndpointMessage pOSTDescribeDBClusterEndpoints(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterEndpointsMessage describeDBClusterEndpointsMessage) throws ApiException {
        ApiResponse<DBClusterEndpointMessage> localVarResp = pOSTDescribeDBClusterEndpointsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterEndpointsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about endpoints for an Amazon Neptune DB cluster.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation can also return information for Amazon RDS clusters and Amazon DocDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClusterEndpointsMessage  (optional)
     * @return ApiResponse&lt;DBClusterEndpointMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBClusterEndpointMessage> pOSTDescribeDBClusterEndpointsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterEndpointsMessage describeDBClusterEndpointsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeDBClusterEndpointsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterEndpointsMessage, null);
        Type localVarReturnType = new TypeToken<DBClusterEndpointMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about endpoints for an Amazon Neptune DB cluster.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation can also return information for Amazon RDS clusters and Amazon DocDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClusterEndpointsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBClusterEndpointsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterEndpointsMessage describeDBClusterEndpointsMessage, final ApiCallback<DBClusterEndpointMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeDBClusterEndpointsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterEndpointsMessage, _callback);
        Type localVarReturnType = new TypeToken<DBClusterEndpointMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeDBClusterParameterGroups
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClusterParameterGroupsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBClusterParameterGroupsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterParameterGroupsMessage describeDBClusterParameterGroupsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeDBClusterParameterGroupsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBClusterParameterGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeDBClusterParameterGroupsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterParameterGroupsMessage describeDBClusterParameterGroupsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeDBClusterParameterGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeDBClusterParameterGroups(Async)");
        }

        return pOSTDescribeDBClusterParameterGroupsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterParameterGroupsMessage, _callback);

    }

    /**
     * 
     *  Returns a list of &lt;code&gt;DBClusterParameterGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClusterParameterGroupsMessage  (optional)
     * @return DBClusterParameterGroupsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBClusterParameterGroupsMessage pOSTDescribeDBClusterParameterGroups(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterParameterGroupsMessage describeDBClusterParameterGroupsMessage) throws ApiException {
        ApiResponse<DBClusterParameterGroupsMessage> localVarResp = pOSTDescribeDBClusterParameterGroupsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterParameterGroupsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     *  Returns a list of &lt;code&gt;DBClusterParameterGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClusterParameterGroupsMessage  (optional)
     * @return ApiResponse&lt;DBClusterParameterGroupsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBClusterParameterGroupsMessage> pOSTDescribeDBClusterParameterGroupsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterParameterGroupsMessage describeDBClusterParameterGroupsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeDBClusterParameterGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterParameterGroupsMessage, null);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Returns a list of &lt;code&gt;DBClusterParameterGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClusterParameterGroupsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBClusterParameterGroupsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterParameterGroupsMessage describeDBClusterParameterGroupsMessage, final ApiCallback<DBClusterParameterGroupsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeDBClusterParameterGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterParameterGroupsMessage, _callback);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeDBClusterParameters
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClusterParametersMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBClusterParametersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterParametersMessage describeDBClusterParametersMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeDBClusterParametersMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBClusterParameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeDBClusterParametersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterParametersMessage describeDBClusterParametersMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeDBClusterParameters(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeDBClusterParameters(Async)");
        }

        return pOSTDescribeDBClusterParametersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterParametersMessage, _callback);

    }

    /**
     * 
     * Returns the detailed parameter list for a particular DB cluster parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClusterParametersMessage  (optional)
     * @return DBClusterParameterGroupDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBClusterParameterGroupDetails pOSTDescribeDBClusterParameters(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterParametersMessage describeDBClusterParametersMessage) throws ApiException {
        ApiResponse<DBClusterParameterGroupDetails> localVarResp = pOSTDescribeDBClusterParametersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterParametersMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the detailed parameter list for a particular DB cluster parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClusterParametersMessage  (optional)
     * @return ApiResponse&lt;DBClusterParameterGroupDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBClusterParameterGroupDetails> pOSTDescribeDBClusterParametersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterParametersMessage describeDBClusterParametersMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeDBClusterParametersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterParametersMessage, null);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the detailed parameter list for a particular DB cluster parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClusterParametersMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBClusterParametersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterParametersMessage describeDBClusterParametersMessage, final ApiCallback<DBClusterParameterGroupDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeDBClusterParametersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterParametersMessage, _callback);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeDBClusterSnapshotAttributes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeDBClusterSnapshotAttributesMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBClusterSnapshotAttributesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeDBClusterSnapshotAttributesMessage describeDBClusterSnapshotAttributesMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeDBClusterSnapshotAttributesMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBClusterSnapshotAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeDBClusterSnapshotAttributesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeDBClusterSnapshotAttributesMessage describeDBClusterSnapshotAttributesMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeDBClusterSnapshotAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeDBClusterSnapshotAttributes(Async)");
        }

        return pOSTDescribeDBClusterSnapshotAttributesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeDBClusterSnapshotAttributesMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.&lt;/p&gt; &lt;p&gt;When sharing snapshots with other Amazon accounts, &lt;code&gt;DescribeDBClusterSnapshotAttributes&lt;/code&gt; returns the &lt;code&gt;restore&lt;/code&gt; attribute and a list of IDs for the Amazon accounts that are authorized to copy or restore the manual DB cluster snapshot. If &lt;code&gt;all&lt;/code&gt; is included in the list of values for the &lt;code&gt;restore&lt;/code&gt; attribute, then the manual DB cluster snapshot is public and can be copied or restored by all Amazon accounts.&lt;/p&gt; &lt;p&gt;To add or remove access for an Amazon account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the &lt;a&gt;ModifyDBClusterSnapshotAttribute&lt;/a&gt; API action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeDBClusterSnapshotAttributesMessage  (optional)
     * @return DescribeDBClusterSnapshotAttributesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeDBClusterSnapshotAttributesResult pOSTDescribeDBClusterSnapshotAttributes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeDBClusterSnapshotAttributesMessage describeDBClusterSnapshotAttributesMessage) throws ApiException {
        ApiResponse<DescribeDBClusterSnapshotAttributesResult> localVarResp = pOSTDescribeDBClusterSnapshotAttributesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeDBClusterSnapshotAttributesMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.&lt;/p&gt; &lt;p&gt;When sharing snapshots with other Amazon accounts, &lt;code&gt;DescribeDBClusterSnapshotAttributes&lt;/code&gt; returns the &lt;code&gt;restore&lt;/code&gt; attribute and a list of IDs for the Amazon accounts that are authorized to copy or restore the manual DB cluster snapshot. If &lt;code&gt;all&lt;/code&gt; is included in the list of values for the &lt;code&gt;restore&lt;/code&gt; attribute, then the manual DB cluster snapshot is public and can be copied or restored by all Amazon accounts.&lt;/p&gt; &lt;p&gt;To add or remove access for an Amazon account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the &lt;a&gt;ModifyDBClusterSnapshotAttribute&lt;/a&gt; API action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeDBClusterSnapshotAttributesMessage  (optional)
     * @return ApiResponse&lt;DescribeDBClusterSnapshotAttributesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeDBClusterSnapshotAttributesResult> pOSTDescribeDBClusterSnapshotAttributesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeDBClusterSnapshotAttributesMessage describeDBClusterSnapshotAttributesMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeDBClusterSnapshotAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeDBClusterSnapshotAttributesMessage, null);
        Type localVarReturnType = new TypeToken<DescribeDBClusterSnapshotAttributesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.&lt;/p&gt; &lt;p&gt;When sharing snapshots with other Amazon accounts, &lt;code&gt;DescribeDBClusterSnapshotAttributes&lt;/code&gt; returns the &lt;code&gt;restore&lt;/code&gt; attribute and a list of IDs for the Amazon accounts that are authorized to copy or restore the manual DB cluster snapshot. If &lt;code&gt;all&lt;/code&gt; is included in the list of values for the &lt;code&gt;restore&lt;/code&gt; attribute, then the manual DB cluster snapshot is public and can be copied or restored by all Amazon accounts.&lt;/p&gt; &lt;p&gt;To add or remove access for an Amazon account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the &lt;a&gt;ModifyDBClusterSnapshotAttribute&lt;/a&gt; API action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeDBClusterSnapshotAttributesMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBClusterSnapshotAttributesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeDBClusterSnapshotAttributesMessage describeDBClusterSnapshotAttributesMessage, final ApiCallback<DescribeDBClusterSnapshotAttributesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeDBClusterSnapshotAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeDBClusterSnapshotAttributesMessage, _callback);
        Type localVarReturnType = new TypeToken<DescribeDBClusterSnapshotAttributesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeDBClusterSnapshots
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClusterSnapshotsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBClusterSnapshotsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterSnapshotsMessage describeDBClusterSnapshotsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeDBClusterSnapshotsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBClusterSnapshots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeDBClusterSnapshotsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterSnapshotsMessage describeDBClusterSnapshotsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeDBClusterSnapshots(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeDBClusterSnapshots(Async)");
        }

        return pOSTDescribeDBClusterSnapshotsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterSnapshotsMessage, _callback);

    }

    /**
     * 
     * Returns information about DB cluster snapshots. This API action supports pagination.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClusterSnapshotsMessage  (optional)
     * @return DBClusterSnapshotMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBClusterSnapshotMessage pOSTDescribeDBClusterSnapshots(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterSnapshotsMessage describeDBClusterSnapshotsMessage) throws ApiException {
        ApiResponse<DBClusterSnapshotMessage> localVarResp = pOSTDescribeDBClusterSnapshotsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterSnapshotsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about DB cluster snapshots. This API action supports pagination.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClusterSnapshotsMessage  (optional)
     * @return ApiResponse&lt;DBClusterSnapshotMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBClusterSnapshotMessage> pOSTDescribeDBClusterSnapshotsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterSnapshotsMessage describeDBClusterSnapshotsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeDBClusterSnapshotsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterSnapshotsMessage, null);
        Type localVarReturnType = new TypeToken<DBClusterSnapshotMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about DB cluster snapshots. This API action supports pagination.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClusterSnapshotsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBClusterSnapshotsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterSnapshotsMessage describeDBClusterSnapshotsMessage, final ApiCallback<DBClusterSnapshotMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeDBClusterSnapshotsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterSnapshotsMessage, _callback);
        Type localVarReturnType = new TypeToken<DBClusterSnapshotMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeDBClusters
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClustersMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBClustersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClustersMessage describeDBClustersMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeDBClustersMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBClusters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeDBClustersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClustersMessage describeDBClustersMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeDBClusters(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeDBClusters(Async)");
        }

        return pOSTDescribeDBClustersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClustersMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about provisioned DB clusters, and supports pagination.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation can also return information for Amazon RDS clusters and Amazon DocDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClustersMessage  (optional)
     * @return DBClusterMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBClusterMessage pOSTDescribeDBClusters(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClustersMessage describeDBClustersMessage) throws ApiException {
        ApiResponse<DBClusterMessage> localVarResp = pOSTDescribeDBClustersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClustersMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about provisioned DB clusters, and supports pagination.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation can also return information for Amazon RDS clusters and Amazon DocDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClustersMessage  (optional)
     * @return ApiResponse&lt;DBClusterMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBClusterMessage> pOSTDescribeDBClustersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClustersMessage describeDBClustersMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeDBClustersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClustersMessage, null);
        Type localVarReturnType = new TypeToken<DBClusterMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about provisioned DB clusters, and supports pagination.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation can also return information for Amazon RDS clusters and Amazon DocDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClustersMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBClustersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClustersMessage describeDBClustersMessage, final ApiCallback<DBClusterMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeDBClustersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClustersMessage, _callback);
        Type localVarReturnType = new TypeToken<DBClusterMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeDBEngineVersions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBEngineVersionsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBEngineVersionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBEngineVersionsMessage describeDBEngineVersionsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeDBEngineVersionsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBEngineVersions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeDBEngineVersionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBEngineVersionsMessage describeDBEngineVersionsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeDBEngineVersions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeDBEngineVersions(Async)");
        }

        return pOSTDescribeDBEngineVersionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBEngineVersionsMessage, _callback);

    }

    /**
     * 
     * Returns a list of the available DB engines.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBEngineVersionsMessage  (optional)
     * @return DBEngineVersionMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DBEngineVersionMessage pOSTDescribeDBEngineVersions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBEngineVersionsMessage describeDBEngineVersionsMessage) throws ApiException {
        ApiResponse<DBEngineVersionMessage> localVarResp = pOSTDescribeDBEngineVersionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBEngineVersionsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of the available DB engines.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBEngineVersionsMessage  (optional)
     * @return ApiResponse&lt;DBEngineVersionMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBEngineVersionMessage> pOSTDescribeDBEngineVersionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBEngineVersionsMessage describeDBEngineVersionsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeDBEngineVersionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBEngineVersionsMessage, null);
        Type localVarReturnType = new TypeToken<DBEngineVersionMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of the available DB engines.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBEngineVersionsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBEngineVersionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBEngineVersionsMessage describeDBEngineVersionsMessage, final ApiCallback<DBEngineVersionMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeDBEngineVersionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBEngineVersionsMessage, _callback);
        Type localVarReturnType = new TypeToken<DBEngineVersionMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeDBInstances
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBInstancesMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBInstancesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBInstancesMessage describeDBInstancesMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeDBInstancesMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBInstances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeDBInstancesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBInstancesMessage describeDBInstancesMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeDBInstances(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeDBInstances(Async)");
        }

        return pOSTDescribeDBInstancesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBInstancesMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about provisioned instances, and supports pagination.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation can also return information for Amazon RDS instances and Amazon DocDB instances.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBInstancesMessage  (optional)
     * @return DBInstanceMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBInstanceMessage pOSTDescribeDBInstances(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBInstancesMessage describeDBInstancesMessage) throws ApiException {
        ApiResponse<DBInstanceMessage> localVarResp = pOSTDescribeDBInstancesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBInstancesMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about provisioned instances, and supports pagination.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation can also return information for Amazon RDS instances and Amazon DocDB instances.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBInstancesMessage  (optional)
     * @return ApiResponse&lt;DBInstanceMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBInstanceMessage> pOSTDescribeDBInstancesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBInstancesMessage describeDBInstancesMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeDBInstancesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBInstancesMessage, null);
        Type localVarReturnType = new TypeToken<DBInstanceMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about provisioned instances, and supports pagination.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation can also return information for Amazon RDS instances and Amazon DocDB instances.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBInstancesMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBInstancesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBInstancesMessage describeDBInstancesMessage, final ApiCallback<DBInstanceMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeDBInstancesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBInstancesMessage, _callback);
        Type localVarReturnType = new TypeToken<DBInstanceMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeDBParameterGroups
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBParameterGroupsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBParameterGroupsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBParameterGroupsMessage describeDBParameterGroupsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeDBParameterGroupsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBParameterGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeDBParameterGroupsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBParameterGroupsMessage describeDBParameterGroupsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeDBParameterGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeDBParameterGroups(Async)");
        }

        return pOSTDescribeDBParameterGroupsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBParameterGroupsMessage, _callback);

    }

    /**
     * 
     * Returns a list of &lt;code&gt;DBParameterGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBParameterGroupName&lt;/code&gt; is specified, the list will contain only the description of the specified DB parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBParameterGroupsMessage  (optional)
     * @return DBParameterGroupsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBParameterGroupsMessage pOSTDescribeDBParameterGroups(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBParameterGroupsMessage describeDBParameterGroupsMessage) throws ApiException {
        ApiResponse<DBParameterGroupsMessage> localVarResp = pOSTDescribeDBParameterGroupsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBParameterGroupsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of &lt;code&gt;DBParameterGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBParameterGroupName&lt;/code&gt; is specified, the list will contain only the description of the specified DB parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBParameterGroupsMessage  (optional)
     * @return ApiResponse&lt;DBParameterGroupsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBParameterGroupsMessage> pOSTDescribeDBParameterGroupsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBParameterGroupsMessage describeDBParameterGroupsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeDBParameterGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBParameterGroupsMessage, null);
        Type localVarReturnType = new TypeToken<DBParameterGroupsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of &lt;code&gt;DBParameterGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBParameterGroupName&lt;/code&gt; is specified, the list will contain only the description of the specified DB parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBParameterGroupsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBParameterGroupsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBParameterGroupsMessage describeDBParameterGroupsMessage, final ApiCallback<DBParameterGroupsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeDBParameterGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBParameterGroupsMessage, _callback);
        Type localVarReturnType = new TypeToken<DBParameterGroupsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeDBParameters
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBParametersMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBParametersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBParametersMessage describeDBParametersMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeDBParametersMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBParameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeDBParametersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBParametersMessage describeDBParametersMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeDBParameters(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeDBParameters(Async)");
        }

        return pOSTDescribeDBParametersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBParametersMessage, _callback);

    }

    /**
     * 
     * Returns the detailed parameter list for a particular DB parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBParametersMessage  (optional)
     * @return DBParameterGroupDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBParameterGroupDetails pOSTDescribeDBParameters(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBParametersMessage describeDBParametersMessage) throws ApiException {
        ApiResponse<DBParameterGroupDetails> localVarResp = pOSTDescribeDBParametersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBParametersMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the detailed parameter list for a particular DB parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBParametersMessage  (optional)
     * @return ApiResponse&lt;DBParameterGroupDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBParameterGroupDetails> pOSTDescribeDBParametersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBParametersMessage describeDBParametersMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeDBParametersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBParametersMessage, null);
        Type localVarReturnType = new TypeToken<DBParameterGroupDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the detailed parameter list for a particular DB parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBParametersMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBParametersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBParametersMessage describeDBParametersMessage, final ApiCallback<DBParameterGroupDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeDBParametersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBParametersMessage, _callback);
        Type localVarReturnType = new TypeToken<DBParameterGroupDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeDBSubnetGroups
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBSubnetGroupsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBSubnetGroupsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBSubnetGroupsMessage describeDBSubnetGroupsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeDBSubnetGroupsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBSubnetGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeDBSubnetGroupsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBSubnetGroupsMessage describeDBSubnetGroupsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeDBSubnetGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeDBSubnetGroups(Async)");
        }

        return pOSTDescribeDBSubnetGroupsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBSubnetGroupsMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.&lt;/p&gt; &lt;p&gt;For an overview of CIDR ranges, go to the &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\&quot;&gt;Wikipedia Tutorial&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBSubnetGroupsMessage  (optional)
     * @return DBSubnetGroupMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBSubnetGroupMessage pOSTDescribeDBSubnetGroups(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBSubnetGroupsMessage describeDBSubnetGroupsMessage) throws ApiException {
        ApiResponse<DBSubnetGroupMessage> localVarResp = pOSTDescribeDBSubnetGroupsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBSubnetGroupsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.&lt;/p&gt; &lt;p&gt;For an overview of CIDR ranges, go to the &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\&quot;&gt;Wikipedia Tutorial&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBSubnetGroupsMessage  (optional)
     * @return ApiResponse&lt;DBSubnetGroupMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBSubnetGroupMessage> pOSTDescribeDBSubnetGroupsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBSubnetGroupsMessage describeDBSubnetGroupsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeDBSubnetGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBSubnetGroupsMessage, null);
        Type localVarReturnType = new TypeToken<DBSubnetGroupMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.&lt;/p&gt; &lt;p&gt;For an overview of CIDR ranges, go to the &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\&quot;&gt;Wikipedia Tutorial&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBSubnetGroupsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBSubnetGroupsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBSubnetGroupsMessage describeDBSubnetGroupsMessage, final ApiCallback<DBSubnetGroupMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeDBSubnetGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBSubnetGroupsMessage, _callback);
        Type localVarReturnType = new TypeToken<DBSubnetGroupMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeEngineDefaultClusterParameters
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEngineDefaultClusterParametersMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEngineDefaultClusterParametersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEngineDefaultClusterParametersMessage describeEngineDefaultClusterParametersMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeEngineDefaultClusterParametersMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEngineDefaultClusterParameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeEngineDefaultClusterParametersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEngineDefaultClusterParametersMessage describeEngineDefaultClusterParametersMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeEngineDefaultClusterParameters(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeEngineDefaultClusterParameters(Async)");
        }

        return pOSTDescribeEngineDefaultClusterParametersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEngineDefaultClusterParametersMessage, _callback);

    }

    /**
     * 
     * Returns the default engine and system parameter information for the cluster database engine.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEngineDefaultClusterParametersMessage  (optional)
     * @return DescribeEngineDefaultClusterParametersResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeEngineDefaultClusterParametersResult pOSTDescribeEngineDefaultClusterParameters(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEngineDefaultClusterParametersMessage describeEngineDefaultClusterParametersMessage) throws ApiException {
        ApiResponse<DescribeEngineDefaultClusterParametersResult> localVarResp = pOSTDescribeEngineDefaultClusterParametersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEngineDefaultClusterParametersMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the default engine and system parameter information for the cluster database engine.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEngineDefaultClusterParametersMessage  (optional)
     * @return ApiResponse&lt;DescribeEngineDefaultClusterParametersResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeEngineDefaultClusterParametersResult> pOSTDescribeEngineDefaultClusterParametersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEngineDefaultClusterParametersMessage describeEngineDefaultClusterParametersMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeEngineDefaultClusterParametersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEngineDefaultClusterParametersMessage, null);
        Type localVarReturnType = new TypeToken<DescribeEngineDefaultClusterParametersResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the default engine and system parameter information for the cluster database engine.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEngineDefaultClusterParametersMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEngineDefaultClusterParametersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEngineDefaultClusterParametersMessage describeEngineDefaultClusterParametersMessage, final ApiCallback<DescribeEngineDefaultClusterParametersResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeEngineDefaultClusterParametersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEngineDefaultClusterParametersMessage, _callback);
        Type localVarReturnType = new TypeToken<DescribeEngineDefaultClusterParametersResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeEngineDefaultParameters
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeEngineDefaultParametersMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEngineDefaultParametersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEngineDefaultParametersMessage describeEngineDefaultParametersMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeEngineDefaultParametersMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEngineDefaultParameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeEngineDefaultParametersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEngineDefaultParametersMessage describeEngineDefaultParametersMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeEngineDefaultParameters(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeEngineDefaultParameters(Async)");
        }

        return pOSTDescribeEngineDefaultParametersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEngineDefaultParametersMessage, _callback);

    }

    /**
     * 
     * Returns the default engine and system parameter information for the specified database engine.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeEngineDefaultParametersMessage  (optional)
     * @return DescribeEngineDefaultParametersResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeEngineDefaultParametersResult pOSTDescribeEngineDefaultParameters(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEngineDefaultParametersMessage describeEngineDefaultParametersMessage) throws ApiException {
        ApiResponse<DescribeEngineDefaultParametersResult> localVarResp = pOSTDescribeEngineDefaultParametersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEngineDefaultParametersMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the default engine and system parameter information for the specified database engine.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeEngineDefaultParametersMessage  (optional)
     * @return ApiResponse&lt;DescribeEngineDefaultParametersResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeEngineDefaultParametersResult> pOSTDescribeEngineDefaultParametersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEngineDefaultParametersMessage describeEngineDefaultParametersMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeEngineDefaultParametersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEngineDefaultParametersMessage, null);
        Type localVarReturnType = new TypeToken<DescribeEngineDefaultParametersResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the default engine and system parameter information for the specified database engine.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeEngineDefaultParametersMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEngineDefaultParametersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEngineDefaultParametersMessage describeEngineDefaultParametersMessage, final ApiCallback<DescribeEngineDefaultParametersResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeEngineDefaultParametersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEngineDefaultParametersMessage, _callback);
        Type localVarReturnType = new TypeToken<DescribeEngineDefaultParametersResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeEventCategories
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEventCategoriesMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEventCategoriesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEventCategoriesMessage describeEventCategoriesMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeEventCategoriesMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEventCategories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeEventCategoriesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEventCategoriesMessage describeEventCategoriesMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeEventCategories(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeEventCategories(Async)");
        }

        return pOSTDescribeEventCategoriesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEventCategoriesMessage, _callback);

    }

    /**
     * 
     * Displays a list of categories for all event source types, or, if specified, for a specified source type.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEventCategoriesMessage  (optional)
     * @return EventCategoriesMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EventCategoriesMessage pOSTDescribeEventCategories(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEventCategoriesMessage describeEventCategoriesMessage) throws ApiException {
        ApiResponse<EventCategoriesMessage> localVarResp = pOSTDescribeEventCategoriesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEventCategoriesMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Displays a list of categories for all event source types, or, if specified, for a specified source type.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEventCategoriesMessage  (optional)
     * @return ApiResponse&lt;EventCategoriesMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventCategoriesMessage> pOSTDescribeEventCategoriesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEventCategoriesMessage describeEventCategoriesMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeEventCategoriesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEventCategoriesMessage, null);
        Type localVarReturnType = new TypeToken<EventCategoriesMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Displays a list of categories for all event source types, or, if specified, for a specified source type.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEventCategoriesMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEventCategoriesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEventCategoriesMessage describeEventCategoriesMessage, final ApiCallback<EventCategoriesMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeEventCategoriesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEventCategoriesMessage, _callback);
        Type localVarReturnType = new TypeToken<EventCategoriesMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeEventSubscriptions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeEventSubscriptionsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEventSubscriptionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEventSubscriptionsMessage describeEventSubscriptionsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeEventSubscriptionsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEventSubscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeEventSubscriptionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEventSubscriptionsMessage describeEventSubscriptionsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeEventSubscriptions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeEventSubscriptions(Async)");
        }

        return pOSTDescribeEventSubscriptionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEventSubscriptionsMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.&lt;/p&gt; &lt;p&gt;If you specify a SubscriptionName, lists the description for that subscription.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeEventSubscriptionsMessage  (optional)
     * @return EventSubscriptionsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public EventSubscriptionsMessage pOSTDescribeEventSubscriptions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEventSubscriptionsMessage describeEventSubscriptionsMessage) throws ApiException {
        ApiResponse<EventSubscriptionsMessage> localVarResp = pOSTDescribeEventSubscriptionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEventSubscriptionsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.&lt;/p&gt; &lt;p&gt;If you specify a SubscriptionName, lists the description for that subscription.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeEventSubscriptionsMessage  (optional)
     * @return ApiResponse&lt;EventSubscriptionsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventSubscriptionsMessage> pOSTDescribeEventSubscriptionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEventSubscriptionsMessage describeEventSubscriptionsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeEventSubscriptionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEventSubscriptionsMessage, null);
        Type localVarReturnType = new TypeToken<EventSubscriptionsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.&lt;/p&gt; &lt;p&gt;If you specify a SubscriptionName, lists the description for that subscription.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeEventSubscriptionsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEventSubscriptionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEventSubscriptionsMessage describeEventSubscriptionsMessage, final ApiCallback<EventSubscriptionsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeEventSubscriptionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEventSubscriptionsMessage, _callback);
        Type localVarReturnType = new TypeToken<EventSubscriptionsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeEvents
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeEventsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEventsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEventsMessage describeEventsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeEventsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEvents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeEventsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEventsMessage describeEventsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeEvents(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeEvents(Async)");
        }

        return pOSTDescribeEventsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEventsMessage, _callback);

    }

    /**
     * 
     * Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeEventsMessage  (optional)
     * @return EventsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EventsMessage pOSTDescribeEvents(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEventsMessage describeEventsMessage) throws ApiException {
        ApiResponse<EventsMessage> localVarResp = pOSTDescribeEventsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEventsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeEventsMessage  (optional)
     * @return ApiResponse&lt;EventsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventsMessage> pOSTDescribeEventsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEventsMessage describeEventsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeEventsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEventsMessage, null);
        Type localVarReturnType = new TypeToken<EventsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeEventsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEventsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEventsMessage describeEventsMessage, final ApiCallback<EventsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeEventsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEventsMessage, _callback);
        Type localVarReturnType = new TypeToken<EventsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeGlobalClusters
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeGlobalClustersMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeGlobalClustersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeGlobalClustersMessage describeGlobalClustersMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeGlobalClustersMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeGlobalClusters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeGlobalClustersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeGlobalClustersMessage describeGlobalClustersMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeGlobalClusters(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeGlobalClusters(Async)");
        }

        return pOSTDescribeGlobalClustersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeGlobalClustersMessage, _callback);

    }

    /**
     * 
     * Returns information about Neptune global database clusters. This API supports pagination.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeGlobalClustersMessage  (optional)
     * @return GlobalClustersMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public GlobalClustersMessage pOSTDescribeGlobalClusters(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeGlobalClustersMessage describeGlobalClustersMessage) throws ApiException {
        ApiResponse<GlobalClustersMessage> localVarResp = pOSTDescribeGlobalClustersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeGlobalClustersMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about Neptune global database clusters. This API supports pagination.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeGlobalClustersMessage  (optional)
     * @return ApiResponse&lt;GlobalClustersMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GlobalClustersMessage> pOSTDescribeGlobalClustersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeGlobalClustersMessage describeGlobalClustersMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeGlobalClustersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeGlobalClustersMessage, null);
        Type localVarReturnType = new TypeToken<GlobalClustersMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about Neptune global database clusters. This API supports pagination.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeGlobalClustersMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeGlobalClustersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeGlobalClustersMessage describeGlobalClustersMessage, final ApiCallback<GlobalClustersMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeGlobalClustersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeGlobalClustersMessage, _callback);
        Type localVarReturnType = new TypeToken<GlobalClustersMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeOrderableDBInstanceOptions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeOrderableDBInstanceOptionsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeOrderableDBInstanceOptionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeOrderableDBInstanceOptionsMessage describeOrderableDBInstanceOptionsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeOrderableDBInstanceOptionsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeOrderableDBInstanceOptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeOrderableDBInstanceOptionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeOrderableDBInstanceOptionsMessage describeOrderableDBInstanceOptionsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeOrderableDBInstanceOptions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeOrderableDBInstanceOptions(Async)");
        }

        return pOSTDescribeOrderableDBInstanceOptionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeOrderableDBInstanceOptionsMessage, _callback);

    }

    /**
     * 
     * Returns a list of orderable DB instance options for the specified engine.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeOrderableDBInstanceOptionsMessage  (optional)
     * @return OrderableDBInstanceOptionsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public OrderableDBInstanceOptionsMessage pOSTDescribeOrderableDBInstanceOptions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeOrderableDBInstanceOptionsMessage describeOrderableDBInstanceOptionsMessage) throws ApiException {
        ApiResponse<OrderableDBInstanceOptionsMessage> localVarResp = pOSTDescribeOrderableDBInstanceOptionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeOrderableDBInstanceOptionsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of orderable DB instance options for the specified engine.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeOrderableDBInstanceOptionsMessage  (optional)
     * @return ApiResponse&lt;OrderableDBInstanceOptionsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderableDBInstanceOptionsMessage> pOSTDescribeOrderableDBInstanceOptionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeOrderableDBInstanceOptionsMessage describeOrderableDBInstanceOptionsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeOrderableDBInstanceOptionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeOrderableDBInstanceOptionsMessage, null);
        Type localVarReturnType = new TypeToken<OrderableDBInstanceOptionsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of orderable DB instance options for the specified engine.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeOrderableDBInstanceOptionsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeOrderableDBInstanceOptionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeOrderableDBInstanceOptionsMessage describeOrderableDBInstanceOptionsMessage, final ApiCallback<OrderableDBInstanceOptionsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeOrderableDBInstanceOptionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeOrderableDBInstanceOptionsMessage, _callback);
        Type localVarReturnType = new TypeToken<OrderableDBInstanceOptionsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribePendingMaintenanceActions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describePendingMaintenanceActionsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribePendingMaintenanceActionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribePendingMaintenanceActionsMessage describePendingMaintenanceActionsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describePendingMaintenanceActionsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribePendingMaintenanceActions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribePendingMaintenanceActionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribePendingMaintenanceActionsMessage describePendingMaintenanceActionsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribePendingMaintenanceActions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribePendingMaintenanceActions(Async)");
        }

        return pOSTDescribePendingMaintenanceActionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describePendingMaintenanceActionsMessage, _callback);

    }

    /**
     * 
     * Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describePendingMaintenanceActionsMessage  (optional)
     * @return PendingMaintenanceActionsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public PendingMaintenanceActionsMessage pOSTDescribePendingMaintenanceActions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribePendingMaintenanceActionsMessage describePendingMaintenanceActionsMessage) throws ApiException {
        ApiResponse<PendingMaintenanceActionsMessage> localVarResp = pOSTDescribePendingMaintenanceActionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describePendingMaintenanceActionsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describePendingMaintenanceActionsMessage  (optional)
     * @return ApiResponse&lt;PendingMaintenanceActionsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PendingMaintenanceActionsMessage> pOSTDescribePendingMaintenanceActionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribePendingMaintenanceActionsMessage describePendingMaintenanceActionsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribePendingMaintenanceActionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describePendingMaintenanceActionsMessage, null);
        Type localVarReturnType = new TypeToken<PendingMaintenanceActionsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describePendingMaintenanceActionsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribePendingMaintenanceActionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribePendingMaintenanceActionsMessage describePendingMaintenanceActionsMessage, final ApiCallback<PendingMaintenanceActionsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribePendingMaintenanceActionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describePendingMaintenanceActionsMessage, _callback);
        Type localVarReturnType = new TypeToken<PendingMaintenanceActionsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeValidDBInstanceModifications
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeValidDBInstanceModificationsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeValidDBInstanceModificationsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeValidDBInstanceModificationsMessage describeValidDBInstanceModificationsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeValidDBInstanceModificationsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeValidDBInstanceModifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeValidDBInstanceModificationsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeValidDBInstanceModificationsMessage describeValidDBInstanceModificationsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeValidDBInstanceModifications(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeValidDBInstanceModifications(Async)");
        }

        return pOSTDescribeValidDBInstanceModificationsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeValidDBInstanceModificationsMessage, _callback);

    }

    /**
     * 
     * You can call &lt;a&gt;DescribeValidDBInstanceModifications&lt;/a&gt; to learn what modifications you can make to your DB instance. You can use this information when you call &lt;a&gt;ModifyDBInstance&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeValidDBInstanceModificationsMessage  (optional)
     * @return DescribeValidDBInstanceModificationsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeValidDBInstanceModificationsResult pOSTDescribeValidDBInstanceModifications(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeValidDBInstanceModificationsMessage describeValidDBInstanceModificationsMessage) throws ApiException {
        ApiResponse<DescribeValidDBInstanceModificationsResult> localVarResp = pOSTDescribeValidDBInstanceModificationsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeValidDBInstanceModificationsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * You can call &lt;a&gt;DescribeValidDBInstanceModifications&lt;/a&gt; to learn what modifications you can make to your DB instance. You can use this information when you call &lt;a&gt;ModifyDBInstance&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeValidDBInstanceModificationsMessage  (optional)
     * @return ApiResponse&lt;DescribeValidDBInstanceModificationsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeValidDBInstanceModificationsResult> pOSTDescribeValidDBInstanceModificationsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeValidDBInstanceModificationsMessage describeValidDBInstanceModificationsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeValidDBInstanceModificationsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeValidDBInstanceModificationsMessage, null);
        Type localVarReturnType = new TypeToken<DescribeValidDBInstanceModificationsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You can call &lt;a&gt;DescribeValidDBInstanceModifications&lt;/a&gt; to learn what modifications you can make to your DB instance. You can use this information when you call &lt;a&gt;ModifyDBInstance&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeValidDBInstanceModificationsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeValidDBInstanceModificationsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeValidDBInstanceModificationsMessage describeValidDBInstanceModificationsMessage, final ApiCallback<DescribeValidDBInstanceModificationsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeValidDBInstanceModificationsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeValidDBInstanceModificationsMessage, _callback);
        Type localVarReturnType = new TypeToken<DescribeValidDBInstanceModificationsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTFailoverDBCluster
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param failoverDBClusterMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTFailoverDBClusterCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, FailoverDBClusterMessage failoverDBClusterMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = failoverDBClusterMessage;

        // create path and map variables
        String localVarPath = "/#Action=FailoverDBCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTFailoverDBClusterValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, FailoverDBClusterMessage failoverDBClusterMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTFailoverDBCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTFailoverDBCluster(Async)");
        }

        return pOSTFailoverDBClusterCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, failoverDBClusterMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Forces a failover for a DB cluster.&lt;/p&gt; &lt;p&gt;A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).&lt;/p&gt; &lt;p&gt;Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param failoverDBClusterMessage  (optional)
     * @return FailoverDBClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public FailoverDBClusterResult pOSTFailoverDBCluster(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, FailoverDBClusterMessage failoverDBClusterMessage) throws ApiException {
        ApiResponse<FailoverDBClusterResult> localVarResp = pOSTFailoverDBClusterWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, failoverDBClusterMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Forces a failover for a DB cluster.&lt;/p&gt; &lt;p&gt;A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).&lt;/p&gt; &lt;p&gt;Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param failoverDBClusterMessage  (optional)
     * @return ApiResponse&lt;FailoverDBClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FailoverDBClusterResult> pOSTFailoverDBClusterWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, FailoverDBClusterMessage failoverDBClusterMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTFailoverDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, failoverDBClusterMessage, null);
        Type localVarReturnType = new TypeToken<FailoverDBClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Forces a failover for a DB cluster.&lt;/p&gt; &lt;p&gt;A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).&lt;/p&gt; &lt;p&gt;Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param failoverDBClusterMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTFailoverDBClusterAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, FailoverDBClusterMessage failoverDBClusterMessage, final ApiCallback<FailoverDBClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTFailoverDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, failoverDBClusterMessage, _callback);
        Type localVarReturnType = new TypeToken<FailoverDBClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTFailoverGlobalCluster
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param failoverGlobalClusterMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTFailoverGlobalClusterCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, FailoverGlobalClusterMessage failoverGlobalClusterMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = failoverGlobalClusterMessage;

        // create path and map variables
        String localVarPath = "/#Action=FailoverGlobalCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTFailoverGlobalClusterValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, FailoverGlobalClusterMessage failoverGlobalClusterMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTFailoverGlobalCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTFailoverGlobalCluster(Async)");
        }

        return pOSTFailoverGlobalClusterCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, failoverGlobalClusterMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Initiates the failover process for a Neptune global database.&lt;/p&gt; &lt;p&gt;A failover for a Neptune global database promotes one of secondary read-only DB clusters to be the primary DB cluster and demotes the primary DB cluster to being a secondary (read-only) DB cluster. In other words, the role of the current primary DB cluster and the selected target secondary DB cluster are switched. The selected secondary DB cluster assumes full read/write capabilities for the Neptune global database.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action applies &lt;b&gt;only&lt;/b&gt; to Neptune global databases. This action is only intended for use on healthy Neptune global databases with healthy Neptune DB clusters and no region-wide outages, to test disaster recovery scenarios or to reconfigure the global database topology.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param failoverGlobalClusterMessage  (optional)
     * @return FailoverGlobalClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public FailoverGlobalClusterResult pOSTFailoverGlobalCluster(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, FailoverGlobalClusterMessage failoverGlobalClusterMessage) throws ApiException {
        ApiResponse<FailoverGlobalClusterResult> localVarResp = pOSTFailoverGlobalClusterWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, failoverGlobalClusterMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Initiates the failover process for a Neptune global database.&lt;/p&gt; &lt;p&gt;A failover for a Neptune global database promotes one of secondary read-only DB clusters to be the primary DB cluster and demotes the primary DB cluster to being a secondary (read-only) DB cluster. In other words, the role of the current primary DB cluster and the selected target secondary DB cluster are switched. The selected secondary DB cluster assumes full read/write capabilities for the Neptune global database.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action applies &lt;b&gt;only&lt;/b&gt; to Neptune global databases. This action is only intended for use on healthy Neptune global databases with healthy Neptune DB clusters and no region-wide outages, to test disaster recovery scenarios or to reconfigure the global database topology.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param failoverGlobalClusterMessage  (optional)
     * @return ApiResponse&lt;FailoverGlobalClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FailoverGlobalClusterResult> pOSTFailoverGlobalClusterWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, FailoverGlobalClusterMessage failoverGlobalClusterMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTFailoverGlobalClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, failoverGlobalClusterMessage, null);
        Type localVarReturnType = new TypeToken<FailoverGlobalClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Initiates the failover process for a Neptune global database.&lt;/p&gt; &lt;p&gt;A failover for a Neptune global database promotes one of secondary read-only DB clusters to be the primary DB cluster and demotes the primary DB cluster to being a secondary (read-only) DB cluster. In other words, the role of the current primary DB cluster and the selected target secondary DB cluster are switched. The selected secondary DB cluster assumes full read/write capabilities for the Neptune global database.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action applies &lt;b&gt;only&lt;/b&gt; to Neptune global databases. This action is only intended for use on healthy Neptune global databases with healthy Neptune DB clusters and no region-wide outages, to test disaster recovery scenarios or to reconfigure the global database topology.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param failoverGlobalClusterMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTFailoverGlobalClusterAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, FailoverGlobalClusterMessage failoverGlobalClusterMessage, final ApiCallback<FailoverGlobalClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTFailoverGlobalClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, failoverGlobalClusterMessage, _callback);
        Type localVarReturnType = new TypeToken<FailoverGlobalClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListTagsForResource
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listTagsForResourceMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListTagsForResourceCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListTagsForResourceMessage listTagsForResourceMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTagsForResourceMessage;

        // create path and map variables
        String localVarPath = "/#Action=ListTagsForResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListTagsForResourceValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListTagsForResourceMessage listTagsForResourceMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListTagsForResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListTagsForResource(Async)");
        }

        return pOSTListTagsForResourceCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listTagsForResourceMessage, _callback);

    }

    /**
     * 
     * Lists all tags on an Amazon Neptune resource.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listTagsForResourceMessage  (optional)
     * @return TagListMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public TagListMessage pOSTListTagsForResource(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListTagsForResourceMessage listTagsForResourceMessage) throws ApiException {
        ApiResponse<TagListMessage> localVarResp = pOSTListTagsForResourceWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listTagsForResourceMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all tags on an Amazon Neptune resource.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listTagsForResourceMessage  (optional)
     * @return ApiResponse&lt;TagListMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagListMessage> pOSTListTagsForResourceWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListTagsForResourceMessage listTagsForResourceMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTListTagsForResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listTagsForResourceMessage, null);
        Type localVarReturnType = new TypeToken<TagListMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all tags on an Amazon Neptune resource.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listTagsForResourceMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListTagsForResourceAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListTagsForResourceMessage listTagsForResourceMessage, final ApiCallback<TagListMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListTagsForResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listTagsForResourceMessage, _callback);
        Type localVarReturnType = new TypeToken<TagListMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTModifyDBCluster
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBClusterMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyDBClusterCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterMessage modifyDBClusterMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyDBClusterMessage;

        // create path and map variables
        String localVarPath = "/#Action=ModifyDBCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTModifyDBClusterValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterMessage modifyDBClusterMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTModifyDBCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTModifyDBCluster(Async)");
        }

        return pOSTModifyDBClusterCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterMessage, _callback);

    }

    /**
     * 
     * Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBClusterMessage  (optional)
     * @return ModifyDBClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public ModifyDBClusterResult pOSTModifyDBCluster(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterMessage modifyDBClusterMessage) throws ApiException {
        ApiResponse<ModifyDBClusterResult> localVarResp = pOSTModifyDBClusterWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBClusterMessage  (optional)
     * @return ApiResponse&lt;ModifyDBClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyDBClusterResult> pOSTModifyDBClusterWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterMessage modifyDBClusterMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTModifyDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterMessage, null);
        Type localVarReturnType = new TypeToken<ModifyDBClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBClusterMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyDBClusterAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterMessage modifyDBClusterMessage, final ApiCallback<ModifyDBClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTModifyDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterMessage, _callback);
        Type localVarReturnType = new TypeToken<ModifyDBClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTModifyDBClusterEndpoint
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBClusterEndpointMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterEndpointStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterEndpointNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyDBClusterEndpointCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterEndpointMessage modifyDBClusterEndpointMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyDBClusterEndpointMessage;

        // create path and map variables
        String localVarPath = "/#Action=ModifyDBClusterEndpoint";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTModifyDBClusterEndpointValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterEndpointMessage modifyDBClusterEndpointMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTModifyDBClusterEndpoint(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTModifyDBClusterEndpoint(Async)");
        }

        return pOSTModifyDBClusterEndpointCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterEndpointMessage, _callback);

    }

    /**
     * 
     * Modifies the properties of an endpoint in an Amazon Neptune DB cluster.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBClusterEndpointMessage  (optional)
     * @return ModifyDBClusterEndpointOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterEndpointStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterEndpointNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ModifyDBClusterEndpointOutput pOSTModifyDBClusterEndpoint(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterEndpointMessage modifyDBClusterEndpointMessage) throws ApiException {
        ApiResponse<ModifyDBClusterEndpointOutput> localVarResp = pOSTModifyDBClusterEndpointWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterEndpointMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies the properties of an endpoint in an Amazon Neptune DB cluster.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBClusterEndpointMessage  (optional)
     * @return ApiResponse&lt;ModifyDBClusterEndpointOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterEndpointStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterEndpointNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyDBClusterEndpointOutput> pOSTModifyDBClusterEndpointWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterEndpointMessage modifyDBClusterEndpointMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTModifyDBClusterEndpointValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterEndpointMessage, null);
        Type localVarReturnType = new TypeToken<ModifyDBClusterEndpointOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies the properties of an endpoint in an Amazon Neptune DB cluster.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBClusterEndpointMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterEndpointStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterEndpointNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyDBClusterEndpointAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterEndpointMessage modifyDBClusterEndpointMessage, final ApiCallback<ModifyDBClusterEndpointOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTModifyDBClusterEndpointValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterEndpointMessage, _callback);
        Type localVarReturnType = new TypeToken<ModifyDBClusterEndpointOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTModifyDBClusterParameterGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBClusterParameterGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyDBClusterParameterGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterParameterGroupMessage modifyDBClusterParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyDBClusterParameterGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=ModifyDBClusterParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTModifyDBClusterParameterGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterParameterGroupMessage modifyDBClusterParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTModifyDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTModifyDBClusterParameterGroup(Async)");
        }

        return pOSTModifyDBClusterParameterGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterParameterGroupMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt; Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt;, &lt;code&gt;ParameterValue&lt;/code&gt;, and &lt;code&gt;ApplyMethod&lt;/code&gt;. A maximum of 20 parameters can be modified in a single request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the Amazon Neptune console or the &lt;a&gt;DescribeDBClusterParameters&lt;/a&gt; command to verify that your DB cluster parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBClusterParameterGroupMessage  (optional)
     * @return DBClusterParameterGroupNameMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DBClusterParameterGroupNameMessage pOSTModifyDBClusterParameterGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterParameterGroupMessage modifyDBClusterParameterGroupMessage) throws ApiException {
        ApiResponse<DBClusterParameterGroupNameMessage> localVarResp = pOSTModifyDBClusterParameterGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterParameterGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt;, &lt;code&gt;ParameterValue&lt;/code&gt;, and &lt;code&gt;ApplyMethod&lt;/code&gt;. A maximum of 20 parameters can be modified in a single request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the Amazon Neptune console or the &lt;a&gt;DescribeDBClusterParameters&lt;/a&gt; command to verify that your DB cluster parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBClusterParameterGroupMessage  (optional)
     * @return ApiResponse&lt;DBClusterParameterGroupNameMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBClusterParameterGroupNameMessage> pOSTModifyDBClusterParameterGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterParameterGroupMessage modifyDBClusterParameterGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTModifyDBClusterParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterParameterGroupMessage, null);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupNameMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt;, &lt;code&gt;ParameterValue&lt;/code&gt;, and &lt;code&gt;ApplyMethod&lt;/code&gt;. A maximum of 20 parameters can be modified in a single request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the Amazon Neptune console or the &lt;a&gt;DescribeDBClusterParameters&lt;/a&gt; command to verify that your DB cluster parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBClusterParameterGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyDBClusterParameterGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterParameterGroupMessage modifyDBClusterParameterGroupMessage, final ApiCallback<DBClusterParameterGroupNameMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTModifyDBClusterParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterParameterGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupNameMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTModifyDBClusterSnapshotAttribute
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBClusterSnapshotAttributeMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SharedSnapshotQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyDBClusterSnapshotAttributeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterSnapshotAttributeMessage modifyDBClusterSnapshotAttributeMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyDBClusterSnapshotAttributeMessage;

        // create path and map variables
        String localVarPath = "/#Action=ModifyDBClusterSnapshotAttribute";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTModifyDBClusterSnapshotAttributeValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterSnapshotAttributeMessage modifyDBClusterSnapshotAttributeMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTModifyDBClusterSnapshotAttribute(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTModifyDBClusterSnapshotAttribute(Async)");
        }

        return pOSTModifyDBClusterSnapshotAttributeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterSnapshotAttributeMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.&lt;/p&gt; &lt;p&gt;To share a manual DB cluster snapshot with other Amazon accounts, specify &lt;code&gt;restore&lt;/code&gt; as the &lt;code&gt;AttributeName&lt;/code&gt; and use the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter to add a list of IDs of the Amazon accounts that are authorized to restore the manual DB cluster snapshot. Use the value &lt;code&gt;all&lt;/code&gt; to make the manual DB cluster snapshot public, which means that it can be copied or restored by all Amazon accounts. Do not add the &lt;code&gt;all&lt;/code&gt; value for any manual DB cluster snapshots that contain private information that you don&#39;t want available to all Amazon accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized Amazon account IDs for the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter. You can&#39;t use &lt;code&gt;all&lt;/code&gt; as a value for that parameter in this case.&lt;/p&gt; &lt;p&gt;To view which Amazon accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the &lt;a&gt;DescribeDBClusterSnapshotAttributes&lt;/a&gt; API action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBClusterSnapshotAttributeMessage  (optional)
     * @return ModifyDBClusterSnapshotAttributeResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SharedSnapshotQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public ModifyDBClusterSnapshotAttributeResult pOSTModifyDBClusterSnapshotAttribute(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterSnapshotAttributeMessage modifyDBClusterSnapshotAttributeMessage) throws ApiException {
        ApiResponse<ModifyDBClusterSnapshotAttributeResult> localVarResp = pOSTModifyDBClusterSnapshotAttributeWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterSnapshotAttributeMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.&lt;/p&gt; &lt;p&gt;To share a manual DB cluster snapshot with other Amazon accounts, specify &lt;code&gt;restore&lt;/code&gt; as the &lt;code&gt;AttributeName&lt;/code&gt; and use the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter to add a list of IDs of the Amazon accounts that are authorized to restore the manual DB cluster snapshot. Use the value &lt;code&gt;all&lt;/code&gt; to make the manual DB cluster snapshot public, which means that it can be copied or restored by all Amazon accounts. Do not add the &lt;code&gt;all&lt;/code&gt; value for any manual DB cluster snapshots that contain private information that you don&#39;t want available to all Amazon accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized Amazon account IDs for the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter. You can&#39;t use &lt;code&gt;all&lt;/code&gt; as a value for that parameter in this case.&lt;/p&gt; &lt;p&gt;To view which Amazon accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the &lt;a&gt;DescribeDBClusterSnapshotAttributes&lt;/a&gt; API action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBClusterSnapshotAttributeMessage  (optional)
     * @return ApiResponse&lt;ModifyDBClusterSnapshotAttributeResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SharedSnapshotQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyDBClusterSnapshotAttributeResult> pOSTModifyDBClusterSnapshotAttributeWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterSnapshotAttributeMessage modifyDBClusterSnapshotAttributeMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTModifyDBClusterSnapshotAttributeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterSnapshotAttributeMessage, null);
        Type localVarReturnType = new TypeToken<ModifyDBClusterSnapshotAttributeResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.&lt;/p&gt; &lt;p&gt;To share a manual DB cluster snapshot with other Amazon accounts, specify &lt;code&gt;restore&lt;/code&gt; as the &lt;code&gt;AttributeName&lt;/code&gt; and use the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter to add a list of IDs of the Amazon accounts that are authorized to restore the manual DB cluster snapshot. Use the value &lt;code&gt;all&lt;/code&gt; to make the manual DB cluster snapshot public, which means that it can be copied or restored by all Amazon accounts. Do not add the &lt;code&gt;all&lt;/code&gt; value for any manual DB cluster snapshots that contain private information that you don&#39;t want available to all Amazon accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized Amazon account IDs for the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter. You can&#39;t use &lt;code&gt;all&lt;/code&gt; as a value for that parameter in this case.&lt;/p&gt; &lt;p&gt;To view which Amazon accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the &lt;a&gt;DescribeDBClusterSnapshotAttributes&lt;/a&gt; API action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBClusterSnapshotAttributeMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SharedSnapshotQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyDBClusterSnapshotAttributeAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterSnapshotAttributeMessage modifyDBClusterSnapshotAttributeMessage, final ApiCallback<ModifyDBClusterSnapshotAttributeResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTModifyDBClusterSnapshotAttributeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterSnapshotAttributeMessage, _callback);
        Type localVarReturnType = new TypeToken<ModifyDBClusterSnapshotAttributeResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTModifyDBInstance
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBInstanceMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ProvisionedIopsNotAvailableInAZFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> DBUpgradeDependencyFailureFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> CertificateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> DomainNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyDBInstanceCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBInstanceMessage modifyDBInstanceMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyDBInstanceMessage;

        // create path and map variables
        String localVarPath = "/#Action=ModifyDBInstance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTModifyDBInstanceValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBInstanceMessage modifyDBInstanceMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTModifyDBInstance(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTModifyDBInstance(Async)");
        }

        return pOSTModifyDBInstanceCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBInstanceMessage, _callback);

    }

    /**
     * 
     * Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call &lt;a&gt;DescribeValidDBInstanceModifications&lt;/a&gt; before you call &lt;a&gt;ModifyDBInstance&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBInstanceMessage  (optional)
     * @return ModifyDBInstanceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ProvisionedIopsNotAvailableInAZFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> DBUpgradeDependencyFailureFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> CertificateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> DomainNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ModifyDBInstanceResult pOSTModifyDBInstance(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBInstanceMessage modifyDBInstanceMessage) throws ApiException {
        ApiResponse<ModifyDBInstanceResult> localVarResp = pOSTModifyDBInstanceWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBInstanceMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call &lt;a&gt;DescribeValidDBInstanceModifications&lt;/a&gt; before you call &lt;a&gt;ModifyDBInstance&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBInstanceMessage  (optional)
     * @return ApiResponse&lt;ModifyDBInstanceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ProvisionedIopsNotAvailableInAZFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> DBUpgradeDependencyFailureFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> CertificateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> DomainNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyDBInstanceResult> pOSTModifyDBInstanceWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBInstanceMessage modifyDBInstanceMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTModifyDBInstanceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBInstanceMessage, null);
        Type localVarReturnType = new TypeToken<ModifyDBInstanceResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call &lt;a&gt;DescribeValidDBInstanceModifications&lt;/a&gt; before you call &lt;a&gt;ModifyDBInstance&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBInstanceMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ProvisionedIopsNotAvailableInAZFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> DBUpgradeDependencyFailureFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> CertificateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> DomainNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyDBInstanceAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBInstanceMessage modifyDBInstanceMessage, final ApiCallback<ModifyDBInstanceResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTModifyDBInstanceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBInstanceMessage, _callback);
        Type localVarReturnType = new TypeToken<ModifyDBInstanceResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTModifyDBParameterGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBParameterGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyDBParameterGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBParameterGroupMessage modifyDBParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyDBParameterGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=ModifyDBParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTModifyDBParameterGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBParameterGroupMessage modifyDBParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTModifyDBParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTModifyDBParameterGroup(Async)");
        }

        return pOSTModifyDBParameterGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBParameterGroupMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt;, &lt;code&gt;ParameterValue&lt;/code&gt;, and &lt;code&gt;ApplyMethod&lt;/code&gt;. A maximum of 20 parameters can be modified in a single request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the Amazon Neptune console or the &lt;i&gt;DescribeDBParameters&lt;/i&gt; command to verify that your DB parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBParameterGroupMessage  (optional)
     * @return DBParameterGroupNameMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DBParameterGroupNameMessage pOSTModifyDBParameterGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBParameterGroupMessage modifyDBParameterGroupMessage) throws ApiException {
        ApiResponse<DBParameterGroupNameMessage> localVarResp = pOSTModifyDBParameterGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBParameterGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt;, &lt;code&gt;ParameterValue&lt;/code&gt;, and &lt;code&gt;ApplyMethod&lt;/code&gt;. A maximum of 20 parameters can be modified in a single request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the Amazon Neptune console or the &lt;i&gt;DescribeDBParameters&lt;/i&gt; command to verify that your DB parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBParameterGroupMessage  (optional)
     * @return ApiResponse&lt;DBParameterGroupNameMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBParameterGroupNameMessage> pOSTModifyDBParameterGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBParameterGroupMessage modifyDBParameterGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTModifyDBParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBParameterGroupMessage, null);
        Type localVarReturnType = new TypeToken<DBParameterGroupNameMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt;, &lt;code&gt;ParameterValue&lt;/code&gt;, and &lt;code&gt;ApplyMethod&lt;/code&gt;. A maximum of 20 parameters can be modified in a single request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter. You can use the &lt;i&gt;Parameter Groups&lt;/i&gt; option of the Amazon Neptune console or the &lt;i&gt;DescribeDBParameters&lt;/i&gt; command to verify that your DB parameter group has been created or modified.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBParameterGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyDBParameterGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBParameterGroupMessage modifyDBParameterGroupMessage, final ApiCallback<DBParameterGroupNameMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTModifyDBParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBParameterGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<DBParameterGroupNameMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTModifyDBSubnetGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBSubnetGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetAlreadyInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyDBSubnetGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBSubnetGroupMessage modifyDBSubnetGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyDBSubnetGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=ModifyDBSubnetGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTModifyDBSubnetGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBSubnetGroupMessage modifyDBSubnetGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTModifyDBSubnetGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTModifyDBSubnetGroup(Async)");
        }

        return pOSTModifyDBSubnetGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBSubnetGroupMessage, _callback);

    }

    /**
     * 
     * Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the Amazon Region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBSubnetGroupMessage  (optional)
     * @return ModifyDBSubnetGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetAlreadyInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public ModifyDBSubnetGroupResult pOSTModifyDBSubnetGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBSubnetGroupMessage modifyDBSubnetGroupMessage) throws ApiException {
        ApiResponse<ModifyDBSubnetGroupResult> localVarResp = pOSTModifyDBSubnetGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBSubnetGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the Amazon Region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBSubnetGroupMessage  (optional)
     * @return ApiResponse&lt;ModifyDBSubnetGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetAlreadyInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyDBSubnetGroupResult> pOSTModifyDBSubnetGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBSubnetGroupMessage modifyDBSubnetGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTModifyDBSubnetGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBSubnetGroupMessage, null);
        Type localVarReturnType = new TypeToken<ModifyDBSubnetGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the Amazon Region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBSubnetGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetAlreadyInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyDBSubnetGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBSubnetGroupMessage modifyDBSubnetGroupMessage, final ApiCallback<ModifyDBSubnetGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTModifyDBSubnetGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBSubnetGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<ModifyDBSubnetGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTModifyEventSubscription
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyEventSubscriptionMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyEventSubscriptionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyEventSubscriptionMessage modifyEventSubscriptionMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyEventSubscriptionMessage;

        // create path and map variables
        String localVarPath = "/#Action=ModifyEventSubscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTModifyEventSubscriptionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyEventSubscriptionMessage modifyEventSubscriptionMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTModifyEventSubscription(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTModifyEventSubscription(Async)");
        }

        return pOSTModifyEventSubscriptionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyEventSubscriptionMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Modifies an existing event notification subscription. Note that you can&#39;t modify the source identifiers using this call; to change source identifiers for a subscription, use the &lt;a&gt;AddSourceIdentifierToSubscription&lt;/a&gt; and &lt;a&gt;RemoveSourceIdentifierFromSubscription&lt;/a&gt; calls.&lt;/p&gt; &lt;p&gt;You can see a list of the event categories for a given SourceType by using the &lt;b&gt;DescribeEventCategories&lt;/b&gt; action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyEventSubscriptionMessage  (optional)
     * @return ModifyEventSubscriptionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ModifyEventSubscriptionResult pOSTModifyEventSubscription(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyEventSubscriptionMessage modifyEventSubscriptionMessage) throws ApiException {
        ApiResponse<ModifyEventSubscriptionResult> localVarResp = pOSTModifyEventSubscriptionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyEventSubscriptionMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Modifies an existing event notification subscription. Note that you can&#39;t modify the source identifiers using this call; to change source identifiers for a subscription, use the &lt;a&gt;AddSourceIdentifierToSubscription&lt;/a&gt; and &lt;a&gt;RemoveSourceIdentifierFromSubscription&lt;/a&gt; calls.&lt;/p&gt; &lt;p&gt;You can see a list of the event categories for a given SourceType by using the &lt;b&gt;DescribeEventCategories&lt;/b&gt; action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyEventSubscriptionMessage  (optional)
     * @return ApiResponse&lt;ModifyEventSubscriptionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyEventSubscriptionResult> pOSTModifyEventSubscriptionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyEventSubscriptionMessage modifyEventSubscriptionMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTModifyEventSubscriptionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyEventSubscriptionMessage, null);
        Type localVarReturnType = new TypeToken<ModifyEventSubscriptionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Modifies an existing event notification subscription. Note that you can&#39;t modify the source identifiers using this call; to change source identifiers for a subscription, use the &lt;a&gt;AddSourceIdentifierToSubscription&lt;/a&gt; and &lt;a&gt;RemoveSourceIdentifierFromSubscription&lt;/a&gt; calls.&lt;/p&gt; &lt;p&gt;You can see a list of the event categories for a given SourceType by using the &lt;b&gt;DescribeEventCategories&lt;/b&gt; action.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyEventSubscriptionMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyEventSubscriptionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyEventSubscriptionMessage modifyEventSubscriptionMessage, final ApiCallback<ModifyEventSubscriptionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTModifyEventSubscriptionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyEventSubscriptionMessage, _callback);
        Type localVarReturnType = new TypeToken<ModifyEventSubscriptionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTModifyGlobalCluster
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyGlobalClusterMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyGlobalClusterCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyGlobalClusterMessage modifyGlobalClusterMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyGlobalClusterMessage;

        // create path and map variables
        String localVarPath = "/#Action=ModifyGlobalCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTModifyGlobalClusterValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyGlobalClusterMessage modifyGlobalClusterMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTModifyGlobalCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTModifyGlobalCluster(Async)");
        }

        return pOSTModifyGlobalClusterCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyGlobalClusterMessage, _callback);

    }

    /**
     * 
     * Modify a setting for an Amazon Neptune global cluster. You can change one or more database configuration parameters by specifying these parameters and their new values in the request.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyGlobalClusterMessage  (optional)
     * @return ModifyGlobalClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ModifyGlobalClusterResult pOSTModifyGlobalCluster(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyGlobalClusterMessage modifyGlobalClusterMessage) throws ApiException {
        ApiResponse<ModifyGlobalClusterResult> localVarResp = pOSTModifyGlobalClusterWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyGlobalClusterMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Modify a setting for an Amazon Neptune global cluster. You can change one or more database configuration parameters by specifying these parameters and their new values in the request.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyGlobalClusterMessage  (optional)
     * @return ApiResponse&lt;ModifyGlobalClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyGlobalClusterResult> pOSTModifyGlobalClusterWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyGlobalClusterMessage modifyGlobalClusterMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTModifyGlobalClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyGlobalClusterMessage, null);
        Type localVarReturnType = new TypeToken<ModifyGlobalClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modify a setting for an Amazon Neptune global cluster. You can change one or more database configuration parameters by specifying these parameters and their new values in the request.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyGlobalClusterMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyGlobalClusterAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyGlobalClusterMessage modifyGlobalClusterMessage, final ApiCallback<ModifyGlobalClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTModifyGlobalClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyGlobalClusterMessage, _callback);
        Type localVarReturnType = new TypeToken<ModifyGlobalClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTPromoteReadReplicaDBCluster
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param promoteReadReplicaDBClusterMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPromoteReadReplicaDBClusterCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PromoteReadReplicaDBClusterMessage promoteReadReplicaDBClusterMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = promoteReadReplicaDBClusterMessage;

        // create path and map variables
        String localVarPath = "/#Action=PromoteReadReplicaDBCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTPromoteReadReplicaDBClusterValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PromoteReadReplicaDBClusterMessage promoteReadReplicaDBClusterMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTPromoteReadReplicaDBCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTPromoteReadReplicaDBCluster(Async)");
        }

        return pOSTPromoteReadReplicaDBClusterCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, promoteReadReplicaDBClusterMessage, _callback);

    }

    /**
     * 
     * Not supported.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param promoteReadReplicaDBClusterMessage  (optional)
     * @return PromoteReadReplicaDBClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public PromoteReadReplicaDBClusterResult pOSTPromoteReadReplicaDBCluster(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PromoteReadReplicaDBClusterMessage promoteReadReplicaDBClusterMessage) throws ApiException {
        ApiResponse<PromoteReadReplicaDBClusterResult> localVarResp = pOSTPromoteReadReplicaDBClusterWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, promoteReadReplicaDBClusterMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Not supported.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param promoteReadReplicaDBClusterMessage  (optional)
     * @return ApiResponse&lt;PromoteReadReplicaDBClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PromoteReadReplicaDBClusterResult> pOSTPromoteReadReplicaDBClusterWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PromoteReadReplicaDBClusterMessage promoteReadReplicaDBClusterMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTPromoteReadReplicaDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, promoteReadReplicaDBClusterMessage, null);
        Type localVarReturnType = new TypeToken<PromoteReadReplicaDBClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Not supported.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param promoteReadReplicaDBClusterMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPromoteReadReplicaDBClusterAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PromoteReadReplicaDBClusterMessage promoteReadReplicaDBClusterMessage, final ApiCallback<PromoteReadReplicaDBClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTPromoteReadReplicaDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, promoteReadReplicaDBClusterMessage, _callback);
        Type localVarReturnType = new TypeToken<PromoteReadReplicaDBClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRebootDBInstance
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param rebootDBInstanceMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRebootDBInstanceCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RebootDBInstanceMessage rebootDBInstanceMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rebootDBInstanceMessage;

        // create path and map variables
        String localVarPath = "/#Action=RebootDBInstance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRebootDBInstanceValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RebootDBInstanceMessage rebootDBInstanceMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRebootDBInstance(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRebootDBInstance(Async)");
        }

        return pOSTRebootDBInstanceCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rebootDBInstanceMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.&lt;/p&gt; &lt;p&gt;Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param rebootDBInstanceMessage  (optional)
     * @return RebootDBInstanceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public RebootDBInstanceResult pOSTRebootDBInstance(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RebootDBInstanceMessage rebootDBInstanceMessage) throws ApiException {
        ApiResponse<RebootDBInstanceResult> localVarResp = pOSTRebootDBInstanceWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rebootDBInstanceMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.&lt;/p&gt; &lt;p&gt;Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param rebootDBInstanceMessage  (optional)
     * @return ApiResponse&lt;RebootDBInstanceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RebootDBInstanceResult> pOSTRebootDBInstanceWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RebootDBInstanceMessage rebootDBInstanceMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTRebootDBInstanceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rebootDBInstanceMessage, null);
        Type localVarReturnType = new TypeToken<RebootDBInstanceResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.&lt;/p&gt; &lt;p&gt;Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param rebootDBInstanceMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRebootDBInstanceAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RebootDBInstanceMessage rebootDBInstanceMessage, final ApiCallback<RebootDBInstanceResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRebootDBInstanceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rebootDBInstanceMessage, _callback);
        Type localVarReturnType = new TypeToken<RebootDBInstanceResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRemoveFromGlobalCluster
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeFromGlobalClusterMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRemoveFromGlobalClusterCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveFromGlobalClusterMessage removeFromGlobalClusterMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeFromGlobalClusterMessage;

        // create path and map variables
        String localVarPath = "/#Action=RemoveFromGlobalCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRemoveFromGlobalClusterValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveFromGlobalClusterMessage removeFromGlobalClusterMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRemoveFromGlobalCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRemoveFromGlobalCluster(Async)");
        }

        return pOSTRemoveFromGlobalClusterCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeFromGlobalClusterMessage, _callback);

    }

    /**
     * 
     * Detaches a Neptune DB cluster from a Neptune global database. A secondary cluster becomes a normal standalone cluster with read-write capability instead of being read-only, and no longer receives data from a the primary cluster.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeFromGlobalClusterMessage  (optional)
     * @return RemoveFromGlobalClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFromGlobalClusterResult pOSTRemoveFromGlobalCluster(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveFromGlobalClusterMessage removeFromGlobalClusterMessage) throws ApiException {
        ApiResponse<RemoveFromGlobalClusterResult> localVarResp = pOSTRemoveFromGlobalClusterWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeFromGlobalClusterMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Detaches a Neptune DB cluster from a Neptune global database. A secondary cluster becomes a normal standalone cluster with read-write capability instead of being read-only, and no longer receives data from a the primary cluster.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeFromGlobalClusterMessage  (optional)
     * @return ApiResponse&lt;RemoveFromGlobalClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemoveFromGlobalClusterResult> pOSTRemoveFromGlobalClusterWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveFromGlobalClusterMessage removeFromGlobalClusterMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTRemoveFromGlobalClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeFromGlobalClusterMessage, null);
        Type localVarReturnType = new TypeToken<RemoveFromGlobalClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Detaches a Neptune DB cluster from a Neptune global database. A secondary cluster becomes a normal standalone cluster with read-write capability instead of being read-only, and no longer receives data from a the primary cluster.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeFromGlobalClusterMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRemoveFromGlobalClusterAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveFromGlobalClusterMessage removeFromGlobalClusterMessage, final ApiCallback<RemoveFromGlobalClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRemoveFromGlobalClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeFromGlobalClusterMessage, _callback);
        Type localVarReturnType = new TypeToken<RemoveFromGlobalClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRemoveRoleFromDBCluster
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeRoleFromDBClusterMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRemoveRoleFromDBClusterCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveRoleFromDBClusterMessage removeRoleFromDBClusterMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeRoleFromDBClusterMessage;

        // create path and map variables
        String localVarPath = "/#Action=RemoveRoleFromDBCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRemoveRoleFromDBClusterValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveRoleFromDBClusterMessage removeRoleFromDBClusterMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRemoveRoleFromDBCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRemoveRoleFromDBCluster(Async)");
        }

        return pOSTRemoveRoleFromDBClusterCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeRoleFromDBClusterMessage, _callback);

    }

    /**
     * 
     * Disassociates an Identity and Access Management (IAM) role from a DB cluster.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeRoleFromDBClusterMessage  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTRemoveRoleFromDBCluster(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveRoleFromDBClusterMessage removeRoleFromDBClusterMessage) throws ApiException {
        pOSTRemoveRoleFromDBClusterWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeRoleFromDBClusterMessage);
    }

    /**
     * 
     * Disassociates an Identity and Access Management (IAM) role from a DB cluster.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeRoleFromDBClusterMessage  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTRemoveRoleFromDBClusterWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveRoleFromDBClusterMessage removeRoleFromDBClusterMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTRemoveRoleFromDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeRoleFromDBClusterMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Disassociates an Identity and Access Management (IAM) role from a DB cluster.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeRoleFromDBClusterMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRemoveRoleFromDBClusterAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveRoleFromDBClusterMessage removeRoleFromDBClusterMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRemoveRoleFromDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeRoleFromDBClusterMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRemoveSourceIdentifierFromSubscription
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeSourceIdentifierFromSubscriptionMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRemoveSourceIdentifierFromSubscriptionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveSourceIdentifierFromSubscriptionMessage removeSourceIdentifierFromSubscriptionMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeSourceIdentifierFromSubscriptionMessage;

        // create path and map variables
        String localVarPath = "/#Action=RemoveSourceIdentifierFromSubscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRemoveSourceIdentifierFromSubscriptionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveSourceIdentifierFromSubscriptionMessage removeSourceIdentifierFromSubscriptionMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRemoveSourceIdentifierFromSubscription(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRemoveSourceIdentifierFromSubscription(Async)");
        }

        return pOSTRemoveSourceIdentifierFromSubscriptionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeSourceIdentifierFromSubscriptionMessage, _callback);

    }

    /**
     * 
     * Removes a source identifier from an existing event notification subscription.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeSourceIdentifierFromSubscriptionMessage  (optional)
     * @return RemoveSourceIdentifierFromSubscriptionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public RemoveSourceIdentifierFromSubscriptionResult pOSTRemoveSourceIdentifierFromSubscription(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveSourceIdentifierFromSubscriptionMessage removeSourceIdentifierFromSubscriptionMessage) throws ApiException {
        ApiResponse<RemoveSourceIdentifierFromSubscriptionResult> localVarResp = pOSTRemoveSourceIdentifierFromSubscriptionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeSourceIdentifierFromSubscriptionMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes a source identifier from an existing event notification subscription.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeSourceIdentifierFromSubscriptionMessage  (optional)
     * @return ApiResponse&lt;RemoveSourceIdentifierFromSubscriptionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemoveSourceIdentifierFromSubscriptionResult> pOSTRemoveSourceIdentifierFromSubscriptionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveSourceIdentifierFromSubscriptionMessage removeSourceIdentifierFromSubscriptionMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTRemoveSourceIdentifierFromSubscriptionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeSourceIdentifierFromSubscriptionMessage, null);
        Type localVarReturnType = new TypeToken<RemoveSourceIdentifierFromSubscriptionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes a source identifier from an existing event notification subscription.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeSourceIdentifierFromSubscriptionMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRemoveSourceIdentifierFromSubscriptionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveSourceIdentifierFromSubscriptionMessage removeSourceIdentifierFromSubscriptionMessage, final ApiCallback<RemoveSourceIdentifierFromSubscriptionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRemoveSourceIdentifierFromSubscriptionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeSourceIdentifierFromSubscriptionMessage, _callback);
        Type localVarReturnType = new TypeToken<RemoveSourceIdentifierFromSubscriptionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRemoveTagsFromResource
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeTagsFromResourceMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRemoveTagsFromResourceCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveTagsFromResourceMessage removeTagsFromResourceMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeTagsFromResourceMessage;

        // create path and map variables
        String localVarPath = "/#Action=RemoveTagsFromResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRemoveTagsFromResourceValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveTagsFromResourceMessage removeTagsFromResourceMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRemoveTagsFromResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRemoveTagsFromResource(Async)");
        }

        return pOSTRemoveTagsFromResourceCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeTagsFromResourceMessage, _callback);

    }

    /**
     * 
     * Removes metadata tags from an Amazon Neptune resource.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeTagsFromResourceMessage  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTRemoveTagsFromResource(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveTagsFromResourceMessage removeTagsFromResourceMessage) throws ApiException {
        pOSTRemoveTagsFromResourceWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeTagsFromResourceMessage);
    }

    /**
     * 
     * Removes metadata tags from an Amazon Neptune resource.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeTagsFromResourceMessage  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTRemoveTagsFromResourceWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveTagsFromResourceMessage removeTagsFromResourceMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTRemoveTagsFromResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeTagsFromResourceMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Removes metadata tags from an Amazon Neptune resource.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeTagsFromResourceMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRemoveTagsFromResourceAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveTagsFromResourceMessage removeTagsFromResourceMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRemoveTagsFromResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeTagsFromResourceMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTResetDBClusterParameterGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetDBClusterParameterGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTResetDBClusterParameterGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ResetDBClusterParameterGroupMessage resetDBClusterParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resetDBClusterParameterGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=ResetDBClusterParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTResetDBClusterParameterGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ResetDBClusterParameterGroupMessage resetDBClusterParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTResetDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTResetDBClusterParameterGroup(Async)");
        }

        return pOSTResetDBClusterParameterGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetDBClusterParameterGroupMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt; Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt; and &lt;code&gt;ApplyMethod&lt;/code&gt;. To reset the entire DB cluster parameter group, specify the &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; and &lt;code&gt;ResetAllParameters&lt;/code&gt; parameters.&lt;/p&gt; &lt;p&gt; When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to &lt;code&gt;pending-reboot&lt;/code&gt; to take effect on the next DB instance restart or &lt;a&gt;RebootDBInstance&lt;/a&gt; request. You must call &lt;a&gt;RebootDBInstance&lt;/a&gt; for every DB instance in your DB cluster that you want the updated static parameter to apply to.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetDBClusterParameterGroupMessage  (optional)
     * @return DBClusterParameterGroupNameMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBClusterParameterGroupNameMessage pOSTResetDBClusterParameterGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ResetDBClusterParameterGroupMessage resetDBClusterParameterGroupMessage) throws ApiException {
        ApiResponse<DBClusterParameterGroupNameMessage> localVarResp = pOSTResetDBClusterParameterGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetDBClusterParameterGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt; and &lt;code&gt;ApplyMethod&lt;/code&gt;. To reset the entire DB cluster parameter group, specify the &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; and &lt;code&gt;ResetAllParameters&lt;/code&gt; parameters.&lt;/p&gt; &lt;p&gt; When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to &lt;code&gt;pending-reboot&lt;/code&gt; to take effect on the next DB instance restart or &lt;a&gt;RebootDBInstance&lt;/a&gt; request. You must call &lt;a&gt;RebootDBInstance&lt;/a&gt; for every DB instance in your DB cluster that you want the updated static parameter to apply to.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetDBClusterParameterGroupMessage  (optional)
     * @return ApiResponse&lt;DBClusterParameterGroupNameMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBClusterParameterGroupNameMessage> pOSTResetDBClusterParameterGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ResetDBClusterParameterGroupMessage resetDBClusterParameterGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTResetDBClusterParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetDBClusterParameterGroupMessage, null);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupNameMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt; and &lt;code&gt;ApplyMethod&lt;/code&gt;. To reset the entire DB cluster parameter group, specify the &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; and &lt;code&gt;ResetAllParameters&lt;/code&gt; parameters.&lt;/p&gt; &lt;p&gt; When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to &lt;code&gt;pending-reboot&lt;/code&gt; to take effect on the next DB instance restart or &lt;a&gt;RebootDBInstance&lt;/a&gt; request. You must call &lt;a&gt;RebootDBInstance&lt;/a&gt; for every DB instance in your DB cluster that you want the updated static parameter to apply to.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetDBClusterParameterGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTResetDBClusterParameterGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ResetDBClusterParameterGroupMessage resetDBClusterParameterGroupMessage, final ApiCallback<DBClusterParameterGroupNameMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTResetDBClusterParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetDBClusterParameterGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupNameMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTResetDBParameterGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetDBParameterGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTResetDBParameterGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ResetDBParameterGroupMessage resetDBParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resetDBParameterGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=ResetDBParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTResetDBParameterGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ResetDBParameterGroupMessage resetDBParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTResetDBParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTResetDBParameterGroup(Async)");
        }

        return pOSTResetDBParameterGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetDBParameterGroupMessage, _callback);

    }

    /**
     * 
     * Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: &lt;code&gt;ParameterName&lt;/code&gt; and &lt;code&gt;ApplyMethod&lt;/code&gt;. To reset the entire DB parameter group, specify the &lt;code&gt;DBParameterGroup&lt;/code&gt; name and &lt;code&gt;ResetAllParameters&lt;/code&gt; parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to &lt;code&gt;pending-reboot&lt;/code&gt; to take effect on the next DB instance restart or &lt;code&gt;RebootDBInstance&lt;/code&gt; request.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetDBParameterGroupMessage  (optional)
     * @return DBParameterGroupNameMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBParameterGroupNameMessage pOSTResetDBParameterGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ResetDBParameterGroupMessage resetDBParameterGroupMessage) throws ApiException {
        ApiResponse<DBParameterGroupNameMessage> localVarResp = pOSTResetDBParameterGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetDBParameterGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: &lt;code&gt;ParameterName&lt;/code&gt; and &lt;code&gt;ApplyMethod&lt;/code&gt;. To reset the entire DB parameter group, specify the &lt;code&gt;DBParameterGroup&lt;/code&gt; name and &lt;code&gt;ResetAllParameters&lt;/code&gt; parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to &lt;code&gt;pending-reboot&lt;/code&gt; to take effect on the next DB instance restart or &lt;code&gt;RebootDBInstance&lt;/code&gt; request.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetDBParameterGroupMessage  (optional)
     * @return ApiResponse&lt;DBParameterGroupNameMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBParameterGroupNameMessage> pOSTResetDBParameterGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ResetDBParameterGroupMessage resetDBParameterGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTResetDBParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetDBParameterGroupMessage, null);
        Type localVarReturnType = new TypeToken<DBParameterGroupNameMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: &lt;code&gt;ParameterName&lt;/code&gt; and &lt;code&gt;ApplyMethod&lt;/code&gt;. To reset the entire DB parameter group, specify the &lt;code&gt;DBParameterGroup&lt;/code&gt; name and &lt;code&gt;ResetAllParameters&lt;/code&gt; parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to &lt;code&gt;pending-reboot&lt;/code&gt; to take effect on the next DB instance restart or &lt;code&gt;RebootDBInstance&lt;/code&gt; request.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetDBParameterGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTResetDBParameterGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ResetDBParameterGroupMessage resetDBParameterGroupMessage, final ApiCallback<DBParameterGroupNameMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTResetDBParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetDBParameterGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<DBParameterGroupNameMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRestoreDBClusterFromSnapshot
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param restoreDBClusterFromSnapshotMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRestoreDBClusterFromSnapshotCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RestoreDBClusterFromSnapshotMessage restoreDBClusterFromSnapshotMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = restoreDBClusterFromSnapshotMessage;

        // create path and map variables
        String localVarPath = "/#Action=RestoreDBClusterFromSnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRestoreDBClusterFromSnapshotValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RestoreDBClusterFromSnapshotMessage restoreDBClusterFromSnapshotMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRestoreDBClusterFromSnapshot(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRestoreDBClusterFromSnapshot(Async)");
        }

        return pOSTRestoreDBClusterFromSnapshotCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreDBClusterFromSnapshotMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new DB cluster from a DB snapshot or DB cluster snapshot.&lt;/p&gt; &lt;p&gt;If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.&lt;/p&gt; &lt;p&gt;If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param restoreDBClusterFromSnapshotMessage  (optional)
     * @return RestoreDBClusterFromSnapshotResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public RestoreDBClusterFromSnapshotResult pOSTRestoreDBClusterFromSnapshot(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RestoreDBClusterFromSnapshotMessage restoreDBClusterFromSnapshotMessage) throws ApiException {
        ApiResponse<RestoreDBClusterFromSnapshotResult> localVarResp = pOSTRestoreDBClusterFromSnapshotWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreDBClusterFromSnapshotMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new DB cluster from a DB snapshot or DB cluster snapshot.&lt;/p&gt; &lt;p&gt;If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.&lt;/p&gt; &lt;p&gt;If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param restoreDBClusterFromSnapshotMessage  (optional)
     * @return ApiResponse&lt;RestoreDBClusterFromSnapshotResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestoreDBClusterFromSnapshotResult> pOSTRestoreDBClusterFromSnapshotWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RestoreDBClusterFromSnapshotMessage restoreDBClusterFromSnapshotMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTRestoreDBClusterFromSnapshotValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreDBClusterFromSnapshotMessage, null);
        Type localVarReturnType = new TypeToken<RestoreDBClusterFromSnapshotResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new DB cluster from a DB snapshot or DB cluster snapshot.&lt;/p&gt; &lt;p&gt;If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.&lt;/p&gt; &lt;p&gt;If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param restoreDBClusterFromSnapshotMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRestoreDBClusterFromSnapshotAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RestoreDBClusterFromSnapshotMessage restoreDBClusterFromSnapshotMessage, final ApiCallback<RestoreDBClusterFromSnapshotResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRestoreDBClusterFromSnapshotValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreDBClusterFromSnapshotMessage, _callback);
        Type localVarReturnType = new TypeToken<RestoreDBClusterFromSnapshotResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRestoreDBClusterToPointInTime
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param restoreDBClusterToPointInTimeMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRestoreDBClusterToPointInTimeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RestoreDBClusterToPointInTimeMessage restoreDBClusterToPointInTimeMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = restoreDBClusterToPointInTimeMessage;

        // create path and map variables
        String localVarPath = "/#Action=RestoreDBClusterToPointInTime";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRestoreDBClusterToPointInTimeValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RestoreDBClusterToPointInTimeMessage restoreDBClusterToPointInTimeMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRestoreDBClusterToPointInTime(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRestoreDBClusterToPointInTime(Async)");
        }

        return pOSTRestoreDBClusterToPointInTimeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreDBClusterToPointInTimeMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before &lt;code&gt;LatestRestorableTime&lt;/code&gt; for up to &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the &lt;a&gt;CreateDBInstance&lt;/a&gt; action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in &lt;code&gt;DBClusterIdentifier&lt;/code&gt;. You can create DB instances only after the &lt;code&gt;RestoreDBClusterToPointInTime&lt;/code&gt; action has completed and the DB cluster is available.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param restoreDBClusterToPointInTimeMessage  (optional)
     * @return RestoreDBClusterToPointInTimeResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public RestoreDBClusterToPointInTimeResult pOSTRestoreDBClusterToPointInTime(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RestoreDBClusterToPointInTimeMessage restoreDBClusterToPointInTimeMessage) throws ApiException {
        ApiResponse<RestoreDBClusterToPointInTimeResult> localVarResp = pOSTRestoreDBClusterToPointInTimeWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreDBClusterToPointInTimeMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before &lt;code&gt;LatestRestorableTime&lt;/code&gt; for up to &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the &lt;a&gt;CreateDBInstance&lt;/a&gt; action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in &lt;code&gt;DBClusterIdentifier&lt;/code&gt;. You can create DB instances only after the &lt;code&gt;RestoreDBClusterToPointInTime&lt;/code&gt; action has completed and the DB cluster is available.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param restoreDBClusterToPointInTimeMessage  (optional)
     * @return ApiResponse&lt;RestoreDBClusterToPointInTimeResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestoreDBClusterToPointInTimeResult> pOSTRestoreDBClusterToPointInTimeWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RestoreDBClusterToPointInTimeMessage restoreDBClusterToPointInTimeMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTRestoreDBClusterToPointInTimeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreDBClusterToPointInTimeMessage, null);
        Type localVarReturnType = new TypeToken<RestoreDBClusterToPointInTimeResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before &lt;code&gt;LatestRestorableTime&lt;/code&gt; for up to &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the &lt;a&gt;CreateDBInstance&lt;/a&gt; action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in &lt;code&gt;DBClusterIdentifier&lt;/code&gt;. You can create DB instances only after the &lt;code&gt;RestoreDBClusterToPointInTime&lt;/code&gt; action has completed and the DB cluster is available.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param restoreDBClusterToPointInTimeMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> OptionGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRestoreDBClusterToPointInTimeAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RestoreDBClusterToPointInTimeMessage restoreDBClusterToPointInTimeMessage, final ApiCallback<RestoreDBClusterToPointInTimeResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRestoreDBClusterToPointInTimeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreDBClusterToPointInTimeMessage, _callback);
        Type localVarReturnType = new TypeToken<RestoreDBClusterToPointInTimeResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTStartDBCluster
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startDBClusterMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTStartDBClusterCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StartDBClusterMessage startDBClusterMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startDBClusterMessage;

        // create path and map variables
        String localVarPath = "/#Action=StartDBCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTStartDBClusterValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StartDBClusterMessage startDBClusterMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTStartDBCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTStartDBCluster(Async)");
        }

        return pOSTStartDBClusterCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startDBClusterMessage, _callback);

    }

    /**
     * 
     * Starts an Amazon Neptune DB cluster that was stopped using the Amazon console, the Amazon CLI stop-db-cluster command, or the StopDBCluster API.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startDBClusterMessage  (optional)
     * @return StartDBClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public StartDBClusterResult pOSTStartDBCluster(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StartDBClusterMessage startDBClusterMessage) throws ApiException {
        ApiResponse<StartDBClusterResult> localVarResp = pOSTStartDBClusterWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startDBClusterMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Starts an Amazon Neptune DB cluster that was stopped using the Amazon console, the Amazon CLI stop-db-cluster command, or the StopDBCluster API.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startDBClusterMessage  (optional)
     * @return ApiResponse&lt;StartDBClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartDBClusterResult> pOSTStartDBClusterWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StartDBClusterMessage startDBClusterMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTStartDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startDBClusterMessage, null);
        Type localVarReturnType = new TypeToken<StartDBClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Starts an Amazon Neptune DB cluster that was stopped using the Amazon console, the Amazon CLI stop-db-cluster command, or the StopDBCluster API.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startDBClusterMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTStartDBClusterAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StartDBClusterMessage startDBClusterMessage, final ApiCallback<StartDBClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTStartDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startDBClusterMessage, _callback);
        Type localVarReturnType = new TypeToken<StartDBClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTStopDBCluster
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stopDBClusterMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTStopDBClusterCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StopDBClusterMessage stopDBClusterMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = stopDBClusterMessage;

        // create path and map variables
        String localVarPath = "/#Action=StopDBCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTStopDBClusterValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StopDBClusterMessage stopDBClusterMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTStopDBCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTStopDBCluster(Async)");
        }

        return pOSTStopDBClusterCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stopDBClusterMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Stops an Amazon Neptune DB cluster. When you stop a DB cluster, Neptune retains the DB cluster&#39;s metadata, including its endpoints and DB parameter groups.&lt;/p&gt; &lt;p&gt;Neptune also retains the transaction logs so you can do a point-in-time restore if necessary.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stopDBClusterMessage  (optional)
     * @return StopDBClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public StopDBClusterResult pOSTStopDBCluster(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StopDBClusterMessage stopDBClusterMessage) throws ApiException {
        ApiResponse<StopDBClusterResult> localVarResp = pOSTStopDBClusterWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stopDBClusterMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Stops an Amazon Neptune DB cluster. When you stop a DB cluster, Neptune retains the DB cluster&#39;s metadata, including its endpoints and DB parameter groups.&lt;/p&gt; &lt;p&gt;Neptune also retains the transaction logs so you can do a point-in-time restore if necessary.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stopDBClusterMessage  (optional)
     * @return ApiResponse&lt;StopDBClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StopDBClusterResult> pOSTStopDBClusterWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StopDBClusterMessage stopDBClusterMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTStopDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stopDBClusterMessage, null);
        Type localVarReturnType = new TypeToken<StopDBClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Stops an Amazon Neptune DB cluster. When you stop a DB cluster, Neptune retains the DB cluster&#39;s metadata, including its endpoints and DB parameter groups.&lt;/p&gt; &lt;p&gt;Neptune also retains the transaction logs so you can do a point-in-time restore if necessary.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stopDBClusterMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTStopDBClusterAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StopDBClusterMessage stopDBClusterMessage, final ApiCallback<StopDBClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTStopDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stopDBClusterMessage, _callback);
        Type localVarReturnType = new TypeToken<StopDBClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
