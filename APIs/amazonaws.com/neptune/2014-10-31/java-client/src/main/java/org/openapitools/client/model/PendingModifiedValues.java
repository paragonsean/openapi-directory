/*
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ClusterPendingModifiedValuesPendingCloudwatchLogsExports;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  This data type is used as a response element in the &lt;a&gt;ModifyDBInstance&lt;/a&gt; action.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:52.008602-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PendingModifiedValues {
  public static final String SERIALIZED_NAME_DB_INSTANCE_CLASS = "DBInstanceClass";
  @SerializedName(SERIALIZED_NAME_DB_INSTANCE_CLASS)
  private String dbInstanceClass;

  public static final String SERIALIZED_NAME_ALLOCATED_STORAGE = "AllocatedStorage";
  @SerializedName(SERIALIZED_NAME_ALLOCATED_STORAGE)
  private Integer allocatedStorage;

  public static final String SERIALIZED_NAME_MASTER_USER_PASSWORD = "MasterUserPassword";
  @SerializedName(SERIALIZED_NAME_MASTER_USER_PASSWORD)
  private String masterUserPassword;

  public static final String SERIALIZED_NAME_PORT = "Port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_BACKUP_RETENTION_PERIOD = "BackupRetentionPeriod";
  @SerializedName(SERIALIZED_NAME_BACKUP_RETENTION_PERIOD)
  private Integer backupRetentionPeriod;

  public static final String SERIALIZED_NAME_MULTI_A_Z = "MultiAZ";
  @SerializedName(SERIALIZED_NAME_MULTI_A_Z)
  private Boolean multiAZ;

  public static final String SERIALIZED_NAME_ENGINE_VERSION = "EngineVersion";
  @SerializedName(SERIALIZED_NAME_ENGINE_VERSION)
  private String engineVersion;

  public static final String SERIALIZED_NAME_LICENSE_MODEL = "LicenseModel";
  @SerializedName(SERIALIZED_NAME_LICENSE_MODEL)
  private String licenseModel;

  public static final String SERIALIZED_NAME_IOPS = "Iops";
  @SerializedName(SERIALIZED_NAME_IOPS)
  private Integer iops;

  public static final String SERIALIZED_NAME_DB_INSTANCE_IDENTIFIER = "DBInstanceIdentifier";
  @SerializedName(SERIALIZED_NAME_DB_INSTANCE_IDENTIFIER)
  private String dbInstanceIdentifier;

  public static final String SERIALIZED_NAME_STORAGE_TYPE = "StorageType";
  @SerializedName(SERIALIZED_NAME_STORAGE_TYPE)
  private String storageType;

  public static final String SERIALIZED_NAME_CA_CERTIFICATE_IDENTIFIER = "CACertificateIdentifier";
  @SerializedName(SERIALIZED_NAME_CA_CERTIFICATE_IDENTIFIER)
  private String caCertificateIdentifier;

  public static final String SERIALIZED_NAME_DB_SUBNET_GROUP_NAME = "DBSubnetGroupName";
  @SerializedName(SERIALIZED_NAME_DB_SUBNET_GROUP_NAME)
  private String dbSubnetGroupName;

  public static final String SERIALIZED_NAME_PENDING_CLOUDWATCH_LOGS_EXPORTS = "PendingCloudwatchLogsExports";
  @SerializedName(SERIALIZED_NAME_PENDING_CLOUDWATCH_LOGS_EXPORTS)
  private ClusterPendingModifiedValuesPendingCloudwatchLogsExports pendingCloudwatchLogsExports;

  public PendingModifiedValues() {
  }

  public PendingModifiedValues dbInstanceClass(String dbInstanceClass) {
    this.dbInstanceClass = dbInstanceClass;
    return this;
  }

  /**
   * Get dbInstanceClass
   * @return dbInstanceClass
   */
  @javax.annotation.Nullable
  public String getDbInstanceClass() {
    return dbInstanceClass;
  }

  public void setDbInstanceClass(String dbInstanceClass) {
    this.dbInstanceClass = dbInstanceClass;
  }


  public PendingModifiedValues allocatedStorage(Integer allocatedStorage) {
    this.allocatedStorage = allocatedStorage;
    return this;
  }

  /**
   * Get allocatedStorage
   * @return allocatedStorage
   */
  @javax.annotation.Nullable
  public Integer getAllocatedStorage() {
    return allocatedStorage;
  }

  public void setAllocatedStorage(Integer allocatedStorage) {
    this.allocatedStorage = allocatedStorage;
  }


  public PendingModifiedValues masterUserPassword(String masterUserPassword) {
    this.masterUserPassword = masterUserPassword;
    return this;
  }

  /**
   * Get masterUserPassword
   * @return masterUserPassword
   */
  @javax.annotation.Nullable
  public String getMasterUserPassword() {
    return masterUserPassword;
  }

  public void setMasterUserPassword(String masterUserPassword) {
    this.masterUserPassword = masterUserPassword;
  }


  public PendingModifiedValues port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public PendingModifiedValues backupRetentionPeriod(Integer backupRetentionPeriod) {
    this.backupRetentionPeriod = backupRetentionPeriod;
    return this;
  }

  /**
   * Get backupRetentionPeriod
   * @return backupRetentionPeriod
   */
  @javax.annotation.Nullable
  public Integer getBackupRetentionPeriod() {
    return backupRetentionPeriod;
  }

  public void setBackupRetentionPeriod(Integer backupRetentionPeriod) {
    this.backupRetentionPeriod = backupRetentionPeriod;
  }


  public PendingModifiedValues multiAZ(Boolean multiAZ) {
    this.multiAZ = multiAZ;
    return this;
  }

  /**
   * Get multiAZ
   * @return multiAZ
   */
  @javax.annotation.Nullable
  public Boolean getMultiAZ() {
    return multiAZ;
  }

  public void setMultiAZ(Boolean multiAZ) {
    this.multiAZ = multiAZ;
  }


  public PendingModifiedValues engineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
    return this;
  }

  /**
   * Get engineVersion
   * @return engineVersion
   */
  @javax.annotation.Nullable
  public String getEngineVersion() {
    return engineVersion;
  }

  public void setEngineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
  }


  public PendingModifiedValues licenseModel(String licenseModel) {
    this.licenseModel = licenseModel;
    return this;
  }

  /**
   * Get licenseModel
   * @return licenseModel
   */
  @javax.annotation.Nullable
  public String getLicenseModel() {
    return licenseModel;
  }

  public void setLicenseModel(String licenseModel) {
    this.licenseModel = licenseModel;
  }


  public PendingModifiedValues iops(Integer iops) {
    this.iops = iops;
    return this;
  }

  /**
   * Get iops
   * @return iops
   */
  @javax.annotation.Nullable
  public Integer getIops() {
    return iops;
  }

  public void setIops(Integer iops) {
    this.iops = iops;
  }


  public PendingModifiedValues dbInstanceIdentifier(String dbInstanceIdentifier) {
    this.dbInstanceIdentifier = dbInstanceIdentifier;
    return this;
  }

  /**
   * Get dbInstanceIdentifier
   * @return dbInstanceIdentifier
   */
  @javax.annotation.Nullable
  public String getDbInstanceIdentifier() {
    return dbInstanceIdentifier;
  }

  public void setDbInstanceIdentifier(String dbInstanceIdentifier) {
    this.dbInstanceIdentifier = dbInstanceIdentifier;
  }


  public PendingModifiedValues storageType(String storageType) {
    this.storageType = storageType;
    return this;
  }

  /**
   * Get storageType
   * @return storageType
   */
  @javax.annotation.Nullable
  public String getStorageType() {
    return storageType;
  }

  public void setStorageType(String storageType) {
    this.storageType = storageType;
  }


  public PendingModifiedValues caCertificateIdentifier(String caCertificateIdentifier) {
    this.caCertificateIdentifier = caCertificateIdentifier;
    return this;
  }

  /**
   * Get caCertificateIdentifier
   * @return caCertificateIdentifier
   */
  @javax.annotation.Nullable
  public String getCaCertificateIdentifier() {
    return caCertificateIdentifier;
  }

  public void setCaCertificateIdentifier(String caCertificateIdentifier) {
    this.caCertificateIdentifier = caCertificateIdentifier;
  }


  public PendingModifiedValues dbSubnetGroupName(String dbSubnetGroupName) {
    this.dbSubnetGroupName = dbSubnetGroupName;
    return this;
  }

  /**
   * Get dbSubnetGroupName
   * @return dbSubnetGroupName
   */
  @javax.annotation.Nullable
  public String getDbSubnetGroupName() {
    return dbSubnetGroupName;
  }

  public void setDbSubnetGroupName(String dbSubnetGroupName) {
    this.dbSubnetGroupName = dbSubnetGroupName;
  }


  public PendingModifiedValues pendingCloudwatchLogsExports(ClusterPendingModifiedValuesPendingCloudwatchLogsExports pendingCloudwatchLogsExports) {
    this.pendingCloudwatchLogsExports = pendingCloudwatchLogsExports;
    return this;
  }

  /**
   * Get pendingCloudwatchLogsExports
   * @return pendingCloudwatchLogsExports
   */
  @javax.annotation.Nullable
  public ClusterPendingModifiedValuesPendingCloudwatchLogsExports getPendingCloudwatchLogsExports() {
    return pendingCloudwatchLogsExports;
  }

  public void setPendingCloudwatchLogsExports(ClusterPendingModifiedValuesPendingCloudwatchLogsExports pendingCloudwatchLogsExports) {
    this.pendingCloudwatchLogsExports = pendingCloudwatchLogsExports;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PendingModifiedValues pendingModifiedValues = (PendingModifiedValues) o;
    return Objects.equals(this.dbInstanceClass, pendingModifiedValues.dbInstanceClass) &&
        Objects.equals(this.allocatedStorage, pendingModifiedValues.allocatedStorage) &&
        Objects.equals(this.masterUserPassword, pendingModifiedValues.masterUserPassword) &&
        Objects.equals(this.port, pendingModifiedValues.port) &&
        Objects.equals(this.backupRetentionPeriod, pendingModifiedValues.backupRetentionPeriod) &&
        Objects.equals(this.multiAZ, pendingModifiedValues.multiAZ) &&
        Objects.equals(this.engineVersion, pendingModifiedValues.engineVersion) &&
        Objects.equals(this.licenseModel, pendingModifiedValues.licenseModel) &&
        Objects.equals(this.iops, pendingModifiedValues.iops) &&
        Objects.equals(this.dbInstanceIdentifier, pendingModifiedValues.dbInstanceIdentifier) &&
        Objects.equals(this.storageType, pendingModifiedValues.storageType) &&
        Objects.equals(this.caCertificateIdentifier, pendingModifiedValues.caCertificateIdentifier) &&
        Objects.equals(this.dbSubnetGroupName, pendingModifiedValues.dbSubnetGroupName) &&
        Objects.equals(this.pendingCloudwatchLogsExports, pendingModifiedValues.pendingCloudwatchLogsExports);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dbInstanceClass, allocatedStorage, masterUserPassword, port, backupRetentionPeriod, multiAZ, engineVersion, licenseModel, iops, dbInstanceIdentifier, storageType, caCertificateIdentifier, dbSubnetGroupName, pendingCloudwatchLogsExports);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PendingModifiedValues {\n");
    sb.append("    dbInstanceClass: ").append(toIndentedString(dbInstanceClass)).append("\n");
    sb.append("    allocatedStorage: ").append(toIndentedString(allocatedStorage)).append("\n");
    sb.append("    masterUserPassword: ").append(toIndentedString(masterUserPassword)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    backupRetentionPeriod: ").append(toIndentedString(backupRetentionPeriod)).append("\n");
    sb.append("    multiAZ: ").append(toIndentedString(multiAZ)).append("\n");
    sb.append("    engineVersion: ").append(toIndentedString(engineVersion)).append("\n");
    sb.append("    licenseModel: ").append(toIndentedString(licenseModel)).append("\n");
    sb.append("    iops: ").append(toIndentedString(iops)).append("\n");
    sb.append("    dbInstanceIdentifier: ").append(toIndentedString(dbInstanceIdentifier)).append("\n");
    sb.append("    storageType: ").append(toIndentedString(storageType)).append("\n");
    sb.append("    caCertificateIdentifier: ").append(toIndentedString(caCertificateIdentifier)).append("\n");
    sb.append("    dbSubnetGroupName: ").append(toIndentedString(dbSubnetGroupName)).append("\n");
    sb.append("    pendingCloudwatchLogsExports: ").append(toIndentedString(pendingCloudwatchLogsExports)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DBInstanceClass");
    openapiFields.add("AllocatedStorage");
    openapiFields.add("MasterUserPassword");
    openapiFields.add("Port");
    openapiFields.add("BackupRetentionPeriod");
    openapiFields.add("MultiAZ");
    openapiFields.add("EngineVersion");
    openapiFields.add("LicenseModel");
    openapiFields.add("Iops");
    openapiFields.add("DBInstanceIdentifier");
    openapiFields.add("StorageType");
    openapiFields.add("CACertificateIdentifier");
    openapiFields.add("DBSubnetGroupName");
    openapiFields.add("PendingCloudwatchLogsExports");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PendingModifiedValues
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PendingModifiedValues.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PendingModifiedValues is not found in the empty JSON string", PendingModifiedValues.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PendingModifiedValues.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PendingModifiedValues` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DBInstanceClass`
      if (jsonObj.get("DBInstanceClass") != null && !jsonObj.get("DBInstanceClass").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DBInstanceClass"));
      }
      // validate the optional field `AllocatedStorage`
      if (jsonObj.get("AllocatedStorage") != null && !jsonObj.get("AllocatedStorage").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("AllocatedStorage"));
      }
      // validate the optional field `MasterUserPassword`
      if (jsonObj.get("MasterUserPassword") != null && !jsonObj.get("MasterUserPassword").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MasterUserPassword"));
      }
      // validate the optional field `Port`
      if (jsonObj.get("Port") != null && !jsonObj.get("Port").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Port"));
      }
      // validate the optional field `BackupRetentionPeriod`
      if (jsonObj.get("BackupRetentionPeriod") != null && !jsonObj.get("BackupRetentionPeriod").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("BackupRetentionPeriod"));
      }
      // validate the optional field `MultiAZ`
      if (jsonObj.get("MultiAZ") != null && !jsonObj.get("MultiAZ").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("MultiAZ"));
      }
      // validate the optional field `EngineVersion`
      if (jsonObj.get("EngineVersion") != null && !jsonObj.get("EngineVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EngineVersion"));
      }
      // validate the optional field `LicenseModel`
      if (jsonObj.get("LicenseModel") != null && !jsonObj.get("LicenseModel").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LicenseModel"));
      }
      // validate the optional field `Iops`
      if (jsonObj.get("Iops") != null && !jsonObj.get("Iops").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Iops"));
      }
      // validate the optional field `DBInstanceIdentifier`
      if (jsonObj.get("DBInstanceIdentifier") != null && !jsonObj.get("DBInstanceIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DBInstanceIdentifier"));
      }
      // validate the optional field `StorageType`
      if (jsonObj.get("StorageType") != null && !jsonObj.get("StorageType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StorageType"));
      }
      // validate the optional field `CACertificateIdentifier`
      if (jsonObj.get("CACertificateIdentifier") != null && !jsonObj.get("CACertificateIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CACertificateIdentifier"));
      }
      // validate the optional field `DBSubnetGroupName`
      if (jsonObj.get("DBSubnetGroupName") != null && !jsonObj.get("DBSubnetGroupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DBSubnetGroupName"));
      }
      // validate the optional field `PendingCloudwatchLogsExports`
      if (jsonObj.get("PendingCloudwatchLogsExports") != null && !jsonObj.get("PendingCloudwatchLogsExports").isJsonNull()) {
        ClusterPendingModifiedValuesPendingCloudwatchLogsExports.validateJsonElement(jsonObj.get("PendingCloudwatchLogsExports"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PendingModifiedValues.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PendingModifiedValues' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PendingModifiedValues> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PendingModifiedValues.class));

       return (TypeAdapter<T>) new TypeAdapter<PendingModifiedValues>() {
           @Override
           public void write(JsonWriter out, PendingModifiedValues value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PendingModifiedValues read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PendingModifiedValues given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PendingModifiedValues
   * @throws IOException if the JSON string is invalid with respect to PendingModifiedValues
   */
  public static PendingModifiedValues fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PendingModifiedValues.class);
  }

  /**
   * Convert an instance of PendingModifiedValues to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

