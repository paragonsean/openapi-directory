/*
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ResetDBParameterGroupMessage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:52.008602-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResetDBParameterGroupMessage {
  public static final String SERIALIZED_NAME_DB_PARAMETER_GROUP_NAME = "DBParameterGroupName";
  @SerializedName(SERIALIZED_NAME_DB_PARAMETER_GROUP_NAME)
  private String dbParameterGroupName;

  public static final String SERIALIZED_NAME_RESET_ALL_PARAMETERS = "ResetAllParameters";
  @SerializedName(SERIALIZED_NAME_RESET_ALL_PARAMETERS)
  private Boolean resetAllParameters;

  public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private List parameters;

  public ResetDBParameterGroupMessage() {
  }

  public ResetDBParameterGroupMessage dbParameterGroupName(String dbParameterGroupName) {
    this.dbParameterGroupName = dbParameterGroupName;
    return this;
  }

  /**
   * Get dbParameterGroupName
   * @return dbParameterGroupName
   */
  @javax.annotation.Nonnull
  public String getDbParameterGroupName() {
    return dbParameterGroupName;
  }

  public void setDbParameterGroupName(String dbParameterGroupName) {
    this.dbParameterGroupName = dbParameterGroupName;
  }


  public ResetDBParameterGroupMessage resetAllParameters(Boolean resetAllParameters) {
    this.resetAllParameters = resetAllParameters;
    return this;
  }

  /**
   * Get resetAllParameters
   * @return resetAllParameters
   */
  @javax.annotation.Nullable
  public Boolean getResetAllParameters() {
    return resetAllParameters;
  }

  public void setResetAllParameters(Boolean resetAllParameters) {
    this.resetAllParameters = resetAllParameters;
  }


  public ResetDBParameterGroupMessage parameters(List parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public List getParameters() {
    return parameters;
  }

  public void setParameters(List parameters) {
    this.parameters = parameters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResetDBParameterGroupMessage resetDBParameterGroupMessage = (ResetDBParameterGroupMessage) o;
    return Objects.equals(this.dbParameterGroupName, resetDBParameterGroupMessage.dbParameterGroupName) &&
        Objects.equals(this.resetAllParameters, resetDBParameterGroupMessage.resetAllParameters) &&
        Objects.equals(this.parameters, resetDBParameterGroupMessage.parameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dbParameterGroupName, resetAllParameters, parameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResetDBParameterGroupMessage {\n");
    sb.append("    dbParameterGroupName: ").append(toIndentedString(dbParameterGroupName)).append("\n");
    sb.append("    resetAllParameters: ").append(toIndentedString(resetAllParameters)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DBParameterGroupName");
    openapiFields.add("ResetAllParameters");
    openapiFields.add("Parameters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DBParameterGroupName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResetDBParameterGroupMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResetDBParameterGroupMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResetDBParameterGroupMessage is not found in the empty JSON string", ResetDBParameterGroupMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResetDBParameterGroupMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResetDBParameterGroupMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ResetDBParameterGroupMessage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DBParameterGroupName`
      String.validateJsonElement(jsonObj.get("DBParameterGroupName"));
      // validate the optional field `ResetAllParameters`
      if (jsonObj.get("ResetAllParameters") != null && !jsonObj.get("ResetAllParameters").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ResetAllParameters"));
      }
      // validate the optional field `Parameters`
      if (jsonObj.get("Parameters") != null && !jsonObj.get("Parameters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Parameters"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResetDBParameterGroupMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResetDBParameterGroupMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResetDBParameterGroupMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResetDBParameterGroupMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<ResetDBParameterGroupMessage>() {
           @Override
           public void write(JsonWriter out, ResetDBParameterGroupMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResetDBParameterGroupMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResetDBParameterGroupMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResetDBParameterGroupMessage
   * @throws IOException if the JSON string is invalid with respect to ResetDBParameterGroupMessage
   */
  public static ResetDBParameterGroupMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResetDBParameterGroupMessage.class);
  }

  /**
   * Convert an instance of ResetDBParameterGroupMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

