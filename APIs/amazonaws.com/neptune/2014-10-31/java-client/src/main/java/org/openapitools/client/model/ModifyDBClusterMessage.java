/*
 * Amazon Neptune
 * <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ModifyDBClusterMessageCloudwatchLogsExportConfiguration;
import org.openapitools.client.model.ServerlessV2ScalingConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ModifyDBClusterMessage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:52.008602-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ModifyDBClusterMessage {
  public static final String SERIALIZED_NAME_DB_CLUSTER_IDENTIFIER = "DBClusterIdentifier";
  @SerializedName(SERIALIZED_NAME_DB_CLUSTER_IDENTIFIER)
  private String dbClusterIdentifier;

  public static final String SERIALIZED_NAME_NEW_D_B_CLUSTER_IDENTIFIER = "NewDBClusterIdentifier";
  @SerializedName(SERIALIZED_NAME_NEW_D_B_CLUSTER_IDENTIFIER)
  private String newDBClusterIdentifier;

  public static final String SERIALIZED_NAME_APPLY_IMMEDIATELY = "ApplyImmediately";
  @SerializedName(SERIALIZED_NAME_APPLY_IMMEDIATELY)
  private Boolean applyImmediately;

  public static final String SERIALIZED_NAME_BACKUP_RETENTION_PERIOD = "BackupRetentionPeriod";
  @SerializedName(SERIALIZED_NAME_BACKUP_RETENTION_PERIOD)
  private Integer backupRetentionPeriod;

  public static final String SERIALIZED_NAME_DB_CLUSTER_PARAMETER_GROUP_NAME = "DBClusterParameterGroupName";
  @SerializedName(SERIALIZED_NAME_DB_CLUSTER_PARAMETER_GROUP_NAME)
  private String dbClusterParameterGroupName;

  public static final String SERIALIZED_NAME_VPC_SECURITY_GROUP_IDS = "VpcSecurityGroupIds";
  @SerializedName(SERIALIZED_NAME_VPC_SECURITY_GROUP_IDS)
  private List vpcSecurityGroupIds;

  public static final String SERIALIZED_NAME_PORT = "Port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_MASTER_USER_PASSWORD = "MasterUserPassword";
  @SerializedName(SERIALIZED_NAME_MASTER_USER_PASSWORD)
  private String masterUserPassword;

  public static final String SERIALIZED_NAME_OPTION_GROUP_NAME = "OptionGroupName";
  @SerializedName(SERIALIZED_NAME_OPTION_GROUP_NAME)
  private String optionGroupName;

  public static final String SERIALIZED_NAME_PREFERRED_BACKUP_WINDOW = "PreferredBackupWindow";
  @SerializedName(SERIALIZED_NAME_PREFERRED_BACKUP_WINDOW)
  private String preferredBackupWindow;

  public static final String SERIALIZED_NAME_PREFERRED_MAINTENANCE_WINDOW = "PreferredMaintenanceWindow";
  @SerializedName(SERIALIZED_NAME_PREFERRED_MAINTENANCE_WINDOW)
  private String preferredMaintenanceWindow;

  public static final String SERIALIZED_NAME_ENABLE_I_A_M_DATABASE_AUTHENTICATION = "EnableIAMDatabaseAuthentication";
  @SerializedName(SERIALIZED_NAME_ENABLE_I_A_M_DATABASE_AUTHENTICATION)
  private Boolean enableIAMDatabaseAuthentication;

  public static final String SERIALIZED_NAME_CLOUDWATCH_LOGS_EXPORT_CONFIGURATION = "CloudwatchLogsExportConfiguration";
  @SerializedName(SERIALIZED_NAME_CLOUDWATCH_LOGS_EXPORT_CONFIGURATION)
  private ModifyDBClusterMessageCloudwatchLogsExportConfiguration cloudwatchLogsExportConfiguration;

  public static final String SERIALIZED_NAME_ENGINE_VERSION = "EngineVersion";
  @SerializedName(SERIALIZED_NAME_ENGINE_VERSION)
  private String engineVersion;

  public static final String SERIALIZED_NAME_ALLOW_MAJOR_VERSION_UPGRADE = "AllowMajorVersionUpgrade";
  @SerializedName(SERIALIZED_NAME_ALLOW_MAJOR_VERSION_UPGRADE)
  private Boolean allowMajorVersionUpgrade;

  public static final String SERIALIZED_NAME_DB_INSTANCE_PARAMETER_GROUP_NAME = "DBInstanceParameterGroupName";
  @SerializedName(SERIALIZED_NAME_DB_INSTANCE_PARAMETER_GROUP_NAME)
  private String dbInstanceParameterGroupName;

  public static final String SERIALIZED_NAME_DELETION_PROTECTION = "DeletionProtection";
  @SerializedName(SERIALIZED_NAME_DELETION_PROTECTION)
  private Boolean deletionProtection;

  public static final String SERIALIZED_NAME_COPY_TAGS_TO_SNAPSHOT = "CopyTagsToSnapshot";
  @SerializedName(SERIALIZED_NAME_COPY_TAGS_TO_SNAPSHOT)
  private Boolean copyTagsToSnapshot;

  public static final String SERIALIZED_NAME_SERVERLESS_V2_SCALING_CONFIGURATION = "ServerlessV2ScalingConfiguration";
  @SerializedName(SERIALIZED_NAME_SERVERLESS_V2_SCALING_CONFIGURATION)
  private ServerlessV2ScalingConfiguration serverlessV2ScalingConfiguration;

  public ModifyDBClusterMessage() {
  }

  public ModifyDBClusterMessage dbClusterIdentifier(String dbClusterIdentifier) {
    this.dbClusterIdentifier = dbClusterIdentifier;
    return this;
  }

  /**
   * Get dbClusterIdentifier
   * @return dbClusterIdentifier
   */
  @javax.annotation.Nonnull
  public String getDbClusterIdentifier() {
    return dbClusterIdentifier;
  }

  public void setDbClusterIdentifier(String dbClusterIdentifier) {
    this.dbClusterIdentifier = dbClusterIdentifier;
  }


  public ModifyDBClusterMessage newDBClusterIdentifier(String newDBClusterIdentifier) {
    this.newDBClusterIdentifier = newDBClusterIdentifier;
    return this;
  }

  /**
   * Get newDBClusterIdentifier
   * @return newDBClusterIdentifier
   */
  @javax.annotation.Nullable
  public String getNewDBClusterIdentifier() {
    return newDBClusterIdentifier;
  }

  public void setNewDBClusterIdentifier(String newDBClusterIdentifier) {
    this.newDBClusterIdentifier = newDBClusterIdentifier;
  }


  public ModifyDBClusterMessage applyImmediately(Boolean applyImmediately) {
    this.applyImmediately = applyImmediately;
    return this;
  }

  /**
   * Get applyImmediately
   * @return applyImmediately
   */
  @javax.annotation.Nullable
  public Boolean getApplyImmediately() {
    return applyImmediately;
  }

  public void setApplyImmediately(Boolean applyImmediately) {
    this.applyImmediately = applyImmediately;
  }


  public ModifyDBClusterMessage backupRetentionPeriod(Integer backupRetentionPeriod) {
    this.backupRetentionPeriod = backupRetentionPeriod;
    return this;
  }

  /**
   * Get backupRetentionPeriod
   * @return backupRetentionPeriod
   */
  @javax.annotation.Nullable
  public Integer getBackupRetentionPeriod() {
    return backupRetentionPeriod;
  }

  public void setBackupRetentionPeriod(Integer backupRetentionPeriod) {
    this.backupRetentionPeriod = backupRetentionPeriod;
  }


  public ModifyDBClusterMessage dbClusterParameterGroupName(String dbClusterParameterGroupName) {
    this.dbClusterParameterGroupName = dbClusterParameterGroupName;
    return this;
  }

  /**
   * Get dbClusterParameterGroupName
   * @return dbClusterParameterGroupName
   */
  @javax.annotation.Nullable
  public String getDbClusterParameterGroupName() {
    return dbClusterParameterGroupName;
  }

  public void setDbClusterParameterGroupName(String dbClusterParameterGroupName) {
    this.dbClusterParameterGroupName = dbClusterParameterGroupName;
  }


  public ModifyDBClusterMessage vpcSecurityGroupIds(List vpcSecurityGroupIds) {
    this.vpcSecurityGroupIds = vpcSecurityGroupIds;
    return this;
  }

  /**
   * Get vpcSecurityGroupIds
   * @return vpcSecurityGroupIds
   */
  @javax.annotation.Nullable
  public List getVpcSecurityGroupIds() {
    return vpcSecurityGroupIds;
  }

  public void setVpcSecurityGroupIds(List vpcSecurityGroupIds) {
    this.vpcSecurityGroupIds = vpcSecurityGroupIds;
  }


  public ModifyDBClusterMessage port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public ModifyDBClusterMessage masterUserPassword(String masterUserPassword) {
    this.masterUserPassword = masterUserPassword;
    return this;
  }

  /**
   * Get masterUserPassword
   * @return masterUserPassword
   */
  @javax.annotation.Nullable
  public String getMasterUserPassword() {
    return masterUserPassword;
  }

  public void setMasterUserPassword(String masterUserPassword) {
    this.masterUserPassword = masterUserPassword;
  }


  public ModifyDBClusterMessage optionGroupName(String optionGroupName) {
    this.optionGroupName = optionGroupName;
    return this;
  }

  /**
   * Get optionGroupName
   * @return optionGroupName
   */
  @javax.annotation.Nullable
  public String getOptionGroupName() {
    return optionGroupName;
  }

  public void setOptionGroupName(String optionGroupName) {
    this.optionGroupName = optionGroupName;
  }


  public ModifyDBClusterMessage preferredBackupWindow(String preferredBackupWindow) {
    this.preferredBackupWindow = preferredBackupWindow;
    return this;
  }

  /**
   * Get preferredBackupWindow
   * @return preferredBackupWindow
   */
  @javax.annotation.Nullable
  public String getPreferredBackupWindow() {
    return preferredBackupWindow;
  }

  public void setPreferredBackupWindow(String preferredBackupWindow) {
    this.preferredBackupWindow = preferredBackupWindow;
  }


  public ModifyDBClusterMessage preferredMaintenanceWindow(String preferredMaintenanceWindow) {
    this.preferredMaintenanceWindow = preferredMaintenanceWindow;
    return this;
  }

  /**
   * Get preferredMaintenanceWindow
   * @return preferredMaintenanceWindow
   */
  @javax.annotation.Nullable
  public String getPreferredMaintenanceWindow() {
    return preferredMaintenanceWindow;
  }

  public void setPreferredMaintenanceWindow(String preferredMaintenanceWindow) {
    this.preferredMaintenanceWindow = preferredMaintenanceWindow;
  }


  public ModifyDBClusterMessage enableIAMDatabaseAuthentication(Boolean enableIAMDatabaseAuthentication) {
    this.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication;
    return this;
  }

  /**
   * Get enableIAMDatabaseAuthentication
   * @return enableIAMDatabaseAuthentication
   */
  @javax.annotation.Nullable
  public Boolean getEnableIAMDatabaseAuthentication() {
    return enableIAMDatabaseAuthentication;
  }

  public void setEnableIAMDatabaseAuthentication(Boolean enableIAMDatabaseAuthentication) {
    this.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication;
  }


  public ModifyDBClusterMessage cloudwatchLogsExportConfiguration(ModifyDBClusterMessageCloudwatchLogsExportConfiguration cloudwatchLogsExportConfiguration) {
    this.cloudwatchLogsExportConfiguration = cloudwatchLogsExportConfiguration;
    return this;
  }

  /**
   * Get cloudwatchLogsExportConfiguration
   * @return cloudwatchLogsExportConfiguration
   */
  @javax.annotation.Nullable
  public ModifyDBClusterMessageCloudwatchLogsExportConfiguration getCloudwatchLogsExportConfiguration() {
    return cloudwatchLogsExportConfiguration;
  }

  public void setCloudwatchLogsExportConfiguration(ModifyDBClusterMessageCloudwatchLogsExportConfiguration cloudwatchLogsExportConfiguration) {
    this.cloudwatchLogsExportConfiguration = cloudwatchLogsExportConfiguration;
  }


  public ModifyDBClusterMessage engineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
    return this;
  }

  /**
   * Get engineVersion
   * @return engineVersion
   */
  @javax.annotation.Nullable
  public String getEngineVersion() {
    return engineVersion;
  }

  public void setEngineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
  }


  public ModifyDBClusterMessage allowMajorVersionUpgrade(Boolean allowMajorVersionUpgrade) {
    this.allowMajorVersionUpgrade = allowMajorVersionUpgrade;
    return this;
  }

  /**
   * Get allowMajorVersionUpgrade
   * @return allowMajorVersionUpgrade
   */
  @javax.annotation.Nullable
  public Boolean getAllowMajorVersionUpgrade() {
    return allowMajorVersionUpgrade;
  }

  public void setAllowMajorVersionUpgrade(Boolean allowMajorVersionUpgrade) {
    this.allowMajorVersionUpgrade = allowMajorVersionUpgrade;
  }


  public ModifyDBClusterMessage dbInstanceParameterGroupName(String dbInstanceParameterGroupName) {
    this.dbInstanceParameterGroupName = dbInstanceParameterGroupName;
    return this;
  }

  /**
   * Get dbInstanceParameterGroupName
   * @return dbInstanceParameterGroupName
   */
  @javax.annotation.Nullable
  public String getDbInstanceParameterGroupName() {
    return dbInstanceParameterGroupName;
  }

  public void setDbInstanceParameterGroupName(String dbInstanceParameterGroupName) {
    this.dbInstanceParameterGroupName = dbInstanceParameterGroupName;
  }


  public ModifyDBClusterMessage deletionProtection(Boolean deletionProtection) {
    this.deletionProtection = deletionProtection;
    return this;
  }

  /**
   * Get deletionProtection
   * @return deletionProtection
   */
  @javax.annotation.Nullable
  public Boolean getDeletionProtection() {
    return deletionProtection;
  }

  public void setDeletionProtection(Boolean deletionProtection) {
    this.deletionProtection = deletionProtection;
  }


  public ModifyDBClusterMessage copyTagsToSnapshot(Boolean copyTagsToSnapshot) {
    this.copyTagsToSnapshot = copyTagsToSnapshot;
    return this;
  }

  /**
   * Get copyTagsToSnapshot
   * @return copyTagsToSnapshot
   */
  @javax.annotation.Nullable
  public Boolean getCopyTagsToSnapshot() {
    return copyTagsToSnapshot;
  }

  public void setCopyTagsToSnapshot(Boolean copyTagsToSnapshot) {
    this.copyTagsToSnapshot = copyTagsToSnapshot;
  }


  public ModifyDBClusterMessage serverlessV2ScalingConfiguration(ServerlessV2ScalingConfiguration serverlessV2ScalingConfiguration) {
    this.serverlessV2ScalingConfiguration = serverlessV2ScalingConfiguration;
    return this;
  }

  /**
   * Get serverlessV2ScalingConfiguration
   * @return serverlessV2ScalingConfiguration
   */
  @javax.annotation.Nullable
  public ServerlessV2ScalingConfiguration getServerlessV2ScalingConfiguration() {
    return serverlessV2ScalingConfiguration;
  }

  public void setServerlessV2ScalingConfiguration(ServerlessV2ScalingConfiguration serverlessV2ScalingConfiguration) {
    this.serverlessV2ScalingConfiguration = serverlessV2ScalingConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModifyDBClusterMessage modifyDBClusterMessage = (ModifyDBClusterMessage) o;
    return Objects.equals(this.dbClusterIdentifier, modifyDBClusterMessage.dbClusterIdentifier) &&
        Objects.equals(this.newDBClusterIdentifier, modifyDBClusterMessage.newDBClusterIdentifier) &&
        Objects.equals(this.applyImmediately, modifyDBClusterMessage.applyImmediately) &&
        Objects.equals(this.backupRetentionPeriod, modifyDBClusterMessage.backupRetentionPeriod) &&
        Objects.equals(this.dbClusterParameterGroupName, modifyDBClusterMessage.dbClusterParameterGroupName) &&
        Objects.equals(this.vpcSecurityGroupIds, modifyDBClusterMessage.vpcSecurityGroupIds) &&
        Objects.equals(this.port, modifyDBClusterMessage.port) &&
        Objects.equals(this.masterUserPassword, modifyDBClusterMessage.masterUserPassword) &&
        Objects.equals(this.optionGroupName, modifyDBClusterMessage.optionGroupName) &&
        Objects.equals(this.preferredBackupWindow, modifyDBClusterMessage.preferredBackupWindow) &&
        Objects.equals(this.preferredMaintenanceWindow, modifyDBClusterMessage.preferredMaintenanceWindow) &&
        Objects.equals(this.enableIAMDatabaseAuthentication, modifyDBClusterMessage.enableIAMDatabaseAuthentication) &&
        Objects.equals(this.cloudwatchLogsExportConfiguration, modifyDBClusterMessage.cloudwatchLogsExportConfiguration) &&
        Objects.equals(this.engineVersion, modifyDBClusterMessage.engineVersion) &&
        Objects.equals(this.allowMajorVersionUpgrade, modifyDBClusterMessage.allowMajorVersionUpgrade) &&
        Objects.equals(this.dbInstanceParameterGroupName, modifyDBClusterMessage.dbInstanceParameterGroupName) &&
        Objects.equals(this.deletionProtection, modifyDBClusterMessage.deletionProtection) &&
        Objects.equals(this.copyTagsToSnapshot, modifyDBClusterMessage.copyTagsToSnapshot) &&
        Objects.equals(this.serverlessV2ScalingConfiguration, modifyDBClusterMessage.serverlessV2ScalingConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dbClusterIdentifier, newDBClusterIdentifier, applyImmediately, backupRetentionPeriod, dbClusterParameterGroupName, vpcSecurityGroupIds, port, masterUserPassword, optionGroupName, preferredBackupWindow, preferredMaintenanceWindow, enableIAMDatabaseAuthentication, cloudwatchLogsExportConfiguration, engineVersion, allowMajorVersionUpgrade, dbInstanceParameterGroupName, deletionProtection, copyTagsToSnapshot, serverlessV2ScalingConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModifyDBClusterMessage {\n");
    sb.append("    dbClusterIdentifier: ").append(toIndentedString(dbClusterIdentifier)).append("\n");
    sb.append("    newDBClusterIdentifier: ").append(toIndentedString(newDBClusterIdentifier)).append("\n");
    sb.append("    applyImmediately: ").append(toIndentedString(applyImmediately)).append("\n");
    sb.append("    backupRetentionPeriod: ").append(toIndentedString(backupRetentionPeriod)).append("\n");
    sb.append("    dbClusterParameterGroupName: ").append(toIndentedString(dbClusterParameterGroupName)).append("\n");
    sb.append("    vpcSecurityGroupIds: ").append(toIndentedString(vpcSecurityGroupIds)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    masterUserPassword: ").append(toIndentedString(masterUserPassword)).append("\n");
    sb.append("    optionGroupName: ").append(toIndentedString(optionGroupName)).append("\n");
    sb.append("    preferredBackupWindow: ").append(toIndentedString(preferredBackupWindow)).append("\n");
    sb.append("    preferredMaintenanceWindow: ").append(toIndentedString(preferredMaintenanceWindow)).append("\n");
    sb.append("    enableIAMDatabaseAuthentication: ").append(toIndentedString(enableIAMDatabaseAuthentication)).append("\n");
    sb.append("    cloudwatchLogsExportConfiguration: ").append(toIndentedString(cloudwatchLogsExportConfiguration)).append("\n");
    sb.append("    engineVersion: ").append(toIndentedString(engineVersion)).append("\n");
    sb.append("    allowMajorVersionUpgrade: ").append(toIndentedString(allowMajorVersionUpgrade)).append("\n");
    sb.append("    dbInstanceParameterGroupName: ").append(toIndentedString(dbInstanceParameterGroupName)).append("\n");
    sb.append("    deletionProtection: ").append(toIndentedString(deletionProtection)).append("\n");
    sb.append("    copyTagsToSnapshot: ").append(toIndentedString(copyTagsToSnapshot)).append("\n");
    sb.append("    serverlessV2ScalingConfiguration: ").append(toIndentedString(serverlessV2ScalingConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DBClusterIdentifier");
    openapiFields.add("NewDBClusterIdentifier");
    openapiFields.add("ApplyImmediately");
    openapiFields.add("BackupRetentionPeriod");
    openapiFields.add("DBClusterParameterGroupName");
    openapiFields.add("VpcSecurityGroupIds");
    openapiFields.add("Port");
    openapiFields.add("MasterUserPassword");
    openapiFields.add("OptionGroupName");
    openapiFields.add("PreferredBackupWindow");
    openapiFields.add("PreferredMaintenanceWindow");
    openapiFields.add("EnableIAMDatabaseAuthentication");
    openapiFields.add("CloudwatchLogsExportConfiguration");
    openapiFields.add("EngineVersion");
    openapiFields.add("AllowMajorVersionUpgrade");
    openapiFields.add("DBInstanceParameterGroupName");
    openapiFields.add("DeletionProtection");
    openapiFields.add("CopyTagsToSnapshot");
    openapiFields.add("ServerlessV2ScalingConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DBClusterIdentifier");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModifyDBClusterMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModifyDBClusterMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModifyDBClusterMessage is not found in the empty JSON string", ModifyDBClusterMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModifyDBClusterMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModifyDBClusterMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModifyDBClusterMessage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DBClusterIdentifier`
      String.validateJsonElement(jsonObj.get("DBClusterIdentifier"));
      // validate the optional field `NewDBClusterIdentifier`
      if (jsonObj.get("NewDBClusterIdentifier") != null && !jsonObj.get("NewDBClusterIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NewDBClusterIdentifier"));
      }
      // validate the optional field `ApplyImmediately`
      if (jsonObj.get("ApplyImmediately") != null && !jsonObj.get("ApplyImmediately").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ApplyImmediately"));
      }
      // validate the optional field `BackupRetentionPeriod`
      if (jsonObj.get("BackupRetentionPeriod") != null && !jsonObj.get("BackupRetentionPeriod").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("BackupRetentionPeriod"));
      }
      // validate the optional field `DBClusterParameterGroupName`
      if (jsonObj.get("DBClusterParameterGroupName") != null && !jsonObj.get("DBClusterParameterGroupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DBClusterParameterGroupName"));
      }
      // validate the optional field `VpcSecurityGroupIds`
      if (jsonObj.get("VpcSecurityGroupIds") != null && !jsonObj.get("VpcSecurityGroupIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("VpcSecurityGroupIds"));
      }
      // validate the optional field `Port`
      if (jsonObj.get("Port") != null && !jsonObj.get("Port").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Port"));
      }
      // validate the optional field `MasterUserPassword`
      if (jsonObj.get("MasterUserPassword") != null && !jsonObj.get("MasterUserPassword").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MasterUserPassword"));
      }
      // validate the optional field `OptionGroupName`
      if (jsonObj.get("OptionGroupName") != null && !jsonObj.get("OptionGroupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OptionGroupName"));
      }
      // validate the optional field `PreferredBackupWindow`
      if (jsonObj.get("PreferredBackupWindow") != null && !jsonObj.get("PreferredBackupWindow").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PreferredBackupWindow"));
      }
      // validate the optional field `PreferredMaintenanceWindow`
      if (jsonObj.get("PreferredMaintenanceWindow") != null && !jsonObj.get("PreferredMaintenanceWindow").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PreferredMaintenanceWindow"));
      }
      // validate the optional field `EnableIAMDatabaseAuthentication`
      if (jsonObj.get("EnableIAMDatabaseAuthentication") != null && !jsonObj.get("EnableIAMDatabaseAuthentication").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("EnableIAMDatabaseAuthentication"));
      }
      // validate the optional field `CloudwatchLogsExportConfiguration`
      if (jsonObj.get("CloudwatchLogsExportConfiguration") != null && !jsonObj.get("CloudwatchLogsExportConfiguration").isJsonNull()) {
        ModifyDBClusterMessageCloudwatchLogsExportConfiguration.validateJsonElement(jsonObj.get("CloudwatchLogsExportConfiguration"));
      }
      // validate the optional field `EngineVersion`
      if (jsonObj.get("EngineVersion") != null && !jsonObj.get("EngineVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EngineVersion"));
      }
      // validate the optional field `AllowMajorVersionUpgrade`
      if (jsonObj.get("AllowMajorVersionUpgrade") != null && !jsonObj.get("AllowMajorVersionUpgrade").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AllowMajorVersionUpgrade"));
      }
      // validate the optional field `DBInstanceParameterGroupName`
      if (jsonObj.get("DBInstanceParameterGroupName") != null && !jsonObj.get("DBInstanceParameterGroupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DBInstanceParameterGroupName"));
      }
      // validate the optional field `DeletionProtection`
      if (jsonObj.get("DeletionProtection") != null && !jsonObj.get("DeletionProtection").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DeletionProtection"));
      }
      // validate the optional field `CopyTagsToSnapshot`
      if (jsonObj.get("CopyTagsToSnapshot") != null && !jsonObj.get("CopyTagsToSnapshot").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CopyTagsToSnapshot"));
      }
      // validate the optional field `ServerlessV2ScalingConfiguration`
      if (jsonObj.get("ServerlessV2ScalingConfiguration") != null && !jsonObj.get("ServerlessV2ScalingConfiguration").isJsonNull()) {
        ServerlessV2ScalingConfiguration.validateJsonElement(jsonObj.get("ServerlessV2ScalingConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModifyDBClusterMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModifyDBClusterMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModifyDBClusterMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModifyDBClusterMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<ModifyDBClusterMessage>() {
           @Override
           public void write(JsonWriter out, ModifyDBClusterMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModifyDBClusterMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModifyDBClusterMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModifyDBClusterMessage
   * @throws IOException if the JSON string is invalid with respect to ModifyDBClusterMessage
   */
  public static ModifyDBClusterMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModifyDBClusterMessage.class);
  }

  /**
   * Convert an instance of ModifyDBClusterMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

