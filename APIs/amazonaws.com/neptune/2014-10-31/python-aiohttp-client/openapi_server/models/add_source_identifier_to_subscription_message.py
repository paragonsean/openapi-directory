# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddSourceIdentifierToSubscriptionMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subscription_name: str=None, source_identifier: str=None):
        """AddSourceIdentifierToSubscriptionMessage - a model defined in OpenAPI

        :param subscription_name: The subscription_name of this AddSourceIdentifierToSubscriptionMessage.
        :param source_identifier: The source_identifier of this AddSourceIdentifierToSubscriptionMessage.
        """
        self.openapi_types = {
            'subscription_name': str,
            'source_identifier': str
        }

        self.attribute_map = {
            'subscription_name': 'SubscriptionName',
            'source_identifier': 'SourceIdentifier'
        }

        self._subscription_name = subscription_name
        self._source_identifier = source_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddSourceIdentifierToSubscriptionMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddSourceIdentifierToSubscriptionMessage of this AddSourceIdentifierToSubscriptionMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subscription_name(self):
        """Gets the subscription_name of this AddSourceIdentifierToSubscriptionMessage.


        :return: The subscription_name of this AddSourceIdentifierToSubscriptionMessage.
        :rtype: str
        """
        return self._subscription_name

    @subscription_name.setter
    def subscription_name(self, subscription_name):
        """Sets the subscription_name of this AddSourceIdentifierToSubscriptionMessage.


        :param subscription_name: The subscription_name of this AddSourceIdentifierToSubscriptionMessage.
        :type subscription_name: str
        """
        if subscription_name is None:
            raise ValueError("Invalid value for `subscription_name`, must not be `None`")

        self._subscription_name = subscription_name

    @property
    def source_identifier(self):
        """Gets the source_identifier of this AddSourceIdentifierToSubscriptionMessage.


        :return: The source_identifier of this AddSourceIdentifierToSubscriptionMessage.
        :rtype: str
        """
        return self._source_identifier

    @source_identifier.setter
    def source_identifier(self, source_identifier):
        """Sets the source_identifier of this AddSourceIdentifierToSubscriptionMessage.


        :param source_identifier: The source_identifier of this AddSourceIdentifierToSubscriptionMessage.
        :type source_identifier: str
        """
        if source_identifier is None:
            raise ValueError("Invalid value for `source_identifier`, must not be `None`")

        self._source_identifier = source_identifier
