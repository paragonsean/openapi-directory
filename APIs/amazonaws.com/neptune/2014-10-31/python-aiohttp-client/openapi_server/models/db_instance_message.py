# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DBInstanceMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, marker: str=None, db_instances: List=None):
        """DBInstanceMessage - a model defined in OpenAPI

        :param marker: The marker of this DBInstanceMessage.
        :param db_instances: The db_instances of this DBInstanceMessage.
        """
        self.openapi_types = {
            'marker': str,
            'db_instances': List
        }

        self.attribute_map = {
            'marker': 'Marker',
            'db_instances': 'DBInstances'
        }

        self._marker = marker
        self._db_instances = db_instances

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DBInstanceMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DBInstanceMessage of this DBInstanceMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def marker(self):
        """Gets the marker of this DBInstanceMessage.


        :return: The marker of this DBInstanceMessage.
        :rtype: str
        """
        return self._marker

    @marker.setter
    def marker(self, marker):
        """Sets the marker of this DBInstanceMessage.


        :param marker: The marker of this DBInstanceMessage.
        :type marker: str
        """

        self._marker = marker

    @property
    def db_instances(self):
        """Gets the db_instances of this DBInstanceMessage.


        :return: The db_instances of this DBInstanceMessage.
        :rtype: List
        """
        return self._db_instances

    @db_instances.setter
    def db_instances(self, db_instances):
        """Sets the db_instances of this DBInstanceMessage.


        :param db_instances: The db_instances of this DBInstanceMessage.
        :type db_instances: List
        """

        self._db_instances = db_instances
