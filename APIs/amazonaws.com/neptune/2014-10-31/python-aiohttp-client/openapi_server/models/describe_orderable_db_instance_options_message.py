# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeOrderableDBInstanceOptionsMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, engine: str=None, engine_version: str=None, db_instance_class: str=None, license_model: str=None, vpc: bool=None, filters: List=None, max_records: int=None, marker: str=None):
        """DescribeOrderableDBInstanceOptionsMessage - a model defined in OpenAPI

        :param engine: The engine of this DescribeOrderableDBInstanceOptionsMessage.
        :param engine_version: The engine_version of this DescribeOrderableDBInstanceOptionsMessage.
        :param db_instance_class: The db_instance_class of this DescribeOrderableDBInstanceOptionsMessage.
        :param license_model: The license_model of this DescribeOrderableDBInstanceOptionsMessage.
        :param vpc: The vpc of this DescribeOrderableDBInstanceOptionsMessage.
        :param filters: The filters of this DescribeOrderableDBInstanceOptionsMessage.
        :param max_records: The max_records of this DescribeOrderableDBInstanceOptionsMessage.
        :param marker: The marker of this DescribeOrderableDBInstanceOptionsMessage.
        """
        self.openapi_types = {
            'engine': str,
            'engine_version': str,
            'db_instance_class': str,
            'license_model': str,
            'vpc': bool,
            'filters': List,
            'max_records': int,
            'marker': str
        }

        self.attribute_map = {
            'engine': 'Engine',
            'engine_version': 'EngineVersion',
            'db_instance_class': 'DBInstanceClass',
            'license_model': 'LicenseModel',
            'vpc': 'Vpc',
            'filters': 'Filters',
            'max_records': 'MaxRecords',
            'marker': 'Marker'
        }

        self._engine = engine
        self._engine_version = engine_version
        self._db_instance_class = db_instance_class
        self._license_model = license_model
        self._vpc = vpc
        self._filters = filters
        self._max_records = max_records
        self._marker = marker

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeOrderableDBInstanceOptionsMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeOrderableDBInstanceOptionsMessage of this DescribeOrderableDBInstanceOptionsMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def engine(self):
        """Gets the engine of this DescribeOrderableDBInstanceOptionsMessage.


        :return: The engine of this DescribeOrderableDBInstanceOptionsMessage.
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this DescribeOrderableDBInstanceOptionsMessage.


        :param engine: The engine of this DescribeOrderableDBInstanceOptionsMessage.
        :type engine: str
        """
        if engine is None:
            raise ValueError("Invalid value for `engine`, must not be `None`")

        self._engine = engine

    @property
    def engine_version(self):
        """Gets the engine_version of this DescribeOrderableDBInstanceOptionsMessage.


        :return: The engine_version of this DescribeOrderableDBInstanceOptionsMessage.
        :rtype: str
        """
        return self._engine_version

    @engine_version.setter
    def engine_version(self, engine_version):
        """Sets the engine_version of this DescribeOrderableDBInstanceOptionsMessage.


        :param engine_version: The engine_version of this DescribeOrderableDBInstanceOptionsMessage.
        :type engine_version: str
        """

        self._engine_version = engine_version

    @property
    def db_instance_class(self):
        """Gets the db_instance_class of this DescribeOrderableDBInstanceOptionsMessage.


        :return: The db_instance_class of this DescribeOrderableDBInstanceOptionsMessage.
        :rtype: str
        """
        return self._db_instance_class

    @db_instance_class.setter
    def db_instance_class(self, db_instance_class):
        """Sets the db_instance_class of this DescribeOrderableDBInstanceOptionsMessage.


        :param db_instance_class: The db_instance_class of this DescribeOrderableDBInstanceOptionsMessage.
        :type db_instance_class: str
        """

        self._db_instance_class = db_instance_class

    @property
    def license_model(self):
        """Gets the license_model of this DescribeOrderableDBInstanceOptionsMessage.


        :return: The license_model of this DescribeOrderableDBInstanceOptionsMessage.
        :rtype: str
        """
        return self._license_model

    @license_model.setter
    def license_model(self, license_model):
        """Sets the license_model of this DescribeOrderableDBInstanceOptionsMessage.


        :param license_model: The license_model of this DescribeOrderableDBInstanceOptionsMessage.
        :type license_model: str
        """

        self._license_model = license_model

    @property
    def vpc(self):
        """Gets the vpc of this DescribeOrderableDBInstanceOptionsMessage.


        :return: The vpc of this DescribeOrderableDBInstanceOptionsMessage.
        :rtype: bool
        """
        return self._vpc

    @vpc.setter
    def vpc(self, vpc):
        """Sets the vpc of this DescribeOrderableDBInstanceOptionsMessage.


        :param vpc: The vpc of this DescribeOrderableDBInstanceOptionsMessage.
        :type vpc: bool
        """

        self._vpc = vpc

    @property
    def filters(self):
        """Gets the filters of this DescribeOrderableDBInstanceOptionsMessage.


        :return: The filters of this DescribeOrderableDBInstanceOptionsMessage.
        :rtype: List
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this DescribeOrderableDBInstanceOptionsMessage.


        :param filters: The filters of this DescribeOrderableDBInstanceOptionsMessage.
        :type filters: List
        """

        self._filters = filters

    @property
    def max_records(self):
        """Gets the max_records of this DescribeOrderableDBInstanceOptionsMessage.


        :return: The max_records of this DescribeOrderableDBInstanceOptionsMessage.
        :rtype: int
        """
        return self._max_records

    @max_records.setter
    def max_records(self, max_records):
        """Sets the max_records of this DescribeOrderableDBInstanceOptionsMessage.


        :param max_records: The max_records of this DescribeOrderableDBInstanceOptionsMessage.
        :type max_records: int
        """

        self._max_records = max_records

    @property
    def marker(self):
        """Gets the marker of this DescribeOrderableDBInstanceOptionsMessage.


        :return: The marker of this DescribeOrderableDBInstanceOptionsMessage.
        :rtype: str
        """
        return self._marker

    @marker.setter
    def marker(self, marker):
        """Sets the marker of this DescribeOrderableDBInstanceOptionsMessage.


        :param marker: The marker of this DescribeOrderableDBInstanceOptionsMessage.
        :type marker: str
        """

        self._marker = marker
