# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplyPendingMaintenanceActionMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_identifier: str=None, apply_action: str=None, opt_in_type: str=None):
        """ApplyPendingMaintenanceActionMessage - a model defined in OpenAPI

        :param resource_identifier: The resource_identifier of this ApplyPendingMaintenanceActionMessage.
        :param apply_action: The apply_action of this ApplyPendingMaintenanceActionMessage.
        :param opt_in_type: The opt_in_type of this ApplyPendingMaintenanceActionMessage.
        """
        self.openapi_types = {
            'resource_identifier': str,
            'apply_action': str,
            'opt_in_type': str
        }

        self.attribute_map = {
            'resource_identifier': 'ResourceIdentifier',
            'apply_action': 'ApplyAction',
            'opt_in_type': 'OptInType'
        }

        self._resource_identifier = resource_identifier
        self._apply_action = apply_action
        self._opt_in_type = opt_in_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplyPendingMaintenanceActionMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplyPendingMaintenanceActionMessage of this ApplyPendingMaintenanceActionMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_identifier(self):
        """Gets the resource_identifier of this ApplyPendingMaintenanceActionMessage.


        :return: The resource_identifier of this ApplyPendingMaintenanceActionMessage.
        :rtype: str
        """
        return self._resource_identifier

    @resource_identifier.setter
    def resource_identifier(self, resource_identifier):
        """Sets the resource_identifier of this ApplyPendingMaintenanceActionMessage.


        :param resource_identifier: The resource_identifier of this ApplyPendingMaintenanceActionMessage.
        :type resource_identifier: str
        """
        if resource_identifier is None:
            raise ValueError("Invalid value for `resource_identifier`, must not be `None`")

        self._resource_identifier = resource_identifier

    @property
    def apply_action(self):
        """Gets the apply_action of this ApplyPendingMaintenanceActionMessage.


        :return: The apply_action of this ApplyPendingMaintenanceActionMessage.
        :rtype: str
        """
        return self._apply_action

    @apply_action.setter
    def apply_action(self, apply_action):
        """Sets the apply_action of this ApplyPendingMaintenanceActionMessage.


        :param apply_action: The apply_action of this ApplyPendingMaintenanceActionMessage.
        :type apply_action: str
        """
        if apply_action is None:
            raise ValueError("Invalid value for `apply_action`, must not be `None`")

        self._apply_action = apply_action

    @property
    def opt_in_type(self):
        """Gets the opt_in_type of this ApplyPendingMaintenanceActionMessage.


        :return: The opt_in_type of this ApplyPendingMaintenanceActionMessage.
        :rtype: str
        """
        return self._opt_in_type

    @opt_in_type.setter
    def opt_in_type(self, opt_in_type):
        """Sets the opt_in_type of this ApplyPendingMaintenanceActionMessage.


        :param opt_in_type: The opt_in_type of this ApplyPendingMaintenanceActionMessage.
        :type opt_in_type: str
        """
        if opt_in_type is None:
            raise ValueError("Invalid value for `opt_in_type`, must not be `None`")

        self._opt_in_type = opt_in_type
