# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateGlobalClusterMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, global_cluster_identifier: str=None, source_db_cluster_identifier: str=None, engine: str=None, engine_version: str=None, deletion_protection: bool=None, storage_encrypted: bool=None):
        """CreateGlobalClusterMessage - a model defined in OpenAPI

        :param global_cluster_identifier: The global_cluster_identifier of this CreateGlobalClusterMessage.
        :param source_db_cluster_identifier: The source_db_cluster_identifier of this CreateGlobalClusterMessage.
        :param engine: The engine of this CreateGlobalClusterMessage.
        :param engine_version: The engine_version of this CreateGlobalClusterMessage.
        :param deletion_protection: The deletion_protection of this CreateGlobalClusterMessage.
        :param storage_encrypted: The storage_encrypted of this CreateGlobalClusterMessage.
        """
        self.openapi_types = {
            'global_cluster_identifier': str,
            'source_db_cluster_identifier': str,
            'engine': str,
            'engine_version': str,
            'deletion_protection': bool,
            'storage_encrypted': bool
        }

        self.attribute_map = {
            'global_cluster_identifier': 'GlobalClusterIdentifier',
            'source_db_cluster_identifier': 'SourceDBClusterIdentifier',
            'engine': 'Engine',
            'engine_version': 'EngineVersion',
            'deletion_protection': 'DeletionProtection',
            'storage_encrypted': 'StorageEncrypted'
        }

        self._global_cluster_identifier = global_cluster_identifier
        self._source_db_cluster_identifier = source_db_cluster_identifier
        self._engine = engine
        self._engine_version = engine_version
        self._deletion_protection = deletion_protection
        self._storage_encrypted = storage_encrypted

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateGlobalClusterMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateGlobalClusterMessage of this CreateGlobalClusterMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def global_cluster_identifier(self):
        """Gets the global_cluster_identifier of this CreateGlobalClusterMessage.


        :return: The global_cluster_identifier of this CreateGlobalClusterMessage.
        :rtype: str
        """
        return self._global_cluster_identifier

    @global_cluster_identifier.setter
    def global_cluster_identifier(self, global_cluster_identifier):
        """Sets the global_cluster_identifier of this CreateGlobalClusterMessage.


        :param global_cluster_identifier: The global_cluster_identifier of this CreateGlobalClusterMessage.
        :type global_cluster_identifier: str
        """
        if global_cluster_identifier is None:
            raise ValueError("Invalid value for `global_cluster_identifier`, must not be `None`")

        self._global_cluster_identifier = global_cluster_identifier

    @property
    def source_db_cluster_identifier(self):
        """Gets the source_db_cluster_identifier of this CreateGlobalClusterMessage.


        :return: The source_db_cluster_identifier of this CreateGlobalClusterMessage.
        :rtype: str
        """
        return self._source_db_cluster_identifier

    @source_db_cluster_identifier.setter
    def source_db_cluster_identifier(self, source_db_cluster_identifier):
        """Sets the source_db_cluster_identifier of this CreateGlobalClusterMessage.


        :param source_db_cluster_identifier: The source_db_cluster_identifier of this CreateGlobalClusterMessage.
        :type source_db_cluster_identifier: str
        """

        self._source_db_cluster_identifier = source_db_cluster_identifier

    @property
    def engine(self):
        """Gets the engine of this CreateGlobalClusterMessage.


        :return: The engine of this CreateGlobalClusterMessage.
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this CreateGlobalClusterMessage.


        :param engine: The engine of this CreateGlobalClusterMessage.
        :type engine: str
        """

        self._engine = engine

    @property
    def engine_version(self):
        """Gets the engine_version of this CreateGlobalClusterMessage.


        :return: The engine_version of this CreateGlobalClusterMessage.
        :rtype: str
        """
        return self._engine_version

    @engine_version.setter
    def engine_version(self, engine_version):
        """Sets the engine_version of this CreateGlobalClusterMessage.


        :param engine_version: The engine_version of this CreateGlobalClusterMessage.
        :type engine_version: str
        """

        self._engine_version = engine_version

    @property
    def deletion_protection(self):
        """Gets the deletion_protection of this CreateGlobalClusterMessage.


        :return: The deletion_protection of this CreateGlobalClusterMessage.
        :rtype: bool
        """
        return self._deletion_protection

    @deletion_protection.setter
    def deletion_protection(self, deletion_protection):
        """Sets the deletion_protection of this CreateGlobalClusterMessage.


        :param deletion_protection: The deletion_protection of this CreateGlobalClusterMessage.
        :type deletion_protection: bool
        """

        self._deletion_protection = deletion_protection

    @property
    def storage_encrypted(self):
        """Gets the storage_encrypted of this CreateGlobalClusterMessage.


        :return: The storage_encrypted of this CreateGlobalClusterMessage.
        :rtype: bool
        """
        return self._storage_encrypted

    @storage_encrypted.setter
    def storage_encrypted(self, storage_encrypted):
        """Sets the storage_encrypted of this CreateGlobalClusterMessage.


        :param storage_encrypted: The storage_encrypted of this CreateGlobalClusterMessage.
        :type storage_encrypted: bool
        """

        self._storage_encrypted = storage_encrypted
