# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.serverless_v2_scaling_configuration import ServerlessV2ScalingConfiguration
from openapi_server import util


class CreateDBClusterMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability_zones: List=None, backup_retention_period: int=None, character_set_name: str=None, copy_tags_to_snapshot: bool=None, database_name: str=None, db_cluster_identifier: str=None, db_cluster_parameter_group_name: str=None, vpc_security_group_ids: List=None, db_subnet_group_name: str=None, engine: str=None, engine_version: str=None, port: int=None, master_username: str=None, master_user_password: str=None, option_group_name: str=None, preferred_backup_window: str=None, preferred_maintenance_window: str=None, replication_source_identifier: str=None, tags: List=None, storage_encrypted: bool=None, kms_key_id: str=None, pre_signed_url: str=None, enable_iam_database_authentication: bool=None, enable_cloudwatch_logs_exports: List=None, deletion_protection: bool=None, serverless_v2_scaling_configuration: ServerlessV2ScalingConfiguration=None, global_cluster_identifier: str=None):
        """CreateDBClusterMessage - a model defined in OpenAPI

        :param availability_zones: The availability_zones of this CreateDBClusterMessage.
        :param backup_retention_period: The backup_retention_period of this CreateDBClusterMessage.
        :param character_set_name: The character_set_name of this CreateDBClusterMessage.
        :param copy_tags_to_snapshot: The copy_tags_to_snapshot of this CreateDBClusterMessage.
        :param database_name: The database_name of this CreateDBClusterMessage.
        :param db_cluster_identifier: The db_cluster_identifier of this CreateDBClusterMessage.
        :param db_cluster_parameter_group_name: The db_cluster_parameter_group_name of this CreateDBClusterMessage.
        :param vpc_security_group_ids: The vpc_security_group_ids of this CreateDBClusterMessage.
        :param db_subnet_group_name: The db_subnet_group_name of this CreateDBClusterMessage.
        :param engine: The engine of this CreateDBClusterMessage.
        :param engine_version: The engine_version of this CreateDBClusterMessage.
        :param port: The port of this CreateDBClusterMessage.
        :param master_username: The master_username of this CreateDBClusterMessage.
        :param master_user_password: The master_user_password of this CreateDBClusterMessage.
        :param option_group_name: The option_group_name of this CreateDBClusterMessage.
        :param preferred_backup_window: The preferred_backup_window of this CreateDBClusterMessage.
        :param preferred_maintenance_window: The preferred_maintenance_window of this CreateDBClusterMessage.
        :param replication_source_identifier: The replication_source_identifier of this CreateDBClusterMessage.
        :param tags: The tags of this CreateDBClusterMessage.
        :param storage_encrypted: The storage_encrypted of this CreateDBClusterMessage.
        :param kms_key_id: The kms_key_id of this CreateDBClusterMessage.
        :param pre_signed_url: The pre_signed_url of this CreateDBClusterMessage.
        :param enable_iam_database_authentication: The enable_iam_database_authentication of this CreateDBClusterMessage.
        :param enable_cloudwatch_logs_exports: The enable_cloudwatch_logs_exports of this CreateDBClusterMessage.
        :param deletion_protection: The deletion_protection of this CreateDBClusterMessage.
        :param serverless_v2_scaling_configuration: The serverless_v2_scaling_configuration of this CreateDBClusterMessage.
        :param global_cluster_identifier: The global_cluster_identifier of this CreateDBClusterMessage.
        """
        self.openapi_types = {
            'availability_zones': List,
            'backup_retention_period': int,
            'character_set_name': str,
            'copy_tags_to_snapshot': bool,
            'database_name': str,
            'db_cluster_identifier': str,
            'db_cluster_parameter_group_name': str,
            'vpc_security_group_ids': List,
            'db_subnet_group_name': str,
            'engine': str,
            'engine_version': str,
            'port': int,
            'master_username': str,
            'master_user_password': str,
            'option_group_name': str,
            'preferred_backup_window': str,
            'preferred_maintenance_window': str,
            'replication_source_identifier': str,
            'tags': List,
            'storage_encrypted': bool,
            'kms_key_id': str,
            'pre_signed_url': str,
            'enable_iam_database_authentication': bool,
            'enable_cloudwatch_logs_exports': List,
            'deletion_protection': bool,
            'serverless_v2_scaling_configuration': ServerlessV2ScalingConfiguration,
            'global_cluster_identifier': str
        }

        self.attribute_map = {
            'availability_zones': 'AvailabilityZones',
            'backup_retention_period': 'BackupRetentionPeriod',
            'character_set_name': 'CharacterSetName',
            'copy_tags_to_snapshot': 'CopyTagsToSnapshot',
            'database_name': 'DatabaseName',
            'db_cluster_identifier': 'DBClusterIdentifier',
            'db_cluster_parameter_group_name': 'DBClusterParameterGroupName',
            'vpc_security_group_ids': 'VpcSecurityGroupIds',
            'db_subnet_group_name': 'DBSubnetGroupName',
            'engine': 'Engine',
            'engine_version': 'EngineVersion',
            'port': 'Port',
            'master_username': 'MasterUsername',
            'master_user_password': 'MasterUserPassword',
            'option_group_name': 'OptionGroupName',
            'preferred_backup_window': 'PreferredBackupWindow',
            'preferred_maintenance_window': 'PreferredMaintenanceWindow',
            'replication_source_identifier': 'ReplicationSourceIdentifier',
            'tags': 'Tags',
            'storage_encrypted': 'StorageEncrypted',
            'kms_key_id': 'KmsKeyId',
            'pre_signed_url': 'PreSignedUrl',
            'enable_iam_database_authentication': 'EnableIAMDatabaseAuthentication',
            'enable_cloudwatch_logs_exports': 'EnableCloudwatchLogsExports',
            'deletion_protection': 'DeletionProtection',
            'serverless_v2_scaling_configuration': 'ServerlessV2ScalingConfiguration',
            'global_cluster_identifier': 'GlobalClusterIdentifier'
        }

        self._availability_zones = availability_zones
        self._backup_retention_period = backup_retention_period
        self._character_set_name = character_set_name
        self._copy_tags_to_snapshot = copy_tags_to_snapshot
        self._database_name = database_name
        self._db_cluster_identifier = db_cluster_identifier
        self._db_cluster_parameter_group_name = db_cluster_parameter_group_name
        self._vpc_security_group_ids = vpc_security_group_ids
        self._db_subnet_group_name = db_subnet_group_name
        self._engine = engine
        self._engine_version = engine_version
        self._port = port
        self._master_username = master_username
        self._master_user_password = master_user_password
        self._option_group_name = option_group_name
        self._preferred_backup_window = preferred_backup_window
        self._preferred_maintenance_window = preferred_maintenance_window
        self._replication_source_identifier = replication_source_identifier
        self._tags = tags
        self._storage_encrypted = storage_encrypted
        self._kms_key_id = kms_key_id
        self._pre_signed_url = pre_signed_url
        self._enable_iam_database_authentication = enable_iam_database_authentication
        self._enable_cloudwatch_logs_exports = enable_cloudwatch_logs_exports
        self._deletion_protection = deletion_protection
        self._serverless_v2_scaling_configuration = serverless_v2_scaling_configuration
        self._global_cluster_identifier = global_cluster_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDBClusterMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDBClusterMessage of this CreateDBClusterMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability_zones(self):
        """Gets the availability_zones of this CreateDBClusterMessage.


        :return: The availability_zones of this CreateDBClusterMessage.
        :rtype: List
        """
        return self._availability_zones

    @availability_zones.setter
    def availability_zones(self, availability_zones):
        """Sets the availability_zones of this CreateDBClusterMessage.


        :param availability_zones: The availability_zones of this CreateDBClusterMessage.
        :type availability_zones: List
        """

        self._availability_zones = availability_zones

    @property
    def backup_retention_period(self):
        """Gets the backup_retention_period of this CreateDBClusterMessage.


        :return: The backup_retention_period of this CreateDBClusterMessage.
        :rtype: int
        """
        return self._backup_retention_period

    @backup_retention_period.setter
    def backup_retention_period(self, backup_retention_period):
        """Sets the backup_retention_period of this CreateDBClusterMessage.


        :param backup_retention_period: The backup_retention_period of this CreateDBClusterMessage.
        :type backup_retention_period: int
        """

        self._backup_retention_period = backup_retention_period

    @property
    def character_set_name(self):
        """Gets the character_set_name of this CreateDBClusterMessage.


        :return: The character_set_name of this CreateDBClusterMessage.
        :rtype: str
        """
        return self._character_set_name

    @character_set_name.setter
    def character_set_name(self, character_set_name):
        """Sets the character_set_name of this CreateDBClusterMessage.


        :param character_set_name: The character_set_name of this CreateDBClusterMessage.
        :type character_set_name: str
        """

        self._character_set_name = character_set_name

    @property
    def copy_tags_to_snapshot(self):
        """Gets the copy_tags_to_snapshot of this CreateDBClusterMessage.


        :return: The copy_tags_to_snapshot of this CreateDBClusterMessage.
        :rtype: bool
        """
        return self._copy_tags_to_snapshot

    @copy_tags_to_snapshot.setter
    def copy_tags_to_snapshot(self, copy_tags_to_snapshot):
        """Sets the copy_tags_to_snapshot of this CreateDBClusterMessage.


        :param copy_tags_to_snapshot: The copy_tags_to_snapshot of this CreateDBClusterMessage.
        :type copy_tags_to_snapshot: bool
        """

        self._copy_tags_to_snapshot = copy_tags_to_snapshot

    @property
    def database_name(self):
        """Gets the database_name of this CreateDBClusterMessage.


        :return: The database_name of this CreateDBClusterMessage.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this CreateDBClusterMessage.


        :param database_name: The database_name of this CreateDBClusterMessage.
        :type database_name: str
        """

        self._database_name = database_name

    @property
    def db_cluster_identifier(self):
        """Gets the db_cluster_identifier of this CreateDBClusterMessage.


        :return: The db_cluster_identifier of this CreateDBClusterMessage.
        :rtype: str
        """
        return self._db_cluster_identifier

    @db_cluster_identifier.setter
    def db_cluster_identifier(self, db_cluster_identifier):
        """Sets the db_cluster_identifier of this CreateDBClusterMessage.


        :param db_cluster_identifier: The db_cluster_identifier of this CreateDBClusterMessage.
        :type db_cluster_identifier: str
        """
        if db_cluster_identifier is None:
            raise ValueError("Invalid value for `db_cluster_identifier`, must not be `None`")

        self._db_cluster_identifier = db_cluster_identifier

    @property
    def db_cluster_parameter_group_name(self):
        """Gets the db_cluster_parameter_group_name of this CreateDBClusterMessage.


        :return: The db_cluster_parameter_group_name of this CreateDBClusterMessage.
        :rtype: str
        """
        return self._db_cluster_parameter_group_name

    @db_cluster_parameter_group_name.setter
    def db_cluster_parameter_group_name(self, db_cluster_parameter_group_name):
        """Sets the db_cluster_parameter_group_name of this CreateDBClusterMessage.


        :param db_cluster_parameter_group_name: The db_cluster_parameter_group_name of this CreateDBClusterMessage.
        :type db_cluster_parameter_group_name: str
        """

        self._db_cluster_parameter_group_name = db_cluster_parameter_group_name

    @property
    def vpc_security_group_ids(self):
        """Gets the vpc_security_group_ids of this CreateDBClusterMessage.


        :return: The vpc_security_group_ids of this CreateDBClusterMessage.
        :rtype: List
        """
        return self._vpc_security_group_ids

    @vpc_security_group_ids.setter
    def vpc_security_group_ids(self, vpc_security_group_ids):
        """Sets the vpc_security_group_ids of this CreateDBClusterMessage.


        :param vpc_security_group_ids: The vpc_security_group_ids of this CreateDBClusterMessage.
        :type vpc_security_group_ids: List
        """

        self._vpc_security_group_ids = vpc_security_group_ids

    @property
    def db_subnet_group_name(self):
        """Gets the db_subnet_group_name of this CreateDBClusterMessage.


        :return: The db_subnet_group_name of this CreateDBClusterMessage.
        :rtype: str
        """
        return self._db_subnet_group_name

    @db_subnet_group_name.setter
    def db_subnet_group_name(self, db_subnet_group_name):
        """Sets the db_subnet_group_name of this CreateDBClusterMessage.


        :param db_subnet_group_name: The db_subnet_group_name of this CreateDBClusterMessage.
        :type db_subnet_group_name: str
        """

        self._db_subnet_group_name = db_subnet_group_name

    @property
    def engine(self):
        """Gets the engine of this CreateDBClusterMessage.


        :return: The engine of this CreateDBClusterMessage.
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this CreateDBClusterMessage.


        :param engine: The engine of this CreateDBClusterMessage.
        :type engine: str
        """
        if engine is None:
            raise ValueError("Invalid value for `engine`, must not be `None`")

        self._engine = engine

    @property
    def engine_version(self):
        """Gets the engine_version of this CreateDBClusterMessage.


        :return: The engine_version of this CreateDBClusterMessage.
        :rtype: str
        """
        return self._engine_version

    @engine_version.setter
    def engine_version(self, engine_version):
        """Sets the engine_version of this CreateDBClusterMessage.


        :param engine_version: The engine_version of this CreateDBClusterMessage.
        :type engine_version: str
        """

        self._engine_version = engine_version

    @property
    def port(self):
        """Gets the port of this CreateDBClusterMessage.


        :return: The port of this CreateDBClusterMessage.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this CreateDBClusterMessage.


        :param port: The port of this CreateDBClusterMessage.
        :type port: int
        """

        self._port = port

    @property
    def master_username(self):
        """Gets the master_username of this CreateDBClusterMessage.


        :return: The master_username of this CreateDBClusterMessage.
        :rtype: str
        """
        return self._master_username

    @master_username.setter
    def master_username(self, master_username):
        """Sets the master_username of this CreateDBClusterMessage.


        :param master_username: The master_username of this CreateDBClusterMessage.
        :type master_username: str
        """

        self._master_username = master_username

    @property
    def master_user_password(self):
        """Gets the master_user_password of this CreateDBClusterMessage.


        :return: The master_user_password of this CreateDBClusterMessage.
        :rtype: str
        """
        return self._master_user_password

    @master_user_password.setter
    def master_user_password(self, master_user_password):
        """Sets the master_user_password of this CreateDBClusterMessage.


        :param master_user_password: The master_user_password of this CreateDBClusterMessage.
        :type master_user_password: str
        """

        self._master_user_password = master_user_password

    @property
    def option_group_name(self):
        """Gets the option_group_name of this CreateDBClusterMessage.


        :return: The option_group_name of this CreateDBClusterMessage.
        :rtype: str
        """
        return self._option_group_name

    @option_group_name.setter
    def option_group_name(self, option_group_name):
        """Sets the option_group_name of this CreateDBClusterMessage.


        :param option_group_name: The option_group_name of this CreateDBClusterMessage.
        :type option_group_name: str
        """

        self._option_group_name = option_group_name

    @property
    def preferred_backup_window(self):
        """Gets the preferred_backup_window of this CreateDBClusterMessage.


        :return: The preferred_backup_window of this CreateDBClusterMessage.
        :rtype: str
        """
        return self._preferred_backup_window

    @preferred_backup_window.setter
    def preferred_backup_window(self, preferred_backup_window):
        """Sets the preferred_backup_window of this CreateDBClusterMessage.


        :param preferred_backup_window: The preferred_backup_window of this CreateDBClusterMessage.
        :type preferred_backup_window: str
        """

        self._preferred_backup_window = preferred_backup_window

    @property
    def preferred_maintenance_window(self):
        """Gets the preferred_maintenance_window of this CreateDBClusterMessage.


        :return: The preferred_maintenance_window of this CreateDBClusterMessage.
        :rtype: str
        """
        return self._preferred_maintenance_window

    @preferred_maintenance_window.setter
    def preferred_maintenance_window(self, preferred_maintenance_window):
        """Sets the preferred_maintenance_window of this CreateDBClusterMessage.


        :param preferred_maintenance_window: The preferred_maintenance_window of this CreateDBClusterMessage.
        :type preferred_maintenance_window: str
        """

        self._preferred_maintenance_window = preferred_maintenance_window

    @property
    def replication_source_identifier(self):
        """Gets the replication_source_identifier of this CreateDBClusterMessage.


        :return: The replication_source_identifier of this CreateDBClusterMessage.
        :rtype: str
        """
        return self._replication_source_identifier

    @replication_source_identifier.setter
    def replication_source_identifier(self, replication_source_identifier):
        """Sets the replication_source_identifier of this CreateDBClusterMessage.


        :param replication_source_identifier: The replication_source_identifier of this CreateDBClusterMessage.
        :type replication_source_identifier: str
        """

        self._replication_source_identifier = replication_source_identifier

    @property
    def tags(self):
        """Gets the tags of this CreateDBClusterMessage.


        :return: The tags of this CreateDBClusterMessage.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateDBClusterMessage.


        :param tags: The tags of this CreateDBClusterMessage.
        :type tags: List
        """

        self._tags = tags

    @property
    def storage_encrypted(self):
        """Gets the storage_encrypted of this CreateDBClusterMessage.


        :return: The storage_encrypted of this CreateDBClusterMessage.
        :rtype: bool
        """
        return self._storage_encrypted

    @storage_encrypted.setter
    def storage_encrypted(self, storage_encrypted):
        """Sets the storage_encrypted of this CreateDBClusterMessage.


        :param storage_encrypted: The storage_encrypted of this CreateDBClusterMessage.
        :type storage_encrypted: bool
        """

        self._storage_encrypted = storage_encrypted

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this CreateDBClusterMessage.


        :return: The kms_key_id of this CreateDBClusterMessage.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this CreateDBClusterMessage.


        :param kms_key_id: The kms_key_id of this CreateDBClusterMessage.
        :type kms_key_id: str
        """

        self._kms_key_id = kms_key_id

    @property
    def pre_signed_url(self):
        """Gets the pre_signed_url of this CreateDBClusterMessage.


        :return: The pre_signed_url of this CreateDBClusterMessage.
        :rtype: str
        """
        return self._pre_signed_url

    @pre_signed_url.setter
    def pre_signed_url(self, pre_signed_url):
        """Sets the pre_signed_url of this CreateDBClusterMessage.


        :param pre_signed_url: The pre_signed_url of this CreateDBClusterMessage.
        :type pre_signed_url: str
        """

        self._pre_signed_url = pre_signed_url

    @property
    def enable_iam_database_authentication(self):
        """Gets the enable_iam_database_authentication of this CreateDBClusterMessage.


        :return: The enable_iam_database_authentication of this CreateDBClusterMessage.
        :rtype: bool
        """
        return self._enable_iam_database_authentication

    @enable_iam_database_authentication.setter
    def enable_iam_database_authentication(self, enable_iam_database_authentication):
        """Sets the enable_iam_database_authentication of this CreateDBClusterMessage.


        :param enable_iam_database_authentication: The enable_iam_database_authentication of this CreateDBClusterMessage.
        :type enable_iam_database_authentication: bool
        """

        self._enable_iam_database_authentication = enable_iam_database_authentication

    @property
    def enable_cloudwatch_logs_exports(self):
        """Gets the enable_cloudwatch_logs_exports of this CreateDBClusterMessage.


        :return: The enable_cloudwatch_logs_exports of this CreateDBClusterMessage.
        :rtype: List
        """
        return self._enable_cloudwatch_logs_exports

    @enable_cloudwatch_logs_exports.setter
    def enable_cloudwatch_logs_exports(self, enable_cloudwatch_logs_exports):
        """Sets the enable_cloudwatch_logs_exports of this CreateDBClusterMessage.


        :param enable_cloudwatch_logs_exports: The enable_cloudwatch_logs_exports of this CreateDBClusterMessage.
        :type enable_cloudwatch_logs_exports: List
        """

        self._enable_cloudwatch_logs_exports = enable_cloudwatch_logs_exports

    @property
    def deletion_protection(self):
        """Gets the deletion_protection of this CreateDBClusterMessage.


        :return: The deletion_protection of this CreateDBClusterMessage.
        :rtype: bool
        """
        return self._deletion_protection

    @deletion_protection.setter
    def deletion_protection(self, deletion_protection):
        """Sets the deletion_protection of this CreateDBClusterMessage.


        :param deletion_protection: The deletion_protection of this CreateDBClusterMessage.
        :type deletion_protection: bool
        """

        self._deletion_protection = deletion_protection

    @property
    def serverless_v2_scaling_configuration(self):
        """Gets the serverless_v2_scaling_configuration of this CreateDBClusterMessage.


        :return: The serverless_v2_scaling_configuration of this CreateDBClusterMessage.
        :rtype: ServerlessV2ScalingConfiguration
        """
        return self._serverless_v2_scaling_configuration

    @serverless_v2_scaling_configuration.setter
    def serverless_v2_scaling_configuration(self, serverless_v2_scaling_configuration):
        """Sets the serverless_v2_scaling_configuration of this CreateDBClusterMessage.


        :param serverless_v2_scaling_configuration: The serverless_v2_scaling_configuration of this CreateDBClusterMessage.
        :type serverless_v2_scaling_configuration: ServerlessV2ScalingConfiguration
        """

        self._serverless_v2_scaling_configuration = serverless_v2_scaling_configuration

    @property
    def global_cluster_identifier(self):
        """Gets the global_cluster_identifier of this CreateDBClusterMessage.


        :return: The global_cluster_identifier of this CreateDBClusterMessage.
        :rtype: str
        """
        return self._global_cluster_identifier

    @global_cluster_identifier.setter
    def global_cluster_identifier(self, global_cluster_identifier):
        """Sets the global_cluster_identifier of this CreateDBClusterMessage.


        :param global_cluster_identifier: The global_cluster_identifier of this CreateDBClusterMessage.
        :type global_cluster_identifier: str
        """

        self._global_cluster_identifier = global_cluster_identifier
