# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RemoveRoleFromDBClusterMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, db_cluster_identifier: str=None, role_arn: str=None, feature_name: str=None):
        """RemoveRoleFromDBClusterMessage - a model defined in OpenAPI

        :param db_cluster_identifier: The db_cluster_identifier of this RemoveRoleFromDBClusterMessage.
        :param role_arn: The role_arn of this RemoveRoleFromDBClusterMessage.
        :param feature_name: The feature_name of this RemoveRoleFromDBClusterMessage.
        """
        self.openapi_types = {
            'db_cluster_identifier': str,
            'role_arn': str,
            'feature_name': str
        }

        self.attribute_map = {
            'db_cluster_identifier': 'DBClusterIdentifier',
            'role_arn': 'RoleArn',
            'feature_name': 'FeatureName'
        }

        self._db_cluster_identifier = db_cluster_identifier
        self._role_arn = role_arn
        self._feature_name = feature_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RemoveRoleFromDBClusterMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RemoveRoleFromDBClusterMessage of this RemoveRoleFromDBClusterMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def db_cluster_identifier(self):
        """Gets the db_cluster_identifier of this RemoveRoleFromDBClusterMessage.


        :return: The db_cluster_identifier of this RemoveRoleFromDBClusterMessage.
        :rtype: str
        """
        return self._db_cluster_identifier

    @db_cluster_identifier.setter
    def db_cluster_identifier(self, db_cluster_identifier):
        """Sets the db_cluster_identifier of this RemoveRoleFromDBClusterMessage.


        :param db_cluster_identifier: The db_cluster_identifier of this RemoveRoleFromDBClusterMessage.
        :type db_cluster_identifier: str
        """
        if db_cluster_identifier is None:
            raise ValueError("Invalid value for `db_cluster_identifier`, must not be `None`")

        self._db_cluster_identifier = db_cluster_identifier

    @property
    def role_arn(self):
        """Gets the role_arn of this RemoveRoleFromDBClusterMessage.


        :return: The role_arn of this RemoveRoleFromDBClusterMessage.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this RemoveRoleFromDBClusterMessage.


        :param role_arn: The role_arn of this RemoveRoleFromDBClusterMessage.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def feature_name(self):
        """Gets the feature_name of this RemoveRoleFromDBClusterMessage.


        :return: The feature_name of this RemoveRoleFromDBClusterMessage.
        :rtype: str
        """
        return self._feature_name

    @feature_name.setter
    def feature_name(self, feature_name):
        """Sets the feature_name of this RemoveRoleFromDBClusterMessage.


        :param feature_name: The feature_name of this RemoveRoleFromDBClusterMessage.
        :type feature_name: str
        """

        self._feature_name = feature_name
