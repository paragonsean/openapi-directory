# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.db_engine_version_default_character_set import DBEngineVersionDefaultCharacterSet
from openapi_server import util


class DBEngineVersionListInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, engine: str=None, engine_version: str=None, db_parameter_group_family: str=None, db_engine_description: str=None, db_engine_version_description: str=None, default_character_set: DBEngineVersionDefaultCharacterSet=None, supported_character_sets: List=None, valid_upgrade_target: List=None, supported_timezones: List=None, exportable_log_types: List=None, supports_log_exports_to_cloudwatch_logs: bool=None, supports_read_replica: bool=None, supports_global_databases: bool=None):
        """DBEngineVersionListInner - a model defined in OpenAPI

        :param engine: The engine of this DBEngineVersionListInner.
        :param engine_version: The engine_version of this DBEngineVersionListInner.
        :param db_parameter_group_family: The db_parameter_group_family of this DBEngineVersionListInner.
        :param db_engine_description: The db_engine_description of this DBEngineVersionListInner.
        :param db_engine_version_description: The db_engine_version_description of this DBEngineVersionListInner.
        :param default_character_set: The default_character_set of this DBEngineVersionListInner.
        :param supported_character_sets: The supported_character_sets of this DBEngineVersionListInner.
        :param valid_upgrade_target: The valid_upgrade_target of this DBEngineVersionListInner.
        :param supported_timezones: The supported_timezones of this DBEngineVersionListInner.
        :param exportable_log_types: The exportable_log_types of this DBEngineVersionListInner.
        :param supports_log_exports_to_cloudwatch_logs: The supports_log_exports_to_cloudwatch_logs of this DBEngineVersionListInner.
        :param supports_read_replica: The supports_read_replica of this DBEngineVersionListInner.
        :param supports_global_databases: The supports_global_databases of this DBEngineVersionListInner.
        """
        self.openapi_types = {
            'engine': str,
            'engine_version': str,
            'db_parameter_group_family': str,
            'db_engine_description': str,
            'db_engine_version_description': str,
            'default_character_set': DBEngineVersionDefaultCharacterSet,
            'supported_character_sets': List,
            'valid_upgrade_target': List,
            'supported_timezones': List,
            'exportable_log_types': List,
            'supports_log_exports_to_cloudwatch_logs': bool,
            'supports_read_replica': bool,
            'supports_global_databases': bool
        }

        self.attribute_map = {
            'engine': 'Engine',
            'engine_version': 'EngineVersion',
            'db_parameter_group_family': 'DBParameterGroupFamily',
            'db_engine_description': 'DBEngineDescription',
            'db_engine_version_description': 'DBEngineVersionDescription',
            'default_character_set': 'DefaultCharacterSet',
            'supported_character_sets': 'SupportedCharacterSets',
            'valid_upgrade_target': 'ValidUpgradeTarget',
            'supported_timezones': 'SupportedTimezones',
            'exportable_log_types': 'ExportableLogTypes',
            'supports_log_exports_to_cloudwatch_logs': 'SupportsLogExportsToCloudwatchLogs',
            'supports_read_replica': 'SupportsReadReplica',
            'supports_global_databases': 'SupportsGlobalDatabases'
        }

        self._engine = engine
        self._engine_version = engine_version
        self._db_parameter_group_family = db_parameter_group_family
        self._db_engine_description = db_engine_description
        self._db_engine_version_description = db_engine_version_description
        self._default_character_set = default_character_set
        self._supported_character_sets = supported_character_sets
        self._valid_upgrade_target = valid_upgrade_target
        self._supported_timezones = supported_timezones
        self._exportable_log_types = exportable_log_types
        self._supports_log_exports_to_cloudwatch_logs = supports_log_exports_to_cloudwatch_logs
        self._supports_read_replica = supports_read_replica
        self._supports_global_databases = supports_global_databases

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DBEngineVersionListInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DBEngineVersionList_inner of this DBEngineVersionListInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def engine(self):
        """Gets the engine of this DBEngineVersionListInner.


        :return: The engine of this DBEngineVersionListInner.
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this DBEngineVersionListInner.


        :param engine: The engine of this DBEngineVersionListInner.
        :type engine: str
        """

        self._engine = engine

    @property
    def engine_version(self):
        """Gets the engine_version of this DBEngineVersionListInner.


        :return: The engine_version of this DBEngineVersionListInner.
        :rtype: str
        """
        return self._engine_version

    @engine_version.setter
    def engine_version(self, engine_version):
        """Sets the engine_version of this DBEngineVersionListInner.


        :param engine_version: The engine_version of this DBEngineVersionListInner.
        :type engine_version: str
        """

        self._engine_version = engine_version

    @property
    def db_parameter_group_family(self):
        """Gets the db_parameter_group_family of this DBEngineVersionListInner.


        :return: The db_parameter_group_family of this DBEngineVersionListInner.
        :rtype: str
        """
        return self._db_parameter_group_family

    @db_parameter_group_family.setter
    def db_parameter_group_family(self, db_parameter_group_family):
        """Sets the db_parameter_group_family of this DBEngineVersionListInner.


        :param db_parameter_group_family: The db_parameter_group_family of this DBEngineVersionListInner.
        :type db_parameter_group_family: str
        """

        self._db_parameter_group_family = db_parameter_group_family

    @property
    def db_engine_description(self):
        """Gets the db_engine_description of this DBEngineVersionListInner.


        :return: The db_engine_description of this DBEngineVersionListInner.
        :rtype: str
        """
        return self._db_engine_description

    @db_engine_description.setter
    def db_engine_description(self, db_engine_description):
        """Sets the db_engine_description of this DBEngineVersionListInner.


        :param db_engine_description: The db_engine_description of this DBEngineVersionListInner.
        :type db_engine_description: str
        """

        self._db_engine_description = db_engine_description

    @property
    def db_engine_version_description(self):
        """Gets the db_engine_version_description of this DBEngineVersionListInner.


        :return: The db_engine_version_description of this DBEngineVersionListInner.
        :rtype: str
        """
        return self._db_engine_version_description

    @db_engine_version_description.setter
    def db_engine_version_description(self, db_engine_version_description):
        """Sets the db_engine_version_description of this DBEngineVersionListInner.


        :param db_engine_version_description: The db_engine_version_description of this DBEngineVersionListInner.
        :type db_engine_version_description: str
        """

        self._db_engine_version_description = db_engine_version_description

    @property
    def default_character_set(self):
        """Gets the default_character_set of this DBEngineVersionListInner.


        :return: The default_character_set of this DBEngineVersionListInner.
        :rtype: DBEngineVersionDefaultCharacterSet
        """
        return self._default_character_set

    @default_character_set.setter
    def default_character_set(self, default_character_set):
        """Sets the default_character_set of this DBEngineVersionListInner.


        :param default_character_set: The default_character_set of this DBEngineVersionListInner.
        :type default_character_set: DBEngineVersionDefaultCharacterSet
        """

        self._default_character_set = default_character_set

    @property
    def supported_character_sets(self):
        """Gets the supported_character_sets of this DBEngineVersionListInner.


        :return: The supported_character_sets of this DBEngineVersionListInner.
        :rtype: List
        """
        return self._supported_character_sets

    @supported_character_sets.setter
    def supported_character_sets(self, supported_character_sets):
        """Sets the supported_character_sets of this DBEngineVersionListInner.


        :param supported_character_sets: The supported_character_sets of this DBEngineVersionListInner.
        :type supported_character_sets: List
        """

        self._supported_character_sets = supported_character_sets

    @property
    def valid_upgrade_target(self):
        """Gets the valid_upgrade_target of this DBEngineVersionListInner.


        :return: The valid_upgrade_target of this DBEngineVersionListInner.
        :rtype: List
        """
        return self._valid_upgrade_target

    @valid_upgrade_target.setter
    def valid_upgrade_target(self, valid_upgrade_target):
        """Sets the valid_upgrade_target of this DBEngineVersionListInner.


        :param valid_upgrade_target: The valid_upgrade_target of this DBEngineVersionListInner.
        :type valid_upgrade_target: List
        """

        self._valid_upgrade_target = valid_upgrade_target

    @property
    def supported_timezones(self):
        """Gets the supported_timezones of this DBEngineVersionListInner.


        :return: The supported_timezones of this DBEngineVersionListInner.
        :rtype: List
        """
        return self._supported_timezones

    @supported_timezones.setter
    def supported_timezones(self, supported_timezones):
        """Sets the supported_timezones of this DBEngineVersionListInner.


        :param supported_timezones: The supported_timezones of this DBEngineVersionListInner.
        :type supported_timezones: List
        """

        self._supported_timezones = supported_timezones

    @property
    def exportable_log_types(self):
        """Gets the exportable_log_types of this DBEngineVersionListInner.


        :return: The exportable_log_types of this DBEngineVersionListInner.
        :rtype: List
        """
        return self._exportable_log_types

    @exportable_log_types.setter
    def exportable_log_types(self, exportable_log_types):
        """Sets the exportable_log_types of this DBEngineVersionListInner.


        :param exportable_log_types: The exportable_log_types of this DBEngineVersionListInner.
        :type exportable_log_types: List
        """

        self._exportable_log_types = exportable_log_types

    @property
    def supports_log_exports_to_cloudwatch_logs(self):
        """Gets the supports_log_exports_to_cloudwatch_logs of this DBEngineVersionListInner.


        :return: The supports_log_exports_to_cloudwatch_logs of this DBEngineVersionListInner.
        :rtype: bool
        """
        return self._supports_log_exports_to_cloudwatch_logs

    @supports_log_exports_to_cloudwatch_logs.setter
    def supports_log_exports_to_cloudwatch_logs(self, supports_log_exports_to_cloudwatch_logs):
        """Sets the supports_log_exports_to_cloudwatch_logs of this DBEngineVersionListInner.


        :param supports_log_exports_to_cloudwatch_logs: The supports_log_exports_to_cloudwatch_logs of this DBEngineVersionListInner.
        :type supports_log_exports_to_cloudwatch_logs: bool
        """

        self._supports_log_exports_to_cloudwatch_logs = supports_log_exports_to_cloudwatch_logs

    @property
    def supports_read_replica(self):
        """Gets the supports_read_replica of this DBEngineVersionListInner.


        :return: The supports_read_replica of this DBEngineVersionListInner.
        :rtype: bool
        """
        return self._supports_read_replica

    @supports_read_replica.setter
    def supports_read_replica(self, supports_read_replica):
        """Sets the supports_read_replica of this DBEngineVersionListInner.


        :param supports_read_replica: The supports_read_replica of this DBEngineVersionListInner.
        :type supports_read_replica: bool
        """

        self._supports_read_replica = supports_read_replica

    @property
    def supports_global_databases(self):
        """Gets the supports_global_databases of this DBEngineVersionListInner.


        :return: The supports_global_databases of this DBEngineVersionListInner.
        :rtype: bool
        """
        return self._supports_global_databases

    @supports_global_databases.setter
    def supports_global_databases(self, supports_global_databases):
        """Sets the supports_global_databases of this DBEngineVersionListInner.


        :param supports_global_databases: The supports_global_databases of this DBEngineVersionListInner.
        :type supports_global_databases: bool
        """

        self._supports_global_databases = supports_global_databases
