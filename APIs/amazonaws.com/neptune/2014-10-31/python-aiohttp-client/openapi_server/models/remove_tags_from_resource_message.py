# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RemoveTagsFromResourceMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_name: str=None, tag_keys: List=None):
        """RemoveTagsFromResourceMessage - a model defined in OpenAPI

        :param resource_name: The resource_name of this RemoveTagsFromResourceMessage.
        :param tag_keys: The tag_keys of this RemoveTagsFromResourceMessage.
        """
        self.openapi_types = {
            'resource_name': str,
            'tag_keys': List
        }

        self.attribute_map = {
            'resource_name': 'ResourceName',
            'tag_keys': 'TagKeys'
        }

        self._resource_name = resource_name
        self._tag_keys = tag_keys

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RemoveTagsFromResourceMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RemoveTagsFromResourceMessage of this RemoveTagsFromResourceMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_name(self):
        """Gets the resource_name of this RemoveTagsFromResourceMessage.


        :return: The resource_name of this RemoveTagsFromResourceMessage.
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this RemoveTagsFromResourceMessage.


        :param resource_name: The resource_name of this RemoveTagsFromResourceMessage.
        :type resource_name: str
        """
        if resource_name is None:
            raise ValueError("Invalid value for `resource_name`, must not be `None`")

        self._resource_name = resource_name

    @property
    def tag_keys(self):
        """Gets the tag_keys of this RemoveTagsFromResourceMessage.


        :return: The tag_keys of this RemoveTagsFromResourceMessage.
        :rtype: List
        """
        return self._tag_keys

    @tag_keys.setter
    def tag_keys(self, tag_keys):
        """Sets the tag_keys of this RemoveTagsFromResourceMessage.


        :param tag_keys: The tag_keys of this RemoveTagsFromResourceMessage.
        :type tag_keys: List
        """
        if tag_keys is None:
            raise ValueError("Invalid value for `tag_keys`, must not be `None`")

        self._tag_keys = tag_keys
