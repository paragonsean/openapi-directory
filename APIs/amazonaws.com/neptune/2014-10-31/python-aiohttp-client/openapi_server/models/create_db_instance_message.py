# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateDBInstanceMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, db_name: str=None, db_instance_identifier: str=None, allocated_storage: int=None, db_instance_class: str=None, engine: str=None, master_username: str=None, master_user_password: str=None, db_security_groups: List=None, vpc_security_group_ids: List=None, availability_zone: str=None, db_subnet_group_name: str=None, preferred_maintenance_window: str=None, db_parameter_group_name: str=None, backup_retention_period: int=None, preferred_backup_window: str=None, port: int=None, multi_az: bool=None, engine_version: str=None, auto_minor_version_upgrade: bool=None, license_model: str=None, iops: int=None, option_group_name: str=None, character_set_name: str=None, publicly_accessible: bool=None, tags: List=None, db_cluster_identifier: str=None, storage_type: str=None, tde_credential_arn: str=None, tde_credential_password: str=None, storage_encrypted: bool=None, kms_key_id: str=None, domain: str=None, copy_tags_to_snapshot: bool=None, monitoring_interval: int=None, monitoring_role_arn: str=None, domain_iam_role_name: str=None, promotion_tier: int=None, timezone: str=None, enable_iam_database_authentication: bool=None, enable_performance_insights: bool=None, performance_insights_kms_key_id: str=None, enable_cloudwatch_logs_exports: List=None, deletion_protection: bool=None):
        """CreateDBInstanceMessage - a model defined in OpenAPI

        :param db_name: The db_name of this CreateDBInstanceMessage.
        :param db_instance_identifier: The db_instance_identifier of this CreateDBInstanceMessage.
        :param allocated_storage: The allocated_storage of this CreateDBInstanceMessage.
        :param db_instance_class: The db_instance_class of this CreateDBInstanceMessage.
        :param engine: The engine of this CreateDBInstanceMessage.
        :param master_username: The master_username of this CreateDBInstanceMessage.
        :param master_user_password: The master_user_password of this CreateDBInstanceMessage.
        :param db_security_groups: The db_security_groups of this CreateDBInstanceMessage.
        :param vpc_security_group_ids: The vpc_security_group_ids of this CreateDBInstanceMessage.
        :param availability_zone: The availability_zone of this CreateDBInstanceMessage.
        :param db_subnet_group_name: The db_subnet_group_name of this CreateDBInstanceMessage.
        :param preferred_maintenance_window: The preferred_maintenance_window of this CreateDBInstanceMessage.
        :param db_parameter_group_name: The db_parameter_group_name of this CreateDBInstanceMessage.
        :param backup_retention_period: The backup_retention_period of this CreateDBInstanceMessage.
        :param preferred_backup_window: The preferred_backup_window of this CreateDBInstanceMessage.
        :param port: The port of this CreateDBInstanceMessage.
        :param multi_az: The multi_az of this CreateDBInstanceMessage.
        :param engine_version: The engine_version of this CreateDBInstanceMessage.
        :param auto_minor_version_upgrade: The auto_minor_version_upgrade of this CreateDBInstanceMessage.
        :param license_model: The license_model of this CreateDBInstanceMessage.
        :param iops: The iops of this CreateDBInstanceMessage.
        :param option_group_name: The option_group_name of this CreateDBInstanceMessage.
        :param character_set_name: The character_set_name of this CreateDBInstanceMessage.
        :param publicly_accessible: The publicly_accessible of this CreateDBInstanceMessage.
        :param tags: The tags of this CreateDBInstanceMessage.
        :param db_cluster_identifier: The db_cluster_identifier of this CreateDBInstanceMessage.
        :param storage_type: The storage_type of this CreateDBInstanceMessage.
        :param tde_credential_arn: The tde_credential_arn of this CreateDBInstanceMessage.
        :param tde_credential_password: The tde_credential_password of this CreateDBInstanceMessage.
        :param storage_encrypted: The storage_encrypted of this CreateDBInstanceMessage.
        :param kms_key_id: The kms_key_id of this CreateDBInstanceMessage.
        :param domain: The domain of this CreateDBInstanceMessage.
        :param copy_tags_to_snapshot: The copy_tags_to_snapshot of this CreateDBInstanceMessage.
        :param monitoring_interval: The monitoring_interval of this CreateDBInstanceMessage.
        :param monitoring_role_arn: The monitoring_role_arn of this CreateDBInstanceMessage.
        :param domain_iam_role_name: The domain_iam_role_name of this CreateDBInstanceMessage.
        :param promotion_tier: The promotion_tier of this CreateDBInstanceMessage.
        :param timezone: The timezone of this CreateDBInstanceMessage.
        :param enable_iam_database_authentication: The enable_iam_database_authentication of this CreateDBInstanceMessage.
        :param enable_performance_insights: The enable_performance_insights of this CreateDBInstanceMessage.
        :param performance_insights_kms_key_id: The performance_insights_kms_key_id of this CreateDBInstanceMessage.
        :param enable_cloudwatch_logs_exports: The enable_cloudwatch_logs_exports of this CreateDBInstanceMessage.
        :param deletion_protection: The deletion_protection of this CreateDBInstanceMessage.
        """
        self.openapi_types = {
            'db_name': str,
            'db_instance_identifier': str,
            'allocated_storage': int,
            'db_instance_class': str,
            'engine': str,
            'master_username': str,
            'master_user_password': str,
            'db_security_groups': List,
            'vpc_security_group_ids': List,
            'availability_zone': str,
            'db_subnet_group_name': str,
            'preferred_maintenance_window': str,
            'db_parameter_group_name': str,
            'backup_retention_period': int,
            'preferred_backup_window': str,
            'port': int,
            'multi_az': bool,
            'engine_version': str,
            'auto_minor_version_upgrade': bool,
            'license_model': str,
            'iops': int,
            'option_group_name': str,
            'character_set_name': str,
            'publicly_accessible': bool,
            'tags': List,
            'db_cluster_identifier': str,
            'storage_type': str,
            'tde_credential_arn': str,
            'tde_credential_password': str,
            'storage_encrypted': bool,
            'kms_key_id': str,
            'domain': str,
            'copy_tags_to_snapshot': bool,
            'monitoring_interval': int,
            'monitoring_role_arn': str,
            'domain_iam_role_name': str,
            'promotion_tier': int,
            'timezone': str,
            'enable_iam_database_authentication': bool,
            'enable_performance_insights': bool,
            'performance_insights_kms_key_id': str,
            'enable_cloudwatch_logs_exports': List,
            'deletion_protection': bool
        }

        self.attribute_map = {
            'db_name': 'DBName',
            'db_instance_identifier': 'DBInstanceIdentifier',
            'allocated_storage': 'AllocatedStorage',
            'db_instance_class': 'DBInstanceClass',
            'engine': 'Engine',
            'master_username': 'MasterUsername',
            'master_user_password': 'MasterUserPassword',
            'db_security_groups': 'DBSecurityGroups',
            'vpc_security_group_ids': 'VpcSecurityGroupIds',
            'availability_zone': 'AvailabilityZone',
            'db_subnet_group_name': 'DBSubnetGroupName',
            'preferred_maintenance_window': 'PreferredMaintenanceWindow',
            'db_parameter_group_name': 'DBParameterGroupName',
            'backup_retention_period': 'BackupRetentionPeriod',
            'preferred_backup_window': 'PreferredBackupWindow',
            'port': 'Port',
            'multi_az': 'MultiAZ',
            'engine_version': 'EngineVersion',
            'auto_minor_version_upgrade': 'AutoMinorVersionUpgrade',
            'license_model': 'LicenseModel',
            'iops': 'Iops',
            'option_group_name': 'OptionGroupName',
            'character_set_name': 'CharacterSetName',
            'publicly_accessible': 'PubliclyAccessible',
            'tags': 'Tags',
            'db_cluster_identifier': 'DBClusterIdentifier',
            'storage_type': 'StorageType',
            'tde_credential_arn': 'TdeCredentialArn',
            'tde_credential_password': 'TdeCredentialPassword',
            'storage_encrypted': 'StorageEncrypted',
            'kms_key_id': 'KmsKeyId',
            'domain': 'Domain',
            'copy_tags_to_snapshot': 'CopyTagsToSnapshot',
            'monitoring_interval': 'MonitoringInterval',
            'monitoring_role_arn': 'MonitoringRoleArn',
            'domain_iam_role_name': 'DomainIAMRoleName',
            'promotion_tier': 'PromotionTier',
            'timezone': 'Timezone',
            'enable_iam_database_authentication': 'EnableIAMDatabaseAuthentication',
            'enable_performance_insights': 'EnablePerformanceInsights',
            'performance_insights_kms_key_id': 'PerformanceInsightsKMSKeyId',
            'enable_cloudwatch_logs_exports': 'EnableCloudwatchLogsExports',
            'deletion_protection': 'DeletionProtection'
        }

        self._db_name = db_name
        self._db_instance_identifier = db_instance_identifier
        self._allocated_storage = allocated_storage
        self._db_instance_class = db_instance_class
        self._engine = engine
        self._master_username = master_username
        self._master_user_password = master_user_password
        self._db_security_groups = db_security_groups
        self._vpc_security_group_ids = vpc_security_group_ids
        self._availability_zone = availability_zone
        self._db_subnet_group_name = db_subnet_group_name
        self._preferred_maintenance_window = preferred_maintenance_window
        self._db_parameter_group_name = db_parameter_group_name
        self._backup_retention_period = backup_retention_period
        self._preferred_backup_window = preferred_backup_window
        self._port = port
        self._multi_az = multi_az
        self._engine_version = engine_version
        self._auto_minor_version_upgrade = auto_minor_version_upgrade
        self._license_model = license_model
        self._iops = iops
        self._option_group_name = option_group_name
        self._character_set_name = character_set_name
        self._publicly_accessible = publicly_accessible
        self._tags = tags
        self._db_cluster_identifier = db_cluster_identifier
        self._storage_type = storage_type
        self._tde_credential_arn = tde_credential_arn
        self._tde_credential_password = tde_credential_password
        self._storage_encrypted = storage_encrypted
        self._kms_key_id = kms_key_id
        self._domain = domain
        self._copy_tags_to_snapshot = copy_tags_to_snapshot
        self._monitoring_interval = monitoring_interval
        self._monitoring_role_arn = monitoring_role_arn
        self._domain_iam_role_name = domain_iam_role_name
        self._promotion_tier = promotion_tier
        self._timezone = timezone
        self._enable_iam_database_authentication = enable_iam_database_authentication
        self._enable_performance_insights = enable_performance_insights
        self._performance_insights_kms_key_id = performance_insights_kms_key_id
        self._enable_cloudwatch_logs_exports = enable_cloudwatch_logs_exports
        self._deletion_protection = deletion_protection

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDBInstanceMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDBInstanceMessage of this CreateDBInstanceMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def db_name(self):
        """Gets the db_name of this CreateDBInstanceMessage.


        :return: The db_name of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._db_name

    @db_name.setter
    def db_name(self, db_name):
        """Sets the db_name of this CreateDBInstanceMessage.


        :param db_name: The db_name of this CreateDBInstanceMessage.
        :type db_name: str
        """

        self._db_name = db_name

    @property
    def db_instance_identifier(self):
        """Gets the db_instance_identifier of this CreateDBInstanceMessage.


        :return: The db_instance_identifier of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._db_instance_identifier

    @db_instance_identifier.setter
    def db_instance_identifier(self, db_instance_identifier):
        """Sets the db_instance_identifier of this CreateDBInstanceMessage.


        :param db_instance_identifier: The db_instance_identifier of this CreateDBInstanceMessage.
        :type db_instance_identifier: str
        """
        if db_instance_identifier is None:
            raise ValueError("Invalid value for `db_instance_identifier`, must not be `None`")

        self._db_instance_identifier = db_instance_identifier

    @property
    def allocated_storage(self):
        """Gets the allocated_storage of this CreateDBInstanceMessage.


        :return: The allocated_storage of this CreateDBInstanceMessage.
        :rtype: int
        """
        return self._allocated_storage

    @allocated_storage.setter
    def allocated_storage(self, allocated_storage):
        """Sets the allocated_storage of this CreateDBInstanceMessage.


        :param allocated_storage: The allocated_storage of this CreateDBInstanceMessage.
        :type allocated_storage: int
        """

        self._allocated_storage = allocated_storage

    @property
    def db_instance_class(self):
        """Gets the db_instance_class of this CreateDBInstanceMessage.


        :return: The db_instance_class of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._db_instance_class

    @db_instance_class.setter
    def db_instance_class(self, db_instance_class):
        """Sets the db_instance_class of this CreateDBInstanceMessage.


        :param db_instance_class: The db_instance_class of this CreateDBInstanceMessage.
        :type db_instance_class: str
        """
        if db_instance_class is None:
            raise ValueError("Invalid value for `db_instance_class`, must not be `None`")

        self._db_instance_class = db_instance_class

    @property
    def engine(self):
        """Gets the engine of this CreateDBInstanceMessage.


        :return: The engine of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this CreateDBInstanceMessage.


        :param engine: The engine of this CreateDBInstanceMessage.
        :type engine: str
        """
        if engine is None:
            raise ValueError("Invalid value for `engine`, must not be `None`")

        self._engine = engine

    @property
    def master_username(self):
        """Gets the master_username of this CreateDBInstanceMessage.


        :return: The master_username of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._master_username

    @master_username.setter
    def master_username(self, master_username):
        """Sets the master_username of this CreateDBInstanceMessage.


        :param master_username: The master_username of this CreateDBInstanceMessage.
        :type master_username: str
        """

        self._master_username = master_username

    @property
    def master_user_password(self):
        """Gets the master_user_password of this CreateDBInstanceMessage.


        :return: The master_user_password of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._master_user_password

    @master_user_password.setter
    def master_user_password(self, master_user_password):
        """Sets the master_user_password of this CreateDBInstanceMessage.


        :param master_user_password: The master_user_password of this CreateDBInstanceMessage.
        :type master_user_password: str
        """

        self._master_user_password = master_user_password

    @property
    def db_security_groups(self):
        """Gets the db_security_groups of this CreateDBInstanceMessage.


        :return: The db_security_groups of this CreateDBInstanceMessage.
        :rtype: List
        """
        return self._db_security_groups

    @db_security_groups.setter
    def db_security_groups(self, db_security_groups):
        """Sets the db_security_groups of this CreateDBInstanceMessage.


        :param db_security_groups: The db_security_groups of this CreateDBInstanceMessage.
        :type db_security_groups: List
        """

        self._db_security_groups = db_security_groups

    @property
    def vpc_security_group_ids(self):
        """Gets the vpc_security_group_ids of this CreateDBInstanceMessage.


        :return: The vpc_security_group_ids of this CreateDBInstanceMessage.
        :rtype: List
        """
        return self._vpc_security_group_ids

    @vpc_security_group_ids.setter
    def vpc_security_group_ids(self, vpc_security_group_ids):
        """Sets the vpc_security_group_ids of this CreateDBInstanceMessage.


        :param vpc_security_group_ids: The vpc_security_group_ids of this CreateDBInstanceMessage.
        :type vpc_security_group_ids: List
        """

        self._vpc_security_group_ids = vpc_security_group_ids

    @property
    def availability_zone(self):
        """Gets the availability_zone of this CreateDBInstanceMessage.


        :return: The availability_zone of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):
        """Sets the availability_zone of this CreateDBInstanceMessage.


        :param availability_zone: The availability_zone of this CreateDBInstanceMessage.
        :type availability_zone: str
        """

        self._availability_zone = availability_zone

    @property
    def db_subnet_group_name(self):
        """Gets the db_subnet_group_name of this CreateDBInstanceMessage.


        :return: The db_subnet_group_name of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._db_subnet_group_name

    @db_subnet_group_name.setter
    def db_subnet_group_name(self, db_subnet_group_name):
        """Sets the db_subnet_group_name of this CreateDBInstanceMessage.


        :param db_subnet_group_name: The db_subnet_group_name of this CreateDBInstanceMessage.
        :type db_subnet_group_name: str
        """

        self._db_subnet_group_name = db_subnet_group_name

    @property
    def preferred_maintenance_window(self):
        """Gets the preferred_maintenance_window of this CreateDBInstanceMessage.


        :return: The preferred_maintenance_window of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._preferred_maintenance_window

    @preferred_maintenance_window.setter
    def preferred_maintenance_window(self, preferred_maintenance_window):
        """Sets the preferred_maintenance_window of this CreateDBInstanceMessage.


        :param preferred_maintenance_window: The preferred_maintenance_window of this CreateDBInstanceMessage.
        :type preferred_maintenance_window: str
        """

        self._preferred_maintenance_window = preferred_maintenance_window

    @property
    def db_parameter_group_name(self):
        """Gets the db_parameter_group_name of this CreateDBInstanceMessage.


        :return: The db_parameter_group_name of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._db_parameter_group_name

    @db_parameter_group_name.setter
    def db_parameter_group_name(self, db_parameter_group_name):
        """Sets the db_parameter_group_name of this CreateDBInstanceMessage.


        :param db_parameter_group_name: The db_parameter_group_name of this CreateDBInstanceMessage.
        :type db_parameter_group_name: str
        """

        self._db_parameter_group_name = db_parameter_group_name

    @property
    def backup_retention_period(self):
        """Gets the backup_retention_period of this CreateDBInstanceMessage.


        :return: The backup_retention_period of this CreateDBInstanceMessage.
        :rtype: int
        """
        return self._backup_retention_period

    @backup_retention_period.setter
    def backup_retention_period(self, backup_retention_period):
        """Sets the backup_retention_period of this CreateDBInstanceMessage.


        :param backup_retention_period: The backup_retention_period of this CreateDBInstanceMessage.
        :type backup_retention_period: int
        """

        self._backup_retention_period = backup_retention_period

    @property
    def preferred_backup_window(self):
        """Gets the preferred_backup_window of this CreateDBInstanceMessage.


        :return: The preferred_backup_window of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._preferred_backup_window

    @preferred_backup_window.setter
    def preferred_backup_window(self, preferred_backup_window):
        """Sets the preferred_backup_window of this CreateDBInstanceMessage.


        :param preferred_backup_window: The preferred_backup_window of this CreateDBInstanceMessage.
        :type preferred_backup_window: str
        """

        self._preferred_backup_window = preferred_backup_window

    @property
    def port(self):
        """Gets the port of this CreateDBInstanceMessage.


        :return: The port of this CreateDBInstanceMessage.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this CreateDBInstanceMessage.


        :param port: The port of this CreateDBInstanceMessage.
        :type port: int
        """

        self._port = port

    @property
    def multi_az(self):
        """Gets the multi_az of this CreateDBInstanceMessage.


        :return: The multi_az of this CreateDBInstanceMessage.
        :rtype: bool
        """
        return self._multi_az

    @multi_az.setter
    def multi_az(self, multi_az):
        """Sets the multi_az of this CreateDBInstanceMessage.


        :param multi_az: The multi_az of this CreateDBInstanceMessage.
        :type multi_az: bool
        """

        self._multi_az = multi_az

    @property
    def engine_version(self):
        """Gets the engine_version of this CreateDBInstanceMessage.


        :return: The engine_version of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._engine_version

    @engine_version.setter
    def engine_version(self, engine_version):
        """Sets the engine_version of this CreateDBInstanceMessage.


        :param engine_version: The engine_version of this CreateDBInstanceMessage.
        :type engine_version: str
        """

        self._engine_version = engine_version

    @property
    def auto_minor_version_upgrade(self):
        """Gets the auto_minor_version_upgrade of this CreateDBInstanceMessage.


        :return: The auto_minor_version_upgrade of this CreateDBInstanceMessage.
        :rtype: bool
        """
        return self._auto_minor_version_upgrade

    @auto_minor_version_upgrade.setter
    def auto_minor_version_upgrade(self, auto_minor_version_upgrade):
        """Sets the auto_minor_version_upgrade of this CreateDBInstanceMessage.


        :param auto_minor_version_upgrade: The auto_minor_version_upgrade of this CreateDBInstanceMessage.
        :type auto_minor_version_upgrade: bool
        """

        self._auto_minor_version_upgrade = auto_minor_version_upgrade

    @property
    def license_model(self):
        """Gets the license_model of this CreateDBInstanceMessage.


        :return: The license_model of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._license_model

    @license_model.setter
    def license_model(self, license_model):
        """Sets the license_model of this CreateDBInstanceMessage.


        :param license_model: The license_model of this CreateDBInstanceMessage.
        :type license_model: str
        """

        self._license_model = license_model

    @property
    def iops(self):
        """Gets the iops of this CreateDBInstanceMessage.


        :return: The iops of this CreateDBInstanceMessage.
        :rtype: int
        """
        return self._iops

    @iops.setter
    def iops(self, iops):
        """Sets the iops of this CreateDBInstanceMessage.


        :param iops: The iops of this CreateDBInstanceMessage.
        :type iops: int
        """

        self._iops = iops

    @property
    def option_group_name(self):
        """Gets the option_group_name of this CreateDBInstanceMessage.


        :return: The option_group_name of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._option_group_name

    @option_group_name.setter
    def option_group_name(self, option_group_name):
        """Sets the option_group_name of this CreateDBInstanceMessage.


        :param option_group_name: The option_group_name of this CreateDBInstanceMessage.
        :type option_group_name: str
        """

        self._option_group_name = option_group_name

    @property
    def character_set_name(self):
        """Gets the character_set_name of this CreateDBInstanceMessage.


        :return: The character_set_name of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._character_set_name

    @character_set_name.setter
    def character_set_name(self, character_set_name):
        """Sets the character_set_name of this CreateDBInstanceMessage.


        :param character_set_name: The character_set_name of this CreateDBInstanceMessage.
        :type character_set_name: str
        """

        self._character_set_name = character_set_name

    @property
    def publicly_accessible(self):
        """Gets the publicly_accessible of this CreateDBInstanceMessage.


        :return: The publicly_accessible of this CreateDBInstanceMessage.
        :rtype: bool
        """
        return self._publicly_accessible

    @publicly_accessible.setter
    def publicly_accessible(self, publicly_accessible):
        """Sets the publicly_accessible of this CreateDBInstanceMessage.


        :param publicly_accessible: The publicly_accessible of this CreateDBInstanceMessage.
        :type publicly_accessible: bool
        """

        self._publicly_accessible = publicly_accessible

    @property
    def tags(self):
        """Gets the tags of this CreateDBInstanceMessage.


        :return: The tags of this CreateDBInstanceMessage.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateDBInstanceMessage.


        :param tags: The tags of this CreateDBInstanceMessage.
        :type tags: List
        """

        self._tags = tags

    @property
    def db_cluster_identifier(self):
        """Gets the db_cluster_identifier of this CreateDBInstanceMessage.


        :return: The db_cluster_identifier of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._db_cluster_identifier

    @db_cluster_identifier.setter
    def db_cluster_identifier(self, db_cluster_identifier):
        """Sets the db_cluster_identifier of this CreateDBInstanceMessage.


        :param db_cluster_identifier: The db_cluster_identifier of this CreateDBInstanceMessage.
        :type db_cluster_identifier: str
        """
        if db_cluster_identifier is None:
            raise ValueError("Invalid value for `db_cluster_identifier`, must not be `None`")

        self._db_cluster_identifier = db_cluster_identifier

    @property
    def storage_type(self):
        """Gets the storage_type of this CreateDBInstanceMessage.


        :return: The storage_type of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._storage_type

    @storage_type.setter
    def storage_type(self, storage_type):
        """Sets the storage_type of this CreateDBInstanceMessage.


        :param storage_type: The storage_type of this CreateDBInstanceMessage.
        :type storage_type: str
        """

        self._storage_type = storage_type

    @property
    def tde_credential_arn(self):
        """Gets the tde_credential_arn of this CreateDBInstanceMessage.


        :return: The tde_credential_arn of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._tde_credential_arn

    @tde_credential_arn.setter
    def tde_credential_arn(self, tde_credential_arn):
        """Sets the tde_credential_arn of this CreateDBInstanceMessage.


        :param tde_credential_arn: The tde_credential_arn of this CreateDBInstanceMessage.
        :type tde_credential_arn: str
        """

        self._tde_credential_arn = tde_credential_arn

    @property
    def tde_credential_password(self):
        """Gets the tde_credential_password of this CreateDBInstanceMessage.


        :return: The tde_credential_password of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._tde_credential_password

    @tde_credential_password.setter
    def tde_credential_password(self, tde_credential_password):
        """Sets the tde_credential_password of this CreateDBInstanceMessage.


        :param tde_credential_password: The tde_credential_password of this CreateDBInstanceMessage.
        :type tde_credential_password: str
        """

        self._tde_credential_password = tde_credential_password

    @property
    def storage_encrypted(self):
        """Gets the storage_encrypted of this CreateDBInstanceMessage.


        :return: The storage_encrypted of this CreateDBInstanceMessage.
        :rtype: bool
        """
        return self._storage_encrypted

    @storage_encrypted.setter
    def storage_encrypted(self, storage_encrypted):
        """Sets the storage_encrypted of this CreateDBInstanceMessage.


        :param storage_encrypted: The storage_encrypted of this CreateDBInstanceMessage.
        :type storage_encrypted: bool
        """

        self._storage_encrypted = storage_encrypted

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this CreateDBInstanceMessage.


        :return: The kms_key_id of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this CreateDBInstanceMessage.


        :param kms_key_id: The kms_key_id of this CreateDBInstanceMessage.
        :type kms_key_id: str
        """

        self._kms_key_id = kms_key_id

    @property
    def domain(self):
        """Gets the domain of this CreateDBInstanceMessage.


        :return: The domain of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this CreateDBInstanceMessage.


        :param domain: The domain of this CreateDBInstanceMessage.
        :type domain: str
        """

        self._domain = domain

    @property
    def copy_tags_to_snapshot(self):
        """Gets the copy_tags_to_snapshot of this CreateDBInstanceMessage.


        :return: The copy_tags_to_snapshot of this CreateDBInstanceMessage.
        :rtype: bool
        """
        return self._copy_tags_to_snapshot

    @copy_tags_to_snapshot.setter
    def copy_tags_to_snapshot(self, copy_tags_to_snapshot):
        """Sets the copy_tags_to_snapshot of this CreateDBInstanceMessage.


        :param copy_tags_to_snapshot: The copy_tags_to_snapshot of this CreateDBInstanceMessage.
        :type copy_tags_to_snapshot: bool
        """

        self._copy_tags_to_snapshot = copy_tags_to_snapshot

    @property
    def monitoring_interval(self):
        """Gets the monitoring_interval of this CreateDBInstanceMessage.


        :return: The monitoring_interval of this CreateDBInstanceMessage.
        :rtype: int
        """
        return self._monitoring_interval

    @monitoring_interval.setter
    def monitoring_interval(self, monitoring_interval):
        """Sets the monitoring_interval of this CreateDBInstanceMessage.


        :param monitoring_interval: The monitoring_interval of this CreateDBInstanceMessage.
        :type monitoring_interval: int
        """

        self._monitoring_interval = monitoring_interval

    @property
    def monitoring_role_arn(self):
        """Gets the monitoring_role_arn of this CreateDBInstanceMessage.


        :return: The monitoring_role_arn of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._monitoring_role_arn

    @monitoring_role_arn.setter
    def monitoring_role_arn(self, monitoring_role_arn):
        """Sets the monitoring_role_arn of this CreateDBInstanceMessage.


        :param monitoring_role_arn: The monitoring_role_arn of this CreateDBInstanceMessage.
        :type monitoring_role_arn: str
        """

        self._monitoring_role_arn = monitoring_role_arn

    @property
    def domain_iam_role_name(self):
        """Gets the domain_iam_role_name of this CreateDBInstanceMessage.


        :return: The domain_iam_role_name of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._domain_iam_role_name

    @domain_iam_role_name.setter
    def domain_iam_role_name(self, domain_iam_role_name):
        """Sets the domain_iam_role_name of this CreateDBInstanceMessage.


        :param domain_iam_role_name: The domain_iam_role_name of this CreateDBInstanceMessage.
        :type domain_iam_role_name: str
        """

        self._domain_iam_role_name = domain_iam_role_name

    @property
    def promotion_tier(self):
        """Gets the promotion_tier of this CreateDBInstanceMessage.


        :return: The promotion_tier of this CreateDBInstanceMessage.
        :rtype: int
        """
        return self._promotion_tier

    @promotion_tier.setter
    def promotion_tier(self, promotion_tier):
        """Sets the promotion_tier of this CreateDBInstanceMessage.


        :param promotion_tier: The promotion_tier of this CreateDBInstanceMessage.
        :type promotion_tier: int
        """

        self._promotion_tier = promotion_tier

    @property
    def timezone(self):
        """Gets the timezone of this CreateDBInstanceMessage.


        :return: The timezone of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this CreateDBInstanceMessage.


        :param timezone: The timezone of this CreateDBInstanceMessage.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def enable_iam_database_authentication(self):
        """Gets the enable_iam_database_authentication of this CreateDBInstanceMessage.


        :return: The enable_iam_database_authentication of this CreateDBInstanceMessage.
        :rtype: bool
        """
        return self._enable_iam_database_authentication

    @enable_iam_database_authentication.setter
    def enable_iam_database_authentication(self, enable_iam_database_authentication):
        """Sets the enable_iam_database_authentication of this CreateDBInstanceMessage.


        :param enable_iam_database_authentication: The enable_iam_database_authentication of this CreateDBInstanceMessage.
        :type enable_iam_database_authentication: bool
        """

        self._enable_iam_database_authentication = enable_iam_database_authentication

    @property
    def enable_performance_insights(self):
        """Gets the enable_performance_insights of this CreateDBInstanceMessage.


        :return: The enable_performance_insights of this CreateDBInstanceMessage.
        :rtype: bool
        """
        return self._enable_performance_insights

    @enable_performance_insights.setter
    def enable_performance_insights(self, enable_performance_insights):
        """Sets the enable_performance_insights of this CreateDBInstanceMessage.


        :param enable_performance_insights: The enable_performance_insights of this CreateDBInstanceMessage.
        :type enable_performance_insights: bool
        """

        self._enable_performance_insights = enable_performance_insights

    @property
    def performance_insights_kms_key_id(self):
        """Gets the performance_insights_kms_key_id of this CreateDBInstanceMessage.


        :return: The performance_insights_kms_key_id of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._performance_insights_kms_key_id

    @performance_insights_kms_key_id.setter
    def performance_insights_kms_key_id(self, performance_insights_kms_key_id):
        """Sets the performance_insights_kms_key_id of this CreateDBInstanceMessage.


        :param performance_insights_kms_key_id: The performance_insights_kms_key_id of this CreateDBInstanceMessage.
        :type performance_insights_kms_key_id: str
        """

        self._performance_insights_kms_key_id = performance_insights_kms_key_id

    @property
    def enable_cloudwatch_logs_exports(self):
        """Gets the enable_cloudwatch_logs_exports of this CreateDBInstanceMessage.


        :return: The enable_cloudwatch_logs_exports of this CreateDBInstanceMessage.
        :rtype: List
        """
        return self._enable_cloudwatch_logs_exports

    @enable_cloudwatch_logs_exports.setter
    def enable_cloudwatch_logs_exports(self, enable_cloudwatch_logs_exports):
        """Sets the enable_cloudwatch_logs_exports of this CreateDBInstanceMessage.


        :param enable_cloudwatch_logs_exports: The enable_cloudwatch_logs_exports of this CreateDBInstanceMessage.
        :type enable_cloudwatch_logs_exports: List
        """

        self._enable_cloudwatch_logs_exports = enable_cloudwatch_logs_exports

    @property
    def deletion_protection(self):
        """Gets the deletion_protection of this CreateDBInstanceMessage.


        :return: The deletion_protection of this CreateDBInstanceMessage.
        :rtype: bool
        """
        return self._deletion_protection

    @deletion_protection.setter
    def deletion_protection(self, deletion_protection):
        """Sets the deletion_protection of this CreateDBInstanceMessage.


        :param deletion_protection: The deletion_protection of this CreateDBInstanceMessage.
        :type deletion_protection: bool
        """

        self._deletion_protection = deletion_protection
