# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrderableDBInstanceOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, engine: str=None, engine_version: str=None, db_instance_class: str=None, license_model: str=None, availability_zones: List=None, multi_az_capable: bool=None, read_replica_capable: bool=None, vpc: bool=None, supports_storage_encryption: bool=None, storage_type: str=None, supports_iops: bool=None, supports_enhanced_monitoring: bool=None, supports_iam_database_authentication: bool=None, supports_performance_insights: bool=None, min_storage_size: int=None, max_storage_size: int=None, min_iops_per_db_instance: int=None, max_iops_per_db_instance: int=None, min_iops_per_gib: float=None, max_iops_per_gib: float=None, supports_global_databases: bool=None):
        """OrderableDBInstanceOption - a model defined in OpenAPI

        :param engine: The engine of this OrderableDBInstanceOption.
        :param engine_version: The engine_version of this OrderableDBInstanceOption.
        :param db_instance_class: The db_instance_class of this OrderableDBInstanceOption.
        :param license_model: The license_model of this OrderableDBInstanceOption.
        :param availability_zones: The availability_zones of this OrderableDBInstanceOption.
        :param multi_az_capable: The multi_az_capable of this OrderableDBInstanceOption.
        :param read_replica_capable: The read_replica_capable of this OrderableDBInstanceOption.
        :param vpc: The vpc of this OrderableDBInstanceOption.
        :param supports_storage_encryption: The supports_storage_encryption of this OrderableDBInstanceOption.
        :param storage_type: The storage_type of this OrderableDBInstanceOption.
        :param supports_iops: The supports_iops of this OrderableDBInstanceOption.
        :param supports_enhanced_monitoring: The supports_enhanced_monitoring of this OrderableDBInstanceOption.
        :param supports_iam_database_authentication: The supports_iam_database_authentication of this OrderableDBInstanceOption.
        :param supports_performance_insights: The supports_performance_insights of this OrderableDBInstanceOption.
        :param min_storage_size: The min_storage_size of this OrderableDBInstanceOption.
        :param max_storage_size: The max_storage_size of this OrderableDBInstanceOption.
        :param min_iops_per_db_instance: The min_iops_per_db_instance of this OrderableDBInstanceOption.
        :param max_iops_per_db_instance: The max_iops_per_db_instance of this OrderableDBInstanceOption.
        :param min_iops_per_gib: The min_iops_per_gib of this OrderableDBInstanceOption.
        :param max_iops_per_gib: The max_iops_per_gib of this OrderableDBInstanceOption.
        :param supports_global_databases: The supports_global_databases of this OrderableDBInstanceOption.
        """
        self.openapi_types = {
            'engine': str,
            'engine_version': str,
            'db_instance_class': str,
            'license_model': str,
            'availability_zones': List,
            'multi_az_capable': bool,
            'read_replica_capable': bool,
            'vpc': bool,
            'supports_storage_encryption': bool,
            'storage_type': str,
            'supports_iops': bool,
            'supports_enhanced_monitoring': bool,
            'supports_iam_database_authentication': bool,
            'supports_performance_insights': bool,
            'min_storage_size': int,
            'max_storage_size': int,
            'min_iops_per_db_instance': int,
            'max_iops_per_db_instance': int,
            'min_iops_per_gib': float,
            'max_iops_per_gib': float,
            'supports_global_databases': bool
        }

        self.attribute_map = {
            'engine': 'Engine',
            'engine_version': 'EngineVersion',
            'db_instance_class': 'DBInstanceClass',
            'license_model': 'LicenseModel',
            'availability_zones': 'AvailabilityZones',
            'multi_az_capable': 'MultiAZCapable',
            'read_replica_capable': 'ReadReplicaCapable',
            'vpc': 'Vpc',
            'supports_storage_encryption': 'SupportsStorageEncryption',
            'storage_type': 'StorageType',
            'supports_iops': 'SupportsIops',
            'supports_enhanced_monitoring': 'SupportsEnhancedMonitoring',
            'supports_iam_database_authentication': 'SupportsIAMDatabaseAuthentication',
            'supports_performance_insights': 'SupportsPerformanceInsights',
            'min_storage_size': 'MinStorageSize',
            'max_storage_size': 'MaxStorageSize',
            'min_iops_per_db_instance': 'MinIopsPerDbInstance',
            'max_iops_per_db_instance': 'MaxIopsPerDbInstance',
            'min_iops_per_gib': 'MinIopsPerGib',
            'max_iops_per_gib': 'MaxIopsPerGib',
            'supports_global_databases': 'SupportsGlobalDatabases'
        }

        self._engine = engine
        self._engine_version = engine_version
        self._db_instance_class = db_instance_class
        self._license_model = license_model
        self._availability_zones = availability_zones
        self._multi_az_capable = multi_az_capable
        self._read_replica_capable = read_replica_capable
        self._vpc = vpc
        self._supports_storage_encryption = supports_storage_encryption
        self._storage_type = storage_type
        self._supports_iops = supports_iops
        self._supports_enhanced_monitoring = supports_enhanced_monitoring
        self._supports_iam_database_authentication = supports_iam_database_authentication
        self._supports_performance_insights = supports_performance_insights
        self._min_storage_size = min_storage_size
        self._max_storage_size = max_storage_size
        self._min_iops_per_db_instance = min_iops_per_db_instance
        self._max_iops_per_db_instance = max_iops_per_db_instance
        self._min_iops_per_gib = min_iops_per_gib
        self._max_iops_per_gib = max_iops_per_gib
        self._supports_global_databases = supports_global_databases

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderableDBInstanceOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderableDBInstanceOption of this OrderableDBInstanceOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def engine(self):
        """Gets the engine of this OrderableDBInstanceOption.


        :return: The engine of this OrderableDBInstanceOption.
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this OrderableDBInstanceOption.


        :param engine: The engine of this OrderableDBInstanceOption.
        :type engine: str
        """

        self._engine = engine

    @property
    def engine_version(self):
        """Gets the engine_version of this OrderableDBInstanceOption.


        :return: The engine_version of this OrderableDBInstanceOption.
        :rtype: str
        """
        return self._engine_version

    @engine_version.setter
    def engine_version(self, engine_version):
        """Sets the engine_version of this OrderableDBInstanceOption.


        :param engine_version: The engine_version of this OrderableDBInstanceOption.
        :type engine_version: str
        """

        self._engine_version = engine_version

    @property
    def db_instance_class(self):
        """Gets the db_instance_class of this OrderableDBInstanceOption.


        :return: The db_instance_class of this OrderableDBInstanceOption.
        :rtype: str
        """
        return self._db_instance_class

    @db_instance_class.setter
    def db_instance_class(self, db_instance_class):
        """Sets the db_instance_class of this OrderableDBInstanceOption.


        :param db_instance_class: The db_instance_class of this OrderableDBInstanceOption.
        :type db_instance_class: str
        """

        self._db_instance_class = db_instance_class

    @property
    def license_model(self):
        """Gets the license_model of this OrderableDBInstanceOption.


        :return: The license_model of this OrderableDBInstanceOption.
        :rtype: str
        """
        return self._license_model

    @license_model.setter
    def license_model(self, license_model):
        """Sets the license_model of this OrderableDBInstanceOption.


        :param license_model: The license_model of this OrderableDBInstanceOption.
        :type license_model: str
        """

        self._license_model = license_model

    @property
    def availability_zones(self):
        """Gets the availability_zones of this OrderableDBInstanceOption.


        :return: The availability_zones of this OrderableDBInstanceOption.
        :rtype: List
        """
        return self._availability_zones

    @availability_zones.setter
    def availability_zones(self, availability_zones):
        """Sets the availability_zones of this OrderableDBInstanceOption.


        :param availability_zones: The availability_zones of this OrderableDBInstanceOption.
        :type availability_zones: List
        """

        self._availability_zones = availability_zones

    @property
    def multi_az_capable(self):
        """Gets the multi_az_capable of this OrderableDBInstanceOption.


        :return: The multi_az_capable of this OrderableDBInstanceOption.
        :rtype: bool
        """
        return self._multi_az_capable

    @multi_az_capable.setter
    def multi_az_capable(self, multi_az_capable):
        """Sets the multi_az_capable of this OrderableDBInstanceOption.


        :param multi_az_capable: The multi_az_capable of this OrderableDBInstanceOption.
        :type multi_az_capable: bool
        """

        self._multi_az_capable = multi_az_capable

    @property
    def read_replica_capable(self):
        """Gets the read_replica_capable of this OrderableDBInstanceOption.


        :return: The read_replica_capable of this OrderableDBInstanceOption.
        :rtype: bool
        """
        return self._read_replica_capable

    @read_replica_capable.setter
    def read_replica_capable(self, read_replica_capable):
        """Sets the read_replica_capable of this OrderableDBInstanceOption.


        :param read_replica_capable: The read_replica_capable of this OrderableDBInstanceOption.
        :type read_replica_capable: bool
        """

        self._read_replica_capable = read_replica_capable

    @property
    def vpc(self):
        """Gets the vpc of this OrderableDBInstanceOption.


        :return: The vpc of this OrderableDBInstanceOption.
        :rtype: bool
        """
        return self._vpc

    @vpc.setter
    def vpc(self, vpc):
        """Sets the vpc of this OrderableDBInstanceOption.


        :param vpc: The vpc of this OrderableDBInstanceOption.
        :type vpc: bool
        """

        self._vpc = vpc

    @property
    def supports_storage_encryption(self):
        """Gets the supports_storage_encryption of this OrderableDBInstanceOption.


        :return: The supports_storage_encryption of this OrderableDBInstanceOption.
        :rtype: bool
        """
        return self._supports_storage_encryption

    @supports_storage_encryption.setter
    def supports_storage_encryption(self, supports_storage_encryption):
        """Sets the supports_storage_encryption of this OrderableDBInstanceOption.


        :param supports_storage_encryption: The supports_storage_encryption of this OrderableDBInstanceOption.
        :type supports_storage_encryption: bool
        """

        self._supports_storage_encryption = supports_storage_encryption

    @property
    def storage_type(self):
        """Gets the storage_type of this OrderableDBInstanceOption.


        :return: The storage_type of this OrderableDBInstanceOption.
        :rtype: str
        """
        return self._storage_type

    @storage_type.setter
    def storage_type(self, storage_type):
        """Sets the storage_type of this OrderableDBInstanceOption.


        :param storage_type: The storage_type of this OrderableDBInstanceOption.
        :type storage_type: str
        """

        self._storage_type = storage_type

    @property
    def supports_iops(self):
        """Gets the supports_iops of this OrderableDBInstanceOption.


        :return: The supports_iops of this OrderableDBInstanceOption.
        :rtype: bool
        """
        return self._supports_iops

    @supports_iops.setter
    def supports_iops(self, supports_iops):
        """Sets the supports_iops of this OrderableDBInstanceOption.


        :param supports_iops: The supports_iops of this OrderableDBInstanceOption.
        :type supports_iops: bool
        """

        self._supports_iops = supports_iops

    @property
    def supports_enhanced_monitoring(self):
        """Gets the supports_enhanced_monitoring of this OrderableDBInstanceOption.


        :return: The supports_enhanced_monitoring of this OrderableDBInstanceOption.
        :rtype: bool
        """
        return self._supports_enhanced_monitoring

    @supports_enhanced_monitoring.setter
    def supports_enhanced_monitoring(self, supports_enhanced_monitoring):
        """Sets the supports_enhanced_monitoring of this OrderableDBInstanceOption.


        :param supports_enhanced_monitoring: The supports_enhanced_monitoring of this OrderableDBInstanceOption.
        :type supports_enhanced_monitoring: bool
        """

        self._supports_enhanced_monitoring = supports_enhanced_monitoring

    @property
    def supports_iam_database_authentication(self):
        """Gets the supports_iam_database_authentication of this OrderableDBInstanceOption.


        :return: The supports_iam_database_authentication of this OrderableDBInstanceOption.
        :rtype: bool
        """
        return self._supports_iam_database_authentication

    @supports_iam_database_authentication.setter
    def supports_iam_database_authentication(self, supports_iam_database_authentication):
        """Sets the supports_iam_database_authentication of this OrderableDBInstanceOption.


        :param supports_iam_database_authentication: The supports_iam_database_authentication of this OrderableDBInstanceOption.
        :type supports_iam_database_authentication: bool
        """

        self._supports_iam_database_authentication = supports_iam_database_authentication

    @property
    def supports_performance_insights(self):
        """Gets the supports_performance_insights of this OrderableDBInstanceOption.


        :return: The supports_performance_insights of this OrderableDBInstanceOption.
        :rtype: bool
        """
        return self._supports_performance_insights

    @supports_performance_insights.setter
    def supports_performance_insights(self, supports_performance_insights):
        """Sets the supports_performance_insights of this OrderableDBInstanceOption.


        :param supports_performance_insights: The supports_performance_insights of this OrderableDBInstanceOption.
        :type supports_performance_insights: bool
        """

        self._supports_performance_insights = supports_performance_insights

    @property
    def min_storage_size(self):
        """Gets the min_storage_size of this OrderableDBInstanceOption.


        :return: The min_storage_size of this OrderableDBInstanceOption.
        :rtype: int
        """
        return self._min_storage_size

    @min_storage_size.setter
    def min_storage_size(self, min_storage_size):
        """Sets the min_storage_size of this OrderableDBInstanceOption.


        :param min_storage_size: The min_storage_size of this OrderableDBInstanceOption.
        :type min_storage_size: int
        """

        self._min_storage_size = min_storage_size

    @property
    def max_storage_size(self):
        """Gets the max_storage_size of this OrderableDBInstanceOption.


        :return: The max_storage_size of this OrderableDBInstanceOption.
        :rtype: int
        """
        return self._max_storage_size

    @max_storage_size.setter
    def max_storage_size(self, max_storage_size):
        """Sets the max_storage_size of this OrderableDBInstanceOption.


        :param max_storage_size: The max_storage_size of this OrderableDBInstanceOption.
        :type max_storage_size: int
        """

        self._max_storage_size = max_storage_size

    @property
    def min_iops_per_db_instance(self):
        """Gets the min_iops_per_db_instance of this OrderableDBInstanceOption.


        :return: The min_iops_per_db_instance of this OrderableDBInstanceOption.
        :rtype: int
        """
        return self._min_iops_per_db_instance

    @min_iops_per_db_instance.setter
    def min_iops_per_db_instance(self, min_iops_per_db_instance):
        """Sets the min_iops_per_db_instance of this OrderableDBInstanceOption.


        :param min_iops_per_db_instance: The min_iops_per_db_instance of this OrderableDBInstanceOption.
        :type min_iops_per_db_instance: int
        """

        self._min_iops_per_db_instance = min_iops_per_db_instance

    @property
    def max_iops_per_db_instance(self):
        """Gets the max_iops_per_db_instance of this OrderableDBInstanceOption.


        :return: The max_iops_per_db_instance of this OrderableDBInstanceOption.
        :rtype: int
        """
        return self._max_iops_per_db_instance

    @max_iops_per_db_instance.setter
    def max_iops_per_db_instance(self, max_iops_per_db_instance):
        """Sets the max_iops_per_db_instance of this OrderableDBInstanceOption.


        :param max_iops_per_db_instance: The max_iops_per_db_instance of this OrderableDBInstanceOption.
        :type max_iops_per_db_instance: int
        """

        self._max_iops_per_db_instance = max_iops_per_db_instance

    @property
    def min_iops_per_gib(self):
        """Gets the min_iops_per_gib of this OrderableDBInstanceOption.


        :return: The min_iops_per_gib of this OrderableDBInstanceOption.
        :rtype: float
        """
        return self._min_iops_per_gib

    @min_iops_per_gib.setter
    def min_iops_per_gib(self, min_iops_per_gib):
        """Sets the min_iops_per_gib of this OrderableDBInstanceOption.


        :param min_iops_per_gib: The min_iops_per_gib of this OrderableDBInstanceOption.
        :type min_iops_per_gib: float
        """

        self._min_iops_per_gib = min_iops_per_gib

    @property
    def max_iops_per_gib(self):
        """Gets the max_iops_per_gib of this OrderableDBInstanceOption.


        :return: The max_iops_per_gib of this OrderableDBInstanceOption.
        :rtype: float
        """
        return self._max_iops_per_gib

    @max_iops_per_gib.setter
    def max_iops_per_gib(self, max_iops_per_gib):
        """Sets the max_iops_per_gib of this OrderableDBInstanceOption.


        :param max_iops_per_gib: The max_iops_per_gib of this OrderableDBInstanceOption.
        :type max_iops_per_gib: float
        """

        self._max_iops_per_gib = max_iops_per_gib

    @property
    def supports_global_databases(self):
        """Gets the supports_global_databases of this OrderableDBInstanceOption.


        :return: The supports_global_databases of this OrderableDBInstanceOption.
        :rtype: bool
        """
        return self._supports_global_databases

    @supports_global_databases.setter
    def supports_global_databases(self, supports_global_databases):
        """Sets the supports_global_databases of this OrderableDBInstanceOption.


        :param supports_global_databases: The supports_global_databases of this OrderableDBInstanceOption.
        :type supports_global_databases: bool
        """

        self._supports_global_databases = supports_global_databases
