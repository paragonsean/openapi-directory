# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeDBSubnetGroupsMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, db_subnet_group_name: str=None, filters: List=None, max_records: int=None, marker: str=None):
        """DescribeDBSubnetGroupsMessage - a model defined in OpenAPI

        :param db_subnet_group_name: The db_subnet_group_name of this DescribeDBSubnetGroupsMessage.
        :param filters: The filters of this DescribeDBSubnetGroupsMessage.
        :param max_records: The max_records of this DescribeDBSubnetGroupsMessage.
        :param marker: The marker of this DescribeDBSubnetGroupsMessage.
        """
        self.openapi_types = {
            'db_subnet_group_name': str,
            'filters': List,
            'max_records': int,
            'marker': str
        }

        self.attribute_map = {
            'db_subnet_group_name': 'DBSubnetGroupName',
            'filters': 'Filters',
            'max_records': 'MaxRecords',
            'marker': 'Marker'
        }

        self._db_subnet_group_name = db_subnet_group_name
        self._filters = filters
        self._max_records = max_records
        self._marker = marker

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeDBSubnetGroupsMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeDBSubnetGroupsMessage of this DescribeDBSubnetGroupsMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def db_subnet_group_name(self):
        """Gets the db_subnet_group_name of this DescribeDBSubnetGroupsMessage.


        :return: The db_subnet_group_name of this DescribeDBSubnetGroupsMessage.
        :rtype: str
        """
        return self._db_subnet_group_name

    @db_subnet_group_name.setter
    def db_subnet_group_name(self, db_subnet_group_name):
        """Sets the db_subnet_group_name of this DescribeDBSubnetGroupsMessage.


        :param db_subnet_group_name: The db_subnet_group_name of this DescribeDBSubnetGroupsMessage.
        :type db_subnet_group_name: str
        """

        self._db_subnet_group_name = db_subnet_group_name

    @property
    def filters(self):
        """Gets the filters of this DescribeDBSubnetGroupsMessage.


        :return: The filters of this DescribeDBSubnetGroupsMessage.
        :rtype: List
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this DescribeDBSubnetGroupsMessage.


        :param filters: The filters of this DescribeDBSubnetGroupsMessage.
        :type filters: List
        """

        self._filters = filters

    @property
    def max_records(self):
        """Gets the max_records of this DescribeDBSubnetGroupsMessage.


        :return: The max_records of this DescribeDBSubnetGroupsMessage.
        :rtype: int
        """
        return self._max_records

    @max_records.setter
    def max_records(self, max_records):
        """Sets the max_records of this DescribeDBSubnetGroupsMessage.


        :param max_records: The max_records of this DescribeDBSubnetGroupsMessage.
        :type max_records: int
        """

        self._max_records = max_records

    @property
    def marker(self):
        """Gets the marker of this DescribeDBSubnetGroupsMessage.


        :return: The marker of this DescribeDBSubnetGroupsMessage.
        :rtype: str
        """
        return self._marker

    @marker.setter
    def marker(self, marker):
        """Sets the marker of this DescribeDBSubnetGroupsMessage.


        :param marker: The marker of this DescribeDBSubnetGroupsMessage.
        :type marker: str
        """

        self._marker = marker
