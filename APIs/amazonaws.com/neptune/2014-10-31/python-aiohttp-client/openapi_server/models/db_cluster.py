# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.db_cluster_pending_modified_values import DBClusterPendingModifiedValues
from openapi_server.models.serverless_v2_scaling_configuration_info import ServerlessV2ScalingConfigurationInfo
from openapi_server import util


class DBCluster(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allocated_storage: int=None, availability_zones: List=None, backup_retention_period: int=None, character_set_name: str=None, database_name: str=None, db_cluster_identifier: str=None, db_cluster_parameter_group: str=None, db_subnet_group: str=None, status: str=None, percent_progress: str=None, earliest_restorable_time: datetime=None, endpoint: str=None, reader_endpoint: str=None, multi_az: bool=None, engine: str=None, engine_version: str=None, latest_restorable_time: datetime=None, port: int=None, master_username: str=None, db_cluster_option_group_memberships: List=None, preferred_backup_window: str=None, preferred_maintenance_window: str=None, replication_source_identifier: str=None, read_replica_identifiers: List=None, db_cluster_members: List=None, vpc_security_groups: List=None, hosted_zone_id: str=None, storage_encrypted: bool=None, kms_key_id: str=None, db_cluster_resource_id: str=None, db_cluster_arn: str=None, associated_roles: List=None, iam_database_authentication_enabled: bool=None, clone_group_id: str=None, cluster_create_time: datetime=None, copy_tags_to_snapshot: bool=None, enabled_cloudwatch_logs_exports: List=None, pending_modified_values: DBClusterPendingModifiedValues=None, deletion_protection: bool=None, cross_account_clone: bool=None, automatic_restart_time: datetime=None, serverless_v2_scaling_configuration: ServerlessV2ScalingConfigurationInfo=None, global_cluster_identifier: str=None):
        """DBCluster - a model defined in OpenAPI

        :param allocated_storage: The allocated_storage of this DBCluster.
        :param availability_zones: The availability_zones of this DBCluster.
        :param backup_retention_period: The backup_retention_period of this DBCluster.
        :param character_set_name: The character_set_name of this DBCluster.
        :param database_name: The database_name of this DBCluster.
        :param db_cluster_identifier: The db_cluster_identifier of this DBCluster.
        :param db_cluster_parameter_group: The db_cluster_parameter_group of this DBCluster.
        :param db_subnet_group: The db_subnet_group of this DBCluster.
        :param status: The status of this DBCluster.
        :param percent_progress: The percent_progress of this DBCluster.
        :param earliest_restorable_time: The earliest_restorable_time of this DBCluster.
        :param endpoint: The endpoint of this DBCluster.
        :param reader_endpoint: The reader_endpoint of this DBCluster.
        :param multi_az: The multi_az of this DBCluster.
        :param engine: The engine of this DBCluster.
        :param engine_version: The engine_version of this DBCluster.
        :param latest_restorable_time: The latest_restorable_time of this DBCluster.
        :param port: The port of this DBCluster.
        :param master_username: The master_username of this DBCluster.
        :param db_cluster_option_group_memberships: The db_cluster_option_group_memberships of this DBCluster.
        :param preferred_backup_window: The preferred_backup_window of this DBCluster.
        :param preferred_maintenance_window: The preferred_maintenance_window of this DBCluster.
        :param replication_source_identifier: The replication_source_identifier of this DBCluster.
        :param read_replica_identifiers: The read_replica_identifiers of this DBCluster.
        :param db_cluster_members: The db_cluster_members of this DBCluster.
        :param vpc_security_groups: The vpc_security_groups of this DBCluster.
        :param hosted_zone_id: The hosted_zone_id of this DBCluster.
        :param storage_encrypted: The storage_encrypted of this DBCluster.
        :param kms_key_id: The kms_key_id of this DBCluster.
        :param db_cluster_resource_id: The db_cluster_resource_id of this DBCluster.
        :param db_cluster_arn: The db_cluster_arn of this DBCluster.
        :param associated_roles: The associated_roles of this DBCluster.
        :param iam_database_authentication_enabled: The iam_database_authentication_enabled of this DBCluster.
        :param clone_group_id: The clone_group_id of this DBCluster.
        :param cluster_create_time: The cluster_create_time of this DBCluster.
        :param copy_tags_to_snapshot: The copy_tags_to_snapshot of this DBCluster.
        :param enabled_cloudwatch_logs_exports: The enabled_cloudwatch_logs_exports of this DBCluster.
        :param pending_modified_values: The pending_modified_values of this DBCluster.
        :param deletion_protection: The deletion_protection of this DBCluster.
        :param cross_account_clone: The cross_account_clone of this DBCluster.
        :param automatic_restart_time: The automatic_restart_time of this DBCluster.
        :param serverless_v2_scaling_configuration: The serverless_v2_scaling_configuration of this DBCluster.
        :param global_cluster_identifier: The global_cluster_identifier of this DBCluster.
        """
        self.openapi_types = {
            'allocated_storage': int,
            'availability_zones': List,
            'backup_retention_period': int,
            'character_set_name': str,
            'database_name': str,
            'db_cluster_identifier': str,
            'db_cluster_parameter_group': str,
            'db_subnet_group': str,
            'status': str,
            'percent_progress': str,
            'earliest_restorable_time': datetime,
            'endpoint': str,
            'reader_endpoint': str,
            'multi_az': bool,
            'engine': str,
            'engine_version': str,
            'latest_restorable_time': datetime,
            'port': int,
            'master_username': str,
            'db_cluster_option_group_memberships': List,
            'preferred_backup_window': str,
            'preferred_maintenance_window': str,
            'replication_source_identifier': str,
            'read_replica_identifiers': List,
            'db_cluster_members': List,
            'vpc_security_groups': List,
            'hosted_zone_id': str,
            'storage_encrypted': bool,
            'kms_key_id': str,
            'db_cluster_resource_id': str,
            'db_cluster_arn': str,
            'associated_roles': List,
            'iam_database_authentication_enabled': bool,
            'clone_group_id': str,
            'cluster_create_time': datetime,
            'copy_tags_to_snapshot': bool,
            'enabled_cloudwatch_logs_exports': List,
            'pending_modified_values': DBClusterPendingModifiedValues,
            'deletion_protection': bool,
            'cross_account_clone': bool,
            'automatic_restart_time': datetime,
            'serverless_v2_scaling_configuration': ServerlessV2ScalingConfigurationInfo,
            'global_cluster_identifier': str
        }

        self.attribute_map = {
            'allocated_storage': 'AllocatedStorage',
            'availability_zones': 'AvailabilityZones',
            'backup_retention_period': 'BackupRetentionPeriod',
            'character_set_name': 'CharacterSetName',
            'database_name': 'DatabaseName',
            'db_cluster_identifier': 'DBClusterIdentifier',
            'db_cluster_parameter_group': 'DBClusterParameterGroup',
            'db_subnet_group': 'DBSubnetGroup',
            'status': 'Status',
            'percent_progress': 'PercentProgress',
            'earliest_restorable_time': 'EarliestRestorableTime',
            'endpoint': 'Endpoint',
            'reader_endpoint': 'ReaderEndpoint',
            'multi_az': 'MultiAZ',
            'engine': 'Engine',
            'engine_version': 'EngineVersion',
            'latest_restorable_time': 'LatestRestorableTime',
            'port': 'Port',
            'master_username': 'MasterUsername',
            'db_cluster_option_group_memberships': 'DBClusterOptionGroupMemberships',
            'preferred_backup_window': 'PreferredBackupWindow',
            'preferred_maintenance_window': 'PreferredMaintenanceWindow',
            'replication_source_identifier': 'ReplicationSourceIdentifier',
            'read_replica_identifiers': 'ReadReplicaIdentifiers',
            'db_cluster_members': 'DBClusterMembers',
            'vpc_security_groups': 'VpcSecurityGroups',
            'hosted_zone_id': 'HostedZoneId',
            'storage_encrypted': 'StorageEncrypted',
            'kms_key_id': 'KmsKeyId',
            'db_cluster_resource_id': 'DbClusterResourceId',
            'db_cluster_arn': 'DBClusterArn',
            'associated_roles': 'AssociatedRoles',
            'iam_database_authentication_enabled': 'IAMDatabaseAuthenticationEnabled',
            'clone_group_id': 'CloneGroupId',
            'cluster_create_time': 'ClusterCreateTime',
            'copy_tags_to_snapshot': 'CopyTagsToSnapshot',
            'enabled_cloudwatch_logs_exports': 'EnabledCloudwatchLogsExports',
            'pending_modified_values': 'PendingModifiedValues',
            'deletion_protection': 'DeletionProtection',
            'cross_account_clone': 'CrossAccountClone',
            'automatic_restart_time': 'AutomaticRestartTime',
            'serverless_v2_scaling_configuration': 'ServerlessV2ScalingConfiguration',
            'global_cluster_identifier': 'GlobalClusterIdentifier'
        }

        self._allocated_storage = allocated_storage
        self._availability_zones = availability_zones
        self._backup_retention_period = backup_retention_period
        self._character_set_name = character_set_name
        self._database_name = database_name
        self._db_cluster_identifier = db_cluster_identifier
        self._db_cluster_parameter_group = db_cluster_parameter_group
        self._db_subnet_group = db_subnet_group
        self._status = status
        self._percent_progress = percent_progress
        self._earliest_restorable_time = earliest_restorable_time
        self._endpoint = endpoint
        self._reader_endpoint = reader_endpoint
        self._multi_az = multi_az
        self._engine = engine
        self._engine_version = engine_version
        self._latest_restorable_time = latest_restorable_time
        self._port = port
        self._master_username = master_username
        self._db_cluster_option_group_memberships = db_cluster_option_group_memberships
        self._preferred_backup_window = preferred_backup_window
        self._preferred_maintenance_window = preferred_maintenance_window
        self._replication_source_identifier = replication_source_identifier
        self._read_replica_identifiers = read_replica_identifiers
        self._db_cluster_members = db_cluster_members
        self._vpc_security_groups = vpc_security_groups
        self._hosted_zone_id = hosted_zone_id
        self._storage_encrypted = storage_encrypted
        self._kms_key_id = kms_key_id
        self._db_cluster_resource_id = db_cluster_resource_id
        self._db_cluster_arn = db_cluster_arn
        self._associated_roles = associated_roles
        self._iam_database_authentication_enabled = iam_database_authentication_enabled
        self._clone_group_id = clone_group_id
        self._cluster_create_time = cluster_create_time
        self._copy_tags_to_snapshot = copy_tags_to_snapshot
        self._enabled_cloudwatch_logs_exports = enabled_cloudwatch_logs_exports
        self._pending_modified_values = pending_modified_values
        self._deletion_protection = deletion_protection
        self._cross_account_clone = cross_account_clone
        self._automatic_restart_time = automatic_restart_time
        self._serverless_v2_scaling_configuration = serverless_v2_scaling_configuration
        self._global_cluster_identifier = global_cluster_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DBCluster':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DBCluster of this DBCluster.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allocated_storage(self):
        """Gets the allocated_storage of this DBCluster.


        :return: The allocated_storage of this DBCluster.
        :rtype: int
        """
        return self._allocated_storage

    @allocated_storage.setter
    def allocated_storage(self, allocated_storage):
        """Sets the allocated_storage of this DBCluster.


        :param allocated_storage: The allocated_storage of this DBCluster.
        :type allocated_storage: int
        """

        self._allocated_storage = allocated_storage

    @property
    def availability_zones(self):
        """Gets the availability_zones of this DBCluster.


        :return: The availability_zones of this DBCluster.
        :rtype: List
        """
        return self._availability_zones

    @availability_zones.setter
    def availability_zones(self, availability_zones):
        """Sets the availability_zones of this DBCluster.


        :param availability_zones: The availability_zones of this DBCluster.
        :type availability_zones: List
        """

        self._availability_zones = availability_zones

    @property
    def backup_retention_period(self):
        """Gets the backup_retention_period of this DBCluster.


        :return: The backup_retention_period of this DBCluster.
        :rtype: int
        """
        return self._backup_retention_period

    @backup_retention_period.setter
    def backup_retention_period(self, backup_retention_period):
        """Sets the backup_retention_period of this DBCluster.


        :param backup_retention_period: The backup_retention_period of this DBCluster.
        :type backup_retention_period: int
        """

        self._backup_retention_period = backup_retention_period

    @property
    def character_set_name(self):
        """Gets the character_set_name of this DBCluster.


        :return: The character_set_name of this DBCluster.
        :rtype: str
        """
        return self._character_set_name

    @character_set_name.setter
    def character_set_name(self, character_set_name):
        """Sets the character_set_name of this DBCluster.


        :param character_set_name: The character_set_name of this DBCluster.
        :type character_set_name: str
        """

        self._character_set_name = character_set_name

    @property
    def database_name(self):
        """Gets the database_name of this DBCluster.


        :return: The database_name of this DBCluster.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this DBCluster.


        :param database_name: The database_name of this DBCluster.
        :type database_name: str
        """

        self._database_name = database_name

    @property
    def db_cluster_identifier(self):
        """Gets the db_cluster_identifier of this DBCluster.


        :return: The db_cluster_identifier of this DBCluster.
        :rtype: str
        """
        return self._db_cluster_identifier

    @db_cluster_identifier.setter
    def db_cluster_identifier(self, db_cluster_identifier):
        """Sets the db_cluster_identifier of this DBCluster.


        :param db_cluster_identifier: The db_cluster_identifier of this DBCluster.
        :type db_cluster_identifier: str
        """

        self._db_cluster_identifier = db_cluster_identifier

    @property
    def db_cluster_parameter_group(self):
        """Gets the db_cluster_parameter_group of this DBCluster.


        :return: The db_cluster_parameter_group of this DBCluster.
        :rtype: str
        """
        return self._db_cluster_parameter_group

    @db_cluster_parameter_group.setter
    def db_cluster_parameter_group(self, db_cluster_parameter_group):
        """Sets the db_cluster_parameter_group of this DBCluster.


        :param db_cluster_parameter_group: The db_cluster_parameter_group of this DBCluster.
        :type db_cluster_parameter_group: str
        """

        self._db_cluster_parameter_group = db_cluster_parameter_group

    @property
    def db_subnet_group(self):
        """Gets the db_subnet_group of this DBCluster.


        :return: The db_subnet_group of this DBCluster.
        :rtype: str
        """
        return self._db_subnet_group

    @db_subnet_group.setter
    def db_subnet_group(self, db_subnet_group):
        """Sets the db_subnet_group of this DBCluster.


        :param db_subnet_group: The db_subnet_group of this DBCluster.
        :type db_subnet_group: str
        """

        self._db_subnet_group = db_subnet_group

    @property
    def status(self):
        """Gets the status of this DBCluster.


        :return: The status of this DBCluster.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DBCluster.


        :param status: The status of this DBCluster.
        :type status: str
        """

        self._status = status

    @property
    def percent_progress(self):
        """Gets the percent_progress of this DBCluster.


        :return: The percent_progress of this DBCluster.
        :rtype: str
        """
        return self._percent_progress

    @percent_progress.setter
    def percent_progress(self, percent_progress):
        """Sets the percent_progress of this DBCluster.


        :param percent_progress: The percent_progress of this DBCluster.
        :type percent_progress: str
        """

        self._percent_progress = percent_progress

    @property
    def earliest_restorable_time(self):
        """Gets the earliest_restorable_time of this DBCluster.


        :return: The earliest_restorable_time of this DBCluster.
        :rtype: datetime
        """
        return self._earliest_restorable_time

    @earliest_restorable_time.setter
    def earliest_restorable_time(self, earliest_restorable_time):
        """Sets the earliest_restorable_time of this DBCluster.


        :param earliest_restorable_time: The earliest_restorable_time of this DBCluster.
        :type earliest_restorable_time: datetime
        """

        self._earliest_restorable_time = earliest_restorable_time

    @property
    def endpoint(self):
        """Gets the endpoint of this DBCluster.


        :return: The endpoint of this DBCluster.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this DBCluster.


        :param endpoint: The endpoint of this DBCluster.
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def reader_endpoint(self):
        """Gets the reader_endpoint of this DBCluster.


        :return: The reader_endpoint of this DBCluster.
        :rtype: str
        """
        return self._reader_endpoint

    @reader_endpoint.setter
    def reader_endpoint(self, reader_endpoint):
        """Sets the reader_endpoint of this DBCluster.


        :param reader_endpoint: The reader_endpoint of this DBCluster.
        :type reader_endpoint: str
        """

        self._reader_endpoint = reader_endpoint

    @property
    def multi_az(self):
        """Gets the multi_az of this DBCluster.


        :return: The multi_az of this DBCluster.
        :rtype: bool
        """
        return self._multi_az

    @multi_az.setter
    def multi_az(self, multi_az):
        """Sets the multi_az of this DBCluster.


        :param multi_az: The multi_az of this DBCluster.
        :type multi_az: bool
        """

        self._multi_az = multi_az

    @property
    def engine(self):
        """Gets the engine of this DBCluster.


        :return: The engine of this DBCluster.
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this DBCluster.


        :param engine: The engine of this DBCluster.
        :type engine: str
        """

        self._engine = engine

    @property
    def engine_version(self):
        """Gets the engine_version of this DBCluster.


        :return: The engine_version of this DBCluster.
        :rtype: str
        """
        return self._engine_version

    @engine_version.setter
    def engine_version(self, engine_version):
        """Sets the engine_version of this DBCluster.


        :param engine_version: The engine_version of this DBCluster.
        :type engine_version: str
        """

        self._engine_version = engine_version

    @property
    def latest_restorable_time(self):
        """Gets the latest_restorable_time of this DBCluster.


        :return: The latest_restorable_time of this DBCluster.
        :rtype: datetime
        """
        return self._latest_restorable_time

    @latest_restorable_time.setter
    def latest_restorable_time(self, latest_restorable_time):
        """Sets the latest_restorable_time of this DBCluster.


        :param latest_restorable_time: The latest_restorable_time of this DBCluster.
        :type latest_restorable_time: datetime
        """

        self._latest_restorable_time = latest_restorable_time

    @property
    def port(self):
        """Gets the port of this DBCluster.


        :return: The port of this DBCluster.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this DBCluster.


        :param port: The port of this DBCluster.
        :type port: int
        """

        self._port = port

    @property
    def master_username(self):
        """Gets the master_username of this DBCluster.


        :return: The master_username of this DBCluster.
        :rtype: str
        """
        return self._master_username

    @master_username.setter
    def master_username(self, master_username):
        """Sets the master_username of this DBCluster.


        :param master_username: The master_username of this DBCluster.
        :type master_username: str
        """

        self._master_username = master_username

    @property
    def db_cluster_option_group_memberships(self):
        """Gets the db_cluster_option_group_memberships of this DBCluster.


        :return: The db_cluster_option_group_memberships of this DBCluster.
        :rtype: List
        """
        return self._db_cluster_option_group_memberships

    @db_cluster_option_group_memberships.setter
    def db_cluster_option_group_memberships(self, db_cluster_option_group_memberships):
        """Sets the db_cluster_option_group_memberships of this DBCluster.


        :param db_cluster_option_group_memberships: The db_cluster_option_group_memberships of this DBCluster.
        :type db_cluster_option_group_memberships: List
        """

        self._db_cluster_option_group_memberships = db_cluster_option_group_memberships

    @property
    def preferred_backup_window(self):
        """Gets the preferred_backup_window of this DBCluster.


        :return: The preferred_backup_window of this DBCluster.
        :rtype: str
        """
        return self._preferred_backup_window

    @preferred_backup_window.setter
    def preferred_backup_window(self, preferred_backup_window):
        """Sets the preferred_backup_window of this DBCluster.


        :param preferred_backup_window: The preferred_backup_window of this DBCluster.
        :type preferred_backup_window: str
        """

        self._preferred_backup_window = preferred_backup_window

    @property
    def preferred_maintenance_window(self):
        """Gets the preferred_maintenance_window of this DBCluster.


        :return: The preferred_maintenance_window of this DBCluster.
        :rtype: str
        """
        return self._preferred_maintenance_window

    @preferred_maintenance_window.setter
    def preferred_maintenance_window(self, preferred_maintenance_window):
        """Sets the preferred_maintenance_window of this DBCluster.


        :param preferred_maintenance_window: The preferred_maintenance_window of this DBCluster.
        :type preferred_maintenance_window: str
        """

        self._preferred_maintenance_window = preferred_maintenance_window

    @property
    def replication_source_identifier(self):
        """Gets the replication_source_identifier of this DBCluster.


        :return: The replication_source_identifier of this DBCluster.
        :rtype: str
        """
        return self._replication_source_identifier

    @replication_source_identifier.setter
    def replication_source_identifier(self, replication_source_identifier):
        """Sets the replication_source_identifier of this DBCluster.


        :param replication_source_identifier: The replication_source_identifier of this DBCluster.
        :type replication_source_identifier: str
        """

        self._replication_source_identifier = replication_source_identifier

    @property
    def read_replica_identifiers(self):
        """Gets the read_replica_identifiers of this DBCluster.


        :return: The read_replica_identifiers of this DBCluster.
        :rtype: List
        """
        return self._read_replica_identifiers

    @read_replica_identifiers.setter
    def read_replica_identifiers(self, read_replica_identifiers):
        """Sets the read_replica_identifiers of this DBCluster.


        :param read_replica_identifiers: The read_replica_identifiers of this DBCluster.
        :type read_replica_identifiers: List
        """

        self._read_replica_identifiers = read_replica_identifiers

    @property
    def db_cluster_members(self):
        """Gets the db_cluster_members of this DBCluster.


        :return: The db_cluster_members of this DBCluster.
        :rtype: List
        """
        return self._db_cluster_members

    @db_cluster_members.setter
    def db_cluster_members(self, db_cluster_members):
        """Sets the db_cluster_members of this DBCluster.


        :param db_cluster_members: The db_cluster_members of this DBCluster.
        :type db_cluster_members: List
        """

        self._db_cluster_members = db_cluster_members

    @property
    def vpc_security_groups(self):
        """Gets the vpc_security_groups of this DBCluster.


        :return: The vpc_security_groups of this DBCluster.
        :rtype: List
        """
        return self._vpc_security_groups

    @vpc_security_groups.setter
    def vpc_security_groups(self, vpc_security_groups):
        """Sets the vpc_security_groups of this DBCluster.


        :param vpc_security_groups: The vpc_security_groups of this DBCluster.
        :type vpc_security_groups: List
        """

        self._vpc_security_groups = vpc_security_groups

    @property
    def hosted_zone_id(self):
        """Gets the hosted_zone_id of this DBCluster.


        :return: The hosted_zone_id of this DBCluster.
        :rtype: str
        """
        return self._hosted_zone_id

    @hosted_zone_id.setter
    def hosted_zone_id(self, hosted_zone_id):
        """Sets the hosted_zone_id of this DBCluster.


        :param hosted_zone_id: The hosted_zone_id of this DBCluster.
        :type hosted_zone_id: str
        """

        self._hosted_zone_id = hosted_zone_id

    @property
    def storage_encrypted(self):
        """Gets the storage_encrypted of this DBCluster.


        :return: The storage_encrypted of this DBCluster.
        :rtype: bool
        """
        return self._storage_encrypted

    @storage_encrypted.setter
    def storage_encrypted(self, storage_encrypted):
        """Sets the storage_encrypted of this DBCluster.


        :param storage_encrypted: The storage_encrypted of this DBCluster.
        :type storage_encrypted: bool
        """

        self._storage_encrypted = storage_encrypted

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this DBCluster.


        :return: The kms_key_id of this DBCluster.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this DBCluster.


        :param kms_key_id: The kms_key_id of this DBCluster.
        :type kms_key_id: str
        """

        self._kms_key_id = kms_key_id

    @property
    def db_cluster_resource_id(self):
        """Gets the db_cluster_resource_id of this DBCluster.


        :return: The db_cluster_resource_id of this DBCluster.
        :rtype: str
        """
        return self._db_cluster_resource_id

    @db_cluster_resource_id.setter
    def db_cluster_resource_id(self, db_cluster_resource_id):
        """Sets the db_cluster_resource_id of this DBCluster.


        :param db_cluster_resource_id: The db_cluster_resource_id of this DBCluster.
        :type db_cluster_resource_id: str
        """

        self._db_cluster_resource_id = db_cluster_resource_id

    @property
    def db_cluster_arn(self):
        """Gets the db_cluster_arn of this DBCluster.


        :return: The db_cluster_arn of this DBCluster.
        :rtype: str
        """
        return self._db_cluster_arn

    @db_cluster_arn.setter
    def db_cluster_arn(self, db_cluster_arn):
        """Sets the db_cluster_arn of this DBCluster.


        :param db_cluster_arn: The db_cluster_arn of this DBCluster.
        :type db_cluster_arn: str
        """

        self._db_cluster_arn = db_cluster_arn

    @property
    def associated_roles(self):
        """Gets the associated_roles of this DBCluster.


        :return: The associated_roles of this DBCluster.
        :rtype: List
        """
        return self._associated_roles

    @associated_roles.setter
    def associated_roles(self, associated_roles):
        """Sets the associated_roles of this DBCluster.


        :param associated_roles: The associated_roles of this DBCluster.
        :type associated_roles: List
        """

        self._associated_roles = associated_roles

    @property
    def iam_database_authentication_enabled(self):
        """Gets the iam_database_authentication_enabled of this DBCluster.


        :return: The iam_database_authentication_enabled of this DBCluster.
        :rtype: bool
        """
        return self._iam_database_authentication_enabled

    @iam_database_authentication_enabled.setter
    def iam_database_authentication_enabled(self, iam_database_authentication_enabled):
        """Sets the iam_database_authentication_enabled of this DBCluster.


        :param iam_database_authentication_enabled: The iam_database_authentication_enabled of this DBCluster.
        :type iam_database_authentication_enabled: bool
        """

        self._iam_database_authentication_enabled = iam_database_authentication_enabled

    @property
    def clone_group_id(self):
        """Gets the clone_group_id of this DBCluster.


        :return: The clone_group_id of this DBCluster.
        :rtype: str
        """
        return self._clone_group_id

    @clone_group_id.setter
    def clone_group_id(self, clone_group_id):
        """Sets the clone_group_id of this DBCluster.


        :param clone_group_id: The clone_group_id of this DBCluster.
        :type clone_group_id: str
        """

        self._clone_group_id = clone_group_id

    @property
    def cluster_create_time(self):
        """Gets the cluster_create_time of this DBCluster.


        :return: The cluster_create_time of this DBCluster.
        :rtype: datetime
        """
        return self._cluster_create_time

    @cluster_create_time.setter
    def cluster_create_time(self, cluster_create_time):
        """Sets the cluster_create_time of this DBCluster.


        :param cluster_create_time: The cluster_create_time of this DBCluster.
        :type cluster_create_time: datetime
        """

        self._cluster_create_time = cluster_create_time

    @property
    def copy_tags_to_snapshot(self):
        """Gets the copy_tags_to_snapshot of this DBCluster.


        :return: The copy_tags_to_snapshot of this DBCluster.
        :rtype: bool
        """
        return self._copy_tags_to_snapshot

    @copy_tags_to_snapshot.setter
    def copy_tags_to_snapshot(self, copy_tags_to_snapshot):
        """Sets the copy_tags_to_snapshot of this DBCluster.


        :param copy_tags_to_snapshot: The copy_tags_to_snapshot of this DBCluster.
        :type copy_tags_to_snapshot: bool
        """

        self._copy_tags_to_snapshot = copy_tags_to_snapshot

    @property
    def enabled_cloudwatch_logs_exports(self):
        """Gets the enabled_cloudwatch_logs_exports of this DBCluster.


        :return: The enabled_cloudwatch_logs_exports of this DBCluster.
        :rtype: List
        """
        return self._enabled_cloudwatch_logs_exports

    @enabled_cloudwatch_logs_exports.setter
    def enabled_cloudwatch_logs_exports(self, enabled_cloudwatch_logs_exports):
        """Sets the enabled_cloudwatch_logs_exports of this DBCluster.


        :param enabled_cloudwatch_logs_exports: The enabled_cloudwatch_logs_exports of this DBCluster.
        :type enabled_cloudwatch_logs_exports: List
        """

        self._enabled_cloudwatch_logs_exports = enabled_cloudwatch_logs_exports

    @property
    def pending_modified_values(self):
        """Gets the pending_modified_values of this DBCluster.


        :return: The pending_modified_values of this DBCluster.
        :rtype: DBClusterPendingModifiedValues
        """
        return self._pending_modified_values

    @pending_modified_values.setter
    def pending_modified_values(self, pending_modified_values):
        """Sets the pending_modified_values of this DBCluster.


        :param pending_modified_values: The pending_modified_values of this DBCluster.
        :type pending_modified_values: DBClusterPendingModifiedValues
        """

        self._pending_modified_values = pending_modified_values

    @property
    def deletion_protection(self):
        """Gets the deletion_protection of this DBCluster.


        :return: The deletion_protection of this DBCluster.
        :rtype: bool
        """
        return self._deletion_protection

    @deletion_protection.setter
    def deletion_protection(self, deletion_protection):
        """Sets the deletion_protection of this DBCluster.


        :param deletion_protection: The deletion_protection of this DBCluster.
        :type deletion_protection: bool
        """

        self._deletion_protection = deletion_protection

    @property
    def cross_account_clone(self):
        """Gets the cross_account_clone of this DBCluster.


        :return: The cross_account_clone of this DBCluster.
        :rtype: bool
        """
        return self._cross_account_clone

    @cross_account_clone.setter
    def cross_account_clone(self, cross_account_clone):
        """Sets the cross_account_clone of this DBCluster.


        :param cross_account_clone: The cross_account_clone of this DBCluster.
        :type cross_account_clone: bool
        """

        self._cross_account_clone = cross_account_clone

    @property
    def automatic_restart_time(self):
        """Gets the automatic_restart_time of this DBCluster.


        :return: The automatic_restart_time of this DBCluster.
        :rtype: datetime
        """
        return self._automatic_restart_time

    @automatic_restart_time.setter
    def automatic_restart_time(self, automatic_restart_time):
        """Sets the automatic_restart_time of this DBCluster.


        :param automatic_restart_time: The automatic_restart_time of this DBCluster.
        :type automatic_restart_time: datetime
        """

        self._automatic_restart_time = automatic_restart_time

    @property
    def serverless_v2_scaling_configuration(self):
        """Gets the serverless_v2_scaling_configuration of this DBCluster.


        :return: The serverless_v2_scaling_configuration of this DBCluster.
        :rtype: ServerlessV2ScalingConfigurationInfo
        """
        return self._serverless_v2_scaling_configuration

    @serverless_v2_scaling_configuration.setter
    def serverless_v2_scaling_configuration(self, serverless_v2_scaling_configuration):
        """Sets the serverless_v2_scaling_configuration of this DBCluster.


        :param serverless_v2_scaling_configuration: The serverless_v2_scaling_configuration of this DBCluster.
        :type serverless_v2_scaling_configuration: ServerlessV2ScalingConfigurationInfo
        """

        self._serverless_v2_scaling_configuration = serverless_v2_scaling_configuration

    @property
    def global_cluster_identifier(self):
        """Gets the global_cluster_identifier of this DBCluster.


        :return: The global_cluster_identifier of this DBCluster.
        :rtype: str
        """
        return self._global_cluster_identifier

    @global_cluster_identifier.setter
    def global_cluster_identifier(self, global_cluster_identifier):
        """Sets the global_cluster_identifier of this DBCluster.


        :param global_cluster_identifier: The global_cluster_identifier of this DBCluster.
        :type global_cluster_identifier: str
        """

        self._global_cluster_identifier = global_cluster_identifier
