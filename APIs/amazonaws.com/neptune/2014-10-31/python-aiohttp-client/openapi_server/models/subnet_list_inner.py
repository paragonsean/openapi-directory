# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subnet_subnet_availability_zone import SubnetSubnetAvailabilityZone
from openapi_server import util


class SubnetListInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subnet_identifier: str=None, subnet_availability_zone: SubnetSubnetAvailabilityZone=None, subnet_status: str=None):
        """SubnetListInner - a model defined in OpenAPI

        :param subnet_identifier: The subnet_identifier of this SubnetListInner.
        :param subnet_availability_zone: The subnet_availability_zone of this SubnetListInner.
        :param subnet_status: The subnet_status of this SubnetListInner.
        """
        self.openapi_types = {
            'subnet_identifier': str,
            'subnet_availability_zone': SubnetSubnetAvailabilityZone,
            'subnet_status': str
        }

        self.attribute_map = {
            'subnet_identifier': 'SubnetIdentifier',
            'subnet_availability_zone': 'SubnetAvailabilityZone',
            'subnet_status': 'SubnetStatus'
        }

        self._subnet_identifier = subnet_identifier
        self._subnet_availability_zone = subnet_availability_zone
        self._subnet_status = subnet_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubnetListInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubnetList_inner of this SubnetListInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subnet_identifier(self):
        """Gets the subnet_identifier of this SubnetListInner.


        :return: The subnet_identifier of this SubnetListInner.
        :rtype: str
        """
        return self._subnet_identifier

    @subnet_identifier.setter
    def subnet_identifier(self, subnet_identifier):
        """Sets the subnet_identifier of this SubnetListInner.


        :param subnet_identifier: The subnet_identifier of this SubnetListInner.
        :type subnet_identifier: str
        """

        self._subnet_identifier = subnet_identifier

    @property
    def subnet_availability_zone(self):
        """Gets the subnet_availability_zone of this SubnetListInner.


        :return: The subnet_availability_zone of this SubnetListInner.
        :rtype: SubnetSubnetAvailabilityZone
        """
        return self._subnet_availability_zone

    @subnet_availability_zone.setter
    def subnet_availability_zone(self, subnet_availability_zone):
        """Sets the subnet_availability_zone of this SubnetListInner.


        :param subnet_availability_zone: The subnet_availability_zone of this SubnetListInner.
        :type subnet_availability_zone: SubnetSubnetAvailabilityZone
        """

        self._subnet_availability_zone = subnet_availability_zone

    @property
    def subnet_status(self):
        """Gets the subnet_status of this SubnetListInner.


        :return: The subnet_status of this SubnetListInner.
        :rtype: str
        """
        return self._subnet_status

    @subnet_status.setter
    def subnet_status(self, subnet_status):
        """Sets the subnet_status of this SubnetListInner.


        :param subnet_status: The subnet_status of this SubnetListInner.
        :type subnet_status: str
        """

        self._subnet_status = subnet_status
