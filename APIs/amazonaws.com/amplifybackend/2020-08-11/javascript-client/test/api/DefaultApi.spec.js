/**
 * AmplifyBackend
 * AWS Amplify Admin API
 *
 * The version of the OpenAPI document: 2020-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmplifyBackend);
  }
}(this, function(expect, AmplifyBackend) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmplifyBackend.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('cloneBackend', function() {
      it('should call cloneBackend successfully', function(done) {
        //uncomment below and update the code to test cloneBackend
        //instance.cloneBackend(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createBackend', function() {
      it('should call createBackend successfully', function(done) {
        //uncomment below and update the code to test createBackend
        //instance.createBackend(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createBackendAPI', function() {
      it('should call createBackendAPI successfully', function(done) {
        //uncomment below and update the code to test createBackendAPI
        //instance.createBackendAPI(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createBackendAuth', function() {
      it('should call createBackendAuth successfully', function(done) {
        //uncomment below and update the code to test createBackendAuth
        //instance.createBackendAuth(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createBackendConfig', function() {
      it('should call createBackendConfig successfully', function(done) {
        //uncomment below and update the code to test createBackendConfig
        //instance.createBackendConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createBackendStorage', function() {
      it('should call createBackendStorage successfully', function(done) {
        //uncomment below and update the code to test createBackendStorage
        //instance.createBackendStorage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createToken', function() {
      it('should call createToken successfully', function(done) {
        //uncomment below and update the code to test createToken
        //instance.createToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBackend', function() {
      it('should call deleteBackend successfully', function(done) {
        //uncomment below and update the code to test deleteBackend
        //instance.deleteBackend(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBackendAPI', function() {
      it('should call deleteBackendAPI successfully', function(done) {
        //uncomment below and update the code to test deleteBackendAPI
        //instance.deleteBackendAPI(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBackendAuth', function() {
      it('should call deleteBackendAuth successfully', function(done) {
        //uncomment below and update the code to test deleteBackendAuth
        //instance.deleteBackendAuth(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBackendStorage', function() {
      it('should call deleteBackendStorage successfully', function(done) {
        //uncomment below and update the code to test deleteBackendStorage
        //instance.deleteBackendStorage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteToken', function() {
      it('should call deleteToken successfully', function(done) {
        //uncomment below and update the code to test deleteToken
        //instance.deleteToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generateBackendAPIModels', function() {
      it('should call generateBackendAPIModels successfully', function(done) {
        //uncomment below and update the code to test generateBackendAPIModels
        //instance.generateBackendAPIModels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBackend', function() {
      it('should call getBackend successfully', function(done) {
        //uncomment below and update the code to test getBackend
        //instance.getBackend(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBackendAPI', function() {
      it('should call getBackendAPI successfully', function(done) {
        //uncomment below and update the code to test getBackendAPI
        //instance.getBackendAPI(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBackendAPIModels', function() {
      it('should call getBackendAPIModels successfully', function(done) {
        //uncomment below and update the code to test getBackendAPIModels
        //instance.getBackendAPIModels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBackendAuth', function() {
      it('should call getBackendAuth successfully', function(done) {
        //uncomment below and update the code to test getBackendAuth
        //instance.getBackendAuth(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBackendJob', function() {
      it('should call getBackendJob successfully', function(done) {
        //uncomment below and update the code to test getBackendJob
        //instance.getBackendJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBackendStorage', function() {
      it('should call getBackendStorage successfully', function(done) {
        //uncomment below and update the code to test getBackendStorage
        //instance.getBackendStorage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getToken', function() {
      it('should call getToken successfully', function(done) {
        //uncomment below and update the code to test getToken
        //instance.getToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importBackendAuth', function() {
      it('should call importBackendAuth successfully', function(done) {
        //uncomment below and update the code to test importBackendAuth
        //instance.importBackendAuth(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importBackendStorage', function() {
      it('should call importBackendStorage successfully', function(done) {
        //uncomment below and update the code to test importBackendStorage
        //instance.importBackendStorage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBackendJobs', function() {
      it('should call listBackendJobs successfully', function(done) {
        //uncomment below and update the code to test listBackendJobs
        //instance.listBackendJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listS3Buckets', function() {
      it('should call listS3Buckets successfully', function(done) {
        //uncomment below and update the code to test listS3Buckets
        //instance.listS3Buckets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeAllBackends', function() {
      it('should call removeAllBackends successfully', function(done) {
        //uncomment below and update the code to test removeAllBackends
        //instance.removeAllBackends(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeBackendConfig', function() {
      it('should call removeBackendConfig successfully', function(done) {
        //uncomment below and update the code to test removeBackendConfig
        //instance.removeBackendConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateBackendAPI', function() {
      it('should call updateBackendAPI successfully', function(done) {
        //uncomment below and update the code to test updateBackendAPI
        //instance.updateBackendAPI(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateBackendAuth', function() {
      it('should call updateBackendAuth successfully', function(done) {
        //uncomment below and update the code to test updateBackendAuth
        //instance.updateBackendAuth(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateBackendConfig', function() {
      it('should call updateBackendConfig successfully', function(done) {
        //uncomment below and update the code to test updateBackendConfig
        //instance.updateBackendConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateBackendJob', function() {
      it('should call updateBackendJob successfully', function(done) {
        //uncomment below and update the code to test updateBackendJob
        //instance.updateBackendJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateBackendStorage', function() {
      it('should call updateBackendStorage successfully', function(done) {
        //uncomment below and update the code to test updateBackendStorage
        //instance.updateBackendStorage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
