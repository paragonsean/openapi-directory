/**
 * AmplifyBackend
 * AWS Amplify Admin API
 *
 * The version of the OpenAPI document: 2020-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloneBackendRequest from '../model/CloneBackendRequest';
import CloneBackendResponse from '../model/CloneBackendResponse';
import CreateBackendAPIRequest from '../model/CreateBackendAPIRequest';
import CreateBackendAPIResponse from '../model/CreateBackendAPIResponse';
import CreateBackendAuthRequest from '../model/CreateBackendAuthRequest';
import CreateBackendAuthResponse from '../model/CreateBackendAuthResponse';
import CreateBackendConfigRequest from '../model/CreateBackendConfigRequest';
import CreateBackendConfigResponse from '../model/CreateBackendConfigResponse';
import CreateBackendRequest from '../model/CreateBackendRequest';
import CreateBackendResponse from '../model/CreateBackendResponse';
import CreateBackendStorageRequest from '../model/CreateBackendStorageRequest';
import CreateBackendStorageResponse from '../model/CreateBackendStorageResponse';
import CreateTokenResponse from '../model/CreateTokenResponse';
import DeleteBackendAPIRequest from '../model/DeleteBackendAPIRequest';
import DeleteBackendAPIResponse from '../model/DeleteBackendAPIResponse';
import DeleteBackendAuthRequest from '../model/DeleteBackendAuthRequest';
import DeleteBackendAuthResponse from '../model/DeleteBackendAuthResponse';
import DeleteBackendResponse from '../model/DeleteBackendResponse';
import DeleteBackendStorageRequest from '../model/DeleteBackendStorageRequest';
import DeleteBackendStorageResponse from '../model/DeleteBackendStorageResponse';
import DeleteTokenResponse from '../model/DeleteTokenResponse';
import GenerateBackendAPIModelsResponse from '../model/GenerateBackendAPIModelsResponse';
import GetBackendAPIModelsResponse from '../model/GetBackendAPIModelsResponse';
import GetBackendAPIResponse from '../model/GetBackendAPIResponse';
import GetBackendAuthResponse from '../model/GetBackendAuthResponse';
import GetBackendJobResponse from '../model/GetBackendJobResponse';
import GetBackendRequest from '../model/GetBackendRequest';
import GetBackendResponse from '../model/GetBackendResponse';
import GetBackendStorageRequest from '../model/GetBackendStorageRequest';
import GetBackendStorageResponse from '../model/GetBackendStorageResponse';
import GetTokenResponse from '../model/GetTokenResponse';
import ImportBackendAuthRequest from '../model/ImportBackendAuthRequest';
import ImportBackendAuthResponse from '../model/ImportBackendAuthResponse';
import ImportBackendStorageRequest from '../model/ImportBackendStorageRequest';
import ImportBackendStorageResponse from '../model/ImportBackendStorageResponse';
import ListBackendJobsRequest from '../model/ListBackendJobsRequest';
import ListBackendJobsResponse from '../model/ListBackendJobsResponse';
import ListS3BucketsRequest from '../model/ListS3BucketsRequest';
import ListS3BucketsResponse from '../model/ListS3BucketsResponse';
import RemoveAllBackendsRequest from '../model/RemoveAllBackendsRequest';
import RemoveAllBackendsResponse from '../model/RemoveAllBackendsResponse';
import RemoveBackendConfigResponse from '../model/RemoveBackendConfigResponse';
import UpdateBackendAPIResponse from '../model/UpdateBackendAPIResponse';
import UpdateBackendAuthRequest from '../model/UpdateBackendAuthRequest';
import UpdateBackendAuthResponse from '../model/UpdateBackendAuthResponse';
import UpdateBackendConfigRequest from '../model/UpdateBackendConfigRequest';
import UpdateBackendConfigResponse from '../model/UpdateBackendConfigResponse';
import UpdateBackendJobRequest from '../model/UpdateBackendJobRequest';
import UpdateBackendJobResponse from '../model/UpdateBackendJobResponse';
import UpdateBackendStorageRequest from '../model/UpdateBackendStorageRequest';
import UpdateBackendStorageResponse from '../model/UpdateBackendStorageResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2020-08-11
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cloneBackend operation.
     * @callback module:api/DefaultApi~cloneBackendCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloneBackendResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation clones an existing backend.
     * @param {String} appId The app ID.
     * @param {String} backendEnvironmentName The name of the backend environment.
     * @param {module:model/CloneBackendRequest} cloneBackendRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~cloneBackendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloneBackendResponse}
     */
    cloneBackend(appId, backendEnvironmentName, cloneBackendRequest, opts, callback) {
      opts = opts || {};
      let postBody = cloneBackendRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling cloneBackend");
      }
      // verify the required parameter 'backendEnvironmentName' is set
      if (backendEnvironmentName === undefined || backendEnvironmentName === null) {
        throw new Error("Missing the required parameter 'backendEnvironmentName' when calling cloneBackend");
      }
      // verify the required parameter 'cloneBackendRequest' is set
      if (cloneBackendRequest === undefined || cloneBackendRequest === null) {
        throw new Error("Missing the required parameter 'cloneBackendRequest' when calling cloneBackend");
      }

      let pathParams = {
        'appId': appId,
        'backendEnvironmentName': backendEnvironmentName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CloneBackendResponse;
      return this.apiClient.callApi(
        '/backend/{appId}/environments/{backendEnvironmentName}/clone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBackend operation.
     * @callback module:api/DefaultApi~createBackendCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateBackendResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation creates a backend for an Amplify app. Backends are automatically created at the time of app creation.
     * @param {module:model/CreateBackendRequest} createBackendRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createBackendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateBackendResponse}
     */
    createBackend(createBackendRequest, opts, callback) {
      opts = opts || {};
      let postBody = createBackendRequest;
      // verify the required parameter 'createBackendRequest' is set
      if (createBackendRequest === undefined || createBackendRequest === null) {
        throw new Error("Missing the required parameter 'createBackendRequest' when calling createBackend");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateBackendResponse;
      return this.apiClient.callApi(
        '/backend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBackendAPI operation.
     * @callback module:api/DefaultApi~createBackendAPICallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateBackendAPIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new backend API resource.
     * @param {String} appId The app ID.
     * @param {module:model/CreateBackendAPIRequest} createBackendAPIRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createBackendAPICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateBackendAPIResponse}
     */
    createBackendAPI(appId, createBackendAPIRequest, opts, callback) {
      opts = opts || {};
      let postBody = createBackendAPIRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createBackendAPI");
      }
      // verify the required parameter 'createBackendAPIRequest' is set
      if (createBackendAPIRequest === undefined || createBackendAPIRequest === null) {
        throw new Error("Missing the required parameter 'createBackendAPIRequest' when calling createBackendAPI");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateBackendAPIResponse;
      return this.apiClient.callApi(
        '/backend/{appId}/api', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBackendAuth operation.
     * @callback module:api/DefaultApi~createBackendAuthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateBackendAuthResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new backend authentication resource.
     * @param {String} appId The app ID.
     * @param {module:model/CreateBackendAuthRequest} createBackendAuthRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createBackendAuthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateBackendAuthResponse}
     */
    createBackendAuth(appId, createBackendAuthRequest, opts, callback) {
      opts = opts || {};
      let postBody = createBackendAuthRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createBackendAuth");
      }
      // verify the required parameter 'createBackendAuthRequest' is set
      if (createBackendAuthRequest === undefined || createBackendAuthRequest === null) {
        throw new Error("Missing the required parameter 'createBackendAuthRequest' when calling createBackendAuth");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateBackendAuthResponse;
      return this.apiClient.callApi(
        '/backend/{appId}/auth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBackendConfig operation.
     * @callback module:api/DefaultApi~createBackendConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateBackendConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a config object for a backend.
     * @param {String} appId The app ID.
     * @param {module:model/CreateBackendConfigRequest} createBackendConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createBackendConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateBackendConfigResponse}
     */
    createBackendConfig(appId, createBackendConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = createBackendConfigRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createBackendConfig");
      }
      // verify the required parameter 'createBackendConfigRequest' is set
      if (createBackendConfigRequest === undefined || createBackendConfigRequest === null) {
        throw new Error("Missing the required parameter 'createBackendConfigRequest' when calling createBackendConfig");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateBackendConfigResponse;
      return this.apiClient.callApi(
        '/backend/{appId}/config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBackendStorage operation.
     * @callback module:api/DefaultApi~createBackendStorageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateBackendStorageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a backend storage resource.
     * @param {String} appId The app ID.
     * @param {module:model/CreateBackendStorageRequest} createBackendStorageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createBackendStorageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateBackendStorageResponse}
     */
    createBackendStorage(appId, createBackendStorageRequest, opts, callback) {
      opts = opts || {};
      let postBody = createBackendStorageRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createBackendStorage");
      }
      // verify the required parameter 'createBackendStorageRequest' is set
      if (createBackendStorageRequest === undefined || createBackendStorageRequest === null) {
        throw new Error("Missing the required parameter 'createBackendStorageRequest' when calling createBackendStorage");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateBackendStorageResponse;
      return this.apiClient.callApi(
        '/backend/{appId}/storage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createToken operation.
     * @callback module:api/DefaultApi~createTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates a one-time challenge code to authenticate a user into your Amplify Admin UI.
     * @param {String} appId The app ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTokenResponse}
     */
    createToken(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createToken");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateTokenResponse;
      return this.apiClient.callApi(
        '/backend/{appId}/challenge', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBackend operation.
     * @callback module:api/DefaultApi~deleteBackendCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteBackendResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an existing environment from your Amplify project.
     * @param {String} appId The app ID.
     * @param {String} backendEnvironmentName The name of the backend environment.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteBackendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteBackendResponse}
     */
    deleteBackend(appId, backendEnvironmentName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteBackend");
      }
      // verify the required parameter 'backendEnvironmentName' is set
      if (backendEnvironmentName === undefined || backendEnvironmentName === null) {
        throw new Error("Missing the required parameter 'backendEnvironmentName' when calling deleteBackend");
      }

      let pathParams = {
        'appId': appId,
        'backendEnvironmentName': backendEnvironmentName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteBackendResponse;
      return this.apiClient.callApi(
        '/backend/{appId}/environments/{backendEnvironmentName}/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBackendAPI operation.
     * @callback module:api/DefaultApi~deleteBackendAPICallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteBackendAPIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing backend API resource.
     * @param {String} appId The app ID.
     * @param {String} backendEnvironmentName The name of the backend environment.
     * @param {module:model/DeleteBackendAPIRequest} deleteBackendAPIRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteBackendAPICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteBackendAPIResponse}
     */
    deleteBackendAPI(appId, backendEnvironmentName, deleteBackendAPIRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteBackendAPIRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteBackendAPI");
      }
      // verify the required parameter 'backendEnvironmentName' is set
      if (backendEnvironmentName === undefined || backendEnvironmentName === null) {
        throw new Error("Missing the required parameter 'backendEnvironmentName' when calling deleteBackendAPI");
      }
      // verify the required parameter 'deleteBackendAPIRequest' is set
      if (deleteBackendAPIRequest === undefined || deleteBackendAPIRequest === null) {
        throw new Error("Missing the required parameter 'deleteBackendAPIRequest' when calling deleteBackendAPI");
      }

      let pathParams = {
        'appId': appId,
        'backendEnvironmentName': backendEnvironmentName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteBackendAPIResponse;
      return this.apiClient.callApi(
        '/backend/{appId}/api/{backendEnvironmentName}/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBackendAuth operation.
     * @callback module:api/DefaultApi~deleteBackendAuthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteBackendAuthResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing backend authentication resource.
     * @param {String} appId The app ID.
     * @param {String} backendEnvironmentName The name of the backend environment.
     * @param {module:model/DeleteBackendAuthRequest} deleteBackendAuthRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteBackendAuthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteBackendAuthResponse}
     */
    deleteBackendAuth(appId, backendEnvironmentName, deleteBackendAuthRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteBackendAuthRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteBackendAuth");
      }
      // verify the required parameter 'backendEnvironmentName' is set
      if (backendEnvironmentName === undefined || backendEnvironmentName === null) {
        throw new Error("Missing the required parameter 'backendEnvironmentName' when calling deleteBackendAuth");
      }
      // verify the required parameter 'deleteBackendAuthRequest' is set
      if (deleteBackendAuthRequest === undefined || deleteBackendAuthRequest === null) {
        throw new Error("Missing the required parameter 'deleteBackendAuthRequest' when calling deleteBackendAuth");
      }

      let pathParams = {
        'appId': appId,
        'backendEnvironmentName': backendEnvironmentName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteBackendAuthResponse;
      return this.apiClient.callApi(
        '/backend/{appId}/auth/{backendEnvironmentName}/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBackendStorage operation.
     * @callback module:api/DefaultApi~deleteBackendStorageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteBackendStorageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the specified backend storage resource.
     * @param {String} appId The app ID.
     * @param {String} backendEnvironmentName The name of the backend environment.
     * @param {module:model/DeleteBackendStorageRequest} deleteBackendStorageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteBackendStorageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteBackendStorageResponse}
     */
    deleteBackendStorage(appId, backendEnvironmentName, deleteBackendStorageRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteBackendStorageRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteBackendStorage");
      }
      // verify the required parameter 'backendEnvironmentName' is set
      if (backendEnvironmentName === undefined || backendEnvironmentName === null) {
        throw new Error("Missing the required parameter 'backendEnvironmentName' when calling deleteBackendStorage");
      }
      // verify the required parameter 'deleteBackendStorageRequest' is set
      if (deleteBackendStorageRequest === undefined || deleteBackendStorageRequest === null) {
        throw new Error("Missing the required parameter 'deleteBackendStorageRequest' when calling deleteBackendStorage");
      }

      let pathParams = {
        'appId': appId,
        'backendEnvironmentName': backendEnvironmentName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteBackendStorageResponse;
      return this.apiClient.callApi(
        '/backend/{appId}/storage/{backendEnvironmentName}/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteToken operation.
     * @callback module:api/DefaultApi~deleteTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the challenge token based on the given appId and sessionId.
     * @param {String} appId The app ID.
     * @param {String} sessionId The session ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteTokenResponse}
     */
    deleteToken(appId, sessionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteToken");
      }
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling deleteToken");
      }

      let pathParams = {
        'appId': appId,
        'sessionId': sessionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteTokenResponse;
      return this.apiClient.callApi(
        '/backend/{appId}/challenge/{sessionId}/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateBackendAPIModels operation.
     * @callback module:api/DefaultApi~generateBackendAPIModelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenerateBackendAPIModelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates a model schema for an existing backend API resource.
     * @param {String} appId The app ID.
     * @param {String} backendEnvironmentName The name of the backend environment.
     * @param {module:model/DeleteBackendAuthRequest} deleteBackendAuthRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~generateBackendAPIModelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenerateBackendAPIModelsResponse}
     */
    generateBackendAPIModels(appId, backendEnvironmentName, deleteBackendAuthRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteBackendAuthRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling generateBackendAPIModels");
      }
      // verify the required parameter 'backendEnvironmentName' is set
      if (backendEnvironmentName === undefined || backendEnvironmentName === null) {
        throw new Error("Missing the required parameter 'backendEnvironmentName' when calling generateBackendAPIModels");
      }
      // verify the required parameter 'deleteBackendAuthRequest' is set
      if (deleteBackendAuthRequest === undefined || deleteBackendAuthRequest === null) {
        throw new Error("Missing the required parameter 'deleteBackendAuthRequest' when calling generateBackendAPIModels");
      }

      let pathParams = {
        'appId': appId,
        'backendEnvironmentName': backendEnvironmentName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenerateBackendAPIModelsResponse;
      return this.apiClient.callApi(
        '/backend/{appId}/api/{backendEnvironmentName}/generateModels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBackend operation.
     * @callback module:api/DefaultApi~getBackendCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBackendResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides project-level details for your Amplify UI project.
     * @param {String} appId The app ID.
     * @param {module:model/GetBackendRequest} getBackendRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getBackendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBackendResponse}
     */
    getBackend(appId, getBackendRequest, opts, callback) {
      opts = opts || {};
      let postBody = getBackendRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getBackend");
      }
      // verify the required parameter 'getBackendRequest' is set
      if (getBackendRequest === undefined || getBackendRequest === null) {
        throw new Error("Missing the required parameter 'getBackendRequest' when calling getBackend");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetBackendResponse;
      return this.apiClient.callApi(
        '/backend/{appId}/details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBackendAPI operation.
     * @callback module:api/DefaultApi~getBackendAPICallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBackendAPIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the details for a backend API.
     * @param {String} appId The app ID.
     * @param {String} backendEnvironmentName The name of the backend environment.
     * @param {module:model/DeleteBackendAPIRequest} deleteBackendAPIRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getBackendAPICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBackendAPIResponse}
     */
    getBackendAPI(appId, backendEnvironmentName, deleteBackendAPIRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteBackendAPIRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getBackendAPI");
      }
      // verify the required parameter 'backendEnvironmentName' is set
      if (backendEnvironmentName === undefined || backendEnvironmentName === null) {
        throw new Error("Missing the required parameter 'backendEnvironmentName' when calling getBackendAPI");
      }
      // verify the required parameter 'deleteBackendAPIRequest' is set
      if (deleteBackendAPIRequest === undefined || deleteBackendAPIRequest === null) {
        throw new Error("Missing the required parameter 'deleteBackendAPIRequest' when calling getBackendAPI");
      }

      let pathParams = {
        'appId': appId,
        'backendEnvironmentName': backendEnvironmentName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetBackendAPIResponse;
      return this.apiClient.callApi(
        '/backend/{appId}/api/{backendEnvironmentName}/details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBackendAPIModels operation.
     * @callback module:api/DefaultApi~getBackendAPIModelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBackendAPIModelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a model introspection schema for an existing backend API resource.
     * @param {String} appId The app ID.
     * @param {String} backendEnvironmentName The name of the backend environment.
     * @param {module:model/DeleteBackendAuthRequest} deleteBackendAuthRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getBackendAPIModelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBackendAPIModelsResponse}
     */
    getBackendAPIModels(appId, backendEnvironmentName, deleteBackendAuthRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteBackendAuthRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getBackendAPIModels");
      }
      // verify the required parameter 'backendEnvironmentName' is set
      if (backendEnvironmentName === undefined || backendEnvironmentName === null) {
        throw new Error("Missing the required parameter 'backendEnvironmentName' when calling getBackendAPIModels");
      }
      // verify the required parameter 'deleteBackendAuthRequest' is set
      if (deleteBackendAuthRequest === undefined || deleteBackendAuthRequest === null) {
        throw new Error("Missing the required parameter 'deleteBackendAuthRequest' when calling getBackendAPIModels");
      }

      let pathParams = {
        'appId': appId,
        'backendEnvironmentName': backendEnvironmentName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetBackendAPIModelsResponse;
      return this.apiClient.callApi(
        '/backend/{appId}/api/{backendEnvironmentName}/getModels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBackendAuth operation.
     * @callback module:api/DefaultApi~getBackendAuthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBackendAuthResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a backend auth details.
     * @param {String} appId The app ID.
     * @param {String} backendEnvironmentName The name of the backend environment.
     * @param {module:model/DeleteBackendAuthRequest} deleteBackendAuthRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getBackendAuthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBackendAuthResponse}
     */
    getBackendAuth(appId, backendEnvironmentName, deleteBackendAuthRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteBackendAuthRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getBackendAuth");
      }
      // verify the required parameter 'backendEnvironmentName' is set
      if (backendEnvironmentName === undefined || backendEnvironmentName === null) {
        throw new Error("Missing the required parameter 'backendEnvironmentName' when calling getBackendAuth");
      }
      // verify the required parameter 'deleteBackendAuthRequest' is set
      if (deleteBackendAuthRequest === undefined || deleteBackendAuthRequest === null) {
        throw new Error("Missing the required parameter 'deleteBackendAuthRequest' when calling getBackendAuth");
      }

      let pathParams = {
        'appId': appId,
        'backendEnvironmentName': backendEnvironmentName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetBackendAuthResponse;
      return this.apiClient.callApi(
        '/backend/{appId}/auth/{backendEnvironmentName}/details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBackendJob operation.
     * @callback module:api/DefaultApi~getBackendJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBackendJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a specific job.
     * @param {String} appId The app ID.
     * @param {String} backendEnvironmentName The name of the backend environment.
     * @param {String} jobId The ID for the job.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getBackendJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBackendJobResponse}
     */
    getBackendJob(appId, backendEnvironmentName, jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getBackendJob");
      }
      // verify the required parameter 'backendEnvironmentName' is set
      if (backendEnvironmentName === undefined || backendEnvironmentName === null) {
        throw new Error("Missing the required parameter 'backendEnvironmentName' when calling getBackendJob");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getBackendJob");
      }

      let pathParams = {
        'appId': appId,
        'backendEnvironmentName': backendEnvironmentName,
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBackendJobResponse;
      return this.apiClient.callApi(
        '/backend/{appId}/job/{backendEnvironmentName}/{jobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBackendStorage operation.
     * @callback module:api/DefaultApi~getBackendStorageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBackendStorageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets details for a backend storage resource.
     * @param {String} appId The app ID.
     * @param {String} backendEnvironmentName The name of the backend environment.
     * @param {module:model/GetBackendStorageRequest} getBackendStorageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getBackendStorageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBackendStorageResponse}
     */
    getBackendStorage(appId, backendEnvironmentName, getBackendStorageRequest, opts, callback) {
      opts = opts || {};
      let postBody = getBackendStorageRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getBackendStorage");
      }
      // verify the required parameter 'backendEnvironmentName' is set
      if (backendEnvironmentName === undefined || backendEnvironmentName === null) {
        throw new Error("Missing the required parameter 'backendEnvironmentName' when calling getBackendStorage");
      }
      // verify the required parameter 'getBackendStorageRequest' is set
      if (getBackendStorageRequest === undefined || getBackendStorageRequest === null) {
        throw new Error("Missing the required parameter 'getBackendStorageRequest' when calling getBackendStorage");
      }

      let pathParams = {
        'appId': appId,
        'backendEnvironmentName': backendEnvironmentName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetBackendStorageResponse;
      return this.apiClient.callApi(
        '/backend/{appId}/storage/{backendEnvironmentName}/details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getToken operation.
     * @callback module:api/DefaultApi~getTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the challenge token based on the given appId and sessionId.
     * @param {String} appId The app ID.
     * @param {String} sessionId The session ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTokenResponse}
     */
    getToken(appId, sessionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getToken");
      }
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling getToken");
      }

      let pathParams = {
        'appId': appId,
        'sessionId': sessionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTokenResponse;
      return this.apiClient.callApi(
        '/backend/{appId}/challenge/{sessionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importBackendAuth operation.
     * @callback module:api/DefaultApi~importBackendAuthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportBackendAuthResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Imports an existing backend authentication resource.
     * @param {String} appId The app ID.
     * @param {String} backendEnvironmentName The name of the backend environment.
     * @param {module:model/ImportBackendAuthRequest} importBackendAuthRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~importBackendAuthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportBackendAuthResponse}
     */
    importBackendAuth(appId, backendEnvironmentName, importBackendAuthRequest, opts, callback) {
      opts = opts || {};
      let postBody = importBackendAuthRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling importBackendAuth");
      }
      // verify the required parameter 'backendEnvironmentName' is set
      if (backendEnvironmentName === undefined || backendEnvironmentName === null) {
        throw new Error("Missing the required parameter 'backendEnvironmentName' when calling importBackendAuth");
      }
      // verify the required parameter 'importBackendAuthRequest' is set
      if (importBackendAuthRequest === undefined || importBackendAuthRequest === null) {
        throw new Error("Missing the required parameter 'importBackendAuthRequest' when calling importBackendAuth");
      }

      let pathParams = {
        'appId': appId,
        'backendEnvironmentName': backendEnvironmentName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImportBackendAuthResponse;
      return this.apiClient.callApi(
        '/backend/{appId}/auth/{backendEnvironmentName}/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importBackendStorage operation.
     * @callback module:api/DefaultApi~importBackendStorageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportBackendStorageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Imports an existing backend storage resource.
     * @param {String} appId The app ID.
     * @param {String} backendEnvironmentName The name of the backend environment.
     * @param {module:model/ImportBackendStorageRequest} importBackendStorageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~importBackendStorageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportBackendStorageResponse}
     */
    importBackendStorage(appId, backendEnvironmentName, importBackendStorageRequest, opts, callback) {
      opts = opts || {};
      let postBody = importBackendStorageRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling importBackendStorage");
      }
      // verify the required parameter 'backendEnvironmentName' is set
      if (backendEnvironmentName === undefined || backendEnvironmentName === null) {
        throw new Error("Missing the required parameter 'backendEnvironmentName' when calling importBackendStorage");
      }
      // verify the required parameter 'importBackendStorageRequest' is set
      if (importBackendStorageRequest === undefined || importBackendStorageRequest === null) {
        throw new Error("Missing the required parameter 'importBackendStorageRequest' when calling importBackendStorage");
      }

      let pathParams = {
        'appId': appId,
        'backendEnvironmentName': backendEnvironmentName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImportBackendStorageResponse;
      return this.apiClient.callApi(
        '/backend/{appId}/storage/{backendEnvironmentName}/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBackendJobs operation.
     * @callback module:api/DefaultApi~listBackendJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBackendJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the jobs for the backend of an Amplify app.
     * @param {String} appId The app ID.
     * @param {String} backendEnvironmentName The name of the backend environment.
     * @param {module:model/ListBackendJobsRequest} listBackendJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listBackendJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBackendJobsResponse}
     */
    listBackendJobs(appId, backendEnvironmentName, listBackendJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listBackendJobsRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling listBackendJobs");
      }
      // verify the required parameter 'backendEnvironmentName' is set
      if (backendEnvironmentName === undefined || backendEnvironmentName === null) {
        throw new Error("Missing the required parameter 'backendEnvironmentName' when calling listBackendJobs");
      }
      // verify the required parameter 'listBackendJobsRequest' is set
      if (listBackendJobsRequest === undefined || listBackendJobsRequest === null) {
        throw new Error("Missing the required parameter 'listBackendJobsRequest' when calling listBackendJobs");
      }

      let pathParams = {
        'appId': appId,
        'backendEnvironmentName': backendEnvironmentName
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListBackendJobsResponse;
      return this.apiClient.callApi(
        '/backend/{appId}/job/{backendEnvironmentName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listS3Buckets operation.
     * @callback module:api/DefaultApi~listS3BucketsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListS3BucketsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The list of S3 buckets in your account.
     * @param {module:model/ListS3BucketsRequest} listS3BucketsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listS3BucketsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListS3BucketsResponse}
     */
    listS3Buckets(listS3BucketsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listS3BucketsRequest;
      // verify the required parameter 'listS3BucketsRequest' is set
      if (listS3BucketsRequest === undefined || listS3BucketsRequest === null) {
        throw new Error("Missing the required parameter 'listS3BucketsRequest' when calling listS3Buckets");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListS3BucketsResponse;
      return this.apiClient.callApi(
        '/s3Buckets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeAllBackends operation.
     * @callback module:api/DefaultApi~removeAllBackendsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveAllBackendsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes all backend environments from your Amplify project.
     * @param {String} appId The app ID.
     * @param {module:model/RemoveAllBackendsRequest} removeAllBackendsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~removeAllBackendsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveAllBackendsResponse}
     */
    removeAllBackends(appId, removeAllBackendsRequest, opts, callback) {
      opts = opts || {};
      let postBody = removeAllBackendsRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling removeAllBackends");
      }
      // verify the required parameter 'removeAllBackendsRequest' is set
      if (removeAllBackendsRequest === undefined || removeAllBackendsRequest === null) {
        throw new Error("Missing the required parameter 'removeAllBackendsRequest' when calling removeAllBackends");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RemoveAllBackendsResponse;
      return this.apiClient.callApi(
        '/backend/{appId}/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeBackendConfig operation.
     * @callback module:api/DefaultApi~removeBackendConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveBackendConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the AWS resources required to access the Amplify Admin UI.
     * @param {String} appId The app ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~removeBackendConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveBackendConfigResponse}
     */
    removeBackendConfig(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling removeBackendConfig");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemoveBackendConfigResponse;
      return this.apiClient.callApi(
        '/backend/{appId}/config/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBackendAPI operation.
     * @callback module:api/DefaultApi~updateBackendAPICallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateBackendAPIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing backend API resource.
     * @param {String} appId The app ID.
     * @param {String} backendEnvironmentName The name of the backend environment.
     * @param {module:model/DeleteBackendAPIRequest} deleteBackendAPIRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateBackendAPICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateBackendAPIResponse}
     */
    updateBackendAPI(appId, backendEnvironmentName, deleteBackendAPIRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteBackendAPIRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateBackendAPI");
      }
      // verify the required parameter 'backendEnvironmentName' is set
      if (backendEnvironmentName === undefined || backendEnvironmentName === null) {
        throw new Error("Missing the required parameter 'backendEnvironmentName' when calling updateBackendAPI");
      }
      // verify the required parameter 'deleteBackendAPIRequest' is set
      if (deleteBackendAPIRequest === undefined || deleteBackendAPIRequest === null) {
        throw new Error("Missing the required parameter 'deleteBackendAPIRequest' when calling updateBackendAPI");
      }

      let pathParams = {
        'appId': appId,
        'backendEnvironmentName': backendEnvironmentName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateBackendAPIResponse;
      return this.apiClient.callApi(
        '/backend/{appId}/api/{backendEnvironmentName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBackendAuth operation.
     * @callback module:api/DefaultApi~updateBackendAuthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateBackendAuthResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing backend authentication resource.
     * @param {String} appId The app ID.
     * @param {String} backendEnvironmentName The name of the backend environment.
     * @param {module:model/UpdateBackendAuthRequest} updateBackendAuthRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateBackendAuthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateBackendAuthResponse}
     */
    updateBackendAuth(appId, backendEnvironmentName, updateBackendAuthRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateBackendAuthRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateBackendAuth");
      }
      // verify the required parameter 'backendEnvironmentName' is set
      if (backendEnvironmentName === undefined || backendEnvironmentName === null) {
        throw new Error("Missing the required parameter 'backendEnvironmentName' when calling updateBackendAuth");
      }
      // verify the required parameter 'updateBackendAuthRequest' is set
      if (updateBackendAuthRequest === undefined || updateBackendAuthRequest === null) {
        throw new Error("Missing the required parameter 'updateBackendAuthRequest' when calling updateBackendAuth");
      }

      let pathParams = {
        'appId': appId,
        'backendEnvironmentName': backendEnvironmentName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateBackendAuthResponse;
      return this.apiClient.callApi(
        '/backend/{appId}/auth/{backendEnvironmentName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBackendConfig operation.
     * @callback module:api/DefaultApi~updateBackendConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateBackendConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the AWS resources required to access the Amplify Admin UI.
     * @param {String} appId The app ID.
     * @param {module:model/UpdateBackendConfigRequest} updateBackendConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateBackendConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateBackendConfigResponse}
     */
    updateBackendConfig(appId, updateBackendConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateBackendConfigRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateBackendConfig");
      }
      // verify the required parameter 'updateBackendConfigRequest' is set
      if (updateBackendConfigRequest === undefined || updateBackendConfigRequest === null) {
        throw new Error("Missing the required parameter 'updateBackendConfigRequest' when calling updateBackendConfig");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateBackendConfigResponse;
      return this.apiClient.callApi(
        '/backend/{appId}/config/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBackendJob operation.
     * @callback module:api/DefaultApi~updateBackendJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateBackendJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a specific job.
     * @param {String} appId The app ID.
     * @param {String} backendEnvironmentName The name of the backend environment.
     * @param {String} jobId The ID for the job.
     * @param {module:model/UpdateBackendJobRequest} updateBackendJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateBackendJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateBackendJobResponse}
     */
    updateBackendJob(appId, backendEnvironmentName, jobId, updateBackendJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateBackendJobRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateBackendJob");
      }
      // verify the required parameter 'backendEnvironmentName' is set
      if (backendEnvironmentName === undefined || backendEnvironmentName === null) {
        throw new Error("Missing the required parameter 'backendEnvironmentName' when calling updateBackendJob");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling updateBackendJob");
      }
      // verify the required parameter 'updateBackendJobRequest' is set
      if (updateBackendJobRequest === undefined || updateBackendJobRequest === null) {
        throw new Error("Missing the required parameter 'updateBackendJobRequest' when calling updateBackendJob");
      }

      let pathParams = {
        'appId': appId,
        'backendEnvironmentName': backendEnvironmentName,
        'jobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateBackendJobResponse;
      return this.apiClient.callApi(
        '/backend/{appId}/job/{backendEnvironmentName}/{jobId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBackendStorage operation.
     * @callback module:api/DefaultApi~updateBackendStorageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateBackendStorageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing backend storage resource.
     * @param {String} appId The app ID.
     * @param {String} backendEnvironmentName The name of the backend environment.
     * @param {module:model/UpdateBackendStorageRequest} updateBackendStorageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateBackendStorageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateBackendStorageResponse}
     */
    updateBackendStorage(appId, backendEnvironmentName, updateBackendStorageRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateBackendStorageRequest;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateBackendStorage");
      }
      // verify the required parameter 'backendEnvironmentName' is set
      if (backendEnvironmentName === undefined || backendEnvironmentName === null) {
        throw new Error("Missing the required parameter 'backendEnvironmentName' when calling updateBackendStorage");
      }
      // verify the required parameter 'updateBackendStorageRequest' is set
      if (updateBackendStorageRequest === undefined || updateBackendStorageRequest === null) {
        throw new Error("Missing the required parameter 'updateBackendStorageRequest' when calling updateBackendStorage");
      }

      let pathParams = {
        'appId': appId,
        'backendEnvironmentName': backendEnvironmentName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateBackendStorageResponse;
      return this.apiClient.callApi(
        '/backend/{appId}/storage/{backendEnvironmentName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
