/*
 * AmplifyBackend
 * AWS Amplify Admin API
 *
 * The version of the OpenAPI document: 2020-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AuthResources;
import org.openapitools.client.model.CreateBackendAuthRequestResourceConfigIdentityPoolConfigs;
import org.openapitools.client.model.CreateBackendAuthRequestResourceConfigUserPoolConfigs;
import org.openapitools.client.model.Service;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetBackendAuthResponseResourceConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:00.740082-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetBackendAuthResponseResourceConfig {
  public static final String SERIALIZED_NAME_AUTH_RESOURCES = "AuthResources";
  @SerializedName(SERIALIZED_NAME_AUTH_RESOURCES)
  private AuthResources authResources;

  public static final String SERIALIZED_NAME_IDENTITY_POOL_CONFIGS = "IdentityPoolConfigs";
  @SerializedName(SERIALIZED_NAME_IDENTITY_POOL_CONFIGS)
  private CreateBackendAuthRequestResourceConfigIdentityPoolConfigs identityPoolConfigs;

  public static final String SERIALIZED_NAME_SERVICE = "Service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private Service service;

  public static final String SERIALIZED_NAME_USER_POOL_CONFIGS = "UserPoolConfigs";
  @SerializedName(SERIALIZED_NAME_USER_POOL_CONFIGS)
  private CreateBackendAuthRequestResourceConfigUserPoolConfigs userPoolConfigs;

  public GetBackendAuthResponseResourceConfig() {
  }

  public GetBackendAuthResponseResourceConfig authResources(AuthResources authResources) {
    this.authResources = authResources;
    return this;
  }

  /**
   * Get authResources
   * @return authResources
   */
  @javax.annotation.Nonnull
  public AuthResources getAuthResources() {
    return authResources;
  }

  public void setAuthResources(AuthResources authResources) {
    this.authResources = authResources;
  }


  public GetBackendAuthResponseResourceConfig identityPoolConfigs(CreateBackendAuthRequestResourceConfigIdentityPoolConfigs identityPoolConfigs) {
    this.identityPoolConfigs = identityPoolConfigs;
    return this;
  }

  /**
   * Get identityPoolConfigs
   * @return identityPoolConfigs
   */
  @javax.annotation.Nullable
  public CreateBackendAuthRequestResourceConfigIdentityPoolConfigs getIdentityPoolConfigs() {
    return identityPoolConfigs;
  }

  public void setIdentityPoolConfigs(CreateBackendAuthRequestResourceConfigIdentityPoolConfigs identityPoolConfigs) {
    this.identityPoolConfigs = identityPoolConfigs;
  }


  public GetBackendAuthResponseResourceConfig service(Service service) {
    this.service = service;
    return this;
  }

  /**
   * Get service
   * @return service
   */
  @javax.annotation.Nonnull
  public Service getService() {
    return service;
  }

  public void setService(Service service) {
    this.service = service;
  }


  public GetBackendAuthResponseResourceConfig userPoolConfigs(CreateBackendAuthRequestResourceConfigUserPoolConfigs userPoolConfigs) {
    this.userPoolConfigs = userPoolConfigs;
    return this;
  }

  /**
   * Get userPoolConfigs
   * @return userPoolConfigs
   */
  @javax.annotation.Nonnull
  public CreateBackendAuthRequestResourceConfigUserPoolConfigs getUserPoolConfigs() {
    return userPoolConfigs;
  }

  public void setUserPoolConfigs(CreateBackendAuthRequestResourceConfigUserPoolConfigs userPoolConfigs) {
    this.userPoolConfigs = userPoolConfigs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetBackendAuthResponseResourceConfig getBackendAuthResponseResourceConfig = (GetBackendAuthResponseResourceConfig) o;
    return Objects.equals(this.authResources, getBackendAuthResponseResourceConfig.authResources) &&
        Objects.equals(this.identityPoolConfigs, getBackendAuthResponseResourceConfig.identityPoolConfigs) &&
        Objects.equals(this.service, getBackendAuthResponseResourceConfig.service) &&
        Objects.equals(this.userPoolConfigs, getBackendAuthResponseResourceConfig.userPoolConfigs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authResources, identityPoolConfigs, service, userPoolConfigs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetBackendAuthResponseResourceConfig {\n");
    sb.append("    authResources: ").append(toIndentedString(authResources)).append("\n");
    sb.append("    identityPoolConfigs: ").append(toIndentedString(identityPoolConfigs)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    userPoolConfigs: ").append(toIndentedString(userPoolConfigs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AuthResources");
    openapiFields.add("IdentityPoolConfigs");
    openapiFields.add("Service");
    openapiFields.add("UserPoolConfigs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AuthResources");
    openapiRequiredFields.add("Service");
    openapiRequiredFields.add("UserPoolConfigs");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetBackendAuthResponseResourceConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetBackendAuthResponseResourceConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetBackendAuthResponseResourceConfig is not found in the empty JSON string", GetBackendAuthResponseResourceConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetBackendAuthResponseResourceConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetBackendAuthResponseResourceConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetBackendAuthResponseResourceConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `AuthResources`
      AuthResources.validateJsonElement(jsonObj.get("AuthResources"));
      // validate the optional field `IdentityPoolConfigs`
      if (jsonObj.get("IdentityPoolConfigs") != null && !jsonObj.get("IdentityPoolConfigs").isJsonNull()) {
        CreateBackendAuthRequestResourceConfigIdentityPoolConfigs.validateJsonElement(jsonObj.get("IdentityPoolConfigs"));
      }
      // validate the required field `Service`
      Service.validateJsonElement(jsonObj.get("Service"));
      // validate the required field `UserPoolConfigs`
      CreateBackendAuthRequestResourceConfigUserPoolConfigs.validateJsonElement(jsonObj.get("UserPoolConfigs"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetBackendAuthResponseResourceConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetBackendAuthResponseResourceConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetBackendAuthResponseResourceConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetBackendAuthResponseResourceConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GetBackendAuthResponseResourceConfig>() {
           @Override
           public void write(JsonWriter out, GetBackendAuthResponseResourceConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetBackendAuthResponseResourceConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetBackendAuthResponseResourceConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetBackendAuthResponseResourceConfig
   * @throws IOException if the JSON string is invalid with respect to GetBackendAuthResponseResourceConfig
   */
  public static GetBackendAuthResponseResourceConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetBackendAuthResponseResourceConfig.class);
  }

  /**
   * Convert an instance of GetBackendAuthResponseResourceConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

