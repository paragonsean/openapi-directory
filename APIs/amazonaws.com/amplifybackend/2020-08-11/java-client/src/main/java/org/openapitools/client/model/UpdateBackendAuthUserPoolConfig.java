/*
 * AmplifyBackend
 * AWS Amplify Admin API
 *
 * The version of the OpenAPI document: 2020-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UpdateBackendAuthUserPoolConfigForgotPassword;
import org.openapitools.client.model.UpdateBackendAuthUserPoolConfigMfa;
import org.openapitools.client.model.UpdateBackendAuthUserPoolConfigOAuth;
import org.openapitools.client.model.UpdateBackendAuthUserPoolConfigPasswordPolicy;
import org.openapitools.client.model.UpdateBackendAuthUserPoolConfigVerificationMessage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the Amazon Cognito user pool configuration for the authorization resource to be configured for your Amplify project on an update.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:00.740082-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateBackendAuthUserPoolConfig {
  public static final String SERIALIZED_NAME_FORGOT_PASSWORD = "ForgotPassword";
  @SerializedName(SERIALIZED_NAME_FORGOT_PASSWORD)
  private UpdateBackendAuthUserPoolConfigForgotPassword forgotPassword;

  public static final String SERIALIZED_NAME_MFA = "Mfa";
  @SerializedName(SERIALIZED_NAME_MFA)
  private UpdateBackendAuthUserPoolConfigMfa mfa;

  public static final String SERIALIZED_NAME_OAUTH = "OAuth";
  @SerializedName(SERIALIZED_NAME_OAUTH)
  private UpdateBackendAuthUserPoolConfigOAuth oauth;

  public static final String SERIALIZED_NAME_PASSWORD_POLICY = "PasswordPolicy";
  @SerializedName(SERIALIZED_NAME_PASSWORD_POLICY)
  private UpdateBackendAuthUserPoolConfigPasswordPolicy passwordPolicy;

  public static final String SERIALIZED_NAME_VERIFICATION_MESSAGE = "VerificationMessage";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_MESSAGE)
  private UpdateBackendAuthUserPoolConfigVerificationMessage verificationMessage;

  public UpdateBackendAuthUserPoolConfig() {
  }

  public UpdateBackendAuthUserPoolConfig forgotPassword(UpdateBackendAuthUserPoolConfigForgotPassword forgotPassword) {
    this.forgotPassword = forgotPassword;
    return this;
  }

  /**
   * Get forgotPassword
   * @return forgotPassword
   */
  @javax.annotation.Nullable
  public UpdateBackendAuthUserPoolConfigForgotPassword getForgotPassword() {
    return forgotPassword;
  }

  public void setForgotPassword(UpdateBackendAuthUserPoolConfigForgotPassword forgotPassword) {
    this.forgotPassword = forgotPassword;
  }


  public UpdateBackendAuthUserPoolConfig mfa(UpdateBackendAuthUserPoolConfigMfa mfa) {
    this.mfa = mfa;
    return this;
  }

  /**
   * Get mfa
   * @return mfa
   */
  @javax.annotation.Nullable
  public UpdateBackendAuthUserPoolConfigMfa getMfa() {
    return mfa;
  }

  public void setMfa(UpdateBackendAuthUserPoolConfigMfa mfa) {
    this.mfa = mfa;
  }


  public UpdateBackendAuthUserPoolConfig oauth(UpdateBackendAuthUserPoolConfigOAuth oauth) {
    this.oauth = oauth;
    return this;
  }

  /**
   * Get oauth
   * @return oauth
   */
  @javax.annotation.Nullable
  public UpdateBackendAuthUserPoolConfigOAuth getOauth() {
    return oauth;
  }

  public void setOauth(UpdateBackendAuthUserPoolConfigOAuth oauth) {
    this.oauth = oauth;
  }


  public UpdateBackendAuthUserPoolConfig passwordPolicy(UpdateBackendAuthUserPoolConfigPasswordPolicy passwordPolicy) {
    this.passwordPolicy = passwordPolicy;
    return this;
  }

  /**
   * Get passwordPolicy
   * @return passwordPolicy
   */
  @javax.annotation.Nullable
  public UpdateBackendAuthUserPoolConfigPasswordPolicy getPasswordPolicy() {
    return passwordPolicy;
  }

  public void setPasswordPolicy(UpdateBackendAuthUserPoolConfigPasswordPolicy passwordPolicy) {
    this.passwordPolicy = passwordPolicy;
  }


  public UpdateBackendAuthUserPoolConfig verificationMessage(UpdateBackendAuthUserPoolConfigVerificationMessage verificationMessage) {
    this.verificationMessage = verificationMessage;
    return this;
  }

  /**
   * Get verificationMessage
   * @return verificationMessage
   */
  @javax.annotation.Nullable
  public UpdateBackendAuthUserPoolConfigVerificationMessage getVerificationMessage() {
    return verificationMessage;
  }

  public void setVerificationMessage(UpdateBackendAuthUserPoolConfigVerificationMessage verificationMessage) {
    this.verificationMessage = verificationMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateBackendAuthUserPoolConfig updateBackendAuthUserPoolConfig = (UpdateBackendAuthUserPoolConfig) o;
    return Objects.equals(this.forgotPassword, updateBackendAuthUserPoolConfig.forgotPassword) &&
        Objects.equals(this.mfa, updateBackendAuthUserPoolConfig.mfa) &&
        Objects.equals(this.oauth, updateBackendAuthUserPoolConfig.oauth) &&
        Objects.equals(this.passwordPolicy, updateBackendAuthUserPoolConfig.passwordPolicy) &&
        Objects.equals(this.verificationMessage, updateBackendAuthUserPoolConfig.verificationMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(forgotPassword, mfa, oauth, passwordPolicy, verificationMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateBackendAuthUserPoolConfig {\n");
    sb.append("    forgotPassword: ").append(toIndentedString(forgotPassword)).append("\n");
    sb.append("    mfa: ").append(toIndentedString(mfa)).append("\n");
    sb.append("    oauth: ").append(toIndentedString(oauth)).append("\n");
    sb.append("    passwordPolicy: ").append(toIndentedString(passwordPolicy)).append("\n");
    sb.append("    verificationMessage: ").append(toIndentedString(verificationMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ForgotPassword");
    openapiFields.add("Mfa");
    openapiFields.add("OAuth");
    openapiFields.add("PasswordPolicy");
    openapiFields.add("VerificationMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateBackendAuthUserPoolConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateBackendAuthUserPoolConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateBackendAuthUserPoolConfig is not found in the empty JSON string", UpdateBackendAuthUserPoolConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateBackendAuthUserPoolConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateBackendAuthUserPoolConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ForgotPassword`
      if (jsonObj.get("ForgotPassword") != null && !jsonObj.get("ForgotPassword").isJsonNull()) {
        UpdateBackendAuthUserPoolConfigForgotPassword.validateJsonElement(jsonObj.get("ForgotPassword"));
      }
      // validate the optional field `Mfa`
      if (jsonObj.get("Mfa") != null && !jsonObj.get("Mfa").isJsonNull()) {
        UpdateBackendAuthUserPoolConfigMfa.validateJsonElement(jsonObj.get("Mfa"));
      }
      // validate the optional field `OAuth`
      if (jsonObj.get("OAuth") != null && !jsonObj.get("OAuth").isJsonNull()) {
        UpdateBackendAuthUserPoolConfigOAuth.validateJsonElement(jsonObj.get("OAuth"));
      }
      // validate the optional field `PasswordPolicy`
      if (jsonObj.get("PasswordPolicy") != null && !jsonObj.get("PasswordPolicy").isJsonNull()) {
        UpdateBackendAuthUserPoolConfigPasswordPolicy.validateJsonElement(jsonObj.get("PasswordPolicy"));
      }
      // validate the optional field `VerificationMessage`
      if (jsonObj.get("VerificationMessage") != null && !jsonObj.get("VerificationMessage").isJsonNull()) {
        UpdateBackendAuthUserPoolConfigVerificationMessage.validateJsonElement(jsonObj.get("VerificationMessage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateBackendAuthUserPoolConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateBackendAuthUserPoolConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateBackendAuthUserPoolConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateBackendAuthUserPoolConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateBackendAuthUserPoolConfig>() {
           @Override
           public void write(JsonWriter out, UpdateBackendAuthUserPoolConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateBackendAuthUserPoolConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateBackendAuthUserPoolConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateBackendAuthUserPoolConfig
   * @throws IOException if the JSON string is invalid with respect to UpdateBackendAuthUserPoolConfig
   */
  public static UpdateBackendAuthUserPoolConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateBackendAuthUserPoolConfig.class);
  }

  /**
   * Convert an instance of UpdateBackendAuthUserPoolConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

