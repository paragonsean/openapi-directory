/*
 * AmplifyBackend
 * AWS Amplify Admin API
 *
 * The version of the OpenAPI document: 2020-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateBackendAuthUserPoolConfigForgotPassword;
import org.openapitools.client.model.CreateBackendAuthUserPoolConfigMfa;
import org.openapitools.client.model.CreateBackendAuthUserPoolConfigOAuth;
import org.openapitools.client.model.CreateBackendAuthUserPoolConfigPasswordPolicy;
import org.openapitools.client.model.CreateBackendAuthUserPoolConfigVerificationMessage;
import org.openapitools.client.model.SignInMethod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateBackendAuthRequestResourceConfigUserPoolConfigs
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:00.740082-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateBackendAuthRequestResourceConfigUserPoolConfigs {
  public static final String SERIALIZED_NAME_FORGOT_PASSWORD = "ForgotPassword";
  @SerializedName(SERIALIZED_NAME_FORGOT_PASSWORD)
  private CreateBackendAuthUserPoolConfigForgotPassword forgotPassword;

  public static final String SERIALIZED_NAME_MFA = "Mfa";
  @SerializedName(SERIALIZED_NAME_MFA)
  private CreateBackendAuthUserPoolConfigMfa mfa;

  public static final String SERIALIZED_NAME_OAUTH = "OAuth";
  @SerializedName(SERIALIZED_NAME_OAUTH)
  private CreateBackendAuthUserPoolConfigOAuth oauth;

  public static final String SERIALIZED_NAME_PASSWORD_POLICY = "PasswordPolicy";
  @SerializedName(SERIALIZED_NAME_PASSWORD_POLICY)
  private CreateBackendAuthUserPoolConfigPasswordPolicy passwordPolicy;

  public static final String SERIALIZED_NAME_REQUIRED_SIGN_UP_ATTRIBUTES = "RequiredSignUpAttributes";
  @SerializedName(SERIALIZED_NAME_REQUIRED_SIGN_UP_ATTRIBUTES)
  private List requiredSignUpAttributes;

  public static final String SERIALIZED_NAME_SIGN_IN_METHOD = "SignInMethod";
  @SerializedName(SERIALIZED_NAME_SIGN_IN_METHOD)
  private SignInMethod signInMethod;

  public static final String SERIALIZED_NAME_USER_POOL_NAME = "UserPoolName";
  @SerializedName(SERIALIZED_NAME_USER_POOL_NAME)
  private String userPoolName;

  public static final String SERIALIZED_NAME_VERIFICATION_MESSAGE = "VerificationMessage";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_MESSAGE)
  private CreateBackendAuthUserPoolConfigVerificationMessage verificationMessage;

  public CreateBackendAuthRequestResourceConfigUserPoolConfigs() {
  }

  public CreateBackendAuthRequestResourceConfigUserPoolConfigs forgotPassword(CreateBackendAuthUserPoolConfigForgotPassword forgotPassword) {
    this.forgotPassword = forgotPassword;
    return this;
  }

  /**
   * Get forgotPassword
   * @return forgotPassword
   */
  @javax.annotation.Nullable
  public CreateBackendAuthUserPoolConfigForgotPassword getForgotPassword() {
    return forgotPassword;
  }

  public void setForgotPassword(CreateBackendAuthUserPoolConfigForgotPassword forgotPassword) {
    this.forgotPassword = forgotPassword;
  }


  public CreateBackendAuthRequestResourceConfigUserPoolConfigs mfa(CreateBackendAuthUserPoolConfigMfa mfa) {
    this.mfa = mfa;
    return this;
  }

  /**
   * Get mfa
   * @return mfa
   */
  @javax.annotation.Nullable
  public CreateBackendAuthUserPoolConfigMfa getMfa() {
    return mfa;
  }

  public void setMfa(CreateBackendAuthUserPoolConfigMfa mfa) {
    this.mfa = mfa;
  }


  public CreateBackendAuthRequestResourceConfigUserPoolConfigs oauth(CreateBackendAuthUserPoolConfigOAuth oauth) {
    this.oauth = oauth;
    return this;
  }

  /**
   * Get oauth
   * @return oauth
   */
  @javax.annotation.Nullable
  public CreateBackendAuthUserPoolConfigOAuth getOauth() {
    return oauth;
  }

  public void setOauth(CreateBackendAuthUserPoolConfigOAuth oauth) {
    this.oauth = oauth;
  }


  public CreateBackendAuthRequestResourceConfigUserPoolConfigs passwordPolicy(CreateBackendAuthUserPoolConfigPasswordPolicy passwordPolicy) {
    this.passwordPolicy = passwordPolicy;
    return this;
  }

  /**
   * Get passwordPolicy
   * @return passwordPolicy
   */
  @javax.annotation.Nullable
  public CreateBackendAuthUserPoolConfigPasswordPolicy getPasswordPolicy() {
    return passwordPolicy;
  }

  public void setPasswordPolicy(CreateBackendAuthUserPoolConfigPasswordPolicy passwordPolicy) {
    this.passwordPolicy = passwordPolicy;
  }


  public CreateBackendAuthRequestResourceConfigUserPoolConfigs requiredSignUpAttributes(List requiredSignUpAttributes) {
    this.requiredSignUpAttributes = requiredSignUpAttributes;
    return this;
  }

  /**
   * Get requiredSignUpAttributes
   * @return requiredSignUpAttributes
   */
  @javax.annotation.Nonnull
  public List getRequiredSignUpAttributes() {
    return requiredSignUpAttributes;
  }

  public void setRequiredSignUpAttributes(List requiredSignUpAttributes) {
    this.requiredSignUpAttributes = requiredSignUpAttributes;
  }


  public CreateBackendAuthRequestResourceConfigUserPoolConfigs signInMethod(SignInMethod signInMethod) {
    this.signInMethod = signInMethod;
    return this;
  }

  /**
   * Get signInMethod
   * @return signInMethod
   */
  @javax.annotation.Nonnull
  public SignInMethod getSignInMethod() {
    return signInMethod;
  }

  public void setSignInMethod(SignInMethod signInMethod) {
    this.signInMethod = signInMethod;
  }


  public CreateBackendAuthRequestResourceConfigUserPoolConfigs userPoolName(String userPoolName) {
    this.userPoolName = userPoolName;
    return this;
  }

  /**
   * Get userPoolName
   * @return userPoolName
   */
  @javax.annotation.Nonnull
  public String getUserPoolName() {
    return userPoolName;
  }

  public void setUserPoolName(String userPoolName) {
    this.userPoolName = userPoolName;
  }


  public CreateBackendAuthRequestResourceConfigUserPoolConfigs verificationMessage(CreateBackendAuthUserPoolConfigVerificationMessage verificationMessage) {
    this.verificationMessage = verificationMessage;
    return this;
  }

  /**
   * Get verificationMessage
   * @return verificationMessage
   */
  @javax.annotation.Nullable
  public CreateBackendAuthUserPoolConfigVerificationMessage getVerificationMessage() {
    return verificationMessage;
  }

  public void setVerificationMessage(CreateBackendAuthUserPoolConfigVerificationMessage verificationMessage) {
    this.verificationMessage = verificationMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateBackendAuthRequestResourceConfigUserPoolConfigs createBackendAuthRequestResourceConfigUserPoolConfigs = (CreateBackendAuthRequestResourceConfigUserPoolConfigs) o;
    return Objects.equals(this.forgotPassword, createBackendAuthRequestResourceConfigUserPoolConfigs.forgotPassword) &&
        Objects.equals(this.mfa, createBackendAuthRequestResourceConfigUserPoolConfigs.mfa) &&
        Objects.equals(this.oauth, createBackendAuthRequestResourceConfigUserPoolConfigs.oauth) &&
        Objects.equals(this.passwordPolicy, createBackendAuthRequestResourceConfigUserPoolConfigs.passwordPolicy) &&
        Objects.equals(this.requiredSignUpAttributes, createBackendAuthRequestResourceConfigUserPoolConfigs.requiredSignUpAttributes) &&
        Objects.equals(this.signInMethod, createBackendAuthRequestResourceConfigUserPoolConfigs.signInMethod) &&
        Objects.equals(this.userPoolName, createBackendAuthRequestResourceConfigUserPoolConfigs.userPoolName) &&
        Objects.equals(this.verificationMessage, createBackendAuthRequestResourceConfigUserPoolConfigs.verificationMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(forgotPassword, mfa, oauth, passwordPolicy, requiredSignUpAttributes, signInMethod, userPoolName, verificationMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateBackendAuthRequestResourceConfigUserPoolConfigs {\n");
    sb.append("    forgotPassword: ").append(toIndentedString(forgotPassword)).append("\n");
    sb.append("    mfa: ").append(toIndentedString(mfa)).append("\n");
    sb.append("    oauth: ").append(toIndentedString(oauth)).append("\n");
    sb.append("    passwordPolicy: ").append(toIndentedString(passwordPolicy)).append("\n");
    sb.append("    requiredSignUpAttributes: ").append(toIndentedString(requiredSignUpAttributes)).append("\n");
    sb.append("    signInMethod: ").append(toIndentedString(signInMethod)).append("\n");
    sb.append("    userPoolName: ").append(toIndentedString(userPoolName)).append("\n");
    sb.append("    verificationMessage: ").append(toIndentedString(verificationMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ForgotPassword");
    openapiFields.add("Mfa");
    openapiFields.add("OAuth");
    openapiFields.add("PasswordPolicy");
    openapiFields.add("RequiredSignUpAttributes");
    openapiFields.add("SignInMethod");
    openapiFields.add("UserPoolName");
    openapiFields.add("VerificationMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("RequiredSignUpAttributes");
    openapiRequiredFields.add("SignInMethod");
    openapiRequiredFields.add("UserPoolName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateBackendAuthRequestResourceConfigUserPoolConfigs
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateBackendAuthRequestResourceConfigUserPoolConfigs.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateBackendAuthRequestResourceConfigUserPoolConfigs is not found in the empty JSON string", CreateBackendAuthRequestResourceConfigUserPoolConfigs.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateBackendAuthRequestResourceConfigUserPoolConfigs.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateBackendAuthRequestResourceConfigUserPoolConfigs` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateBackendAuthRequestResourceConfigUserPoolConfigs.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ForgotPassword`
      if (jsonObj.get("ForgotPassword") != null && !jsonObj.get("ForgotPassword").isJsonNull()) {
        CreateBackendAuthUserPoolConfigForgotPassword.validateJsonElement(jsonObj.get("ForgotPassword"));
      }
      // validate the optional field `Mfa`
      if (jsonObj.get("Mfa") != null && !jsonObj.get("Mfa").isJsonNull()) {
        CreateBackendAuthUserPoolConfigMfa.validateJsonElement(jsonObj.get("Mfa"));
      }
      // validate the optional field `OAuth`
      if (jsonObj.get("OAuth") != null && !jsonObj.get("OAuth").isJsonNull()) {
        CreateBackendAuthUserPoolConfigOAuth.validateJsonElement(jsonObj.get("OAuth"));
      }
      // validate the optional field `PasswordPolicy`
      if (jsonObj.get("PasswordPolicy") != null && !jsonObj.get("PasswordPolicy").isJsonNull()) {
        CreateBackendAuthUserPoolConfigPasswordPolicy.validateJsonElement(jsonObj.get("PasswordPolicy"));
      }
      // validate the required field `RequiredSignUpAttributes`
      List.validateJsonElement(jsonObj.get("RequiredSignUpAttributes"));
      // validate the required field `SignInMethod`
      SignInMethod.validateJsonElement(jsonObj.get("SignInMethod"));
      // validate the required field `UserPoolName`
      String.validateJsonElement(jsonObj.get("UserPoolName"));
      // validate the optional field `VerificationMessage`
      if (jsonObj.get("VerificationMessage") != null && !jsonObj.get("VerificationMessage").isJsonNull()) {
        CreateBackendAuthUserPoolConfigVerificationMessage.validateJsonElement(jsonObj.get("VerificationMessage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateBackendAuthRequestResourceConfigUserPoolConfigs.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateBackendAuthRequestResourceConfigUserPoolConfigs' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateBackendAuthRequestResourceConfigUserPoolConfigs> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateBackendAuthRequestResourceConfigUserPoolConfigs.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateBackendAuthRequestResourceConfigUserPoolConfigs>() {
           @Override
           public void write(JsonWriter out, CreateBackendAuthRequestResourceConfigUserPoolConfigs value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateBackendAuthRequestResourceConfigUserPoolConfigs read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateBackendAuthRequestResourceConfigUserPoolConfigs given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateBackendAuthRequestResourceConfigUserPoolConfigs
   * @throws IOException if the JSON string is invalid with respect to CreateBackendAuthRequestResourceConfigUserPoolConfigs
   */
  public static CreateBackendAuthRequestResourceConfigUserPoolConfigs fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateBackendAuthRequestResourceConfigUserPoolConfigs.class);
  }

  /**
   * Convert an instance of CreateBackendAuthRequestResourceConfigUserPoolConfigs to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

