/*
 * AmplifyBackend
 * AWS Amplify Admin API
 *
 * The version of the OpenAPI document: 2020-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateBackendAuthOAuthConfigSocialProviderSettings;
import org.openapitools.client.model.OAuthGrantType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateBackendAuthUserPoolConfigOAuth
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:00.740082-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateBackendAuthUserPoolConfigOAuth {
  public static final String SERIALIZED_NAME_DOMAIN_PREFIX = "DomainPrefix";
  @SerializedName(SERIALIZED_NAME_DOMAIN_PREFIX)
  private String domainPrefix;

  public static final String SERIALIZED_NAME_OAUTH_GRANT_TYPE = "OAuthGrantType";
  @SerializedName(SERIALIZED_NAME_OAUTH_GRANT_TYPE)
  private OAuthGrantType oauthGrantType;

  public static final String SERIALIZED_NAME_OAUTH_SCOPES = "OAuthScopes";
  @SerializedName(SERIALIZED_NAME_OAUTH_SCOPES)
  private List oauthScopes;

  public static final String SERIALIZED_NAME_REDIRECT_SIGN_IN_U_R_IS = "RedirectSignInURIs";
  @SerializedName(SERIALIZED_NAME_REDIRECT_SIGN_IN_U_R_IS)
  private List redirectSignInURIs;

  public static final String SERIALIZED_NAME_REDIRECT_SIGN_OUT_U_R_IS = "RedirectSignOutURIs";
  @SerializedName(SERIALIZED_NAME_REDIRECT_SIGN_OUT_U_R_IS)
  private List redirectSignOutURIs;

  public static final String SERIALIZED_NAME_SOCIAL_PROVIDER_SETTINGS = "SocialProviderSettings";
  @SerializedName(SERIALIZED_NAME_SOCIAL_PROVIDER_SETTINGS)
  private CreateBackendAuthOAuthConfigSocialProviderSettings socialProviderSettings;

  public CreateBackendAuthUserPoolConfigOAuth() {
  }

  public CreateBackendAuthUserPoolConfigOAuth domainPrefix(String domainPrefix) {
    this.domainPrefix = domainPrefix;
    return this;
  }

  /**
   * Get domainPrefix
   * @return domainPrefix
   */
  @javax.annotation.Nullable
  public String getDomainPrefix() {
    return domainPrefix;
  }

  public void setDomainPrefix(String domainPrefix) {
    this.domainPrefix = domainPrefix;
  }


  public CreateBackendAuthUserPoolConfigOAuth oauthGrantType(OAuthGrantType oauthGrantType) {
    this.oauthGrantType = oauthGrantType;
    return this;
  }

  /**
   * Get oauthGrantType
   * @return oauthGrantType
   */
  @javax.annotation.Nonnull
  public OAuthGrantType getOauthGrantType() {
    return oauthGrantType;
  }

  public void setOauthGrantType(OAuthGrantType oauthGrantType) {
    this.oauthGrantType = oauthGrantType;
  }


  public CreateBackendAuthUserPoolConfigOAuth oauthScopes(List oauthScopes) {
    this.oauthScopes = oauthScopes;
    return this;
  }

  /**
   * Get oauthScopes
   * @return oauthScopes
   */
  @javax.annotation.Nonnull
  public List getOauthScopes() {
    return oauthScopes;
  }

  public void setOauthScopes(List oauthScopes) {
    this.oauthScopes = oauthScopes;
  }


  public CreateBackendAuthUserPoolConfigOAuth redirectSignInURIs(List redirectSignInURIs) {
    this.redirectSignInURIs = redirectSignInURIs;
    return this;
  }

  /**
   * Get redirectSignInURIs
   * @return redirectSignInURIs
   */
  @javax.annotation.Nonnull
  public List getRedirectSignInURIs() {
    return redirectSignInURIs;
  }

  public void setRedirectSignInURIs(List redirectSignInURIs) {
    this.redirectSignInURIs = redirectSignInURIs;
  }


  public CreateBackendAuthUserPoolConfigOAuth redirectSignOutURIs(List redirectSignOutURIs) {
    this.redirectSignOutURIs = redirectSignOutURIs;
    return this;
  }

  /**
   * Get redirectSignOutURIs
   * @return redirectSignOutURIs
   */
  @javax.annotation.Nonnull
  public List getRedirectSignOutURIs() {
    return redirectSignOutURIs;
  }

  public void setRedirectSignOutURIs(List redirectSignOutURIs) {
    this.redirectSignOutURIs = redirectSignOutURIs;
  }


  public CreateBackendAuthUserPoolConfigOAuth socialProviderSettings(CreateBackendAuthOAuthConfigSocialProviderSettings socialProviderSettings) {
    this.socialProviderSettings = socialProviderSettings;
    return this;
  }

  /**
   * Get socialProviderSettings
   * @return socialProviderSettings
   */
  @javax.annotation.Nullable
  public CreateBackendAuthOAuthConfigSocialProviderSettings getSocialProviderSettings() {
    return socialProviderSettings;
  }

  public void setSocialProviderSettings(CreateBackendAuthOAuthConfigSocialProviderSettings socialProviderSettings) {
    this.socialProviderSettings = socialProviderSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateBackendAuthUserPoolConfigOAuth createBackendAuthUserPoolConfigOAuth = (CreateBackendAuthUserPoolConfigOAuth) o;
    return Objects.equals(this.domainPrefix, createBackendAuthUserPoolConfigOAuth.domainPrefix) &&
        Objects.equals(this.oauthGrantType, createBackendAuthUserPoolConfigOAuth.oauthGrantType) &&
        Objects.equals(this.oauthScopes, createBackendAuthUserPoolConfigOAuth.oauthScopes) &&
        Objects.equals(this.redirectSignInURIs, createBackendAuthUserPoolConfigOAuth.redirectSignInURIs) &&
        Objects.equals(this.redirectSignOutURIs, createBackendAuthUserPoolConfigOAuth.redirectSignOutURIs) &&
        Objects.equals(this.socialProviderSettings, createBackendAuthUserPoolConfigOAuth.socialProviderSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainPrefix, oauthGrantType, oauthScopes, redirectSignInURIs, redirectSignOutURIs, socialProviderSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateBackendAuthUserPoolConfigOAuth {\n");
    sb.append("    domainPrefix: ").append(toIndentedString(domainPrefix)).append("\n");
    sb.append("    oauthGrantType: ").append(toIndentedString(oauthGrantType)).append("\n");
    sb.append("    oauthScopes: ").append(toIndentedString(oauthScopes)).append("\n");
    sb.append("    redirectSignInURIs: ").append(toIndentedString(redirectSignInURIs)).append("\n");
    sb.append("    redirectSignOutURIs: ").append(toIndentedString(redirectSignOutURIs)).append("\n");
    sb.append("    socialProviderSettings: ").append(toIndentedString(socialProviderSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DomainPrefix");
    openapiFields.add("OAuthGrantType");
    openapiFields.add("OAuthScopes");
    openapiFields.add("RedirectSignInURIs");
    openapiFields.add("RedirectSignOutURIs");
    openapiFields.add("SocialProviderSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("OAuthGrantType");
    openapiRequiredFields.add("OAuthScopes");
    openapiRequiredFields.add("RedirectSignInURIs");
    openapiRequiredFields.add("RedirectSignOutURIs");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateBackendAuthUserPoolConfigOAuth
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateBackendAuthUserPoolConfigOAuth.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateBackendAuthUserPoolConfigOAuth is not found in the empty JSON string", CreateBackendAuthUserPoolConfigOAuth.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateBackendAuthUserPoolConfigOAuth.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateBackendAuthUserPoolConfigOAuth` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateBackendAuthUserPoolConfigOAuth.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DomainPrefix`
      if (jsonObj.get("DomainPrefix") != null && !jsonObj.get("DomainPrefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DomainPrefix"));
      }
      // validate the required field `OAuthGrantType`
      OAuthGrantType.validateJsonElement(jsonObj.get("OAuthGrantType"));
      // validate the required field `OAuthScopes`
      List.validateJsonElement(jsonObj.get("OAuthScopes"));
      // validate the required field `RedirectSignInURIs`
      List.validateJsonElement(jsonObj.get("RedirectSignInURIs"));
      // validate the required field `RedirectSignOutURIs`
      List.validateJsonElement(jsonObj.get("RedirectSignOutURIs"));
      // validate the optional field `SocialProviderSettings`
      if (jsonObj.get("SocialProviderSettings") != null && !jsonObj.get("SocialProviderSettings").isJsonNull()) {
        CreateBackendAuthOAuthConfigSocialProviderSettings.validateJsonElement(jsonObj.get("SocialProviderSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateBackendAuthUserPoolConfigOAuth.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateBackendAuthUserPoolConfigOAuth' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateBackendAuthUserPoolConfigOAuth> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateBackendAuthUserPoolConfigOAuth.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateBackendAuthUserPoolConfigOAuth>() {
           @Override
           public void write(JsonWriter out, CreateBackendAuthUserPoolConfigOAuth value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateBackendAuthUserPoolConfigOAuth read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateBackendAuthUserPoolConfigOAuth given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateBackendAuthUserPoolConfigOAuth
   * @throws IOException if the JSON string is invalid with respect to CreateBackendAuthUserPoolConfigOAuth
   */
  public static CreateBackendAuthUserPoolConfigOAuth fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateBackendAuthUserPoolConfigOAuth.class);
  }

  /**
   * Convert an instance of CreateBackendAuthUserPoolConfigOAuth to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

