/*
 * AmplifyBackend
 * AWS Amplify Admin API
 *
 * The version of the OpenAPI document: 2020-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateBackendAPIRequestResourceConfigConflictResolution;
import org.openapitools.client.model.CreateBackendAPIRequestResourceConfigDefaultAuthType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateBackendAPIRequestResourceConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:00.740082-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateBackendAPIRequestResourceConfig {
  public static final String SERIALIZED_NAME_ADDITIONAL_AUTH_TYPES = "AdditionalAuthTypes";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_AUTH_TYPES)
  private List additionalAuthTypes;

  public static final String SERIALIZED_NAME_API_NAME = "ApiName";
  @SerializedName(SERIALIZED_NAME_API_NAME)
  private String apiName;

  public static final String SERIALIZED_NAME_CONFLICT_RESOLUTION = "ConflictResolution";
  @SerializedName(SERIALIZED_NAME_CONFLICT_RESOLUTION)
  private CreateBackendAPIRequestResourceConfigConflictResolution conflictResolution;

  public static final String SERIALIZED_NAME_DEFAULT_AUTH_TYPE = "DefaultAuthType";
  @SerializedName(SERIALIZED_NAME_DEFAULT_AUTH_TYPE)
  private CreateBackendAPIRequestResourceConfigDefaultAuthType defaultAuthType;

  public static final String SERIALIZED_NAME_SERVICE = "Service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private String service;

  public static final String SERIALIZED_NAME_TRANSFORM_SCHEMA = "TransformSchema";
  @SerializedName(SERIALIZED_NAME_TRANSFORM_SCHEMA)
  private String transformSchema;

  public CreateBackendAPIRequestResourceConfig() {
  }

  public CreateBackendAPIRequestResourceConfig additionalAuthTypes(List additionalAuthTypes) {
    this.additionalAuthTypes = additionalAuthTypes;
    return this;
  }

  /**
   * Get additionalAuthTypes
   * @return additionalAuthTypes
   */
  @javax.annotation.Nullable
  public List getAdditionalAuthTypes() {
    return additionalAuthTypes;
  }

  public void setAdditionalAuthTypes(List additionalAuthTypes) {
    this.additionalAuthTypes = additionalAuthTypes;
  }


  public CreateBackendAPIRequestResourceConfig apiName(String apiName) {
    this.apiName = apiName;
    return this;
  }

  /**
   * Get apiName
   * @return apiName
   */
  @javax.annotation.Nullable
  public String getApiName() {
    return apiName;
  }

  public void setApiName(String apiName) {
    this.apiName = apiName;
  }


  public CreateBackendAPIRequestResourceConfig conflictResolution(CreateBackendAPIRequestResourceConfigConflictResolution conflictResolution) {
    this.conflictResolution = conflictResolution;
    return this;
  }

  /**
   * Get conflictResolution
   * @return conflictResolution
   */
  @javax.annotation.Nullable
  public CreateBackendAPIRequestResourceConfigConflictResolution getConflictResolution() {
    return conflictResolution;
  }

  public void setConflictResolution(CreateBackendAPIRequestResourceConfigConflictResolution conflictResolution) {
    this.conflictResolution = conflictResolution;
  }


  public CreateBackendAPIRequestResourceConfig defaultAuthType(CreateBackendAPIRequestResourceConfigDefaultAuthType defaultAuthType) {
    this.defaultAuthType = defaultAuthType;
    return this;
  }

  /**
   * Get defaultAuthType
   * @return defaultAuthType
   */
  @javax.annotation.Nullable
  public CreateBackendAPIRequestResourceConfigDefaultAuthType getDefaultAuthType() {
    return defaultAuthType;
  }

  public void setDefaultAuthType(CreateBackendAPIRequestResourceConfigDefaultAuthType defaultAuthType) {
    this.defaultAuthType = defaultAuthType;
  }


  public CreateBackendAPIRequestResourceConfig service(String service) {
    this.service = service;
    return this;
  }

  /**
   * Get service
   * @return service
   */
  @javax.annotation.Nullable
  public String getService() {
    return service;
  }

  public void setService(String service) {
    this.service = service;
  }


  public CreateBackendAPIRequestResourceConfig transformSchema(String transformSchema) {
    this.transformSchema = transformSchema;
    return this;
  }

  /**
   * Get transformSchema
   * @return transformSchema
   */
  @javax.annotation.Nullable
  public String getTransformSchema() {
    return transformSchema;
  }

  public void setTransformSchema(String transformSchema) {
    this.transformSchema = transformSchema;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateBackendAPIRequestResourceConfig createBackendAPIRequestResourceConfig = (CreateBackendAPIRequestResourceConfig) o;
    return Objects.equals(this.additionalAuthTypes, createBackendAPIRequestResourceConfig.additionalAuthTypes) &&
        Objects.equals(this.apiName, createBackendAPIRequestResourceConfig.apiName) &&
        Objects.equals(this.conflictResolution, createBackendAPIRequestResourceConfig.conflictResolution) &&
        Objects.equals(this.defaultAuthType, createBackendAPIRequestResourceConfig.defaultAuthType) &&
        Objects.equals(this.service, createBackendAPIRequestResourceConfig.service) &&
        Objects.equals(this.transformSchema, createBackendAPIRequestResourceConfig.transformSchema);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalAuthTypes, apiName, conflictResolution, defaultAuthType, service, transformSchema);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateBackendAPIRequestResourceConfig {\n");
    sb.append("    additionalAuthTypes: ").append(toIndentedString(additionalAuthTypes)).append("\n");
    sb.append("    apiName: ").append(toIndentedString(apiName)).append("\n");
    sb.append("    conflictResolution: ").append(toIndentedString(conflictResolution)).append("\n");
    sb.append("    defaultAuthType: ").append(toIndentedString(defaultAuthType)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    transformSchema: ").append(toIndentedString(transformSchema)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AdditionalAuthTypes");
    openapiFields.add("ApiName");
    openapiFields.add("ConflictResolution");
    openapiFields.add("DefaultAuthType");
    openapiFields.add("Service");
    openapiFields.add("TransformSchema");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateBackendAPIRequestResourceConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateBackendAPIRequestResourceConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateBackendAPIRequestResourceConfig is not found in the empty JSON string", CreateBackendAPIRequestResourceConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateBackendAPIRequestResourceConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateBackendAPIRequestResourceConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AdditionalAuthTypes`
      if (jsonObj.get("AdditionalAuthTypes") != null && !jsonObj.get("AdditionalAuthTypes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AdditionalAuthTypes"));
      }
      // validate the optional field `ApiName`
      if (jsonObj.get("ApiName") != null && !jsonObj.get("ApiName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ApiName"));
      }
      // validate the optional field `ConflictResolution`
      if (jsonObj.get("ConflictResolution") != null && !jsonObj.get("ConflictResolution").isJsonNull()) {
        CreateBackendAPIRequestResourceConfigConflictResolution.validateJsonElement(jsonObj.get("ConflictResolution"));
      }
      // validate the optional field `DefaultAuthType`
      if (jsonObj.get("DefaultAuthType") != null && !jsonObj.get("DefaultAuthType").isJsonNull()) {
        CreateBackendAPIRequestResourceConfigDefaultAuthType.validateJsonElement(jsonObj.get("DefaultAuthType"));
      }
      // validate the optional field `Service`
      if (jsonObj.get("Service") != null && !jsonObj.get("Service").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Service"));
      }
      // validate the optional field `TransformSchema`
      if (jsonObj.get("TransformSchema") != null && !jsonObj.get("TransformSchema").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TransformSchema"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateBackendAPIRequestResourceConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateBackendAPIRequestResourceConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateBackendAPIRequestResourceConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateBackendAPIRequestResourceConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateBackendAPIRequestResourceConfig>() {
           @Override
           public void write(JsonWriter out, CreateBackendAPIRequestResourceConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateBackendAPIRequestResourceConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateBackendAPIRequestResourceConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateBackendAPIRequestResourceConfig
   * @throws IOException if the JSON string is invalid with respect to CreateBackendAPIRequestResourceConfig
   */
  public static CreateBackendAPIRequestResourceConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateBackendAPIRequestResourceConfig.class);
  }

  /**
   * Convert an instance of CreateBackendAPIRequestResourceConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

