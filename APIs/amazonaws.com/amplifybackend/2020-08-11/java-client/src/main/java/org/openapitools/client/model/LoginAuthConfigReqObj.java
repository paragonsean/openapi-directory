/*
 * AmplifyBackend
 * AWS Amplify Admin API
 *
 * The version of the OpenAPI document: 2020-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request object for this operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:00.740082-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LoginAuthConfigReqObj {
  public static final String SERIALIZED_NAME_AWS_COGNITO_IDENTITY_POOL_ID = "AwsCognitoIdentityPoolId";
  @SerializedName(SERIALIZED_NAME_AWS_COGNITO_IDENTITY_POOL_ID)
  private String awsCognitoIdentityPoolId;

  public static final String SERIALIZED_NAME_AWS_COGNITO_REGION = "AwsCognitoRegion";
  @SerializedName(SERIALIZED_NAME_AWS_COGNITO_REGION)
  private String awsCognitoRegion;

  public static final String SERIALIZED_NAME_AWS_USER_POOLS_ID = "AwsUserPoolsId";
  @SerializedName(SERIALIZED_NAME_AWS_USER_POOLS_ID)
  private String awsUserPoolsId;

  public static final String SERIALIZED_NAME_AWS_USER_POOLS_WEB_CLIENT_ID = "AwsUserPoolsWebClientId";
  @SerializedName(SERIALIZED_NAME_AWS_USER_POOLS_WEB_CLIENT_ID)
  private String awsUserPoolsWebClientId;

  public LoginAuthConfigReqObj() {
  }

  public LoginAuthConfigReqObj awsCognitoIdentityPoolId(String awsCognitoIdentityPoolId) {
    this.awsCognitoIdentityPoolId = awsCognitoIdentityPoolId;
    return this;
  }

  /**
   * Get awsCognitoIdentityPoolId
   * @return awsCognitoIdentityPoolId
   */
  @javax.annotation.Nullable
  public String getAwsCognitoIdentityPoolId() {
    return awsCognitoIdentityPoolId;
  }

  public void setAwsCognitoIdentityPoolId(String awsCognitoIdentityPoolId) {
    this.awsCognitoIdentityPoolId = awsCognitoIdentityPoolId;
  }


  public LoginAuthConfigReqObj awsCognitoRegion(String awsCognitoRegion) {
    this.awsCognitoRegion = awsCognitoRegion;
    return this;
  }

  /**
   * Get awsCognitoRegion
   * @return awsCognitoRegion
   */
  @javax.annotation.Nullable
  public String getAwsCognitoRegion() {
    return awsCognitoRegion;
  }

  public void setAwsCognitoRegion(String awsCognitoRegion) {
    this.awsCognitoRegion = awsCognitoRegion;
  }


  public LoginAuthConfigReqObj awsUserPoolsId(String awsUserPoolsId) {
    this.awsUserPoolsId = awsUserPoolsId;
    return this;
  }

  /**
   * Get awsUserPoolsId
   * @return awsUserPoolsId
   */
  @javax.annotation.Nullable
  public String getAwsUserPoolsId() {
    return awsUserPoolsId;
  }

  public void setAwsUserPoolsId(String awsUserPoolsId) {
    this.awsUserPoolsId = awsUserPoolsId;
  }


  public LoginAuthConfigReqObj awsUserPoolsWebClientId(String awsUserPoolsWebClientId) {
    this.awsUserPoolsWebClientId = awsUserPoolsWebClientId;
    return this;
  }

  /**
   * Get awsUserPoolsWebClientId
   * @return awsUserPoolsWebClientId
   */
  @javax.annotation.Nullable
  public String getAwsUserPoolsWebClientId() {
    return awsUserPoolsWebClientId;
  }

  public void setAwsUserPoolsWebClientId(String awsUserPoolsWebClientId) {
    this.awsUserPoolsWebClientId = awsUserPoolsWebClientId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoginAuthConfigReqObj loginAuthConfigReqObj = (LoginAuthConfigReqObj) o;
    return Objects.equals(this.awsCognitoIdentityPoolId, loginAuthConfigReqObj.awsCognitoIdentityPoolId) &&
        Objects.equals(this.awsCognitoRegion, loginAuthConfigReqObj.awsCognitoRegion) &&
        Objects.equals(this.awsUserPoolsId, loginAuthConfigReqObj.awsUserPoolsId) &&
        Objects.equals(this.awsUserPoolsWebClientId, loginAuthConfigReqObj.awsUserPoolsWebClientId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(awsCognitoIdentityPoolId, awsCognitoRegion, awsUserPoolsId, awsUserPoolsWebClientId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoginAuthConfigReqObj {\n");
    sb.append("    awsCognitoIdentityPoolId: ").append(toIndentedString(awsCognitoIdentityPoolId)).append("\n");
    sb.append("    awsCognitoRegion: ").append(toIndentedString(awsCognitoRegion)).append("\n");
    sb.append("    awsUserPoolsId: ").append(toIndentedString(awsUserPoolsId)).append("\n");
    sb.append("    awsUserPoolsWebClientId: ").append(toIndentedString(awsUserPoolsWebClientId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AwsCognitoIdentityPoolId");
    openapiFields.add("AwsCognitoRegion");
    openapiFields.add("AwsUserPoolsId");
    openapiFields.add("AwsUserPoolsWebClientId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LoginAuthConfigReqObj
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoginAuthConfigReqObj.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoginAuthConfigReqObj is not found in the empty JSON string", LoginAuthConfigReqObj.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoginAuthConfigReqObj.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoginAuthConfigReqObj` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AwsCognitoIdentityPoolId`
      if (jsonObj.get("AwsCognitoIdentityPoolId") != null && !jsonObj.get("AwsCognitoIdentityPoolId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AwsCognitoIdentityPoolId"));
      }
      // validate the optional field `AwsCognitoRegion`
      if (jsonObj.get("AwsCognitoRegion") != null && !jsonObj.get("AwsCognitoRegion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AwsCognitoRegion"));
      }
      // validate the optional field `AwsUserPoolsId`
      if (jsonObj.get("AwsUserPoolsId") != null && !jsonObj.get("AwsUserPoolsId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AwsUserPoolsId"));
      }
      // validate the optional field `AwsUserPoolsWebClientId`
      if (jsonObj.get("AwsUserPoolsWebClientId") != null && !jsonObj.get("AwsUserPoolsWebClientId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AwsUserPoolsWebClientId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoginAuthConfigReqObj.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoginAuthConfigReqObj' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoginAuthConfigReqObj> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoginAuthConfigReqObj.class));

       return (TypeAdapter<T>) new TypeAdapter<LoginAuthConfigReqObj>() {
           @Override
           public void write(JsonWriter out, LoginAuthConfigReqObj value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoginAuthConfigReqObj read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LoginAuthConfigReqObj given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LoginAuthConfigReqObj
   * @throws IOException if the JSON string is invalid with respect to LoginAuthConfigReqObj
   */
  public static LoginAuthConfigReqObj fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoginAuthConfigReqObj.class);
  }

  /**
   * Convert an instance of LoginAuthConfigReqObj to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

