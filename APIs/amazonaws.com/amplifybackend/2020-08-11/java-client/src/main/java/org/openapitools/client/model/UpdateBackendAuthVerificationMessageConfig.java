/*
 * AmplifyBackend
 * AWS Amplify Admin API
 *
 * The version of the OpenAPI document: 2020-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateBackendAuthVerificationMessageConfigEmailSettings;
import org.openapitools.client.model.CreateBackendAuthVerificationMessageConfigSmsSettings;
import org.openapitools.client.model.DeliveryMethod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Updates the configuration of the email or SMS message for the auth resource configured for your Amplify project.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:00.740082-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateBackendAuthVerificationMessageConfig {
  public static final String SERIALIZED_NAME_DELIVERY_METHOD = "DeliveryMethod";
  @SerializedName(SERIALIZED_NAME_DELIVERY_METHOD)
  private DeliveryMethod deliveryMethod;

  public static final String SERIALIZED_NAME_EMAIL_SETTINGS = "EmailSettings";
  @SerializedName(SERIALIZED_NAME_EMAIL_SETTINGS)
  private CreateBackendAuthVerificationMessageConfigEmailSettings emailSettings;

  public static final String SERIALIZED_NAME_SMS_SETTINGS = "SmsSettings";
  @SerializedName(SERIALIZED_NAME_SMS_SETTINGS)
  private CreateBackendAuthVerificationMessageConfigSmsSettings smsSettings;

  public UpdateBackendAuthVerificationMessageConfig() {
  }

  public UpdateBackendAuthVerificationMessageConfig deliveryMethod(DeliveryMethod deliveryMethod) {
    this.deliveryMethod = deliveryMethod;
    return this;
  }

  /**
   * Get deliveryMethod
   * @return deliveryMethod
   */
  @javax.annotation.Nonnull
  public DeliveryMethod getDeliveryMethod() {
    return deliveryMethod;
  }

  public void setDeliveryMethod(DeliveryMethod deliveryMethod) {
    this.deliveryMethod = deliveryMethod;
  }


  public UpdateBackendAuthVerificationMessageConfig emailSettings(CreateBackendAuthVerificationMessageConfigEmailSettings emailSettings) {
    this.emailSettings = emailSettings;
    return this;
  }

  /**
   * Get emailSettings
   * @return emailSettings
   */
  @javax.annotation.Nullable
  public CreateBackendAuthVerificationMessageConfigEmailSettings getEmailSettings() {
    return emailSettings;
  }

  public void setEmailSettings(CreateBackendAuthVerificationMessageConfigEmailSettings emailSettings) {
    this.emailSettings = emailSettings;
  }


  public UpdateBackendAuthVerificationMessageConfig smsSettings(CreateBackendAuthVerificationMessageConfigSmsSettings smsSettings) {
    this.smsSettings = smsSettings;
    return this;
  }

  /**
   * Get smsSettings
   * @return smsSettings
   */
  @javax.annotation.Nullable
  public CreateBackendAuthVerificationMessageConfigSmsSettings getSmsSettings() {
    return smsSettings;
  }

  public void setSmsSettings(CreateBackendAuthVerificationMessageConfigSmsSettings smsSettings) {
    this.smsSettings = smsSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateBackendAuthVerificationMessageConfig updateBackendAuthVerificationMessageConfig = (UpdateBackendAuthVerificationMessageConfig) o;
    return Objects.equals(this.deliveryMethod, updateBackendAuthVerificationMessageConfig.deliveryMethod) &&
        Objects.equals(this.emailSettings, updateBackendAuthVerificationMessageConfig.emailSettings) &&
        Objects.equals(this.smsSettings, updateBackendAuthVerificationMessageConfig.smsSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deliveryMethod, emailSettings, smsSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateBackendAuthVerificationMessageConfig {\n");
    sb.append("    deliveryMethod: ").append(toIndentedString(deliveryMethod)).append("\n");
    sb.append("    emailSettings: ").append(toIndentedString(emailSettings)).append("\n");
    sb.append("    smsSettings: ").append(toIndentedString(smsSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DeliveryMethod");
    openapiFields.add("EmailSettings");
    openapiFields.add("SmsSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DeliveryMethod");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateBackendAuthVerificationMessageConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateBackendAuthVerificationMessageConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateBackendAuthVerificationMessageConfig is not found in the empty JSON string", UpdateBackendAuthVerificationMessageConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateBackendAuthVerificationMessageConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateBackendAuthVerificationMessageConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateBackendAuthVerificationMessageConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DeliveryMethod`
      DeliveryMethod.validateJsonElement(jsonObj.get("DeliveryMethod"));
      // validate the optional field `EmailSettings`
      if (jsonObj.get("EmailSettings") != null && !jsonObj.get("EmailSettings").isJsonNull()) {
        CreateBackendAuthVerificationMessageConfigEmailSettings.validateJsonElement(jsonObj.get("EmailSettings"));
      }
      // validate the optional field `SmsSettings`
      if (jsonObj.get("SmsSettings") != null && !jsonObj.get("SmsSettings").isJsonNull()) {
        CreateBackendAuthVerificationMessageConfigSmsSettings.validateJsonElement(jsonObj.get("SmsSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateBackendAuthVerificationMessageConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateBackendAuthVerificationMessageConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateBackendAuthVerificationMessageConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateBackendAuthVerificationMessageConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateBackendAuthVerificationMessageConfig>() {
           @Override
           public void write(JsonWriter out, UpdateBackendAuthVerificationMessageConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateBackendAuthVerificationMessageConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateBackendAuthVerificationMessageConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateBackendAuthVerificationMessageConfig
   * @throws IOException if the JSON string is invalid with respect to UpdateBackendAuthVerificationMessageConfig
   */
  public static UpdateBackendAuthVerificationMessageConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateBackendAuthVerificationMessageConfig.class);
  }

  /**
   * Convert an instance of UpdateBackendAuthVerificationMessageConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

