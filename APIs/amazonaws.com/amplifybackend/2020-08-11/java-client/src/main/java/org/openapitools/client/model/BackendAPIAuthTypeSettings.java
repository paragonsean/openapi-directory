/*
 * AmplifyBackend
 * AWS Amplify Admin API
 *
 * The version of the OpenAPI document: 2020-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BackendAPIAuthTypeSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:00.740082-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BackendAPIAuthTypeSettings {
  public static final String SERIALIZED_NAME_COGNITO_USER_POOL_ID = "CognitoUserPoolId";
  @SerializedName(SERIALIZED_NAME_COGNITO_USER_POOL_ID)
  private String cognitoUserPoolId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXPIRATION_TIME = "ExpirationTime";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_TIME)
  private Double expirationTime;

  public static final String SERIALIZED_NAME_OPEN_I_D_AUTH_T_T_L = "OpenIDAuthTTL";
  @SerializedName(SERIALIZED_NAME_OPEN_I_D_AUTH_T_T_L)
  private String openIDAuthTTL;

  public static final String SERIALIZED_NAME_OPEN_I_D_CLIENT_ID = "OpenIDClientId";
  @SerializedName(SERIALIZED_NAME_OPEN_I_D_CLIENT_ID)
  private String openIDClientId;

  public static final String SERIALIZED_NAME_OPEN_I_D_IAT_T_T_L = "OpenIDIatTTL";
  @SerializedName(SERIALIZED_NAME_OPEN_I_D_IAT_T_T_L)
  private String openIDIatTTL;

  public static final String SERIALIZED_NAME_OPEN_I_D_ISSUE_U_R_L = "OpenIDIssueURL";
  @SerializedName(SERIALIZED_NAME_OPEN_I_D_ISSUE_U_R_L)
  private String openIDIssueURL;

  public static final String SERIALIZED_NAME_OPEN_I_D_PROVIDER_NAME = "OpenIDProviderName";
  @SerializedName(SERIALIZED_NAME_OPEN_I_D_PROVIDER_NAME)
  private String openIDProviderName;

  public BackendAPIAuthTypeSettings() {
  }

  public BackendAPIAuthTypeSettings cognitoUserPoolId(String cognitoUserPoolId) {
    this.cognitoUserPoolId = cognitoUserPoolId;
    return this;
  }

  /**
   * Get cognitoUserPoolId
   * @return cognitoUserPoolId
   */
  @javax.annotation.Nullable
  public String getCognitoUserPoolId() {
    return cognitoUserPoolId;
  }

  public void setCognitoUserPoolId(String cognitoUserPoolId) {
    this.cognitoUserPoolId = cognitoUserPoolId;
  }


  public BackendAPIAuthTypeSettings description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public BackendAPIAuthTypeSettings expirationTime(Double expirationTime) {
    this.expirationTime = expirationTime;
    return this;
  }

  /**
   * Get expirationTime
   * @return expirationTime
   */
  @javax.annotation.Nullable
  public Double getExpirationTime() {
    return expirationTime;
  }

  public void setExpirationTime(Double expirationTime) {
    this.expirationTime = expirationTime;
  }


  public BackendAPIAuthTypeSettings openIDAuthTTL(String openIDAuthTTL) {
    this.openIDAuthTTL = openIDAuthTTL;
    return this;
  }

  /**
   * Get openIDAuthTTL
   * @return openIDAuthTTL
   */
  @javax.annotation.Nullable
  public String getOpenIDAuthTTL() {
    return openIDAuthTTL;
  }

  public void setOpenIDAuthTTL(String openIDAuthTTL) {
    this.openIDAuthTTL = openIDAuthTTL;
  }


  public BackendAPIAuthTypeSettings openIDClientId(String openIDClientId) {
    this.openIDClientId = openIDClientId;
    return this;
  }

  /**
   * Get openIDClientId
   * @return openIDClientId
   */
  @javax.annotation.Nullable
  public String getOpenIDClientId() {
    return openIDClientId;
  }

  public void setOpenIDClientId(String openIDClientId) {
    this.openIDClientId = openIDClientId;
  }


  public BackendAPIAuthTypeSettings openIDIatTTL(String openIDIatTTL) {
    this.openIDIatTTL = openIDIatTTL;
    return this;
  }

  /**
   * Get openIDIatTTL
   * @return openIDIatTTL
   */
  @javax.annotation.Nullable
  public String getOpenIDIatTTL() {
    return openIDIatTTL;
  }

  public void setOpenIDIatTTL(String openIDIatTTL) {
    this.openIDIatTTL = openIDIatTTL;
  }


  public BackendAPIAuthTypeSettings openIDIssueURL(String openIDIssueURL) {
    this.openIDIssueURL = openIDIssueURL;
    return this;
  }

  /**
   * Get openIDIssueURL
   * @return openIDIssueURL
   */
  @javax.annotation.Nullable
  public String getOpenIDIssueURL() {
    return openIDIssueURL;
  }

  public void setOpenIDIssueURL(String openIDIssueURL) {
    this.openIDIssueURL = openIDIssueURL;
  }


  public BackendAPIAuthTypeSettings openIDProviderName(String openIDProviderName) {
    this.openIDProviderName = openIDProviderName;
    return this;
  }

  /**
   * Get openIDProviderName
   * @return openIDProviderName
   */
  @javax.annotation.Nullable
  public String getOpenIDProviderName() {
    return openIDProviderName;
  }

  public void setOpenIDProviderName(String openIDProviderName) {
    this.openIDProviderName = openIDProviderName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackendAPIAuthTypeSettings backendAPIAuthTypeSettings = (BackendAPIAuthTypeSettings) o;
    return Objects.equals(this.cognitoUserPoolId, backendAPIAuthTypeSettings.cognitoUserPoolId) &&
        Objects.equals(this.description, backendAPIAuthTypeSettings.description) &&
        Objects.equals(this.expirationTime, backendAPIAuthTypeSettings.expirationTime) &&
        Objects.equals(this.openIDAuthTTL, backendAPIAuthTypeSettings.openIDAuthTTL) &&
        Objects.equals(this.openIDClientId, backendAPIAuthTypeSettings.openIDClientId) &&
        Objects.equals(this.openIDIatTTL, backendAPIAuthTypeSettings.openIDIatTTL) &&
        Objects.equals(this.openIDIssueURL, backendAPIAuthTypeSettings.openIDIssueURL) &&
        Objects.equals(this.openIDProviderName, backendAPIAuthTypeSettings.openIDProviderName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cognitoUserPoolId, description, expirationTime, openIDAuthTTL, openIDClientId, openIDIatTTL, openIDIssueURL, openIDProviderName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackendAPIAuthTypeSettings {\n");
    sb.append("    cognitoUserPoolId: ").append(toIndentedString(cognitoUserPoolId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expirationTime: ").append(toIndentedString(expirationTime)).append("\n");
    sb.append("    openIDAuthTTL: ").append(toIndentedString(openIDAuthTTL)).append("\n");
    sb.append("    openIDClientId: ").append(toIndentedString(openIDClientId)).append("\n");
    sb.append("    openIDIatTTL: ").append(toIndentedString(openIDIatTTL)).append("\n");
    sb.append("    openIDIssueURL: ").append(toIndentedString(openIDIssueURL)).append("\n");
    sb.append("    openIDProviderName: ").append(toIndentedString(openIDProviderName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CognitoUserPoolId");
    openapiFields.add("Description");
    openapiFields.add("ExpirationTime");
    openapiFields.add("OpenIDAuthTTL");
    openapiFields.add("OpenIDClientId");
    openapiFields.add("OpenIDIatTTL");
    openapiFields.add("OpenIDIssueURL");
    openapiFields.add("OpenIDProviderName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BackendAPIAuthTypeSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BackendAPIAuthTypeSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BackendAPIAuthTypeSettings is not found in the empty JSON string", BackendAPIAuthTypeSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BackendAPIAuthTypeSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BackendAPIAuthTypeSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CognitoUserPoolId`
      if (jsonObj.get("CognitoUserPoolId") != null && !jsonObj.get("CognitoUserPoolId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CognitoUserPoolId"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `ExpirationTime`
      if (jsonObj.get("ExpirationTime") != null && !jsonObj.get("ExpirationTime").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("ExpirationTime"));
      }
      // validate the optional field `OpenIDAuthTTL`
      if (jsonObj.get("OpenIDAuthTTL") != null && !jsonObj.get("OpenIDAuthTTL").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OpenIDAuthTTL"));
      }
      // validate the optional field `OpenIDClientId`
      if (jsonObj.get("OpenIDClientId") != null && !jsonObj.get("OpenIDClientId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OpenIDClientId"));
      }
      // validate the optional field `OpenIDIatTTL`
      if (jsonObj.get("OpenIDIatTTL") != null && !jsonObj.get("OpenIDIatTTL").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OpenIDIatTTL"));
      }
      // validate the optional field `OpenIDIssueURL`
      if (jsonObj.get("OpenIDIssueURL") != null && !jsonObj.get("OpenIDIssueURL").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OpenIDIssueURL"));
      }
      // validate the optional field `OpenIDProviderName`
      if (jsonObj.get("OpenIDProviderName") != null && !jsonObj.get("OpenIDProviderName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OpenIDProviderName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BackendAPIAuthTypeSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BackendAPIAuthTypeSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BackendAPIAuthTypeSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BackendAPIAuthTypeSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<BackendAPIAuthTypeSettings>() {
           @Override
           public void write(JsonWriter out, BackendAPIAuthTypeSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BackendAPIAuthTypeSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BackendAPIAuthTypeSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BackendAPIAuthTypeSettings
   * @throws IOException if the JSON string is invalid with respect to BackendAPIAuthTypeSettings
   */
  public static BackendAPIAuthTypeSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BackendAPIAuthTypeSettings.class);
  }

  /**
   * Convert an instance of BackendAPIAuthTypeSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

