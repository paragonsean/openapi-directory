/*
 * AmplifyBackend
 * AWS Amplify Admin API
 *
 * The version of the OpenAPI document: 2020-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetBackendResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:00.740082-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetBackendResponse {
  public static final String SERIALIZED_NAME_AMPLIFY_FEATURE_FLAGS = "AmplifyFeatureFlags";
  @SerializedName(SERIALIZED_NAME_AMPLIFY_FEATURE_FLAGS)
  private String amplifyFeatureFlags;

  public static final String SERIALIZED_NAME_AMPLIFY_META_CONFIG = "AmplifyMetaConfig";
  @SerializedName(SERIALIZED_NAME_AMPLIFY_META_CONFIG)
  private String amplifyMetaConfig;

  public static final String SERIALIZED_NAME_APP_ID = "AppId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_APP_NAME = "AppName";
  @SerializedName(SERIALIZED_NAME_APP_NAME)
  private String appName;

  public static final String SERIALIZED_NAME_BACKEND_ENVIRONMENT_LIST = "BackendEnvironmentList";
  @SerializedName(SERIALIZED_NAME_BACKEND_ENVIRONMENT_LIST)
  private List backendEnvironmentList;

  public static final String SERIALIZED_NAME_BACKEND_ENVIRONMENT_NAME = "BackendEnvironmentName";
  @SerializedName(SERIALIZED_NAME_BACKEND_ENVIRONMENT_NAME)
  private String backendEnvironmentName;

  public static final String SERIALIZED_NAME_ERROR = "Error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public GetBackendResponse() {
  }

  public GetBackendResponse amplifyFeatureFlags(String amplifyFeatureFlags) {
    this.amplifyFeatureFlags = amplifyFeatureFlags;
    return this;
  }

  /**
   * Get amplifyFeatureFlags
   * @return amplifyFeatureFlags
   */
  @javax.annotation.Nullable
  public String getAmplifyFeatureFlags() {
    return amplifyFeatureFlags;
  }

  public void setAmplifyFeatureFlags(String amplifyFeatureFlags) {
    this.amplifyFeatureFlags = amplifyFeatureFlags;
  }


  public GetBackendResponse amplifyMetaConfig(String amplifyMetaConfig) {
    this.amplifyMetaConfig = amplifyMetaConfig;
    return this;
  }

  /**
   * Get amplifyMetaConfig
   * @return amplifyMetaConfig
   */
  @javax.annotation.Nullable
  public String getAmplifyMetaConfig() {
    return amplifyMetaConfig;
  }

  public void setAmplifyMetaConfig(String amplifyMetaConfig) {
    this.amplifyMetaConfig = amplifyMetaConfig;
  }


  public GetBackendResponse appId(String appId) {
    this.appId = appId;
    return this;
  }

  /**
   * Get appId
   * @return appId
   */
  @javax.annotation.Nullable
  public String getAppId() {
    return appId;
  }

  public void setAppId(String appId) {
    this.appId = appId;
  }


  public GetBackendResponse appName(String appName) {
    this.appName = appName;
    return this;
  }

  /**
   * Get appName
   * @return appName
   */
  @javax.annotation.Nullable
  public String getAppName() {
    return appName;
  }

  public void setAppName(String appName) {
    this.appName = appName;
  }


  public GetBackendResponse backendEnvironmentList(List backendEnvironmentList) {
    this.backendEnvironmentList = backendEnvironmentList;
    return this;
  }

  /**
   * Get backendEnvironmentList
   * @return backendEnvironmentList
   */
  @javax.annotation.Nullable
  public List getBackendEnvironmentList() {
    return backendEnvironmentList;
  }

  public void setBackendEnvironmentList(List backendEnvironmentList) {
    this.backendEnvironmentList = backendEnvironmentList;
  }


  public GetBackendResponse backendEnvironmentName(String backendEnvironmentName) {
    this.backendEnvironmentName = backendEnvironmentName;
    return this;
  }

  /**
   * Get backendEnvironmentName
   * @return backendEnvironmentName
   */
  @javax.annotation.Nullable
  public String getBackendEnvironmentName() {
    return backendEnvironmentName;
  }

  public void setBackendEnvironmentName(String backendEnvironmentName) {
    this.backendEnvironmentName = backendEnvironmentName;
  }


  public GetBackendResponse error(String error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetBackendResponse getBackendResponse = (GetBackendResponse) o;
    return Objects.equals(this.amplifyFeatureFlags, getBackendResponse.amplifyFeatureFlags) &&
        Objects.equals(this.amplifyMetaConfig, getBackendResponse.amplifyMetaConfig) &&
        Objects.equals(this.appId, getBackendResponse.appId) &&
        Objects.equals(this.appName, getBackendResponse.appName) &&
        Objects.equals(this.backendEnvironmentList, getBackendResponse.backendEnvironmentList) &&
        Objects.equals(this.backendEnvironmentName, getBackendResponse.backendEnvironmentName) &&
        Objects.equals(this.error, getBackendResponse.error);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amplifyFeatureFlags, amplifyMetaConfig, appId, appName, backendEnvironmentList, backendEnvironmentName, error);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetBackendResponse {\n");
    sb.append("    amplifyFeatureFlags: ").append(toIndentedString(amplifyFeatureFlags)).append("\n");
    sb.append("    amplifyMetaConfig: ").append(toIndentedString(amplifyMetaConfig)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    appName: ").append(toIndentedString(appName)).append("\n");
    sb.append("    backendEnvironmentList: ").append(toIndentedString(backendEnvironmentList)).append("\n");
    sb.append("    backendEnvironmentName: ").append(toIndentedString(backendEnvironmentName)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AmplifyFeatureFlags");
    openapiFields.add("AmplifyMetaConfig");
    openapiFields.add("AppId");
    openapiFields.add("AppName");
    openapiFields.add("BackendEnvironmentList");
    openapiFields.add("BackendEnvironmentName");
    openapiFields.add("Error");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetBackendResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetBackendResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetBackendResponse is not found in the empty JSON string", GetBackendResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetBackendResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetBackendResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AmplifyFeatureFlags`
      if (jsonObj.get("AmplifyFeatureFlags") != null && !jsonObj.get("AmplifyFeatureFlags").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AmplifyFeatureFlags"));
      }
      // validate the optional field `AmplifyMetaConfig`
      if (jsonObj.get("AmplifyMetaConfig") != null && !jsonObj.get("AmplifyMetaConfig").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AmplifyMetaConfig"));
      }
      // validate the optional field `AppId`
      if (jsonObj.get("AppId") != null && !jsonObj.get("AppId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AppId"));
      }
      // validate the optional field `AppName`
      if (jsonObj.get("AppName") != null && !jsonObj.get("AppName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AppName"));
      }
      // validate the optional field `BackendEnvironmentList`
      if (jsonObj.get("BackendEnvironmentList") != null && !jsonObj.get("BackendEnvironmentList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("BackendEnvironmentList"));
      }
      // validate the optional field `BackendEnvironmentName`
      if (jsonObj.get("BackendEnvironmentName") != null && !jsonObj.get("BackendEnvironmentName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BackendEnvironmentName"));
      }
      // validate the optional field `Error`
      if (jsonObj.get("Error") != null && !jsonObj.get("Error").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Error"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetBackendResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetBackendResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetBackendResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetBackendResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetBackendResponse>() {
           @Override
           public void write(JsonWriter out, GetBackendResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetBackendResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetBackendResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetBackendResponse
   * @throws IOException if the JSON string is invalid with respect to GetBackendResponse
   */
  public static GetBackendResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetBackendResponse.class);
  }

  /**
   * Convert an instance of GetBackendResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

