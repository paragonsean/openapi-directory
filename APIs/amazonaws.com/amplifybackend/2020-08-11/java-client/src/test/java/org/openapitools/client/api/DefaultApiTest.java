/*
 * AmplifyBackend
 * AWS Amplify Admin API
 *
 * The version of the OpenAPI document: 2020-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CloneBackendRequest;
import org.openapitools.client.model.CloneBackendResponse;
import org.openapitools.client.model.CreateBackendAPIRequest;
import org.openapitools.client.model.CreateBackendAPIResponse;
import org.openapitools.client.model.CreateBackendAuthRequest;
import org.openapitools.client.model.CreateBackendAuthResponse;
import org.openapitools.client.model.CreateBackendConfigRequest;
import org.openapitools.client.model.CreateBackendConfigResponse;
import org.openapitools.client.model.CreateBackendRequest;
import org.openapitools.client.model.CreateBackendResponse;
import org.openapitools.client.model.CreateBackendStorageRequest;
import org.openapitools.client.model.CreateBackendStorageResponse;
import org.openapitools.client.model.CreateTokenResponse;
import org.openapitools.client.model.DeleteBackendAPIRequest;
import org.openapitools.client.model.DeleteBackendAPIResponse;
import org.openapitools.client.model.DeleteBackendAuthRequest;
import org.openapitools.client.model.DeleteBackendAuthResponse;
import org.openapitools.client.model.DeleteBackendResponse;
import org.openapitools.client.model.DeleteBackendStorageRequest;
import org.openapitools.client.model.DeleteBackendStorageResponse;
import org.openapitools.client.model.DeleteTokenResponse;
import org.openapitools.client.model.GenerateBackendAPIModelsResponse;
import org.openapitools.client.model.GetBackendAPIModelsResponse;
import org.openapitools.client.model.GetBackendAPIResponse;
import org.openapitools.client.model.GetBackendAuthResponse;
import org.openapitools.client.model.GetBackendJobResponse;
import org.openapitools.client.model.GetBackendRequest;
import org.openapitools.client.model.GetBackendResponse;
import org.openapitools.client.model.GetBackendStorageRequest;
import org.openapitools.client.model.GetBackendStorageResponse;
import org.openapitools.client.model.GetTokenResponse;
import org.openapitools.client.model.ImportBackendAuthRequest;
import org.openapitools.client.model.ImportBackendAuthResponse;
import org.openapitools.client.model.ImportBackendStorageRequest;
import org.openapitools.client.model.ImportBackendStorageResponse;
import org.openapitools.client.model.ListBackendJobsRequest;
import org.openapitools.client.model.ListBackendJobsResponse;
import org.openapitools.client.model.ListS3BucketsRequest;
import org.openapitools.client.model.ListS3BucketsResponse;
import org.openapitools.client.model.RemoveAllBackendsRequest;
import org.openapitools.client.model.RemoveAllBackendsResponse;
import org.openapitools.client.model.RemoveBackendConfigResponse;
import org.openapitools.client.model.UpdateBackendAPIResponse;
import org.openapitools.client.model.UpdateBackendAuthRequest;
import org.openapitools.client.model.UpdateBackendAuthResponse;
import org.openapitools.client.model.UpdateBackendConfigRequest;
import org.openapitools.client.model.UpdateBackendConfigResponse;
import org.openapitools.client.model.UpdateBackendJobRequest;
import org.openapitools.client.model.UpdateBackendJobResponse;
import org.openapitools.client.model.UpdateBackendStorageRequest;
import org.openapitools.client.model.UpdateBackendStorageResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * This operation clones an existing backend.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloneBackendTest() throws ApiException {
        String appId = null;
        String backendEnvironmentName = null;
        CloneBackendRequest cloneBackendRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CloneBackendResponse response = api.cloneBackend(appId, backendEnvironmentName, cloneBackendRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * This operation creates a backend for an Amplify app. Backends are automatically created at the time of app creation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBackendTest() throws ApiException {
        CreateBackendRequest createBackendRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateBackendResponse response = api.createBackend(createBackendRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new backend API resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBackendAPITest() throws ApiException {
        String appId = null;
        CreateBackendAPIRequest createBackendAPIRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateBackendAPIResponse response = api.createBackendAPI(appId, createBackendAPIRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new backend authentication resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBackendAuthTest() throws ApiException {
        String appId = null;
        CreateBackendAuthRequest createBackendAuthRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateBackendAuthResponse response = api.createBackendAuth(appId, createBackendAuthRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a config object for a backend.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBackendConfigTest() throws ApiException {
        String appId = null;
        CreateBackendConfigRequest createBackendConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateBackendConfigResponse response = api.createBackendConfig(appId, createBackendConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a backend storage resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBackendStorageTest() throws ApiException {
        String appId = null;
        CreateBackendStorageRequest createBackendStorageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateBackendStorageResponse response = api.createBackendStorage(appId, createBackendStorageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Generates a one-time challenge code to authenticate a user into your Amplify Admin UI.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTokenTest() throws ApiException {
        String appId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateTokenResponse response = api.createToken(appId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes an existing environment from your Amplify project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBackendTest() throws ApiException {
        String appId = null;
        String backendEnvironmentName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteBackendResponse response = api.deleteBackend(appId, backendEnvironmentName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an existing backend API resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBackendAPITest() throws ApiException {
        String appId = null;
        String backendEnvironmentName = null;
        DeleteBackendAPIRequest deleteBackendAPIRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteBackendAPIResponse response = api.deleteBackendAPI(appId, backendEnvironmentName, deleteBackendAPIRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an existing backend authentication resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBackendAuthTest() throws ApiException {
        String appId = null;
        String backendEnvironmentName = null;
        DeleteBackendAuthRequest deleteBackendAuthRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteBackendAuthResponse response = api.deleteBackendAuth(appId, backendEnvironmentName, deleteBackendAuthRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes the specified backend storage resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBackendStorageTest() throws ApiException {
        String appId = null;
        String backendEnvironmentName = null;
        DeleteBackendStorageRequest deleteBackendStorageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteBackendStorageResponse response = api.deleteBackendStorage(appId, backendEnvironmentName, deleteBackendStorageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the challenge token based on the given appId and sessionId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTokenTest() throws ApiException {
        String appId = null;
        String sessionId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteTokenResponse response = api.deleteToken(appId, sessionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Generates a model schema for an existing backend API resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateBackendAPIModelsTest() throws ApiException {
        String appId = null;
        String backendEnvironmentName = null;
        DeleteBackendAuthRequest deleteBackendAuthRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GenerateBackendAPIModelsResponse response = api.generateBackendAPIModels(appId, backendEnvironmentName, deleteBackendAuthRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Provides project-level details for your Amplify UI project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBackendTest() throws ApiException {
        String appId = null;
        GetBackendRequest getBackendRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetBackendResponse response = api.getBackend(appId, getBackendRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the details for a backend API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBackendAPITest() throws ApiException {
        String appId = null;
        String backendEnvironmentName = null;
        DeleteBackendAPIRequest deleteBackendAPIRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetBackendAPIResponse response = api.getBackendAPI(appId, backendEnvironmentName, deleteBackendAPIRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a model introspection schema for an existing backend API resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBackendAPIModelsTest() throws ApiException {
        String appId = null;
        String backendEnvironmentName = null;
        DeleteBackendAuthRequest deleteBackendAuthRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetBackendAPIModelsResponse response = api.getBackendAPIModels(appId, backendEnvironmentName, deleteBackendAuthRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a backend auth details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBackendAuthTest() throws ApiException {
        String appId = null;
        String backendEnvironmentName = null;
        DeleteBackendAuthRequest deleteBackendAuthRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetBackendAuthResponse response = api.getBackendAuth(appId, backendEnvironmentName, deleteBackendAuthRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about a specific job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBackendJobTest() throws ApiException {
        String appId = null;
        String backendEnvironmentName = null;
        String jobId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetBackendJobResponse response = api.getBackendJob(appId, backendEnvironmentName, jobId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets details for a backend storage resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBackendStorageTest() throws ApiException {
        String appId = null;
        String backendEnvironmentName = null;
        GetBackendStorageRequest getBackendStorageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetBackendStorageResponse response = api.getBackendStorage(appId, backendEnvironmentName, getBackendStorageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the challenge token based on the given appId and sessionId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTokenTest() throws ApiException {
        String appId = null;
        String sessionId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetTokenResponse response = api.getToken(appId, sessionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Imports an existing backend authentication resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importBackendAuthTest() throws ApiException {
        String appId = null;
        String backendEnvironmentName = null;
        ImportBackendAuthRequest importBackendAuthRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ImportBackendAuthResponse response = api.importBackendAuth(appId, backendEnvironmentName, importBackendAuthRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Imports an existing backend storage resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importBackendStorageTest() throws ApiException {
        String appId = null;
        String backendEnvironmentName = null;
        ImportBackendStorageRequest importBackendStorageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ImportBackendStorageResponse response = api.importBackendStorage(appId, backendEnvironmentName, importBackendStorageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the jobs for the backend of an Amplify app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBackendJobsTest() throws ApiException {
        String appId = null;
        String backendEnvironmentName = null;
        ListBackendJobsRequest listBackendJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListBackendJobsResponse response = api.listBackendJobs(appId, backendEnvironmentName, listBackendJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * The list of S3 buckets in your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listS3BucketsTest() throws ApiException {
        ListS3BucketsRequest listS3BucketsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListS3BucketsResponse response = api.listS3Buckets(listS3BucketsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes all backend environments from your Amplify project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeAllBackendsTest() throws ApiException {
        String appId = null;
        RemoveAllBackendsRequest removeAllBackendsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RemoveAllBackendsResponse response = api.removeAllBackends(appId, removeAllBackendsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes the AWS resources required to access the Amplify Admin UI.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeBackendConfigTest() throws ApiException {
        String appId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RemoveBackendConfigResponse response = api.removeBackendConfig(appId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing backend API resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBackendAPITest() throws ApiException {
        String appId = null;
        String backendEnvironmentName = null;
        DeleteBackendAPIRequest deleteBackendAPIRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateBackendAPIResponse response = api.updateBackendAPI(appId, backendEnvironmentName, deleteBackendAPIRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing backend authentication resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBackendAuthTest() throws ApiException {
        String appId = null;
        String backendEnvironmentName = null;
        UpdateBackendAuthRequest updateBackendAuthRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateBackendAuthResponse response = api.updateBackendAuth(appId, backendEnvironmentName, updateBackendAuthRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the AWS resources required to access the Amplify Admin UI.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBackendConfigTest() throws ApiException {
        String appId = null;
        UpdateBackendConfigRequest updateBackendConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateBackendConfigResponse response = api.updateBackendConfig(appId, updateBackendConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a specific job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBackendJobTest() throws ApiException {
        String appId = null;
        String backendEnvironmentName = null;
        String jobId = null;
        UpdateBackendJobRequest updateBackendJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateBackendJobResponse response = api.updateBackendJob(appId, backendEnvironmentName, jobId, updateBackendJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing backend storage resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBackendStorageTest() throws ApiException {
        String appId = null;
        String backendEnvironmentName = null;
        UpdateBackendStorageRequest updateBackendStorageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateBackendStorageResponse response = api.updateBackendStorage(appId, backendEnvironmentName, updateBackendStorageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
