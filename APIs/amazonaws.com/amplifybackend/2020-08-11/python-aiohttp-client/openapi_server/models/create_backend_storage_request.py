# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_backend_storage_request_resource_config import CreateBackendStorageRequestResourceConfig
from openapi_server import util


class CreateBackendStorageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backend_environment_name: str=None, resource_config: CreateBackendStorageRequestResourceConfig=None, resource_name: str=None):
        """CreateBackendStorageRequest - a model defined in OpenAPI

        :param backend_environment_name: The backend_environment_name of this CreateBackendStorageRequest.
        :param resource_config: The resource_config of this CreateBackendStorageRequest.
        :param resource_name: The resource_name of this CreateBackendStorageRequest.
        """
        self.openapi_types = {
            'backend_environment_name': str,
            'resource_config': CreateBackendStorageRequestResourceConfig,
            'resource_name': str
        }

        self.attribute_map = {
            'backend_environment_name': 'backendEnvironmentName',
            'resource_config': 'resourceConfig',
            'resource_name': 'resourceName'
        }

        self._backend_environment_name = backend_environment_name
        self._resource_config = resource_config
        self._resource_name = resource_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateBackendStorageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateBackendStorage_request of this CreateBackendStorageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backend_environment_name(self):
        """Gets the backend_environment_name of this CreateBackendStorageRequest.

        The name of the backend environment.

        :return: The backend_environment_name of this CreateBackendStorageRequest.
        :rtype: str
        """
        return self._backend_environment_name

    @backend_environment_name.setter
    def backend_environment_name(self, backend_environment_name):
        """Sets the backend_environment_name of this CreateBackendStorageRequest.

        The name of the backend environment.

        :param backend_environment_name: The backend_environment_name of this CreateBackendStorageRequest.
        :type backend_environment_name: str
        """
        if backend_environment_name is None:
            raise ValueError("Invalid value for `backend_environment_name`, must not be `None`")

        self._backend_environment_name = backend_environment_name

    @property
    def resource_config(self):
        """Gets the resource_config of this CreateBackendStorageRequest.


        :return: The resource_config of this CreateBackendStorageRequest.
        :rtype: CreateBackendStorageRequestResourceConfig
        """
        return self._resource_config

    @resource_config.setter
    def resource_config(self, resource_config):
        """Sets the resource_config of this CreateBackendStorageRequest.


        :param resource_config: The resource_config of this CreateBackendStorageRequest.
        :type resource_config: CreateBackendStorageRequestResourceConfig
        """
        if resource_config is None:
            raise ValueError("Invalid value for `resource_config`, must not be `None`")

        self._resource_config = resource_config

    @property
    def resource_name(self):
        """Gets the resource_name of this CreateBackendStorageRequest.

        The name of the storage resource.

        :return: The resource_name of this CreateBackendStorageRequest.
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this CreateBackendStorageRequest.

        The name of the storage resource.

        :param resource_name: The resource_name of this CreateBackendStorageRequest.
        :type resource_name: str
        """
        if resource_name is None:
            raise ValueError("Invalid value for `resource_name`, must not be `None`")

        self._resource_name = resource_name
