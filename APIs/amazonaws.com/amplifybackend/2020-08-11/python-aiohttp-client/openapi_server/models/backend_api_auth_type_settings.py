# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BackendAPIAuthTypeSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cognito_user_pool_id: str=None, description: str=None, expiration_time: float=None, open_id_auth_ttl: str=None, open_id_client_id: str=None, open_id_iat_ttl: str=None, open_id_issue_url: str=None, open_id_provider_name: str=None):
        """BackendAPIAuthTypeSettings - a model defined in OpenAPI

        :param cognito_user_pool_id: The cognito_user_pool_id of this BackendAPIAuthTypeSettings.
        :param description: The description of this BackendAPIAuthTypeSettings.
        :param expiration_time: The expiration_time of this BackendAPIAuthTypeSettings.
        :param open_id_auth_ttl: The open_id_auth_ttl of this BackendAPIAuthTypeSettings.
        :param open_id_client_id: The open_id_client_id of this BackendAPIAuthTypeSettings.
        :param open_id_iat_ttl: The open_id_iat_ttl of this BackendAPIAuthTypeSettings.
        :param open_id_issue_url: The open_id_issue_url of this BackendAPIAuthTypeSettings.
        :param open_id_provider_name: The open_id_provider_name of this BackendAPIAuthTypeSettings.
        """
        self.openapi_types = {
            'cognito_user_pool_id': str,
            'description': str,
            'expiration_time': float,
            'open_id_auth_ttl': str,
            'open_id_client_id': str,
            'open_id_iat_ttl': str,
            'open_id_issue_url': str,
            'open_id_provider_name': str
        }

        self.attribute_map = {
            'cognito_user_pool_id': 'CognitoUserPoolId',
            'description': 'Description',
            'expiration_time': 'ExpirationTime',
            'open_id_auth_ttl': 'OpenIDAuthTTL',
            'open_id_client_id': 'OpenIDClientId',
            'open_id_iat_ttl': 'OpenIDIatTTL',
            'open_id_issue_url': 'OpenIDIssueURL',
            'open_id_provider_name': 'OpenIDProviderName'
        }

        self._cognito_user_pool_id = cognito_user_pool_id
        self._description = description
        self._expiration_time = expiration_time
        self._open_id_auth_ttl = open_id_auth_ttl
        self._open_id_client_id = open_id_client_id
        self._open_id_iat_ttl = open_id_iat_ttl
        self._open_id_issue_url = open_id_issue_url
        self._open_id_provider_name = open_id_provider_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackendAPIAuthTypeSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackendAPIAuthType_Settings of this BackendAPIAuthTypeSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cognito_user_pool_id(self):
        """Gets the cognito_user_pool_id of this BackendAPIAuthTypeSettings.


        :return: The cognito_user_pool_id of this BackendAPIAuthTypeSettings.
        :rtype: str
        """
        return self._cognito_user_pool_id

    @cognito_user_pool_id.setter
    def cognito_user_pool_id(self, cognito_user_pool_id):
        """Sets the cognito_user_pool_id of this BackendAPIAuthTypeSettings.


        :param cognito_user_pool_id: The cognito_user_pool_id of this BackendAPIAuthTypeSettings.
        :type cognito_user_pool_id: str
        """

        self._cognito_user_pool_id = cognito_user_pool_id

    @property
    def description(self):
        """Gets the description of this BackendAPIAuthTypeSettings.


        :return: The description of this BackendAPIAuthTypeSettings.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BackendAPIAuthTypeSettings.


        :param description: The description of this BackendAPIAuthTypeSettings.
        :type description: str
        """

        self._description = description

    @property
    def expiration_time(self):
        """Gets the expiration_time of this BackendAPIAuthTypeSettings.


        :return: The expiration_time of this BackendAPIAuthTypeSettings.
        :rtype: float
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this BackendAPIAuthTypeSettings.


        :param expiration_time: The expiration_time of this BackendAPIAuthTypeSettings.
        :type expiration_time: float
        """

        self._expiration_time = expiration_time

    @property
    def open_id_auth_ttl(self):
        """Gets the open_id_auth_ttl of this BackendAPIAuthTypeSettings.


        :return: The open_id_auth_ttl of this BackendAPIAuthTypeSettings.
        :rtype: str
        """
        return self._open_id_auth_ttl

    @open_id_auth_ttl.setter
    def open_id_auth_ttl(self, open_id_auth_ttl):
        """Sets the open_id_auth_ttl of this BackendAPIAuthTypeSettings.


        :param open_id_auth_ttl: The open_id_auth_ttl of this BackendAPIAuthTypeSettings.
        :type open_id_auth_ttl: str
        """

        self._open_id_auth_ttl = open_id_auth_ttl

    @property
    def open_id_client_id(self):
        """Gets the open_id_client_id of this BackendAPIAuthTypeSettings.


        :return: The open_id_client_id of this BackendAPIAuthTypeSettings.
        :rtype: str
        """
        return self._open_id_client_id

    @open_id_client_id.setter
    def open_id_client_id(self, open_id_client_id):
        """Sets the open_id_client_id of this BackendAPIAuthTypeSettings.


        :param open_id_client_id: The open_id_client_id of this BackendAPIAuthTypeSettings.
        :type open_id_client_id: str
        """

        self._open_id_client_id = open_id_client_id

    @property
    def open_id_iat_ttl(self):
        """Gets the open_id_iat_ttl of this BackendAPIAuthTypeSettings.


        :return: The open_id_iat_ttl of this BackendAPIAuthTypeSettings.
        :rtype: str
        """
        return self._open_id_iat_ttl

    @open_id_iat_ttl.setter
    def open_id_iat_ttl(self, open_id_iat_ttl):
        """Sets the open_id_iat_ttl of this BackendAPIAuthTypeSettings.


        :param open_id_iat_ttl: The open_id_iat_ttl of this BackendAPIAuthTypeSettings.
        :type open_id_iat_ttl: str
        """

        self._open_id_iat_ttl = open_id_iat_ttl

    @property
    def open_id_issue_url(self):
        """Gets the open_id_issue_url of this BackendAPIAuthTypeSettings.


        :return: The open_id_issue_url of this BackendAPIAuthTypeSettings.
        :rtype: str
        """
        return self._open_id_issue_url

    @open_id_issue_url.setter
    def open_id_issue_url(self, open_id_issue_url):
        """Sets the open_id_issue_url of this BackendAPIAuthTypeSettings.


        :param open_id_issue_url: The open_id_issue_url of this BackendAPIAuthTypeSettings.
        :type open_id_issue_url: str
        """

        self._open_id_issue_url = open_id_issue_url

    @property
    def open_id_provider_name(self):
        """Gets the open_id_provider_name of this BackendAPIAuthTypeSettings.


        :return: The open_id_provider_name of this BackendAPIAuthTypeSettings.
        :rtype: str
        """
        return self._open_id_provider_name

    @open_id_provider_name.setter
    def open_id_provider_name(self, open_id_provider_name):
        """Sets the open_id_provider_name of this BackendAPIAuthTypeSettings.


        :param open_id_provider_name: The open_id_provider_name of this BackendAPIAuthTypeSettings.
        :type open_id_provider_name: str
        """

        self._open_id_provider_name = open_id_provider_name
