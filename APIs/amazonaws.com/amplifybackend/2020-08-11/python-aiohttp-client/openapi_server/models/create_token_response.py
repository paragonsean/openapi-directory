# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateTokenResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, challenge_code: str=None, session_id: str=None, ttl: str=None):
        """CreateTokenResponse - a model defined in OpenAPI

        :param app_id: The app_id of this CreateTokenResponse.
        :param challenge_code: The challenge_code of this CreateTokenResponse.
        :param session_id: The session_id of this CreateTokenResponse.
        :param ttl: The ttl of this CreateTokenResponse.
        """
        self.openapi_types = {
            'app_id': str,
            'challenge_code': str,
            'session_id': str,
            'ttl': str
        }

        self.attribute_map = {
            'app_id': 'AppId',
            'challenge_code': 'ChallengeCode',
            'session_id': 'SessionId',
            'ttl': 'Ttl'
        }

        self._app_id = app_id
        self._challenge_code = challenge_code
        self._session_id = session_id
        self._ttl = ttl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateTokenResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateTokenResponse of this CreateTokenResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this CreateTokenResponse.


        :return: The app_id of this CreateTokenResponse.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this CreateTokenResponse.


        :param app_id: The app_id of this CreateTokenResponse.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def challenge_code(self):
        """Gets the challenge_code of this CreateTokenResponse.


        :return: The challenge_code of this CreateTokenResponse.
        :rtype: str
        """
        return self._challenge_code

    @challenge_code.setter
    def challenge_code(self, challenge_code):
        """Sets the challenge_code of this CreateTokenResponse.


        :param challenge_code: The challenge_code of this CreateTokenResponse.
        :type challenge_code: str
        """

        self._challenge_code = challenge_code

    @property
    def session_id(self):
        """Gets the session_id of this CreateTokenResponse.


        :return: The session_id of this CreateTokenResponse.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this CreateTokenResponse.


        :param session_id: The session_id of this CreateTokenResponse.
        :type session_id: str
        """

        self._session_id = session_id

    @property
    def ttl(self):
        """Gets the ttl of this CreateTokenResponse.


        :return: The ttl of this CreateTokenResponse.
        :rtype: str
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this CreateTokenResponse.


        :param ttl: The ttl of this CreateTokenResponse.
        :type ttl: str
        """

        self._ttl = ttl
