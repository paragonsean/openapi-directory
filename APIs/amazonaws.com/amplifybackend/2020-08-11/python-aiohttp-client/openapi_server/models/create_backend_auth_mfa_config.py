# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_backend_auth_mfa_config_settings import CreateBackendAuthMFAConfigSettings
from openapi_server.models.mfa_mode import MFAMode
from openapi_server import util


class CreateBackendAuthMFAConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mfa_mode: MFAMode=None, settings: CreateBackendAuthMFAConfigSettings=None):
        """CreateBackendAuthMFAConfig - a model defined in OpenAPI

        :param mfa_mode: The mfa_mode of this CreateBackendAuthMFAConfig.
        :param settings: The settings of this CreateBackendAuthMFAConfig.
        """
        self.openapi_types = {
            'mfa_mode': MFAMode,
            'settings': CreateBackendAuthMFAConfigSettings
        }

        self.attribute_map = {
            'mfa_mode': 'MFAMode',
            'settings': 'Settings'
        }

        self._mfa_mode = mfa_mode
        self._settings = settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateBackendAuthMFAConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateBackendAuthMFAConfig of this CreateBackendAuthMFAConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mfa_mode(self):
        """Gets the mfa_mode of this CreateBackendAuthMFAConfig.


        :return: The mfa_mode of this CreateBackendAuthMFAConfig.
        :rtype: MFAMode
        """
        return self._mfa_mode

    @mfa_mode.setter
    def mfa_mode(self, mfa_mode):
        """Sets the mfa_mode of this CreateBackendAuthMFAConfig.


        :param mfa_mode: The mfa_mode of this CreateBackendAuthMFAConfig.
        :type mfa_mode: MFAMode
        """
        if mfa_mode is None:
            raise ValueError("Invalid value for `mfa_mode`, must not be `None`")

        self._mfa_mode = mfa_mode

    @property
    def settings(self):
        """Gets the settings of this CreateBackendAuthMFAConfig.


        :return: The settings of this CreateBackendAuthMFAConfig.
        :rtype: CreateBackendAuthMFAConfigSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this CreateBackendAuthMFAConfig.


        :param settings: The settings of this CreateBackendAuthMFAConfig.
        :type settings: CreateBackendAuthMFAConfigSettings
        """

        self._settings = settings
