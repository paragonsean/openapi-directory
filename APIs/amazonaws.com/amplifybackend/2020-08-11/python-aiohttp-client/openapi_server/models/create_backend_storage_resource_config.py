# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_backend_storage_request_resource_config_permissions import CreateBackendStorageRequestResourceConfigPermissions
from openapi_server.models.service_name import ServiceName
from openapi_server import util


class CreateBackendStorageResourceConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket_name: str=None, permissions: CreateBackendStorageRequestResourceConfigPermissions=None, service_name: ServiceName=None):
        """CreateBackendStorageResourceConfig - a model defined in OpenAPI

        :param bucket_name: The bucket_name of this CreateBackendStorageResourceConfig.
        :param permissions: The permissions of this CreateBackendStorageResourceConfig.
        :param service_name: The service_name of this CreateBackendStorageResourceConfig.
        """
        self.openapi_types = {
            'bucket_name': str,
            'permissions': CreateBackendStorageRequestResourceConfigPermissions,
            'service_name': ServiceName
        }

        self.attribute_map = {
            'bucket_name': 'BucketName',
            'permissions': 'Permissions',
            'service_name': 'ServiceName'
        }

        self._bucket_name = bucket_name
        self._permissions = permissions
        self._service_name = service_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateBackendStorageResourceConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateBackendStorageResourceConfig of this CreateBackendStorageResourceConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket_name(self):
        """Gets the bucket_name of this CreateBackendStorageResourceConfig.


        :return: The bucket_name of this CreateBackendStorageResourceConfig.
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this CreateBackendStorageResourceConfig.


        :param bucket_name: The bucket_name of this CreateBackendStorageResourceConfig.
        :type bucket_name: str
        """

        self._bucket_name = bucket_name

    @property
    def permissions(self):
        """Gets the permissions of this CreateBackendStorageResourceConfig.


        :return: The permissions of this CreateBackendStorageResourceConfig.
        :rtype: CreateBackendStorageRequestResourceConfigPermissions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this CreateBackendStorageResourceConfig.


        :param permissions: The permissions of this CreateBackendStorageResourceConfig.
        :type permissions: CreateBackendStorageRequestResourceConfigPermissions
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions

    @property
    def service_name(self):
        """Gets the service_name of this CreateBackendStorageResourceConfig.


        :return: The service_name of this CreateBackendStorageResourceConfig.
        :rtype: ServiceName
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this CreateBackendStorageResourceConfig.


        :param service_name: The service_name of this CreateBackendStorageResourceConfig.
        :type service_name: ServiceName
        """
        if service_name is None:
            raise ValueError("Invalid value for `service_name`, must not be `None`")

        self._service_name = service_name
