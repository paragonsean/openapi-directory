# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_backend_api_request_resource_config_conflict_resolution import CreateBackendAPIRequestResourceConfigConflictResolution
from openapi_server.models.create_backend_api_request_resource_config_default_auth_type import CreateBackendAPIRequestResourceConfigDefaultAuthType
from openapi_server import util


class CreateBackendAPIRequestResourceConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_auth_types: List=None, api_name: str=None, conflict_resolution: CreateBackendAPIRequestResourceConfigConflictResolution=None, default_auth_type: CreateBackendAPIRequestResourceConfigDefaultAuthType=None, service: str=None, transform_schema: str=None):
        """CreateBackendAPIRequestResourceConfig - a model defined in OpenAPI

        :param additional_auth_types: The additional_auth_types of this CreateBackendAPIRequestResourceConfig.
        :param api_name: The api_name of this CreateBackendAPIRequestResourceConfig.
        :param conflict_resolution: The conflict_resolution of this CreateBackendAPIRequestResourceConfig.
        :param default_auth_type: The default_auth_type of this CreateBackendAPIRequestResourceConfig.
        :param service: The service of this CreateBackendAPIRequestResourceConfig.
        :param transform_schema: The transform_schema of this CreateBackendAPIRequestResourceConfig.
        """
        self.openapi_types = {
            'additional_auth_types': List,
            'api_name': str,
            'conflict_resolution': CreateBackendAPIRequestResourceConfigConflictResolution,
            'default_auth_type': CreateBackendAPIRequestResourceConfigDefaultAuthType,
            'service': str,
            'transform_schema': str
        }

        self.attribute_map = {
            'additional_auth_types': 'AdditionalAuthTypes',
            'api_name': 'ApiName',
            'conflict_resolution': 'ConflictResolution',
            'default_auth_type': 'DefaultAuthType',
            'service': 'Service',
            'transform_schema': 'TransformSchema'
        }

        self._additional_auth_types = additional_auth_types
        self._api_name = api_name
        self._conflict_resolution = conflict_resolution
        self._default_auth_type = default_auth_type
        self._service = service
        self._transform_schema = transform_schema

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateBackendAPIRequestResourceConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateBackendAPIRequest_ResourceConfig of this CreateBackendAPIRequestResourceConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_auth_types(self):
        """Gets the additional_auth_types of this CreateBackendAPIRequestResourceConfig.


        :return: The additional_auth_types of this CreateBackendAPIRequestResourceConfig.
        :rtype: List
        """
        return self._additional_auth_types

    @additional_auth_types.setter
    def additional_auth_types(self, additional_auth_types):
        """Sets the additional_auth_types of this CreateBackendAPIRequestResourceConfig.


        :param additional_auth_types: The additional_auth_types of this CreateBackendAPIRequestResourceConfig.
        :type additional_auth_types: List
        """

        self._additional_auth_types = additional_auth_types

    @property
    def api_name(self):
        """Gets the api_name of this CreateBackendAPIRequestResourceConfig.


        :return: The api_name of this CreateBackendAPIRequestResourceConfig.
        :rtype: str
        """
        return self._api_name

    @api_name.setter
    def api_name(self, api_name):
        """Sets the api_name of this CreateBackendAPIRequestResourceConfig.


        :param api_name: The api_name of this CreateBackendAPIRequestResourceConfig.
        :type api_name: str
        """

        self._api_name = api_name

    @property
    def conflict_resolution(self):
        """Gets the conflict_resolution of this CreateBackendAPIRequestResourceConfig.


        :return: The conflict_resolution of this CreateBackendAPIRequestResourceConfig.
        :rtype: CreateBackendAPIRequestResourceConfigConflictResolution
        """
        return self._conflict_resolution

    @conflict_resolution.setter
    def conflict_resolution(self, conflict_resolution):
        """Sets the conflict_resolution of this CreateBackendAPIRequestResourceConfig.


        :param conflict_resolution: The conflict_resolution of this CreateBackendAPIRequestResourceConfig.
        :type conflict_resolution: CreateBackendAPIRequestResourceConfigConflictResolution
        """

        self._conflict_resolution = conflict_resolution

    @property
    def default_auth_type(self):
        """Gets the default_auth_type of this CreateBackendAPIRequestResourceConfig.


        :return: The default_auth_type of this CreateBackendAPIRequestResourceConfig.
        :rtype: CreateBackendAPIRequestResourceConfigDefaultAuthType
        """
        return self._default_auth_type

    @default_auth_type.setter
    def default_auth_type(self, default_auth_type):
        """Sets the default_auth_type of this CreateBackendAPIRequestResourceConfig.


        :param default_auth_type: The default_auth_type of this CreateBackendAPIRequestResourceConfig.
        :type default_auth_type: CreateBackendAPIRequestResourceConfigDefaultAuthType
        """

        self._default_auth_type = default_auth_type

    @property
    def service(self):
        """Gets the service of this CreateBackendAPIRequestResourceConfig.


        :return: The service of this CreateBackendAPIRequestResourceConfig.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this CreateBackendAPIRequestResourceConfig.


        :param service: The service of this CreateBackendAPIRequestResourceConfig.
        :type service: str
        """

        self._service = service

    @property
    def transform_schema(self):
        """Gets the transform_schema of this CreateBackendAPIRequestResourceConfig.


        :return: The transform_schema of this CreateBackendAPIRequestResourceConfig.
        :rtype: str
        """
        return self._transform_schema

    @transform_schema.setter
    def transform_schema(self, transform_schema):
        """Sets the transform_schema of this CreateBackendAPIRequestResourceConfig.


        :param transform_schema: The transform_schema of this CreateBackendAPIRequestResourceConfig.
        :type transform_schema: str
        """

        self._transform_schema = transform_schema
