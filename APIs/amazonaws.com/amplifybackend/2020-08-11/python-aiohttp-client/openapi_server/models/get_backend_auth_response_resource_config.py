# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auth_resources import AuthResources
from openapi_server.models.create_backend_auth_request_resource_config_identity_pool_configs import CreateBackendAuthRequestResourceConfigIdentityPoolConfigs
from openapi_server.models.create_backend_auth_request_resource_config_user_pool_configs import CreateBackendAuthRequestResourceConfigUserPoolConfigs
from openapi_server.models.service import Service
from openapi_server import util


class GetBackendAuthResponseResourceConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_resources: AuthResources=None, identity_pool_configs: CreateBackendAuthRequestResourceConfigIdentityPoolConfigs=None, service: Service=None, user_pool_configs: CreateBackendAuthRequestResourceConfigUserPoolConfigs=None):
        """GetBackendAuthResponseResourceConfig - a model defined in OpenAPI

        :param auth_resources: The auth_resources of this GetBackendAuthResponseResourceConfig.
        :param identity_pool_configs: The identity_pool_configs of this GetBackendAuthResponseResourceConfig.
        :param service: The service of this GetBackendAuthResponseResourceConfig.
        :param user_pool_configs: The user_pool_configs of this GetBackendAuthResponseResourceConfig.
        """
        self.openapi_types = {
            'auth_resources': AuthResources,
            'identity_pool_configs': CreateBackendAuthRequestResourceConfigIdentityPoolConfigs,
            'service': Service,
            'user_pool_configs': CreateBackendAuthRequestResourceConfigUserPoolConfigs
        }

        self.attribute_map = {
            'auth_resources': 'AuthResources',
            'identity_pool_configs': 'IdentityPoolConfigs',
            'service': 'Service',
            'user_pool_configs': 'UserPoolConfigs'
        }

        self._auth_resources = auth_resources
        self._identity_pool_configs = identity_pool_configs
        self._service = service
        self._user_pool_configs = user_pool_configs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetBackendAuthResponseResourceConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetBackendAuthResponse_ResourceConfig of this GetBackendAuthResponseResourceConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_resources(self):
        """Gets the auth_resources of this GetBackendAuthResponseResourceConfig.


        :return: The auth_resources of this GetBackendAuthResponseResourceConfig.
        :rtype: AuthResources
        """
        return self._auth_resources

    @auth_resources.setter
    def auth_resources(self, auth_resources):
        """Sets the auth_resources of this GetBackendAuthResponseResourceConfig.


        :param auth_resources: The auth_resources of this GetBackendAuthResponseResourceConfig.
        :type auth_resources: AuthResources
        """
        if auth_resources is None:
            raise ValueError("Invalid value for `auth_resources`, must not be `None`")

        self._auth_resources = auth_resources

    @property
    def identity_pool_configs(self):
        """Gets the identity_pool_configs of this GetBackendAuthResponseResourceConfig.


        :return: The identity_pool_configs of this GetBackendAuthResponseResourceConfig.
        :rtype: CreateBackendAuthRequestResourceConfigIdentityPoolConfigs
        """
        return self._identity_pool_configs

    @identity_pool_configs.setter
    def identity_pool_configs(self, identity_pool_configs):
        """Sets the identity_pool_configs of this GetBackendAuthResponseResourceConfig.


        :param identity_pool_configs: The identity_pool_configs of this GetBackendAuthResponseResourceConfig.
        :type identity_pool_configs: CreateBackendAuthRequestResourceConfigIdentityPoolConfigs
        """

        self._identity_pool_configs = identity_pool_configs

    @property
    def service(self):
        """Gets the service of this GetBackendAuthResponseResourceConfig.


        :return: The service of this GetBackendAuthResponseResourceConfig.
        :rtype: Service
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this GetBackendAuthResponseResourceConfig.


        :param service: The service of this GetBackendAuthResponseResourceConfig.
        :type service: Service
        """
        if service is None:
            raise ValueError("Invalid value for `service`, must not be `None`")

        self._service = service

    @property
    def user_pool_configs(self):
        """Gets the user_pool_configs of this GetBackendAuthResponseResourceConfig.


        :return: The user_pool_configs of this GetBackendAuthResponseResourceConfig.
        :rtype: CreateBackendAuthRequestResourceConfigUserPoolConfigs
        """
        return self._user_pool_configs

    @user_pool_configs.setter
    def user_pool_configs(self, user_pool_configs):
        """Sets the user_pool_configs of this GetBackendAuthResponseResourceConfig.


        :param user_pool_configs: The user_pool_configs of this GetBackendAuthResponseResourceConfig.
        :type user_pool_configs: CreateBackendAuthRequestResourceConfigUserPoolConfigs
        """
        if user_pool_configs is None:
            raise ValueError("Invalid value for `user_pool_configs`, must not be `None`")

        self._user_pool_configs = user_pool_configs
