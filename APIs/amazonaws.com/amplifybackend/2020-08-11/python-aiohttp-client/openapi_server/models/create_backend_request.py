# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateBackendRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, app_name: str=None, backend_environment_name: str=None, resource_config: object=None, resource_name: str=None):
        """CreateBackendRequest - a model defined in OpenAPI

        :param app_id: The app_id of this CreateBackendRequest.
        :param app_name: The app_name of this CreateBackendRequest.
        :param backend_environment_name: The backend_environment_name of this CreateBackendRequest.
        :param resource_config: The resource_config of this CreateBackendRequest.
        :param resource_name: The resource_name of this CreateBackendRequest.
        """
        self.openapi_types = {
            'app_id': str,
            'app_name': str,
            'backend_environment_name': str,
            'resource_config': object,
            'resource_name': str
        }

        self.attribute_map = {
            'app_id': 'appId',
            'app_name': 'appName',
            'backend_environment_name': 'backendEnvironmentName',
            'resource_config': 'resourceConfig',
            'resource_name': 'resourceName'
        }

        self._app_id = app_id
        self._app_name = app_name
        self._backend_environment_name = backend_environment_name
        self._resource_config = resource_config
        self._resource_name = resource_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateBackendRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateBackend_request of this CreateBackendRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this CreateBackendRequest.

        The app ID.

        :return: The app_id of this CreateBackendRequest.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this CreateBackendRequest.

        The app ID.

        :param app_id: The app_id of this CreateBackendRequest.
        :type app_id: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")

        self._app_id = app_id

    @property
    def app_name(self):
        """Gets the app_name of this CreateBackendRequest.

        The name of the app.

        :return: The app_name of this CreateBackendRequest.
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this CreateBackendRequest.

        The name of the app.

        :param app_name: The app_name of this CreateBackendRequest.
        :type app_name: str
        """
        if app_name is None:
            raise ValueError("Invalid value for `app_name`, must not be `None`")

        self._app_name = app_name

    @property
    def backend_environment_name(self):
        """Gets the backend_environment_name of this CreateBackendRequest.

        The name of the backend environment.

        :return: The backend_environment_name of this CreateBackendRequest.
        :rtype: str
        """
        return self._backend_environment_name

    @backend_environment_name.setter
    def backend_environment_name(self, backend_environment_name):
        """Sets the backend_environment_name of this CreateBackendRequest.

        The name of the backend environment.

        :param backend_environment_name: The backend_environment_name of this CreateBackendRequest.
        :type backend_environment_name: str
        """
        if backend_environment_name is None:
            raise ValueError("Invalid value for `backend_environment_name`, must not be `None`")

        self._backend_environment_name = backend_environment_name

    @property
    def resource_config(self):
        """Gets the resource_config of this CreateBackendRequest.

        Defines the resource configuration for the data model in your Amplify project.

        :return: The resource_config of this CreateBackendRequest.
        :rtype: object
        """
        return self._resource_config

    @resource_config.setter
    def resource_config(self, resource_config):
        """Sets the resource_config of this CreateBackendRequest.

        Defines the resource configuration for the data model in your Amplify project.

        :param resource_config: The resource_config of this CreateBackendRequest.
        :type resource_config: object
        """

        self._resource_config = resource_config

    @property
    def resource_name(self):
        """Gets the resource_name of this CreateBackendRequest.

        The name of the resource.

        :return: The resource_name of this CreateBackendRequest.
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this CreateBackendRequest.

        The name of the resource.

        :param resource_name: The resource_name of this CreateBackendRequest.
        :type resource_name: str
        """

        self._resource_name = resource_name
