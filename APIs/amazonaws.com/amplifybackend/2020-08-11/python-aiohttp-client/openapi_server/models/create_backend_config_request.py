# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateBackendConfigRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backend_manager_app_id: str=None):
        """CreateBackendConfigRequest - a model defined in OpenAPI

        :param backend_manager_app_id: The backend_manager_app_id of this CreateBackendConfigRequest.
        """
        self.openapi_types = {
            'backend_manager_app_id': str
        }

        self.attribute_map = {
            'backend_manager_app_id': 'backendManagerAppId'
        }

        self._backend_manager_app_id = backend_manager_app_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateBackendConfigRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateBackendConfig_request of this CreateBackendConfigRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backend_manager_app_id(self):
        """Gets the backend_manager_app_id of this CreateBackendConfigRequest.

        The app ID for the backend manager.

        :return: The backend_manager_app_id of this CreateBackendConfigRequest.
        :rtype: str
        """
        return self._backend_manager_app_id

    @backend_manager_app_id.setter
    def backend_manager_app_id(self, backend_manager_app_id):
        """Sets the backend_manager_app_id of this CreateBackendConfigRequest.

        The app ID for the backend manager.

        :param backend_manager_app_id: The backend_manager_app_id of this CreateBackendConfigRequest.
        :type backend_manager_app_id: str
        """

        self._backend_manager_app_id = backend_manager_app_id
