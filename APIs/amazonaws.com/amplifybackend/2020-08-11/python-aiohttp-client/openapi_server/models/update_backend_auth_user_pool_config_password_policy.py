# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateBackendAuthUserPoolConfigPasswordPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_constraints: List=None, minimum_length: float=None):
        """UpdateBackendAuthUserPoolConfigPasswordPolicy - a model defined in OpenAPI

        :param additional_constraints: The additional_constraints of this UpdateBackendAuthUserPoolConfigPasswordPolicy.
        :param minimum_length: The minimum_length of this UpdateBackendAuthUserPoolConfigPasswordPolicy.
        """
        self.openapi_types = {
            'additional_constraints': List,
            'minimum_length': float
        }

        self.attribute_map = {
            'additional_constraints': 'AdditionalConstraints',
            'minimum_length': 'MinimumLength'
        }

        self._additional_constraints = additional_constraints
        self._minimum_length = minimum_length

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateBackendAuthUserPoolConfigPasswordPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateBackendAuthUserPoolConfig_PasswordPolicy of this UpdateBackendAuthUserPoolConfigPasswordPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_constraints(self):
        """Gets the additional_constraints of this UpdateBackendAuthUserPoolConfigPasswordPolicy.


        :return: The additional_constraints of this UpdateBackendAuthUserPoolConfigPasswordPolicy.
        :rtype: List
        """
        return self._additional_constraints

    @additional_constraints.setter
    def additional_constraints(self, additional_constraints):
        """Sets the additional_constraints of this UpdateBackendAuthUserPoolConfigPasswordPolicy.


        :param additional_constraints: The additional_constraints of this UpdateBackendAuthUserPoolConfigPasswordPolicy.
        :type additional_constraints: List
        """

        self._additional_constraints = additional_constraints

    @property
    def minimum_length(self):
        """Gets the minimum_length of this UpdateBackendAuthUserPoolConfigPasswordPolicy.


        :return: The minimum_length of this UpdateBackendAuthUserPoolConfigPasswordPolicy.
        :rtype: float
        """
        return self._minimum_length

    @minimum_length.setter
    def minimum_length(self, minimum_length):
        """Sets the minimum_length of this UpdateBackendAuthUserPoolConfigPasswordPolicy.


        :param minimum_length: The minimum_length of this UpdateBackendAuthUserPoolConfigPasswordPolicy.
        :type minimum_length: float
        """

        self._minimum_length = minimum_length
