# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_backend_storage_request_resource_config import UpdateBackendStorageRequestResourceConfig
from openapi_server import util


class UpdateBackendStorageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_config: UpdateBackendStorageRequestResourceConfig=None, resource_name: str=None):
        """UpdateBackendStorageRequest - a model defined in OpenAPI

        :param resource_config: The resource_config of this UpdateBackendStorageRequest.
        :param resource_name: The resource_name of this UpdateBackendStorageRequest.
        """
        self.openapi_types = {
            'resource_config': UpdateBackendStorageRequestResourceConfig,
            'resource_name': str
        }

        self.attribute_map = {
            'resource_config': 'resourceConfig',
            'resource_name': 'resourceName'
        }

        self._resource_config = resource_config
        self._resource_name = resource_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateBackendStorageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateBackendStorage_request of this UpdateBackendStorageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_config(self):
        """Gets the resource_config of this UpdateBackendStorageRequest.


        :return: The resource_config of this UpdateBackendStorageRequest.
        :rtype: UpdateBackendStorageRequestResourceConfig
        """
        return self._resource_config

    @resource_config.setter
    def resource_config(self, resource_config):
        """Sets the resource_config of this UpdateBackendStorageRequest.


        :param resource_config: The resource_config of this UpdateBackendStorageRequest.
        :type resource_config: UpdateBackendStorageRequestResourceConfig
        """
        if resource_config is None:
            raise ValueError("Invalid value for `resource_config`, must not be `None`")

        self._resource_config = resource_config

    @property
    def resource_name(self):
        """Gets the resource_name of this UpdateBackendStorageRequest.

        The name of the storage resource.

        :return: The resource_name of this UpdateBackendStorageRequest.
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this UpdateBackendStorageRequest.

        The name of the storage resource.

        :param resource_name: The resource_name of this UpdateBackendStorageRequest.
        :type resource_name: str
        """
        if resource_name is None:
            raise ValueError("Invalid value for `resource_name`, must not be `None`")

        self._resource_name = resource_name
