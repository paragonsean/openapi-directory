# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImportBackendStorageResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, backend_environment_name: str=None, job_id: str=None, status: str=None):
        """ImportBackendStorageResponse - a model defined in OpenAPI

        :param app_id: The app_id of this ImportBackendStorageResponse.
        :param backend_environment_name: The backend_environment_name of this ImportBackendStorageResponse.
        :param job_id: The job_id of this ImportBackendStorageResponse.
        :param status: The status of this ImportBackendStorageResponse.
        """
        self.openapi_types = {
            'app_id': str,
            'backend_environment_name': str,
            'job_id': str,
            'status': str
        }

        self.attribute_map = {
            'app_id': 'AppId',
            'backend_environment_name': 'BackendEnvironmentName',
            'job_id': 'JobId',
            'status': 'Status'
        }

        self._app_id = app_id
        self._backend_environment_name = backend_environment_name
        self._job_id = job_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportBackendStorageResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportBackendStorageResponse of this ImportBackendStorageResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this ImportBackendStorageResponse.


        :return: The app_id of this ImportBackendStorageResponse.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this ImportBackendStorageResponse.


        :param app_id: The app_id of this ImportBackendStorageResponse.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def backend_environment_name(self):
        """Gets the backend_environment_name of this ImportBackendStorageResponse.


        :return: The backend_environment_name of this ImportBackendStorageResponse.
        :rtype: str
        """
        return self._backend_environment_name

    @backend_environment_name.setter
    def backend_environment_name(self, backend_environment_name):
        """Sets the backend_environment_name of this ImportBackendStorageResponse.


        :param backend_environment_name: The backend_environment_name of this ImportBackendStorageResponse.
        :type backend_environment_name: str
        """

        self._backend_environment_name = backend_environment_name

    @property
    def job_id(self):
        """Gets the job_id of this ImportBackendStorageResponse.


        :return: The job_id of this ImportBackendStorageResponse.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this ImportBackendStorageResponse.


        :param job_id: The job_id of this ImportBackendStorageResponse.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def status(self):
        """Gets the status of this ImportBackendStorageResponse.


        :return: The status of this ImportBackendStorageResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ImportBackendStorageResponse.


        :param status: The status of this ImportBackendStorageResponse.
        :type status: str
        """

        self._status = status
