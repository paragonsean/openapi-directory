# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImportBackendAuthRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identity_pool_id: str=None, native_client_id: str=None, user_pool_id: str=None, web_client_id: str=None):
        """ImportBackendAuthRequest - a model defined in OpenAPI

        :param identity_pool_id: The identity_pool_id of this ImportBackendAuthRequest.
        :param native_client_id: The native_client_id of this ImportBackendAuthRequest.
        :param user_pool_id: The user_pool_id of this ImportBackendAuthRequest.
        :param web_client_id: The web_client_id of this ImportBackendAuthRequest.
        """
        self.openapi_types = {
            'identity_pool_id': str,
            'native_client_id': str,
            'user_pool_id': str,
            'web_client_id': str
        }

        self.attribute_map = {
            'identity_pool_id': 'identityPoolId',
            'native_client_id': 'nativeClientId',
            'user_pool_id': 'userPoolId',
            'web_client_id': 'webClientId'
        }

        self._identity_pool_id = identity_pool_id
        self._native_client_id = native_client_id
        self._user_pool_id = user_pool_id
        self._web_client_id = web_client_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportBackendAuthRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportBackendAuth_request of this ImportBackendAuthRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identity_pool_id(self):
        """Gets the identity_pool_id of this ImportBackendAuthRequest.

        The ID of the Amazon Cognito identity pool.

        :return: The identity_pool_id of this ImportBackendAuthRequest.
        :rtype: str
        """
        return self._identity_pool_id

    @identity_pool_id.setter
    def identity_pool_id(self, identity_pool_id):
        """Sets the identity_pool_id of this ImportBackendAuthRequest.

        The ID of the Amazon Cognito identity pool.

        :param identity_pool_id: The identity_pool_id of this ImportBackendAuthRequest.
        :type identity_pool_id: str
        """

        self._identity_pool_id = identity_pool_id

    @property
    def native_client_id(self):
        """Gets the native_client_id of this ImportBackendAuthRequest.

        The ID of the Amazon Cognito native client.

        :return: The native_client_id of this ImportBackendAuthRequest.
        :rtype: str
        """
        return self._native_client_id

    @native_client_id.setter
    def native_client_id(self, native_client_id):
        """Sets the native_client_id of this ImportBackendAuthRequest.

        The ID of the Amazon Cognito native client.

        :param native_client_id: The native_client_id of this ImportBackendAuthRequest.
        :type native_client_id: str
        """
        if native_client_id is None:
            raise ValueError("Invalid value for `native_client_id`, must not be `None`")

        self._native_client_id = native_client_id

    @property
    def user_pool_id(self):
        """Gets the user_pool_id of this ImportBackendAuthRequest.

        The ID of the Amazon Cognito user pool.

        :return: The user_pool_id of this ImportBackendAuthRequest.
        :rtype: str
        """
        return self._user_pool_id

    @user_pool_id.setter
    def user_pool_id(self, user_pool_id):
        """Sets the user_pool_id of this ImportBackendAuthRequest.

        The ID of the Amazon Cognito user pool.

        :param user_pool_id: The user_pool_id of this ImportBackendAuthRequest.
        :type user_pool_id: str
        """
        if user_pool_id is None:
            raise ValueError("Invalid value for `user_pool_id`, must not be `None`")

        self._user_pool_id = user_pool_id

    @property
    def web_client_id(self):
        """Gets the web_client_id of this ImportBackendAuthRequest.

        The ID of the Amazon Cognito web client.

        :return: The web_client_id of this ImportBackendAuthRequest.
        :rtype: str
        """
        return self._web_client_id

    @web_client_id.setter
    def web_client_id(self, web_client_id):
        """Sets the web_client_id of this ImportBackendAuthRequest.

        The ID of the Amazon Cognito web client.

        :param web_client_id: The web_client_id of this ImportBackendAuthRequest.
        :type web_client_id: str
        """
        if web_client_id is None:
            raise ValueError("Invalid value for `web_client_id`, must not be `None`")

        self._web_client_id = web_client_id
