# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BackendAuthAppleProviderConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, key_id: str=None, private_key: str=None, team_id: str=None):
        """BackendAuthAppleProviderConfig - a model defined in OpenAPI

        :param client_id: The client_id of this BackendAuthAppleProviderConfig.
        :param key_id: The key_id of this BackendAuthAppleProviderConfig.
        :param private_key: The private_key of this BackendAuthAppleProviderConfig.
        :param team_id: The team_id of this BackendAuthAppleProviderConfig.
        """
        self.openapi_types = {
            'client_id': str,
            'key_id': str,
            'private_key': str,
            'team_id': str
        }

        self.attribute_map = {
            'client_id': 'ClientId',
            'key_id': 'KeyId',
            'private_key': 'PrivateKey',
            'team_id': 'TeamId'
        }

        self._client_id = client_id
        self._key_id = key_id
        self._private_key = private_key
        self._team_id = team_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackendAuthAppleProviderConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackendAuthAppleProviderConfig of this BackendAuthAppleProviderConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this BackendAuthAppleProviderConfig.


        :return: The client_id of this BackendAuthAppleProviderConfig.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this BackendAuthAppleProviderConfig.


        :param client_id: The client_id of this BackendAuthAppleProviderConfig.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def key_id(self):
        """Gets the key_id of this BackendAuthAppleProviderConfig.


        :return: The key_id of this BackendAuthAppleProviderConfig.
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """Sets the key_id of this BackendAuthAppleProviderConfig.


        :param key_id: The key_id of this BackendAuthAppleProviderConfig.
        :type key_id: str
        """

        self._key_id = key_id

    @property
    def private_key(self):
        """Gets the private_key of this BackendAuthAppleProviderConfig.


        :return: The private_key of this BackendAuthAppleProviderConfig.
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this BackendAuthAppleProviderConfig.


        :param private_key: The private_key of this BackendAuthAppleProviderConfig.
        :type private_key: str
        """

        self._private_key = private_key

    @property
    def team_id(self):
        """Gets the team_id of this BackendAuthAppleProviderConfig.


        :return: The team_id of this BackendAuthAppleProviderConfig.
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this BackendAuthAppleProviderConfig.


        :param team_id: The team_id of this BackendAuthAppleProviderConfig.
        :type team_id: str
        """

        self._team_id = team_id
