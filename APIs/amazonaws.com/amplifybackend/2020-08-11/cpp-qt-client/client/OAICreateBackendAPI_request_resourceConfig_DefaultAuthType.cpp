/**
 * AmplifyBackend
 * AWS Amplify Admin API
 *
 * The version of the OpenAPI document: 2020-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateBackendAPI_request_resourceConfig_DefaultAuthType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateBackendAPI_request_resourceConfig_DefaultAuthType::OAICreateBackendAPI_request_resourceConfig_DefaultAuthType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateBackendAPI_request_resourceConfig_DefaultAuthType::OAICreateBackendAPI_request_resourceConfig_DefaultAuthType() {
    this->initializeModel();
}

OAICreateBackendAPI_request_resourceConfig_DefaultAuthType::~OAICreateBackendAPI_request_resourceConfig_DefaultAuthType() {}

void OAICreateBackendAPI_request_resourceConfig_DefaultAuthType::initializeModel() {

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;
}

void OAICreateBackendAPI_request_resourceConfig_DefaultAuthType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateBackendAPI_request_resourceConfig_DefaultAuthType::fromJsonObject(QJsonObject json) {

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("Mode")]);
    m_mode_isSet = !json[QString("Mode")].isNull() && m_mode_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("Settings")]);
    m_settings_isSet = !json[QString("Settings")].isNull() && m_settings_isValid;
}

QString OAICreateBackendAPI_request_resourceConfig_DefaultAuthType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateBackendAPI_request_resourceConfig_DefaultAuthType::asJsonObject() const {
    QJsonObject obj;
    if (m_mode.isSet()) {
        obj.insert(QString("Mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("Settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    return obj;
}

OAIMode OAICreateBackendAPI_request_resourceConfig_DefaultAuthType::getMode() const {
    return m_mode;
}
void OAICreateBackendAPI_request_resourceConfig_DefaultAuthType::setMode(const OAIMode &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAICreateBackendAPI_request_resourceConfig_DefaultAuthType::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAICreateBackendAPI_request_resourceConfig_DefaultAuthType::is_mode_Valid() const{
    return m_mode_isValid;
}

OAIBackendAPIAuthType_Settings OAICreateBackendAPI_request_resourceConfig_DefaultAuthType::getSettings() const {
    return m_settings;
}
void OAICreateBackendAPI_request_resourceConfig_DefaultAuthType::setSettings(const OAIBackendAPIAuthType_Settings &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAICreateBackendAPI_request_resourceConfig_DefaultAuthType::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAICreateBackendAPI_request_resourceConfig_DefaultAuthType::is_settings_Valid() const{
    return m_settings_isValid;
}

bool OAICreateBackendAPI_request_resourceConfig_DefaultAuthType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateBackendAPI_request_resourceConfig_DefaultAuthType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
