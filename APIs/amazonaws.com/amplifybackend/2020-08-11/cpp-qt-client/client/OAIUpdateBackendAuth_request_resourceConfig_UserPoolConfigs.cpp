/**
 * AmplifyBackend
 * AWS Amplify Admin API
 *
 * The version of the OpenAPI document: 2020-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs::OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs::OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs() {
    this->initializeModel();
}

OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs::~OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs() {}

void OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs::initializeModel() {

    m_forgot_password_isSet = false;
    m_forgot_password_isValid = false;

    m_mfa_isSet = false;
    m_mfa_isValid = false;

    m_o_auth_isSet = false;
    m_o_auth_isValid = false;

    m_password_policy_isSet = false;
    m_password_policy_isValid = false;

    m_verification_message_isSet = false;
    m_verification_message_isValid = false;
}

void OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs::fromJsonObject(QJsonObject json) {

    m_forgot_password_isValid = ::OpenAPI::fromJsonValue(m_forgot_password, json[QString("ForgotPassword")]);
    m_forgot_password_isSet = !json[QString("ForgotPassword")].isNull() && m_forgot_password_isValid;

    m_mfa_isValid = ::OpenAPI::fromJsonValue(m_mfa, json[QString("Mfa")]);
    m_mfa_isSet = !json[QString("Mfa")].isNull() && m_mfa_isValid;

    m_o_auth_isValid = ::OpenAPI::fromJsonValue(m_o_auth, json[QString("OAuth")]);
    m_o_auth_isSet = !json[QString("OAuth")].isNull() && m_o_auth_isValid;

    m_password_policy_isValid = ::OpenAPI::fromJsonValue(m_password_policy, json[QString("PasswordPolicy")]);
    m_password_policy_isSet = !json[QString("PasswordPolicy")].isNull() && m_password_policy_isValid;

    m_verification_message_isValid = ::OpenAPI::fromJsonValue(m_verification_message, json[QString("VerificationMessage")]);
    m_verification_message_isSet = !json[QString("VerificationMessage")].isNull() && m_verification_message_isValid;
}

QString OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs::asJsonObject() const {
    QJsonObject obj;
    if (m_forgot_password.isSet()) {
        obj.insert(QString("ForgotPassword"), ::OpenAPI::toJsonValue(m_forgot_password));
    }
    if (m_mfa.isSet()) {
        obj.insert(QString("Mfa"), ::OpenAPI::toJsonValue(m_mfa));
    }
    if (m_o_auth.isSet()) {
        obj.insert(QString("OAuth"), ::OpenAPI::toJsonValue(m_o_auth));
    }
    if (m_password_policy.isSet()) {
        obj.insert(QString("PasswordPolicy"), ::OpenAPI::toJsonValue(m_password_policy));
    }
    if (m_verification_message.isSet()) {
        obj.insert(QString("VerificationMessage"), ::OpenAPI::toJsonValue(m_verification_message));
    }
    return obj;
}

OAIUpdateBackendAuthUserPoolConfig_ForgotPassword OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs::getForgotPassword() const {
    return m_forgot_password;
}
void OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs::setForgotPassword(const OAIUpdateBackendAuthUserPoolConfig_ForgotPassword &forgot_password) {
    m_forgot_password = forgot_password;
    m_forgot_password_isSet = true;
}

bool OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs::is_forgot_password_Set() const{
    return m_forgot_password_isSet;
}

bool OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs::is_forgot_password_Valid() const{
    return m_forgot_password_isValid;
}

OAIUpdateBackendAuthUserPoolConfig_Mfa OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs::getMfa() const {
    return m_mfa;
}
void OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs::setMfa(const OAIUpdateBackendAuthUserPoolConfig_Mfa &mfa) {
    m_mfa = mfa;
    m_mfa_isSet = true;
}

bool OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs::is_mfa_Set() const{
    return m_mfa_isSet;
}

bool OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs::is_mfa_Valid() const{
    return m_mfa_isValid;
}

OAIUpdateBackendAuthUserPoolConfig_OAuth OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs::getOAuth() const {
    return m_o_auth;
}
void OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs::setOAuth(const OAIUpdateBackendAuthUserPoolConfig_OAuth &o_auth) {
    m_o_auth = o_auth;
    m_o_auth_isSet = true;
}

bool OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs::is_o_auth_Set() const{
    return m_o_auth_isSet;
}

bool OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs::is_o_auth_Valid() const{
    return m_o_auth_isValid;
}

OAIUpdateBackendAuthUserPoolConfig_PasswordPolicy OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs::getPasswordPolicy() const {
    return m_password_policy;
}
void OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs::setPasswordPolicy(const OAIUpdateBackendAuthUserPoolConfig_PasswordPolicy &password_policy) {
    m_password_policy = password_policy;
    m_password_policy_isSet = true;
}

bool OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs::is_password_policy_Set() const{
    return m_password_policy_isSet;
}

bool OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs::is_password_policy_Valid() const{
    return m_password_policy_isValid;
}

OAIUpdateBackendAuthUserPoolConfig_VerificationMessage OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs::getVerificationMessage() const {
    return m_verification_message;
}
void OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs::setVerificationMessage(const OAIUpdateBackendAuthUserPoolConfig_VerificationMessage &verification_message) {
    m_verification_message = verification_message;
    m_verification_message_isSet = true;
}

bool OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs::is_verification_message_Set() const{
    return m_verification_message_isSet;
}

bool OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs::is_verification_message_Valid() const{
    return m_verification_message_isValid;
}

bool OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_forgot_password.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mfa.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_o_auth.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_message.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateBackendAuth_request_resourceConfig_UserPoolConfigs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
