/**
 * AmplifyBackend
 * AWS Amplify Admin API
 *
 * The version of the OpenAPI document: 2020-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetBackendResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetBackendResponse::OAIGetBackendResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetBackendResponse::OAIGetBackendResponse() {
    this->initializeModel();
}

OAIGetBackendResponse::~OAIGetBackendResponse() {}

void OAIGetBackendResponse::initializeModel() {

    m_amplify_feature_flags_isSet = false;
    m_amplify_feature_flags_isValid = false;

    m_amplify_meta_config_isSet = false;
    m_amplify_meta_config_isValid = false;

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_app_name_isSet = false;
    m_app_name_isValid = false;

    m_backend_environment_list_isSet = false;
    m_backend_environment_list_isValid = false;

    m_backend_environment_name_isSet = false;
    m_backend_environment_name_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;
}

void OAIGetBackendResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetBackendResponse::fromJsonObject(QJsonObject json) {

    m_amplify_feature_flags_isValid = ::OpenAPI::fromJsonValue(m_amplify_feature_flags, json[QString("AmplifyFeatureFlags")]);
    m_amplify_feature_flags_isSet = !json[QString("AmplifyFeatureFlags")].isNull() && m_amplify_feature_flags_isValid;

    m_amplify_meta_config_isValid = ::OpenAPI::fromJsonValue(m_amplify_meta_config, json[QString("AmplifyMetaConfig")]);
    m_amplify_meta_config_isSet = !json[QString("AmplifyMetaConfig")].isNull() && m_amplify_meta_config_isValid;

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("AppId")]);
    m_app_id_isSet = !json[QString("AppId")].isNull() && m_app_id_isValid;

    m_app_name_isValid = ::OpenAPI::fromJsonValue(m_app_name, json[QString("AppName")]);
    m_app_name_isSet = !json[QString("AppName")].isNull() && m_app_name_isValid;

    m_backend_environment_list_isValid = ::OpenAPI::fromJsonValue(m_backend_environment_list, json[QString("BackendEnvironmentList")]);
    m_backend_environment_list_isSet = !json[QString("BackendEnvironmentList")].isNull() && m_backend_environment_list_isValid;

    m_backend_environment_name_isValid = ::OpenAPI::fromJsonValue(m_backend_environment_name, json[QString("BackendEnvironmentName")]);
    m_backend_environment_name_isSet = !json[QString("BackendEnvironmentName")].isNull() && m_backend_environment_name_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("Error")]);
    m_error_isSet = !json[QString("Error")].isNull() && m_error_isValid;
}

QString OAIGetBackendResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetBackendResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_amplify_feature_flags_isSet) {
        obj.insert(QString("AmplifyFeatureFlags"), ::OpenAPI::toJsonValue(m_amplify_feature_flags));
    }
    if (m_amplify_meta_config_isSet) {
        obj.insert(QString("AmplifyMetaConfig"), ::OpenAPI::toJsonValue(m_amplify_meta_config));
    }
    if (m_app_id_isSet) {
        obj.insert(QString("AppId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_app_name_isSet) {
        obj.insert(QString("AppName"), ::OpenAPI::toJsonValue(m_app_name));
    }
    if (m_backend_environment_list.isSet()) {
        obj.insert(QString("BackendEnvironmentList"), ::OpenAPI::toJsonValue(m_backend_environment_list));
    }
    if (m_backend_environment_name_isSet) {
        obj.insert(QString("BackendEnvironmentName"), ::OpenAPI::toJsonValue(m_backend_environment_name));
    }
    if (m_error_isSet) {
        obj.insert(QString("Error"), ::OpenAPI::toJsonValue(m_error));
    }
    return obj;
}

QString OAIGetBackendResponse::getAmplifyFeatureFlags() const {
    return m_amplify_feature_flags;
}
void OAIGetBackendResponse::setAmplifyFeatureFlags(const QString &amplify_feature_flags) {
    m_amplify_feature_flags = amplify_feature_flags;
    m_amplify_feature_flags_isSet = true;
}

bool OAIGetBackendResponse::is_amplify_feature_flags_Set() const{
    return m_amplify_feature_flags_isSet;
}

bool OAIGetBackendResponse::is_amplify_feature_flags_Valid() const{
    return m_amplify_feature_flags_isValid;
}

QString OAIGetBackendResponse::getAmplifyMetaConfig() const {
    return m_amplify_meta_config;
}
void OAIGetBackendResponse::setAmplifyMetaConfig(const QString &amplify_meta_config) {
    m_amplify_meta_config = amplify_meta_config;
    m_amplify_meta_config_isSet = true;
}

bool OAIGetBackendResponse::is_amplify_meta_config_Set() const{
    return m_amplify_meta_config_isSet;
}

bool OAIGetBackendResponse::is_amplify_meta_config_Valid() const{
    return m_amplify_meta_config_isValid;
}

QString OAIGetBackendResponse::getAppId() const {
    return m_app_id;
}
void OAIGetBackendResponse::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIGetBackendResponse::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIGetBackendResponse::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAIGetBackendResponse::getAppName() const {
    return m_app_name;
}
void OAIGetBackendResponse::setAppName(const QString &app_name) {
    m_app_name = app_name;
    m_app_name_isSet = true;
}

bool OAIGetBackendResponse::is_app_name_Set() const{
    return m_app_name_isSet;
}

bool OAIGetBackendResponse::is_app_name_Valid() const{
    return m_app_name_isValid;
}

QList OAIGetBackendResponse::getBackendEnvironmentList() const {
    return m_backend_environment_list;
}
void OAIGetBackendResponse::setBackendEnvironmentList(const QList &backend_environment_list) {
    m_backend_environment_list = backend_environment_list;
    m_backend_environment_list_isSet = true;
}

bool OAIGetBackendResponse::is_backend_environment_list_Set() const{
    return m_backend_environment_list_isSet;
}

bool OAIGetBackendResponse::is_backend_environment_list_Valid() const{
    return m_backend_environment_list_isValid;
}

QString OAIGetBackendResponse::getBackendEnvironmentName() const {
    return m_backend_environment_name;
}
void OAIGetBackendResponse::setBackendEnvironmentName(const QString &backend_environment_name) {
    m_backend_environment_name = backend_environment_name;
    m_backend_environment_name_isSet = true;
}

bool OAIGetBackendResponse::is_backend_environment_name_Set() const{
    return m_backend_environment_name_isSet;
}

bool OAIGetBackendResponse::is_backend_environment_name_Valid() const{
    return m_backend_environment_name_isValid;
}

QString OAIGetBackendResponse::getError() const {
    return m_error;
}
void OAIGetBackendResponse::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIGetBackendResponse::is_error_Set() const{
    return m_error_isSet;
}

bool OAIGetBackendResponse::is_error_Valid() const{
    return m_error_isValid;
}

bool OAIGetBackendResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amplify_feature_flags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amplify_meta_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_environment_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_environment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetBackendResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
