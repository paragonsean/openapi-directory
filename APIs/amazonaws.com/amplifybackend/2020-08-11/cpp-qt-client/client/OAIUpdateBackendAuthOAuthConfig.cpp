/**
 * AmplifyBackend
 * AWS Amplify Admin API
 *
 * The version of the OpenAPI document: 2020-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateBackendAuthOAuthConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateBackendAuthOAuthConfig::OAIUpdateBackendAuthOAuthConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateBackendAuthOAuthConfig::OAIUpdateBackendAuthOAuthConfig() {
    this->initializeModel();
}

OAIUpdateBackendAuthOAuthConfig::~OAIUpdateBackendAuthOAuthConfig() {}

void OAIUpdateBackendAuthOAuthConfig::initializeModel() {

    m_domain_prefix_isSet = false;
    m_domain_prefix_isValid = false;

    m_o_auth_grant_type_isSet = false;
    m_o_auth_grant_type_isValid = false;

    m_o_auth_scopes_isSet = false;
    m_o_auth_scopes_isValid = false;

    m_redirect_sign_in_uris_isSet = false;
    m_redirect_sign_in_uris_isValid = false;

    m_redirect_sign_out_uris_isSet = false;
    m_redirect_sign_out_uris_isValid = false;

    m_social_provider_settings_isSet = false;
    m_social_provider_settings_isValid = false;
}

void OAIUpdateBackendAuthOAuthConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateBackendAuthOAuthConfig::fromJsonObject(QJsonObject json) {

    m_domain_prefix_isValid = ::OpenAPI::fromJsonValue(m_domain_prefix, json[QString("DomainPrefix")]);
    m_domain_prefix_isSet = !json[QString("DomainPrefix")].isNull() && m_domain_prefix_isValid;

    m_o_auth_grant_type_isValid = ::OpenAPI::fromJsonValue(m_o_auth_grant_type, json[QString("OAuthGrantType")]);
    m_o_auth_grant_type_isSet = !json[QString("OAuthGrantType")].isNull() && m_o_auth_grant_type_isValid;

    m_o_auth_scopes_isValid = ::OpenAPI::fromJsonValue(m_o_auth_scopes, json[QString("OAuthScopes")]);
    m_o_auth_scopes_isSet = !json[QString("OAuthScopes")].isNull() && m_o_auth_scopes_isValid;

    m_redirect_sign_in_uris_isValid = ::OpenAPI::fromJsonValue(m_redirect_sign_in_uris, json[QString("RedirectSignInURIs")]);
    m_redirect_sign_in_uris_isSet = !json[QString("RedirectSignInURIs")].isNull() && m_redirect_sign_in_uris_isValid;

    m_redirect_sign_out_uris_isValid = ::OpenAPI::fromJsonValue(m_redirect_sign_out_uris, json[QString("RedirectSignOutURIs")]);
    m_redirect_sign_out_uris_isSet = !json[QString("RedirectSignOutURIs")].isNull() && m_redirect_sign_out_uris_isValid;

    m_social_provider_settings_isValid = ::OpenAPI::fromJsonValue(m_social_provider_settings, json[QString("SocialProviderSettings")]);
    m_social_provider_settings_isSet = !json[QString("SocialProviderSettings")].isNull() && m_social_provider_settings_isValid;
}

QString OAIUpdateBackendAuthOAuthConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateBackendAuthOAuthConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_prefix_isSet) {
        obj.insert(QString("DomainPrefix"), ::OpenAPI::toJsonValue(m_domain_prefix));
    }
    if (m_o_auth_grant_type.isSet()) {
        obj.insert(QString("OAuthGrantType"), ::OpenAPI::toJsonValue(m_o_auth_grant_type));
    }
    if (m_o_auth_scopes.isSet()) {
        obj.insert(QString("OAuthScopes"), ::OpenAPI::toJsonValue(m_o_auth_scopes));
    }
    if (m_redirect_sign_in_uris.isSet()) {
        obj.insert(QString("RedirectSignInURIs"), ::OpenAPI::toJsonValue(m_redirect_sign_in_uris));
    }
    if (m_redirect_sign_out_uris.isSet()) {
        obj.insert(QString("RedirectSignOutURIs"), ::OpenAPI::toJsonValue(m_redirect_sign_out_uris));
    }
    if (m_social_provider_settings.isSet()) {
        obj.insert(QString("SocialProviderSettings"), ::OpenAPI::toJsonValue(m_social_provider_settings));
    }
    return obj;
}

QString OAIUpdateBackendAuthOAuthConfig::getDomainPrefix() const {
    return m_domain_prefix;
}
void OAIUpdateBackendAuthOAuthConfig::setDomainPrefix(const QString &domain_prefix) {
    m_domain_prefix = domain_prefix;
    m_domain_prefix_isSet = true;
}

bool OAIUpdateBackendAuthOAuthConfig::is_domain_prefix_Set() const{
    return m_domain_prefix_isSet;
}

bool OAIUpdateBackendAuthOAuthConfig::is_domain_prefix_Valid() const{
    return m_domain_prefix_isValid;
}

OAIOAuthGrantType OAIUpdateBackendAuthOAuthConfig::getOAuthGrantType() const {
    return m_o_auth_grant_type;
}
void OAIUpdateBackendAuthOAuthConfig::setOAuthGrantType(const OAIOAuthGrantType &o_auth_grant_type) {
    m_o_auth_grant_type = o_auth_grant_type;
    m_o_auth_grant_type_isSet = true;
}

bool OAIUpdateBackendAuthOAuthConfig::is_o_auth_grant_type_Set() const{
    return m_o_auth_grant_type_isSet;
}

bool OAIUpdateBackendAuthOAuthConfig::is_o_auth_grant_type_Valid() const{
    return m_o_auth_grant_type_isValid;
}

QList OAIUpdateBackendAuthOAuthConfig::getOAuthScopes() const {
    return m_o_auth_scopes;
}
void OAIUpdateBackendAuthOAuthConfig::setOAuthScopes(const QList &o_auth_scopes) {
    m_o_auth_scopes = o_auth_scopes;
    m_o_auth_scopes_isSet = true;
}

bool OAIUpdateBackendAuthOAuthConfig::is_o_auth_scopes_Set() const{
    return m_o_auth_scopes_isSet;
}

bool OAIUpdateBackendAuthOAuthConfig::is_o_auth_scopes_Valid() const{
    return m_o_auth_scopes_isValid;
}

QList OAIUpdateBackendAuthOAuthConfig::getRedirectSignInUris() const {
    return m_redirect_sign_in_uris;
}
void OAIUpdateBackendAuthOAuthConfig::setRedirectSignInUris(const QList &redirect_sign_in_uris) {
    m_redirect_sign_in_uris = redirect_sign_in_uris;
    m_redirect_sign_in_uris_isSet = true;
}

bool OAIUpdateBackendAuthOAuthConfig::is_redirect_sign_in_uris_Set() const{
    return m_redirect_sign_in_uris_isSet;
}

bool OAIUpdateBackendAuthOAuthConfig::is_redirect_sign_in_uris_Valid() const{
    return m_redirect_sign_in_uris_isValid;
}

QList OAIUpdateBackendAuthOAuthConfig::getRedirectSignOutUris() const {
    return m_redirect_sign_out_uris;
}
void OAIUpdateBackendAuthOAuthConfig::setRedirectSignOutUris(const QList &redirect_sign_out_uris) {
    m_redirect_sign_out_uris = redirect_sign_out_uris;
    m_redirect_sign_out_uris_isSet = true;
}

bool OAIUpdateBackendAuthOAuthConfig::is_redirect_sign_out_uris_Set() const{
    return m_redirect_sign_out_uris_isSet;
}

bool OAIUpdateBackendAuthOAuthConfig::is_redirect_sign_out_uris_Valid() const{
    return m_redirect_sign_out_uris_isValid;
}

OAIUpdateBackendAuthOAuthConfig_SocialProviderSettings OAIUpdateBackendAuthOAuthConfig::getSocialProviderSettings() const {
    return m_social_provider_settings;
}
void OAIUpdateBackendAuthOAuthConfig::setSocialProviderSettings(const OAIUpdateBackendAuthOAuthConfig_SocialProviderSettings &social_provider_settings) {
    m_social_provider_settings = social_provider_settings;
    m_social_provider_settings_isSet = true;
}

bool OAIUpdateBackendAuthOAuthConfig::is_social_provider_settings_Set() const{
    return m_social_provider_settings_isSet;
}

bool OAIUpdateBackendAuthOAuthConfig::is_social_provider_settings_Valid() const{
    return m_social_provider_settings_isValid;
}

bool OAIUpdateBackendAuthOAuthConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_o_auth_grant_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_o_auth_scopes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_sign_in_uris.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_sign_out_uris.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_social_provider_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateBackendAuthOAuthConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
