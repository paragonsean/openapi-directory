/**
 * AmplifyBackend
 * AWS Amplify Admin API
 *
 * The version of the OpenAPI document: 2020-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateBackendAPIRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateBackendAPIRequest::OAICreateBackendAPIRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateBackendAPIRequest::OAICreateBackendAPIRequest() {
    this->initializeModel();
}

OAICreateBackendAPIRequest::~OAICreateBackendAPIRequest() {}

void OAICreateBackendAPIRequest::initializeModel() {

    m_backend_environment_name_isSet = false;
    m_backend_environment_name_isValid = false;

    m_resource_config_isSet = false;
    m_resource_config_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;
}

void OAICreateBackendAPIRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateBackendAPIRequest::fromJsonObject(QJsonObject json) {

    m_backend_environment_name_isValid = ::OpenAPI::fromJsonValue(m_backend_environment_name, json[QString("BackendEnvironmentName")]);
    m_backend_environment_name_isSet = !json[QString("BackendEnvironmentName")].isNull() && m_backend_environment_name_isValid;

    m_resource_config_isValid = ::OpenAPI::fromJsonValue(m_resource_config, json[QString("ResourceConfig")]);
    m_resource_config_isSet = !json[QString("ResourceConfig")].isNull() && m_resource_config_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("ResourceName")]);
    m_resource_name_isSet = !json[QString("ResourceName")].isNull() && m_resource_name_isValid;
}

QString OAICreateBackendAPIRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateBackendAPIRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_backend_environment_name_isSet) {
        obj.insert(QString("BackendEnvironmentName"), ::OpenAPI::toJsonValue(m_backend_environment_name));
    }
    if (m_resource_config.isSet()) {
        obj.insert(QString("ResourceConfig"), ::OpenAPI::toJsonValue(m_resource_config));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("ResourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    return obj;
}

QString OAICreateBackendAPIRequest::getBackendEnvironmentName() const {
    return m_backend_environment_name;
}
void OAICreateBackendAPIRequest::setBackendEnvironmentName(const QString &backend_environment_name) {
    m_backend_environment_name = backend_environment_name;
    m_backend_environment_name_isSet = true;
}

bool OAICreateBackendAPIRequest::is_backend_environment_name_Set() const{
    return m_backend_environment_name_isSet;
}

bool OAICreateBackendAPIRequest::is_backend_environment_name_Valid() const{
    return m_backend_environment_name_isValid;
}

OAICreateBackendAPIRequest_ResourceConfig OAICreateBackendAPIRequest::getResourceConfig() const {
    return m_resource_config;
}
void OAICreateBackendAPIRequest::setResourceConfig(const OAICreateBackendAPIRequest_ResourceConfig &resource_config) {
    m_resource_config = resource_config;
    m_resource_config_isSet = true;
}

bool OAICreateBackendAPIRequest::is_resource_config_Set() const{
    return m_resource_config_isSet;
}

bool OAICreateBackendAPIRequest::is_resource_config_Valid() const{
    return m_resource_config_isValid;
}

QString OAICreateBackendAPIRequest::getResourceName() const {
    return m_resource_name;
}
void OAICreateBackendAPIRequest::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAICreateBackendAPIRequest::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAICreateBackendAPIRequest::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

bool OAICreateBackendAPIRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backend_environment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateBackendAPIRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_backend_environment_name_isValid && m_resource_config_isValid && m_resource_name_isValid && true;
}

} // namespace OpenAPI
