/**
 * AmplifyBackend
 * AWS Amplify Admin API
 *
 * The version of the OpenAPI document: 2020-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackendAPIAuthType_Settings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackendAPIAuthType_Settings::OAIBackendAPIAuthType_Settings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackendAPIAuthType_Settings::OAIBackendAPIAuthType_Settings() {
    this->initializeModel();
}

OAIBackendAPIAuthType_Settings::~OAIBackendAPIAuthType_Settings() {}

void OAIBackendAPIAuthType_Settings::initializeModel() {

    m_cognito_user_pool_id_isSet = false;
    m_cognito_user_pool_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_expiration_time_isSet = false;
    m_expiration_time_isValid = false;

    m_open_id_auth_ttl_isSet = false;
    m_open_id_auth_ttl_isValid = false;

    m_open_id_client_id_isSet = false;
    m_open_id_client_id_isValid = false;

    m_open_id_iat_ttl_isSet = false;
    m_open_id_iat_ttl_isValid = false;

    m_open_id_issue_url_isSet = false;
    m_open_id_issue_url_isValid = false;

    m_open_id_provider_name_isSet = false;
    m_open_id_provider_name_isValid = false;
}

void OAIBackendAPIAuthType_Settings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackendAPIAuthType_Settings::fromJsonObject(QJsonObject json) {

    m_cognito_user_pool_id_isValid = ::OpenAPI::fromJsonValue(m_cognito_user_pool_id, json[QString("CognitoUserPoolId")]);
    m_cognito_user_pool_id_isSet = !json[QString("CognitoUserPoolId")].isNull() && m_cognito_user_pool_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_expiration_time, json[QString("ExpirationTime")]);
    m_expiration_time_isSet = !json[QString("ExpirationTime")].isNull() && m_expiration_time_isValid;

    m_open_id_auth_ttl_isValid = ::OpenAPI::fromJsonValue(m_open_id_auth_ttl, json[QString("OpenIDAuthTTL")]);
    m_open_id_auth_ttl_isSet = !json[QString("OpenIDAuthTTL")].isNull() && m_open_id_auth_ttl_isValid;

    m_open_id_client_id_isValid = ::OpenAPI::fromJsonValue(m_open_id_client_id, json[QString("OpenIDClientId")]);
    m_open_id_client_id_isSet = !json[QString("OpenIDClientId")].isNull() && m_open_id_client_id_isValid;

    m_open_id_iat_ttl_isValid = ::OpenAPI::fromJsonValue(m_open_id_iat_ttl, json[QString("OpenIDIatTTL")]);
    m_open_id_iat_ttl_isSet = !json[QString("OpenIDIatTTL")].isNull() && m_open_id_iat_ttl_isValid;

    m_open_id_issue_url_isValid = ::OpenAPI::fromJsonValue(m_open_id_issue_url, json[QString("OpenIDIssueURL")]);
    m_open_id_issue_url_isSet = !json[QString("OpenIDIssueURL")].isNull() && m_open_id_issue_url_isValid;

    m_open_id_provider_name_isValid = ::OpenAPI::fromJsonValue(m_open_id_provider_name, json[QString("OpenIDProviderName")]);
    m_open_id_provider_name_isSet = !json[QString("OpenIDProviderName")].isNull() && m_open_id_provider_name_isValid;
}

QString OAIBackendAPIAuthType_Settings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackendAPIAuthType_Settings::asJsonObject() const {
    QJsonObject obj;
    if (m_cognito_user_pool_id_isSet) {
        obj.insert(QString("CognitoUserPoolId"), ::OpenAPI::toJsonValue(m_cognito_user_pool_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_expiration_time_isSet) {
        obj.insert(QString("ExpirationTime"), ::OpenAPI::toJsonValue(m_expiration_time));
    }
    if (m_open_id_auth_ttl_isSet) {
        obj.insert(QString("OpenIDAuthTTL"), ::OpenAPI::toJsonValue(m_open_id_auth_ttl));
    }
    if (m_open_id_client_id_isSet) {
        obj.insert(QString("OpenIDClientId"), ::OpenAPI::toJsonValue(m_open_id_client_id));
    }
    if (m_open_id_iat_ttl_isSet) {
        obj.insert(QString("OpenIDIatTTL"), ::OpenAPI::toJsonValue(m_open_id_iat_ttl));
    }
    if (m_open_id_issue_url_isSet) {
        obj.insert(QString("OpenIDIssueURL"), ::OpenAPI::toJsonValue(m_open_id_issue_url));
    }
    if (m_open_id_provider_name_isSet) {
        obj.insert(QString("OpenIDProviderName"), ::OpenAPI::toJsonValue(m_open_id_provider_name));
    }
    return obj;
}

QString OAIBackendAPIAuthType_Settings::getCognitoUserPoolId() const {
    return m_cognito_user_pool_id;
}
void OAIBackendAPIAuthType_Settings::setCognitoUserPoolId(const QString &cognito_user_pool_id) {
    m_cognito_user_pool_id = cognito_user_pool_id;
    m_cognito_user_pool_id_isSet = true;
}

bool OAIBackendAPIAuthType_Settings::is_cognito_user_pool_id_Set() const{
    return m_cognito_user_pool_id_isSet;
}

bool OAIBackendAPIAuthType_Settings::is_cognito_user_pool_id_Valid() const{
    return m_cognito_user_pool_id_isValid;
}

QString OAIBackendAPIAuthType_Settings::getDescription() const {
    return m_description;
}
void OAIBackendAPIAuthType_Settings::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBackendAPIAuthType_Settings::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBackendAPIAuthType_Settings::is_description_Valid() const{
    return m_description_isValid;
}

double OAIBackendAPIAuthType_Settings::getExpirationTime() const {
    return m_expiration_time;
}
void OAIBackendAPIAuthType_Settings::setExpirationTime(const double &expiration_time) {
    m_expiration_time = expiration_time;
    m_expiration_time_isSet = true;
}

bool OAIBackendAPIAuthType_Settings::is_expiration_time_Set() const{
    return m_expiration_time_isSet;
}

bool OAIBackendAPIAuthType_Settings::is_expiration_time_Valid() const{
    return m_expiration_time_isValid;
}

QString OAIBackendAPIAuthType_Settings::getOpenIdAuthTtl() const {
    return m_open_id_auth_ttl;
}
void OAIBackendAPIAuthType_Settings::setOpenIdAuthTtl(const QString &open_id_auth_ttl) {
    m_open_id_auth_ttl = open_id_auth_ttl;
    m_open_id_auth_ttl_isSet = true;
}

bool OAIBackendAPIAuthType_Settings::is_open_id_auth_ttl_Set() const{
    return m_open_id_auth_ttl_isSet;
}

bool OAIBackendAPIAuthType_Settings::is_open_id_auth_ttl_Valid() const{
    return m_open_id_auth_ttl_isValid;
}

QString OAIBackendAPIAuthType_Settings::getOpenIdClientId() const {
    return m_open_id_client_id;
}
void OAIBackendAPIAuthType_Settings::setOpenIdClientId(const QString &open_id_client_id) {
    m_open_id_client_id = open_id_client_id;
    m_open_id_client_id_isSet = true;
}

bool OAIBackendAPIAuthType_Settings::is_open_id_client_id_Set() const{
    return m_open_id_client_id_isSet;
}

bool OAIBackendAPIAuthType_Settings::is_open_id_client_id_Valid() const{
    return m_open_id_client_id_isValid;
}

QString OAIBackendAPIAuthType_Settings::getOpenIdIatTtl() const {
    return m_open_id_iat_ttl;
}
void OAIBackendAPIAuthType_Settings::setOpenIdIatTtl(const QString &open_id_iat_ttl) {
    m_open_id_iat_ttl = open_id_iat_ttl;
    m_open_id_iat_ttl_isSet = true;
}

bool OAIBackendAPIAuthType_Settings::is_open_id_iat_ttl_Set() const{
    return m_open_id_iat_ttl_isSet;
}

bool OAIBackendAPIAuthType_Settings::is_open_id_iat_ttl_Valid() const{
    return m_open_id_iat_ttl_isValid;
}

QString OAIBackendAPIAuthType_Settings::getOpenIdIssueUrl() const {
    return m_open_id_issue_url;
}
void OAIBackendAPIAuthType_Settings::setOpenIdIssueUrl(const QString &open_id_issue_url) {
    m_open_id_issue_url = open_id_issue_url;
    m_open_id_issue_url_isSet = true;
}

bool OAIBackendAPIAuthType_Settings::is_open_id_issue_url_Set() const{
    return m_open_id_issue_url_isSet;
}

bool OAIBackendAPIAuthType_Settings::is_open_id_issue_url_Valid() const{
    return m_open_id_issue_url_isValid;
}

QString OAIBackendAPIAuthType_Settings::getOpenIdProviderName() const {
    return m_open_id_provider_name;
}
void OAIBackendAPIAuthType_Settings::setOpenIdProviderName(const QString &open_id_provider_name) {
    m_open_id_provider_name = open_id_provider_name;
    m_open_id_provider_name_isSet = true;
}

bool OAIBackendAPIAuthType_Settings::is_open_id_provider_name_Set() const{
    return m_open_id_provider_name_isSet;
}

bool OAIBackendAPIAuthType_Settings::is_open_id_provider_name_Valid() const{
    return m_open_id_provider_name_isValid;
}

bool OAIBackendAPIAuthType_Settings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cognito_user_pool_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_id_auth_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_id_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_id_iat_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_id_issue_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_id_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackendAPIAuthType_Settings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
