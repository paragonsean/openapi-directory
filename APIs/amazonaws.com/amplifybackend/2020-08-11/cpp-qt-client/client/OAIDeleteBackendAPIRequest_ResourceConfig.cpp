/**
 * AmplifyBackend
 * AWS Amplify Admin API
 *
 * The version of the OpenAPI document: 2020-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteBackendAPIRequest_ResourceConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteBackendAPIRequest_ResourceConfig::OAIDeleteBackendAPIRequest_ResourceConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteBackendAPIRequest_ResourceConfig::OAIDeleteBackendAPIRequest_ResourceConfig() {
    this->initializeModel();
}

OAIDeleteBackendAPIRequest_ResourceConfig::~OAIDeleteBackendAPIRequest_ResourceConfig() {}

void OAIDeleteBackendAPIRequest_ResourceConfig::initializeModel() {

    m_additional_auth_types_isSet = false;
    m_additional_auth_types_isValid = false;

    m_api_name_isSet = false;
    m_api_name_isValid = false;

    m_conflict_resolution_isSet = false;
    m_conflict_resolution_isValid = false;

    m_default_auth_type_isSet = false;
    m_default_auth_type_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_transform_schema_isSet = false;
    m_transform_schema_isValid = false;
}

void OAIDeleteBackendAPIRequest_ResourceConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteBackendAPIRequest_ResourceConfig::fromJsonObject(QJsonObject json) {

    m_additional_auth_types_isValid = ::OpenAPI::fromJsonValue(m_additional_auth_types, json[QString("AdditionalAuthTypes")]);
    m_additional_auth_types_isSet = !json[QString("AdditionalAuthTypes")].isNull() && m_additional_auth_types_isValid;

    m_api_name_isValid = ::OpenAPI::fromJsonValue(m_api_name, json[QString("ApiName")]);
    m_api_name_isSet = !json[QString("ApiName")].isNull() && m_api_name_isValid;

    m_conflict_resolution_isValid = ::OpenAPI::fromJsonValue(m_conflict_resolution, json[QString("ConflictResolution")]);
    m_conflict_resolution_isSet = !json[QString("ConflictResolution")].isNull() && m_conflict_resolution_isValid;

    m_default_auth_type_isValid = ::OpenAPI::fromJsonValue(m_default_auth_type, json[QString("DefaultAuthType")]);
    m_default_auth_type_isSet = !json[QString("DefaultAuthType")].isNull() && m_default_auth_type_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("Service")]);
    m_service_isSet = !json[QString("Service")].isNull() && m_service_isValid;

    m_transform_schema_isValid = ::OpenAPI::fromJsonValue(m_transform_schema, json[QString("TransformSchema")]);
    m_transform_schema_isSet = !json[QString("TransformSchema")].isNull() && m_transform_schema_isValid;
}

QString OAIDeleteBackendAPIRequest_ResourceConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteBackendAPIRequest_ResourceConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_auth_types.isSet()) {
        obj.insert(QString("AdditionalAuthTypes"), ::OpenAPI::toJsonValue(m_additional_auth_types));
    }
    if (m_api_name_isSet) {
        obj.insert(QString("ApiName"), ::OpenAPI::toJsonValue(m_api_name));
    }
    if (m_conflict_resolution.isSet()) {
        obj.insert(QString("ConflictResolution"), ::OpenAPI::toJsonValue(m_conflict_resolution));
    }
    if (m_default_auth_type.isSet()) {
        obj.insert(QString("DefaultAuthType"), ::OpenAPI::toJsonValue(m_default_auth_type));
    }
    if (m_service_isSet) {
        obj.insert(QString("Service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_transform_schema_isSet) {
        obj.insert(QString("TransformSchema"), ::OpenAPI::toJsonValue(m_transform_schema));
    }
    return obj;
}

QList OAIDeleteBackendAPIRequest_ResourceConfig::getAdditionalAuthTypes() const {
    return m_additional_auth_types;
}
void OAIDeleteBackendAPIRequest_ResourceConfig::setAdditionalAuthTypes(const QList &additional_auth_types) {
    m_additional_auth_types = additional_auth_types;
    m_additional_auth_types_isSet = true;
}

bool OAIDeleteBackendAPIRequest_ResourceConfig::is_additional_auth_types_Set() const{
    return m_additional_auth_types_isSet;
}

bool OAIDeleteBackendAPIRequest_ResourceConfig::is_additional_auth_types_Valid() const{
    return m_additional_auth_types_isValid;
}

QString OAIDeleteBackendAPIRequest_ResourceConfig::getApiName() const {
    return m_api_name;
}
void OAIDeleteBackendAPIRequest_ResourceConfig::setApiName(const QString &api_name) {
    m_api_name = api_name;
    m_api_name_isSet = true;
}

bool OAIDeleteBackendAPIRequest_ResourceConfig::is_api_name_Set() const{
    return m_api_name_isSet;
}

bool OAIDeleteBackendAPIRequest_ResourceConfig::is_api_name_Valid() const{
    return m_api_name_isValid;
}

OAICreateBackendAPI_request_resourceConfig_ConflictResolution OAIDeleteBackendAPIRequest_ResourceConfig::getConflictResolution() const {
    return m_conflict_resolution;
}
void OAIDeleteBackendAPIRequest_ResourceConfig::setConflictResolution(const OAICreateBackendAPI_request_resourceConfig_ConflictResolution &conflict_resolution) {
    m_conflict_resolution = conflict_resolution;
    m_conflict_resolution_isSet = true;
}

bool OAIDeleteBackendAPIRequest_ResourceConfig::is_conflict_resolution_Set() const{
    return m_conflict_resolution_isSet;
}

bool OAIDeleteBackendAPIRequest_ResourceConfig::is_conflict_resolution_Valid() const{
    return m_conflict_resolution_isValid;
}

OAICreateBackendAPI_request_resourceConfig_DefaultAuthType OAIDeleteBackendAPIRequest_ResourceConfig::getDefaultAuthType() const {
    return m_default_auth_type;
}
void OAIDeleteBackendAPIRequest_ResourceConfig::setDefaultAuthType(const OAICreateBackendAPI_request_resourceConfig_DefaultAuthType &default_auth_type) {
    m_default_auth_type = default_auth_type;
    m_default_auth_type_isSet = true;
}

bool OAIDeleteBackendAPIRequest_ResourceConfig::is_default_auth_type_Set() const{
    return m_default_auth_type_isSet;
}

bool OAIDeleteBackendAPIRequest_ResourceConfig::is_default_auth_type_Valid() const{
    return m_default_auth_type_isValid;
}

QString OAIDeleteBackendAPIRequest_ResourceConfig::getService() const {
    return m_service;
}
void OAIDeleteBackendAPIRequest_ResourceConfig::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIDeleteBackendAPIRequest_ResourceConfig::is_service_Set() const{
    return m_service_isSet;
}

bool OAIDeleteBackendAPIRequest_ResourceConfig::is_service_Valid() const{
    return m_service_isValid;
}

QString OAIDeleteBackendAPIRequest_ResourceConfig::getTransformSchema() const {
    return m_transform_schema;
}
void OAIDeleteBackendAPIRequest_ResourceConfig::setTransformSchema(const QString &transform_schema) {
    m_transform_schema = transform_schema;
    m_transform_schema_isSet = true;
}

bool OAIDeleteBackendAPIRequest_ResourceConfig::is_transform_schema_Set() const{
    return m_transform_schema_isSet;
}

bool OAIDeleteBackendAPIRequest_ResourceConfig::is_transform_schema_Valid() const{
    return m_transform_schema_isValid;
}

bool OAIDeleteBackendAPIRequest_ResourceConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_auth_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conflict_resolution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_auth_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transform_schema_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteBackendAPIRequest_ResourceConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
