/**
 * AmplifyBackend
 * AWS Amplify Admin API
 *
 * The version of the OpenAPI document: 2020-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetBackendStorageResourceConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetBackendStorageResourceConfig::OAIGetBackendStorageResourceConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetBackendStorageResourceConfig::OAIGetBackendStorageResourceConfig() {
    this->initializeModel();
}

OAIGetBackendStorageResourceConfig::~OAIGetBackendStorageResourceConfig() {}

void OAIGetBackendStorageResourceConfig::initializeModel() {

    m_bucket_name_isSet = false;
    m_bucket_name_isValid = false;

    m_imported_isSet = false;
    m_imported_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;
}

void OAIGetBackendStorageResourceConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetBackendStorageResourceConfig::fromJsonObject(QJsonObject json) {

    m_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_bucket_name, json[QString("BucketName")]);
    m_bucket_name_isSet = !json[QString("BucketName")].isNull() && m_bucket_name_isValid;

    m_imported_isValid = ::OpenAPI::fromJsonValue(m_imported, json[QString("Imported")]);
    m_imported_isSet = !json[QString("Imported")].isNull() && m_imported_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("Permissions")]);
    m_permissions_isSet = !json[QString("Permissions")].isNull() && m_permissions_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("ServiceName")]);
    m_service_name_isSet = !json[QString("ServiceName")].isNull() && m_service_name_isValid;
}

QString OAIGetBackendStorageResourceConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetBackendStorageResourceConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_name_isSet) {
        obj.insert(QString("BucketName"), ::OpenAPI::toJsonValue(m_bucket_name));
    }
    if (m_imported_isSet) {
        obj.insert(QString("Imported"), ::OpenAPI::toJsonValue(m_imported));
    }
    if (m_permissions.isSet()) {
        obj.insert(QString("Permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_service_name.isSet()) {
        obj.insert(QString("ServiceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    return obj;
}

QString OAIGetBackendStorageResourceConfig::getBucketName() const {
    return m_bucket_name;
}
void OAIGetBackendStorageResourceConfig::setBucketName(const QString &bucket_name) {
    m_bucket_name = bucket_name;
    m_bucket_name_isSet = true;
}

bool OAIGetBackendStorageResourceConfig::is_bucket_name_Set() const{
    return m_bucket_name_isSet;
}

bool OAIGetBackendStorageResourceConfig::is_bucket_name_Valid() const{
    return m_bucket_name_isValid;
}

bool OAIGetBackendStorageResourceConfig::getImported() const {
    return m_imported;
}
void OAIGetBackendStorageResourceConfig::setImported(const bool &imported) {
    m_imported = imported;
    m_imported_isSet = true;
}

bool OAIGetBackendStorageResourceConfig::is_imported_Set() const{
    return m_imported_isSet;
}

bool OAIGetBackendStorageResourceConfig::is_imported_Valid() const{
    return m_imported_isValid;
}

OAICreateBackendStorage_request_resourceConfig_Permissions OAIGetBackendStorageResourceConfig::getPermissions() const {
    return m_permissions;
}
void OAIGetBackendStorageResourceConfig::setPermissions(const OAICreateBackendStorage_request_resourceConfig_Permissions &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIGetBackendStorageResourceConfig::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIGetBackendStorageResourceConfig::is_permissions_Valid() const{
    return m_permissions_isValid;
}

OAIServiceName OAIGetBackendStorageResourceConfig::getServiceName() const {
    return m_service_name;
}
void OAIGetBackendStorageResourceConfig::setServiceName(const OAIServiceName &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIGetBackendStorageResourceConfig::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIGetBackendStorageResourceConfig::is_service_name_Valid() const{
    return m_service_name_isValid;
}

bool OAIGetBackendStorageResourceConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imported_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetBackendStorageResourceConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_imported_isValid && m_service_name_isValid && true;
}

} // namespace OpenAPI
