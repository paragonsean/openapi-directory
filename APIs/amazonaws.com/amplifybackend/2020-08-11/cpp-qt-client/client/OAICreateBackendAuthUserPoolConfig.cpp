/**
 * AmplifyBackend
 * AWS Amplify Admin API
 *
 * The version of the OpenAPI document: 2020-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateBackendAuthUserPoolConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateBackendAuthUserPoolConfig::OAICreateBackendAuthUserPoolConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateBackendAuthUserPoolConfig::OAICreateBackendAuthUserPoolConfig() {
    this->initializeModel();
}

OAICreateBackendAuthUserPoolConfig::~OAICreateBackendAuthUserPoolConfig() {}

void OAICreateBackendAuthUserPoolConfig::initializeModel() {

    m_forgot_password_isSet = false;
    m_forgot_password_isValid = false;

    m_mfa_isSet = false;
    m_mfa_isValid = false;

    m_o_auth_isSet = false;
    m_o_auth_isValid = false;

    m_password_policy_isSet = false;
    m_password_policy_isValid = false;

    m_required_sign_up_attributes_isSet = false;
    m_required_sign_up_attributes_isValid = false;

    m_sign_in_method_isSet = false;
    m_sign_in_method_isValid = false;

    m_user_pool_name_isSet = false;
    m_user_pool_name_isValid = false;

    m_verification_message_isSet = false;
    m_verification_message_isValid = false;
}

void OAICreateBackendAuthUserPoolConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateBackendAuthUserPoolConfig::fromJsonObject(QJsonObject json) {

    m_forgot_password_isValid = ::OpenAPI::fromJsonValue(m_forgot_password, json[QString("ForgotPassword")]);
    m_forgot_password_isSet = !json[QString("ForgotPassword")].isNull() && m_forgot_password_isValid;

    m_mfa_isValid = ::OpenAPI::fromJsonValue(m_mfa, json[QString("Mfa")]);
    m_mfa_isSet = !json[QString("Mfa")].isNull() && m_mfa_isValid;

    m_o_auth_isValid = ::OpenAPI::fromJsonValue(m_o_auth, json[QString("OAuth")]);
    m_o_auth_isSet = !json[QString("OAuth")].isNull() && m_o_auth_isValid;

    m_password_policy_isValid = ::OpenAPI::fromJsonValue(m_password_policy, json[QString("PasswordPolicy")]);
    m_password_policy_isSet = !json[QString("PasswordPolicy")].isNull() && m_password_policy_isValid;

    m_required_sign_up_attributes_isValid = ::OpenAPI::fromJsonValue(m_required_sign_up_attributes, json[QString("RequiredSignUpAttributes")]);
    m_required_sign_up_attributes_isSet = !json[QString("RequiredSignUpAttributes")].isNull() && m_required_sign_up_attributes_isValid;

    m_sign_in_method_isValid = ::OpenAPI::fromJsonValue(m_sign_in_method, json[QString("SignInMethod")]);
    m_sign_in_method_isSet = !json[QString("SignInMethod")].isNull() && m_sign_in_method_isValid;

    m_user_pool_name_isValid = ::OpenAPI::fromJsonValue(m_user_pool_name, json[QString("UserPoolName")]);
    m_user_pool_name_isSet = !json[QString("UserPoolName")].isNull() && m_user_pool_name_isValid;

    m_verification_message_isValid = ::OpenAPI::fromJsonValue(m_verification_message, json[QString("VerificationMessage")]);
    m_verification_message_isSet = !json[QString("VerificationMessage")].isNull() && m_verification_message_isValid;
}

QString OAICreateBackendAuthUserPoolConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateBackendAuthUserPoolConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_forgot_password.isSet()) {
        obj.insert(QString("ForgotPassword"), ::OpenAPI::toJsonValue(m_forgot_password));
    }
    if (m_mfa.isSet()) {
        obj.insert(QString("Mfa"), ::OpenAPI::toJsonValue(m_mfa));
    }
    if (m_o_auth.isSet()) {
        obj.insert(QString("OAuth"), ::OpenAPI::toJsonValue(m_o_auth));
    }
    if (m_password_policy.isSet()) {
        obj.insert(QString("PasswordPolicy"), ::OpenAPI::toJsonValue(m_password_policy));
    }
    if (m_required_sign_up_attributes.isSet()) {
        obj.insert(QString("RequiredSignUpAttributes"), ::OpenAPI::toJsonValue(m_required_sign_up_attributes));
    }
    if (m_sign_in_method.isSet()) {
        obj.insert(QString("SignInMethod"), ::OpenAPI::toJsonValue(m_sign_in_method));
    }
    if (m_user_pool_name_isSet) {
        obj.insert(QString("UserPoolName"), ::OpenAPI::toJsonValue(m_user_pool_name));
    }
    if (m_verification_message.isSet()) {
        obj.insert(QString("VerificationMessage"), ::OpenAPI::toJsonValue(m_verification_message));
    }
    return obj;
}

OAICreateBackendAuthUserPoolConfig_ForgotPassword OAICreateBackendAuthUserPoolConfig::getForgotPassword() const {
    return m_forgot_password;
}
void OAICreateBackendAuthUserPoolConfig::setForgotPassword(const OAICreateBackendAuthUserPoolConfig_ForgotPassword &forgot_password) {
    m_forgot_password = forgot_password;
    m_forgot_password_isSet = true;
}

bool OAICreateBackendAuthUserPoolConfig::is_forgot_password_Set() const{
    return m_forgot_password_isSet;
}

bool OAICreateBackendAuthUserPoolConfig::is_forgot_password_Valid() const{
    return m_forgot_password_isValid;
}

OAICreateBackendAuthUserPoolConfig_Mfa OAICreateBackendAuthUserPoolConfig::getMfa() const {
    return m_mfa;
}
void OAICreateBackendAuthUserPoolConfig::setMfa(const OAICreateBackendAuthUserPoolConfig_Mfa &mfa) {
    m_mfa = mfa;
    m_mfa_isSet = true;
}

bool OAICreateBackendAuthUserPoolConfig::is_mfa_Set() const{
    return m_mfa_isSet;
}

bool OAICreateBackendAuthUserPoolConfig::is_mfa_Valid() const{
    return m_mfa_isValid;
}

OAICreateBackendAuthUserPoolConfig_OAuth OAICreateBackendAuthUserPoolConfig::getOAuth() const {
    return m_o_auth;
}
void OAICreateBackendAuthUserPoolConfig::setOAuth(const OAICreateBackendAuthUserPoolConfig_OAuth &o_auth) {
    m_o_auth = o_auth;
    m_o_auth_isSet = true;
}

bool OAICreateBackendAuthUserPoolConfig::is_o_auth_Set() const{
    return m_o_auth_isSet;
}

bool OAICreateBackendAuthUserPoolConfig::is_o_auth_Valid() const{
    return m_o_auth_isValid;
}

OAICreateBackendAuthUserPoolConfig_PasswordPolicy OAICreateBackendAuthUserPoolConfig::getPasswordPolicy() const {
    return m_password_policy;
}
void OAICreateBackendAuthUserPoolConfig::setPasswordPolicy(const OAICreateBackendAuthUserPoolConfig_PasswordPolicy &password_policy) {
    m_password_policy = password_policy;
    m_password_policy_isSet = true;
}

bool OAICreateBackendAuthUserPoolConfig::is_password_policy_Set() const{
    return m_password_policy_isSet;
}

bool OAICreateBackendAuthUserPoolConfig::is_password_policy_Valid() const{
    return m_password_policy_isValid;
}

QList OAICreateBackendAuthUserPoolConfig::getRequiredSignUpAttributes() const {
    return m_required_sign_up_attributes;
}
void OAICreateBackendAuthUserPoolConfig::setRequiredSignUpAttributes(const QList &required_sign_up_attributes) {
    m_required_sign_up_attributes = required_sign_up_attributes;
    m_required_sign_up_attributes_isSet = true;
}

bool OAICreateBackendAuthUserPoolConfig::is_required_sign_up_attributes_Set() const{
    return m_required_sign_up_attributes_isSet;
}

bool OAICreateBackendAuthUserPoolConfig::is_required_sign_up_attributes_Valid() const{
    return m_required_sign_up_attributes_isValid;
}

OAISignInMethod OAICreateBackendAuthUserPoolConfig::getSignInMethod() const {
    return m_sign_in_method;
}
void OAICreateBackendAuthUserPoolConfig::setSignInMethod(const OAISignInMethod &sign_in_method) {
    m_sign_in_method = sign_in_method;
    m_sign_in_method_isSet = true;
}

bool OAICreateBackendAuthUserPoolConfig::is_sign_in_method_Set() const{
    return m_sign_in_method_isSet;
}

bool OAICreateBackendAuthUserPoolConfig::is_sign_in_method_Valid() const{
    return m_sign_in_method_isValid;
}

QString OAICreateBackendAuthUserPoolConfig::getUserPoolName() const {
    return m_user_pool_name;
}
void OAICreateBackendAuthUserPoolConfig::setUserPoolName(const QString &user_pool_name) {
    m_user_pool_name = user_pool_name;
    m_user_pool_name_isSet = true;
}

bool OAICreateBackendAuthUserPoolConfig::is_user_pool_name_Set() const{
    return m_user_pool_name_isSet;
}

bool OAICreateBackendAuthUserPoolConfig::is_user_pool_name_Valid() const{
    return m_user_pool_name_isValid;
}

OAICreateBackendAuthUserPoolConfig_VerificationMessage OAICreateBackendAuthUserPoolConfig::getVerificationMessage() const {
    return m_verification_message;
}
void OAICreateBackendAuthUserPoolConfig::setVerificationMessage(const OAICreateBackendAuthUserPoolConfig_VerificationMessage &verification_message) {
    m_verification_message = verification_message;
    m_verification_message_isSet = true;
}

bool OAICreateBackendAuthUserPoolConfig::is_verification_message_Set() const{
    return m_verification_message_isSet;
}

bool OAICreateBackendAuthUserPoolConfig::is_verification_message_Valid() const{
    return m_verification_message_isValid;
}

bool OAICreateBackendAuthUserPoolConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_forgot_password.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mfa.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_o_auth.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_sign_up_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sign_in_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_pool_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_message.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateBackendAuthUserPoolConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_required_sign_up_attributes_isValid && m_sign_in_method_isValid && m_user_pool_name_isValid && true;
}

} // namespace OpenAPI
