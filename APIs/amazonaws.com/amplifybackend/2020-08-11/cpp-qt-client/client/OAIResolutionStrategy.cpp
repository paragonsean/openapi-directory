/**
 * AmplifyBackend
 * AWS Amplify Admin API
 *
 * The version of the OpenAPI document: 2020-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResolutionStrategy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResolutionStrategy::OAIResolutionStrategy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResolutionStrategy::OAIResolutionStrategy() {
    this->initializeModel();
}

OAIResolutionStrategy::~OAIResolutionStrategy() {}

void OAIResolutionStrategy::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIResolutionStrategy::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIResolutionStrategy::fromJson(QString jsonString) {
    
    if ( jsonString.compare("OPTIMISTIC_CONCURRENCY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResolutionStrategy::OPTIMISTIC_CONCURRENCY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LAMBDA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResolutionStrategy::LAMBDA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AUTOMERGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResolutionStrategy::AUTOMERGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NONE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResolutionStrategy::NONE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIResolutionStrategy::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIResolutionStrategy::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIResolutionStrategy::OPTIMISTIC_CONCURRENCY:
            val = "OPTIMISTIC_CONCURRENCY";
            break;
        case eOAIResolutionStrategy::LAMBDA:
            val = "LAMBDA";
            break;
        case eOAIResolutionStrategy::AUTOMERGE:
            val = "AUTOMERGE";
            break;
        case eOAIResolutionStrategy::NONE:
            val = "NONE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIResolutionStrategy::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIResolutionStrategy::eOAIResolutionStrategy OAIResolutionStrategy::getValue() const {
    return m_value;
}

void OAIResolutionStrategy::setValue(const OAIResolutionStrategy::eOAIResolutionStrategy& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIResolutionStrategy::isSet() const {
    
    return m_value_isSet;
}

bool OAIResolutionStrategy::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
