/**
 * AmplifyBackend
 * AWS Amplify Admin API
 *
 * The version of the OpenAPI document: 2020-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateBackendConfigResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateBackendConfigResponse::OAIUpdateBackendConfigResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateBackendConfigResponse::OAIUpdateBackendConfigResponse() {
    this->initializeModel();
}

OAIUpdateBackendConfigResponse::~OAIUpdateBackendConfigResponse() {}

void OAIUpdateBackendConfigResponse::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_backend_manager_app_id_isSet = false;
    m_backend_manager_app_id_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_login_auth_config_isSet = false;
    m_login_auth_config_isValid = false;
}

void OAIUpdateBackendConfigResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateBackendConfigResponse::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("AppId")]);
    m_app_id_isSet = !json[QString("AppId")].isNull() && m_app_id_isValid;

    m_backend_manager_app_id_isValid = ::OpenAPI::fromJsonValue(m_backend_manager_app_id, json[QString("BackendManagerAppId")]);
    m_backend_manager_app_id_isSet = !json[QString("BackendManagerAppId")].isNull() && m_backend_manager_app_id_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("Error")]);
    m_error_isSet = !json[QString("Error")].isNull() && m_error_isValid;

    m_login_auth_config_isValid = ::OpenAPI::fromJsonValue(m_login_auth_config, json[QString("LoginAuthConfig")]);
    m_login_auth_config_isSet = !json[QString("LoginAuthConfig")].isNull() && m_login_auth_config_isValid;
}

QString OAIUpdateBackendConfigResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateBackendConfigResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("AppId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_backend_manager_app_id_isSet) {
        obj.insert(QString("BackendManagerAppId"), ::OpenAPI::toJsonValue(m_backend_manager_app_id));
    }
    if (m_error_isSet) {
        obj.insert(QString("Error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_login_auth_config.isSet()) {
        obj.insert(QString("LoginAuthConfig"), ::OpenAPI::toJsonValue(m_login_auth_config));
    }
    return obj;
}

QString OAIUpdateBackendConfigResponse::getAppId() const {
    return m_app_id;
}
void OAIUpdateBackendConfigResponse::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIUpdateBackendConfigResponse::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIUpdateBackendConfigResponse::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAIUpdateBackendConfigResponse::getBackendManagerAppId() const {
    return m_backend_manager_app_id;
}
void OAIUpdateBackendConfigResponse::setBackendManagerAppId(const QString &backend_manager_app_id) {
    m_backend_manager_app_id = backend_manager_app_id;
    m_backend_manager_app_id_isSet = true;
}

bool OAIUpdateBackendConfigResponse::is_backend_manager_app_id_Set() const{
    return m_backend_manager_app_id_isSet;
}

bool OAIUpdateBackendConfigResponse::is_backend_manager_app_id_Valid() const{
    return m_backend_manager_app_id_isValid;
}

QString OAIUpdateBackendConfigResponse::getError() const {
    return m_error;
}
void OAIUpdateBackendConfigResponse::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIUpdateBackendConfigResponse::is_error_Set() const{
    return m_error_isSet;
}

bool OAIUpdateBackendConfigResponse::is_error_Valid() const{
    return m_error_isValid;
}

OAIUpdateBackendConfigResponse_LoginAuthConfig OAIUpdateBackendConfigResponse::getLoginAuthConfig() const {
    return m_login_auth_config;
}
void OAIUpdateBackendConfigResponse::setLoginAuthConfig(const OAIUpdateBackendConfigResponse_LoginAuthConfig &login_auth_config) {
    m_login_auth_config = login_auth_config;
    m_login_auth_config_isSet = true;
}

bool OAIUpdateBackendConfigResponse::is_login_auth_config_Set() const{
    return m_login_auth_config_isSet;
}

bool OAIUpdateBackendConfigResponse::is_login_auth_config_Valid() const{
    return m_login_auth_config_isValid;
}

bool OAIUpdateBackendConfigResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_manager_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_auth_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateBackendConfigResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
