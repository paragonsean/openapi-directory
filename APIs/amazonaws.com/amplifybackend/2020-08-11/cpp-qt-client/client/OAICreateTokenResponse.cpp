/**
 * AmplifyBackend
 * AWS Amplify Admin API
 *
 * The version of the OpenAPI document: 2020-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTokenResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTokenResponse::OAICreateTokenResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTokenResponse::OAICreateTokenResponse() {
    this->initializeModel();
}

OAICreateTokenResponse::~OAICreateTokenResponse() {}

void OAICreateTokenResponse::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_challenge_code_isSet = false;
    m_challenge_code_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;
}

void OAICreateTokenResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTokenResponse::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("AppId")]);
    m_app_id_isSet = !json[QString("AppId")].isNull() && m_app_id_isValid;

    m_challenge_code_isValid = ::OpenAPI::fromJsonValue(m_challenge_code, json[QString("ChallengeCode")]);
    m_challenge_code_isSet = !json[QString("ChallengeCode")].isNull() && m_challenge_code_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("SessionId")]);
    m_session_id_isSet = !json[QString("SessionId")].isNull() && m_session_id_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("Ttl")]);
    m_ttl_isSet = !json[QString("Ttl")].isNull() && m_ttl_isValid;
}

QString OAICreateTokenResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTokenResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("AppId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_challenge_code_isSet) {
        obj.insert(QString("ChallengeCode"), ::OpenAPI::toJsonValue(m_challenge_code));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("SessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("Ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    return obj;
}

QString OAICreateTokenResponse::getAppId() const {
    return m_app_id;
}
void OAICreateTokenResponse::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAICreateTokenResponse::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAICreateTokenResponse::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAICreateTokenResponse::getChallengeCode() const {
    return m_challenge_code;
}
void OAICreateTokenResponse::setChallengeCode(const QString &challenge_code) {
    m_challenge_code = challenge_code;
    m_challenge_code_isSet = true;
}

bool OAICreateTokenResponse::is_challenge_code_Set() const{
    return m_challenge_code_isSet;
}

bool OAICreateTokenResponse::is_challenge_code_Valid() const{
    return m_challenge_code_isValid;
}

QString OAICreateTokenResponse::getSessionId() const {
    return m_session_id;
}
void OAICreateTokenResponse::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAICreateTokenResponse::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAICreateTokenResponse::is_session_id_Valid() const{
    return m_session_id_isValid;
}

QString OAICreateTokenResponse::getTtl() const {
    return m_ttl;
}
void OAICreateTokenResponse::setTtl(const QString &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAICreateTokenResponse::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAICreateTokenResponse::is_ttl_Valid() const{
    return m_ttl_isValid;
}

bool OAICreateTokenResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_challenge_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTokenResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
