/**
 * AmplifyBackend
 * AWS Amplify Admin API
 *
 * The version of the OpenAPI document: 2020-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackendStoragePermissions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackendStoragePermissions::OAIBackendStoragePermissions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackendStoragePermissions::OAIBackendStoragePermissions() {
    this->initializeModel();
}

OAIBackendStoragePermissions::~OAIBackendStoragePermissions() {}

void OAIBackendStoragePermissions::initializeModel() {

    m_authenticated_isSet = false;
    m_authenticated_isValid = false;

    m_un_authenticated_isSet = false;
    m_un_authenticated_isValid = false;
}

void OAIBackendStoragePermissions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackendStoragePermissions::fromJsonObject(QJsonObject json) {

    m_authenticated_isValid = ::OpenAPI::fromJsonValue(m_authenticated, json[QString("Authenticated")]);
    m_authenticated_isSet = !json[QString("Authenticated")].isNull() && m_authenticated_isValid;

    m_un_authenticated_isValid = ::OpenAPI::fromJsonValue(m_un_authenticated, json[QString("UnAuthenticated")]);
    m_un_authenticated_isSet = !json[QString("UnAuthenticated")].isNull() && m_un_authenticated_isValid;
}

QString OAIBackendStoragePermissions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackendStoragePermissions::asJsonObject() const {
    QJsonObject obj;
    if (m_authenticated.isSet()) {
        obj.insert(QString("Authenticated"), ::OpenAPI::toJsonValue(m_authenticated));
    }
    if (m_un_authenticated.isSet()) {
        obj.insert(QString("UnAuthenticated"), ::OpenAPI::toJsonValue(m_un_authenticated));
    }
    return obj;
}

QList OAIBackendStoragePermissions::getAuthenticated() const {
    return m_authenticated;
}
void OAIBackendStoragePermissions::setAuthenticated(const QList &authenticated) {
    m_authenticated = authenticated;
    m_authenticated_isSet = true;
}

bool OAIBackendStoragePermissions::is_authenticated_Set() const{
    return m_authenticated_isSet;
}

bool OAIBackendStoragePermissions::is_authenticated_Valid() const{
    return m_authenticated_isValid;
}

QList OAIBackendStoragePermissions::getUnAuthenticated() const {
    return m_un_authenticated;
}
void OAIBackendStoragePermissions::setUnAuthenticated(const QList &un_authenticated) {
    m_un_authenticated = un_authenticated;
    m_un_authenticated_isSet = true;
}

bool OAIBackendStoragePermissions::is_un_authenticated_Set() const{
    return m_un_authenticated_isSet;
}

bool OAIBackendStoragePermissions::is_un_authenticated_Valid() const{
    return m_un_authenticated_isValid;
}

bool OAIBackendStoragePermissions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authenticated.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_un_authenticated.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackendStoragePermissions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_authenticated_isValid && true;
}

} // namespace OpenAPI
