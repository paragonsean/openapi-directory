/**
 * AmplifyBackend
 * AWS Amplify Admin API
 *
 * The version of the OpenAPI document: 2020-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateBackendAuthMFAConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateBackendAuthMFAConfig::OAIUpdateBackendAuthMFAConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateBackendAuthMFAConfig::OAIUpdateBackendAuthMFAConfig() {
    this->initializeModel();
}

OAIUpdateBackendAuthMFAConfig::~OAIUpdateBackendAuthMFAConfig() {}

void OAIUpdateBackendAuthMFAConfig::initializeModel() {

    m_mfa_mode_isSet = false;
    m_mfa_mode_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;
}

void OAIUpdateBackendAuthMFAConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateBackendAuthMFAConfig::fromJsonObject(QJsonObject json) {

    m_mfa_mode_isValid = ::OpenAPI::fromJsonValue(m_mfa_mode, json[QString("MFAMode")]);
    m_mfa_mode_isSet = !json[QString("MFAMode")].isNull() && m_mfa_mode_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("Settings")]);
    m_settings_isSet = !json[QString("Settings")].isNull() && m_settings_isValid;
}

QString OAIUpdateBackendAuthMFAConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateBackendAuthMFAConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_mfa_mode.isSet()) {
        obj.insert(QString("MFAMode"), ::OpenAPI::toJsonValue(m_mfa_mode));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("Settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    return obj;
}

OAIMFAMode OAIUpdateBackendAuthMFAConfig::getMfaMode() const {
    return m_mfa_mode;
}
void OAIUpdateBackendAuthMFAConfig::setMfaMode(const OAIMFAMode &mfa_mode) {
    m_mfa_mode = mfa_mode;
    m_mfa_mode_isSet = true;
}

bool OAIUpdateBackendAuthMFAConfig::is_mfa_mode_Set() const{
    return m_mfa_mode_isSet;
}

bool OAIUpdateBackendAuthMFAConfig::is_mfa_mode_Valid() const{
    return m_mfa_mode_isValid;
}

OAIUpdateBackendAuthMFAConfig_Settings OAIUpdateBackendAuthMFAConfig::getSettings() const {
    return m_settings;
}
void OAIUpdateBackendAuthMFAConfig::setSettings(const OAIUpdateBackendAuthMFAConfig_Settings &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIUpdateBackendAuthMFAConfig::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIUpdateBackendAuthMFAConfig::is_settings_Valid() const{
    return m_settings_isValid;
}

bool OAIUpdateBackendAuthMFAConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mfa_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateBackendAuthMFAConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
