/**
 * AmplifyBackend
 * AWS Amplify Admin API
 *
 * The version of the OpenAPI document: 2020-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackendAuthAppleProviderConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackendAuthAppleProviderConfig::OAIBackendAuthAppleProviderConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackendAuthAppleProviderConfig::OAIBackendAuthAppleProviderConfig() {
    this->initializeModel();
}

OAIBackendAuthAppleProviderConfig::~OAIBackendAuthAppleProviderConfig() {}

void OAIBackendAuthAppleProviderConfig::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_key_id_isSet = false;
    m_key_id_isValid = false;

    m_private_key_isSet = false;
    m_private_key_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;
}

void OAIBackendAuthAppleProviderConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackendAuthAppleProviderConfig::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("ClientId")]);
    m_client_id_isSet = !json[QString("ClientId")].isNull() && m_client_id_isValid;

    m_key_id_isValid = ::OpenAPI::fromJsonValue(m_key_id, json[QString("KeyId")]);
    m_key_id_isSet = !json[QString("KeyId")].isNull() && m_key_id_isValid;

    m_private_key_isValid = ::OpenAPI::fromJsonValue(m_private_key, json[QString("PrivateKey")]);
    m_private_key_isSet = !json[QString("PrivateKey")].isNull() && m_private_key_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamId")]);
    m_team_id_isSet = !json[QString("TeamId")].isNull() && m_team_id_isValid;
}

QString OAIBackendAuthAppleProviderConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackendAuthAppleProviderConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("ClientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_key_id_isSet) {
        obj.insert(QString("KeyId"), ::OpenAPI::toJsonValue(m_key_id));
    }
    if (m_private_key_isSet) {
        obj.insert(QString("PrivateKey"), ::OpenAPI::toJsonValue(m_private_key));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamId"), ::OpenAPI::toJsonValue(m_team_id));
    }
    return obj;
}

QString OAIBackendAuthAppleProviderConfig::getClientId() const {
    return m_client_id;
}
void OAIBackendAuthAppleProviderConfig::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIBackendAuthAppleProviderConfig::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIBackendAuthAppleProviderConfig::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIBackendAuthAppleProviderConfig::getKeyId() const {
    return m_key_id;
}
void OAIBackendAuthAppleProviderConfig::setKeyId(const QString &key_id) {
    m_key_id = key_id;
    m_key_id_isSet = true;
}

bool OAIBackendAuthAppleProviderConfig::is_key_id_Set() const{
    return m_key_id_isSet;
}

bool OAIBackendAuthAppleProviderConfig::is_key_id_Valid() const{
    return m_key_id_isValid;
}

QString OAIBackendAuthAppleProviderConfig::getPrivateKey() const {
    return m_private_key;
}
void OAIBackendAuthAppleProviderConfig::setPrivateKey(const QString &private_key) {
    m_private_key = private_key;
    m_private_key_isSet = true;
}

bool OAIBackendAuthAppleProviderConfig::is_private_key_Set() const{
    return m_private_key_isSet;
}

bool OAIBackendAuthAppleProviderConfig::is_private_key_Valid() const{
    return m_private_key_isValid;
}

QString OAIBackendAuthAppleProviderConfig::getTeamId() const {
    return m_team_id;
}
void OAIBackendAuthAppleProviderConfig::setTeamId(const QString &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIBackendAuthAppleProviderConfig::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIBackendAuthAppleProviderConfig::is_team_id_Valid() const{
    return m_team_id_isValid;
}

bool OAIBackendAuthAppleProviderConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackendAuthAppleProviderConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
