/**
 * AmplifyBackend
 * AWS Amplify Admin API
 *
 * The version of the OpenAPI document: 2020-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISettings::OAISettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISettings::OAISettings() {
    this->initializeModel();
}

OAISettings::~OAISettings() {}

void OAISettings::initializeModel() {

    m_mfa_types_isSet = false;
    m_mfa_types_isValid = false;

    m_sms_message_isSet = false;
    m_sms_message_isValid = false;
}

void OAISettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISettings::fromJsonObject(QJsonObject json) {

    m_mfa_types_isValid = ::OpenAPI::fromJsonValue(m_mfa_types, json[QString("MfaTypes")]);
    m_mfa_types_isSet = !json[QString("MfaTypes")].isNull() && m_mfa_types_isValid;

    m_sms_message_isValid = ::OpenAPI::fromJsonValue(m_sms_message, json[QString("SmsMessage")]);
    m_sms_message_isSet = !json[QString("SmsMessage")].isNull() && m_sms_message_isValid;
}

QString OAISettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISettings::asJsonObject() const {
    QJsonObject obj;
    if (m_mfa_types.isSet()) {
        obj.insert(QString("MfaTypes"), ::OpenAPI::toJsonValue(m_mfa_types));
    }
    if (m_sms_message_isSet) {
        obj.insert(QString("SmsMessage"), ::OpenAPI::toJsonValue(m_sms_message));
    }
    return obj;
}

QList OAISettings::getMfaTypes() const {
    return m_mfa_types;
}
void OAISettings::setMfaTypes(const QList &mfa_types) {
    m_mfa_types = mfa_types;
    m_mfa_types_isSet = true;
}

bool OAISettings::is_mfa_types_Set() const{
    return m_mfa_types_isSet;
}

bool OAISettings::is_mfa_types_Valid() const{
    return m_mfa_types_isValid;
}

QString OAISettings::getSmsMessage() const {
    return m_sms_message;
}
void OAISettings::setSmsMessage(const QString &sms_message) {
    m_sms_message = sms_message;
    m_sms_message_isSet = true;
}

bool OAISettings::is_sms_message_Set() const{
    return m_sms_message_isSet;
}

bool OAISettings::is_sms_message_Valid() const{
    return m_sms_message_isValid;
}

bool OAISettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mfa_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sms_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
