/**
 * AmplifyBackend
 * AWS Amplify Admin API
 *
 * The version of the OpenAPI document: 2020-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateBackendAuthOAuthConfig_SocialProviderSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateBackendAuthOAuthConfig_SocialProviderSettings::OAICreateBackendAuthOAuthConfig_SocialProviderSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateBackendAuthOAuthConfig_SocialProviderSettings::OAICreateBackendAuthOAuthConfig_SocialProviderSettings() {
    this->initializeModel();
}

OAICreateBackendAuthOAuthConfig_SocialProviderSettings::~OAICreateBackendAuthOAuthConfig_SocialProviderSettings() {}

void OAICreateBackendAuthOAuthConfig_SocialProviderSettings::initializeModel() {

    m_facebook_isSet = false;
    m_facebook_isValid = false;

    m_google_isSet = false;
    m_google_isValid = false;

    m_login_with_amazon_isSet = false;
    m_login_with_amazon_isValid = false;

    m_sign_in_with_apple_isSet = false;
    m_sign_in_with_apple_isValid = false;
}

void OAICreateBackendAuthOAuthConfig_SocialProviderSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateBackendAuthOAuthConfig_SocialProviderSettings::fromJsonObject(QJsonObject json) {

    m_facebook_isValid = ::OpenAPI::fromJsonValue(m_facebook, json[QString("Facebook")]);
    m_facebook_isSet = !json[QString("Facebook")].isNull() && m_facebook_isValid;

    m_google_isValid = ::OpenAPI::fromJsonValue(m_google, json[QString("Google")]);
    m_google_isSet = !json[QString("Google")].isNull() && m_google_isValid;

    m_login_with_amazon_isValid = ::OpenAPI::fromJsonValue(m_login_with_amazon, json[QString("LoginWithAmazon")]);
    m_login_with_amazon_isSet = !json[QString("LoginWithAmazon")].isNull() && m_login_with_amazon_isValid;

    m_sign_in_with_apple_isValid = ::OpenAPI::fromJsonValue(m_sign_in_with_apple, json[QString("SignInWithApple")]);
    m_sign_in_with_apple_isSet = !json[QString("SignInWithApple")].isNull() && m_sign_in_with_apple_isValid;
}

QString OAICreateBackendAuthOAuthConfig_SocialProviderSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateBackendAuthOAuthConfig_SocialProviderSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_facebook.isSet()) {
        obj.insert(QString("Facebook"), ::OpenAPI::toJsonValue(m_facebook));
    }
    if (m_google.isSet()) {
        obj.insert(QString("Google"), ::OpenAPI::toJsonValue(m_google));
    }
    if (m_login_with_amazon.isSet()) {
        obj.insert(QString("LoginWithAmazon"), ::OpenAPI::toJsonValue(m_login_with_amazon));
    }
    if (m_sign_in_with_apple.isSet()) {
        obj.insert(QString("SignInWithApple"), ::OpenAPI::toJsonValue(m_sign_in_with_apple));
    }
    return obj;
}

OAIBackendAuthSocialProviderConfig OAICreateBackendAuthOAuthConfig_SocialProviderSettings::getFacebook() const {
    return m_facebook;
}
void OAICreateBackendAuthOAuthConfig_SocialProviderSettings::setFacebook(const OAIBackendAuthSocialProviderConfig &facebook) {
    m_facebook = facebook;
    m_facebook_isSet = true;
}

bool OAICreateBackendAuthOAuthConfig_SocialProviderSettings::is_facebook_Set() const{
    return m_facebook_isSet;
}

bool OAICreateBackendAuthOAuthConfig_SocialProviderSettings::is_facebook_Valid() const{
    return m_facebook_isValid;
}

OAIBackendAuthSocialProviderConfig OAICreateBackendAuthOAuthConfig_SocialProviderSettings::getGoogle() const {
    return m_google;
}
void OAICreateBackendAuthOAuthConfig_SocialProviderSettings::setGoogle(const OAIBackendAuthSocialProviderConfig &google) {
    m_google = google;
    m_google_isSet = true;
}

bool OAICreateBackendAuthOAuthConfig_SocialProviderSettings::is_google_Set() const{
    return m_google_isSet;
}

bool OAICreateBackendAuthOAuthConfig_SocialProviderSettings::is_google_Valid() const{
    return m_google_isValid;
}

OAIBackendAuthSocialProviderConfig OAICreateBackendAuthOAuthConfig_SocialProviderSettings::getLoginWithAmazon() const {
    return m_login_with_amazon;
}
void OAICreateBackendAuthOAuthConfig_SocialProviderSettings::setLoginWithAmazon(const OAIBackendAuthSocialProviderConfig &login_with_amazon) {
    m_login_with_amazon = login_with_amazon;
    m_login_with_amazon_isSet = true;
}

bool OAICreateBackendAuthOAuthConfig_SocialProviderSettings::is_login_with_amazon_Set() const{
    return m_login_with_amazon_isSet;
}

bool OAICreateBackendAuthOAuthConfig_SocialProviderSettings::is_login_with_amazon_Valid() const{
    return m_login_with_amazon_isValid;
}

OAIBackendAuthAppleProviderConfig OAICreateBackendAuthOAuthConfig_SocialProviderSettings::getSignInWithApple() const {
    return m_sign_in_with_apple;
}
void OAICreateBackendAuthOAuthConfig_SocialProviderSettings::setSignInWithApple(const OAIBackendAuthAppleProviderConfig &sign_in_with_apple) {
    m_sign_in_with_apple = sign_in_with_apple;
    m_sign_in_with_apple_isSet = true;
}

bool OAICreateBackendAuthOAuthConfig_SocialProviderSettings::is_sign_in_with_apple_Set() const{
    return m_sign_in_with_apple_isSet;
}

bool OAICreateBackendAuthOAuthConfig_SocialProviderSettings::is_sign_in_with_apple_Valid() const{
    return m_sign_in_with_apple_isValid;
}

bool OAICreateBackendAuthOAuthConfig_SocialProviderSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_facebook.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_google.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_with_amazon.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sign_in_with_apple.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateBackendAuthOAuthConfig_SocialProviderSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
