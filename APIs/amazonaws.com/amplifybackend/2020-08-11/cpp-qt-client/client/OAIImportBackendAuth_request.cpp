/**
 * AmplifyBackend
 * AWS Amplify Admin API
 *
 * The version of the OpenAPI document: 2020-08-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportBackendAuth_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportBackendAuth_request::OAIImportBackendAuth_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportBackendAuth_request::OAIImportBackendAuth_request() {
    this->initializeModel();
}

OAIImportBackendAuth_request::~OAIImportBackendAuth_request() {}

void OAIImportBackendAuth_request::initializeModel() {

    m_identity_pool_id_isSet = false;
    m_identity_pool_id_isValid = false;

    m_native_client_id_isSet = false;
    m_native_client_id_isValid = false;

    m_user_pool_id_isSet = false;
    m_user_pool_id_isValid = false;

    m_web_client_id_isSet = false;
    m_web_client_id_isValid = false;
}

void OAIImportBackendAuth_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportBackendAuth_request::fromJsonObject(QJsonObject json) {

    m_identity_pool_id_isValid = ::OpenAPI::fromJsonValue(m_identity_pool_id, json[QString("identityPoolId")]);
    m_identity_pool_id_isSet = !json[QString("identityPoolId")].isNull() && m_identity_pool_id_isValid;

    m_native_client_id_isValid = ::OpenAPI::fromJsonValue(m_native_client_id, json[QString("nativeClientId")]);
    m_native_client_id_isSet = !json[QString("nativeClientId")].isNull() && m_native_client_id_isValid;

    m_user_pool_id_isValid = ::OpenAPI::fromJsonValue(m_user_pool_id, json[QString("userPoolId")]);
    m_user_pool_id_isSet = !json[QString("userPoolId")].isNull() && m_user_pool_id_isValid;

    m_web_client_id_isValid = ::OpenAPI::fromJsonValue(m_web_client_id, json[QString("webClientId")]);
    m_web_client_id_isSet = !json[QString("webClientId")].isNull() && m_web_client_id_isValid;
}

QString OAIImportBackendAuth_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportBackendAuth_request::asJsonObject() const {
    QJsonObject obj;
    if (m_identity_pool_id_isSet) {
        obj.insert(QString("identityPoolId"), ::OpenAPI::toJsonValue(m_identity_pool_id));
    }
    if (m_native_client_id_isSet) {
        obj.insert(QString("nativeClientId"), ::OpenAPI::toJsonValue(m_native_client_id));
    }
    if (m_user_pool_id_isSet) {
        obj.insert(QString("userPoolId"), ::OpenAPI::toJsonValue(m_user_pool_id));
    }
    if (m_web_client_id_isSet) {
        obj.insert(QString("webClientId"), ::OpenAPI::toJsonValue(m_web_client_id));
    }
    return obj;
}

QString OAIImportBackendAuth_request::getIdentityPoolId() const {
    return m_identity_pool_id;
}
void OAIImportBackendAuth_request::setIdentityPoolId(const QString &identity_pool_id) {
    m_identity_pool_id = identity_pool_id;
    m_identity_pool_id_isSet = true;
}

bool OAIImportBackendAuth_request::is_identity_pool_id_Set() const{
    return m_identity_pool_id_isSet;
}

bool OAIImportBackendAuth_request::is_identity_pool_id_Valid() const{
    return m_identity_pool_id_isValid;
}

QString OAIImportBackendAuth_request::getNativeClientId() const {
    return m_native_client_id;
}
void OAIImportBackendAuth_request::setNativeClientId(const QString &native_client_id) {
    m_native_client_id = native_client_id;
    m_native_client_id_isSet = true;
}

bool OAIImportBackendAuth_request::is_native_client_id_Set() const{
    return m_native_client_id_isSet;
}

bool OAIImportBackendAuth_request::is_native_client_id_Valid() const{
    return m_native_client_id_isValid;
}

QString OAIImportBackendAuth_request::getUserPoolId() const {
    return m_user_pool_id;
}
void OAIImportBackendAuth_request::setUserPoolId(const QString &user_pool_id) {
    m_user_pool_id = user_pool_id;
    m_user_pool_id_isSet = true;
}

bool OAIImportBackendAuth_request::is_user_pool_id_Set() const{
    return m_user_pool_id_isSet;
}

bool OAIImportBackendAuth_request::is_user_pool_id_Valid() const{
    return m_user_pool_id_isValid;
}

QString OAIImportBackendAuth_request::getWebClientId() const {
    return m_web_client_id;
}
void OAIImportBackendAuth_request::setWebClientId(const QString &web_client_id) {
    m_web_client_id = web_client_id;
    m_web_client_id_isSet = true;
}

bool OAIImportBackendAuth_request::is_web_client_id_Set() const{
    return m_web_client_id_isSet;
}

bool OAIImportBackendAuth_request::is_web_client_id_Valid() const{
    return m_web_client_id_isValid;
}

bool OAIImportBackendAuth_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identity_pool_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_native_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_pool_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportBackendAuth_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_native_client_id_isValid && m_user_pool_id_isValid && m_web_client_id_isValid && true;
}

} // namespace OpenAPI
