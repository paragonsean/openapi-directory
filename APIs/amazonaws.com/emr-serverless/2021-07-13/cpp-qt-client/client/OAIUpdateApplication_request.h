/**
 * EMR Serverless
 * <p>Amazon EMR Serverless is a new deployment option for Amazon EMR. Amazon EMR Serverless provides a serverless runtime environment that simplifies running analytics applications using the latest open source frameworks such as Apache Spark and Apache Hive. With Amazon EMR Serverless, you donâ€™t have to configure, optimize, secure, or operate clusters to run applications with these frameworks.</p> <p>The API reference to Amazon EMR Serverless is <code>emr-serverless</code>. The <code>emr-serverless</code> prefix is used in the following scenarios: </p> <ul> <li> <p>It is the prefix in the CLI commands for Amazon EMR Serverless. For example, <code>aws emr-serverless start-job-run</code>.</p> </li> <li> <p>It is the prefix before IAM policy actions for Amazon EMR Serverless. For example, <code>\"Action\": [\"emr-serverless:StartJobRun\"]</code>. For more information, see <a href=\"https://docs.aws.amazon.com/emr/latest/EMR-Serverless-UserGuide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-actions\">Policy actions for Amazon EMR Serverless</a>.</p> </li> <li> <p>It is the prefix used in Amazon EMR Serverless service endpoints. For example, <code>emr-serverless.us-east-2.amazonaws.com</code>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2021-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateApplication_request.h
 *
 * 
 */

#ifndef OAIUpdateApplication_request_H
#define OAIUpdateApplication_request_H

#include <QJsonObject>

#include "OAICreateApplication_request_autoStartConfiguration.h"
#include "OAICreateApplication_request_autoStopConfiguration.h"
#include "OAICreateApplication_request_imageConfiguration.h"
#include "OAICreateApplication_request_maximumCapacity.h"
#include "OAICreateApplication_request_networkConfiguration.h"
#include "OAIInitialCapacityConfig.h"
#include "OAIWorkerTypeSpecificationInput.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInitialCapacityConfig;
class OAICreateApplication_request_maximumCapacity;
class OAICreateApplication_request_autoStartConfiguration;
class OAICreateApplication_request_autoStopConfiguration;
class OAICreateApplication_request_networkConfiguration;
class OAICreateApplication_request_imageConfiguration;
class OAIWorkerTypeSpecificationInput;

class OAIUpdateApplication_request : public OAIObject {
public:
    OAIUpdateApplication_request();
    OAIUpdateApplication_request(QString json);
    ~OAIUpdateApplication_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClientToken() const;
    void setClientToken(const QString &client_token);
    bool is_client_token_Set() const;
    bool is_client_token_Valid() const;

    QMap<QString, OAIInitialCapacityConfig> getInitialCapacity() const;
    void setInitialCapacity(const QMap<QString, OAIInitialCapacityConfig> &initial_capacity);
    bool is_initial_capacity_Set() const;
    bool is_initial_capacity_Valid() const;

    OAICreateApplication_request_maximumCapacity getMaximumCapacity() const;
    void setMaximumCapacity(const OAICreateApplication_request_maximumCapacity &maximum_capacity);
    bool is_maximum_capacity_Set() const;
    bool is_maximum_capacity_Valid() const;

    OAICreateApplication_request_autoStartConfiguration getAutoStartConfiguration() const;
    void setAutoStartConfiguration(const OAICreateApplication_request_autoStartConfiguration &auto_start_configuration);
    bool is_auto_start_configuration_Set() const;
    bool is_auto_start_configuration_Valid() const;

    OAICreateApplication_request_autoStopConfiguration getAutoStopConfiguration() const;
    void setAutoStopConfiguration(const OAICreateApplication_request_autoStopConfiguration &auto_stop_configuration);
    bool is_auto_stop_configuration_Set() const;
    bool is_auto_stop_configuration_Valid() const;

    OAICreateApplication_request_networkConfiguration getNetworkConfiguration() const;
    void setNetworkConfiguration(const OAICreateApplication_request_networkConfiguration &network_configuration);
    bool is_network_configuration_Set() const;
    bool is_network_configuration_Valid() const;

    QString getArchitecture() const;
    void setArchitecture(const QString &architecture);
    bool is_architecture_Set() const;
    bool is_architecture_Valid() const;

    OAICreateApplication_request_imageConfiguration getImageConfiguration() const;
    void setImageConfiguration(const OAICreateApplication_request_imageConfiguration &image_configuration);
    bool is_image_configuration_Set() const;
    bool is_image_configuration_Valid() const;

    QMap<QString, OAIWorkerTypeSpecificationInput> getWorkerTypeSpecifications() const;
    void setWorkerTypeSpecifications(const QMap<QString, OAIWorkerTypeSpecificationInput> &worker_type_specifications);
    bool is_worker_type_specifications_Set() const;
    bool is_worker_type_specifications_Valid() const;

    QString getReleaseLabel() const;
    void setReleaseLabel(const QString &release_label);
    bool is_release_label_Set() const;
    bool is_release_label_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_client_token;
    bool m_client_token_isSet;
    bool m_client_token_isValid;

    QMap<QString, OAIInitialCapacityConfig> m_initial_capacity;
    bool m_initial_capacity_isSet;
    bool m_initial_capacity_isValid;

    OAICreateApplication_request_maximumCapacity m_maximum_capacity;
    bool m_maximum_capacity_isSet;
    bool m_maximum_capacity_isValid;

    OAICreateApplication_request_autoStartConfiguration m_auto_start_configuration;
    bool m_auto_start_configuration_isSet;
    bool m_auto_start_configuration_isValid;

    OAICreateApplication_request_autoStopConfiguration m_auto_stop_configuration;
    bool m_auto_stop_configuration_isSet;
    bool m_auto_stop_configuration_isValid;

    OAICreateApplication_request_networkConfiguration m_network_configuration;
    bool m_network_configuration_isSet;
    bool m_network_configuration_isValid;

    QString m_architecture;
    bool m_architecture_isSet;
    bool m_architecture_isValid;

    OAICreateApplication_request_imageConfiguration m_image_configuration;
    bool m_image_configuration_isSet;
    bool m_image_configuration_isValid;

    QMap<QString, OAIWorkerTypeSpecificationInput> m_worker_type_specifications;
    bool m_worker_type_specifications_isSet;
    bool m_worker_type_specifications_isValid;

    QString m_release_label;
    bool m_release_label_isSet;
    bool m_release_label_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateApplication_request)

#endif // OAIUpdateApplication_request_H
