/**
 * EMR Serverless
 * <p>Amazon EMR Serverless is a new deployment option for Amazon EMR. Amazon EMR Serverless provides a serverless runtime environment that simplifies running analytics applications using the latest open source frameworks such as Apache Spark and Apache Hive. With Amazon EMR Serverless, you donâ€™t have to configure, optimize, secure, or operate clusters to run applications with these frameworks.</p> <p>The API reference to Amazon EMR Serverless is <code>emr-serverless</code>. The <code>emr-serverless</code> prefix is used in the following scenarios: </p> <ul> <li> <p>It is the prefix in the CLI commands for Amazon EMR Serverless. For example, <code>aws emr-serverless start-job-run</code>.</p> </li> <li> <p>It is the prefix before IAM policy actions for Amazon EMR Serverless. For example, <code>\"Action\": [\"emr-serverless:StartJobRun\"]</code>. For more information, see <a href=\"https://docs.aws.amazon.com/emr/latest/EMR-Serverless-UserGuide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-actions\">Policy actions for Amazon EMR Serverless</a>.</p> </li> <li> <p>It is the prefix used in Amazon EMR Serverless service endpoints. For example, <code>emr-serverless.us-east-2.amazonaws.com</code>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2021-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartJobRunRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartJobRunRequest::OAIStartJobRunRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartJobRunRequest::OAIStartJobRunRequest() {
    this->initializeModel();
}

OAIStartJobRunRequest::~OAIStartJobRunRequest() {}

void OAIStartJobRunRequest::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_execution_role_arn_isSet = false;
    m_execution_role_arn_isValid = false;

    m_job_driver_isSet = false;
    m_job_driver_isValid = false;

    m_configuration_overrides_isSet = false;
    m_configuration_overrides_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_execution_timeout_minutes_isSet = false;
    m_execution_timeout_minutes_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIStartJobRunRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartJobRunRequest::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_execution_role_arn_isValid = ::OpenAPI::fromJsonValue(m_execution_role_arn, json[QString("executionRoleArn")]);
    m_execution_role_arn_isSet = !json[QString("executionRoleArn")].isNull() && m_execution_role_arn_isValid;

    m_job_driver_isValid = ::OpenAPI::fromJsonValue(m_job_driver, json[QString("jobDriver")]);
    m_job_driver_isSet = !json[QString("jobDriver")].isNull() && m_job_driver_isValid;

    m_configuration_overrides_isValid = ::OpenAPI::fromJsonValue(m_configuration_overrides, json[QString("configurationOverrides")]);
    m_configuration_overrides_isSet = !json[QString("configurationOverrides")].isNull() && m_configuration_overrides_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_execution_timeout_minutes_isValid = ::OpenAPI::fromJsonValue(m_execution_timeout_minutes, json[QString("executionTimeoutMinutes")]);
    m_execution_timeout_minutes_isSet = !json[QString("executionTimeoutMinutes")].isNull() && m_execution_timeout_minutes_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIStartJobRunRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartJobRunRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_execution_role_arn_isSet) {
        obj.insert(QString("executionRoleArn"), ::OpenAPI::toJsonValue(m_execution_role_arn));
    }
    if (m_job_driver.isSet()) {
        obj.insert(QString("jobDriver"), ::OpenAPI::toJsonValue(m_job_driver));
    }
    if (m_configuration_overrides.isSet()) {
        obj.insert(QString("configurationOverrides"), ::OpenAPI::toJsonValue(m_configuration_overrides));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_execution_timeout_minutes_isSet) {
        obj.insert(QString("executionTimeoutMinutes"), ::OpenAPI::toJsonValue(m_execution_timeout_minutes));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIStartJobRunRequest::getClientToken() const {
    return m_client_token;
}
void OAIStartJobRunRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIStartJobRunRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIStartJobRunRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAIStartJobRunRequest::getExecutionRoleArn() const {
    return m_execution_role_arn;
}
void OAIStartJobRunRequest::setExecutionRoleArn(const QString &execution_role_arn) {
    m_execution_role_arn = execution_role_arn;
    m_execution_role_arn_isSet = true;
}

bool OAIStartJobRunRequest::is_execution_role_arn_Set() const{
    return m_execution_role_arn_isSet;
}

bool OAIStartJobRunRequest::is_execution_role_arn_Valid() const{
    return m_execution_role_arn_isValid;
}

OAIJobRun_jobDriver OAIStartJobRunRequest::getJobDriver() const {
    return m_job_driver;
}
void OAIStartJobRunRequest::setJobDriver(const OAIJobRun_jobDriver &job_driver) {
    m_job_driver = job_driver;
    m_job_driver_isSet = true;
}

bool OAIStartJobRunRequest::is_job_driver_Set() const{
    return m_job_driver_isSet;
}

bool OAIStartJobRunRequest::is_job_driver_Valid() const{
    return m_job_driver_isValid;
}

OAIStartJobRunRequest_configurationOverrides OAIStartJobRunRequest::getConfigurationOverrides() const {
    return m_configuration_overrides;
}
void OAIStartJobRunRequest::setConfigurationOverrides(const OAIStartJobRunRequest_configurationOverrides &configuration_overrides) {
    m_configuration_overrides = configuration_overrides;
    m_configuration_overrides_isSet = true;
}

bool OAIStartJobRunRequest::is_configuration_overrides_Set() const{
    return m_configuration_overrides_isSet;
}

bool OAIStartJobRunRequest::is_configuration_overrides_Valid() const{
    return m_configuration_overrides_isValid;
}

QMap OAIStartJobRunRequest::getTags() const {
    return m_tags;
}
void OAIStartJobRunRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIStartJobRunRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIStartJobRunRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

qint32 OAIStartJobRunRequest::getExecutionTimeoutMinutes() const {
    return m_execution_timeout_minutes;
}
void OAIStartJobRunRequest::setExecutionTimeoutMinutes(const qint32 &execution_timeout_minutes) {
    m_execution_timeout_minutes = execution_timeout_minutes;
    m_execution_timeout_minutes_isSet = true;
}

bool OAIStartJobRunRequest::is_execution_timeout_minutes_Set() const{
    return m_execution_timeout_minutes_isSet;
}

bool OAIStartJobRunRequest::is_execution_timeout_minutes_Valid() const{
    return m_execution_timeout_minutes_isValid;
}

QString OAIStartJobRunRequest::getName() const {
    return m_name;
}
void OAIStartJobRunRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStartJobRunRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStartJobRunRequest::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIStartJobRunRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_driver.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_overrides.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_timeout_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartJobRunRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_token_isValid && m_execution_role_arn_isValid && true;
}

} // namespace OpenAPI
