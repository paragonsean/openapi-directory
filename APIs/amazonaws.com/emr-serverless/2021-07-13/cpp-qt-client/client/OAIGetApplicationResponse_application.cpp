/**
 * EMR Serverless
 * <p>Amazon EMR Serverless is a new deployment option for Amazon EMR. Amazon EMR Serverless provides a serverless runtime environment that simplifies running analytics applications using the latest open source frameworks such as Apache Spark and Apache Hive. With Amazon EMR Serverless, you donâ€™t have to configure, optimize, secure, or operate clusters to run applications with these frameworks.</p> <p>The API reference to Amazon EMR Serverless is <code>emr-serverless</code>. The <code>emr-serverless</code> prefix is used in the following scenarios: </p> <ul> <li> <p>It is the prefix in the CLI commands for Amazon EMR Serverless. For example, <code>aws emr-serverless start-job-run</code>.</p> </li> <li> <p>It is the prefix before IAM policy actions for Amazon EMR Serverless. For example, <code>\"Action\": [\"emr-serverless:StartJobRun\"]</code>. For more information, see <a href=\"https://docs.aws.amazon.com/emr/latest/EMR-Serverless-UserGuide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-actions\">Policy actions for Amazon EMR Serverless</a>.</p> </li> <li> <p>It is the prefix used in Amazon EMR Serverless service endpoints. For example, <code>emr-serverless.us-east-2.amazonaws.com</code>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2021-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetApplicationResponse_application.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetApplicationResponse_application::OAIGetApplicationResponse_application(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetApplicationResponse_application::OAIGetApplicationResponse_application() {
    this->initializeModel();
}

OAIGetApplicationResponse_application::~OAIGetApplicationResponse_application() {}

void OAIGetApplicationResponse_application::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_release_label_isSet = false;
    m_release_label_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_details_isSet = false;
    m_state_details_isValid = false;

    m_initial_capacity_isSet = false;
    m_initial_capacity_isValid = false;

    m_maximum_capacity_isSet = false;
    m_maximum_capacity_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_auto_start_configuration_isSet = false;
    m_auto_start_configuration_isValid = false;

    m_auto_stop_configuration_isSet = false;
    m_auto_stop_configuration_isValid = false;

    m_network_configuration_isSet = false;
    m_network_configuration_isValid = false;

    m_architecture_isSet = false;
    m_architecture_isValid = false;

    m_image_configuration_isSet = false;
    m_image_configuration_isValid = false;

    m_worker_type_specifications_isSet = false;
    m_worker_type_specifications_isValid = false;
}

void OAIGetApplicationResponse_application::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetApplicationResponse_application::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("applicationId")]);
    m_application_id_isSet = !json[QString("applicationId")].isNull() && m_application_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_release_label_isValid = ::OpenAPI::fromJsonValue(m_release_label, json[QString("releaseLabel")]);
    m_release_label_isSet = !json[QString("releaseLabel")].isNull() && m_release_label_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_details_isValid = ::OpenAPI::fromJsonValue(m_state_details, json[QString("stateDetails")]);
    m_state_details_isSet = !json[QString("stateDetails")].isNull() && m_state_details_isValid;

    m_initial_capacity_isValid = ::OpenAPI::fromJsonValue(m_initial_capacity, json[QString("initialCapacity")]);
    m_initial_capacity_isSet = !json[QString("initialCapacity")].isNull() && m_initial_capacity_isValid;

    m_maximum_capacity_isValid = ::OpenAPI::fromJsonValue(m_maximum_capacity, json[QString("maximumCapacity")]);
    m_maximum_capacity_isSet = !json[QString("maximumCapacity")].isNull() && m_maximum_capacity_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_auto_start_configuration_isValid = ::OpenAPI::fromJsonValue(m_auto_start_configuration, json[QString("autoStartConfiguration")]);
    m_auto_start_configuration_isSet = !json[QString("autoStartConfiguration")].isNull() && m_auto_start_configuration_isValid;

    m_auto_stop_configuration_isValid = ::OpenAPI::fromJsonValue(m_auto_stop_configuration, json[QString("autoStopConfiguration")]);
    m_auto_stop_configuration_isSet = !json[QString("autoStopConfiguration")].isNull() && m_auto_stop_configuration_isValid;

    m_network_configuration_isValid = ::OpenAPI::fromJsonValue(m_network_configuration, json[QString("networkConfiguration")]);
    m_network_configuration_isSet = !json[QString("networkConfiguration")].isNull() && m_network_configuration_isValid;

    m_architecture_isValid = ::OpenAPI::fromJsonValue(m_architecture, json[QString("architecture")]);
    m_architecture_isSet = !json[QString("architecture")].isNull() && m_architecture_isValid;

    m_image_configuration_isValid = ::OpenAPI::fromJsonValue(m_image_configuration, json[QString("imageConfiguration")]);
    m_image_configuration_isSet = !json[QString("imageConfiguration")].isNull() && m_image_configuration_isValid;

    m_worker_type_specifications_isValid = ::OpenAPI::fromJsonValue(m_worker_type_specifications, json[QString("workerTypeSpecifications")]);
    m_worker_type_specifications_isSet = !json[QString("workerTypeSpecifications")].isNull() && m_worker_type_specifications_isValid;
}

QString OAIGetApplicationResponse_application::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetApplicationResponse_application::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("applicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_release_label_isSet) {
        obj.insert(QString("releaseLabel"), ::OpenAPI::toJsonValue(m_release_label));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_details_isSet) {
        obj.insert(QString("stateDetails"), ::OpenAPI::toJsonValue(m_state_details));
    }
    if (m_initial_capacity.isSet()) {
        obj.insert(QString("initialCapacity"), ::OpenAPI::toJsonValue(m_initial_capacity));
    }
    if (m_maximum_capacity.isSet()) {
        obj.insert(QString("maximumCapacity"), ::OpenAPI::toJsonValue(m_maximum_capacity));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_auto_start_configuration.isSet()) {
        obj.insert(QString("autoStartConfiguration"), ::OpenAPI::toJsonValue(m_auto_start_configuration));
    }
    if (m_auto_stop_configuration.isSet()) {
        obj.insert(QString("autoStopConfiguration"), ::OpenAPI::toJsonValue(m_auto_stop_configuration));
    }
    if (m_network_configuration.isSet()) {
        obj.insert(QString("networkConfiguration"), ::OpenAPI::toJsonValue(m_network_configuration));
    }
    if (m_architecture.isSet()) {
        obj.insert(QString("architecture"), ::OpenAPI::toJsonValue(m_architecture));
    }
    if (m_image_configuration.isSet()) {
        obj.insert(QString("imageConfiguration"), ::OpenAPI::toJsonValue(m_image_configuration));
    }
    if (m_worker_type_specifications.isSet()) {
        obj.insert(QString("workerTypeSpecifications"), ::OpenAPI::toJsonValue(m_worker_type_specifications));
    }
    return obj;
}

QString OAIGetApplicationResponse_application::getApplicationId() const {
    return m_application_id;
}
void OAIGetApplicationResponse_application::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIGetApplicationResponse_application::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIGetApplicationResponse_application::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIGetApplicationResponse_application::getName() const {
    return m_name;
}
void OAIGetApplicationResponse_application::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetApplicationResponse_application::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetApplicationResponse_application::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetApplicationResponse_application::getArn() const {
    return m_arn;
}
void OAIGetApplicationResponse_application::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGetApplicationResponse_application::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGetApplicationResponse_application::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIGetApplicationResponse_application::getReleaseLabel() const {
    return m_release_label;
}
void OAIGetApplicationResponse_application::setReleaseLabel(const QString &release_label) {
    m_release_label = release_label;
    m_release_label_isSet = true;
}

bool OAIGetApplicationResponse_application::is_release_label_Set() const{
    return m_release_label_isSet;
}

bool OAIGetApplicationResponse_application::is_release_label_Valid() const{
    return m_release_label_isValid;
}

QString OAIGetApplicationResponse_application::getType() const {
    return m_type;
}
void OAIGetApplicationResponse_application::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGetApplicationResponse_application::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGetApplicationResponse_application::is_type_Valid() const{
    return m_type_isValid;
}

OAIApplicationState OAIGetApplicationResponse_application::getState() const {
    return m_state;
}
void OAIGetApplicationResponse_application::setState(const OAIApplicationState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGetApplicationResponse_application::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGetApplicationResponse_application::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIGetApplicationResponse_application::getStateDetails() const {
    return m_state_details;
}
void OAIGetApplicationResponse_application::setStateDetails(const QString &state_details) {
    m_state_details = state_details;
    m_state_details_isSet = true;
}

bool OAIGetApplicationResponse_application::is_state_details_Set() const{
    return m_state_details_isSet;
}

bool OAIGetApplicationResponse_application::is_state_details_Valid() const{
    return m_state_details_isValid;
}

QMap OAIGetApplicationResponse_application::getInitialCapacity() const {
    return m_initial_capacity;
}
void OAIGetApplicationResponse_application::setInitialCapacity(const QMap &initial_capacity) {
    m_initial_capacity = initial_capacity;
    m_initial_capacity_isSet = true;
}

bool OAIGetApplicationResponse_application::is_initial_capacity_Set() const{
    return m_initial_capacity_isSet;
}

bool OAIGetApplicationResponse_application::is_initial_capacity_Valid() const{
    return m_initial_capacity_isValid;
}

OAIApplication_maximumCapacity OAIGetApplicationResponse_application::getMaximumCapacity() const {
    return m_maximum_capacity;
}
void OAIGetApplicationResponse_application::setMaximumCapacity(const OAIApplication_maximumCapacity &maximum_capacity) {
    m_maximum_capacity = maximum_capacity;
    m_maximum_capacity_isSet = true;
}

bool OAIGetApplicationResponse_application::is_maximum_capacity_Set() const{
    return m_maximum_capacity_isSet;
}

bool OAIGetApplicationResponse_application::is_maximum_capacity_Valid() const{
    return m_maximum_capacity_isValid;
}

QDateTime OAIGetApplicationResponse_application::getCreatedAt() const {
    return m_created_at;
}
void OAIGetApplicationResponse_application::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGetApplicationResponse_application::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGetApplicationResponse_application::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIGetApplicationResponse_application::getUpdatedAt() const {
    return m_updated_at;
}
void OAIGetApplicationResponse_application::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIGetApplicationResponse_application::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIGetApplicationResponse_application::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QMap OAIGetApplicationResponse_application::getTags() const {
    return m_tags;
}
void OAIGetApplicationResponse_application::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetApplicationResponse_application::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetApplicationResponse_application::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIApplication_autoStartConfiguration OAIGetApplicationResponse_application::getAutoStartConfiguration() const {
    return m_auto_start_configuration;
}
void OAIGetApplicationResponse_application::setAutoStartConfiguration(const OAIApplication_autoStartConfiguration &auto_start_configuration) {
    m_auto_start_configuration = auto_start_configuration;
    m_auto_start_configuration_isSet = true;
}

bool OAIGetApplicationResponse_application::is_auto_start_configuration_Set() const{
    return m_auto_start_configuration_isSet;
}

bool OAIGetApplicationResponse_application::is_auto_start_configuration_Valid() const{
    return m_auto_start_configuration_isValid;
}

OAIApplication_autoStopConfiguration OAIGetApplicationResponse_application::getAutoStopConfiguration() const {
    return m_auto_stop_configuration;
}
void OAIGetApplicationResponse_application::setAutoStopConfiguration(const OAIApplication_autoStopConfiguration &auto_stop_configuration) {
    m_auto_stop_configuration = auto_stop_configuration;
    m_auto_stop_configuration_isSet = true;
}

bool OAIGetApplicationResponse_application::is_auto_stop_configuration_Set() const{
    return m_auto_stop_configuration_isSet;
}

bool OAIGetApplicationResponse_application::is_auto_stop_configuration_Valid() const{
    return m_auto_stop_configuration_isValid;
}

OAIApplication_networkConfiguration OAIGetApplicationResponse_application::getNetworkConfiguration() const {
    return m_network_configuration;
}
void OAIGetApplicationResponse_application::setNetworkConfiguration(const OAIApplication_networkConfiguration &network_configuration) {
    m_network_configuration = network_configuration;
    m_network_configuration_isSet = true;
}

bool OAIGetApplicationResponse_application::is_network_configuration_Set() const{
    return m_network_configuration_isSet;
}

bool OAIGetApplicationResponse_application::is_network_configuration_Valid() const{
    return m_network_configuration_isValid;
}

OAIArchitecture OAIGetApplicationResponse_application::getArchitecture() const {
    return m_architecture;
}
void OAIGetApplicationResponse_application::setArchitecture(const OAIArchitecture &architecture) {
    m_architecture = architecture;
    m_architecture_isSet = true;
}

bool OAIGetApplicationResponse_application::is_architecture_Set() const{
    return m_architecture_isSet;
}

bool OAIGetApplicationResponse_application::is_architecture_Valid() const{
    return m_architecture_isValid;
}

OAIApplication_imageConfiguration OAIGetApplicationResponse_application::getImageConfiguration() const {
    return m_image_configuration;
}
void OAIGetApplicationResponse_application::setImageConfiguration(const OAIApplication_imageConfiguration &image_configuration) {
    m_image_configuration = image_configuration;
    m_image_configuration_isSet = true;
}

bool OAIGetApplicationResponse_application::is_image_configuration_Set() const{
    return m_image_configuration_isSet;
}

bool OAIGetApplicationResponse_application::is_image_configuration_Valid() const{
    return m_image_configuration_isValid;
}

QMap OAIGetApplicationResponse_application::getWorkerTypeSpecifications() const {
    return m_worker_type_specifications;
}
void OAIGetApplicationResponse_application::setWorkerTypeSpecifications(const QMap &worker_type_specifications) {
    m_worker_type_specifications = worker_type_specifications;
    m_worker_type_specifications_isSet = true;
}

bool OAIGetApplicationResponse_application::is_worker_type_specifications_Set() const{
    return m_worker_type_specifications_isSet;
}

bool OAIGetApplicationResponse_application::is_worker_type_specifications_Valid() const{
    return m_worker_type_specifications_isValid;
}

bool OAIGetApplicationResponse_application::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_capacity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_capacity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_start_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_stop_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_architecture.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_type_specifications.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetApplicationResponse_application::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_id_isValid && m_arn_isValid && m_release_label_isValid && m_type_isValid && m_state_isValid && m_created_at_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
