/**
 * EMR Serverless
 * <p>Amazon EMR Serverless is a new deployment option for Amazon EMR. Amazon EMR Serverless provides a serverless runtime environment that simplifies running analytics applications using the latest open source frameworks such as Apache Spark and Apache Hive. With Amazon EMR Serverless, you donâ€™t have to configure, optimize, secure, or operate clusters to run applications with these frameworks.</p> <p>The API reference to Amazon EMR Serverless is <code>emr-serverless</code>. The <code>emr-serverless</code> prefix is used in the following scenarios: </p> <ul> <li> <p>It is the prefix in the CLI commands for Amazon EMR Serverless. For example, <code>aws emr-serverless start-job-run</code>.</p> </li> <li> <p>It is the prefix before IAM policy actions for Amazon EMR Serverless. For example, <code>\"Action\": [\"emr-serverless:StartJobRun\"]</code>. For more information, see <a href=\"https://docs.aws.amazon.com/emr/latest/EMR-Serverless-UserGuide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-actions\">Policy actions for Amazon EMR Serverless</a>.</p> </li> <li> <p>It is the prefix used in Amazon EMR Serverless service endpoints. For example, <code>emr-serverless.us-east-2.amazonaws.com</code>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2021-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetJobRunResponse_jobRun.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetJobRunResponse_jobRun::OAIGetJobRunResponse_jobRun(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetJobRunResponse_jobRun::OAIGetJobRunResponse_jobRun() {
    this->initializeModel();
}

OAIGetJobRunResponse_jobRun::~OAIGetJobRunResponse_jobRun() {}

void OAIGetJobRunResponse_jobRun::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_job_run_id_isSet = false;
    m_job_run_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_execution_role_isSet = false;
    m_execution_role_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_details_isSet = false;
    m_state_details_isValid = false;

    m_release_label_isSet = false;
    m_release_label_isValid = false;

    m_configuration_overrides_isSet = false;
    m_configuration_overrides_isValid = false;

    m_job_driver_isSet = false;
    m_job_driver_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_total_resource_utilization_isSet = false;
    m_total_resource_utilization_isValid = false;

    m_network_configuration_isSet = false;
    m_network_configuration_isValid = false;

    m_total_execution_duration_seconds_isSet = false;
    m_total_execution_duration_seconds_isValid = false;

    m_execution_timeout_minutes_isSet = false;
    m_execution_timeout_minutes_isValid = false;

    m_billed_resource_utilization_isSet = false;
    m_billed_resource_utilization_isValid = false;
}

void OAIGetJobRunResponse_jobRun::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetJobRunResponse_jobRun::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("applicationId")]);
    m_application_id_isSet = !json[QString("applicationId")].isNull() && m_application_id_isValid;

    m_job_run_id_isValid = ::OpenAPI::fromJsonValue(m_job_run_id, json[QString("jobRunId")]);
    m_job_run_id_isSet = !json[QString("jobRunId")].isNull() && m_job_run_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_execution_role_isValid = ::OpenAPI::fromJsonValue(m_execution_role, json[QString("executionRole")]);
    m_execution_role_isSet = !json[QString("executionRole")].isNull() && m_execution_role_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_details_isValid = ::OpenAPI::fromJsonValue(m_state_details, json[QString("stateDetails")]);
    m_state_details_isSet = !json[QString("stateDetails")].isNull() && m_state_details_isValid;

    m_release_label_isValid = ::OpenAPI::fromJsonValue(m_release_label, json[QString("releaseLabel")]);
    m_release_label_isSet = !json[QString("releaseLabel")].isNull() && m_release_label_isValid;

    m_configuration_overrides_isValid = ::OpenAPI::fromJsonValue(m_configuration_overrides, json[QString("configurationOverrides")]);
    m_configuration_overrides_isSet = !json[QString("configurationOverrides")].isNull() && m_configuration_overrides_isValid;

    m_job_driver_isValid = ::OpenAPI::fromJsonValue(m_job_driver, json[QString("jobDriver")]);
    m_job_driver_isSet = !json[QString("jobDriver")].isNull() && m_job_driver_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_total_resource_utilization_isValid = ::OpenAPI::fromJsonValue(m_total_resource_utilization, json[QString("totalResourceUtilization")]);
    m_total_resource_utilization_isSet = !json[QString("totalResourceUtilization")].isNull() && m_total_resource_utilization_isValid;

    m_network_configuration_isValid = ::OpenAPI::fromJsonValue(m_network_configuration, json[QString("networkConfiguration")]);
    m_network_configuration_isSet = !json[QString("networkConfiguration")].isNull() && m_network_configuration_isValid;

    m_total_execution_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_total_execution_duration_seconds, json[QString("totalExecutionDurationSeconds")]);
    m_total_execution_duration_seconds_isSet = !json[QString("totalExecutionDurationSeconds")].isNull() && m_total_execution_duration_seconds_isValid;

    m_execution_timeout_minutes_isValid = ::OpenAPI::fromJsonValue(m_execution_timeout_minutes, json[QString("executionTimeoutMinutes")]);
    m_execution_timeout_minutes_isSet = !json[QString("executionTimeoutMinutes")].isNull() && m_execution_timeout_minutes_isValid;

    m_billed_resource_utilization_isValid = ::OpenAPI::fromJsonValue(m_billed_resource_utilization, json[QString("billedResourceUtilization")]);
    m_billed_resource_utilization_isSet = !json[QString("billedResourceUtilization")].isNull() && m_billed_resource_utilization_isValid;
}

QString OAIGetJobRunResponse_jobRun::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetJobRunResponse_jobRun::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("applicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_job_run_id_isSet) {
        obj.insert(QString("jobRunId"), ::OpenAPI::toJsonValue(m_job_run_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_execution_role_isSet) {
        obj.insert(QString("executionRole"), ::OpenAPI::toJsonValue(m_execution_role));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_details_isSet) {
        obj.insert(QString("stateDetails"), ::OpenAPI::toJsonValue(m_state_details));
    }
    if (m_release_label_isSet) {
        obj.insert(QString("releaseLabel"), ::OpenAPI::toJsonValue(m_release_label));
    }
    if (m_configuration_overrides.isSet()) {
        obj.insert(QString("configurationOverrides"), ::OpenAPI::toJsonValue(m_configuration_overrides));
    }
    if (m_job_driver.isSet()) {
        obj.insert(QString("jobDriver"), ::OpenAPI::toJsonValue(m_job_driver));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_total_resource_utilization.isSet()) {
        obj.insert(QString("totalResourceUtilization"), ::OpenAPI::toJsonValue(m_total_resource_utilization));
    }
    if (m_network_configuration.isSet()) {
        obj.insert(QString("networkConfiguration"), ::OpenAPI::toJsonValue(m_network_configuration));
    }
    if (m_total_execution_duration_seconds_isSet) {
        obj.insert(QString("totalExecutionDurationSeconds"), ::OpenAPI::toJsonValue(m_total_execution_duration_seconds));
    }
    if (m_execution_timeout_minutes_isSet) {
        obj.insert(QString("executionTimeoutMinutes"), ::OpenAPI::toJsonValue(m_execution_timeout_minutes));
    }
    if (m_billed_resource_utilization.isSet()) {
        obj.insert(QString("billedResourceUtilization"), ::OpenAPI::toJsonValue(m_billed_resource_utilization));
    }
    return obj;
}

QString OAIGetJobRunResponse_jobRun::getApplicationId() const {
    return m_application_id;
}
void OAIGetJobRunResponse_jobRun::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIGetJobRunResponse_jobRun::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIGetJobRunResponse_jobRun::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIGetJobRunResponse_jobRun::getJobRunId() const {
    return m_job_run_id;
}
void OAIGetJobRunResponse_jobRun::setJobRunId(const QString &job_run_id) {
    m_job_run_id = job_run_id;
    m_job_run_id_isSet = true;
}

bool OAIGetJobRunResponse_jobRun::is_job_run_id_Set() const{
    return m_job_run_id_isSet;
}

bool OAIGetJobRunResponse_jobRun::is_job_run_id_Valid() const{
    return m_job_run_id_isValid;
}

QString OAIGetJobRunResponse_jobRun::getName() const {
    return m_name;
}
void OAIGetJobRunResponse_jobRun::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetJobRunResponse_jobRun::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetJobRunResponse_jobRun::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetJobRunResponse_jobRun::getArn() const {
    return m_arn;
}
void OAIGetJobRunResponse_jobRun::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGetJobRunResponse_jobRun::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGetJobRunResponse_jobRun::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIGetJobRunResponse_jobRun::getCreatedBy() const {
    return m_created_by;
}
void OAIGetJobRunResponse_jobRun::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIGetJobRunResponse_jobRun::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIGetJobRunResponse_jobRun::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIGetJobRunResponse_jobRun::getCreatedAt() const {
    return m_created_at;
}
void OAIGetJobRunResponse_jobRun::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGetJobRunResponse_jobRun::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGetJobRunResponse_jobRun::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIGetJobRunResponse_jobRun::getUpdatedAt() const {
    return m_updated_at;
}
void OAIGetJobRunResponse_jobRun::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIGetJobRunResponse_jobRun::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIGetJobRunResponse_jobRun::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIGetJobRunResponse_jobRun::getExecutionRole() const {
    return m_execution_role;
}
void OAIGetJobRunResponse_jobRun::setExecutionRole(const QString &execution_role) {
    m_execution_role = execution_role;
    m_execution_role_isSet = true;
}

bool OAIGetJobRunResponse_jobRun::is_execution_role_Set() const{
    return m_execution_role_isSet;
}

bool OAIGetJobRunResponse_jobRun::is_execution_role_Valid() const{
    return m_execution_role_isValid;
}

OAIJobRunState OAIGetJobRunResponse_jobRun::getState() const {
    return m_state;
}
void OAIGetJobRunResponse_jobRun::setState(const OAIJobRunState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGetJobRunResponse_jobRun::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGetJobRunResponse_jobRun::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIGetJobRunResponse_jobRun::getStateDetails() const {
    return m_state_details;
}
void OAIGetJobRunResponse_jobRun::setStateDetails(const QString &state_details) {
    m_state_details = state_details;
    m_state_details_isSet = true;
}

bool OAIGetJobRunResponse_jobRun::is_state_details_Set() const{
    return m_state_details_isSet;
}

bool OAIGetJobRunResponse_jobRun::is_state_details_Valid() const{
    return m_state_details_isValid;
}

QString OAIGetJobRunResponse_jobRun::getReleaseLabel() const {
    return m_release_label;
}
void OAIGetJobRunResponse_jobRun::setReleaseLabel(const QString &release_label) {
    m_release_label = release_label;
    m_release_label_isSet = true;
}

bool OAIGetJobRunResponse_jobRun::is_release_label_Set() const{
    return m_release_label_isSet;
}

bool OAIGetJobRunResponse_jobRun::is_release_label_Valid() const{
    return m_release_label_isValid;
}

OAIJobRun_configurationOverrides OAIGetJobRunResponse_jobRun::getConfigurationOverrides() const {
    return m_configuration_overrides;
}
void OAIGetJobRunResponse_jobRun::setConfigurationOverrides(const OAIJobRun_configurationOverrides &configuration_overrides) {
    m_configuration_overrides = configuration_overrides;
    m_configuration_overrides_isSet = true;
}

bool OAIGetJobRunResponse_jobRun::is_configuration_overrides_Set() const{
    return m_configuration_overrides_isSet;
}

bool OAIGetJobRunResponse_jobRun::is_configuration_overrides_Valid() const{
    return m_configuration_overrides_isValid;
}

OAIJobRun_jobDriver OAIGetJobRunResponse_jobRun::getJobDriver() const {
    return m_job_driver;
}
void OAIGetJobRunResponse_jobRun::setJobDriver(const OAIJobRun_jobDriver &job_driver) {
    m_job_driver = job_driver;
    m_job_driver_isSet = true;
}

bool OAIGetJobRunResponse_jobRun::is_job_driver_Set() const{
    return m_job_driver_isSet;
}

bool OAIGetJobRunResponse_jobRun::is_job_driver_Valid() const{
    return m_job_driver_isValid;
}

QMap OAIGetJobRunResponse_jobRun::getTags() const {
    return m_tags;
}
void OAIGetJobRunResponse_jobRun::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetJobRunResponse_jobRun::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetJobRunResponse_jobRun::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIJobRun_totalResourceUtilization OAIGetJobRunResponse_jobRun::getTotalResourceUtilization() const {
    return m_total_resource_utilization;
}
void OAIGetJobRunResponse_jobRun::setTotalResourceUtilization(const OAIJobRun_totalResourceUtilization &total_resource_utilization) {
    m_total_resource_utilization = total_resource_utilization;
    m_total_resource_utilization_isSet = true;
}

bool OAIGetJobRunResponse_jobRun::is_total_resource_utilization_Set() const{
    return m_total_resource_utilization_isSet;
}

bool OAIGetJobRunResponse_jobRun::is_total_resource_utilization_Valid() const{
    return m_total_resource_utilization_isValid;
}

OAINetworkConfiguration OAIGetJobRunResponse_jobRun::getNetworkConfiguration() const {
    return m_network_configuration;
}
void OAIGetJobRunResponse_jobRun::setNetworkConfiguration(const OAINetworkConfiguration &network_configuration) {
    m_network_configuration = network_configuration;
    m_network_configuration_isSet = true;
}

bool OAIGetJobRunResponse_jobRun::is_network_configuration_Set() const{
    return m_network_configuration_isSet;
}

bool OAIGetJobRunResponse_jobRun::is_network_configuration_Valid() const{
    return m_network_configuration_isValid;
}

qint32 OAIGetJobRunResponse_jobRun::getTotalExecutionDurationSeconds() const {
    return m_total_execution_duration_seconds;
}
void OAIGetJobRunResponse_jobRun::setTotalExecutionDurationSeconds(const qint32 &total_execution_duration_seconds) {
    m_total_execution_duration_seconds = total_execution_duration_seconds;
    m_total_execution_duration_seconds_isSet = true;
}

bool OAIGetJobRunResponse_jobRun::is_total_execution_duration_seconds_Set() const{
    return m_total_execution_duration_seconds_isSet;
}

bool OAIGetJobRunResponse_jobRun::is_total_execution_duration_seconds_Valid() const{
    return m_total_execution_duration_seconds_isValid;
}

qint32 OAIGetJobRunResponse_jobRun::getExecutionTimeoutMinutes() const {
    return m_execution_timeout_minutes;
}
void OAIGetJobRunResponse_jobRun::setExecutionTimeoutMinutes(const qint32 &execution_timeout_minutes) {
    m_execution_timeout_minutes = execution_timeout_minutes;
    m_execution_timeout_minutes_isSet = true;
}

bool OAIGetJobRunResponse_jobRun::is_execution_timeout_minutes_Set() const{
    return m_execution_timeout_minutes_isSet;
}

bool OAIGetJobRunResponse_jobRun::is_execution_timeout_minutes_Valid() const{
    return m_execution_timeout_minutes_isValid;
}

OAIJobRun_billedResourceUtilization OAIGetJobRunResponse_jobRun::getBilledResourceUtilization() const {
    return m_billed_resource_utilization;
}
void OAIGetJobRunResponse_jobRun::setBilledResourceUtilization(const OAIJobRun_billedResourceUtilization &billed_resource_utilization) {
    m_billed_resource_utilization = billed_resource_utilization;
    m_billed_resource_utilization_isSet = true;
}

bool OAIGetJobRunResponse_jobRun::is_billed_resource_utilization_Set() const{
    return m_billed_resource_utilization_isSet;
}

bool OAIGetJobRunResponse_jobRun::is_billed_resource_utilization_Valid() const{
    return m_billed_resource_utilization_isValid;
}

bool OAIGetJobRunResponse_jobRun::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_overrides.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_driver.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_resource_utilization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_execution_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_timeout_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billed_resource_utilization.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetJobRunResponse_jobRun::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_id_isValid && m_job_run_id_isValid && m_arn_isValid && m_created_by_isValid && m_created_at_isValid && m_updated_at_isValid && m_execution_role_isValid && m_state_isValid && m_state_details_isValid && m_release_label_isValid && m_job_driver_isValid && true;
}

} // namespace OpenAPI
