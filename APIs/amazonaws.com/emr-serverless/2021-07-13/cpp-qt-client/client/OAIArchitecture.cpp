/**
 * EMR Serverless
 * <p>Amazon EMR Serverless is a new deployment option for Amazon EMR. Amazon EMR Serverless provides a serverless runtime environment that simplifies running analytics applications using the latest open source frameworks such as Apache Spark and Apache Hive. With Amazon EMR Serverless, you donâ€™t have to configure, optimize, secure, or operate clusters to run applications with these frameworks.</p> <p>The API reference to Amazon EMR Serverless is <code>emr-serverless</code>. The <code>emr-serverless</code> prefix is used in the following scenarios: </p> <ul> <li> <p>It is the prefix in the CLI commands for Amazon EMR Serverless. For example, <code>aws emr-serverless start-job-run</code>.</p> </li> <li> <p>It is the prefix before IAM policy actions for Amazon EMR Serverless. For example, <code>\"Action\": [\"emr-serverless:StartJobRun\"]</code>. For more information, see <a href=\"https://docs.aws.amazon.com/emr/latest/EMR-Serverless-UserGuide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-actions\">Policy actions for Amazon EMR Serverless</a>.</p> </li> <li> <p>It is the prefix used in Amazon EMR Serverless service endpoints. For example, <code>emr-serverless.us-east-2.amazonaws.com</code>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2021-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArchitecture.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArchitecture::OAIArchitecture(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArchitecture::OAIArchitecture() {
    this->initializeModel();
}

OAIArchitecture::~OAIArchitecture() {}

void OAIArchitecture::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIArchitecture::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIArchitecture::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ARM64", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArchitecture::ARM64;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("X86_64", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArchitecture::X86_64;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIArchitecture::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIArchitecture::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIArchitecture::ARM64:
            val = "ARM64";
            break;
        case eOAIArchitecture::X86_64:
            val = "X86_64";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIArchitecture::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIArchitecture::eOAIArchitecture OAIArchitecture::getValue() const {
    return m_value;
}

void OAIArchitecture::setValue(const OAIArchitecture::eOAIArchitecture& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIArchitecture::isSet() const {
    
    return m_value_isSet;
}

bool OAIArchitecture::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
