/**
 * EMR Serverless
 * <p>Amazon EMR Serverless is a new deployment option for Amazon EMR. Amazon EMR Serverless provides a serverless runtime environment that simplifies running analytics applications using the latest open source frameworks such as Apache Spark and Apache Hive. With Amazon EMR Serverless, you donâ€™t have to configure, optimize, secure, or operate clusters to run applications with these frameworks.</p> <p>The API reference to Amazon EMR Serverless is <code>emr-serverless</code>. The <code>emr-serverless</code> prefix is used in the following scenarios: </p> <ul> <li> <p>It is the prefix in the CLI commands for Amazon EMR Serverless. For example, <code>aws emr-serverless start-job-run</code>.</p> </li> <li> <p>It is the prefix before IAM policy actions for Amazon EMR Serverless. For example, <code>\"Action\": [\"emr-serverless:StartJobRun\"]</code>. For more information, see <a href=\"https://docs.aws.amazon.com/emr/latest/EMR-Serverless-UserGuide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-actions\">Policy actions for Amazon EMR Serverless</a>.</p> </li> <li> <p>It is the prefix used in Amazon EMR Serverless service endpoints. For example, <code>emr-serverless.us-east-2.amazonaws.com</code>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2021-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHive.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHive::OAIHive(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHive::OAIHive() {
    this->initializeModel();
}

OAIHive::~OAIHive() {}

void OAIHive::initializeModel() {

    m_query_isSet = false;
    m_query_isValid = false;

    m_init_query_file_isSet = false;
    m_init_query_file_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;
}

void OAIHive::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHive::fromJsonObject(QJsonObject json) {

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_init_query_file_isValid = ::OpenAPI::fromJsonValue(m_init_query_file, json[QString("initQueryFile")]);
    m_init_query_file_isSet = !json[QString("initQueryFile")].isNull() && m_init_query_file_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;
}

QString OAIHive::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHive::asJsonObject() const {
    QJsonObject obj;
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_init_query_file_isSet) {
        obj.insert(QString("initQueryFile"), ::OpenAPI::toJsonValue(m_init_query_file));
    }
    if (m_parameters_isSet) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    return obj;
}

QString OAIHive::getQuery() const {
    return m_query;
}
void OAIHive::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIHive::is_query_Set() const{
    return m_query_isSet;
}

bool OAIHive::is_query_Valid() const{
    return m_query_isValid;
}

QString OAIHive::getInitQueryFile() const {
    return m_init_query_file;
}
void OAIHive::setInitQueryFile(const QString &init_query_file) {
    m_init_query_file = init_query_file;
    m_init_query_file_isSet = true;
}

bool OAIHive::is_init_query_file_Set() const{
    return m_init_query_file_isSet;
}

bool OAIHive::is_init_query_file_Valid() const{
    return m_init_query_file_isValid;
}

QString OAIHive::getParameters() const {
    return m_parameters;
}
void OAIHive::setParameters(const QString &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIHive::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIHive::is_parameters_Valid() const{
    return m_parameters_isValid;
}

bool OAIHive::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_init_query_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHive::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_query_isValid && true;
}

} // namespace OpenAPI
