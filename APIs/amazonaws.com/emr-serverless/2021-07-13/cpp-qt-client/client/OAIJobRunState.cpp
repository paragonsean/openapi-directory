/**
 * EMR Serverless
 * <p>Amazon EMR Serverless is a new deployment option for Amazon EMR. Amazon EMR Serverless provides a serverless runtime environment that simplifies running analytics applications using the latest open source frameworks such as Apache Spark and Apache Hive. With Amazon EMR Serverless, you donâ€™t have to configure, optimize, secure, or operate clusters to run applications with these frameworks.</p> <p>The API reference to Amazon EMR Serverless is <code>emr-serverless</code>. The <code>emr-serverless</code> prefix is used in the following scenarios: </p> <ul> <li> <p>It is the prefix in the CLI commands for Amazon EMR Serverless. For example, <code>aws emr-serverless start-job-run</code>.</p> </li> <li> <p>It is the prefix before IAM policy actions for Amazon EMR Serverless. For example, <code>\"Action\": [\"emr-serverless:StartJobRun\"]</code>. For more information, see <a href=\"https://docs.aws.amazon.com/emr/latest/EMR-Serverless-UserGuide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-actions\">Policy actions for Amazon EMR Serverless</a>.</p> </li> <li> <p>It is the prefix used in Amazon EMR Serverless service endpoints. For example, <code>emr-serverless.us-east-2.amazonaws.com</code>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2021-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobRunState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobRunState::OAIJobRunState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobRunState::OAIJobRunState() {
    this->initializeModel();
}

OAIJobRunState::~OAIJobRunState() {}

void OAIJobRunState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIJobRunState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIJobRunState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("SUBMITTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobRunState::SUBMITTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENDING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobRunState::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SCHEDULED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobRunState::SCHEDULED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RUNNING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobRunState::RUNNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUCCESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobRunState::SUCCESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobRunState::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CANCELLING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobRunState::CANCELLING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CANCELLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobRunState::CANCELLED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIJobRunState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIJobRunState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIJobRunState::SUBMITTED:
            val = "SUBMITTED";
            break;
        case eOAIJobRunState::PENDING:
            val = "PENDING";
            break;
        case eOAIJobRunState::SCHEDULED:
            val = "SCHEDULED";
            break;
        case eOAIJobRunState::RUNNING:
            val = "RUNNING";
            break;
        case eOAIJobRunState::SUCCESS:
            val = "SUCCESS";
            break;
        case eOAIJobRunState::FAILED:
            val = "FAILED";
            break;
        case eOAIJobRunState::CANCELLING:
            val = "CANCELLING";
            break;
        case eOAIJobRunState::CANCELLED:
            val = "CANCELLED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIJobRunState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIJobRunState::eOAIJobRunState OAIJobRunState::getValue() const {
    return m_value;
}

void OAIJobRunState::setValue(const OAIJobRunState::eOAIJobRunState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIJobRunState::isSet() const {
    
    return m_value_isSet;
}

bool OAIJobRunState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
