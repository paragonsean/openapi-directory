/**
 * EMR Serverless
 * <p>Amazon EMR Serverless is a new deployment option for Amazon EMR. Amazon EMR Serverless provides a serverless runtime environment that simplifies running analytics applications using the latest open source frameworks such as Apache Spark and Apache Hive. With Amazon EMR Serverless, you donâ€™t have to configure, optimize, secure, or operate clusters to run applications with these frameworks.</p> <p>The API reference to Amazon EMR Serverless is <code>emr-serverless</code>. The <code>emr-serverless</code> prefix is used in the following scenarios: </p> <ul> <li> <p>It is the prefix in the CLI commands for Amazon EMR Serverless. For example, <code>aws emr-serverless start-job-run</code>.</p> </li> <li> <p>It is the prefix before IAM policy actions for Amazon EMR Serverless. For example, <code>\"Action\": [\"emr-serverless:StartJobRun\"]</code>. For more information, see <a href=\"https://docs.aws.amazon.com/emr/latest/EMR-Serverless-UserGuide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-actions\">Policy actions for Amazon EMR Serverless</a>.</p> </li> <li> <p>It is the prefix used in Amazon EMR Serverless service endpoints. For example, <code>emr-serverless.us-east-2.amazonaws.com</code>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2021-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkerTypeSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkerTypeSpecification::OAIWorkerTypeSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkerTypeSpecification::OAIWorkerTypeSpecification() {
    this->initializeModel();
}

OAIWorkerTypeSpecification::~OAIWorkerTypeSpecification() {}

void OAIWorkerTypeSpecification::initializeModel() {

    m_image_configuration_isSet = false;
    m_image_configuration_isValid = false;
}

void OAIWorkerTypeSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkerTypeSpecification::fromJsonObject(QJsonObject json) {

    m_image_configuration_isValid = ::OpenAPI::fromJsonValue(m_image_configuration, json[QString("imageConfiguration")]);
    m_image_configuration_isSet = !json[QString("imageConfiguration")].isNull() && m_image_configuration_isValid;
}

QString OAIWorkerTypeSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkerTypeSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_image_configuration.isSet()) {
        obj.insert(QString("imageConfiguration"), ::OpenAPI::toJsonValue(m_image_configuration));
    }
    return obj;
}

OAIWorkerTypeSpecification_imageConfiguration OAIWorkerTypeSpecification::getImageConfiguration() const {
    return m_image_configuration;
}
void OAIWorkerTypeSpecification::setImageConfiguration(const OAIWorkerTypeSpecification_imageConfiguration &image_configuration) {
    m_image_configuration = image_configuration;
    m_image_configuration_isSet = true;
}

bool OAIWorkerTypeSpecification::is_image_configuration_Set() const{
    return m_image_configuration_isSet;
}

bool OAIWorkerTypeSpecification::is_image_configuration_Valid() const{
    return m_image_configuration_isValid;
}

bool OAIWorkerTypeSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkerTypeSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
