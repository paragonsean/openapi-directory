/**
 * EMR Serverless
 * <p>Amazon EMR Serverless is a new deployment option for Amazon EMR. Amazon EMR Serverless provides a serverless runtime environment that simplifies running analytics applications using the latest open source frameworks such as Apache Spark and Apache Hive. With Amazon EMR Serverless, you donâ€™t have to configure, optimize, secure, or operate clusters to run applications with these frameworks.</p> <p>The API reference to Amazon EMR Serverless is <code>emr-serverless</code>. The <code>emr-serverless</code> prefix is used in the following scenarios: </p> <ul> <li> <p>It is the prefix in the CLI commands for Amazon EMR Serverless. For example, <code>aws emr-serverless start-job-run</code>.</p> </li> <li> <p>It is the prefix before IAM policy actions for Amazon EMR Serverless. For example, <code>\"Action\": [\"emr-serverless:StartJobRun\"]</code>. For more information, see <a href=\"https://docs.aws.amazon.com/emr/latest/EMR-Serverless-UserGuide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-actions\">Policy actions for Amazon EMR Serverless</a>.</p> </li> <li> <p>It is the prefix used in Amazon EMR Serverless service endpoints. For example, <code>emr-serverless.us-east-2.amazonaws.com</code>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2021-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMonitoringConfiguration_cloudWatchLoggingConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMonitoringConfiguration_cloudWatchLoggingConfiguration::OAIMonitoringConfiguration_cloudWatchLoggingConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMonitoringConfiguration_cloudWatchLoggingConfiguration::OAIMonitoringConfiguration_cloudWatchLoggingConfiguration() {
    this->initializeModel();
}

OAIMonitoringConfiguration_cloudWatchLoggingConfiguration::~OAIMonitoringConfiguration_cloudWatchLoggingConfiguration() {}

void OAIMonitoringConfiguration_cloudWatchLoggingConfiguration::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_log_group_name_isSet = false;
    m_log_group_name_isValid = false;

    m_log_stream_name_prefix_isSet = false;
    m_log_stream_name_prefix_isValid = false;

    m_encryption_key_arn_isSet = false;
    m_encryption_key_arn_isValid = false;

    m_log_types_isSet = false;
    m_log_types_isValid = false;
}

void OAIMonitoringConfiguration_cloudWatchLoggingConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMonitoringConfiguration_cloudWatchLoggingConfiguration::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_log_group_name_isValid = ::OpenAPI::fromJsonValue(m_log_group_name, json[QString("logGroupName")]);
    m_log_group_name_isSet = !json[QString("logGroupName")].isNull() && m_log_group_name_isValid;

    m_log_stream_name_prefix_isValid = ::OpenAPI::fromJsonValue(m_log_stream_name_prefix, json[QString("logStreamNamePrefix")]);
    m_log_stream_name_prefix_isSet = !json[QString("logStreamNamePrefix")].isNull() && m_log_stream_name_prefix_isValid;

    m_encryption_key_arn_isValid = ::OpenAPI::fromJsonValue(m_encryption_key_arn, json[QString("encryptionKeyArn")]);
    m_encryption_key_arn_isSet = !json[QString("encryptionKeyArn")].isNull() && m_encryption_key_arn_isValid;

    m_log_types_isValid = ::OpenAPI::fromJsonValue(m_log_types, json[QString("logTypes")]);
    m_log_types_isSet = !json[QString("logTypes")].isNull() && m_log_types_isValid;
}

QString OAIMonitoringConfiguration_cloudWatchLoggingConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMonitoringConfiguration_cloudWatchLoggingConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_log_group_name_isSet) {
        obj.insert(QString("logGroupName"), ::OpenAPI::toJsonValue(m_log_group_name));
    }
    if (m_log_stream_name_prefix_isSet) {
        obj.insert(QString("logStreamNamePrefix"), ::OpenAPI::toJsonValue(m_log_stream_name_prefix));
    }
    if (m_encryption_key_arn_isSet) {
        obj.insert(QString("encryptionKeyArn"), ::OpenAPI::toJsonValue(m_encryption_key_arn));
    }
    if (m_log_types.isSet()) {
        obj.insert(QString("logTypes"), ::OpenAPI::toJsonValue(m_log_types));
    }
    return obj;
}

bool OAIMonitoringConfiguration_cloudWatchLoggingConfiguration::getEnabled() const {
    return m_enabled;
}
void OAIMonitoringConfiguration_cloudWatchLoggingConfiguration::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIMonitoringConfiguration_cloudWatchLoggingConfiguration::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIMonitoringConfiguration_cloudWatchLoggingConfiguration::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIMonitoringConfiguration_cloudWatchLoggingConfiguration::getLogGroupName() const {
    return m_log_group_name;
}
void OAIMonitoringConfiguration_cloudWatchLoggingConfiguration::setLogGroupName(const QString &log_group_name) {
    m_log_group_name = log_group_name;
    m_log_group_name_isSet = true;
}

bool OAIMonitoringConfiguration_cloudWatchLoggingConfiguration::is_log_group_name_Set() const{
    return m_log_group_name_isSet;
}

bool OAIMonitoringConfiguration_cloudWatchLoggingConfiguration::is_log_group_name_Valid() const{
    return m_log_group_name_isValid;
}

QString OAIMonitoringConfiguration_cloudWatchLoggingConfiguration::getLogStreamNamePrefix() const {
    return m_log_stream_name_prefix;
}
void OAIMonitoringConfiguration_cloudWatchLoggingConfiguration::setLogStreamNamePrefix(const QString &log_stream_name_prefix) {
    m_log_stream_name_prefix = log_stream_name_prefix;
    m_log_stream_name_prefix_isSet = true;
}

bool OAIMonitoringConfiguration_cloudWatchLoggingConfiguration::is_log_stream_name_prefix_Set() const{
    return m_log_stream_name_prefix_isSet;
}

bool OAIMonitoringConfiguration_cloudWatchLoggingConfiguration::is_log_stream_name_prefix_Valid() const{
    return m_log_stream_name_prefix_isValid;
}

QString OAIMonitoringConfiguration_cloudWatchLoggingConfiguration::getEncryptionKeyArn() const {
    return m_encryption_key_arn;
}
void OAIMonitoringConfiguration_cloudWatchLoggingConfiguration::setEncryptionKeyArn(const QString &encryption_key_arn) {
    m_encryption_key_arn = encryption_key_arn;
    m_encryption_key_arn_isSet = true;
}

bool OAIMonitoringConfiguration_cloudWatchLoggingConfiguration::is_encryption_key_arn_Set() const{
    return m_encryption_key_arn_isSet;
}

bool OAIMonitoringConfiguration_cloudWatchLoggingConfiguration::is_encryption_key_arn_Valid() const{
    return m_encryption_key_arn_isValid;
}

QMap OAIMonitoringConfiguration_cloudWatchLoggingConfiguration::getLogTypes() const {
    return m_log_types;
}
void OAIMonitoringConfiguration_cloudWatchLoggingConfiguration::setLogTypes(const QMap &log_types) {
    m_log_types = log_types;
    m_log_types_isSet = true;
}

bool OAIMonitoringConfiguration_cloudWatchLoggingConfiguration::is_log_types_Set() const{
    return m_log_types_isSet;
}

bool OAIMonitoringConfiguration_cloudWatchLoggingConfiguration::is_log_types_Valid() const{
    return m_log_types_isValid;
}

bool OAIMonitoringConfiguration_cloudWatchLoggingConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_stream_name_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_key_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_types.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMonitoringConfiguration_cloudWatchLoggingConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enabled_isValid && true;
}

} // namespace OpenAPI
