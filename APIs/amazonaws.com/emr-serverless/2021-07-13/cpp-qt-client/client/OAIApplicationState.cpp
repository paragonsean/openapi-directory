/**
 * EMR Serverless
 * <p>Amazon EMR Serverless is a new deployment option for Amazon EMR. Amazon EMR Serverless provides a serverless runtime environment that simplifies running analytics applications using the latest open source frameworks such as Apache Spark and Apache Hive. With Amazon EMR Serverless, you donâ€™t have to configure, optimize, secure, or operate clusters to run applications with these frameworks.</p> <p>The API reference to Amazon EMR Serverless is <code>emr-serverless</code>. The <code>emr-serverless</code> prefix is used in the following scenarios: </p> <ul> <li> <p>It is the prefix in the CLI commands for Amazon EMR Serverless. For example, <code>aws emr-serverless start-job-run</code>.</p> </li> <li> <p>It is the prefix before IAM policy actions for Amazon EMR Serverless. For example, <code>\"Action\": [\"emr-serverless:StartJobRun\"]</code>. For more information, see <a href=\"https://docs.aws.amazon.com/emr/latest/EMR-Serverless-UserGuide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-actions\">Policy actions for Amazon EMR Serverless</a>.</p> </li> <li> <p>It is the prefix used in Amazon EMR Serverless service endpoints. For example, <code>emr-serverless.us-east-2.amazonaws.com</code>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2021-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationState::OAIApplicationState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationState::OAIApplicationState() {
    this->initializeModel();
}

OAIApplicationState::~OAIApplicationState() {}

void OAIApplicationState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIApplicationState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIApplicationState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CREATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationState::CREATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CREATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationState::CREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STARTING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationState::STARTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STARTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationState::STARTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STOPPING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationState::STOPPING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STOPPED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationState::STOPPED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TERMINATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationState::TERMINATED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIApplicationState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIApplicationState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIApplicationState::CREATING:
            val = "CREATING";
            break;
        case eOAIApplicationState::CREATED:
            val = "CREATED";
            break;
        case eOAIApplicationState::STARTING:
            val = "STARTING";
            break;
        case eOAIApplicationState::STARTED:
            val = "STARTED";
            break;
        case eOAIApplicationState::STOPPING:
            val = "STOPPING";
            break;
        case eOAIApplicationState::STOPPED:
            val = "STOPPED";
            break;
        case eOAIApplicationState::TERMINATED:
            val = "TERMINATED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIApplicationState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIApplicationState::eOAIApplicationState OAIApplicationState::getValue() const {
    return m_value;
}

void OAIApplicationState::setValue(const OAIApplicationState::eOAIApplicationState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIApplicationState::isSet() const {
    
    return m_value_isSet;
}

bool OAIApplicationState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
