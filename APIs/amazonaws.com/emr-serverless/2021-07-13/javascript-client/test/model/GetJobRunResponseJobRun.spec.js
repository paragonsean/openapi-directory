/**
 * EMR Serverless
 * <p>Amazon EMR Serverless is a new deployment option for Amazon EMR. Amazon EMR Serverless provides a serverless runtime environment that simplifies running analytics applications using the latest open source frameworks such as Apache Spark and Apache Hive. With Amazon EMR Serverless, you donâ€™t have to configure, optimize, secure, or operate clusters to run applications with these frameworks.</p> <p>The API reference to Amazon EMR Serverless is <code>emr-serverless</code>. The <code>emr-serverless</code> prefix is used in the following scenarios: </p> <ul> <li> <p>It is the prefix in the CLI commands for Amazon EMR Serverless. For example, <code>aws emr-serverless start-job-run</code>.</p> </li> <li> <p>It is the prefix before IAM policy actions for Amazon EMR Serverless. For example, <code>\"Action\": [\"emr-serverless:StartJobRun\"]</code>. For more information, see <a href=\"https://docs.aws.amazon.com/emr/latest/EMR-Serverless-UserGuide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-actions\">Policy actions for Amazon EMR Serverless</a>.</p> </li> <li> <p>It is the prefix used in Amazon EMR Serverless service endpoints. For example, <code>emr-serverless.us-east-2.amazonaws.com</code>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2021-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EmrServerless);
  }
}(this, function(expect, EmrServerless) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EmrServerless.GetJobRunResponseJobRun();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetJobRunResponseJobRun', function() {
    it('should create an instance of GetJobRunResponseJobRun', function() {
      // uncomment below and update the code to test GetJobRunResponseJobRun
      //var instance = new EmrServerless.GetJobRunResponseJobRun();
      //expect(instance).to.be.a(EmrServerless.GetJobRunResponseJobRun);
    });

    it('should have the property applicationId (base name: "applicationId")', function() {
      // uncomment below and update the code to test the property applicationId
      //var instance = new EmrServerless.GetJobRunResponseJobRun();
      //expect(instance).to.be();
    });

    it('should have the property jobRunId (base name: "jobRunId")', function() {
      // uncomment below and update the code to test the property jobRunId
      //var instance = new EmrServerless.GetJobRunResponseJobRun();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new EmrServerless.GetJobRunResponseJobRun();
      //expect(instance).to.be();
    });

    it('should have the property arn (base name: "arn")', function() {
      // uncomment below and update the code to test the property arn
      //var instance = new EmrServerless.GetJobRunResponseJobRun();
      //expect(instance).to.be();
    });

    it('should have the property createdBy (base name: "createdBy")', function() {
      // uncomment below and update the code to test the property createdBy
      //var instance = new EmrServerless.GetJobRunResponseJobRun();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "createdAt")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new EmrServerless.GetJobRunResponseJobRun();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updatedAt")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new EmrServerless.GetJobRunResponseJobRun();
      //expect(instance).to.be();
    });

    it('should have the property executionRole (base name: "executionRole")', function() {
      // uncomment below and update the code to test the property executionRole
      //var instance = new EmrServerless.GetJobRunResponseJobRun();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new EmrServerless.GetJobRunResponseJobRun();
      //expect(instance).to.be();
    });

    it('should have the property stateDetails (base name: "stateDetails")', function() {
      // uncomment below and update the code to test the property stateDetails
      //var instance = new EmrServerless.GetJobRunResponseJobRun();
      //expect(instance).to.be();
    });

    it('should have the property releaseLabel (base name: "releaseLabel")', function() {
      // uncomment below and update the code to test the property releaseLabel
      //var instance = new EmrServerless.GetJobRunResponseJobRun();
      //expect(instance).to.be();
    });

    it('should have the property configurationOverrides (base name: "configurationOverrides")', function() {
      // uncomment below and update the code to test the property configurationOverrides
      //var instance = new EmrServerless.GetJobRunResponseJobRun();
      //expect(instance).to.be();
    });

    it('should have the property jobDriver (base name: "jobDriver")', function() {
      // uncomment below and update the code to test the property jobDriver
      //var instance = new EmrServerless.GetJobRunResponseJobRun();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new EmrServerless.GetJobRunResponseJobRun();
      //expect(instance).to.be();
    });

    it('should have the property totalResourceUtilization (base name: "totalResourceUtilization")', function() {
      // uncomment below and update the code to test the property totalResourceUtilization
      //var instance = new EmrServerless.GetJobRunResponseJobRun();
      //expect(instance).to.be();
    });

    it('should have the property networkConfiguration (base name: "networkConfiguration")', function() {
      // uncomment below and update the code to test the property networkConfiguration
      //var instance = new EmrServerless.GetJobRunResponseJobRun();
      //expect(instance).to.be();
    });

    it('should have the property totalExecutionDurationSeconds (base name: "totalExecutionDurationSeconds")', function() {
      // uncomment below and update the code to test the property totalExecutionDurationSeconds
      //var instance = new EmrServerless.GetJobRunResponseJobRun();
      //expect(instance).to.be();
    });

    it('should have the property executionTimeoutMinutes (base name: "executionTimeoutMinutes")', function() {
      // uncomment below and update the code to test the property executionTimeoutMinutes
      //var instance = new EmrServerless.GetJobRunResponseJobRun();
      //expect(instance).to.be();
    });

    it('should have the property billedResourceUtilization (base name: "billedResourceUtilization")', function() {
      // uncomment below and update the code to test the property billedResourceUtilization
      //var instance = new EmrServerless.GetJobRunResponseJobRun();
      //expect(instance).to.be();
    });

  });

}));
