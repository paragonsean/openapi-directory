/**
 * EMR Serverless
 * <p>Amazon EMR Serverless is a new deployment option for Amazon EMR. Amazon EMR Serverless provides a serverless runtime environment that simplifies running analytics applications using the latest open source frameworks such as Apache Spark and Apache Hive. With Amazon EMR Serverless, you donâ€™t have to configure, optimize, secure, or operate clusters to run applications with these frameworks.</p> <p>The API reference to Amazon EMR Serverless is <code>emr-serverless</code>. The <code>emr-serverless</code> prefix is used in the following scenarios: </p> <ul> <li> <p>It is the prefix in the CLI commands for Amazon EMR Serverless. For example, <code>aws emr-serverless start-job-run</code>.</p> </li> <li> <p>It is the prefix before IAM policy actions for Amazon EMR Serverless. For example, <code>\"Action\": [\"emr-serverless:StartJobRun\"]</code>. For more information, see <a href=\"https://docs.aws.amazon.com/emr/latest/EMR-Serverless-UserGuide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-actions\">Policy actions for Amazon EMR Serverless</a>.</p> </li> <li> <p>It is the prefix used in Amazon EMR Serverless service endpoints. For example, <code>emr-serverless.us-east-2.amazonaws.com</code>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2021-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageConfigurationInput from './ImageConfigurationInput';

/**
 * The CreateApplicationRequestImageConfiguration model module.
 * @module model/CreateApplicationRequestImageConfiguration
 * @version 2021-07-13
 */
class CreateApplicationRequestImageConfiguration {
    /**
     * Constructs a new <code>CreateApplicationRequestImageConfiguration</code>.
     * @alias module:model/CreateApplicationRequestImageConfiguration
     * @implements module:model/ImageConfigurationInput
     */
    constructor() { 
        ImageConfigurationInput.initialize(this);
        CreateApplicationRequestImageConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateApplicationRequestImageConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateApplicationRequestImageConfiguration} obj Optional instance to populate.
     * @return {module:model/CreateApplicationRequestImageConfiguration} The populated <code>CreateApplicationRequestImageConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateApplicationRequestImageConfiguration();
            ImageConfigurationInput.constructFromObject(data, obj);

            if (data.hasOwnProperty('imageUri')) {
                obj['imageUri'] = ApiClient.convertToType(data['imageUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateApplicationRequestImageConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateApplicationRequestImageConfiguration</code>.
     */
    static validateJSON(data) {
        // validate the optional field `imageUri`
        if (data['imageUri']) { // data not null
          String.validateJSON(data['imageUri']);
        }

        return true;
    }


}



/**
 * @member {String} imageUri
 */
CreateApplicationRequestImageConfiguration.prototype['imageUri'] = undefined;


// Implement ImageConfigurationInput interface:
/**
 * @member {String} imageUri
 */
ImageConfigurationInput.prototype['imageUri'] = undefined;




export default CreateApplicationRequestImageConfiguration;

