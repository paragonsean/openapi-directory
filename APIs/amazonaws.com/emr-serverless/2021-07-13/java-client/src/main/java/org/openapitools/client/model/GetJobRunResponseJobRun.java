/*
 * EMR Serverless
 * <p>Amazon EMR Serverless is a new deployment option for Amazon EMR. Amazon EMR Serverless provides a serverless runtime environment that simplifies running analytics applications using the latest open source frameworks such as Apache Spark and Apache Hive. With Amazon EMR Serverless, you donâ€™t have to configure, optimize, secure, or operate clusters to run applications with these frameworks.</p> <p>The API reference to Amazon EMR Serverless is <code>emr-serverless</code>. The <code>emr-serverless</code> prefix is used in the following scenarios: </p> <ul> <li> <p>It is the prefix in the CLI commands for Amazon EMR Serverless. For example, <code>aws emr-serverless start-job-run</code>.</p> </li> <li> <p>It is the prefix before IAM policy actions for Amazon EMR Serverless. For example, <code>\"Action\": [\"emr-serverless:StartJobRun\"]</code>. For more information, see <a href=\"https://docs.aws.amazon.com/emr/latest/EMR-Serverless-UserGuide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-actions\">Policy actions for Amazon EMR Serverless</a>.</p> </li> <li> <p>It is the prefix used in Amazon EMR Serverless service endpoints. For example, <code>emr-serverless.us-east-2.amazonaws.com</code>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2021-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.JobRunBilledResourceUtilization;
import org.openapitools.client.model.JobRunConfigurationOverrides;
import org.openapitools.client.model.JobRunJobDriver;
import org.openapitools.client.model.JobRunState;
import org.openapitools.client.model.JobRunTotalResourceUtilization;
import org.openapitools.client.model.NetworkConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetJobRunResponseJobRun
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:05.299532-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetJobRunResponseJobRun {
  public static final String SERIALIZED_NAME_APPLICATION_ID = "applicationId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_ID)
  private String applicationId;

  public static final String SERIALIZED_NAME_JOB_RUN_ID = "jobRunId";
  @SerializedName(SERIALIZED_NAME_JOB_RUN_ID)
  private String jobRunId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_EXECUTION_ROLE = "executionRole";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ROLE)
  private String executionRole;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private JobRunState state;

  public static final String SERIALIZED_NAME_STATE_DETAILS = "stateDetails";
  @SerializedName(SERIALIZED_NAME_STATE_DETAILS)
  private String stateDetails;

  public static final String SERIALIZED_NAME_RELEASE_LABEL = "releaseLabel";
  @SerializedName(SERIALIZED_NAME_RELEASE_LABEL)
  private String releaseLabel;

  public static final String SERIALIZED_NAME_CONFIGURATION_OVERRIDES = "configurationOverrides";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_OVERRIDES)
  private JobRunConfigurationOverrides configurationOverrides;

  public static final String SERIALIZED_NAME_JOB_DRIVER = "jobDriver";
  @SerializedName(SERIALIZED_NAME_JOB_DRIVER)
  private JobRunJobDriver jobDriver;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_TOTAL_RESOURCE_UTILIZATION = "totalResourceUtilization";
  @SerializedName(SERIALIZED_NAME_TOTAL_RESOURCE_UTILIZATION)
  private JobRunTotalResourceUtilization totalResourceUtilization;

  public static final String SERIALIZED_NAME_NETWORK_CONFIGURATION = "networkConfiguration";
  @SerializedName(SERIALIZED_NAME_NETWORK_CONFIGURATION)
  private NetworkConfiguration networkConfiguration;

  public static final String SERIALIZED_NAME_TOTAL_EXECUTION_DURATION_SECONDS = "totalExecutionDurationSeconds";
  @SerializedName(SERIALIZED_NAME_TOTAL_EXECUTION_DURATION_SECONDS)
  private Integer totalExecutionDurationSeconds;

  public static final String SERIALIZED_NAME_EXECUTION_TIMEOUT_MINUTES = "executionTimeoutMinutes";
  @SerializedName(SERIALIZED_NAME_EXECUTION_TIMEOUT_MINUTES)
  private Integer executionTimeoutMinutes;

  public static final String SERIALIZED_NAME_BILLED_RESOURCE_UTILIZATION = "billedResourceUtilization";
  @SerializedName(SERIALIZED_NAME_BILLED_RESOURCE_UTILIZATION)
  private JobRunBilledResourceUtilization billedResourceUtilization;

  public GetJobRunResponseJobRun() {
  }

  public GetJobRunResponseJobRun applicationId(String applicationId) {
    this.applicationId = applicationId;
    return this;
  }

  /**
   * Get applicationId
   * @return applicationId
   */
  @javax.annotation.Nonnull
  public String getApplicationId() {
    return applicationId;
  }

  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }


  public GetJobRunResponseJobRun jobRunId(String jobRunId) {
    this.jobRunId = jobRunId;
    return this;
  }

  /**
   * Get jobRunId
   * @return jobRunId
   */
  @javax.annotation.Nonnull
  public String getJobRunId() {
    return jobRunId;
  }

  public void setJobRunId(String jobRunId) {
    this.jobRunId = jobRunId;
  }


  public GetJobRunResponseJobRun name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetJobRunResponseJobRun arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nonnull
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public GetJobRunResponseJobRun createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nonnull
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public GetJobRunResponseJobRun createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public GetJobRunResponseJobRun updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public GetJobRunResponseJobRun executionRole(String executionRole) {
    this.executionRole = executionRole;
    return this;
  }

  /**
   * Get executionRole
   * @return executionRole
   */
  @javax.annotation.Nonnull
  public String getExecutionRole() {
    return executionRole;
  }

  public void setExecutionRole(String executionRole) {
    this.executionRole = executionRole;
  }


  public GetJobRunResponseJobRun state(JobRunState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nonnull
  public JobRunState getState() {
    return state;
  }

  public void setState(JobRunState state) {
    this.state = state;
  }


  public GetJobRunResponseJobRun stateDetails(String stateDetails) {
    this.stateDetails = stateDetails;
    return this;
  }

  /**
   * Get stateDetails
   * @return stateDetails
   */
  @javax.annotation.Nonnull
  public String getStateDetails() {
    return stateDetails;
  }

  public void setStateDetails(String stateDetails) {
    this.stateDetails = stateDetails;
  }


  public GetJobRunResponseJobRun releaseLabel(String releaseLabel) {
    this.releaseLabel = releaseLabel;
    return this;
  }

  /**
   * Get releaseLabel
   * @return releaseLabel
   */
  @javax.annotation.Nonnull
  public String getReleaseLabel() {
    return releaseLabel;
  }

  public void setReleaseLabel(String releaseLabel) {
    this.releaseLabel = releaseLabel;
  }


  public GetJobRunResponseJobRun configurationOverrides(JobRunConfigurationOverrides configurationOverrides) {
    this.configurationOverrides = configurationOverrides;
    return this;
  }

  /**
   * Get configurationOverrides
   * @return configurationOverrides
   */
  @javax.annotation.Nullable
  public JobRunConfigurationOverrides getConfigurationOverrides() {
    return configurationOverrides;
  }

  public void setConfigurationOverrides(JobRunConfigurationOverrides configurationOverrides) {
    this.configurationOverrides = configurationOverrides;
  }


  public GetJobRunResponseJobRun jobDriver(JobRunJobDriver jobDriver) {
    this.jobDriver = jobDriver;
    return this;
  }

  /**
   * Get jobDriver
   * @return jobDriver
   */
  @javax.annotation.Nonnull
  public JobRunJobDriver getJobDriver() {
    return jobDriver;
  }

  public void setJobDriver(JobRunJobDriver jobDriver) {
    this.jobDriver = jobDriver;
  }


  public GetJobRunResponseJobRun tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public GetJobRunResponseJobRun totalResourceUtilization(JobRunTotalResourceUtilization totalResourceUtilization) {
    this.totalResourceUtilization = totalResourceUtilization;
    return this;
  }

  /**
   * Get totalResourceUtilization
   * @return totalResourceUtilization
   */
  @javax.annotation.Nullable
  public JobRunTotalResourceUtilization getTotalResourceUtilization() {
    return totalResourceUtilization;
  }

  public void setTotalResourceUtilization(JobRunTotalResourceUtilization totalResourceUtilization) {
    this.totalResourceUtilization = totalResourceUtilization;
  }


  public GetJobRunResponseJobRun networkConfiguration(NetworkConfiguration networkConfiguration) {
    this.networkConfiguration = networkConfiguration;
    return this;
  }

  /**
   * Get networkConfiguration
   * @return networkConfiguration
   */
  @javax.annotation.Nullable
  public NetworkConfiguration getNetworkConfiguration() {
    return networkConfiguration;
  }

  public void setNetworkConfiguration(NetworkConfiguration networkConfiguration) {
    this.networkConfiguration = networkConfiguration;
  }


  public GetJobRunResponseJobRun totalExecutionDurationSeconds(Integer totalExecutionDurationSeconds) {
    this.totalExecutionDurationSeconds = totalExecutionDurationSeconds;
    return this;
  }

  /**
   * Get totalExecutionDurationSeconds
   * @return totalExecutionDurationSeconds
   */
  @javax.annotation.Nullable
  public Integer getTotalExecutionDurationSeconds() {
    return totalExecutionDurationSeconds;
  }

  public void setTotalExecutionDurationSeconds(Integer totalExecutionDurationSeconds) {
    this.totalExecutionDurationSeconds = totalExecutionDurationSeconds;
  }


  public GetJobRunResponseJobRun executionTimeoutMinutes(Integer executionTimeoutMinutes) {
    this.executionTimeoutMinutes = executionTimeoutMinutes;
    return this;
  }

  /**
   * Get executionTimeoutMinutes
   * @return executionTimeoutMinutes
   */
  @javax.annotation.Nullable
  public Integer getExecutionTimeoutMinutes() {
    return executionTimeoutMinutes;
  }

  public void setExecutionTimeoutMinutes(Integer executionTimeoutMinutes) {
    this.executionTimeoutMinutes = executionTimeoutMinutes;
  }


  public GetJobRunResponseJobRun billedResourceUtilization(JobRunBilledResourceUtilization billedResourceUtilization) {
    this.billedResourceUtilization = billedResourceUtilization;
    return this;
  }

  /**
   * Get billedResourceUtilization
   * @return billedResourceUtilization
   */
  @javax.annotation.Nullable
  public JobRunBilledResourceUtilization getBilledResourceUtilization() {
    return billedResourceUtilization;
  }

  public void setBilledResourceUtilization(JobRunBilledResourceUtilization billedResourceUtilization) {
    this.billedResourceUtilization = billedResourceUtilization;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetJobRunResponseJobRun getJobRunResponseJobRun = (GetJobRunResponseJobRun) o;
    return Objects.equals(this.applicationId, getJobRunResponseJobRun.applicationId) &&
        Objects.equals(this.jobRunId, getJobRunResponseJobRun.jobRunId) &&
        Objects.equals(this.name, getJobRunResponseJobRun.name) &&
        Objects.equals(this.arn, getJobRunResponseJobRun.arn) &&
        Objects.equals(this.createdBy, getJobRunResponseJobRun.createdBy) &&
        Objects.equals(this.createdAt, getJobRunResponseJobRun.createdAt) &&
        Objects.equals(this.updatedAt, getJobRunResponseJobRun.updatedAt) &&
        Objects.equals(this.executionRole, getJobRunResponseJobRun.executionRole) &&
        Objects.equals(this.state, getJobRunResponseJobRun.state) &&
        Objects.equals(this.stateDetails, getJobRunResponseJobRun.stateDetails) &&
        Objects.equals(this.releaseLabel, getJobRunResponseJobRun.releaseLabel) &&
        Objects.equals(this.configurationOverrides, getJobRunResponseJobRun.configurationOverrides) &&
        Objects.equals(this.jobDriver, getJobRunResponseJobRun.jobDriver) &&
        Objects.equals(this.tags, getJobRunResponseJobRun.tags) &&
        Objects.equals(this.totalResourceUtilization, getJobRunResponseJobRun.totalResourceUtilization) &&
        Objects.equals(this.networkConfiguration, getJobRunResponseJobRun.networkConfiguration) &&
        Objects.equals(this.totalExecutionDurationSeconds, getJobRunResponseJobRun.totalExecutionDurationSeconds) &&
        Objects.equals(this.executionTimeoutMinutes, getJobRunResponseJobRun.executionTimeoutMinutes) &&
        Objects.equals(this.billedResourceUtilization, getJobRunResponseJobRun.billedResourceUtilization);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationId, jobRunId, name, arn, createdBy, createdAt, updatedAt, executionRole, state, stateDetails, releaseLabel, configurationOverrides, jobDriver, tags, totalResourceUtilization, networkConfiguration, totalExecutionDurationSeconds, executionTimeoutMinutes, billedResourceUtilization);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetJobRunResponseJobRun {\n");
    sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    sb.append("    jobRunId: ").append(toIndentedString(jobRunId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    executionRole: ").append(toIndentedString(executionRole)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateDetails: ").append(toIndentedString(stateDetails)).append("\n");
    sb.append("    releaseLabel: ").append(toIndentedString(releaseLabel)).append("\n");
    sb.append("    configurationOverrides: ").append(toIndentedString(configurationOverrides)).append("\n");
    sb.append("    jobDriver: ").append(toIndentedString(jobDriver)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    totalResourceUtilization: ").append(toIndentedString(totalResourceUtilization)).append("\n");
    sb.append("    networkConfiguration: ").append(toIndentedString(networkConfiguration)).append("\n");
    sb.append("    totalExecutionDurationSeconds: ").append(toIndentedString(totalExecutionDurationSeconds)).append("\n");
    sb.append("    executionTimeoutMinutes: ").append(toIndentedString(executionTimeoutMinutes)).append("\n");
    sb.append("    billedResourceUtilization: ").append(toIndentedString(billedResourceUtilization)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicationId");
    openapiFields.add("jobRunId");
    openapiFields.add("name");
    openapiFields.add("arn");
    openapiFields.add("createdBy");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");
    openapiFields.add("executionRole");
    openapiFields.add("state");
    openapiFields.add("stateDetails");
    openapiFields.add("releaseLabel");
    openapiFields.add("configurationOverrides");
    openapiFields.add("jobDriver");
    openapiFields.add("tags");
    openapiFields.add("totalResourceUtilization");
    openapiFields.add("networkConfiguration");
    openapiFields.add("totalExecutionDurationSeconds");
    openapiFields.add("executionTimeoutMinutes");
    openapiFields.add("billedResourceUtilization");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("applicationId");
    openapiRequiredFields.add("jobRunId");
    openapiRequiredFields.add("arn");
    openapiRequiredFields.add("createdBy");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("updatedAt");
    openapiRequiredFields.add("executionRole");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("stateDetails");
    openapiRequiredFields.add("releaseLabel");
    openapiRequiredFields.add("jobDriver");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetJobRunResponseJobRun
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetJobRunResponseJobRun.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetJobRunResponseJobRun is not found in the empty JSON string", GetJobRunResponseJobRun.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetJobRunResponseJobRun.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetJobRunResponseJobRun` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetJobRunResponseJobRun.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `applicationId`
      String.validateJsonElement(jsonObj.get("applicationId"));
      // validate the required field `jobRunId`
      String.validateJsonElement(jsonObj.get("jobRunId"));
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the required field `arn`
      String.validateJsonElement(jsonObj.get("arn"));
      // validate the required field `createdBy`
      String.validateJsonElement(jsonObj.get("createdBy"));
      // validate the required field `createdAt`
      OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      // validate the required field `updatedAt`
      OffsetDateTime.validateJsonElement(jsonObj.get("updatedAt"));
      // validate the required field `executionRole`
      String.validateJsonElement(jsonObj.get("executionRole"));
      // validate the required field `state`
      JobRunState.validateJsonElement(jsonObj.get("state"));
      // validate the required field `stateDetails`
      String.validateJsonElement(jsonObj.get("stateDetails"));
      // validate the required field `releaseLabel`
      String.validateJsonElement(jsonObj.get("releaseLabel"));
      // validate the optional field `configurationOverrides`
      if (jsonObj.get("configurationOverrides") != null && !jsonObj.get("configurationOverrides").isJsonNull()) {
        JobRunConfigurationOverrides.validateJsonElement(jsonObj.get("configurationOverrides"));
      }
      // validate the required field `jobDriver`
      JobRunJobDriver.validateJsonElement(jsonObj.get("jobDriver"));
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `totalResourceUtilization`
      if (jsonObj.get("totalResourceUtilization") != null && !jsonObj.get("totalResourceUtilization").isJsonNull()) {
        JobRunTotalResourceUtilization.validateJsonElement(jsonObj.get("totalResourceUtilization"));
      }
      // validate the optional field `networkConfiguration`
      if (jsonObj.get("networkConfiguration") != null && !jsonObj.get("networkConfiguration").isJsonNull()) {
        NetworkConfiguration.validateJsonElement(jsonObj.get("networkConfiguration"));
      }
      // validate the optional field `totalExecutionDurationSeconds`
      if (jsonObj.get("totalExecutionDurationSeconds") != null && !jsonObj.get("totalExecutionDurationSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("totalExecutionDurationSeconds"));
      }
      // validate the optional field `executionTimeoutMinutes`
      if (jsonObj.get("executionTimeoutMinutes") != null && !jsonObj.get("executionTimeoutMinutes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("executionTimeoutMinutes"));
      }
      // validate the optional field `billedResourceUtilization`
      if (jsonObj.get("billedResourceUtilization") != null && !jsonObj.get("billedResourceUtilization").isJsonNull()) {
        JobRunBilledResourceUtilization.validateJsonElement(jsonObj.get("billedResourceUtilization"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetJobRunResponseJobRun.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetJobRunResponseJobRun' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetJobRunResponseJobRun> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetJobRunResponseJobRun.class));

       return (TypeAdapter<T>) new TypeAdapter<GetJobRunResponseJobRun>() {
           @Override
           public void write(JsonWriter out, GetJobRunResponseJobRun value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetJobRunResponseJobRun read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetJobRunResponseJobRun given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetJobRunResponseJobRun
   * @throws IOException if the JSON string is invalid with respect to GetJobRunResponseJobRun
   */
  public static GetJobRunResponseJobRun fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetJobRunResponseJobRun.class);
  }

  /**
   * Convert an instance of GetJobRunResponseJobRun to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

