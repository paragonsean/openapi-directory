/*
 * EMR Serverless
 * <p>Amazon EMR Serverless is a new deployment option for Amazon EMR. Amazon EMR Serverless provides a serverless runtime environment that simplifies running analytics applications using the latest open source frameworks such as Apache Spark and Apache Hive. With Amazon EMR Serverless, you donâ€™t have to configure, optimize, secure, or operate clusters to run applications with these frameworks.</p> <p>The API reference to Amazon EMR Serverless is <code>emr-serverless</code>. The <code>emr-serverless</code> prefix is used in the following scenarios: </p> <ul> <li> <p>It is the prefix in the CLI commands for Amazon EMR Serverless. For example, <code>aws emr-serverless start-job-run</code>.</p> </li> <li> <p>It is the prefix before IAM policy actions for Amazon EMR Serverless. For example, <code>\"Action\": [\"emr-serverless:StartJobRun\"]</code>. For more information, see <a href=\"https://docs.aws.amazon.com/emr/latest/EMR-Serverless-UserGuide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-actions\">Policy actions for Amazon EMR Serverless</a>.</p> </li> <li> <p>It is the prefix used in Amazon EMR Serverless service endpoints. For example, <code>emr-serverless.us-east-2.amazonaws.com</code>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2021-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CreateApplicationRequestAutoStartConfiguration;
import org.openapitools.client.model.CreateApplicationRequestAutoStopConfiguration;
import org.openapitools.client.model.CreateApplicationRequestImageConfiguration;
import org.openapitools.client.model.CreateApplicationRequestMaximumCapacity;
import org.openapitools.client.model.CreateApplicationRequestNetworkConfiguration;
import org.openapitools.client.model.InitialCapacityConfig;
import org.openapitools.client.model.WorkerTypeSpecificationInput;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateApplicationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:05.299532-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateApplicationRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RELEASE_LABEL = "releaseLabel";
  @SerializedName(SERIALIZED_NAME_RELEASE_LABEL)
  private String releaseLabel;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_INITIAL_CAPACITY = "initialCapacity";
  @SerializedName(SERIALIZED_NAME_INITIAL_CAPACITY)
  private Map<String, InitialCapacityConfig> initialCapacity = new HashMap<>();

  public static final String SERIALIZED_NAME_MAXIMUM_CAPACITY = "maximumCapacity";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_CAPACITY)
  private CreateApplicationRequestMaximumCapacity maximumCapacity;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_AUTO_START_CONFIGURATION = "autoStartConfiguration";
  @SerializedName(SERIALIZED_NAME_AUTO_START_CONFIGURATION)
  private CreateApplicationRequestAutoStartConfiguration autoStartConfiguration;

  public static final String SERIALIZED_NAME_AUTO_STOP_CONFIGURATION = "autoStopConfiguration";
  @SerializedName(SERIALIZED_NAME_AUTO_STOP_CONFIGURATION)
  private CreateApplicationRequestAutoStopConfiguration autoStopConfiguration;

  public static final String SERIALIZED_NAME_NETWORK_CONFIGURATION = "networkConfiguration";
  @SerializedName(SERIALIZED_NAME_NETWORK_CONFIGURATION)
  private CreateApplicationRequestNetworkConfiguration networkConfiguration;

  /**
   * The CPU architecture of an application.
   */
  @JsonAdapter(ArchitectureEnum.Adapter.class)
  public enum ArchitectureEnum {
    ARM64("ARM64"),
    
    X86_64("X86_64");

    private String value;

    ArchitectureEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ArchitectureEnum fromValue(String value) {
      for (ArchitectureEnum b : ArchitectureEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ArchitectureEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ArchitectureEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ArchitectureEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ArchitectureEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ArchitectureEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ARCHITECTURE = "architecture";
  @SerializedName(SERIALIZED_NAME_ARCHITECTURE)
  private ArchitectureEnum architecture;

  public static final String SERIALIZED_NAME_IMAGE_CONFIGURATION = "imageConfiguration";
  @SerializedName(SERIALIZED_NAME_IMAGE_CONFIGURATION)
  private CreateApplicationRequestImageConfiguration imageConfiguration;

  public static final String SERIALIZED_NAME_WORKER_TYPE_SPECIFICATIONS = "workerTypeSpecifications";
  @SerializedName(SERIALIZED_NAME_WORKER_TYPE_SPECIFICATIONS)
  private Map<String, WorkerTypeSpecificationInput> workerTypeSpecifications = new HashMap<>();

  public CreateApplicationRequest() {
  }

  public CreateApplicationRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the application.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateApplicationRequest releaseLabel(String releaseLabel) {
    this.releaseLabel = releaseLabel;
    return this;
  }

  /**
   * The Amazon EMR release associated with the application.
   * @return releaseLabel
   */
  @javax.annotation.Nonnull
  public String getReleaseLabel() {
    return releaseLabel;
  }

  public void setReleaseLabel(String releaseLabel) {
    this.releaseLabel = releaseLabel;
  }


  public CreateApplicationRequest type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of application you want to start, such as Spark or Hive.
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public CreateApplicationRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * The client idempotency token of the application to create. Its value must be unique for each request.
   * @return clientToken
   */
  @javax.annotation.Nonnull
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public CreateApplicationRequest initialCapacity(Map<String, InitialCapacityConfig> initialCapacity) {
    this.initialCapacity = initialCapacity;
    return this;
  }

  public CreateApplicationRequest putInitialCapacityItem(String key, InitialCapacityConfig initialCapacityItem) {
    if (this.initialCapacity == null) {
      this.initialCapacity = new HashMap<>();
    }
    this.initialCapacity.put(key, initialCapacityItem);
    return this;
  }

  /**
   * The capacity to initialize when the application is created.
   * @return initialCapacity
   */
  @javax.annotation.Nullable
  public Map<String, InitialCapacityConfig> getInitialCapacity() {
    return initialCapacity;
  }

  public void setInitialCapacity(Map<String, InitialCapacityConfig> initialCapacity) {
    this.initialCapacity = initialCapacity;
  }


  public CreateApplicationRequest maximumCapacity(CreateApplicationRequestMaximumCapacity maximumCapacity) {
    this.maximumCapacity = maximumCapacity;
    return this;
  }

  /**
   * Get maximumCapacity
   * @return maximumCapacity
   */
  @javax.annotation.Nullable
  public CreateApplicationRequestMaximumCapacity getMaximumCapacity() {
    return maximumCapacity;
  }

  public void setMaximumCapacity(CreateApplicationRequestMaximumCapacity maximumCapacity) {
    this.maximumCapacity = maximumCapacity;
  }


  public CreateApplicationRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateApplicationRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The tags assigned to the application.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateApplicationRequest autoStartConfiguration(CreateApplicationRequestAutoStartConfiguration autoStartConfiguration) {
    this.autoStartConfiguration = autoStartConfiguration;
    return this;
  }

  /**
   * Get autoStartConfiguration
   * @return autoStartConfiguration
   */
  @javax.annotation.Nullable
  public CreateApplicationRequestAutoStartConfiguration getAutoStartConfiguration() {
    return autoStartConfiguration;
  }

  public void setAutoStartConfiguration(CreateApplicationRequestAutoStartConfiguration autoStartConfiguration) {
    this.autoStartConfiguration = autoStartConfiguration;
  }


  public CreateApplicationRequest autoStopConfiguration(CreateApplicationRequestAutoStopConfiguration autoStopConfiguration) {
    this.autoStopConfiguration = autoStopConfiguration;
    return this;
  }

  /**
   * Get autoStopConfiguration
   * @return autoStopConfiguration
   */
  @javax.annotation.Nullable
  public CreateApplicationRequestAutoStopConfiguration getAutoStopConfiguration() {
    return autoStopConfiguration;
  }

  public void setAutoStopConfiguration(CreateApplicationRequestAutoStopConfiguration autoStopConfiguration) {
    this.autoStopConfiguration = autoStopConfiguration;
  }


  public CreateApplicationRequest networkConfiguration(CreateApplicationRequestNetworkConfiguration networkConfiguration) {
    this.networkConfiguration = networkConfiguration;
    return this;
  }

  /**
   * Get networkConfiguration
   * @return networkConfiguration
   */
  @javax.annotation.Nullable
  public CreateApplicationRequestNetworkConfiguration getNetworkConfiguration() {
    return networkConfiguration;
  }

  public void setNetworkConfiguration(CreateApplicationRequestNetworkConfiguration networkConfiguration) {
    this.networkConfiguration = networkConfiguration;
  }


  public CreateApplicationRequest architecture(ArchitectureEnum architecture) {
    this.architecture = architecture;
    return this;
  }

  /**
   * The CPU architecture of an application.
   * @return architecture
   */
  @javax.annotation.Nullable
  public ArchitectureEnum getArchitecture() {
    return architecture;
  }

  public void setArchitecture(ArchitectureEnum architecture) {
    this.architecture = architecture;
  }


  public CreateApplicationRequest imageConfiguration(CreateApplicationRequestImageConfiguration imageConfiguration) {
    this.imageConfiguration = imageConfiguration;
    return this;
  }

  /**
   * Get imageConfiguration
   * @return imageConfiguration
   */
  @javax.annotation.Nullable
  public CreateApplicationRequestImageConfiguration getImageConfiguration() {
    return imageConfiguration;
  }

  public void setImageConfiguration(CreateApplicationRequestImageConfiguration imageConfiguration) {
    this.imageConfiguration = imageConfiguration;
  }


  public CreateApplicationRequest workerTypeSpecifications(Map<String, WorkerTypeSpecificationInput> workerTypeSpecifications) {
    this.workerTypeSpecifications = workerTypeSpecifications;
    return this;
  }

  public CreateApplicationRequest putWorkerTypeSpecificationsItem(String key, WorkerTypeSpecificationInput workerTypeSpecificationsItem) {
    if (this.workerTypeSpecifications == null) {
      this.workerTypeSpecifications = new HashMap<>();
    }
    this.workerTypeSpecifications.put(key, workerTypeSpecificationsItem);
    return this;
  }

  /**
   * The key-value pairs that specify worker type to &lt;code&gt;WorkerTypeSpecificationInput&lt;/code&gt;. This parameter must contain all valid worker types for a Spark or Hive application. Valid worker types include &lt;code&gt;Driver&lt;/code&gt; and &lt;code&gt;Executor&lt;/code&gt; for Spark applications and &lt;code&gt;HiveDriver&lt;/code&gt; and &lt;code&gt;TezTask&lt;/code&gt; for Hive applications. You can either set image details in this parameter for each worker type, or in &lt;code&gt;imageConfiguration&lt;/code&gt; for all worker types.
   * @return workerTypeSpecifications
   */
  @javax.annotation.Nullable
  public Map<String, WorkerTypeSpecificationInput> getWorkerTypeSpecifications() {
    return workerTypeSpecifications;
  }

  public void setWorkerTypeSpecifications(Map<String, WorkerTypeSpecificationInput> workerTypeSpecifications) {
    this.workerTypeSpecifications = workerTypeSpecifications;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateApplicationRequest createApplicationRequest = (CreateApplicationRequest) o;
    return Objects.equals(this.name, createApplicationRequest.name) &&
        Objects.equals(this.releaseLabel, createApplicationRequest.releaseLabel) &&
        Objects.equals(this.type, createApplicationRequest.type) &&
        Objects.equals(this.clientToken, createApplicationRequest.clientToken) &&
        Objects.equals(this.initialCapacity, createApplicationRequest.initialCapacity) &&
        Objects.equals(this.maximumCapacity, createApplicationRequest.maximumCapacity) &&
        Objects.equals(this.tags, createApplicationRequest.tags) &&
        Objects.equals(this.autoStartConfiguration, createApplicationRequest.autoStartConfiguration) &&
        Objects.equals(this.autoStopConfiguration, createApplicationRequest.autoStopConfiguration) &&
        Objects.equals(this.networkConfiguration, createApplicationRequest.networkConfiguration) &&
        Objects.equals(this.architecture, createApplicationRequest.architecture) &&
        Objects.equals(this.imageConfiguration, createApplicationRequest.imageConfiguration) &&
        Objects.equals(this.workerTypeSpecifications, createApplicationRequest.workerTypeSpecifications);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, releaseLabel, type, clientToken, initialCapacity, maximumCapacity, tags, autoStartConfiguration, autoStopConfiguration, networkConfiguration, architecture, imageConfiguration, workerTypeSpecifications);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateApplicationRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    releaseLabel: ").append(toIndentedString(releaseLabel)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    initialCapacity: ").append(toIndentedString(initialCapacity)).append("\n");
    sb.append("    maximumCapacity: ").append(toIndentedString(maximumCapacity)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    autoStartConfiguration: ").append(toIndentedString(autoStartConfiguration)).append("\n");
    sb.append("    autoStopConfiguration: ").append(toIndentedString(autoStopConfiguration)).append("\n");
    sb.append("    networkConfiguration: ").append(toIndentedString(networkConfiguration)).append("\n");
    sb.append("    architecture: ").append(toIndentedString(architecture)).append("\n");
    sb.append("    imageConfiguration: ").append(toIndentedString(imageConfiguration)).append("\n");
    sb.append("    workerTypeSpecifications: ").append(toIndentedString(workerTypeSpecifications)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("releaseLabel");
    openapiFields.add("type");
    openapiFields.add("clientToken");
    openapiFields.add("initialCapacity");
    openapiFields.add("maximumCapacity");
    openapiFields.add("tags");
    openapiFields.add("autoStartConfiguration");
    openapiFields.add("autoStopConfiguration");
    openapiFields.add("networkConfiguration");
    openapiFields.add("architecture");
    openapiFields.add("imageConfiguration");
    openapiFields.add("workerTypeSpecifications");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("releaseLabel");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("clientToken");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateApplicationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateApplicationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateApplicationRequest is not found in the empty JSON string", CreateApplicationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateApplicationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateApplicationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateApplicationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("releaseLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `releaseLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("releaseLabel").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
      // validate the optional field `maximumCapacity`
      if (jsonObj.get("maximumCapacity") != null && !jsonObj.get("maximumCapacity").isJsonNull()) {
        CreateApplicationRequestMaximumCapacity.validateJsonElement(jsonObj.get("maximumCapacity"));
      }
      // validate the optional field `autoStartConfiguration`
      if (jsonObj.get("autoStartConfiguration") != null && !jsonObj.get("autoStartConfiguration").isJsonNull()) {
        CreateApplicationRequestAutoStartConfiguration.validateJsonElement(jsonObj.get("autoStartConfiguration"));
      }
      // validate the optional field `autoStopConfiguration`
      if (jsonObj.get("autoStopConfiguration") != null && !jsonObj.get("autoStopConfiguration").isJsonNull()) {
        CreateApplicationRequestAutoStopConfiguration.validateJsonElement(jsonObj.get("autoStopConfiguration"));
      }
      // validate the optional field `networkConfiguration`
      if (jsonObj.get("networkConfiguration") != null && !jsonObj.get("networkConfiguration").isJsonNull()) {
        CreateApplicationRequestNetworkConfiguration.validateJsonElement(jsonObj.get("networkConfiguration"));
      }
      if ((jsonObj.get("architecture") != null && !jsonObj.get("architecture").isJsonNull()) && !jsonObj.get("architecture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `architecture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("architecture").toString()));
      }
      // validate the optional field `architecture`
      if (jsonObj.get("architecture") != null && !jsonObj.get("architecture").isJsonNull()) {
        ArchitectureEnum.validateJsonElement(jsonObj.get("architecture"));
      }
      // validate the optional field `imageConfiguration`
      if (jsonObj.get("imageConfiguration") != null && !jsonObj.get("imageConfiguration").isJsonNull()) {
        CreateApplicationRequestImageConfiguration.validateJsonElement(jsonObj.get("imageConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateApplicationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateApplicationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateApplicationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateApplicationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateApplicationRequest>() {
           @Override
           public void write(JsonWriter out, CreateApplicationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateApplicationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateApplicationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateApplicationRequest
   * @throws IOException if the JSON string is invalid with respect to CreateApplicationRequest
   */
  public static CreateApplicationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateApplicationRequest.class);
  }

  /**
   * Convert an instance of CreateApplicationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

