/*
 * EMR Serverless
 * <p>Amazon EMR Serverless is a new deployment option for Amazon EMR. Amazon EMR Serverless provides a serverless runtime environment that simplifies running analytics applications using the latest open source frameworks such as Apache Spark and Apache Hive. With Amazon EMR Serverless, you donâ€™t have to configure, optimize, secure, or operate clusters to run applications with these frameworks.</p> <p>The API reference to Amazon EMR Serverless is <code>emr-serverless</code>. The <code>emr-serverless</code> prefix is used in the following scenarios: </p> <ul> <li> <p>It is the prefix in the CLI commands for Amazon EMR Serverless. For example, <code>aws emr-serverless start-job-run</code>.</p> </li> <li> <p>It is the prefix before IAM policy actions for Amazon EMR Serverless. For example, <code>\"Action\": [\"emr-serverless:StartJobRun\"]</code>. For more information, see <a href=\"https://docs.aws.amazon.com/emr/latest/EMR-Serverless-UserGuide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-actions\">Policy actions for Amazon EMR Serverless</a>.</p> </li> <li> <p>It is the prefix used in Amazon EMR Serverless service endpoints. For example, <code>emr-serverless.us-east-2.amazonaws.com</code>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2021-07-13
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.StartJobRunRequestConfigurationOverrides;
import org.openapitools.client.model.StartJobRunRequestJobDriver;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartJobRunRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:05.299532-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartJobRunRequest {
  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_EXECUTION_ROLE_ARN = "executionRoleArn";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ROLE_ARN)
  private String executionRoleArn;

  public static final String SERIALIZED_NAME_JOB_DRIVER = "jobDriver";
  @SerializedName(SERIALIZED_NAME_JOB_DRIVER)
  private StartJobRunRequestJobDriver jobDriver;

  public static final String SERIALIZED_NAME_CONFIGURATION_OVERRIDES = "configurationOverrides";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_OVERRIDES)
  private StartJobRunRequestConfigurationOverrides configurationOverrides;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_EXECUTION_TIMEOUT_MINUTES = "executionTimeoutMinutes";
  @SerializedName(SERIALIZED_NAME_EXECUTION_TIMEOUT_MINUTES)
  private Integer executionTimeoutMinutes;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public StartJobRunRequest() {
  }

  public StartJobRunRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * The client idempotency token of the job run to start. Its value must be unique for each request.
   * @return clientToken
   */
  @javax.annotation.Nonnull
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public StartJobRunRequest executionRoleArn(String executionRoleArn) {
    this.executionRoleArn = executionRoleArn;
    return this;
  }

  /**
   * The execution role ARN for the job run.
   * @return executionRoleArn
   */
  @javax.annotation.Nonnull
  public String getExecutionRoleArn() {
    return executionRoleArn;
  }

  public void setExecutionRoleArn(String executionRoleArn) {
    this.executionRoleArn = executionRoleArn;
  }


  public StartJobRunRequest jobDriver(StartJobRunRequestJobDriver jobDriver) {
    this.jobDriver = jobDriver;
    return this;
  }

  /**
   * Get jobDriver
   * @return jobDriver
   */
  @javax.annotation.Nullable
  public StartJobRunRequestJobDriver getJobDriver() {
    return jobDriver;
  }

  public void setJobDriver(StartJobRunRequestJobDriver jobDriver) {
    this.jobDriver = jobDriver;
  }


  public StartJobRunRequest configurationOverrides(StartJobRunRequestConfigurationOverrides configurationOverrides) {
    this.configurationOverrides = configurationOverrides;
    return this;
  }

  /**
   * Get configurationOverrides
   * @return configurationOverrides
   */
  @javax.annotation.Nullable
  public StartJobRunRequestConfigurationOverrides getConfigurationOverrides() {
    return configurationOverrides;
  }

  public void setConfigurationOverrides(StartJobRunRequestConfigurationOverrides configurationOverrides) {
    this.configurationOverrides = configurationOverrides;
  }


  public StartJobRunRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public StartJobRunRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The tags assigned to the job run.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public StartJobRunRequest executionTimeoutMinutes(Integer executionTimeoutMinutes) {
    this.executionTimeoutMinutes = executionTimeoutMinutes;
    return this;
  }

  /**
   * The maximum duration for the job run to run. If the job run runs beyond this duration, it will be automatically cancelled.
   * minimum: 0
   * maximum: 1000000
   * @return executionTimeoutMinutes
   */
  @javax.annotation.Nullable
  public Integer getExecutionTimeoutMinutes() {
    return executionTimeoutMinutes;
  }

  public void setExecutionTimeoutMinutes(Integer executionTimeoutMinutes) {
    this.executionTimeoutMinutes = executionTimeoutMinutes;
  }


  public StartJobRunRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The optional job run name. This doesn&#39;t have to be unique.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartJobRunRequest startJobRunRequest = (StartJobRunRequest) o;
    return Objects.equals(this.clientToken, startJobRunRequest.clientToken) &&
        Objects.equals(this.executionRoleArn, startJobRunRequest.executionRoleArn) &&
        Objects.equals(this.jobDriver, startJobRunRequest.jobDriver) &&
        Objects.equals(this.configurationOverrides, startJobRunRequest.configurationOverrides) &&
        Objects.equals(this.tags, startJobRunRequest.tags) &&
        Objects.equals(this.executionTimeoutMinutes, startJobRunRequest.executionTimeoutMinutes) &&
        Objects.equals(this.name, startJobRunRequest.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientToken, executionRoleArn, jobDriver, configurationOverrides, tags, executionTimeoutMinutes, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartJobRunRequest {\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    executionRoleArn: ").append(toIndentedString(executionRoleArn)).append("\n");
    sb.append("    jobDriver: ").append(toIndentedString(jobDriver)).append("\n");
    sb.append("    configurationOverrides: ").append(toIndentedString(configurationOverrides)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    executionTimeoutMinutes: ").append(toIndentedString(executionTimeoutMinutes)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientToken");
    openapiFields.add("executionRoleArn");
    openapiFields.add("jobDriver");
    openapiFields.add("configurationOverrides");
    openapiFields.add("tags");
    openapiFields.add("executionTimeoutMinutes");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("clientToken");
    openapiRequiredFields.add("executionRoleArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartJobRunRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartJobRunRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartJobRunRequest is not found in the empty JSON string", StartJobRunRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartJobRunRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartJobRunRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartJobRunRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
      if (!jsonObj.get("executionRoleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executionRoleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executionRoleArn").toString()));
      }
      // validate the optional field `jobDriver`
      if (jsonObj.get("jobDriver") != null && !jsonObj.get("jobDriver").isJsonNull()) {
        StartJobRunRequestJobDriver.validateJsonElement(jsonObj.get("jobDriver"));
      }
      // validate the optional field `configurationOverrides`
      if (jsonObj.get("configurationOverrides") != null && !jsonObj.get("configurationOverrides").isJsonNull()) {
        StartJobRunRequestConfigurationOverrides.validateJsonElement(jsonObj.get("configurationOverrides"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartJobRunRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartJobRunRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartJobRunRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartJobRunRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartJobRunRequest>() {
           @Override
           public void write(JsonWriter out, StartJobRunRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartJobRunRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartJobRunRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartJobRunRequest
   * @throws IOException if the JSON string is invalid with respect to StartJobRunRequest
   */
  public static StartJobRunRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartJobRunRequest.class);
  }

  /**
   * Convert an instance of StartJobRunRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

