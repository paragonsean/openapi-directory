# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_run_state import JobRunState
from openapi_server import util


class JobRunSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_id: str=None, id: str=None, name: str=None, arn: str=None, created_by: str=None, created_at: datetime=None, updated_at: datetime=None, execution_role: str=None, state: JobRunState=None, state_details: str=None, release_label: str=None, type: str=None):
        """JobRunSummary - a model defined in OpenAPI

        :param application_id: The application_id of this JobRunSummary.
        :param id: The id of this JobRunSummary.
        :param name: The name of this JobRunSummary.
        :param arn: The arn of this JobRunSummary.
        :param created_by: The created_by of this JobRunSummary.
        :param created_at: The created_at of this JobRunSummary.
        :param updated_at: The updated_at of this JobRunSummary.
        :param execution_role: The execution_role of this JobRunSummary.
        :param state: The state of this JobRunSummary.
        :param state_details: The state_details of this JobRunSummary.
        :param release_label: The release_label of this JobRunSummary.
        :param type: The type of this JobRunSummary.
        """
        self.openapi_types = {
            'application_id': str,
            'id': str,
            'name': str,
            'arn': str,
            'created_by': str,
            'created_at': datetime,
            'updated_at': datetime,
            'execution_role': str,
            'state': JobRunState,
            'state_details': str,
            'release_label': str,
            'type': str
        }

        self.attribute_map = {
            'application_id': 'applicationId',
            'id': 'id',
            'name': 'name',
            'arn': 'arn',
            'created_by': 'createdBy',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt',
            'execution_role': 'executionRole',
            'state': 'state',
            'state_details': 'stateDetails',
            'release_label': 'releaseLabel',
            'type': 'type'
        }

        self._application_id = application_id
        self._id = id
        self._name = name
        self._arn = arn
        self._created_by = created_by
        self._created_at = created_at
        self._updated_at = updated_at
        self._execution_role = execution_role
        self._state = state
        self._state_details = state_details
        self._release_label = release_label
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobRunSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobRunSummary of this JobRunSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_id(self):
        """Gets the application_id of this JobRunSummary.


        :return: The application_id of this JobRunSummary.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this JobRunSummary.


        :param application_id: The application_id of this JobRunSummary.
        :type application_id: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")

        self._application_id = application_id

    @property
    def id(self):
        """Gets the id of this JobRunSummary.


        :return: The id of this JobRunSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobRunSummary.


        :param id: The id of this JobRunSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this JobRunSummary.


        :return: The name of this JobRunSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JobRunSummary.


        :param name: The name of this JobRunSummary.
        :type name: str
        """

        self._name = name

    @property
    def arn(self):
        """Gets the arn of this JobRunSummary.


        :return: The arn of this JobRunSummary.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this JobRunSummary.


        :param arn: The arn of this JobRunSummary.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def created_by(self):
        """Gets the created_by of this JobRunSummary.


        :return: The created_by of this JobRunSummary.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this JobRunSummary.


        :param created_by: The created_by of this JobRunSummary.
        :type created_by: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")

        self._created_by = created_by

    @property
    def created_at(self):
        """Gets the created_at of this JobRunSummary.


        :return: The created_at of this JobRunSummary.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this JobRunSummary.


        :param created_at: The created_at of this JobRunSummary.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this JobRunSummary.


        :return: The updated_at of this JobRunSummary.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this JobRunSummary.


        :param updated_at: The updated_at of this JobRunSummary.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def execution_role(self):
        """Gets the execution_role of this JobRunSummary.


        :return: The execution_role of this JobRunSummary.
        :rtype: str
        """
        return self._execution_role

    @execution_role.setter
    def execution_role(self, execution_role):
        """Sets the execution_role of this JobRunSummary.


        :param execution_role: The execution_role of this JobRunSummary.
        :type execution_role: str
        """
        if execution_role is None:
            raise ValueError("Invalid value for `execution_role`, must not be `None`")

        self._execution_role = execution_role

    @property
    def state(self):
        """Gets the state of this JobRunSummary.


        :return: The state of this JobRunSummary.
        :rtype: JobRunState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this JobRunSummary.


        :param state: The state of this JobRunSummary.
        :type state: JobRunState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def state_details(self):
        """Gets the state_details of this JobRunSummary.


        :return: The state_details of this JobRunSummary.
        :rtype: str
        """
        return self._state_details

    @state_details.setter
    def state_details(self, state_details):
        """Sets the state_details of this JobRunSummary.


        :param state_details: The state_details of this JobRunSummary.
        :type state_details: str
        """
        if state_details is None:
            raise ValueError("Invalid value for `state_details`, must not be `None`")

        self._state_details = state_details

    @property
    def release_label(self):
        """Gets the release_label of this JobRunSummary.


        :return: The release_label of this JobRunSummary.
        :rtype: str
        """
        return self._release_label

    @release_label.setter
    def release_label(self, release_label):
        """Sets the release_label of this JobRunSummary.


        :param release_label: The release_label of this JobRunSummary.
        :type release_label: str
        """
        if release_label is None:
            raise ValueError("Invalid value for `release_label`, must not be `None`")

        self._release_label = release_label

    @property
    def type(self):
        """Gets the type of this JobRunSummary.


        :return: The type of this JobRunSummary.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JobRunSummary.


        :param type: The type of this JobRunSummary.
        :type type: str
        """

        self._type = type
