# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.initial_capacity_config_worker_configuration import InitialCapacityConfigWorkerConfiguration
from openapi_server import util


class InitialCapacityConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, worker_count: int=None, worker_configuration: InitialCapacityConfigWorkerConfiguration=None):
        """InitialCapacityConfig - a model defined in OpenAPI

        :param worker_count: The worker_count of this InitialCapacityConfig.
        :param worker_configuration: The worker_configuration of this InitialCapacityConfig.
        """
        self.openapi_types = {
            'worker_count': int,
            'worker_configuration': InitialCapacityConfigWorkerConfiguration
        }

        self.attribute_map = {
            'worker_count': 'workerCount',
            'worker_configuration': 'workerConfiguration'
        }

        self._worker_count = worker_count
        self._worker_configuration = worker_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InitialCapacityConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InitialCapacityConfig of this InitialCapacityConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def worker_count(self):
        """Gets the worker_count of this InitialCapacityConfig.


        :return: The worker_count of this InitialCapacityConfig.
        :rtype: int
        """
        return self._worker_count

    @worker_count.setter
    def worker_count(self, worker_count):
        """Sets the worker_count of this InitialCapacityConfig.


        :param worker_count: The worker_count of this InitialCapacityConfig.
        :type worker_count: int
        """
        if worker_count is None:
            raise ValueError("Invalid value for `worker_count`, must not be `None`")

        self._worker_count = worker_count

    @property
    def worker_configuration(self):
        """Gets the worker_configuration of this InitialCapacityConfig.


        :return: The worker_configuration of this InitialCapacityConfig.
        :rtype: InitialCapacityConfigWorkerConfiguration
        """
        return self._worker_configuration

    @worker_configuration.setter
    def worker_configuration(self, worker_configuration):
        """Sets the worker_configuration of this InitialCapacityConfig.


        :param worker_configuration: The worker_configuration of this InitialCapacityConfig.
        :type worker_configuration: InitialCapacityConfigWorkerConfiguration
        """

        self._worker_configuration = worker_configuration
