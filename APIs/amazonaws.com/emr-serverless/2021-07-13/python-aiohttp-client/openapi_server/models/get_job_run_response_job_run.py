# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_run_billed_resource_utilization import JobRunBilledResourceUtilization
from openapi_server.models.job_run_configuration_overrides import JobRunConfigurationOverrides
from openapi_server.models.job_run_job_driver import JobRunJobDriver
from openapi_server.models.job_run_state import JobRunState
from openapi_server.models.job_run_total_resource_utilization import JobRunTotalResourceUtilization
from openapi_server.models.network_configuration import NetworkConfiguration
from openapi_server import util


class GetJobRunResponseJobRun(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_id: str=None, job_run_id: str=None, name: str=None, arn: str=None, created_by: str=None, created_at: datetime=None, updated_at: datetime=None, execution_role: str=None, state: JobRunState=None, state_details: str=None, release_label: str=None, configuration_overrides: JobRunConfigurationOverrides=None, job_driver: JobRunJobDriver=None, tags: Dict=None, total_resource_utilization: JobRunTotalResourceUtilization=None, network_configuration: NetworkConfiguration=None, total_execution_duration_seconds: int=None, execution_timeout_minutes: int=None, billed_resource_utilization: JobRunBilledResourceUtilization=None):
        """GetJobRunResponseJobRun - a model defined in OpenAPI

        :param application_id: The application_id of this GetJobRunResponseJobRun.
        :param job_run_id: The job_run_id of this GetJobRunResponseJobRun.
        :param name: The name of this GetJobRunResponseJobRun.
        :param arn: The arn of this GetJobRunResponseJobRun.
        :param created_by: The created_by of this GetJobRunResponseJobRun.
        :param created_at: The created_at of this GetJobRunResponseJobRun.
        :param updated_at: The updated_at of this GetJobRunResponseJobRun.
        :param execution_role: The execution_role of this GetJobRunResponseJobRun.
        :param state: The state of this GetJobRunResponseJobRun.
        :param state_details: The state_details of this GetJobRunResponseJobRun.
        :param release_label: The release_label of this GetJobRunResponseJobRun.
        :param configuration_overrides: The configuration_overrides of this GetJobRunResponseJobRun.
        :param job_driver: The job_driver of this GetJobRunResponseJobRun.
        :param tags: The tags of this GetJobRunResponseJobRun.
        :param total_resource_utilization: The total_resource_utilization of this GetJobRunResponseJobRun.
        :param network_configuration: The network_configuration of this GetJobRunResponseJobRun.
        :param total_execution_duration_seconds: The total_execution_duration_seconds of this GetJobRunResponseJobRun.
        :param execution_timeout_minutes: The execution_timeout_minutes of this GetJobRunResponseJobRun.
        :param billed_resource_utilization: The billed_resource_utilization of this GetJobRunResponseJobRun.
        """
        self.openapi_types = {
            'application_id': str,
            'job_run_id': str,
            'name': str,
            'arn': str,
            'created_by': str,
            'created_at': datetime,
            'updated_at': datetime,
            'execution_role': str,
            'state': JobRunState,
            'state_details': str,
            'release_label': str,
            'configuration_overrides': JobRunConfigurationOverrides,
            'job_driver': JobRunJobDriver,
            'tags': Dict,
            'total_resource_utilization': JobRunTotalResourceUtilization,
            'network_configuration': NetworkConfiguration,
            'total_execution_duration_seconds': int,
            'execution_timeout_minutes': int,
            'billed_resource_utilization': JobRunBilledResourceUtilization
        }

        self.attribute_map = {
            'application_id': 'applicationId',
            'job_run_id': 'jobRunId',
            'name': 'name',
            'arn': 'arn',
            'created_by': 'createdBy',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt',
            'execution_role': 'executionRole',
            'state': 'state',
            'state_details': 'stateDetails',
            'release_label': 'releaseLabel',
            'configuration_overrides': 'configurationOverrides',
            'job_driver': 'jobDriver',
            'tags': 'tags',
            'total_resource_utilization': 'totalResourceUtilization',
            'network_configuration': 'networkConfiguration',
            'total_execution_duration_seconds': 'totalExecutionDurationSeconds',
            'execution_timeout_minutes': 'executionTimeoutMinutes',
            'billed_resource_utilization': 'billedResourceUtilization'
        }

        self._application_id = application_id
        self._job_run_id = job_run_id
        self._name = name
        self._arn = arn
        self._created_by = created_by
        self._created_at = created_at
        self._updated_at = updated_at
        self._execution_role = execution_role
        self._state = state
        self._state_details = state_details
        self._release_label = release_label
        self._configuration_overrides = configuration_overrides
        self._job_driver = job_driver
        self._tags = tags
        self._total_resource_utilization = total_resource_utilization
        self._network_configuration = network_configuration
        self._total_execution_duration_seconds = total_execution_duration_seconds
        self._execution_timeout_minutes = execution_timeout_minutes
        self._billed_resource_utilization = billed_resource_utilization

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetJobRunResponseJobRun':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetJobRunResponse_jobRun of this GetJobRunResponseJobRun.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_id(self):
        """Gets the application_id of this GetJobRunResponseJobRun.


        :return: The application_id of this GetJobRunResponseJobRun.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this GetJobRunResponseJobRun.


        :param application_id: The application_id of this GetJobRunResponseJobRun.
        :type application_id: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")

        self._application_id = application_id

    @property
    def job_run_id(self):
        """Gets the job_run_id of this GetJobRunResponseJobRun.


        :return: The job_run_id of this GetJobRunResponseJobRun.
        :rtype: str
        """
        return self._job_run_id

    @job_run_id.setter
    def job_run_id(self, job_run_id):
        """Sets the job_run_id of this GetJobRunResponseJobRun.


        :param job_run_id: The job_run_id of this GetJobRunResponseJobRun.
        :type job_run_id: str
        """
        if job_run_id is None:
            raise ValueError("Invalid value for `job_run_id`, must not be `None`")

        self._job_run_id = job_run_id

    @property
    def name(self):
        """Gets the name of this GetJobRunResponseJobRun.


        :return: The name of this GetJobRunResponseJobRun.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetJobRunResponseJobRun.


        :param name: The name of this GetJobRunResponseJobRun.
        :type name: str
        """

        self._name = name

    @property
    def arn(self):
        """Gets the arn of this GetJobRunResponseJobRun.


        :return: The arn of this GetJobRunResponseJobRun.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this GetJobRunResponseJobRun.


        :param arn: The arn of this GetJobRunResponseJobRun.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def created_by(self):
        """Gets the created_by of this GetJobRunResponseJobRun.


        :return: The created_by of this GetJobRunResponseJobRun.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this GetJobRunResponseJobRun.


        :param created_by: The created_by of this GetJobRunResponseJobRun.
        :type created_by: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")

        self._created_by = created_by

    @property
    def created_at(self):
        """Gets the created_at of this GetJobRunResponseJobRun.


        :return: The created_at of this GetJobRunResponseJobRun.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetJobRunResponseJobRun.


        :param created_at: The created_at of this GetJobRunResponseJobRun.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this GetJobRunResponseJobRun.


        :return: The updated_at of this GetJobRunResponseJobRun.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this GetJobRunResponseJobRun.


        :param updated_at: The updated_at of this GetJobRunResponseJobRun.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def execution_role(self):
        """Gets the execution_role of this GetJobRunResponseJobRun.


        :return: The execution_role of this GetJobRunResponseJobRun.
        :rtype: str
        """
        return self._execution_role

    @execution_role.setter
    def execution_role(self, execution_role):
        """Sets the execution_role of this GetJobRunResponseJobRun.


        :param execution_role: The execution_role of this GetJobRunResponseJobRun.
        :type execution_role: str
        """
        if execution_role is None:
            raise ValueError("Invalid value for `execution_role`, must not be `None`")

        self._execution_role = execution_role

    @property
    def state(self):
        """Gets the state of this GetJobRunResponseJobRun.


        :return: The state of this GetJobRunResponseJobRun.
        :rtype: JobRunState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GetJobRunResponseJobRun.


        :param state: The state of this GetJobRunResponseJobRun.
        :type state: JobRunState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def state_details(self):
        """Gets the state_details of this GetJobRunResponseJobRun.


        :return: The state_details of this GetJobRunResponseJobRun.
        :rtype: str
        """
        return self._state_details

    @state_details.setter
    def state_details(self, state_details):
        """Sets the state_details of this GetJobRunResponseJobRun.


        :param state_details: The state_details of this GetJobRunResponseJobRun.
        :type state_details: str
        """
        if state_details is None:
            raise ValueError("Invalid value for `state_details`, must not be `None`")

        self._state_details = state_details

    @property
    def release_label(self):
        """Gets the release_label of this GetJobRunResponseJobRun.


        :return: The release_label of this GetJobRunResponseJobRun.
        :rtype: str
        """
        return self._release_label

    @release_label.setter
    def release_label(self, release_label):
        """Sets the release_label of this GetJobRunResponseJobRun.


        :param release_label: The release_label of this GetJobRunResponseJobRun.
        :type release_label: str
        """
        if release_label is None:
            raise ValueError("Invalid value for `release_label`, must not be `None`")

        self._release_label = release_label

    @property
    def configuration_overrides(self):
        """Gets the configuration_overrides of this GetJobRunResponseJobRun.


        :return: The configuration_overrides of this GetJobRunResponseJobRun.
        :rtype: JobRunConfigurationOverrides
        """
        return self._configuration_overrides

    @configuration_overrides.setter
    def configuration_overrides(self, configuration_overrides):
        """Sets the configuration_overrides of this GetJobRunResponseJobRun.


        :param configuration_overrides: The configuration_overrides of this GetJobRunResponseJobRun.
        :type configuration_overrides: JobRunConfigurationOverrides
        """

        self._configuration_overrides = configuration_overrides

    @property
    def job_driver(self):
        """Gets the job_driver of this GetJobRunResponseJobRun.


        :return: The job_driver of this GetJobRunResponseJobRun.
        :rtype: JobRunJobDriver
        """
        return self._job_driver

    @job_driver.setter
    def job_driver(self, job_driver):
        """Sets the job_driver of this GetJobRunResponseJobRun.


        :param job_driver: The job_driver of this GetJobRunResponseJobRun.
        :type job_driver: JobRunJobDriver
        """
        if job_driver is None:
            raise ValueError("Invalid value for `job_driver`, must not be `None`")

        self._job_driver = job_driver

    @property
    def tags(self):
        """Gets the tags of this GetJobRunResponseJobRun.


        :return: The tags of this GetJobRunResponseJobRun.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this GetJobRunResponseJobRun.


        :param tags: The tags of this GetJobRunResponseJobRun.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def total_resource_utilization(self):
        """Gets the total_resource_utilization of this GetJobRunResponseJobRun.


        :return: The total_resource_utilization of this GetJobRunResponseJobRun.
        :rtype: JobRunTotalResourceUtilization
        """
        return self._total_resource_utilization

    @total_resource_utilization.setter
    def total_resource_utilization(self, total_resource_utilization):
        """Sets the total_resource_utilization of this GetJobRunResponseJobRun.


        :param total_resource_utilization: The total_resource_utilization of this GetJobRunResponseJobRun.
        :type total_resource_utilization: JobRunTotalResourceUtilization
        """

        self._total_resource_utilization = total_resource_utilization

    @property
    def network_configuration(self):
        """Gets the network_configuration of this GetJobRunResponseJobRun.


        :return: The network_configuration of this GetJobRunResponseJobRun.
        :rtype: NetworkConfiguration
        """
        return self._network_configuration

    @network_configuration.setter
    def network_configuration(self, network_configuration):
        """Sets the network_configuration of this GetJobRunResponseJobRun.


        :param network_configuration: The network_configuration of this GetJobRunResponseJobRun.
        :type network_configuration: NetworkConfiguration
        """

        self._network_configuration = network_configuration

    @property
    def total_execution_duration_seconds(self):
        """Gets the total_execution_duration_seconds of this GetJobRunResponseJobRun.


        :return: The total_execution_duration_seconds of this GetJobRunResponseJobRun.
        :rtype: int
        """
        return self._total_execution_duration_seconds

    @total_execution_duration_seconds.setter
    def total_execution_duration_seconds(self, total_execution_duration_seconds):
        """Sets the total_execution_duration_seconds of this GetJobRunResponseJobRun.


        :param total_execution_duration_seconds: The total_execution_duration_seconds of this GetJobRunResponseJobRun.
        :type total_execution_duration_seconds: int
        """

        self._total_execution_duration_seconds = total_execution_duration_seconds

    @property
    def execution_timeout_minutes(self):
        """Gets the execution_timeout_minutes of this GetJobRunResponseJobRun.


        :return: The execution_timeout_minutes of this GetJobRunResponseJobRun.
        :rtype: int
        """
        return self._execution_timeout_minutes

    @execution_timeout_minutes.setter
    def execution_timeout_minutes(self, execution_timeout_minutes):
        """Sets the execution_timeout_minutes of this GetJobRunResponseJobRun.


        :param execution_timeout_minutes: The execution_timeout_minutes of this GetJobRunResponseJobRun.
        :type execution_timeout_minutes: int
        """

        self._execution_timeout_minutes = execution_timeout_minutes

    @property
    def billed_resource_utilization(self):
        """Gets the billed_resource_utilization of this GetJobRunResponseJobRun.


        :return: The billed_resource_utilization of this GetJobRunResponseJobRun.
        :rtype: JobRunBilledResourceUtilization
        """
        return self._billed_resource_utilization

    @billed_resource_utilization.setter
    def billed_resource_utilization(self, billed_resource_utilization):
        """Sets the billed_resource_utilization of this GetJobRunResponseJobRun.


        :param billed_resource_utilization: The billed_resource_utilization of this GetJobRunResponseJobRun.
        :type billed_resource_utilization: JobRunBilledResourceUtilization
        """

        self._billed_resource_utilization = billed_resource_utilization
