# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_job_run_request_configuration_overrides import StartJobRunRequestConfigurationOverrides
from openapi_server.models.start_job_run_request_job_driver import StartJobRunRequestJobDriver
import re
from openapi_server import util


class StartJobRunRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, execution_role_arn: str=None, job_driver: StartJobRunRequestJobDriver=None, configuration_overrides: StartJobRunRequestConfigurationOverrides=None, tags: Dict[str, str]=None, execution_timeout_minutes: int=None, name: str=None):
        """StartJobRunRequest - a model defined in OpenAPI

        :param client_token: The client_token of this StartJobRunRequest.
        :param execution_role_arn: The execution_role_arn of this StartJobRunRequest.
        :param job_driver: The job_driver of this StartJobRunRequest.
        :param configuration_overrides: The configuration_overrides of this StartJobRunRequest.
        :param tags: The tags of this StartJobRunRequest.
        :param execution_timeout_minutes: The execution_timeout_minutes of this StartJobRunRequest.
        :param name: The name of this StartJobRunRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'execution_role_arn': str,
            'job_driver': StartJobRunRequestJobDriver,
            'configuration_overrides': StartJobRunRequestConfigurationOverrides,
            'tags': Dict[str, str],
            'execution_timeout_minutes': int,
            'name': str
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'execution_role_arn': 'executionRoleArn',
            'job_driver': 'jobDriver',
            'configuration_overrides': 'configurationOverrides',
            'tags': 'tags',
            'execution_timeout_minutes': 'executionTimeoutMinutes',
            'name': 'name'
        }

        self._client_token = client_token
        self._execution_role_arn = execution_role_arn
        self._job_driver = job_driver
        self._configuration_overrides = configuration_overrides
        self._tags = tags
        self._execution_timeout_minutes = execution_timeout_minutes
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartJobRunRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartJobRun_request of this StartJobRunRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this StartJobRunRequest.

        The client idempotency token of the job run to start. Its value must be unique for each request.

        :return: The client_token of this StartJobRunRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this StartJobRunRequest.

        The client idempotency token of the job run to start. Its value must be unique for each request.

        :param client_token: The client_token of this StartJobRunRequest.
        :type client_token: str
        """
        if client_token is None:
            raise ValueError("Invalid value for `client_token`, must not be `None`")
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'[A-Za-z0-9._-]+', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/[A-Za-z0-9._-]+/`")

        self._client_token = client_token

    @property
    def execution_role_arn(self):
        """Gets the execution_role_arn of this StartJobRunRequest.

        The execution role ARN for the job run.

        :return: The execution_role_arn of this StartJobRunRequest.
        :rtype: str
        """
        return self._execution_role_arn

    @execution_role_arn.setter
    def execution_role_arn(self, execution_role_arn):
        """Sets the execution_role_arn of this StartJobRunRequest.

        The execution role ARN for the job run.

        :param execution_role_arn: The execution_role_arn of this StartJobRunRequest.
        :type execution_role_arn: str
        """
        if execution_role_arn is None:
            raise ValueError("Invalid value for `execution_role_arn`, must not be `None`")
        if execution_role_arn is not None and len(execution_role_arn) > 2048:
            raise ValueError("Invalid value for `execution_role_arn`, length must be less than or equal to `2048`")
        if execution_role_arn is not None and len(execution_role_arn) < 20:
            raise ValueError("Invalid value for `execution_role_arn`, length must be greater than or equal to `20`")
        if execution_role_arn is not None and not re.search(r'arn:(aws[a-zA-Z0-9-]*):iam::(\d{12})?:(role((\u002F)|(\u002F[\u0021-\u007F]+\u002F))[\w+=,.@-]+)', execution_role_arn):
            raise ValueError("Invalid value for `execution_role_arn`, must be a follow pattern or equal to `/arn:(aws[a-zA-Z0-9-]*):iam::(\d{12})?:(role((\u002F)|(\u002F[\u0021-\u007F]+\u002F))[\w+=,.@-]+)/`")

        self._execution_role_arn = execution_role_arn

    @property
    def job_driver(self):
        """Gets the job_driver of this StartJobRunRequest.


        :return: The job_driver of this StartJobRunRequest.
        :rtype: StartJobRunRequestJobDriver
        """
        return self._job_driver

    @job_driver.setter
    def job_driver(self, job_driver):
        """Sets the job_driver of this StartJobRunRequest.


        :param job_driver: The job_driver of this StartJobRunRequest.
        :type job_driver: StartJobRunRequestJobDriver
        """

        self._job_driver = job_driver

    @property
    def configuration_overrides(self):
        """Gets the configuration_overrides of this StartJobRunRequest.


        :return: The configuration_overrides of this StartJobRunRequest.
        :rtype: StartJobRunRequestConfigurationOverrides
        """
        return self._configuration_overrides

    @configuration_overrides.setter
    def configuration_overrides(self, configuration_overrides):
        """Sets the configuration_overrides of this StartJobRunRequest.


        :param configuration_overrides: The configuration_overrides of this StartJobRunRequest.
        :type configuration_overrides: StartJobRunRequestConfigurationOverrides
        """

        self._configuration_overrides = configuration_overrides

    @property
    def tags(self):
        """Gets the tags of this StartJobRunRequest.

        The tags assigned to the job run.

        :return: The tags of this StartJobRunRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this StartJobRunRequest.

        The tags assigned to the job run.

        :param tags: The tags of this StartJobRunRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags

    @property
    def execution_timeout_minutes(self):
        """Gets the execution_timeout_minutes of this StartJobRunRequest.

        The maximum duration for the job run to run. If the job run runs beyond this duration, it will be automatically cancelled.

        :return: The execution_timeout_minutes of this StartJobRunRequest.
        :rtype: int
        """
        return self._execution_timeout_minutes

    @execution_timeout_minutes.setter
    def execution_timeout_minutes(self, execution_timeout_minutes):
        """Sets the execution_timeout_minutes of this StartJobRunRequest.

        The maximum duration for the job run to run. If the job run runs beyond this duration, it will be automatically cancelled.

        :param execution_timeout_minutes: The execution_timeout_minutes of this StartJobRunRequest.
        :type execution_timeout_minutes: int
        """
        if execution_timeout_minutes is not None and execution_timeout_minutes > 1000000:
            raise ValueError("Invalid value for `execution_timeout_minutes`, must be a value less than or equal to `1000000`")
        if execution_timeout_minutes is not None and execution_timeout_minutes < 0:
            raise ValueError("Invalid value for `execution_timeout_minutes`, must be a value greater than or equal to `0`")

        self._execution_timeout_minutes = execution_timeout_minutes

    @property
    def name(self):
        """Gets the name of this StartJobRunRequest.

        The optional job run name. This doesn't have to be unique.

        :return: The name of this StartJobRunRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StartJobRunRequest.

        The optional job run name. This doesn't have to be unique.

        :param name: The name of this StartJobRunRequest.
        :type name: str
        """
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'.*\S.*', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/.*\S.*/`")

        self._name = name
