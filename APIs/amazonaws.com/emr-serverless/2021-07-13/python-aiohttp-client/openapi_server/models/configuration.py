# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Configuration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, classification: str=None, properties: object=None, configurations: List=None):
        """Configuration - a model defined in OpenAPI

        :param classification: The classification of this Configuration.
        :param properties: The properties of this Configuration.
        :param configurations: The configurations of this Configuration.
        """
        self.openapi_types = {
            'classification': str,
            'properties': object,
            'configurations': List
        }

        self.attribute_map = {
            'classification': 'classification',
            'properties': 'properties',
            'configurations': 'configurations'
        }

        self._classification = classification
        self._properties = properties
        self._configurations = configurations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Configuration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Configuration of this Configuration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def classification(self):
        """Gets the classification of this Configuration.


        :return: The classification of this Configuration.
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this Configuration.


        :param classification: The classification of this Configuration.
        :type classification: str
        """
        if classification is None:
            raise ValueError("Invalid value for `classification`, must not be `None`")

        self._classification = classification

    @property
    def properties(self):
        """Gets the properties of this Configuration.

        A set of properties specified within a configuration classification.

        :return: The properties of this Configuration.
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Configuration.

        A set of properties specified within a configuration classification.

        :param properties: The properties of this Configuration.
        :type properties: object
        """

        self._properties = properties

    @property
    def configurations(self):
        """Gets the configurations of this Configuration.


        :return: The configurations of this Configuration.
        :rtype: List
        """
        return self._configurations

    @configurations.setter
    def configurations(self, configurations):
        """Sets the configurations of this Configuration.


        :param configurations: The configurations of this Configuration.
        :type configurations: List
        """

        self._configurations = configurations
