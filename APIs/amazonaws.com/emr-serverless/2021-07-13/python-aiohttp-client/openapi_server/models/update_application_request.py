# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_application_request_auto_start_configuration import CreateApplicationRequestAutoStartConfiguration
from openapi_server.models.create_application_request_auto_stop_configuration import CreateApplicationRequestAutoStopConfiguration
from openapi_server.models.create_application_request_image_configuration import CreateApplicationRequestImageConfiguration
from openapi_server.models.create_application_request_maximum_capacity import CreateApplicationRequestMaximumCapacity
from openapi_server.models.create_application_request_network_configuration import CreateApplicationRequestNetworkConfiguration
from openapi_server.models.initial_capacity_config import InitialCapacityConfig
from openapi_server.models.worker_type_specification_input import WorkerTypeSpecificationInput
import re
from openapi_server import util


class UpdateApplicationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, initial_capacity: Dict[str, InitialCapacityConfig]=None, maximum_capacity: CreateApplicationRequestMaximumCapacity=None, auto_start_configuration: CreateApplicationRequestAutoStartConfiguration=None, auto_stop_configuration: CreateApplicationRequestAutoStopConfiguration=None, network_configuration: CreateApplicationRequestNetworkConfiguration=None, architecture: str=None, image_configuration: CreateApplicationRequestImageConfiguration=None, worker_type_specifications: Dict[str, WorkerTypeSpecificationInput]=None, release_label: str=None):
        """UpdateApplicationRequest - a model defined in OpenAPI

        :param client_token: The client_token of this UpdateApplicationRequest.
        :param initial_capacity: The initial_capacity of this UpdateApplicationRequest.
        :param maximum_capacity: The maximum_capacity of this UpdateApplicationRequest.
        :param auto_start_configuration: The auto_start_configuration of this UpdateApplicationRequest.
        :param auto_stop_configuration: The auto_stop_configuration of this UpdateApplicationRequest.
        :param network_configuration: The network_configuration of this UpdateApplicationRequest.
        :param architecture: The architecture of this UpdateApplicationRequest.
        :param image_configuration: The image_configuration of this UpdateApplicationRequest.
        :param worker_type_specifications: The worker_type_specifications of this UpdateApplicationRequest.
        :param release_label: The release_label of this UpdateApplicationRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'initial_capacity': Dict[str, InitialCapacityConfig],
            'maximum_capacity': CreateApplicationRequestMaximumCapacity,
            'auto_start_configuration': CreateApplicationRequestAutoStartConfiguration,
            'auto_stop_configuration': CreateApplicationRequestAutoStopConfiguration,
            'network_configuration': CreateApplicationRequestNetworkConfiguration,
            'architecture': str,
            'image_configuration': CreateApplicationRequestImageConfiguration,
            'worker_type_specifications': Dict[str, WorkerTypeSpecificationInput],
            'release_label': str
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'initial_capacity': 'initialCapacity',
            'maximum_capacity': 'maximumCapacity',
            'auto_start_configuration': 'autoStartConfiguration',
            'auto_stop_configuration': 'autoStopConfiguration',
            'network_configuration': 'networkConfiguration',
            'architecture': 'architecture',
            'image_configuration': 'imageConfiguration',
            'worker_type_specifications': 'workerTypeSpecifications',
            'release_label': 'releaseLabel'
        }

        self._client_token = client_token
        self._initial_capacity = initial_capacity
        self._maximum_capacity = maximum_capacity
        self._auto_start_configuration = auto_start_configuration
        self._auto_stop_configuration = auto_stop_configuration
        self._network_configuration = network_configuration
        self._architecture = architecture
        self._image_configuration = image_configuration
        self._worker_type_specifications = worker_type_specifications
        self._release_label = release_label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateApplicationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateApplication_request of this UpdateApplicationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this UpdateApplicationRequest.

        The client idempotency token of the application to update. Its value must be unique for each request.

        :return: The client_token of this UpdateApplicationRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this UpdateApplicationRequest.

        The client idempotency token of the application to update. Its value must be unique for each request.

        :param client_token: The client_token of this UpdateApplicationRequest.
        :type client_token: str
        """
        if client_token is None:
            raise ValueError("Invalid value for `client_token`, must not be `None`")
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'[A-Za-z0-9._-]+', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/[A-Za-z0-9._-]+/`")

        self._client_token = client_token

    @property
    def initial_capacity(self):
        """Gets the initial_capacity of this UpdateApplicationRequest.

        The capacity to initialize when the application is updated.

        :return: The initial_capacity of this UpdateApplicationRequest.
        :rtype: Dict[str, InitialCapacityConfig]
        """
        return self._initial_capacity

    @initial_capacity.setter
    def initial_capacity(self, initial_capacity):
        """Sets the initial_capacity of this UpdateApplicationRequest.

        The capacity to initialize when the application is updated.

        :param initial_capacity: The initial_capacity of this UpdateApplicationRequest.
        :type initial_capacity: Dict[str, InitialCapacityConfig]
        """
        if initial_capacity is not None and len(initial_capacity) > 10:
            raise ValueError("Invalid value for `initial_capacity`, number of items must be less than or equal to `10`")
        if initial_capacity is not None and len(initial_capacity) < 0:
            raise ValueError("Invalid value for `initial_capacity`, number of items must be greater than or equal to `0`")

        self._initial_capacity = initial_capacity

    @property
    def maximum_capacity(self):
        """Gets the maximum_capacity of this UpdateApplicationRequest.


        :return: The maximum_capacity of this UpdateApplicationRequest.
        :rtype: CreateApplicationRequestMaximumCapacity
        """
        return self._maximum_capacity

    @maximum_capacity.setter
    def maximum_capacity(self, maximum_capacity):
        """Sets the maximum_capacity of this UpdateApplicationRequest.


        :param maximum_capacity: The maximum_capacity of this UpdateApplicationRequest.
        :type maximum_capacity: CreateApplicationRequestMaximumCapacity
        """

        self._maximum_capacity = maximum_capacity

    @property
    def auto_start_configuration(self):
        """Gets the auto_start_configuration of this UpdateApplicationRequest.


        :return: The auto_start_configuration of this UpdateApplicationRequest.
        :rtype: CreateApplicationRequestAutoStartConfiguration
        """
        return self._auto_start_configuration

    @auto_start_configuration.setter
    def auto_start_configuration(self, auto_start_configuration):
        """Sets the auto_start_configuration of this UpdateApplicationRequest.


        :param auto_start_configuration: The auto_start_configuration of this UpdateApplicationRequest.
        :type auto_start_configuration: CreateApplicationRequestAutoStartConfiguration
        """

        self._auto_start_configuration = auto_start_configuration

    @property
    def auto_stop_configuration(self):
        """Gets the auto_stop_configuration of this UpdateApplicationRequest.


        :return: The auto_stop_configuration of this UpdateApplicationRequest.
        :rtype: CreateApplicationRequestAutoStopConfiguration
        """
        return self._auto_stop_configuration

    @auto_stop_configuration.setter
    def auto_stop_configuration(self, auto_stop_configuration):
        """Sets the auto_stop_configuration of this UpdateApplicationRequest.


        :param auto_stop_configuration: The auto_stop_configuration of this UpdateApplicationRequest.
        :type auto_stop_configuration: CreateApplicationRequestAutoStopConfiguration
        """

        self._auto_stop_configuration = auto_stop_configuration

    @property
    def network_configuration(self):
        """Gets the network_configuration of this UpdateApplicationRequest.


        :return: The network_configuration of this UpdateApplicationRequest.
        :rtype: CreateApplicationRequestNetworkConfiguration
        """
        return self._network_configuration

    @network_configuration.setter
    def network_configuration(self, network_configuration):
        """Sets the network_configuration of this UpdateApplicationRequest.


        :param network_configuration: The network_configuration of this UpdateApplicationRequest.
        :type network_configuration: CreateApplicationRequestNetworkConfiguration
        """

        self._network_configuration = network_configuration

    @property
    def architecture(self):
        """Gets the architecture of this UpdateApplicationRequest.

        The CPU architecture of an application.

        :return: The architecture of this UpdateApplicationRequest.
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this UpdateApplicationRequest.

        The CPU architecture of an application.

        :param architecture: The architecture of this UpdateApplicationRequest.
        :type architecture: str
        """
        allowed_values = ["ARM64", "X86_64"]  # noqa: E501
        if architecture not in allowed_values:
            raise ValueError(
                "Invalid value for `architecture` ({0}), must be one of {1}"
                .format(architecture, allowed_values)
            )

        self._architecture = architecture

    @property
    def image_configuration(self):
        """Gets the image_configuration of this UpdateApplicationRequest.


        :return: The image_configuration of this UpdateApplicationRequest.
        :rtype: CreateApplicationRequestImageConfiguration
        """
        return self._image_configuration

    @image_configuration.setter
    def image_configuration(self, image_configuration):
        """Sets the image_configuration of this UpdateApplicationRequest.


        :param image_configuration: The image_configuration of this UpdateApplicationRequest.
        :type image_configuration: CreateApplicationRequestImageConfiguration
        """

        self._image_configuration = image_configuration

    @property
    def worker_type_specifications(self):
        """Gets the worker_type_specifications of this UpdateApplicationRequest.

        The key-value pairs that specify worker type to <code>WorkerTypeSpecificationInput</code>. This parameter must contain all valid worker types for a Spark or Hive application. Valid worker types include <code>Driver</code> and <code>Executor</code> for Spark applications and <code>HiveDriver</code> and <code>TezTask</code> for Hive applications. You can either set image details in this parameter for each worker type, or in <code>imageConfiguration</code> for all worker types.

        :return: The worker_type_specifications of this UpdateApplicationRequest.
        :rtype: Dict[str, WorkerTypeSpecificationInput]
        """
        return self._worker_type_specifications

    @worker_type_specifications.setter
    def worker_type_specifications(self, worker_type_specifications):
        """Sets the worker_type_specifications of this UpdateApplicationRequest.

        The key-value pairs that specify worker type to <code>WorkerTypeSpecificationInput</code>. This parameter must contain all valid worker types for a Spark or Hive application. Valid worker types include <code>Driver</code> and <code>Executor</code> for Spark applications and <code>HiveDriver</code> and <code>TezTask</code> for Hive applications. You can either set image details in this parameter for each worker type, or in <code>imageConfiguration</code> for all worker types.

        :param worker_type_specifications: The worker_type_specifications of this UpdateApplicationRequest.
        :type worker_type_specifications: Dict[str, WorkerTypeSpecificationInput]
        """

        self._worker_type_specifications = worker_type_specifications

    @property
    def release_label(self):
        """Gets the release_label of this UpdateApplicationRequest.

        The Amazon EMR release label for the application. You can change the release label to use a different release of Amazon EMR.

        :return: The release_label of this UpdateApplicationRequest.
        :rtype: str
        """
        return self._release_label

    @release_label.setter
    def release_label(self, release_label):
        """Sets the release_label of this UpdateApplicationRequest.

        The Amazon EMR release label for the application. You can change the release label to use a different release of Amazon EMR.

        :param release_label: The release_label of this UpdateApplicationRequest.
        :type release_label: str
        """
        if release_label is not None and len(release_label) > 64:
            raise ValueError("Invalid value for `release_label`, length must be less than or equal to `64`")
        if release_label is not None and len(release_label) < 1:
            raise ValueError("Invalid value for `release_label`, length must be greater than or equal to `1`")
        if release_label is not None and not re.search(r'[A-Za-z0-9._\/-]+', release_label):
            raise ValueError("Invalid value for `release_label`, must be a follow pattern or equal to `/[A-Za-z0-9._\/-]+/`")

        self._release_label = release_label
