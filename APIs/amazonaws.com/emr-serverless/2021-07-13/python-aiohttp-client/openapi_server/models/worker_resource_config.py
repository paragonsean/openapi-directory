# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WorkerResourceConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cpu: str=None, memory: str=None, disk: str=None):
        """WorkerResourceConfig - a model defined in OpenAPI

        :param cpu: The cpu of this WorkerResourceConfig.
        :param memory: The memory of this WorkerResourceConfig.
        :param disk: The disk of this WorkerResourceConfig.
        """
        self.openapi_types = {
            'cpu': str,
            'memory': str,
            'disk': str
        }

        self.attribute_map = {
            'cpu': 'cpu',
            'memory': 'memory',
            'disk': 'disk'
        }

        self._cpu = cpu
        self._memory = memory
        self._disk = disk

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkerResourceConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkerResourceConfig of this WorkerResourceConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cpu(self):
        """Gets the cpu of this WorkerResourceConfig.


        :return: The cpu of this WorkerResourceConfig.
        :rtype: str
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this WorkerResourceConfig.


        :param cpu: The cpu of this WorkerResourceConfig.
        :type cpu: str
        """
        if cpu is None:
            raise ValueError("Invalid value for `cpu`, must not be `None`")

        self._cpu = cpu

    @property
    def memory(self):
        """Gets the memory of this WorkerResourceConfig.


        :return: The memory of this WorkerResourceConfig.
        :rtype: str
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this WorkerResourceConfig.


        :param memory: The memory of this WorkerResourceConfig.
        :type memory: str
        """
        if memory is None:
            raise ValueError("Invalid value for `memory`, must not be `None`")

        self._memory = memory

    @property
    def disk(self):
        """Gets the disk of this WorkerResourceConfig.


        :return: The disk of this WorkerResourceConfig.
        :rtype: str
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """Sets the disk of this WorkerResourceConfig.


        :param disk: The disk of this WorkerResourceConfig.
        :type disk: str
        """

        self._disk = disk
