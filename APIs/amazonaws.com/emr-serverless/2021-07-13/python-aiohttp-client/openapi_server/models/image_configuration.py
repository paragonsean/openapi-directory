# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImageConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image_uri: str=None, resolved_image_digest: str=None):
        """ImageConfiguration - a model defined in OpenAPI

        :param image_uri: The image_uri of this ImageConfiguration.
        :param resolved_image_digest: The resolved_image_digest of this ImageConfiguration.
        """
        self.openapi_types = {
            'image_uri': str,
            'resolved_image_digest': str
        }

        self.attribute_map = {
            'image_uri': 'imageUri',
            'resolved_image_digest': 'resolvedImageDigest'
        }

        self._image_uri = image_uri
        self._resolved_image_digest = resolved_image_digest

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageConfiguration of this ImageConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_uri(self):
        """Gets the image_uri of this ImageConfiguration.


        :return: The image_uri of this ImageConfiguration.
        :rtype: str
        """
        return self._image_uri

    @image_uri.setter
    def image_uri(self, image_uri):
        """Sets the image_uri of this ImageConfiguration.


        :param image_uri: The image_uri of this ImageConfiguration.
        :type image_uri: str
        """
        if image_uri is None:
            raise ValueError("Invalid value for `image_uri`, must not be `None`")

        self._image_uri = image_uri

    @property
    def resolved_image_digest(self):
        """Gets the resolved_image_digest of this ImageConfiguration.


        :return: The resolved_image_digest of this ImageConfiguration.
        :rtype: str
        """
        return self._resolved_image_digest

    @resolved_image_digest.setter
    def resolved_image_digest(self, resolved_image_digest):
        """Sets the resolved_image_digest of this ImageConfiguration.


        :param resolved_image_digest: The resolved_image_digest of this ImageConfiguration.
        :type resolved_image_digest: str
        """

        self._resolved_image_digest = resolved_image_digest
