# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StartJobRunResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_id: str=None, job_run_id: str=None, arn: str=None):
        """StartJobRunResponse - a model defined in OpenAPI

        :param application_id: The application_id of this StartJobRunResponse.
        :param job_run_id: The job_run_id of this StartJobRunResponse.
        :param arn: The arn of this StartJobRunResponse.
        """
        self.openapi_types = {
            'application_id': str,
            'job_run_id': str,
            'arn': str
        }

        self.attribute_map = {
            'application_id': 'applicationId',
            'job_run_id': 'jobRunId',
            'arn': 'arn'
        }

        self._application_id = application_id
        self._job_run_id = job_run_id
        self._arn = arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartJobRunResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartJobRunResponse of this StartJobRunResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_id(self):
        """Gets the application_id of this StartJobRunResponse.


        :return: The application_id of this StartJobRunResponse.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this StartJobRunResponse.


        :param application_id: The application_id of this StartJobRunResponse.
        :type application_id: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")

        self._application_id = application_id

    @property
    def job_run_id(self):
        """Gets the job_run_id of this StartJobRunResponse.


        :return: The job_run_id of this StartJobRunResponse.
        :rtype: str
        """
        return self._job_run_id

    @job_run_id.setter
    def job_run_id(self, job_run_id):
        """Sets the job_run_id of this StartJobRunResponse.


        :param job_run_id: The job_run_id of this StartJobRunResponse.
        :type job_run_id: str
        """
        if job_run_id is None:
            raise ValueError("Invalid value for `job_run_id`, must not be `None`")

        self._job_run_id = job_run_id

    @property
    def arn(self):
        """Gets the arn of this StartJobRunResponse.


        :return: The arn of this StartJobRunResponse.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this StartJobRunResponse.


        :param arn: The arn of this StartJobRunResponse.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn
