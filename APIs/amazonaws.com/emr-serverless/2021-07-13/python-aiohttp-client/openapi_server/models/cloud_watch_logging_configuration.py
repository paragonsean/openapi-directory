# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CloudWatchLoggingConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, log_group_name: str=None, log_stream_name_prefix: str=None, encryption_key_arn: str=None, log_types: Dict=None):
        """CloudWatchLoggingConfiguration - a model defined in OpenAPI

        :param enabled: The enabled of this CloudWatchLoggingConfiguration.
        :param log_group_name: The log_group_name of this CloudWatchLoggingConfiguration.
        :param log_stream_name_prefix: The log_stream_name_prefix of this CloudWatchLoggingConfiguration.
        :param encryption_key_arn: The encryption_key_arn of this CloudWatchLoggingConfiguration.
        :param log_types: The log_types of this CloudWatchLoggingConfiguration.
        """
        self.openapi_types = {
            'enabled': bool,
            'log_group_name': str,
            'log_stream_name_prefix': str,
            'encryption_key_arn': str,
            'log_types': Dict
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'log_group_name': 'logGroupName',
            'log_stream_name_prefix': 'logStreamNamePrefix',
            'encryption_key_arn': 'encryptionKeyArn',
            'log_types': 'logTypes'
        }

        self._enabled = enabled
        self._log_group_name = log_group_name
        self._log_stream_name_prefix = log_stream_name_prefix
        self._encryption_key_arn = encryption_key_arn
        self._log_types = log_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudWatchLoggingConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudWatchLoggingConfiguration of this CloudWatchLoggingConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this CloudWatchLoggingConfiguration.


        :return: The enabled of this CloudWatchLoggingConfiguration.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CloudWatchLoggingConfiguration.


        :param enabled: The enabled of this CloudWatchLoggingConfiguration.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def log_group_name(self):
        """Gets the log_group_name of this CloudWatchLoggingConfiguration.


        :return: The log_group_name of this CloudWatchLoggingConfiguration.
        :rtype: str
        """
        return self._log_group_name

    @log_group_name.setter
    def log_group_name(self, log_group_name):
        """Sets the log_group_name of this CloudWatchLoggingConfiguration.


        :param log_group_name: The log_group_name of this CloudWatchLoggingConfiguration.
        :type log_group_name: str
        """

        self._log_group_name = log_group_name

    @property
    def log_stream_name_prefix(self):
        """Gets the log_stream_name_prefix of this CloudWatchLoggingConfiguration.


        :return: The log_stream_name_prefix of this CloudWatchLoggingConfiguration.
        :rtype: str
        """
        return self._log_stream_name_prefix

    @log_stream_name_prefix.setter
    def log_stream_name_prefix(self, log_stream_name_prefix):
        """Sets the log_stream_name_prefix of this CloudWatchLoggingConfiguration.


        :param log_stream_name_prefix: The log_stream_name_prefix of this CloudWatchLoggingConfiguration.
        :type log_stream_name_prefix: str
        """

        self._log_stream_name_prefix = log_stream_name_prefix

    @property
    def encryption_key_arn(self):
        """Gets the encryption_key_arn of this CloudWatchLoggingConfiguration.


        :return: The encryption_key_arn of this CloudWatchLoggingConfiguration.
        :rtype: str
        """
        return self._encryption_key_arn

    @encryption_key_arn.setter
    def encryption_key_arn(self, encryption_key_arn):
        """Sets the encryption_key_arn of this CloudWatchLoggingConfiguration.


        :param encryption_key_arn: The encryption_key_arn of this CloudWatchLoggingConfiguration.
        :type encryption_key_arn: str
        """

        self._encryption_key_arn = encryption_key_arn

    @property
    def log_types(self):
        """Gets the log_types of this CloudWatchLoggingConfiguration.


        :return: The log_types of this CloudWatchLoggingConfiguration.
        :rtype: Dict
        """
        return self._log_types

    @log_types.setter
    def log_types(self, log_types):
        """Sets the log_types of this CloudWatchLoggingConfiguration.


        :param log_types: The log_types of this CloudWatchLoggingConfiguration.
        :type log_types: Dict
        """

        self._log_types = log_types
