/**
 * Amazon Simple Queue Service
 * <p>Welcome to the <i>Amazon SQS API Reference</i>.</p> <p>Amazon SQS is a reliable, highly-scalable hosted queue for storing messages as they travel between applications or microservices. Amazon SQS moves data between distributed application components and helps you decouple these components.</p> <p>For information on the permissions you need to use this API, see <a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-authentication-and-access-control.html\">Identity and access management</a> in the <i>Amazon SQS Developer Guide.</i> </p> <p>You can use <a href=\"http://aws.amazon.com/tools/#sdk\">Amazon Web Services SDKs</a> to access Amazon SQS using your favorite programming language. The SDKs perform tasks such as the following automatically:</p> <ul> <li> <p>Cryptographically sign your service requests</p> </li> <li> <p>Retry requests</p> </li> <li> <p>Handle error responses</p> </li> </ul> <p> <b>Additional information</b> </p> <ul> <li> <p> <a href=\"http://aws.amazon.com/sqs/\">Amazon SQS Product Page</a> </p> </li> <li> <p> <i>Amazon SQS Developer Guide</i> </p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-making-api-requests.html\">Making API Requests</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-metadata.html#sqs-message-attributes\">Amazon SQS Message Attributes</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\">Amazon SQS Dead-Letter Queues</a> </p> </li> </ul> </li> <li> <p> <a href=\"http://docs.aws.amazon.com/cli/latest/reference/sqs/index.html\">Amazon SQS in the <i>Command Line Interface</i> </a> </p> </li> <li> <p> <i>Amazon Web Services General Reference</i> </p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#sqs_region\">Regions and Endpoints</a> </p> </li> </ul> </li> </ul>
 *
 * The version of the OpenAPI document: 2012-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReceiveMessageRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReceiveMessageRequest::OAIReceiveMessageRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReceiveMessageRequest::OAIReceiveMessageRequest() {
    this->initializeModel();
}

OAIReceiveMessageRequest::~OAIReceiveMessageRequest() {}

void OAIReceiveMessageRequest::initializeModel() {

    m_queue_url_isSet = false;
    m_queue_url_isValid = false;

    m_attribute_names_isSet = false;
    m_attribute_names_isValid = false;

    m_message_attribute_names_isSet = false;
    m_message_attribute_names_isValid = false;

    m_max_number_of_messages_isSet = false;
    m_max_number_of_messages_isValid = false;

    m_visibility_timeout_isSet = false;
    m_visibility_timeout_isValid = false;

    m_wait_time_seconds_isSet = false;
    m_wait_time_seconds_isValid = false;

    m_receive_request_attempt_id_isSet = false;
    m_receive_request_attempt_id_isValid = false;
}

void OAIReceiveMessageRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReceiveMessageRequest::fromJsonObject(QJsonObject json) {

    m_queue_url_isValid = ::OpenAPI::fromJsonValue(m_queue_url, json[QString("QueueUrl")]);
    m_queue_url_isSet = !json[QString("QueueUrl")].isNull() && m_queue_url_isValid;

    m_attribute_names_isValid = ::OpenAPI::fromJsonValue(m_attribute_names, json[QString("AttributeNames")]);
    m_attribute_names_isSet = !json[QString("AttributeNames")].isNull() && m_attribute_names_isValid;

    m_message_attribute_names_isValid = ::OpenAPI::fromJsonValue(m_message_attribute_names, json[QString("MessageAttributeNames")]);
    m_message_attribute_names_isSet = !json[QString("MessageAttributeNames")].isNull() && m_message_attribute_names_isValid;

    m_max_number_of_messages_isValid = ::OpenAPI::fromJsonValue(m_max_number_of_messages, json[QString("MaxNumberOfMessages")]);
    m_max_number_of_messages_isSet = !json[QString("MaxNumberOfMessages")].isNull() && m_max_number_of_messages_isValid;

    m_visibility_timeout_isValid = ::OpenAPI::fromJsonValue(m_visibility_timeout, json[QString("VisibilityTimeout")]);
    m_visibility_timeout_isSet = !json[QString("VisibilityTimeout")].isNull() && m_visibility_timeout_isValid;

    m_wait_time_seconds_isValid = ::OpenAPI::fromJsonValue(m_wait_time_seconds, json[QString("WaitTimeSeconds")]);
    m_wait_time_seconds_isSet = !json[QString("WaitTimeSeconds")].isNull() && m_wait_time_seconds_isValid;

    m_receive_request_attempt_id_isValid = ::OpenAPI::fromJsonValue(m_receive_request_attempt_id, json[QString("ReceiveRequestAttemptId")]);
    m_receive_request_attempt_id_isSet = !json[QString("ReceiveRequestAttemptId")].isNull() && m_receive_request_attempt_id_isValid;
}

QString OAIReceiveMessageRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReceiveMessageRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_queue_url_isSet) {
        obj.insert(QString("QueueUrl"), ::OpenAPI::toJsonValue(m_queue_url));
    }
    if (m_attribute_names.isSet()) {
        obj.insert(QString("AttributeNames"), ::OpenAPI::toJsonValue(m_attribute_names));
    }
    if (m_message_attribute_names.isSet()) {
        obj.insert(QString("MessageAttributeNames"), ::OpenAPI::toJsonValue(m_message_attribute_names));
    }
    if (m_max_number_of_messages_isSet) {
        obj.insert(QString("MaxNumberOfMessages"), ::OpenAPI::toJsonValue(m_max_number_of_messages));
    }
    if (m_visibility_timeout_isSet) {
        obj.insert(QString("VisibilityTimeout"), ::OpenAPI::toJsonValue(m_visibility_timeout));
    }
    if (m_wait_time_seconds_isSet) {
        obj.insert(QString("WaitTimeSeconds"), ::OpenAPI::toJsonValue(m_wait_time_seconds));
    }
    if (m_receive_request_attempt_id_isSet) {
        obj.insert(QString("ReceiveRequestAttemptId"), ::OpenAPI::toJsonValue(m_receive_request_attempt_id));
    }
    return obj;
}

QString OAIReceiveMessageRequest::getQueueUrl() const {
    return m_queue_url;
}
void OAIReceiveMessageRequest::setQueueUrl(const QString &queue_url) {
    m_queue_url = queue_url;
    m_queue_url_isSet = true;
}

bool OAIReceiveMessageRequest::is_queue_url_Set() const{
    return m_queue_url_isSet;
}

bool OAIReceiveMessageRequest::is_queue_url_Valid() const{
    return m_queue_url_isValid;
}

QList OAIReceiveMessageRequest::getAttributeNames() const {
    return m_attribute_names;
}
void OAIReceiveMessageRequest::setAttributeNames(const QList &attribute_names) {
    m_attribute_names = attribute_names;
    m_attribute_names_isSet = true;
}

bool OAIReceiveMessageRequest::is_attribute_names_Set() const{
    return m_attribute_names_isSet;
}

bool OAIReceiveMessageRequest::is_attribute_names_Valid() const{
    return m_attribute_names_isValid;
}

QList OAIReceiveMessageRequest::getMessageAttributeNames() const {
    return m_message_attribute_names;
}
void OAIReceiveMessageRequest::setMessageAttributeNames(const QList &message_attribute_names) {
    m_message_attribute_names = message_attribute_names;
    m_message_attribute_names_isSet = true;
}

bool OAIReceiveMessageRequest::is_message_attribute_names_Set() const{
    return m_message_attribute_names_isSet;
}

bool OAIReceiveMessageRequest::is_message_attribute_names_Valid() const{
    return m_message_attribute_names_isValid;
}

qint32 OAIReceiveMessageRequest::getMaxNumberOfMessages() const {
    return m_max_number_of_messages;
}
void OAIReceiveMessageRequest::setMaxNumberOfMessages(const qint32 &max_number_of_messages) {
    m_max_number_of_messages = max_number_of_messages;
    m_max_number_of_messages_isSet = true;
}

bool OAIReceiveMessageRequest::is_max_number_of_messages_Set() const{
    return m_max_number_of_messages_isSet;
}

bool OAIReceiveMessageRequest::is_max_number_of_messages_Valid() const{
    return m_max_number_of_messages_isValid;
}

qint32 OAIReceiveMessageRequest::getVisibilityTimeout() const {
    return m_visibility_timeout;
}
void OAIReceiveMessageRequest::setVisibilityTimeout(const qint32 &visibility_timeout) {
    m_visibility_timeout = visibility_timeout;
    m_visibility_timeout_isSet = true;
}

bool OAIReceiveMessageRequest::is_visibility_timeout_Set() const{
    return m_visibility_timeout_isSet;
}

bool OAIReceiveMessageRequest::is_visibility_timeout_Valid() const{
    return m_visibility_timeout_isValid;
}

qint32 OAIReceiveMessageRequest::getWaitTimeSeconds() const {
    return m_wait_time_seconds;
}
void OAIReceiveMessageRequest::setWaitTimeSeconds(const qint32 &wait_time_seconds) {
    m_wait_time_seconds = wait_time_seconds;
    m_wait_time_seconds_isSet = true;
}

bool OAIReceiveMessageRequest::is_wait_time_seconds_Set() const{
    return m_wait_time_seconds_isSet;
}

bool OAIReceiveMessageRequest::is_wait_time_seconds_Valid() const{
    return m_wait_time_seconds_isValid;
}

QString OAIReceiveMessageRequest::getReceiveRequestAttemptId() const {
    return m_receive_request_attempt_id;
}
void OAIReceiveMessageRequest::setReceiveRequestAttemptId(const QString &receive_request_attempt_id) {
    m_receive_request_attempt_id = receive_request_attempt_id;
    m_receive_request_attempt_id_isSet = true;
}

bool OAIReceiveMessageRequest::is_receive_request_attempt_id_Set() const{
    return m_receive_request_attempt_id_isSet;
}

bool OAIReceiveMessageRequest::is_receive_request_attempt_id_Valid() const{
    return m_receive_request_attempt_id_isValid;
}

bool OAIReceiveMessageRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_queue_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_attribute_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_number_of_messages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_time_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receive_request_attempt_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReceiveMessageRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_queue_url_isValid && true;
}

} // namespace OpenAPI
