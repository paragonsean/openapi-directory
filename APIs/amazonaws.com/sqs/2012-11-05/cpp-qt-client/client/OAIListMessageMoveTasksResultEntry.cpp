/**
 * Amazon Simple Queue Service
 * <p>Welcome to the <i>Amazon SQS API Reference</i>.</p> <p>Amazon SQS is a reliable, highly-scalable hosted queue for storing messages as they travel between applications or microservices. Amazon SQS moves data between distributed application components and helps you decouple these components.</p> <p>For information on the permissions you need to use this API, see <a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-authentication-and-access-control.html\">Identity and access management</a> in the <i>Amazon SQS Developer Guide.</i> </p> <p>You can use <a href=\"http://aws.amazon.com/tools/#sdk\">Amazon Web Services SDKs</a> to access Amazon SQS using your favorite programming language. The SDKs perform tasks such as the following automatically:</p> <ul> <li> <p>Cryptographically sign your service requests</p> </li> <li> <p>Retry requests</p> </li> <li> <p>Handle error responses</p> </li> </ul> <p> <b>Additional information</b> </p> <ul> <li> <p> <a href=\"http://aws.amazon.com/sqs/\">Amazon SQS Product Page</a> </p> </li> <li> <p> <i>Amazon SQS Developer Guide</i> </p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-making-api-requests.html\">Making API Requests</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-metadata.html#sqs-message-attributes\">Amazon SQS Message Attributes</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\">Amazon SQS Dead-Letter Queues</a> </p> </li> </ul> </li> <li> <p> <a href=\"http://docs.aws.amazon.com/cli/latest/reference/sqs/index.html\">Amazon SQS in the <i>Command Line Interface</i> </a> </p> </li> <li> <p> <i>Amazon Web Services General Reference</i> </p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#sqs_region\">Regions and Endpoints</a> </p> </li> </ul> </li> </ul>
 *
 * The version of the OpenAPI document: 2012-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListMessageMoveTasksResultEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListMessageMoveTasksResultEntry::OAIListMessageMoveTasksResultEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListMessageMoveTasksResultEntry::OAIListMessageMoveTasksResultEntry() {
    this->initializeModel();
}

OAIListMessageMoveTasksResultEntry::~OAIListMessageMoveTasksResultEntry() {}

void OAIListMessageMoveTasksResultEntry::initializeModel() {

    m_task_handle_isSet = false;
    m_task_handle_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_source_arn_isSet = false;
    m_source_arn_isValid = false;

    m_destination_arn_isSet = false;
    m_destination_arn_isValid = false;

    m_max_number_of_messages_per_second_isSet = false;
    m_max_number_of_messages_per_second_isValid = false;

    m_approximate_number_of_messages_moved_isSet = false;
    m_approximate_number_of_messages_moved_isValid = false;

    m_approximate_number_of_messages_to_move_isSet = false;
    m_approximate_number_of_messages_to_move_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_started_timestamp_isSet = false;
    m_started_timestamp_isValid = false;
}

void OAIListMessageMoveTasksResultEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListMessageMoveTasksResultEntry::fromJsonObject(QJsonObject json) {

    m_task_handle_isValid = ::OpenAPI::fromJsonValue(m_task_handle, json[QString("TaskHandle")]);
    m_task_handle_isSet = !json[QString("TaskHandle")].isNull() && m_task_handle_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_source_arn_isValid = ::OpenAPI::fromJsonValue(m_source_arn, json[QString("SourceArn")]);
    m_source_arn_isSet = !json[QString("SourceArn")].isNull() && m_source_arn_isValid;

    m_destination_arn_isValid = ::OpenAPI::fromJsonValue(m_destination_arn, json[QString("DestinationArn")]);
    m_destination_arn_isSet = !json[QString("DestinationArn")].isNull() && m_destination_arn_isValid;

    m_max_number_of_messages_per_second_isValid = ::OpenAPI::fromJsonValue(m_max_number_of_messages_per_second, json[QString("MaxNumberOfMessagesPerSecond")]);
    m_max_number_of_messages_per_second_isSet = !json[QString("MaxNumberOfMessagesPerSecond")].isNull() && m_max_number_of_messages_per_second_isValid;

    m_approximate_number_of_messages_moved_isValid = ::OpenAPI::fromJsonValue(m_approximate_number_of_messages_moved, json[QString("ApproximateNumberOfMessagesMoved")]);
    m_approximate_number_of_messages_moved_isSet = !json[QString("ApproximateNumberOfMessagesMoved")].isNull() && m_approximate_number_of_messages_moved_isValid;

    m_approximate_number_of_messages_to_move_isValid = ::OpenAPI::fromJsonValue(m_approximate_number_of_messages_to_move, json[QString("ApproximateNumberOfMessagesToMove")]);
    m_approximate_number_of_messages_to_move_isSet = !json[QString("ApproximateNumberOfMessagesToMove")].isNull() && m_approximate_number_of_messages_to_move_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;

    m_started_timestamp_isValid = ::OpenAPI::fromJsonValue(m_started_timestamp, json[QString("StartedTimestamp")]);
    m_started_timestamp_isSet = !json[QString("StartedTimestamp")].isNull() && m_started_timestamp_isValid;
}

QString OAIListMessageMoveTasksResultEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListMessageMoveTasksResultEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_task_handle_isSet) {
        obj.insert(QString("TaskHandle"), ::OpenAPI::toJsonValue(m_task_handle));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_source_arn_isSet) {
        obj.insert(QString("SourceArn"), ::OpenAPI::toJsonValue(m_source_arn));
    }
    if (m_destination_arn_isSet) {
        obj.insert(QString("DestinationArn"), ::OpenAPI::toJsonValue(m_destination_arn));
    }
    if (m_max_number_of_messages_per_second_isSet) {
        obj.insert(QString("MaxNumberOfMessagesPerSecond"), ::OpenAPI::toJsonValue(m_max_number_of_messages_per_second));
    }
    if (m_approximate_number_of_messages_moved_isSet) {
        obj.insert(QString("ApproximateNumberOfMessagesMoved"), ::OpenAPI::toJsonValue(m_approximate_number_of_messages_moved));
    }
    if (m_approximate_number_of_messages_to_move_isSet) {
        obj.insert(QString("ApproximateNumberOfMessagesToMove"), ::OpenAPI::toJsonValue(m_approximate_number_of_messages_to_move));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_started_timestamp_isSet) {
        obj.insert(QString("StartedTimestamp"), ::OpenAPI::toJsonValue(m_started_timestamp));
    }
    return obj;
}

QString OAIListMessageMoveTasksResultEntry::getTaskHandle() const {
    return m_task_handle;
}
void OAIListMessageMoveTasksResultEntry::setTaskHandle(const QString &task_handle) {
    m_task_handle = task_handle;
    m_task_handle_isSet = true;
}

bool OAIListMessageMoveTasksResultEntry::is_task_handle_Set() const{
    return m_task_handle_isSet;
}

bool OAIListMessageMoveTasksResultEntry::is_task_handle_Valid() const{
    return m_task_handle_isValid;
}

QString OAIListMessageMoveTasksResultEntry::getStatus() const {
    return m_status;
}
void OAIListMessageMoveTasksResultEntry::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIListMessageMoveTasksResultEntry::is_status_Set() const{
    return m_status_isSet;
}

bool OAIListMessageMoveTasksResultEntry::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIListMessageMoveTasksResultEntry::getSourceArn() const {
    return m_source_arn;
}
void OAIListMessageMoveTasksResultEntry::setSourceArn(const QString &source_arn) {
    m_source_arn = source_arn;
    m_source_arn_isSet = true;
}

bool OAIListMessageMoveTasksResultEntry::is_source_arn_Set() const{
    return m_source_arn_isSet;
}

bool OAIListMessageMoveTasksResultEntry::is_source_arn_Valid() const{
    return m_source_arn_isValid;
}

QString OAIListMessageMoveTasksResultEntry::getDestinationArn() const {
    return m_destination_arn;
}
void OAIListMessageMoveTasksResultEntry::setDestinationArn(const QString &destination_arn) {
    m_destination_arn = destination_arn;
    m_destination_arn_isSet = true;
}

bool OAIListMessageMoveTasksResultEntry::is_destination_arn_Set() const{
    return m_destination_arn_isSet;
}

bool OAIListMessageMoveTasksResultEntry::is_destination_arn_Valid() const{
    return m_destination_arn_isValid;
}

qint32 OAIListMessageMoveTasksResultEntry::getMaxNumberOfMessagesPerSecond() const {
    return m_max_number_of_messages_per_second;
}
void OAIListMessageMoveTasksResultEntry::setMaxNumberOfMessagesPerSecond(const qint32 &max_number_of_messages_per_second) {
    m_max_number_of_messages_per_second = max_number_of_messages_per_second;
    m_max_number_of_messages_per_second_isSet = true;
}

bool OAIListMessageMoveTasksResultEntry::is_max_number_of_messages_per_second_Set() const{
    return m_max_number_of_messages_per_second_isSet;
}

bool OAIListMessageMoveTasksResultEntry::is_max_number_of_messages_per_second_Valid() const{
    return m_max_number_of_messages_per_second_isValid;
}

qint32 OAIListMessageMoveTasksResultEntry::getApproximateNumberOfMessagesMoved() const {
    return m_approximate_number_of_messages_moved;
}
void OAIListMessageMoveTasksResultEntry::setApproximateNumberOfMessagesMoved(const qint32 &approximate_number_of_messages_moved) {
    m_approximate_number_of_messages_moved = approximate_number_of_messages_moved;
    m_approximate_number_of_messages_moved_isSet = true;
}

bool OAIListMessageMoveTasksResultEntry::is_approximate_number_of_messages_moved_Set() const{
    return m_approximate_number_of_messages_moved_isSet;
}

bool OAIListMessageMoveTasksResultEntry::is_approximate_number_of_messages_moved_Valid() const{
    return m_approximate_number_of_messages_moved_isValid;
}

qint32 OAIListMessageMoveTasksResultEntry::getApproximateNumberOfMessagesToMove() const {
    return m_approximate_number_of_messages_to_move;
}
void OAIListMessageMoveTasksResultEntry::setApproximateNumberOfMessagesToMove(const qint32 &approximate_number_of_messages_to_move) {
    m_approximate_number_of_messages_to_move = approximate_number_of_messages_to_move;
    m_approximate_number_of_messages_to_move_isSet = true;
}

bool OAIListMessageMoveTasksResultEntry::is_approximate_number_of_messages_to_move_Set() const{
    return m_approximate_number_of_messages_to_move_isSet;
}

bool OAIListMessageMoveTasksResultEntry::is_approximate_number_of_messages_to_move_Valid() const{
    return m_approximate_number_of_messages_to_move_isValid;
}

QString OAIListMessageMoveTasksResultEntry::getFailureReason() const {
    return m_failure_reason;
}
void OAIListMessageMoveTasksResultEntry::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIListMessageMoveTasksResultEntry::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIListMessageMoveTasksResultEntry::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

qint32 OAIListMessageMoveTasksResultEntry::getStartedTimestamp() const {
    return m_started_timestamp;
}
void OAIListMessageMoveTasksResultEntry::setStartedTimestamp(const qint32 &started_timestamp) {
    m_started_timestamp = started_timestamp;
    m_started_timestamp_isSet = true;
}

bool OAIListMessageMoveTasksResultEntry::is_started_timestamp_Set() const{
    return m_started_timestamp_isSet;
}

bool OAIListMessageMoveTasksResultEntry::is_started_timestamp_Valid() const{
    return m_started_timestamp_isValid;
}

bool OAIListMessageMoveTasksResultEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_task_handle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_number_of_messages_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approximate_number_of_messages_moved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approximate_number_of_messages_to_move_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListMessageMoveTasksResultEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
