/**
 * Amazon Simple Queue Service
 * <p>Welcome to the <i>Amazon SQS API Reference</i>.</p> <p>Amazon SQS is a reliable, highly-scalable hosted queue for storing messages as they travel between applications or microservices. Amazon SQS moves data between distributed application components and helps you decouple these components.</p> <p>For information on the permissions you need to use this API, see <a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-authentication-and-access-control.html\">Identity and access management</a> in the <i>Amazon SQS Developer Guide.</i> </p> <p>You can use <a href=\"http://aws.amazon.com/tools/#sdk\">Amazon Web Services SDKs</a> to access Amazon SQS using your favorite programming language. The SDKs perform tasks such as the following automatically:</p> <ul> <li> <p>Cryptographically sign your service requests</p> </li> <li> <p>Retry requests</p> </li> <li> <p>Handle error responses</p> </li> </ul> <p> <b>Additional information</b> </p> <ul> <li> <p> <a href=\"http://aws.amazon.com/sqs/\">Amazon SQS Product Page</a> </p> </li> <li> <p> <i>Amazon SQS Developer Guide</i> </p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-making-api-requests.html\">Making API Requests</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-metadata.html#sqs-message-attributes\">Amazon SQS Message Attributes</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\">Amazon SQS Dead-Letter Queues</a> </p> </li> </ul> </li> <li> <p> <a href=\"http://docs.aws.amazon.com/cli/latest/reference/sqs/index.html\">Amazon SQS in the <i>Command Line Interface</i> </a> </p> </li> <li> <p> <i>Amazon Web Services General Reference</i> </p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#sqs_region\">Regions and Endpoints</a> </p> </li> </ul> </li> </ul>
 *
 * The version of the OpenAPI document: 2012-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueueAttributeName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueueAttributeName::OAIQueueAttributeName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueueAttributeName::OAIQueueAttributeName() {
    this->initializeModel();
}

OAIQueueAttributeName::~OAIQueueAttributeName() {}

void OAIQueueAttributeName::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIQueueAttributeName::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIQueueAttributeName::fromJson(QString jsonString) {
    
    if ( jsonString.compare("All", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueAttributeName::ALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Policy", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueAttributeName::POLICY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VisibilityTimeout", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueAttributeName::VISIBILITYTIMEOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MaximumMessageSize", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueAttributeName::MAXIMUMMESSAGESIZE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MessageRetentionPeriod", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueAttributeName::MESSAGERETENTIONPERIOD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApproximateNumberOfMessages", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueAttributeName::APPROXIMATENUMBEROFMESSAGES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApproximateNumberOfMessagesNotVisible", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueAttributeName::APPROXIMATENUMBEROFMESSAGESNOTVISIBLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CreatedTimestamp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueAttributeName::CREATEDTIMESTAMP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LastModifiedTimestamp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueAttributeName::LASTMODIFIEDTIMESTAMP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QueueArn", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueAttributeName::QUEUEARN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ApproximateNumberOfMessagesDelayed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueAttributeName::APPROXIMATENUMBEROFMESSAGESDELAYED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DelaySeconds", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueAttributeName::DELAYSECONDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ReceiveMessageWaitTimeSeconds", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueAttributeName::RECEIVEMESSAGEWAITTIMESECONDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RedrivePolicy", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueAttributeName::REDRIVEPOLICY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FifoQueue", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueAttributeName::FIFOQUEUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ContentBasedDeduplication", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueAttributeName::CONTENTBASEDDEDUPLICATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KmsMasterKeyId", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueAttributeName::KMSMASTERKEYID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KmsDataKeyReusePeriodSeconds", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueAttributeName::KMSDATAKEYREUSEPERIODSECONDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DeduplicationScope", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueAttributeName::DEDUPLICATIONSCOPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FifoThroughputLimit", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueAttributeName::FIFOTHROUGHPUTLIMIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RedriveAllowPolicy", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueAttributeName::REDRIVEALLOWPOLICY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SqsManagedSseEnabled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueueAttributeName::SQSMANAGEDSSEENABLED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIQueueAttributeName::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIQueueAttributeName::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIQueueAttributeName::ALL:
            val = "All";
            break;
        case eOAIQueueAttributeName::POLICY:
            val = "Policy";
            break;
        case eOAIQueueAttributeName::VISIBILITYTIMEOUT:
            val = "VisibilityTimeout";
            break;
        case eOAIQueueAttributeName::MAXIMUMMESSAGESIZE:
            val = "MaximumMessageSize";
            break;
        case eOAIQueueAttributeName::MESSAGERETENTIONPERIOD:
            val = "MessageRetentionPeriod";
            break;
        case eOAIQueueAttributeName::APPROXIMATENUMBEROFMESSAGES:
            val = "ApproximateNumberOfMessages";
            break;
        case eOAIQueueAttributeName::APPROXIMATENUMBEROFMESSAGESNOTVISIBLE:
            val = "ApproximateNumberOfMessagesNotVisible";
            break;
        case eOAIQueueAttributeName::CREATEDTIMESTAMP:
            val = "CreatedTimestamp";
            break;
        case eOAIQueueAttributeName::LASTMODIFIEDTIMESTAMP:
            val = "LastModifiedTimestamp";
            break;
        case eOAIQueueAttributeName::QUEUEARN:
            val = "QueueArn";
            break;
        case eOAIQueueAttributeName::APPROXIMATENUMBEROFMESSAGESDELAYED:
            val = "ApproximateNumberOfMessagesDelayed";
            break;
        case eOAIQueueAttributeName::DELAYSECONDS:
            val = "DelaySeconds";
            break;
        case eOAIQueueAttributeName::RECEIVEMESSAGEWAITTIMESECONDS:
            val = "ReceiveMessageWaitTimeSeconds";
            break;
        case eOAIQueueAttributeName::REDRIVEPOLICY:
            val = "RedrivePolicy";
            break;
        case eOAIQueueAttributeName::FIFOQUEUE:
            val = "FifoQueue";
            break;
        case eOAIQueueAttributeName::CONTENTBASEDDEDUPLICATION:
            val = "ContentBasedDeduplication";
            break;
        case eOAIQueueAttributeName::KMSMASTERKEYID:
            val = "KmsMasterKeyId";
            break;
        case eOAIQueueAttributeName::KMSDATAKEYREUSEPERIODSECONDS:
            val = "KmsDataKeyReusePeriodSeconds";
            break;
        case eOAIQueueAttributeName::DEDUPLICATIONSCOPE:
            val = "DeduplicationScope";
            break;
        case eOAIQueueAttributeName::FIFOTHROUGHPUTLIMIT:
            val = "FifoThroughputLimit";
            break;
        case eOAIQueueAttributeName::REDRIVEALLOWPOLICY:
            val = "RedriveAllowPolicy";
            break;
        case eOAIQueueAttributeName::SQSMANAGEDSSEENABLED:
            val = "SqsManagedSseEnabled";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIQueueAttributeName::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIQueueAttributeName::eOAIQueueAttributeName OAIQueueAttributeName::getValue() const {
    return m_value;
}

void OAIQueueAttributeName::setValue(const OAIQueueAttributeName::eOAIQueueAttributeName& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIQueueAttributeName::isSet() const {
    
    return m_value_isSet;
}

bool OAIQueueAttributeName::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
