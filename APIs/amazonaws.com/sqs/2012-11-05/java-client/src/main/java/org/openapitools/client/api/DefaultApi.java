/*
 * Amazon Simple Queue Service
 * <p>Welcome to the <i>Amazon SQS API Reference</i>.</p> <p>Amazon SQS is a reliable, highly-scalable hosted queue for storing messages as they travel between applications or microservices. Amazon SQS moves data between distributed application components and helps you decouple these components.</p> <p>For information on the permissions you need to use this API, see <a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-authentication-and-access-control.html\">Identity and access management</a> in the <i>Amazon SQS Developer Guide.</i> </p> <p>You can use <a href=\"http://aws.amazon.com/tools/#sdk\">Amazon Web Services SDKs</a> to access Amazon SQS using your favorite programming language. The SDKs perform tasks such as the following automatically:</p> <ul> <li> <p>Cryptographically sign your service requests</p> </li> <li> <p>Retry requests</p> </li> <li> <p>Handle error responses</p> </li> </ul> <p> <b>Additional information</b> </p> <ul> <li> <p> <a href=\"http://aws.amazon.com/sqs/\">Amazon SQS Product Page</a> </p> </li> <li> <p> <i>Amazon SQS Developer Guide</i> </p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-making-api-requests.html\">Making API Requests</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-metadata.html#sqs-message-attributes\">Amazon SQS Message Attributes</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\">Amazon SQS Dead-Letter Queues</a> </p> </li> </ul> </li> <li> <p> <a href=\"http://docs.aws.amazon.com/cli/latest/reference/sqs/index.html\">Amazon SQS in the <i>Command Line Interface</i> </a> </p> </li> <li> <p> <i>Amazon Web Services General Reference</i> </p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#sqs_region\">Regions and Endpoints</a> </p> </li> </ul> </li> </ul>
 *
 * The version of the OpenAPI document: 2012-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddPermissionRequest;
import org.openapitools.client.model.CancelMessageMoveTaskRequest;
import org.openapitools.client.model.CancelMessageMoveTaskResult;
import org.openapitools.client.model.ChangeMessageVisibilityBatchRequest;
import org.openapitools.client.model.ChangeMessageVisibilityBatchResult;
import org.openapitools.client.model.ChangeMessageVisibilityRequest;
import org.openapitools.client.model.CreateQueueRequest;
import org.openapitools.client.model.CreateQueueResult;
import org.openapitools.client.model.DeleteMessageBatchRequest;
import org.openapitools.client.model.DeleteMessageBatchResult;
import org.openapitools.client.model.DeleteMessageRequest;
import org.openapitools.client.model.DeleteQueueRequest;
import org.openapitools.client.model.GETChangeMessageVisibilityBatchEntriesParameterInner;
import org.openapitools.client.model.GETDeleteMessageBatchEntriesParameterInner;
import org.openapitools.client.model.GETSendMessageBatchEntriesParameterInner;
import org.openapitools.client.model.GetQueueAttributesRequest;
import org.openapitools.client.model.GetQueueAttributesResult;
import org.openapitools.client.model.GetQueueUrlRequest;
import org.openapitools.client.model.GetQueueUrlResult;
import org.openapitools.client.model.ListDeadLetterSourceQueuesRequest;
import org.openapitools.client.model.ListDeadLetterSourceQueuesResult;
import org.openapitools.client.model.ListMessageMoveTasksRequest;
import org.openapitools.client.model.ListMessageMoveTasksResult;
import org.openapitools.client.model.ListQueueTagsRequest;
import org.openapitools.client.model.ListQueueTagsResult;
import org.openapitools.client.model.ListQueuesRequest;
import org.openapitools.client.model.ListQueuesResult;
import org.openapitools.client.model.MessageAttributeValue;
import org.openapitools.client.model.MessageSystemAttributeValue;
import org.openapitools.client.model.PurgeQueueRequest;
import org.openapitools.client.model.QueueAttributeName;
import org.openapitools.client.model.ReceiveMessageRequest;
import org.openapitools.client.model.ReceiveMessageResult;
import org.openapitools.client.model.RemovePermissionRequest;
import org.openapitools.client.model.SendMessageBatchRequest;
import org.openapitools.client.model.SendMessageBatchResult;
import org.openapitools.client.model.SendMessageRequest;
import org.openapitools.client.model.SendMessageResult;
import org.openapitools.client.model.SetQueueAttributesRequest;
import org.openapitools.client.model.StartMessageMoveTaskRequest;
import org.openapitools.client.model.StartMessageMoveTaskResult;
import org.openapitools.client.model.TagQueueRequest;
import org.openapitools.client.model.UntagQueueRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for gETAddPermission
     * @param label The unique identification of the permission you&#39;re setting (for example, &lt;code&gt;AliceSendMessage&lt;/code&gt;). Maximum 80 characters. Allowed characters include alphanumeric characters, hyphens (&lt;code&gt;-&lt;/code&gt;), and underscores (&lt;code&gt;_&lt;/code&gt;). (required)
     * @param awSAccountIds The Amazon Web Services account numbers of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/glos-chap.html#P\&quot;&gt;principals&lt;/a&gt; who are to receive permission. For information about locating the Amazon Web Services account identification, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-making-api-requests.html#sqs-api-request-authentication\&quot;&gt;Your Amazon Web Services Identifiers&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. (required)
     * @param actions &lt;p&gt;The action the client wants to allow for the specified principal. Valid values: the name of any action or &lt;code&gt;*&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information about these actions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-overview-of-managing-access.html\&quot;&gt;Overview of Managing Access Permissions to Your Amazon Simple Queue Service Resource&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Specifying &lt;code&gt;SendMessage&lt;/code&gt;, &lt;code&gt;DeleteMessage&lt;/code&gt;, or &lt;code&gt;ChangeMessageVisibility&lt;/code&gt; for &lt;code&gt;ActionName.n&lt;/code&gt; also grants permissions for the corresponding batch versions of those actions: &lt;code&gt;SendMessageBatch&lt;/code&gt;, &lt;code&gt;DeleteMessageBatch&lt;/code&gt;, and &lt;code&gt;ChangeMessageVisibilityBatch&lt;/code&gt;.&lt;/p&gt; (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OverLimit </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAddPermissionCall(String label, List<String> awSAccountIds, List<String> actions, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{AccountNumber}/{QueueName}/#Action=AddPermission"
            .replace("{" + "AccountNumber" + "}", localVarApiClient.escapeString(accountNumber.toString()))
            .replace("{" + "QueueName" + "}", localVarApiClient.escapeString(queueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Label", label));
        }

        if (awSAccountIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AWSAccountIds", awSAccountIds));
        }

        if (actions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Actions", actions));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETAddPermissionValidateBeforeCall(String label, List<String> awSAccountIds, List<String> actions, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'label' is set
        if (label == null) {
            throw new ApiException("Missing the required parameter 'label' when calling gETAddPermission(Async)");
        }

        // verify the required parameter 'awSAccountIds' is set
        if (awSAccountIds == null) {
            throw new ApiException("Missing the required parameter 'awSAccountIds' when calling gETAddPermission(Async)");
        }

        // verify the required parameter 'actions' is set
        if (actions == null) {
            throw new ApiException("Missing the required parameter 'actions' when calling gETAddPermission(Async)");
        }

        // verify the required parameter 'accountNumber' is set
        if (accountNumber == null) {
            throw new ApiException("Missing the required parameter 'accountNumber' when calling gETAddPermission(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling gETAddPermission(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETAddPermission(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETAddPermission(Async)");
        }

        return gETAddPermissionCall(label, awSAccountIds, actions, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds a permission to a queue for a specific &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/glos-chap.html#P\&quot;&gt;principal&lt;/a&gt;. This allows sharing access to the queue.&lt;/p&gt; &lt;p&gt;When you create a queue, you have full control access rights for the queue. Only you, the owner of the queue, can grant or deny permissions to the queue. For more information about these permissions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-writing-an-sqs-policy.html#write-messages-to-shared-queue\&quot;&gt;Allow Developers to Write Messages to a Shared Queue&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AddPermission&lt;/code&gt; generates a policy for you. You can use &lt;code&gt; &lt;a&gt;SetQueueAttributes&lt;/a&gt; &lt;/code&gt; to upload your policy. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-creating-custom-policies.html\&quot;&gt;Using Custom Policies with the Amazon SQS Access Policy Language&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An Amazon SQS policy can have a maximum of seven actions per statement.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To remove the ability to change queue permissions, you must deny permission to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetQueueAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon SQS &lt;code&gt;AddPermission&lt;/code&gt; does not support adding a non-account principal.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param label The unique identification of the permission you&#39;re setting (for example, &lt;code&gt;AliceSendMessage&lt;/code&gt;). Maximum 80 characters. Allowed characters include alphanumeric characters, hyphens (&lt;code&gt;-&lt;/code&gt;), and underscores (&lt;code&gt;_&lt;/code&gt;). (required)
     * @param awSAccountIds The Amazon Web Services account numbers of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/glos-chap.html#P\&quot;&gt;principals&lt;/a&gt; who are to receive permission. For information about locating the Amazon Web Services account identification, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-making-api-requests.html#sqs-api-request-authentication\&quot;&gt;Your Amazon Web Services Identifiers&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. (required)
     * @param actions &lt;p&gt;The action the client wants to allow for the specified principal. Valid values: the name of any action or &lt;code&gt;*&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information about these actions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-overview-of-managing-access.html\&quot;&gt;Overview of Managing Access Permissions to Your Amazon Simple Queue Service Resource&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Specifying &lt;code&gt;SendMessage&lt;/code&gt;, &lt;code&gt;DeleteMessage&lt;/code&gt;, or &lt;code&gt;ChangeMessageVisibility&lt;/code&gt; for &lt;code&gt;ActionName.n&lt;/code&gt; also grants permissions for the corresponding batch versions of those actions: &lt;code&gt;SendMessageBatch&lt;/code&gt;, &lt;code&gt;DeleteMessageBatch&lt;/code&gt;, and &lt;code&gt;ChangeMessageVisibilityBatch&lt;/code&gt;.&lt;/p&gt; (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OverLimit </td><td>  -  </td></tr>
     </table>
     */
    public void gETAddPermission(String label, List<String> awSAccountIds, List<String> actions, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETAddPermissionWithHttpInfo(label, awSAccountIds, actions, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Adds a permission to a queue for a specific &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/glos-chap.html#P\&quot;&gt;principal&lt;/a&gt;. This allows sharing access to the queue.&lt;/p&gt; &lt;p&gt;When you create a queue, you have full control access rights for the queue. Only you, the owner of the queue, can grant or deny permissions to the queue. For more information about these permissions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-writing-an-sqs-policy.html#write-messages-to-shared-queue\&quot;&gt;Allow Developers to Write Messages to a Shared Queue&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AddPermission&lt;/code&gt; generates a policy for you. You can use &lt;code&gt; &lt;a&gt;SetQueueAttributes&lt;/a&gt; &lt;/code&gt; to upload your policy. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-creating-custom-policies.html\&quot;&gt;Using Custom Policies with the Amazon SQS Access Policy Language&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An Amazon SQS policy can have a maximum of seven actions per statement.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To remove the ability to change queue permissions, you must deny permission to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetQueueAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon SQS &lt;code&gt;AddPermission&lt;/code&gt; does not support adding a non-account principal.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param label The unique identification of the permission you&#39;re setting (for example, &lt;code&gt;AliceSendMessage&lt;/code&gt;). Maximum 80 characters. Allowed characters include alphanumeric characters, hyphens (&lt;code&gt;-&lt;/code&gt;), and underscores (&lt;code&gt;_&lt;/code&gt;). (required)
     * @param awSAccountIds The Amazon Web Services account numbers of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/glos-chap.html#P\&quot;&gt;principals&lt;/a&gt; who are to receive permission. For information about locating the Amazon Web Services account identification, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-making-api-requests.html#sqs-api-request-authentication\&quot;&gt;Your Amazon Web Services Identifiers&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. (required)
     * @param actions &lt;p&gt;The action the client wants to allow for the specified principal. Valid values: the name of any action or &lt;code&gt;*&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information about these actions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-overview-of-managing-access.html\&quot;&gt;Overview of Managing Access Permissions to Your Amazon Simple Queue Service Resource&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Specifying &lt;code&gt;SendMessage&lt;/code&gt;, &lt;code&gt;DeleteMessage&lt;/code&gt;, or &lt;code&gt;ChangeMessageVisibility&lt;/code&gt; for &lt;code&gt;ActionName.n&lt;/code&gt; also grants permissions for the corresponding batch versions of those actions: &lt;code&gt;SendMessageBatch&lt;/code&gt;, &lt;code&gt;DeleteMessageBatch&lt;/code&gt;, and &lt;code&gt;ChangeMessageVisibilityBatch&lt;/code&gt;.&lt;/p&gt; (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OverLimit </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETAddPermissionWithHttpInfo(String label, List<String> awSAccountIds, List<String> actions, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETAddPermissionValidateBeforeCall(label, awSAccountIds, actions, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds a permission to a queue for a specific &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/glos-chap.html#P\&quot;&gt;principal&lt;/a&gt;. This allows sharing access to the queue.&lt;/p&gt; &lt;p&gt;When you create a queue, you have full control access rights for the queue. Only you, the owner of the queue, can grant or deny permissions to the queue. For more information about these permissions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-writing-an-sqs-policy.html#write-messages-to-shared-queue\&quot;&gt;Allow Developers to Write Messages to a Shared Queue&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AddPermission&lt;/code&gt; generates a policy for you. You can use &lt;code&gt; &lt;a&gt;SetQueueAttributes&lt;/a&gt; &lt;/code&gt; to upload your policy. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-creating-custom-policies.html\&quot;&gt;Using Custom Policies with the Amazon SQS Access Policy Language&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An Amazon SQS policy can have a maximum of seven actions per statement.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To remove the ability to change queue permissions, you must deny permission to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetQueueAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon SQS &lt;code&gt;AddPermission&lt;/code&gt; does not support adding a non-account principal.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param label The unique identification of the permission you&#39;re setting (for example, &lt;code&gt;AliceSendMessage&lt;/code&gt;). Maximum 80 characters. Allowed characters include alphanumeric characters, hyphens (&lt;code&gt;-&lt;/code&gt;), and underscores (&lt;code&gt;_&lt;/code&gt;). (required)
     * @param awSAccountIds The Amazon Web Services account numbers of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/glos-chap.html#P\&quot;&gt;principals&lt;/a&gt; who are to receive permission. For information about locating the Amazon Web Services account identification, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-making-api-requests.html#sqs-api-request-authentication\&quot;&gt;Your Amazon Web Services Identifiers&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. (required)
     * @param actions &lt;p&gt;The action the client wants to allow for the specified principal. Valid values: the name of any action or &lt;code&gt;*&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information about these actions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-overview-of-managing-access.html\&quot;&gt;Overview of Managing Access Permissions to Your Amazon Simple Queue Service Resource&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Specifying &lt;code&gt;SendMessage&lt;/code&gt;, &lt;code&gt;DeleteMessage&lt;/code&gt;, or &lt;code&gt;ChangeMessageVisibility&lt;/code&gt; for &lt;code&gt;ActionName.n&lt;/code&gt; also grants permissions for the corresponding batch versions of those actions: &lt;code&gt;SendMessageBatch&lt;/code&gt;, &lt;code&gt;DeleteMessageBatch&lt;/code&gt;, and &lt;code&gt;ChangeMessageVisibilityBatch&lt;/code&gt;.&lt;/p&gt; (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OverLimit </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAddPermissionAsync(String label, List<String> awSAccountIds, List<String> actions, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETAddPermissionValidateBeforeCall(label, awSAccountIds, actions, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCancelMessageMoveTask
     * @param taskHandle An identifier associated with a message movement task. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCancelMessageMoveTaskCall(String taskHandle, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CancelMessageMoveTask";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (taskHandle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TaskHandle", taskHandle));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCancelMessageMoveTaskValidateBeforeCall(String taskHandle, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskHandle' is set
        if (taskHandle == null) {
            throw new ApiException("Missing the required parameter 'taskHandle' when calling gETCancelMessageMoveTask(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCancelMessageMoveTask(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCancelMessageMoveTask(Async)");
        }

        return gETCancelMessageMoveTaskCall(taskHandle, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Cancels a specified message movement task. A message movement can only be cancelled when the current status is RUNNING. Cancelling a message movement task does not revert the messages that have already been moved. It can only stop the messages that have not been moved yet.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;This action is currently limited to supporting message redrive from &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;dead-letter queues (DLQs)&lt;/a&gt; only. In this context, the source queue is the dead-letter queue (DLQ), while the destination queue can be the original source queue (from which the messages were driven to the dead-letter-queue), or a custom destination queue. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Currently, only standard queues are supported.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Only one active message movement task is supported per queue at any given time.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param taskHandle An identifier associated with a message movement task. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CancelMessageMoveTaskResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public CancelMessageMoveTaskResult gETCancelMessageMoveTask(String taskHandle, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CancelMessageMoveTaskResult> localVarResp = gETCancelMessageMoveTaskWithHttpInfo(taskHandle, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Cancels a specified message movement task. A message movement can only be cancelled when the current status is RUNNING. Cancelling a message movement task does not revert the messages that have already been moved. It can only stop the messages that have not been moved yet.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;This action is currently limited to supporting message redrive from &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;dead-letter queues (DLQs)&lt;/a&gt; only. In this context, the source queue is the dead-letter queue (DLQ), while the destination queue can be the original source queue (from which the messages were driven to the dead-letter-queue), or a custom destination queue. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Currently, only standard queues are supported.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Only one active message movement task is supported per queue at any given time.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param taskHandle An identifier associated with a message movement task. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CancelMessageMoveTaskResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CancelMessageMoveTaskResult> gETCancelMessageMoveTaskWithHttpInfo(String taskHandle, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETCancelMessageMoveTaskValidateBeforeCall(taskHandle, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CancelMessageMoveTaskResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Cancels a specified message movement task. A message movement can only be cancelled when the current status is RUNNING. Cancelling a message movement task does not revert the messages that have already been moved. It can only stop the messages that have not been moved yet.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;This action is currently limited to supporting message redrive from &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;dead-letter queues (DLQs)&lt;/a&gt; only. In this context, the source queue is the dead-letter queue (DLQ), while the destination queue can be the original source queue (from which the messages were driven to the dead-letter-queue), or a custom destination queue. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Currently, only standard queues are supported.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Only one active message movement task is supported per queue at any given time.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param taskHandle An identifier associated with a message movement task. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCancelMessageMoveTaskAsync(String taskHandle, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CancelMessageMoveTaskResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCancelMessageMoveTaskValidateBeforeCall(taskHandle, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CancelMessageMoveTaskResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETChangeMessageVisibility
     * @param receiptHandle The receipt handle associated with the message, whose visibility timeout is changed. This parameter is returned by the &lt;code&gt; &lt;a&gt;ReceiveMessage&lt;/a&gt; &lt;/code&gt; action. (required)
     * @param visibilityTimeout The new value for the message&#39;s visibility timeout (in seconds). Values range: &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;43200&lt;/code&gt;. Maximum: 12 hours. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> MessageNotInflight </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReceiptHandleIsInvalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETChangeMessageVisibilityCall(String receiptHandle, Integer visibilityTimeout, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{AccountNumber}/{QueueName}/#Action=ChangeMessageVisibility"
            .replace("{" + "AccountNumber" + "}", localVarApiClient.escapeString(accountNumber.toString()))
            .replace("{" + "QueueName" + "}", localVarApiClient.escapeString(queueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (receiptHandle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReceiptHandle", receiptHandle));
        }

        if (visibilityTimeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VisibilityTimeout", visibilityTimeout));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETChangeMessageVisibilityValidateBeforeCall(String receiptHandle, Integer visibilityTimeout, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'receiptHandle' is set
        if (receiptHandle == null) {
            throw new ApiException("Missing the required parameter 'receiptHandle' when calling gETChangeMessageVisibility(Async)");
        }

        // verify the required parameter 'visibilityTimeout' is set
        if (visibilityTimeout == null) {
            throw new ApiException("Missing the required parameter 'visibilityTimeout' when calling gETChangeMessageVisibility(Async)");
        }

        // verify the required parameter 'accountNumber' is set
        if (accountNumber == null) {
            throw new ApiException("Missing the required parameter 'accountNumber' when calling gETChangeMessageVisibility(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling gETChangeMessageVisibility(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETChangeMessageVisibility(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETChangeMessageVisibility(Async)");
        }

        return gETChangeMessageVisibilityCall(receiptHandle, visibilityTimeout, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Changes the visibility timeout of a specified message in a queue to a new value. The default visibility timeout for a message is 30 seconds. The minimum is 0 seconds. The maximum is 12 hours. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html\&quot;&gt;Visibility Timeout&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For example, if the default timeout for a queue is 60 seconds, 15 seconds have elapsed since you received the message, and you send a ChangeMessageVisibility call with &lt;code&gt;VisibilityTimeout&lt;/code&gt; set to 10 seconds, the 10 seconds begin to count from the time that you make the &lt;code&gt;ChangeMessageVisibility&lt;/code&gt; call. Thus, any attempt to change the visibility timeout or to delete that message 10 seconds after you initially change the visibility timeout (a total of 25 seconds) might result in an error.&lt;/p&gt; &lt;p&gt;An Amazon SQS message has three basic states:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Sent to a queue by a producer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Received from the queue by a consumer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deleted from the queue.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;A message is considered to be &lt;i&gt;stored&lt;/i&gt; after it is sent to a queue by a producer, but not yet received from the queue by a consumer (that is, between states 1 and 2). There is no limit to the number of stored messages. A message is considered to be &lt;i&gt;in flight&lt;/i&gt; after it is received from a queue by a consumer, but not yet deleted from the queue (that is, between states 2 and 3). There is a limit to the number of in flight messages.&lt;/p&gt; &lt;p&gt;Limits that apply to in flight messages are unrelated to the &lt;i&gt;unlimited&lt;/i&gt; number of stored messages.&lt;/p&gt; &lt;p&gt;For most standard queues (depending on queue traffic and message backlog), there can be a maximum of approximately 120,000 in flight messages (received from a queue by a consumer, but not yet deleted from the queue). If you reach this limit, Amazon SQS returns the &lt;code&gt;OverLimit&lt;/code&gt; error message. To avoid reaching the limit, you should delete messages from the queue after they&#39;re processed. You can also increase the number of queues you use to process your messages. To request a limit increase, &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/case/create?issueType&#x3D;service-limit-increase&amp;amp;limitType&#x3D;service-code-sqs\&quot;&gt;file a support request&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For FIFO queues, there can be a maximum of 20,000 in flight messages (received from a queue by a consumer, but not yet deleted from the queue). If you reach this limit, Amazon SQS returns no error messages.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you attempt to set the &lt;code&gt;VisibilityTimeout&lt;/code&gt; to a value greater than the maximum time left, Amazon SQS returns an error. Amazon SQS doesn&#39;t automatically recalculate and increase the timeout to the maximum remaining time.&lt;/p&gt; &lt;p&gt;Unlike with a queue, when you change the visibility timeout for a specific message the timeout value is applied immediately but isn&#39;t saved in memory for that message. If you don&#39;t delete a message after it is received, the visibility timeout for the message reverts to the original timeout value (not to the value you set using the &lt;code&gt;ChangeMessageVisibility&lt;/code&gt; action) the next time the message is received.&lt;/p&gt; &lt;/important&gt;
     * @param receiptHandle The receipt handle associated with the message, whose visibility timeout is changed. This parameter is returned by the &lt;code&gt; &lt;a&gt;ReceiveMessage&lt;/a&gt; &lt;/code&gt; action. (required)
     * @param visibilityTimeout The new value for the message&#39;s visibility timeout (in seconds). Values range: &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;43200&lt;/code&gt;. Maximum: 12 hours. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> MessageNotInflight </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReceiptHandleIsInvalid </td><td>  -  </td></tr>
     </table>
     */
    public void gETChangeMessageVisibility(String receiptHandle, Integer visibilityTimeout, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETChangeMessageVisibilityWithHttpInfo(receiptHandle, visibilityTimeout, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Changes the visibility timeout of a specified message in a queue to a new value. The default visibility timeout for a message is 30 seconds. The minimum is 0 seconds. The maximum is 12 hours. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html\&quot;&gt;Visibility Timeout&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For example, if the default timeout for a queue is 60 seconds, 15 seconds have elapsed since you received the message, and you send a ChangeMessageVisibility call with &lt;code&gt;VisibilityTimeout&lt;/code&gt; set to 10 seconds, the 10 seconds begin to count from the time that you make the &lt;code&gt;ChangeMessageVisibility&lt;/code&gt; call. Thus, any attempt to change the visibility timeout or to delete that message 10 seconds after you initially change the visibility timeout (a total of 25 seconds) might result in an error.&lt;/p&gt; &lt;p&gt;An Amazon SQS message has three basic states:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Sent to a queue by a producer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Received from the queue by a consumer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deleted from the queue.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;A message is considered to be &lt;i&gt;stored&lt;/i&gt; after it is sent to a queue by a producer, but not yet received from the queue by a consumer (that is, between states 1 and 2). There is no limit to the number of stored messages. A message is considered to be &lt;i&gt;in flight&lt;/i&gt; after it is received from a queue by a consumer, but not yet deleted from the queue (that is, between states 2 and 3). There is a limit to the number of in flight messages.&lt;/p&gt; &lt;p&gt;Limits that apply to in flight messages are unrelated to the &lt;i&gt;unlimited&lt;/i&gt; number of stored messages.&lt;/p&gt; &lt;p&gt;For most standard queues (depending on queue traffic and message backlog), there can be a maximum of approximately 120,000 in flight messages (received from a queue by a consumer, but not yet deleted from the queue). If you reach this limit, Amazon SQS returns the &lt;code&gt;OverLimit&lt;/code&gt; error message. To avoid reaching the limit, you should delete messages from the queue after they&#39;re processed. You can also increase the number of queues you use to process your messages. To request a limit increase, &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/case/create?issueType&#x3D;service-limit-increase&amp;amp;limitType&#x3D;service-code-sqs\&quot;&gt;file a support request&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For FIFO queues, there can be a maximum of 20,000 in flight messages (received from a queue by a consumer, but not yet deleted from the queue). If you reach this limit, Amazon SQS returns no error messages.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you attempt to set the &lt;code&gt;VisibilityTimeout&lt;/code&gt; to a value greater than the maximum time left, Amazon SQS returns an error. Amazon SQS doesn&#39;t automatically recalculate and increase the timeout to the maximum remaining time.&lt;/p&gt; &lt;p&gt;Unlike with a queue, when you change the visibility timeout for a specific message the timeout value is applied immediately but isn&#39;t saved in memory for that message. If you don&#39;t delete a message after it is received, the visibility timeout for the message reverts to the original timeout value (not to the value you set using the &lt;code&gt;ChangeMessageVisibility&lt;/code&gt; action) the next time the message is received.&lt;/p&gt; &lt;/important&gt;
     * @param receiptHandle The receipt handle associated with the message, whose visibility timeout is changed. This parameter is returned by the &lt;code&gt; &lt;a&gt;ReceiveMessage&lt;/a&gt; &lt;/code&gt; action. (required)
     * @param visibilityTimeout The new value for the message&#39;s visibility timeout (in seconds). Values range: &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;43200&lt;/code&gt;. Maximum: 12 hours. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> MessageNotInflight </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReceiptHandleIsInvalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETChangeMessageVisibilityWithHttpInfo(String receiptHandle, Integer visibilityTimeout, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETChangeMessageVisibilityValidateBeforeCall(receiptHandle, visibilityTimeout, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Changes the visibility timeout of a specified message in a queue to a new value. The default visibility timeout for a message is 30 seconds. The minimum is 0 seconds. The maximum is 12 hours. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html\&quot;&gt;Visibility Timeout&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For example, if the default timeout for a queue is 60 seconds, 15 seconds have elapsed since you received the message, and you send a ChangeMessageVisibility call with &lt;code&gt;VisibilityTimeout&lt;/code&gt; set to 10 seconds, the 10 seconds begin to count from the time that you make the &lt;code&gt;ChangeMessageVisibility&lt;/code&gt; call. Thus, any attempt to change the visibility timeout or to delete that message 10 seconds after you initially change the visibility timeout (a total of 25 seconds) might result in an error.&lt;/p&gt; &lt;p&gt;An Amazon SQS message has three basic states:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Sent to a queue by a producer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Received from the queue by a consumer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deleted from the queue.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;A message is considered to be &lt;i&gt;stored&lt;/i&gt; after it is sent to a queue by a producer, but not yet received from the queue by a consumer (that is, between states 1 and 2). There is no limit to the number of stored messages. A message is considered to be &lt;i&gt;in flight&lt;/i&gt; after it is received from a queue by a consumer, but not yet deleted from the queue (that is, between states 2 and 3). There is a limit to the number of in flight messages.&lt;/p&gt; &lt;p&gt;Limits that apply to in flight messages are unrelated to the &lt;i&gt;unlimited&lt;/i&gt; number of stored messages.&lt;/p&gt; &lt;p&gt;For most standard queues (depending on queue traffic and message backlog), there can be a maximum of approximately 120,000 in flight messages (received from a queue by a consumer, but not yet deleted from the queue). If you reach this limit, Amazon SQS returns the &lt;code&gt;OverLimit&lt;/code&gt; error message. To avoid reaching the limit, you should delete messages from the queue after they&#39;re processed. You can also increase the number of queues you use to process your messages. To request a limit increase, &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/case/create?issueType&#x3D;service-limit-increase&amp;amp;limitType&#x3D;service-code-sqs\&quot;&gt;file a support request&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For FIFO queues, there can be a maximum of 20,000 in flight messages (received from a queue by a consumer, but not yet deleted from the queue). If you reach this limit, Amazon SQS returns no error messages.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you attempt to set the &lt;code&gt;VisibilityTimeout&lt;/code&gt; to a value greater than the maximum time left, Amazon SQS returns an error. Amazon SQS doesn&#39;t automatically recalculate and increase the timeout to the maximum remaining time.&lt;/p&gt; &lt;p&gt;Unlike with a queue, when you change the visibility timeout for a specific message the timeout value is applied immediately but isn&#39;t saved in memory for that message. If you don&#39;t delete a message after it is received, the visibility timeout for the message reverts to the original timeout value (not to the value you set using the &lt;code&gt;ChangeMessageVisibility&lt;/code&gt; action) the next time the message is received.&lt;/p&gt; &lt;/important&gt;
     * @param receiptHandle The receipt handle associated with the message, whose visibility timeout is changed. This parameter is returned by the &lt;code&gt; &lt;a&gt;ReceiveMessage&lt;/a&gt; &lt;/code&gt; action. (required)
     * @param visibilityTimeout The new value for the message&#39;s visibility timeout (in seconds). Values range: &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;43200&lt;/code&gt;. Maximum: 12 hours. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> MessageNotInflight </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReceiptHandleIsInvalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETChangeMessageVisibilityAsync(String receiptHandle, Integer visibilityTimeout, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETChangeMessageVisibilityValidateBeforeCall(receiptHandle, visibilityTimeout, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETChangeMessageVisibilityBatch
     * @param entries Lists the receipt handles of the messages for which the visibility timeout must be changed. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEntriesInBatchRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EmptyBatchRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BatchEntryIdsNotDistinct </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidBatchEntryId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETChangeMessageVisibilityBatchCall(List<GETChangeMessageVisibilityBatchEntriesParameterInner> entries, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{AccountNumber}/{QueueName}/#Action=ChangeMessageVisibilityBatch"
            .replace("{" + "AccountNumber" + "}", localVarApiClient.escapeString(accountNumber.toString()))
            .replace("{" + "QueueName" + "}", localVarApiClient.escapeString(queueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (entries != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Entries", entries));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETChangeMessageVisibilityBatchValidateBeforeCall(List<GETChangeMessageVisibilityBatchEntriesParameterInner> entries, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entries' is set
        if (entries == null) {
            throw new ApiException("Missing the required parameter 'entries' when calling gETChangeMessageVisibilityBatch(Async)");
        }

        // verify the required parameter 'accountNumber' is set
        if (accountNumber == null) {
            throw new ApiException("Missing the required parameter 'accountNumber' when calling gETChangeMessageVisibilityBatch(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling gETChangeMessageVisibilityBatch(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETChangeMessageVisibilityBatch(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETChangeMessageVisibilityBatch(Async)");
        }

        return gETChangeMessageVisibilityBatchCall(entries, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Changes the visibility timeout of multiple messages. This is a batch version of &lt;code&gt; &lt;a&gt;ChangeMessageVisibility&lt;/a&gt;.&lt;/code&gt; The result of the action on each message is reported individually in the response. You can send up to 10 &lt;code&gt; &lt;a&gt;ChangeMessageVisibility&lt;/a&gt; &lt;/code&gt; requests with each &lt;code&gt;ChangeMessageVisibilityBatch&lt;/code&gt; action.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param entries Lists the receipt handles of the messages for which the visibility timeout must be changed. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ChangeMessageVisibilityBatchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEntriesInBatchRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EmptyBatchRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BatchEntryIdsNotDistinct </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidBatchEntryId </td><td>  -  </td></tr>
     </table>
     */
    public ChangeMessageVisibilityBatchResult gETChangeMessageVisibilityBatch(List<GETChangeMessageVisibilityBatchEntriesParameterInner> entries, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ChangeMessageVisibilityBatchResult> localVarResp = gETChangeMessageVisibilityBatchWithHttpInfo(entries, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Changes the visibility timeout of multiple messages. This is a batch version of &lt;code&gt; &lt;a&gt;ChangeMessageVisibility&lt;/a&gt;.&lt;/code&gt; The result of the action on each message is reported individually in the response. You can send up to 10 &lt;code&gt; &lt;a&gt;ChangeMessageVisibility&lt;/a&gt; &lt;/code&gt; requests with each &lt;code&gt;ChangeMessageVisibilityBatch&lt;/code&gt; action.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param entries Lists the receipt handles of the messages for which the visibility timeout must be changed. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ChangeMessageVisibilityBatchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEntriesInBatchRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EmptyBatchRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BatchEntryIdsNotDistinct </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidBatchEntryId </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ChangeMessageVisibilityBatchResult> gETChangeMessageVisibilityBatchWithHttpInfo(List<GETChangeMessageVisibilityBatchEntriesParameterInner> entries, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETChangeMessageVisibilityBatchValidateBeforeCall(entries, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ChangeMessageVisibilityBatchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Changes the visibility timeout of multiple messages. This is a batch version of &lt;code&gt; &lt;a&gt;ChangeMessageVisibility&lt;/a&gt;.&lt;/code&gt; The result of the action on each message is reported individually in the response. You can send up to 10 &lt;code&gt; &lt;a&gt;ChangeMessageVisibility&lt;/a&gt; &lt;/code&gt; requests with each &lt;code&gt;ChangeMessageVisibilityBatch&lt;/code&gt; action.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param entries Lists the receipt handles of the messages for which the visibility timeout must be changed. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEntriesInBatchRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EmptyBatchRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BatchEntryIdsNotDistinct </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidBatchEntryId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETChangeMessageVisibilityBatchAsync(List<GETChangeMessageVisibilityBatchEntriesParameterInner> entries, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ChangeMessageVisibilityBatchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETChangeMessageVisibilityBatchValidateBeforeCall(entries, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ChangeMessageVisibilityBatchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateQueue
     * @param queueName &lt;p&gt;The name of the new queue. The following limits apply to this name:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A queue name can have up to 80 characters.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Valid values: alphanumeric characters, hyphens (&lt;code&gt;-&lt;/code&gt;), and underscores (&lt;code&gt;_&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A FIFO queue name must end with the &lt;code&gt;.fifo&lt;/code&gt; suffix.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Queue URLs and names are case-sensitive.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attribute &lt;p&gt;A map of attributes with their corresponding values.&lt;/p&gt; &lt;p&gt;The following lists the names, descriptions, and values of the special request parameters that the &lt;code&gt;CreateQueue&lt;/code&gt; action uses:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DelaySeconds&lt;/code&gt; – The length of time, in seconds, for which the delivery of all messages in the queue is delayed. Valid values: An integer from 0 to 900 seconds (15 minutes). Default: 0. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MaximumMessageSize&lt;/code&gt; – The limit of how many bytes a message can contain before Amazon SQS rejects it. Valid values: An integer from 1,024 bytes (1 KiB) to 262,144 bytes (256 KiB). Default: 262,144 (256 KiB). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; – The length of time, in seconds, for which Amazon SQS retains a message. Valid values: An integer from 60 seconds (1 minute) to 1,209,600 seconds (14 days). Default: 345,600 (4 days). When you change a queue&#39;s attributes, the change can take up to 60 seconds for most of the attributes to propagate throughout the Amazon SQS system. Changes made to the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; attribute can take up to 15 minutes and will impact existing messages in the queue potentially causing them to be expired and deleted if the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; is reduced below the age of existing messages.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Policy&lt;/code&gt; – The queue&#39;s policy. A valid Amazon Web Services policy. For more information about policy structure, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/PoliciesOverview.html\&quot;&gt;Overview of Amazon Web Services IAM Policies&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ReceiveMessageWaitTimeSeconds&lt;/code&gt; – The length of time, in seconds, for which a &lt;code&gt; &lt;a&gt;ReceiveMessage&lt;/a&gt; &lt;/code&gt; action waits for a message to arrive. Valid values: An integer from 0 to 20 (seconds). Default: 0. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;VisibilityTimeout&lt;/code&gt; – The visibility timeout for the queue, in seconds. Valid values: An integer from 0 to 43,200 (12 hours). Default: 30. For more information about the visibility timeout, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html\&quot;&gt;Visibility Timeout&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;dead-letter queues:&lt;/a&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedrivePolicy&lt;/code&gt; – The string that includes the parameters for the dead-letter queue functionality of the source queue as a JSON object. The parameters are as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;deadLetterTargetArn&lt;/code&gt; – The Amazon Resource Name (ARN) of the dead-letter queue to which Amazon SQS moves messages after the value of &lt;code&gt;maxReceiveCount&lt;/code&gt; is exceeded.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;maxReceiveCount&lt;/code&gt; – The number of times a message is delivered to the source queue before being moved to the dead-letter queue. Default: 10. When the &lt;code&gt;ReceiveCount&lt;/code&gt; for a message exceeds the &lt;code&gt;maxReceiveCount&lt;/code&gt; for a queue, Amazon SQS moves the message to the dead-letter-queue.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedriveAllowPolicy&lt;/code&gt; – The string that includes the parameters for the permissions for the dead-letter queue redrive permission and which source queues can specify dead-letter queues as a JSON object. The parameters are as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;redrivePermission&lt;/code&gt; – The permission type that defines which source queues can specify the current queue as the dead-letter queue. Valid values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;allowAll&lt;/code&gt; – (Default) Any source queues in this Amazon Web Services account in the same Region can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;denyAll&lt;/code&gt; – No source queues can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;byQueue&lt;/code&gt; – Only queues specified by the &lt;code&gt;sourceQueueArns&lt;/code&gt; parameter can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sourceQueueArns&lt;/code&gt; – The Amazon Resource Names (ARN)s of the source queues that can specify this queue as the dead-letter queue and redrive messages. You can specify this parameter only when the &lt;code&gt;redrivePermission&lt;/code&gt; parameter is set to &lt;code&gt;byQueue&lt;/code&gt;. You can specify up to 10 source queue ARNs. To allow more than 10 source queues to specify dead-letter queues, set the &lt;code&gt;redrivePermission&lt;/code&gt; parameter to &lt;code&gt;allowAll&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The dead-letter queue of a FIFO queue must also be a FIFO queue. Similarly, the dead-letter queue of a standard queue must also be a standard queue.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html\&quot;&gt;server-side-encryption&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsMasterKeyId&lt;/code&gt; – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-sse-key-terms\&quot;&gt;Key Terms&lt;/a&gt;. While the alias of the Amazon Web Services managed CMK for Amazon SQS is always &lt;code&gt;alias/aws/sqs&lt;/code&gt;, the alias of a custom CMK can, for example, be &lt;code&gt;alias/&lt;i&gt;MyAlias&lt;/i&gt; &lt;/code&gt;. For more examples, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters\&quot;&gt;KeyId&lt;/a&gt; in the &lt;i&gt;Key Management Service API Reference&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsDataKeyReusePeriodSeconds&lt;/code&gt; – The length of time, in seconds, for which Amazon SQS can reuse a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#data-keys\&quot;&gt;data key&lt;/a&gt; to encrypt or decrypt messages before calling KMS again. An integer representing seconds, between 60 seconds (1 minute) and 86,400 seconds (24 hours). Default: 300 (5 minutes). A shorter time period provides better security but results in more calls to KMS which might incur charges after Free Tier. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-how-does-the-data-key-reuse-period-work\&quot;&gt;How Does the Data Key Reuse Period Work?&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SqsManagedSseEnabled&lt;/code&gt; – Enables server-side queue encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (for example, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html\&quot;&gt;SSE-KMS&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.html\&quot;&gt;SSE-SQS&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html\&quot;&gt;FIFO (first-in-first-out) queues&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FifoQueue&lt;/code&gt; – Designates a queue as FIFO. Valid values are &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;. If you don&#39;t specify the &lt;code&gt;FifoQueue&lt;/code&gt; attribute, Amazon SQS creates a standard queue. You can provide this attribute only during queue creation. You can&#39;t change it for an existing queue. When you set this attribute, you must also provide the &lt;code&gt;MessageGroupId&lt;/code&gt; for your messages explicitly.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-understanding-logic.html\&quot;&gt;FIFO queue logic&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; – Enables content-based deduplication. Valid values are &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html\&quot;&gt;Exactly-once processing&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. Note the following: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Every message must have a unique &lt;code&gt;MessageDeduplicationId&lt;/code&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You may provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; explicitly.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you aren&#39;t able to provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; and you enable &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; for your queue, Amazon SQS uses a SHA-256 hash to generate the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; using the body of the message (but not the attributes of the message). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; and the queue doesn&#39;t have &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; set, the action fails with an error.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the queue has &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; set, your &lt;code&gt;MessageDeduplicationId&lt;/code&gt; overrides the generated one.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you send one message with &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; enabled and then another message with a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; that is the same as the one generated for the first &lt;code&gt;MessageDeduplicationId&lt;/code&gt;, the two messages are treated as duplicates and only one copy of the message is delivered. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html\&quot;&gt;high throughput for FIFO queues&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeduplicationScope&lt;/code&gt; – Specifies whether message deduplication occurs at the message group or queue level. Valid values are &lt;code&gt;messageGroup&lt;/code&gt; and &lt;code&gt;queue&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FifoThroughputLimit&lt;/code&gt; – Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are &lt;code&gt;perQueue&lt;/code&gt; and &lt;code&gt;perMessageGroupId&lt;/code&gt;. The &lt;code&gt;perMessageGroupId&lt;/code&gt; value is allowed only when the value for &lt;code&gt;DeduplicationScope&lt;/code&gt; is &lt;code&gt;messageGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To enable high throughput for FIFO queues, do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;DeduplicationScope&lt;/code&gt; to &lt;code&gt;messageGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;FifoThroughputLimit&lt;/code&gt; to &lt;code&gt;perMessageGroupId&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you set these attributes to anything other than the values shown for enabling high throughput, normal throughput is in effect and deduplication occurs as specified.&lt;/p&gt; &lt;p&gt;For information on throughput quotas, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html\&quot;&gt;Quotas related to messages&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param tag &lt;p&gt;Add cost allocation tags to the specified Amazon SQS queue. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html\&quot;&gt;Tagging Your Amazon SQS Queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you use queue tags, keep the following guidelines in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Adding more than 50 tags to a queue isn&#39;t recommended.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags don&#39;t have any semantic meaning. Amazon SQS interprets tags as character strings.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags are case-sensitive.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A new tag with a key identical to that of an existing tag overwrites the existing tag.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For a full list of tag restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-limits.html#limits-queues\&quot;&gt;Quotas related to queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To be able to tag a queue on creation, you must have the &lt;code&gt;sqs:CreateQueue&lt;/code&gt; and &lt;code&gt;sqs:TagQueue&lt;/code&gt; permissions.&lt;/p&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDeletedRecently </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> QueueNameExists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateQueueCall(String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Map<String, String> attribute, Map<String, String> tag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateQueue";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (queueName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("QueueName", queueName));
        }

        if (attribute != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Attribute", attribute));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Tag", tag));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateQueueValidateBeforeCall(String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Map<String, String> attribute, Map<String, String> tag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling gETCreateQueue(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateQueue(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateQueue(Async)");
        }

        return gETCreateQueueCall(queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attribute, tag, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new standard or FIFO queue. You can pass one or more attributes in the request. Keep the following in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify the &lt;code&gt;FifoQueue&lt;/code&gt; attribute, Amazon SQS creates a standard queue.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can&#39;t change the queue type after you create it and you can&#39;t convert an existing standard queue into a FIFO queue. You must either create a new FIFO queue for your application or delete your existing standard queue and recreate it as a FIFO queue. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html#FIFO-queues-moving\&quot;&gt;Moving From a Standard Queue to a FIFO Queue&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t provide a value for an attribute, the queue is created with the default value for the attribute.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you delete a queue, you must wait at least 60 seconds before creating a queue with the same name.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To successfully create a new queue, you must provide a queue name that adheres to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/limits-queues.html\&quot;&gt;limits related to queues&lt;/a&gt; and is unique within the scope of your queues.&lt;/p&gt; &lt;note&gt; &lt;p&gt;After you create a queue, you must wait at least one second after the queue is created to be able to use the queue.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;To get the queue URL, use the &lt;code&gt; &lt;a&gt;GetQueueUrl&lt;/a&gt; &lt;/code&gt; action. &lt;code&gt; &lt;a&gt;GetQueueUrl&lt;/a&gt; &lt;/code&gt; requires only the &lt;code&gt;QueueName&lt;/code&gt; parameter. be aware of existing queue names:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you provide the name of an existing queue along with the exact names and values of all the queue&#39;s attributes, &lt;code&gt;CreateQueue&lt;/code&gt; returns the queue URL for the existing queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the queue name, attribute names, or attribute values don&#39;t match an existing queue, &lt;code&gt;CreateQueue&lt;/code&gt; returns an error.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param queueName &lt;p&gt;The name of the new queue. The following limits apply to this name:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A queue name can have up to 80 characters.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Valid values: alphanumeric characters, hyphens (&lt;code&gt;-&lt;/code&gt;), and underscores (&lt;code&gt;_&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A FIFO queue name must end with the &lt;code&gt;.fifo&lt;/code&gt; suffix.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Queue URLs and names are case-sensitive.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attribute &lt;p&gt;A map of attributes with their corresponding values.&lt;/p&gt; &lt;p&gt;The following lists the names, descriptions, and values of the special request parameters that the &lt;code&gt;CreateQueue&lt;/code&gt; action uses:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DelaySeconds&lt;/code&gt; – The length of time, in seconds, for which the delivery of all messages in the queue is delayed. Valid values: An integer from 0 to 900 seconds (15 minutes). Default: 0. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MaximumMessageSize&lt;/code&gt; – The limit of how many bytes a message can contain before Amazon SQS rejects it. Valid values: An integer from 1,024 bytes (1 KiB) to 262,144 bytes (256 KiB). Default: 262,144 (256 KiB). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; – The length of time, in seconds, for which Amazon SQS retains a message. Valid values: An integer from 60 seconds (1 minute) to 1,209,600 seconds (14 days). Default: 345,600 (4 days). When you change a queue&#39;s attributes, the change can take up to 60 seconds for most of the attributes to propagate throughout the Amazon SQS system. Changes made to the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; attribute can take up to 15 minutes and will impact existing messages in the queue potentially causing them to be expired and deleted if the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; is reduced below the age of existing messages.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Policy&lt;/code&gt; – The queue&#39;s policy. A valid Amazon Web Services policy. For more information about policy structure, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/PoliciesOverview.html\&quot;&gt;Overview of Amazon Web Services IAM Policies&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ReceiveMessageWaitTimeSeconds&lt;/code&gt; – The length of time, in seconds, for which a &lt;code&gt; &lt;a&gt;ReceiveMessage&lt;/a&gt; &lt;/code&gt; action waits for a message to arrive. Valid values: An integer from 0 to 20 (seconds). Default: 0. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;VisibilityTimeout&lt;/code&gt; – The visibility timeout for the queue, in seconds. Valid values: An integer from 0 to 43,200 (12 hours). Default: 30. For more information about the visibility timeout, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html\&quot;&gt;Visibility Timeout&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;dead-letter queues:&lt;/a&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedrivePolicy&lt;/code&gt; – The string that includes the parameters for the dead-letter queue functionality of the source queue as a JSON object. The parameters are as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;deadLetterTargetArn&lt;/code&gt; – The Amazon Resource Name (ARN) of the dead-letter queue to which Amazon SQS moves messages after the value of &lt;code&gt;maxReceiveCount&lt;/code&gt; is exceeded.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;maxReceiveCount&lt;/code&gt; – The number of times a message is delivered to the source queue before being moved to the dead-letter queue. Default: 10. When the &lt;code&gt;ReceiveCount&lt;/code&gt; for a message exceeds the &lt;code&gt;maxReceiveCount&lt;/code&gt; for a queue, Amazon SQS moves the message to the dead-letter-queue.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedriveAllowPolicy&lt;/code&gt; – The string that includes the parameters for the permissions for the dead-letter queue redrive permission and which source queues can specify dead-letter queues as a JSON object. The parameters are as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;redrivePermission&lt;/code&gt; – The permission type that defines which source queues can specify the current queue as the dead-letter queue. Valid values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;allowAll&lt;/code&gt; – (Default) Any source queues in this Amazon Web Services account in the same Region can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;denyAll&lt;/code&gt; – No source queues can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;byQueue&lt;/code&gt; – Only queues specified by the &lt;code&gt;sourceQueueArns&lt;/code&gt; parameter can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sourceQueueArns&lt;/code&gt; – The Amazon Resource Names (ARN)s of the source queues that can specify this queue as the dead-letter queue and redrive messages. You can specify this parameter only when the &lt;code&gt;redrivePermission&lt;/code&gt; parameter is set to &lt;code&gt;byQueue&lt;/code&gt;. You can specify up to 10 source queue ARNs. To allow more than 10 source queues to specify dead-letter queues, set the &lt;code&gt;redrivePermission&lt;/code&gt; parameter to &lt;code&gt;allowAll&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The dead-letter queue of a FIFO queue must also be a FIFO queue. Similarly, the dead-letter queue of a standard queue must also be a standard queue.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html\&quot;&gt;server-side-encryption&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsMasterKeyId&lt;/code&gt; – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-sse-key-terms\&quot;&gt;Key Terms&lt;/a&gt;. While the alias of the Amazon Web Services managed CMK for Amazon SQS is always &lt;code&gt;alias/aws/sqs&lt;/code&gt;, the alias of a custom CMK can, for example, be &lt;code&gt;alias/&lt;i&gt;MyAlias&lt;/i&gt; &lt;/code&gt;. For more examples, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters\&quot;&gt;KeyId&lt;/a&gt; in the &lt;i&gt;Key Management Service API Reference&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsDataKeyReusePeriodSeconds&lt;/code&gt; – The length of time, in seconds, for which Amazon SQS can reuse a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#data-keys\&quot;&gt;data key&lt;/a&gt; to encrypt or decrypt messages before calling KMS again. An integer representing seconds, between 60 seconds (1 minute) and 86,400 seconds (24 hours). Default: 300 (5 minutes). A shorter time period provides better security but results in more calls to KMS which might incur charges after Free Tier. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-how-does-the-data-key-reuse-period-work\&quot;&gt;How Does the Data Key Reuse Period Work?&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SqsManagedSseEnabled&lt;/code&gt; – Enables server-side queue encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (for example, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html\&quot;&gt;SSE-KMS&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.html\&quot;&gt;SSE-SQS&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html\&quot;&gt;FIFO (first-in-first-out) queues&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FifoQueue&lt;/code&gt; – Designates a queue as FIFO. Valid values are &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;. If you don&#39;t specify the &lt;code&gt;FifoQueue&lt;/code&gt; attribute, Amazon SQS creates a standard queue. You can provide this attribute only during queue creation. You can&#39;t change it for an existing queue. When you set this attribute, you must also provide the &lt;code&gt;MessageGroupId&lt;/code&gt; for your messages explicitly.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-understanding-logic.html\&quot;&gt;FIFO queue logic&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; – Enables content-based deduplication. Valid values are &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html\&quot;&gt;Exactly-once processing&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. Note the following: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Every message must have a unique &lt;code&gt;MessageDeduplicationId&lt;/code&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You may provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; explicitly.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you aren&#39;t able to provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; and you enable &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; for your queue, Amazon SQS uses a SHA-256 hash to generate the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; using the body of the message (but not the attributes of the message). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; and the queue doesn&#39;t have &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; set, the action fails with an error.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the queue has &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; set, your &lt;code&gt;MessageDeduplicationId&lt;/code&gt; overrides the generated one.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you send one message with &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; enabled and then another message with a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; that is the same as the one generated for the first &lt;code&gt;MessageDeduplicationId&lt;/code&gt;, the two messages are treated as duplicates and only one copy of the message is delivered. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html\&quot;&gt;high throughput for FIFO queues&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeduplicationScope&lt;/code&gt; – Specifies whether message deduplication occurs at the message group or queue level. Valid values are &lt;code&gt;messageGroup&lt;/code&gt; and &lt;code&gt;queue&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FifoThroughputLimit&lt;/code&gt; – Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are &lt;code&gt;perQueue&lt;/code&gt; and &lt;code&gt;perMessageGroupId&lt;/code&gt;. The &lt;code&gt;perMessageGroupId&lt;/code&gt; value is allowed only when the value for &lt;code&gt;DeduplicationScope&lt;/code&gt; is &lt;code&gt;messageGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To enable high throughput for FIFO queues, do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;DeduplicationScope&lt;/code&gt; to &lt;code&gt;messageGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;FifoThroughputLimit&lt;/code&gt; to &lt;code&gt;perMessageGroupId&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you set these attributes to anything other than the values shown for enabling high throughput, normal throughput is in effect and deduplication occurs as specified.&lt;/p&gt; &lt;p&gt;For information on throughput quotas, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html\&quot;&gt;Quotas related to messages&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param tag &lt;p&gt;Add cost allocation tags to the specified Amazon SQS queue. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html\&quot;&gt;Tagging Your Amazon SQS Queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you use queue tags, keep the following guidelines in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Adding more than 50 tags to a queue isn&#39;t recommended.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags don&#39;t have any semantic meaning. Amazon SQS interprets tags as character strings.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags are case-sensitive.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A new tag with a key identical to that of an existing tag overwrites the existing tag.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For a full list of tag restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-limits.html#limits-queues\&quot;&gt;Quotas related to queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To be able to tag a queue on creation, you must have the &lt;code&gt;sqs:CreateQueue&lt;/code&gt; and &lt;code&gt;sqs:TagQueue&lt;/code&gt; permissions.&lt;/p&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @return CreateQueueResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDeletedRecently </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> QueueNameExists </td><td>  -  </td></tr>
     </table>
     */
    public CreateQueueResult gETCreateQueue(String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Map<String, String> attribute, Map<String, String> tag) throws ApiException {
        ApiResponse<CreateQueueResult> localVarResp = gETCreateQueueWithHttpInfo(queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attribute, tag);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new standard or FIFO queue. You can pass one or more attributes in the request. Keep the following in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify the &lt;code&gt;FifoQueue&lt;/code&gt; attribute, Amazon SQS creates a standard queue.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can&#39;t change the queue type after you create it and you can&#39;t convert an existing standard queue into a FIFO queue. You must either create a new FIFO queue for your application or delete your existing standard queue and recreate it as a FIFO queue. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html#FIFO-queues-moving\&quot;&gt;Moving From a Standard Queue to a FIFO Queue&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t provide a value for an attribute, the queue is created with the default value for the attribute.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you delete a queue, you must wait at least 60 seconds before creating a queue with the same name.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To successfully create a new queue, you must provide a queue name that adheres to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/limits-queues.html\&quot;&gt;limits related to queues&lt;/a&gt; and is unique within the scope of your queues.&lt;/p&gt; &lt;note&gt; &lt;p&gt;After you create a queue, you must wait at least one second after the queue is created to be able to use the queue.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;To get the queue URL, use the &lt;code&gt; &lt;a&gt;GetQueueUrl&lt;/a&gt; &lt;/code&gt; action. &lt;code&gt; &lt;a&gt;GetQueueUrl&lt;/a&gt; &lt;/code&gt; requires only the &lt;code&gt;QueueName&lt;/code&gt; parameter. be aware of existing queue names:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you provide the name of an existing queue along with the exact names and values of all the queue&#39;s attributes, &lt;code&gt;CreateQueue&lt;/code&gt; returns the queue URL for the existing queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the queue name, attribute names, or attribute values don&#39;t match an existing queue, &lt;code&gt;CreateQueue&lt;/code&gt; returns an error.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param queueName &lt;p&gt;The name of the new queue. The following limits apply to this name:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A queue name can have up to 80 characters.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Valid values: alphanumeric characters, hyphens (&lt;code&gt;-&lt;/code&gt;), and underscores (&lt;code&gt;_&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A FIFO queue name must end with the &lt;code&gt;.fifo&lt;/code&gt; suffix.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Queue URLs and names are case-sensitive.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attribute &lt;p&gt;A map of attributes with their corresponding values.&lt;/p&gt; &lt;p&gt;The following lists the names, descriptions, and values of the special request parameters that the &lt;code&gt;CreateQueue&lt;/code&gt; action uses:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DelaySeconds&lt;/code&gt; – The length of time, in seconds, for which the delivery of all messages in the queue is delayed. Valid values: An integer from 0 to 900 seconds (15 minutes). Default: 0. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MaximumMessageSize&lt;/code&gt; – The limit of how many bytes a message can contain before Amazon SQS rejects it. Valid values: An integer from 1,024 bytes (1 KiB) to 262,144 bytes (256 KiB). Default: 262,144 (256 KiB). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; – The length of time, in seconds, for which Amazon SQS retains a message. Valid values: An integer from 60 seconds (1 minute) to 1,209,600 seconds (14 days). Default: 345,600 (4 days). When you change a queue&#39;s attributes, the change can take up to 60 seconds for most of the attributes to propagate throughout the Amazon SQS system. Changes made to the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; attribute can take up to 15 minutes and will impact existing messages in the queue potentially causing them to be expired and deleted if the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; is reduced below the age of existing messages.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Policy&lt;/code&gt; – The queue&#39;s policy. A valid Amazon Web Services policy. For more information about policy structure, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/PoliciesOverview.html\&quot;&gt;Overview of Amazon Web Services IAM Policies&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ReceiveMessageWaitTimeSeconds&lt;/code&gt; – The length of time, in seconds, for which a &lt;code&gt; &lt;a&gt;ReceiveMessage&lt;/a&gt; &lt;/code&gt; action waits for a message to arrive. Valid values: An integer from 0 to 20 (seconds). Default: 0. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;VisibilityTimeout&lt;/code&gt; – The visibility timeout for the queue, in seconds. Valid values: An integer from 0 to 43,200 (12 hours). Default: 30. For more information about the visibility timeout, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html\&quot;&gt;Visibility Timeout&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;dead-letter queues:&lt;/a&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedrivePolicy&lt;/code&gt; – The string that includes the parameters for the dead-letter queue functionality of the source queue as a JSON object. The parameters are as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;deadLetterTargetArn&lt;/code&gt; – The Amazon Resource Name (ARN) of the dead-letter queue to which Amazon SQS moves messages after the value of &lt;code&gt;maxReceiveCount&lt;/code&gt; is exceeded.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;maxReceiveCount&lt;/code&gt; – The number of times a message is delivered to the source queue before being moved to the dead-letter queue. Default: 10. When the &lt;code&gt;ReceiveCount&lt;/code&gt; for a message exceeds the &lt;code&gt;maxReceiveCount&lt;/code&gt; for a queue, Amazon SQS moves the message to the dead-letter-queue.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedriveAllowPolicy&lt;/code&gt; – The string that includes the parameters for the permissions for the dead-letter queue redrive permission and which source queues can specify dead-letter queues as a JSON object. The parameters are as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;redrivePermission&lt;/code&gt; – The permission type that defines which source queues can specify the current queue as the dead-letter queue. Valid values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;allowAll&lt;/code&gt; – (Default) Any source queues in this Amazon Web Services account in the same Region can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;denyAll&lt;/code&gt; – No source queues can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;byQueue&lt;/code&gt; – Only queues specified by the &lt;code&gt;sourceQueueArns&lt;/code&gt; parameter can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sourceQueueArns&lt;/code&gt; – The Amazon Resource Names (ARN)s of the source queues that can specify this queue as the dead-letter queue and redrive messages. You can specify this parameter only when the &lt;code&gt;redrivePermission&lt;/code&gt; parameter is set to &lt;code&gt;byQueue&lt;/code&gt;. You can specify up to 10 source queue ARNs. To allow more than 10 source queues to specify dead-letter queues, set the &lt;code&gt;redrivePermission&lt;/code&gt; parameter to &lt;code&gt;allowAll&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The dead-letter queue of a FIFO queue must also be a FIFO queue. Similarly, the dead-letter queue of a standard queue must also be a standard queue.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html\&quot;&gt;server-side-encryption&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsMasterKeyId&lt;/code&gt; – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-sse-key-terms\&quot;&gt;Key Terms&lt;/a&gt;. While the alias of the Amazon Web Services managed CMK for Amazon SQS is always &lt;code&gt;alias/aws/sqs&lt;/code&gt;, the alias of a custom CMK can, for example, be &lt;code&gt;alias/&lt;i&gt;MyAlias&lt;/i&gt; &lt;/code&gt;. For more examples, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters\&quot;&gt;KeyId&lt;/a&gt; in the &lt;i&gt;Key Management Service API Reference&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsDataKeyReusePeriodSeconds&lt;/code&gt; – The length of time, in seconds, for which Amazon SQS can reuse a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#data-keys\&quot;&gt;data key&lt;/a&gt; to encrypt or decrypt messages before calling KMS again. An integer representing seconds, between 60 seconds (1 minute) and 86,400 seconds (24 hours). Default: 300 (5 minutes). A shorter time period provides better security but results in more calls to KMS which might incur charges after Free Tier. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-how-does-the-data-key-reuse-period-work\&quot;&gt;How Does the Data Key Reuse Period Work?&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SqsManagedSseEnabled&lt;/code&gt; – Enables server-side queue encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (for example, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html\&quot;&gt;SSE-KMS&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.html\&quot;&gt;SSE-SQS&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html\&quot;&gt;FIFO (first-in-first-out) queues&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FifoQueue&lt;/code&gt; – Designates a queue as FIFO. Valid values are &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;. If you don&#39;t specify the &lt;code&gt;FifoQueue&lt;/code&gt; attribute, Amazon SQS creates a standard queue. You can provide this attribute only during queue creation. You can&#39;t change it for an existing queue. When you set this attribute, you must also provide the &lt;code&gt;MessageGroupId&lt;/code&gt; for your messages explicitly.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-understanding-logic.html\&quot;&gt;FIFO queue logic&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; – Enables content-based deduplication. Valid values are &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html\&quot;&gt;Exactly-once processing&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. Note the following: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Every message must have a unique &lt;code&gt;MessageDeduplicationId&lt;/code&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You may provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; explicitly.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you aren&#39;t able to provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; and you enable &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; for your queue, Amazon SQS uses a SHA-256 hash to generate the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; using the body of the message (but not the attributes of the message). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; and the queue doesn&#39;t have &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; set, the action fails with an error.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the queue has &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; set, your &lt;code&gt;MessageDeduplicationId&lt;/code&gt; overrides the generated one.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you send one message with &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; enabled and then another message with a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; that is the same as the one generated for the first &lt;code&gt;MessageDeduplicationId&lt;/code&gt;, the two messages are treated as duplicates and only one copy of the message is delivered. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html\&quot;&gt;high throughput for FIFO queues&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeduplicationScope&lt;/code&gt; – Specifies whether message deduplication occurs at the message group or queue level. Valid values are &lt;code&gt;messageGroup&lt;/code&gt; and &lt;code&gt;queue&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FifoThroughputLimit&lt;/code&gt; – Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are &lt;code&gt;perQueue&lt;/code&gt; and &lt;code&gt;perMessageGroupId&lt;/code&gt;. The &lt;code&gt;perMessageGroupId&lt;/code&gt; value is allowed only when the value for &lt;code&gt;DeduplicationScope&lt;/code&gt; is &lt;code&gt;messageGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To enable high throughput for FIFO queues, do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;DeduplicationScope&lt;/code&gt; to &lt;code&gt;messageGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;FifoThroughputLimit&lt;/code&gt; to &lt;code&gt;perMessageGroupId&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you set these attributes to anything other than the values shown for enabling high throughput, normal throughput is in effect and deduplication occurs as specified.&lt;/p&gt; &lt;p&gt;For information on throughput quotas, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html\&quot;&gt;Quotas related to messages&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param tag &lt;p&gt;Add cost allocation tags to the specified Amazon SQS queue. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html\&quot;&gt;Tagging Your Amazon SQS Queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you use queue tags, keep the following guidelines in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Adding more than 50 tags to a queue isn&#39;t recommended.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags don&#39;t have any semantic meaning. Amazon SQS interprets tags as character strings.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags are case-sensitive.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A new tag with a key identical to that of an existing tag overwrites the existing tag.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For a full list of tag restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-limits.html#limits-queues\&quot;&gt;Quotas related to queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To be able to tag a queue on creation, you must have the &lt;code&gt;sqs:CreateQueue&lt;/code&gt; and &lt;code&gt;sqs:TagQueue&lt;/code&gt; permissions.&lt;/p&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @return ApiResponse&lt;CreateQueueResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDeletedRecently </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> QueueNameExists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateQueueResult> gETCreateQueueWithHttpInfo(String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Map<String, String> attribute, Map<String, String> tag) throws ApiException {
        okhttp3.Call localVarCall = gETCreateQueueValidateBeforeCall(queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attribute, tag, null);
        Type localVarReturnType = new TypeToken<CreateQueueResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new standard or FIFO queue. You can pass one or more attributes in the request. Keep the following in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify the &lt;code&gt;FifoQueue&lt;/code&gt; attribute, Amazon SQS creates a standard queue.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can&#39;t change the queue type after you create it and you can&#39;t convert an existing standard queue into a FIFO queue. You must either create a new FIFO queue for your application or delete your existing standard queue and recreate it as a FIFO queue. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html#FIFO-queues-moving\&quot;&gt;Moving From a Standard Queue to a FIFO Queue&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t provide a value for an attribute, the queue is created with the default value for the attribute.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you delete a queue, you must wait at least 60 seconds before creating a queue with the same name.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To successfully create a new queue, you must provide a queue name that adheres to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/limits-queues.html\&quot;&gt;limits related to queues&lt;/a&gt; and is unique within the scope of your queues.&lt;/p&gt; &lt;note&gt; &lt;p&gt;After you create a queue, you must wait at least one second after the queue is created to be able to use the queue.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;To get the queue URL, use the &lt;code&gt; &lt;a&gt;GetQueueUrl&lt;/a&gt; &lt;/code&gt; action. &lt;code&gt; &lt;a&gt;GetQueueUrl&lt;/a&gt; &lt;/code&gt; requires only the &lt;code&gt;QueueName&lt;/code&gt; parameter. be aware of existing queue names:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you provide the name of an existing queue along with the exact names and values of all the queue&#39;s attributes, &lt;code&gt;CreateQueue&lt;/code&gt; returns the queue URL for the existing queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the queue name, attribute names, or attribute values don&#39;t match an existing queue, &lt;code&gt;CreateQueue&lt;/code&gt; returns an error.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param queueName &lt;p&gt;The name of the new queue. The following limits apply to this name:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A queue name can have up to 80 characters.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Valid values: alphanumeric characters, hyphens (&lt;code&gt;-&lt;/code&gt;), and underscores (&lt;code&gt;_&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A FIFO queue name must end with the &lt;code&gt;.fifo&lt;/code&gt; suffix.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Queue URLs and names are case-sensitive.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attribute &lt;p&gt;A map of attributes with their corresponding values.&lt;/p&gt; &lt;p&gt;The following lists the names, descriptions, and values of the special request parameters that the &lt;code&gt;CreateQueue&lt;/code&gt; action uses:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DelaySeconds&lt;/code&gt; – The length of time, in seconds, for which the delivery of all messages in the queue is delayed. Valid values: An integer from 0 to 900 seconds (15 minutes). Default: 0. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MaximumMessageSize&lt;/code&gt; – The limit of how many bytes a message can contain before Amazon SQS rejects it. Valid values: An integer from 1,024 bytes (1 KiB) to 262,144 bytes (256 KiB). Default: 262,144 (256 KiB). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; – The length of time, in seconds, for which Amazon SQS retains a message. Valid values: An integer from 60 seconds (1 minute) to 1,209,600 seconds (14 days). Default: 345,600 (4 days). When you change a queue&#39;s attributes, the change can take up to 60 seconds for most of the attributes to propagate throughout the Amazon SQS system. Changes made to the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; attribute can take up to 15 minutes and will impact existing messages in the queue potentially causing them to be expired and deleted if the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; is reduced below the age of existing messages.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Policy&lt;/code&gt; – The queue&#39;s policy. A valid Amazon Web Services policy. For more information about policy structure, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/PoliciesOverview.html\&quot;&gt;Overview of Amazon Web Services IAM Policies&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ReceiveMessageWaitTimeSeconds&lt;/code&gt; – The length of time, in seconds, for which a &lt;code&gt; &lt;a&gt;ReceiveMessage&lt;/a&gt; &lt;/code&gt; action waits for a message to arrive. Valid values: An integer from 0 to 20 (seconds). Default: 0. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;VisibilityTimeout&lt;/code&gt; – The visibility timeout for the queue, in seconds. Valid values: An integer from 0 to 43,200 (12 hours). Default: 30. For more information about the visibility timeout, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html\&quot;&gt;Visibility Timeout&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;dead-letter queues:&lt;/a&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedrivePolicy&lt;/code&gt; – The string that includes the parameters for the dead-letter queue functionality of the source queue as a JSON object. The parameters are as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;deadLetterTargetArn&lt;/code&gt; – The Amazon Resource Name (ARN) of the dead-letter queue to which Amazon SQS moves messages after the value of &lt;code&gt;maxReceiveCount&lt;/code&gt; is exceeded.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;maxReceiveCount&lt;/code&gt; – The number of times a message is delivered to the source queue before being moved to the dead-letter queue. Default: 10. When the &lt;code&gt;ReceiveCount&lt;/code&gt; for a message exceeds the &lt;code&gt;maxReceiveCount&lt;/code&gt; for a queue, Amazon SQS moves the message to the dead-letter-queue.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedriveAllowPolicy&lt;/code&gt; – The string that includes the parameters for the permissions for the dead-letter queue redrive permission and which source queues can specify dead-letter queues as a JSON object. The parameters are as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;redrivePermission&lt;/code&gt; – The permission type that defines which source queues can specify the current queue as the dead-letter queue. Valid values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;allowAll&lt;/code&gt; – (Default) Any source queues in this Amazon Web Services account in the same Region can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;denyAll&lt;/code&gt; – No source queues can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;byQueue&lt;/code&gt; – Only queues specified by the &lt;code&gt;sourceQueueArns&lt;/code&gt; parameter can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sourceQueueArns&lt;/code&gt; – The Amazon Resource Names (ARN)s of the source queues that can specify this queue as the dead-letter queue and redrive messages. You can specify this parameter only when the &lt;code&gt;redrivePermission&lt;/code&gt; parameter is set to &lt;code&gt;byQueue&lt;/code&gt;. You can specify up to 10 source queue ARNs. To allow more than 10 source queues to specify dead-letter queues, set the &lt;code&gt;redrivePermission&lt;/code&gt; parameter to &lt;code&gt;allowAll&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The dead-letter queue of a FIFO queue must also be a FIFO queue. Similarly, the dead-letter queue of a standard queue must also be a standard queue.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html\&quot;&gt;server-side-encryption&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsMasterKeyId&lt;/code&gt; – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-sse-key-terms\&quot;&gt;Key Terms&lt;/a&gt;. While the alias of the Amazon Web Services managed CMK for Amazon SQS is always &lt;code&gt;alias/aws/sqs&lt;/code&gt;, the alias of a custom CMK can, for example, be &lt;code&gt;alias/&lt;i&gt;MyAlias&lt;/i&gt; &lt;/code&gt;. For more examples, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters\&quot;&gt;KeyId&lt;/a&gt; in the &lt;i&gt;Key Management Service API Reference&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsDataKeyReusePeriodSeconds&lt;/code&gt; – The length of time, in seconds, for which Amazon SQS can reuse a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#data-keys\&quot;&gt;data key&lt;/a&gt; to encrypt or decrypt messages before calling KMS again. An integer representing seconds, between 60 seconds (1 minute) and 86,400 seconds (24 hours). Default: 300 (5 minutes). A shorter time period provides better security but results in more calls to KMS which might incur charges after Free Tier. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-how-does-the-data-key-reuse-period-work\&quot;&gt;How Does the Data Key Reuse Period Work?&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SqsManagedSseEnabled&lt;/code&gt; – Enables server-side queue encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (for example, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html\&quot;&gt;SSE-KMS&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.html\&quot;&gt;SSE-SQS&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html\&quot;&gt;FIFO (first-in-first-out) queues&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FifoQueue&lt;/code&gt; – Designates a queue as FIFO. Valid values are &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;. If you don&#39;t specify the &lt;code&gt;FifoQueue&lt;/code&gt; attribute, Amazon SQS creates a standard queue. You can provide this attribute only during queue creation. You can&#39;t change it for an existing queue. When you set this attribute, you must also provide the &lt;code&gt;MessageGroupId&lt;/code&gt; for your messages explicitly.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-understanding-logic.html\&quot;&gt;FIFO queue logic&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; – Enables content-based deduplication. Valid values are &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html\&quot;&gt;Exactly-once processing&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. Note the following: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Every message must have a unique &lt;code&gt;MessageDeduplicationId&lt;/code&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You may provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; explicitly.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you aren&#39;t able to provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; and you enable &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; for your queue, Amazon SQS uses a SHA-256 hash to generate the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; using the body of the message (but not the attributes of the message). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; and the queue doesn&#39;t have &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; set, the action fails with an error.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the queue has &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; set, your &lt;code&gt;MessageDeduplicationId&lt;/code&gt; overrides the generated one.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you send one message with &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; enabled and then another message with a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; that is the same as the one generated for the first &lt;code&gt;MessageDeduplicationId&lt;/code&gt;, the two messages are treated as duplicates and only one copy of the message is delivered. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html\&quot;&gt;high throughput for FIFO queues&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeduplicationScope&lt;/code&gt; – Specifies whether message deduplication occurs at the message group or queue level. Valid values are &lt;code&gt;messageGroup&lt;/code&gt; and &lt;code&gt;queue&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FifoThroughputLimit&lt;/code&gt; – Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are &lt;code&gt;perQueue&lt;/code&gt; and &lt;code&gt;perMessageGroupId&lt;/code&gt;. The &lt;code&gt;perMessageGroupId&lt;/code&gt; value is allowed only when the value for &lt;code&gt;DeduplicationScope&lt;/code&gt; is &lt;code&gt;messageGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To enable high throughput for FIFO queues, do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;DeduplicationScope&lt;/code&gt; to &lt;code&gt;messageGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;FifoThroughputLimit&lt;/code&gt; to &lt;code&gt;perMessageGroupId&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you set these attributes to anything other than the values shown for enabling high throughput, normal throughput is in effect and deduplication occurs as specified.&lt;/p&gt; &lt;p&gt;For information on throughput quotas, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html\&quot;&gt;Quotas related to messages&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param tag &lt;p&gt;Add cost allocation tags to the specified Amazon SQS queue. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html\&quot;&gt;Tagging Your Amazon SQS Queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you use queue tags, keep the following guidelines in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Adding more than 50 tags to a queue isn&#39;t recommended.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags don&#39;t have any semantic meaning. Amazon SQS interprets tags as character strings.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags are case-sensitive.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A new tag with a key identical to that of an existing tag overwrites the existing tag.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For a full list of tag restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-limits.html#limits-queues\&quot;&gt;Quotas related to queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To be able to tag a queue on creation, you must have the &lt;code&gt;sqs:CreateQueue&lt;/code&gt; and &lt;code&gt;sqs:TagQueue&lt;/code&gt; permissions.&lt;/p&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDeletedRecently </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> QueueNameExists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateQueueAsync(String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Map<String, String> attribute, Map<String, String> tag, final ApiCallback<CreateQueueResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateQueueValidateBeforeCall(queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attribute, tag, _callback);
        Type localVarReturnType = new TypeToken<CreateQueueResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteMessage
     * @param receiptHandle The receipt handle associated with the message to delete. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidIdFormat </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReceiptHandleIsInvalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteMessageCall(String receiptHandle, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{AccountNumber}/{QueueName}/#Action=DeleteMessage"
            .replace("{" + "AccountNumber" + "}", localVarApiClient.escapeString(accountNumber.toString()))
            .replace("{" + "QueueName" + "}", localVarApiClient.escapeString(queueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (receiptHandle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReceiptHandle", receiptHandle));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteMessageValidateBeforeCall(String receiptHandle, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'receiptHandle' is set
        if (receiptHandle == null) {
            throw new ApiException("Missing the required parameter 'receiptHandle' when calling gETDeleteMessage(Async)");
        }

        // verify the required parameter 'accountNumber' is set
        if (accountNumber == null) {
            throw new ApiException("Missing the required parameter 'accountNumber' when calling gETDeleteMessage(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling gETDeleteMessage(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteMessage(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteMessage(Async)");
        }

        return gETDeleteMessageCall(receiptHandle, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified message from the specified queue. To select the message to delete, use the &lt;code&gt;ReceiptHandle&lt;/code&gt; of the message (&lt;i&gt;not&lt;/i&gt; the &lt;code&gt;MessageId&lt;/code&gt; which you receive when you send the message). Amazon SQS can delete a message from a queue even if a visibility timeout setting causes the message to be locked by another consumer. Amazon SQS automatically deletes messages left in a queue longer than the retention period configured for the queue. &lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;ReceiptHandle&lt;/code&gt; is associated with a &lt;i&gt;specific instance&lt;/i&gt; of receiving a message. If you receive a message more than once, the &lt;code&gt;ReceiptHandle&lt;/code&gt; is different each time you receive a message. When you use the &lt;code&gt;DeleteMessage&lt;/code&gt; action, you must provide the most recently received &lt;code&gt;ReceiptHandle&lt;/code&gt; for the message (otherwise, the request succeeds, but the message will not be deleted).&lt;/p&gt; &lt;p&gt;For standard queues, it is possible to receive a message even after you delete it. This might happen on rare occasions if one of the servers which stores a copy of the message is unavailable when you send the request to delete the message. The copy remains on the server and might be returned to you during a subsequent receive request. You should ensure that your application is idempotent, so that receiving a message more than once does not cause issues.&lt;/p&gt; &lt;/note&gt;
     * @param receiptHandle The receipt handle associated with the message to delete. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidIdFormat </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReceiptHandleIsInvalid </td><td>  -  </td></tr>
     </table>
     */
    public void gETDeleteMessage(String receiptHandle, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETDeleteMessageWithHttpInfo(receiptHandle, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified message from the specified queue. To select the message to delete, use the &lt;code&gt;ReceiptHandle&lt;/code&gt; of the message (&lt;i&gt;not&lt;/i&gt; the &lt;code&gt;MessageId&lt;/code&gt; which you receive when you send the message). Amazon SQS can delete a message from a queue even if a visibility timeout setting causes the message to be locked by another consumer. Amazon SQS automatically deletes messages left in a queue longer than the retention period configured for the queue. &lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;ReceiptHandle&lt;/code&gt; is associated with a &lt;i&gt;specific instance&lt;/i&gt; of receiving a message. If you receive a message more than once, the &lt;code&gt;ReceiptHandle&lt;/code&gt; is different each time you receive a message. When you use the &lt;code&gt;DeleteMessage&lt;/code&gt; action, you must provide the most recently received &lt;code&gt;ReceiptHandle&lt;/code&gt; for the message (otherwise, the request succeeds, but the message will not be deleted).&lt;/p&gt; &lt;p&gt;For standard queues, it is possible to receive a message even after you delete it. This might happen on rare occasions if one of the servers which stores a copy of the message is unavailable when you send the request to delete the message. The copy remains on the server and might be returned to you during a subsequent receive request. You should ensure that your application is idempotent, so that receiving a message more than once does not cause issues.&lt;/p&gt; &lt;/note&gt;
     * @param receiptHandle The receipt handle associated with the message to delete. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidIdFormat </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReceiptHandleIsInvalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETDeleteMessageWithHttpInfo(String receiptHandle, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteMessageValidateBeforeCall(receiptHandle, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified message from the specified queue. To select the message to delete, use the &lt;code&gt;ReceiptHandle&lt;/code&gt; of the message (&lt;i&gt;not&lt;/i&gt; the &lt;code&gt;MessageId&lt;/code&gt; which you receive when you send the message). Amazon SQS can delete a message from a queue even if a visibility timeout setting causes the message to be locked by another consumer. Amazon SQS automatically deletes messages left in a queue longer than the retention period configured for the queue. &lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;ReceiptHandle&lt;/code&gt; is associated with a &lt;i&gt;specific instance&lt;/i&gt; of receiving a message. If you receive a message more than once, the &lt;code&gt;ReceiptHandle&lt;/code&gt; is different each time you receive a message. When you use the &lt;code&gt;DeleteMessage&lt;/code&gt; action, you must provide the most recently received &lt;code&gt;ReceiptHandle&lt;/code&gt; for the message (otherwise, the request succeeds, but the message will not be deleted).&lt;/p&gt; &lt;p&gt;For standard queues, it is possible to receive a message even after you delete it. This might happen on rare occasions if one of the servers which stores a copy of the message is unavailable when you send the request to delete the message. The copy remains on the server and might be returned to you during a subsequent receive request. You should ensure that your application is idempotent, so that receiving a message more than once does not cause issues.&lt;/p&gt; &lt;/note&gt;
     * @param receiptHandle The receipt handle associated with the message to delete. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidIdFormat </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReceiptHandleIsInvalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteMessageAsync(String receiptHandle, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteMessageValidateBeforeCall(receiptHandle, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteMessageBatch
     * @param entries Lists the receipt handles for the messages to be deleted. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEntriesInBatchRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EmptyBatchRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BatchEntryIdsNotDistinct </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidBatchEntryId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteMessageBatchCall(List<GETDeleteMessageBatchEntriesParameterInner> entries, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{AccountNumber}/{QueueName}/#Action=DeleteMessageBatch"
            .replace("{" + "AccountNumber" + "}", localVarApiClient.escapeString(accountNumber.toString()))
            .replace("{" + "QueueName" + "}", localVarApiClient.escapeString(queueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (entries != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Entries", entries));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteMessageBatchValidateBeforeCall(List<GETDeleteMessageBatchEntriesParameterInner> entries, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entries' is set
        if (entries == null) {
            throw new ApiException("Missing the required parameter 'entries' when calling gETDeleteMessageBatch(Async)");
        }

        // verify the required parameter 'accountNumber' is set
        if (accountNumber == null) {
            throw new ApiException("Missing the required parameter 'accountNumber' when calling gETDeleteMessageBatch(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling gETDeleteMessageBatch(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteMessageBatch(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteMessageBatch(Async)");
        }

        return gETDeleteMessageBatchCall(entries, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes up to ten messages from the specified queue. This is a batch version of &lt;code&gt; &lt;a&gt;DeleteMessage&lt;/a&gt;.&lt;/code&gt; The result of the action on each message is reported individually in the response.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param entries Lists the receipt handles for the messages to be deleted. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteMessageBatchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEntriesInBatchRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EmptyBatchRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BatchEntryIdsNotDistinct </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidBatchEntryId </td><td>  -  </td></tr>
     </table>
     */
    public DeleteMessageBatchResult gETDeleteMessageBatch(List<GETDeleteMessageBatchEntriesParameterInner> entries, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteMessageBatchResult> localVarResp = gETDeleteMessageBatchWithHttpInfo(entries, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes up to ten messages from the specified queue. This is a batch version of &lt;code&gt; &lt;a&gt;DeleteMessage&lt;/a&gt;.&lt;/code&gt; The result of the action on each message is reported individually in the response.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param entries Lists the receipt handles for the messages to be deleted. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteMessageBatchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEntriesInBatchRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EmptyBatchRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BatchEntryIdsNotDistinct </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidBatchEntryId </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteMessageBatchResult> gETDeleteMessageBatchWithHttpInfo(List<GETDeleteMessageBatchEntriesParameterInner> entries, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteMessageBatchValidateBeforeCall(entries, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteMessageBatchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes up to ten messages from the specified queue. This is a batch version of &lt;code&gt; &lt;a&gt;DeleteMessage&lt;/a&gt;.&lt;/code&gt; The result of the action on each message is reported individually in the response.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param entries Lists the receipt handles for the messages to be deleted. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEntriesInBatchRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EmptyBatchRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BatchEntryIdsNotDistinct </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidBatchEntryId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteMessageBatchAsync(List<GETDeleteMessageBatchEntriesParameterInner> entries, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteMessageBatchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteMessageBatchValidateBeforeCall(entries, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteMessageBatchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteQueue
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteQueueCall(Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{AccountNumber}/{QueueName}/#Action=DeleteQueue"
            .replace("{" + "AccountNumber" + "}", localVarApiClient.escapeString(accountNumber.toString()))
            .replace("{" + "QueueName" + "}", localVarApiClient.escapeString(queueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteQueueValidateBeforeCall(Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountNumber' is set
        if (accountNumber == null) {
            throw new ApiException("Missing the required parameter 'accountNumber' when calling gETDeleteQueue(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling gETDeleteQueue(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteQueue(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteQueue(Async)");
        }

        return gETDeleteQueueCall(accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the queue specified by the &lt;code&gt;QueueUrl&lt;/code&gt;, regardless of the queue&#39;s contents.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Be careful with the &lt;code&gt;DeleteQueue&lt;/code&gt; action: When you delete a queue, any messages in the queue are no longer available. &lt;/p&gt; &lt;/important&gt; &lt;p&gt;When you delete a queue, the deletion process takes up to 60 seconds. Requests you send involving that queue during the 60 seconds might succeed. For example, a &lt;code&gt; &lt;a&gt;SendMessage&lt;/a&gt; &lt;/code&gt; request might succeed, but after 60 seconds the queue and the message you sent no longer exist.&lt;/p&gt; &lt;p&gt;When you delete a queue, you must wait at least 60 seconds before creating a queue with the same name.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;The delete operation uses the HTTP &lt;code&gt;GET&lt;/code&gt; verb.&lt;/p&gt; &lt;/note&gt;
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void gETDeleteQueue(Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETDeleteQueueWithHttpInfo(accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes the queue specified by the &lt;code&gt;QueueUrl&lt;/code&gt;, regardless of the queue&#39;s contents.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Be careful with the &lt;code&gt;DeleteQueue&lt;/code&gt; action: When you delete a queue, any messages in the queue are no longer available. &lt;/p&gt; &lt;/important&gt; &lt;p&gt;When you delete a queue, the deletion process takes up to 60 seconds. Requests you send involving that queue during the 60 seconds might succeed. For example, a &lt;code&gt; &lt;a&gt;SendMessage&lt;/a&gt; &lt;/code&gt; request might succeed, but after 60 seconds the queue and the message you sent no longer exist.&lt;/p&gt; &lt;p&gt;When you delete a queue, you must wait at least 60 seconds before creating a queue with the same name.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;The delete operation uses the HTTP &lt;code&gt;GET&lt;/code&gt; verb.&lt;/p&gt; &lt;/note&gt;
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETDeleteQueueWithHttpInfo(Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteQueueValidateBeforeCall(accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the queue specified by the &lt;code&gt;QueueUrl&lt;/code&gt;, regardless of the queue&#39;s contents.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Be careful with the &lt;code&gt;DeleteQueue&lt;/code&gt; action: When you delete a queue, any messages in the queue are no longer available. &lt;/p&gt; &lt;/important&gt; &lt;p&gt;When you delete a queue, the deletion process takes up to 60 seconds. Requests you send involving that queue during the 60 seconds might succeed. For example, a &lt;code&gt; &lt;a&gt;SendMessage&lt;/a&gt; &lt;/code&gt; request might succeed, but after 60 seconds the queue and the message you sent no longer exist.&lt;/p&gt; &lt;p&gt;When you delete a queue, you must wait at least 60 seconds before creating a queue with the same name.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;The delete operation uses the HTTP &lt;code&gt;GET&lt;/code&gt; verb.&lt;/p&gt; &lt;/note&gt;
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteQueueAsync(Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteQueueValidateBeforeCall(accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETGetQueueAttributes
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attributeNames &lt;p&gt;A list of attributes for which to retrieve information.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;AttributeNames&lt;/code&gt; parameter is optional, but if you don&#39;t specify values for this parameter, the request returns empty results.&lt;/p&gt; &lt;note&gt; &lt;p&gt;In the future, new attributes might be added. If you write code that calls this action, we recommend that you structure your code so that it can handle new attributes gracefully.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The following attributes are supported:&lt;/p&gt; &lt;important&gt; &lt;p&gt;The &lt;code&gt;ApproximateNumberOfMessagesDelayed&lt;/code&gt;, &lt;code&gt;ApproximateNumberOfMessagesNotVisible&lt;/code&gt;, and &lt;code&gt;ApproximateNumberOfMessages&lt;/code&gt; metrics may not achieve consistency until at least 1 minute after the producers stop sending messages. This period is required for the queue metadata to reach eventual consistency. &lt;/p&gt; &lt;/important&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;All&lt;/code&gt; – Returns all values. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApproximateNumberOfMessages&lt;/code&gt; – Returns the approximate number of messages available for retrieval from the queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApproximateNumberOfMessagesDelayed&lt;/code&gt; – Returns the approximate number of messages in the queue that are delayed and not available for reading immediately. This can happen when the queue is configured as a delay queue or when a message has been sent with a delay parameter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApproximateNumberOfMessagesNotVisible&lt;/code&gt; – Returns the approximate number of messages that are in flight. Messages are considered to be &lt;i&gt;in flight&lt;/i&gt; if they have been sent to a client but have not yet been deleted or have not yet reached the end of their visibility window. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CreatedTimestamp&lt;/code&gt; – Returns the time when the queue was created in seconds (&lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/Unix_time\&quot;&gt;epoch time&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DelaySeconds&lt;/code&gt; – Returns the default delay on the queue in seconds.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LastModifiedTimestamp&lt;/code&gt; – Returns the time when the queue was last changed in seconds (&lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/Unix_time\&quot;&gt;epoch time&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MaximumMessageSize&lt;/code&gt; – Returns the limit of how many bytes a message can contain before Amazon SQS rejects it.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; – Returns the length of time, in seconds, for which Amazon SQS retains a message. When you change a queue&#39;s attributes, the change can take up to 60 seconds for most of the attributes to propagate throughout the Amazon SQS system. Changes made to the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; attribute can take up to 15 minutes and will impact existing messages in the queue potentially causing them to be expired and deleted if the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; is reduced below the age of existing messages.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Policy&lt;/code&gt; – Returns the policy of the queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;QueueArn&lt;/code&gt; – Returns the Amazon resource name (ARN) of the queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ReceiveMessageWaitTimeSeconds&lt;/code&gt; – Returns the length of time, in seconds, for which the &lt;code&gt;ReceiveMessage&lt;/code&gt; action waits for a message to arrive. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;VisibilityTimeout&lt;/code&gt; – Returns the visibility timeout for the queue. For more information about the visibility timeout, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html\&quot;&gt;Visibility Timeout&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;dead-letter queues:&lt;/a&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedrivePolicy&lt;/code&gt; – The string that includes the parameters for the dead-letter queue functionality of the source queue as a JSON object. The parameters are as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;deadLetterTargetArn&lt;/code&gt; – The Amazon Resource Name (ARN) of the dead-letter queue to which Amazon SQS moves messages after the value of &lt;code&gt;maxReceiveCount&lt;/code&gt; is exceeded.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;maxReceiveCount&lt;/code&gt; – The number of times a message is delivered to the source queue before being moved to the dead-letter queue. Default: 10. When the &lt;code&gt;ReceiveCount&lt;/code&gt; for a message exceeds the &lt;code&gt;maxReceiveCount&lt;/code&gt; for a queue, Amazon SQS moves the message to the dead-letter-queue.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedriveAllowPolicy&lt;/code&gt; – The string that includes the parameters for the permissions for the dead-letter queue redrive permission and which source queues can specify dead-letter queues as a JSON object. The parameters are as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;redrivePermission&lt;/code&gt; – The permission type that defines which source queues can specify the current queue as the dead-letter queue. Valid values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;allowAll&lt;/code&gt; – (Default) Any source queues in this Amazon Web Services account in the same Region can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;denyAll&lt;/code&gt; – No source queues can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;byQueue&lt;/code&gt; – Only queues specified by the &lt;code&gt;sourceQueueArns&lt;/code&gt; parameter can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sourceQueueArns&lt;/code&gt; – The Amazon Resource Names (ARN)s of the source queues that can specify this queue as the dead-letter queue and redrive messages. You can specify this parameter only when the &lt;code&gt;redrivePermission&lt;/code&gt; parameter is set to &lt;code&gt;byQueue&lt;/code&gt;. You can specify up to 10 source queue ARNs. To allow more than 10 source queues to specify dead-letter queues, set the &lt;code&gt;redrivePermission&lt;/code&gt; parameter to &lt;code&gt;allowAll&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The dead-letter queue of a FIFO queue must also be a FIFO queue. Similarly, the dead-letter queue of a standard queue must also be a standard queue.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html\&quot;&gt;server-side-encryption&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsMasterKeyId&lt;/code&gt; – Returns the ID of an Amazon Web Services managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-sse-key-terms\&quot;&gt;Key Terms&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsDataKeyReusePeriodSeconds&lt;/code&gt; – Returns the length of time, in seconds, for which Amazon SQS can reuse a data key to encrypt or decrypt messages before calling KMS again. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-how-does-the-data-key-reuse-period-work\&quot;&gt;How Does the Data Key Reuse Period Work?&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SqsManagedSseEnabled&lt;/code&gt; – Returns information about whether the queue is using SSE-SQS encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (for example, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html\&quot;&gt;SSE-KMS&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.html\&quot;&gt;SSE-SQS&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html\&quot;&gt;FIFO (first-in-first-out) queues&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FifoQueue&lt;/code&gt; – Returns information about whether the queue is FIFO. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-understanding-logic.html\&quot;&gt;FIFO queue logic&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To determine whether a queue is &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html\&quot;&gt;FIFO&lt;/a&gt;, you can check whether &lt;code&gt;QueueName&lt;/code&gt; ends with the &lt;code&gt;.fifo&lt;/code&gt; suffix.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; – Returns whether content-based deduplication is enabled for the queue. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html\&quot;&gt;Exactly-once processing&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html\&quot;&gt;high throughput for FIFO queues&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeduplicationScope&lt;/code&gt; – Specifies whether message deduplication occurs at the message group or queue level. Valid values are &lt;code&gt;messageGroup&lt;/code&gt; and &lt;code&gt;queue&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FifoThroughputLimit&lt;/code&gt; – Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are &lt;code&gt;perQueue&lt;/code&gt; and &lt;code&gt;perMessageGroupId&lt;/code&gt;. The &lt;code&gt;perMessageGroupId&lt;/code&gt; value is allowed only when the value for &lt;code&gt;DeduplicationScope&lt;/code&gt; is &lt;code&gt;messageGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To enable high throughput for FIFO queues, do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;DeduplicationScope&lt;/code&gt; to &lt;code&gt;messageGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;FifoThroughputLimit&lt;/code&gt; to &lt;code&gt;perMessageGroupId&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you set these attributes to anything other than the values shown for enabling high throughput, normal throughput is in effect and deduplication occurs as specified.&lt;/p&gt; &lt;p&gt;For information on throughput quotas, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html\&quot;&gt;Quotas related to messages&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidAttributeName </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetQueueAttributesCall(Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<QueueAttributeName> attributeNames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{AccountNumber}/{QueueName}/#Action=GetQueueAttributes"
            .replace("{" + "AccountNumber" + "}", localVarApiClient.escapeString(accountNumber.toString()))
            .replace("{" + "QueueName" + "}", localVarApiClient.escapeString(queueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attributeNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AttributeNames", attributeNames));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETGetQueueAttributesValidateBeforeCall(Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<QueueAttributeName> attributeNames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountNumber' is set
        if (accountNumber == null) {
            throw new ApiException("Missing the required parameter 'accountNumber' when calling gETGetQueueAttributes(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling gETGetQueueAttributes(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETGetQueueAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETGetQueueAttributes(Async)");
        }

        return gETGetQueueAttributesCall(accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attributeNames, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets attributes for the specified queue.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To determine whether a queue is &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html\&quot;&gt;FIFO&lt;/a&gt;, you can check whether &lt;code&gt;QueueName&lt;/code&gt; ends with the &lt;code&gt;.fifo&lt;/code&gt; suffix.&lt;/p&gt; &lt;/note&gt;
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attributeNames &lt;p&gt;A list of attributes for which to retrieve information.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;AttributeNames&lt;/code&gt; parameter is optional, but if you don&#39;t specify values for this parameter, the request returns empty results.&lt;/p&gt; &lt;note&gt; &lt;p&gt;In the future, new attributes might be added. If you write code that calls this action, we recommend that you structure your code so that it can handle new attributes gracefully.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The following attributes are supported:&lt;/p&gt; &lt;important&gt; &lt;p&gt;The &lt;code&gt;ApproximateNumberOfMessagesDelayed&lt;/code&gt;, &lt;code&gt;ApproximateNumberOfMessagesNotVisible&lt;/code&gt;, and &lt;code&gt;ApproximateNumberOfMessages&lt;/code&gt; metrics may not achieve consistency until at least 1 minute after the producers stop sending messages. This period is required for the queue metadata to reach eventual consistency. &lt;/p&gt; &lt;/important&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;All&lt;/code&gt; – Returns all values. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApproximateNumberOfMessages&lt;/code&gt; – Returns the approximate number of messages available for retrieval from the queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApproximateNumberOfMessagesDelayed&lt;/code&gt; – Returns the approximate number of messages in the queue that are delayed and not available for reading immediately. This can happen when the queue is configured as a delay queue or when a message has been sent with a delay parameter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApproximateNumberOfMessagesNotVisible&lt;/code&gt; – Returns the approximate number of messages that are in flight. Messages are considered to be &lt;i&gt;in flight&lt;/i&gt; if they have been sent to a client but have not yet been deleted or have not yet reached the end of their visibility window. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CreatedTimestamp&lt;/code&gt; – Returns the time when the queue was created in seconds (&lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/Unix_time\&quot;&gt;epoch time&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DelaySeconds&lt;/code&gt; – Returns the default delay on the queue in seconds.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LastModifiedTimestamp&lt;/code&gt; – Returns the time when the queue was last changed in seconds (&lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/Unix_time\&quot;&gt;epoch time&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MaximumMessageSize&lt;/code&gt; – Returns the limit of how many bytes a message can contain before Amazon SQS rejects it.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; – Returns the length of time, in seconds, for which Amazon SQS retains a message. When you change a queue&#39;s attributes, the change can take up to 60 seconds for most of the attributes to propagate throughout the Amazon SQS system. Changes made to the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; attribute can take up to 15 minutes and will impact existing messages in the queue potentially causing them to be expired and deleted if the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; is reduced below the age of existing messages.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Policy&lt;/code&gt; – Returns the policy of the queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;QueueArn&lt;/code&gt; – Returns the Amazon resource name (ARN) of the queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ReceiveMessageWaitTimeSeconds&lt;/code&gt; – Returns the length of time, in seconds, for which the &lt;code&gt;ReceiveMessage&lt;/code&gt; action waits for a message to arrive. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;VisibilityTimeout&lt;/code&gt; – Returns the visibility timeout for the queue. For more information about the visibility timeout, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html\&quot;&gt;Visibility Timeout&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;dead-letter queues:&lt;/a&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedrivePolicy&lt;/code&gt; – The string that includes the parameters for the dead-letter queue functionality of the source queue as a JSON object. The parameters are as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;deadLetterTargetArn&lt;/code&gt; – The Amazon Resource Name (ARN) of the dead-letter queue to which Amazon SQS moves messages after the value of &lt;code&gt;maxReceiveCount&lt;/code&gt; is exceeded.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;maxReceiveCount&lt;/code&gt; – The number of times a message is delivered to the source queue before being moved to the dead-letter queue. Default: 10. When the &lt;code&gt;ReceiveCount&lt;/code&gt; for a message exceeds the &lt;code&gt;maxReceiveCount&lt;/code&gt; for a queue, Amazon SQS moves the message to the dead-letter-queue.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedriveAllowPolicy&lt;/code&gt; – The string that includes the parameters for the permissions for the dead-letter queue redrive permission and which source queues can specify dead-letter queues as a JSON object. The parameters are as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;redrivePermission&lt;/code&gt; – The permission type that defines which source queues can specify the current queue as the dead-letter queue. Valid values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;allowAll&lt;/code&gt; – (Default) Any source queues in this Amazon Web Services account in the same Region can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;denyAll&lt;/code&gt; – No source queues can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;byQueue&lt;/code&gt; – Only queues specified by the &lt;code&gt;sourceQueueArns&lt;/code&gt; parameter can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sourceQueueArns&lt;/code&gt; – The Amazon Resource Names (ARN)s of the source queues that can specify this queue as the dead-letter queue and redrive messages. You can specify this parameter only when the &lt;code&gt;redrivePermission&lt;/code&gt; parameter is set to &lt;code&gt;byQueue&lt;/code&gt;. You can specify up to 10 source queue ARNs. To allow more than 10 source queues to specify dead-letter queues, set the &lt;code&gt;redrivePermission&lt;/code&gt; parameter to &lt;code&gt;allowAll&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The dead-letter queue of a FIFO queue must also be a FIFO queue. Similarly, the dead-letter queue of a standard queue must also be a standard queue.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html\&quot;&gt;server-side-encryption&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsMasterKeyId&lt;/code&gt; – Returns the ID of an Amazon Web Services managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-sse-key-terms\&quot;&gt;Key Terms&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsDataKeyReusePeriodSeconds&lt;/code&gt; – Returns the length of time, in seconds, for which Amazon SQS can reuse a data key to encrypt or decrypt messages before calling KMS again. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-how-does-the-data-key-reuse-period-work\&quot;&gt;How Does the Data Key Reuse Period Work?&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SqsManagedSseEnabled&lt;/code&gt; – Returns information about whether the queue is using SSE-SQS encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (for example, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html\&quot;&gt;SSE-KMS&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.html\&quot;&gt;SSE-SQS&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html\&quot;&gt;FIFO (first-in-first-out) queues&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FifoQueue&lt;/code&gt; – Returns information about whether the queue is FIFO. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-understanding-logic.html\&quot;&gt;FIFO queue logic&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To determine whether a queue is &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html\&quot;&gt;FIFO&lt;/a&gt;, you can check whether &lt;code&gt;QueueName&lt;/code&gt; ends with the &lt;code&gt;.fifo&lt;/code&gt; suffix.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; – Returns whether content-based deduplication is enabled for the queue. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html\&quot;&gt;Exactly-once processing&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html\&quot;&gt;high throughput for FIFO queues&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeduplicationScope&lt;/code&gt; – Specifies whether message deduplication occurs at the message group or queue level. Valid values are &lt;code&gt;messageGroup&lt;/code&gt; and &lt;code&gt;queue&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FifoThroughputLimit&lt;/code&gt; – Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are &lt;code&gt;perQueue&lt;/code&gt; and &lt;code&gt;perMessageGroupId&lt;/code&gt;. The &lt;code&gt;perMessageGroupId&lt;/code&gt; value is allowed only when the value for &lt;code&gt;DeduplicationScope&lt;/code&gt; is &lt;code&gt;messageGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To enable high throughput for FIFO queues, do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;DeduplicationScope&lt;/code&gt; to &lt;code&gt;messageGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;FifoThroughputLimit&lt;/code&gt; to &lt;code&gt;perMessageGroupId&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you set these attributes to anything other than the values shown for enabling high throughput, normal throughput is in effect and deduplication occurs as specified.&lt;/p&gt; &lt;p&gt;For information on throughput quotas, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html\&quot;&gt;Quotas related to messages&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @return GetQueueAttributesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidAttributeName </td><td>  -  </td></tr>
     </table>
     */
    public GetQueueAttributesResult gETGetQueueAttributes(Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<QueueAttributeName> attributeNames) throws ApiException {
        ApiResponse<GetQueueAttributesResult> localVarResp = gETGetQueueAttributesWithHttpInfo(accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attributeNames);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets attributes for the specified queue.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To determine whether a queue is &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html\&quot;&gt;FIFO&lt;/a&gt;, you can check whether &lt;code&gt;QueueName&lt;/code&gt; ends with the &lt;code&gt;.fifo&lt;/code&gt; suffix.&lt;/p&gt; &lt;/note&gt;
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attributeNames &lt;p&gt;A list of attributes for which to retrieve information.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;AttributeNames&lt;/code&gt; parameter is optional, but if you don&#39;t specify values for this parameter, the request returns empty results.&lt;/p&gt; &lt;note&gt; &lt;p&gt;In the future, new attributes might be added. If you write code that calls this action, we recommend that you structure your code so that it can handle new attributes gracefully.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The following attributes are supported:&lt;/p&gt; &lt;important&gt; &lt;p&gt;The &lt;code&gt;ApproximateNumberOfMessagesDelayed&lt;/code&gt;, &lt;code&gt;ApproximateNumberOfMessagesNotVisible&lt;/code&gt;, and &lt;code&gt;ApproximateNumberOfMessages&lt;/code&gt; metrics may not achieve consistency until at least 1 minute after the producers stop sending messages. This period is required for the queue metadata to reach eventual consistency. &lt;/p&gt; &lt;/important&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;All&lt;/code&gt; – Returns all values. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApproximateNumberOfMessages&lt;/code&gt; – Returns the approximate number of messages available for retrieval from the queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApproximateNumberOfMessagesDelayed&lt;/code&gt; – Returns the approximate number of messages in the queue that are delayed and not available for reading immediately. This can happen when the queue is configured as a delay queue or when a message has been sent with a delay parameter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApproximateNumberOfMessagesNotVisible&lt;/code&gt; – Returns the approximate number of messages that are in flight. Messages are considered to be &lt;i&gt;in flight&lt;/i&gt; if they have been sent to a client but have not yet been deleted or have not yet reached the end of their visibility window. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CreatedTimestamp&lt;/code&gt; – Returns the time when the queue was created in seconds (&lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/Unix_time\&quot;&gt;epoch time&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DelaySeconds&lt;/code&gt; – Returns the default delay on the queue in seconds.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LastModifiedTimestamp&lt;/code&gt; – Returns the time when the queue was last changed in seconds (&lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/Unix_time\&quot;&gt;epoch time&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MaximumMessageSize&lt;/code&gt; – Returns the limit of how many bytes a message can contain before Amazon SQS rejects it.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; – Returns the length of time, in seconds, for which Amazon SQS retains a message. When you change a queue&#39;s attributes, the change can take up to 60 seconds for most of the attributes to propagate throughout the Amazon SQS system. Changes made to the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; attribute can take up to 15 minutes and will impact existing messages in the queue potentially causing them to be expired and deleted if the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; is reduced below the age of existing messages.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Policy&lt;/code&gt; – Returns the policy of the queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;QueueArn&lt;/code&gt; – Returns the Amazon resource name (ARN) of the queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ReceiveMessageWaitTimeSeconds&lt;/code&gt; – Returns the length of time, in seconds, for which the &lt;code&gt;ReceiveMessage&lt;/code&gt; action waits for a message to arrive. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;VisibilityTimeout&lt;/code&gt; – Returns the visibility timeout for the queue. For more information about the visibility timeout, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html\&quot;&gt;Visibility Timeout&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;dead-letter queues:&lt;/a&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedrivePolicy&lt;/code&gt; – The string that includes the parameters for the dead-letter queue functionality of the source queue as a JSON object. The parameters are as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;deadLetterTargetArn&lt;/code&gt; – The Amazon Resource Name (ARN) of the dead-letter queue to which Amazon SQS moves messages after the value of &lt;code&gt;maxReceiveCount&lt;/code&gt; is exceeded.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;maxReceiveCount&lt;/code&gt; – The number of times a message is delivered to the source queue before being moved to the dead-letter queue. Default: 10. When the &lt;code&gt;ReceiveCount&lt;/code&gt; for a message exceeds the &lt;code&gt;maxReceiveCount&lt;/code&gt; for a queue, Amazon SQS moves the message to the dead-letter-queue.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedriveAllowPolicy&lt;/code&gt; – The string that includes the parameters for the permissions for the dead-letter queue redrive permission and which source queues can specify dead-letter queues as a JSON object. The parameters are as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;redrivePermission&lt;/code&gt; – The permission type that defines which source queues can specify the current queue as the dead-letter queue. Valid values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;allowAll&lt;/code&gt; – (Default) Any source queues in this Amazon Web Services account in the same Region can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;denyAll&lt;/code&gt; – No source queues can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;byQueue&lt;/code&gt; – Only queues specified by the &lt;code&gt;sourceQueueArns&lt;/code&gt; parameter can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sourceQueueArns&lt;/code&gt; – The Amazon Resource Names (ARN)s of the source queues that can specify this queue as the dead-letter queue and redrive messages. You can specify this parameter only when the &lt;code&gt;redrivePermission&lt;/code&gt; parameter is set to &lt;code&gt;byQueue&lt;/code&gt;. You can specify up to 10 source queue ARNs. To allow more than 10 source queues to specify dead-letter queues, set the &lt;code&gt;redrivePermission&lt;/code&gt; parameter to &lt;code&gt;allowAll&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The dead-letter queue of a FIFO queue must also be a FIFO queue. Similarly, the dead-letter queue of a standard queue must also be a standard queue.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html\&quot;&gt;server-side-encryption&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsMasterKeyId&lt;/code&gt; – Returns the ID of an Amazon Web Services managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-sse-key-terms\&quot;&gt;Key Terms&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsDataKeyReusePeriodSeconds&lt;/code&gt; – Returns the length of time, in seconds, for which Amazon SQS can reuse a data key to encrypt or decrypt messages before calling KMS again. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-how-does-the-data-key-reuse-period-work\&quot;&gt;How Does the Data Key Reuse Period Work?&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SqsManagedSseEnabled&lt;/code&gt; – Returns information about whether the queue is using SSE-SQS encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (for example, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html\&quot;&gt;SSE-KMS&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.html\&quot;&gt;SSE-SQS&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html\&quot;&gt;FIFO (first-in-first-out) queues&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FifoQueue&lt;/code&gt; – Returns information about whether the queue is FIFO. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-understanding-logic.html\&quot;&gt;FIFO queue logic&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To determine whether a queue is &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html\&quot;&gt;FIFO&lt;/a&gt;, you can check whether &lt;code&gt;QueueName&lt;/code&gt; ends with the &lt;code&gt;.fifo&lt;/code&gt; suffix.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; – Returns whether content-based deduplication is enabled for the queue. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html\&quot;&gt;Exactly-once processing&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html\&quot;&gt;high throughput for FIFO queues&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeduplicationScope&lt;/code&gt; – Specifies whether message deduplication occurs at the message group or queue level. Valid values are &lt;code&gt;messageGroup&lt;/code&gt; and &lt;code&gt;queue&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FifoThroughputLimit&lt;/code&gt; – Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are &lt;code&gt;perQueue&lt;/code&gt; and &lt;code&gt;perMessageGroupId&lt;/code&gt;. The &lt;code&gt;perMessageGroupId&lt;/code&gt; value is allowed only when the value for &lt;code&gt;DeduplicationScope&lt;/code&gt; is &lt;code&gt;messageGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To enable high throughput for FIFO queues, do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;DeduplicationScope&lt;/code&gt; to &lt;code&gt;messageGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;FifoThroughputLimit&lt;/code&gt; to &lt;code&gt;perMessageGroupId&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you set these attributes to anything other than the values shown for enabling high throughput, normal throughput is in effect and deduplication occurs as specified.&lt;/p&gt; &lt;p&gt;For information on throughput quotas, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html\&quot;&gt;Quotas related to messages&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;GetQueueAttributesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidAttributeName </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetQueueAttributesResult> gETGetQueueAttributesWithHttpInfo(Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<QueueAttributeName> attributeNames) throws ApiException {
        okhttp3.Call localVarCall = gETGetQueueAttributesValidateBeforeCall(accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attributeNames, null);
        Type localVarReturnType = new TypeToken<GetQueueAttributesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets attributes for the specified queue.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To determine whether a queue is &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html\&quot;&gt;FIFO&lt;/a&gt;, you can check whether &lt;code&gt;QueueName&lt;/code&gt; ends with the &lt;code&gt;.fifo&lt;/code&gt; suffix.&lt;/p&gt; &lt;/note&gt;
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attributeNames &lt;p&gt;A list of attributes for which to retrieve information.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;AttributeNames&lt;/code&gt; parameter is optional, but if you don&#39;t specify values for this parameter, the request returns empty results.&lt;/p&gt; &lt;note&gt; &lt;p&gt;In the future, new attributes might be added. If you write code that calls this action, we recommend that you structure your code so that it can handle new attributes gracefully.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The following attributes are supported:&lt;/p&gt; &lt;important&gt; &lt;p&gt;The &lt;code&gt;ApproximateNumberOfMessagesDelayed&lt;/code&gt;, &lt;code&gt;ApproximateNumberOfMessagesNotVisible&lt;/code&gt;, and &lt;code&gt;ApproximateNumberOfMessages&lt;/code&gt; metrics may not achieve consistency until at least 1 minute after the producers stop sending messages. This period is required for the queue metadata to reach eventual consistency. &lt;/p&gt; &lt;/important&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;All&lt;/code&gt; – Returns all values. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApproximateNumberOfMessages&lt;/code&gt; – Returns the approximate number of messages available for retrieval from the queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApproximateNumberOfMessagesDelayed&lt;/code&gt; – Returns the approximate number of messages in the queue that are delayed and not available for reading immediately. This can happen when the queue is configured as a delay queue or when a message has been sent with a delay parameter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApproximateNumberOfMessagesNotVisible&lt;/code&gt; – Returns the approximate number of messages that are in flight. Messages are considered to be &lt;i&gt;in flight&lt;/i&gt; if they have been sent to a client but have not yet been deleted or have not yet reached the end of their visibility window. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CreatedTimestamp&lt;/code&gt; – Returns the time when the queue was created in seconds (&lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/Unix_time\&quot;&gt;epoch time&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DelaySeconds&lt;/code&gt; – Returns the default delay on the queue in seconds.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LastModifiedTimestamp&lt;/code&gt; – Returns the time when the queue was last changed in seconds (&lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/Unix_time\&quot;&gt;epoch time&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MaximumMessageSize&lt;/code&gt; – Returns the limit of how many bytes a message can contain before Amazon SQS rejects it.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; – Returns the length of time, in seconds, for which Amazon SQS retains a message. When you change a queue&#39;s attributes, the change can take up to 60 seconds for most of the attributes to propagate throughout the Amazon SQS system. Changes made to the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; attribute can take up to 15 minutes and will impact existing messages in the queue potentially causing them to be expired and deleted if the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; is reduced below the age of existing messages.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Policy&lt;/code&gt; – Returns the policy of the queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;QueueArn&lt;/code&gt; – Returns the Amazon resource name (ARN) of the queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ReceiveMessageWaitTimeSeconds&lt;/code&gt; – Returns the length of time, in seconds, for which the &lt;code&gt;ReceiveMessage&lt;/code&gt; action waits for a message to arrive. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;VisibilityTimeout&lt;/code&gt; – Returns the visibility timeout for the queue. For more information about the visibility timeout, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html\&quot;&gt;Visibility Timeout&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;dead-letter queues:&lt;/a&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedrivePolicy&lt;/code&gt; – The string that includes the parameters for the dead-letter queue functionality of the source queue as a JSON object. The parameters are as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;deadLetterTargetArn&lt;/code&gt; – The Amazon Resource Name (ARN) of the dead-letter queue to which Amazon SQS moves messages after the value of &lt;code&gt;maxReceiveCount&lt;/code&gt; is exceeded.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;maxReceiveCount&lt;/code&gt; – The number of times a message is delivered to the source queue before being moved to the dead-letter queue. Default: 10. When the &lt;code&gt;ReceiveCount&lt;/code&gt; for a message exceeds the &lt;code&gt;maxReceiveCount&lt;/code&gt; for a queue, Amazon SQS moves the message to the dead-letter-queue.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedriveAllowPolicy&lt;/code&gt; – The string that includes the parameters for the permissions for the dead-letter queue redrive permission and which source queues can specify dead-letter queues as a JSON object. The parameters are as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;redrivePermission&lt;/code&gt; – The permission type that defines which source queues can specify the current queue as the dead-letter queue. Valid values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;allowAll&lt;/code&gt; – (Default) Any source queues in this Amazon Web Services account in the same Region can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;denyAll&lt;/code&gt; – No source queues can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;byQueue&lt;/code&gt; – Only queues specified by the &lt;code&gt;sourceQueueArns&lt;/code&gt; parameter can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sourceQueueArns&lt;/code&gt; – The Amazon Resource Names (ARN)s of the source queues that can specify this queue as the dead-letter queue and redrive messages. You can specify this parameter only when the &lt;code&gt;redrivePermission&lt;/code&gt; parameter is set to &lt;code&gt;byQueue&lt;/code&gt;. You can specify up to 10 source queue ARNs. To allow more than 10 source queues to specify dead-letter queues, set the &lt;code&gt;redrivePermission&lt;/code&gt; parameter to &lt;code&gt;allowAll&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The dead-letter queue of a FIFO queue must also be a FIFO queue. Similarly, the dead-letter queue of a standard queue must also be a standard queue.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html\&quot;&gt;server-side-encryption&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsMasterKeyId&lt;/code&gt; – Returns the ID of an Amazon Web Services managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-sse-key-terms\&quot;&gt;Key Terms&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsDataKeyReusePeriodSeconds&lt;/code&gt; – Returns the length of time, in seconds, for which Amazon SQS can reuse a data key to encrypt or decrypt messages before calling KMS again. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-how-does-the-data-key-reuse-period-work\&quot;&gt;How Does the Data Key Reuse Period Work?&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SqsManagedSseEnabled&lt;/code&gt; – Returns information about whether the queue is using SSE-SQS encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (for example, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html\&quot;&gt;SSE-KMS&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.html\&quot;&gt;SSE-SQS&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html\&quot;&gt;FIFO (first-in-first-out) queues&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FifoQueue&lt;/code&gt; – Returns information about whether the queue is FIFO. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-understanding-logic.html\&quot;&gt;FIFO queue logic&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To determine whether a queue is &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html\&quot;&gt;FIFO&lt;/a&gt;, you can check whether &lt;code&gt;QueueName&lt;/code&gt; ends with the &lt;code&gt;.fifo&lt;/code&gt; suffix.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; – Returns whether content-based deduplication is enabled for the queue. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html\&quot;&gt;Exactly-once processing&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html\&quot;&gt;high throughput for FIFO queues&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeduplicationScope&lt;/code&gt; – Specifies whether message deduplication occurs at the message group or queue level. Valid values are &lt;code&gt;messageGroup&lt;/code&gt; and &lt;code&gt;queue&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FifoThroughputLimit&lt;/code&gt; – Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are &lt;code&gt;perQueue&lt;/code&gt; and &lt;code&gt;perMessageGroupId&lt;/code&gt;. The &lt;code&gt;perMessageGroupId&lt;/code&gt; value is allowed only when the value for &lt;code&gt;DeduplicationScope&lt;/code&gt; is &lt;code&gt;messageGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To enable high throughput for FIFO queues, do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;DeduplicationScope&lt;/code&gt; to &lt;code&gt;messageGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;FifoThroughputLimit&lt;/code&gt; to &lt;code&gt;perMessageGroupId&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you set these attributes to anything other than the values shown for enabling high throughput, normal throughput is in effect and deduplication occurs as specified.&lt;/p&gt; &lt;p&gt;For information on throughput quotas, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html\&quot;&gt;Quotas related to messages&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidAttributeName </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetQueueAttributesAsync(Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<QueueAttributeName> attributeNames, final ApiCallback<GetQueueAttributesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETGetQueueAttributesValidateBeforeCall(accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attributeNames, _callback);
        Type localVarReturnType = new TypeToken<GetQueueAttributesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETGetQueueUrl
     * @param queueName &lt;p&gt;The name of the queue whose URL must be fetched. Maximum 80 characters. Valid values: alphanumeric characters, hyphens (&lt;code&gt;-&lt;/code&gt;), and underscores (&lt;code&gt;_&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;Queue URLs and names are case-sensitive.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param queueOwnerAWSAccountId The Amazon Web Services account ID of the account that created the queue. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDoesNotExist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetQueueUrlCall(String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String queueOwnerAWSAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=GetQueueUrl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (queueName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("QueueName", queueName));
        }

        if (queueOwnerAWSAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("QueueOwnerAWSAccountId", queueOwnerAWSAccountId));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETGetQueueUrlValidateBeforeCall(String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String queueOwnerAWSAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling gETGetQueueUrl(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETGetQueueUrl(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETGetQueueUrl(Async)");
        }

        return gETGetQueueUrlCall(queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, queueOwnerAWSAccountId, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the URL of an existing Amazon SQS queue.&lt;/p&gt; &lt;p&gt;To access a queue that belongs to another AWS account, use the &lt;code&gt;QueueOwnerAWSAccountId&lt;/code&gt; parameter to specify the account ID of the queue&#39;s owner. The queue&#39;s owner must grant you permission to access the queue. For more information about shared queue access, see &lt;code&gt; &lt;a&gt;AddPermission&lt;/a&gt; &lt;/code&gt; or see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-writing-an-sqs-policy.html#write-messages-to-shared-queue\&quot;&gt;Allow Developers to Write Messages to a Shared Queue&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. &lt;/p&gt;
     * @param queueName &lt;p&gt;The name of the queue whose URL must be fetched. Maximum 80 characters. Valid values: alphanumeric characters, hyphens (&lt;code&gt;-&lt;/code&gt;), and underscores (&lt;code&gt;_&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;Queue URLs and names are case-sensitive.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param queueOwnerAWSAccountId The Amazon Web Services account ID of the account that created the queue. (optional)
     * @return GetQueueUrlResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDoesNotExist </td><td>  -  </td></tr>
     </table>
     */
    public GetQueueUrlResult gETGetQueueUrl(String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String queueOwnerAWSAccountId) throws ApiException {
        ApiResponse<GetQueueUrlResult> localVarResp = gETGetQueueUrlWithHttpInfo(queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, queueOwnerAWSAccountId);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the URL of an existing Amazon SQS queue.&lt;/p&gt; &lt;p&gt;To access a queue that belongs to another AWS account, use the &lt;code&gt;QueueOwnerAWSAccountId&lt;/code&gt; parameter to specify the account ID of the queue&#39;s owner. The queue&#39;s owner must grant you permission to access the queue. For more information about shared queue access, see &lt;code&gt; &lt;a&gt;AddPermission&lt;/a&gt; &lt;/code&gt; or see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-writing-an-sqs-policy.html#write-messages-to-shared-queue\&quot;&gt;Allow Developers to Write Messages to a Shared Queue&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. &lt;/p&gt;
     * @param queueName &lt;p&gt;The name of the queue whose URL must be fetched. Maximum 80 characters. Valid values: alphanumeric characters, hyphens (&lt;code&gt;-&lt;/code&gt;), and underscores (&lt;code&gt;_&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;Queue URLs and names are case-sensitive.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param queueOwnerAWSAccountId The Amazon Web Services account ID of the account that created the queue. (optional)
     * @return ApiResponse&lt;GetQueueUrlResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDoesNotExist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetQueueUrlResult> gETGetQueueUrlWithHttpInfo(String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String queueOwnerAWSAccountId) throws ApiException {
        okhttp3.Call localVarCall = gETGetQueueUrlValidateBeforeCall(queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, queueOwnerAWSAccountId, null);
        Type localVarReturnType = new TypeToken<GetQueueUrlResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the URL of an existing Amazon SQS queue.&lt;/p&gt; &lt;p&gt;To access a queue that belongs to another AWS account, use the &lt;code&gt;QueueOwnerAWSAccountId&lt;/code&gt; parameter to specify the account ID of the queue&#39;s owner. The queue&#39;s owner must grant you permission to access the queue. For more information about shared queue access, see &lt;code&gt; &lt;a&gt;AddPermission&lt;/a&gt; &lt;/code&gt; or see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-writing-an-sqs-policy.html#write-messages-to-shared-queue\&quot;&gt;Allow Developers to Write Messages to a Shared Queue&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. &lt;/p&gt;
     * @param queueName &lt;p&gt;The name of the queue whose URL must be fetched. Maximum 80 characters. Valid values: alphanumeric characters, hyphens (&lt;code&gt;-&lt;/code&gt;), and underscores (&lt;code&gt;_&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;Queue URLs and names are case-sensitive.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param queueOwnerAWSAccountId The Amazon Web Services account ID of the account that created the queue. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDoesNotExist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetQueueUrlAsync(String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String queueOwnerAWSAccountId, final ApiCallback<GetQueueUrlResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETGetQueueUrlValidateBeforeCall(queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, queueOwnerAWSAccountId, _callback);
        Type localVarReturnType = new TypeToken<GetQueueUrlResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListDeadLetterSourceQueues
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token to request the next set of results. (optional)
     * @param maxResults Maximum number of results to include in the response. Value range is 1 to 1000. You must set &lt;code&gt;MaxResults&lt;/code&gt; to receive a value for &lt;code&gt;NextToken&lt;/code&gt; in the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDoesNotExist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListDeadLetterSourceQueuesCall(Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{AccountNumber}/{QueueName}/#Action=ListDeadLetterSourceQueues"
            .replace("{" + "AccountNumber" + "}", localVarApiClient.escapeString(accountNumber.toString()))
            .replace("{" + "QueueName" + "}", localVarApiClient.escapeString(queueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListDeadLetterSourceQueuesValidateBeforeCall(Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountNumber' is set
        if (accountNumber == null) {
            throw new ApiException("Missing the required parameter 'accountNumber' when calling gETListDeadLetterSourceQueues(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling gETListDeadLetterSourceQueues(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListDeadLetterSourceQueues(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListDeadLetterSourceQueues(Async)");
        }

        return gETListDeadLetterSourceQueuesCall(accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a list of your queues that have the &lt;code&gt;RedrivePolicy&lt;/code&gt; queue attribute configured with a dead-letter queue.&lt;/p&gt; &lt;p&gt; The &lt;code&gt;ListDeadLetterSourceQueues&lt;/code&gt; methods supports pagination. Set parameter &lt;code&gt;MaxResults&lt;/code&gt; in the request to specify the maximum number of results to be returned in the response. If you do not set &lt;code&gt;MaxResults&lt;/code&gt;, the response includes a maximum of 1,000 results. If you set &lt;code&gt;MaxResults&lt;/code&gt; and there are additional results to display, the response includes a value for &lt;code&gt;NextToken&lt;/code&gt;. Use &lt;code&gt;NextToken&lt;/code&gt; as a parameter in your next request to &lt;code&gt;ListDeadLetterSourceQueues&lt;/code&gt; to receive the next page of results. &lt;/p&gt; &lt;p&gt;For more information about using dead-letter queues, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;Using Amazon SQS Dead-Letter Queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token to request the next set of results. (optional)
     * @param maxResults Maximum number of results to include in the response. Value range is 1 to 1000. You must set &lt;code&gt;MaxResults&lt;/code&gt; to receive a value for &lt;code&gt;NextToken&lt;/code&gt; in the response. (optional)
     * @return ListDeadLetterSourceQueuesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDoesNotExist </td><td>  -  </td></tr>
     </table>
     */
    public ListDeadLetterSourceQueuesResult gETListDeadLetterSourceQueues(Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults) throws ApiException {
        ApiResponse<ListDeadLetterSourceQueuesResult> localVarResp = gETListDeadLetterSourceQueuesWithHttpInfo(accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a list of your queues that have the &lt;code&gt;RedrivePolicy&lt;/code&gt; queue attribute configured with a dead-letter queue.&lt;/p&gt; &lt;p&gt; The &lt;code&gt;ListDeadLetterSourceQueues&lt;/code&gt; methods supports pagination. Set parameter &lt;code&gt;MaxResults&lt;/code&gt; in the request to specify the maximum number of results to be returned in the response. If you do not set &lt;code&gt;MaxResults&lt;/code&gt;, the response includes a maximum of 1,000 results. If you set &lt;code&gt;MaxResults&lt;/code&gt; and there are additional results to display, the response includes a value for &lt;code&gt;NextToken&lt;/code&gt;. Use &lt;code&gt;NextToken&lt;/code&gt; as a parameter in your next request to &lt;code&gt;ListDeadLetterSourceQueues&lt;/code&gt; to receive the next page of results. &lt;/p&gt; &lt;p&gt;For more information about using dead-letter queues, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;Using Amazon SQS Dead-Letter Queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token to request the next set of results. (optional)
     * @param maxResults Maximum number of results to include in the response. Value range is 1 to 1000. You must set &lt;code&gt;MaxResults&lt;/code&gt; to receive a value for &lt;code&gt;NextToken&lt;/code&gt; in the response. (optional)
     * @return ApiResponse&lt;ListDeadLetterSourceQueuesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDoesNotExist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDeadLetterSourceQueuesResult> gETListDeadLetterSourceQueuesWithHttpInfo(Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = gETListDeadLetterSourceQueuesValidateBeforeCall(accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, null);
        Type localVarReturnType = new TypeToken<ListDeadLetterSourceQueuesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a list of your queues that have the &lt;code&gt;RedrivePolicy&lt;/code&gt; queue attribute configured with a dead-letter queue.&lt;/p&gt; &lt;p&gt; The &lt;code&gt;ListDeadLetterSourceQueues&lt;/code&gt; methods supports pagination. Set parameter &lt;code&gt;MaxResults&lt;/code&gt; in the request to specify the maximum number of results to be returned in the response. If you do not set &lt;code&gt;MaxResults&lt;/code&gt;, the response includes a maximum of 1,000 results. If you set &lt;code&gt;MaxResults&lt;/code&gt; and there are additional results to display, the response includes a value for &lt;code&gt;NextToken&lt;/code&gt;. Use &lt;code&gt;NextToken&lt;/code&gt; as a parameter in your next request to &lt;code&gt;ListDeadLetterSourceQueues&lt;/code&gt; to receive the next page of results. &lt;/p&gt; &lt;p&gt;For more information about using dead-letter queues, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;Using Amazon SQS Dead-Letter Queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token to request the next set of results. (optional)
     * @param maxResults Maximum number of results to include in the response. Value range is 1 to 1000. You must set &lt;code&gt;MaxResults&lt;/code&gt; to receive a value for &lt;code&gt;NextToken&lt;/code&gt; in the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDoesNotExist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListDeadLetterSourceQueuesAsync(Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, final ApiCallback<ListDeadLetterSourceQueuesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListDeadLetterSourceQueuesValidateBeforeCall(accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, _callback);
        Type localVarReturnType = new TypeToken<ListDeadLetterSourceQueuesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListMessageMoveTasks
     * @param sourceArn The ARN of the queue whose message movement tasks are to be listed. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of results to include in the response. The default is 1, which provides the most recent message movement task. The upper limit is 10. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListMessageMoveTasksCall(String sourceArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListMessageMoveTasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceArn", sourceArn));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListMessageMoveTasksValidateBeforeCall(String sourceArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceArn' is set
        if (sourceArn == null) {
            throw new ApiException("Missing the required parameter 'sourceArn' when calling gETListMessageMoveTasks(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListMessageMoveTasks(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListMessageMoveTasks(Async)");
        }

        return gETListMessageMoveTasksCall(sourceArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets the most recent message movement tasks (up to 10) under a specific source queue.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;This action is currently limited to supporting message redrive from &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;dead-letter queues (DLQs)&lt;/a&gt; only. In this context, the source queue is the dead-letter queue (DLQ), while the destination queue can be the original source queue (from which the messages were driven to the dead-letter-queue), or a custom destination queue. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Currently, only standard queues are supported.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Only one active message movement task is supported per queue at any given time.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param sourceArn The ARN of the queue whose message movement tasks are to be listed. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of results to include in the response. The default is 1, which provides the most recent message movement task. The upper limit is 10. (optional)
     * @return ListMessageMoveTasksResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public ListMessageMoveTasksResult gETListMessageMoveTasks(String sourceArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults) throws ApiException {
        ApiResponse<ListMessageMoveTasksResult> localVarResp = gETListMessageMoveTasksWithHttpInfo(sourceArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets the most recent message movement tasks (up to 10) under a specific source queue.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;This action is currently limited to supporting message redrive from &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;dead-letter queues (DLQs)&lt;/a&gt; only. In this context, the source queue is the dead-letter queue (DLQ), while the destination queue can be the original source queue (from which the messages were driven to the dead-letter-queue), or a custom destination queue. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Currently, only standard queues are supported.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Only one active message movement task is supported per queue at any given time.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param sourceArn The ARN of the queue whose message movement tasks are to be listed. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of results to include in the response. The default is 1, which provides the most recent message movement task. The upper limit is 10. (optional)
     * @return ApiResponse&lt;ListMessageMoveTasksResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListMessageMoveTasksResult> gETListMessageMoveTasksWithHttpInfo(String sourceArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = gETListMessageMoveTasksValidateBeforeCall(sourceArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, null);
        Type localVarReturnType = new TypeToken<ListMessageMoveTasksResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets the most recent message movement tasks (up to 10) under a specific source queue.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;This action is currently limited to supporting message redrive from &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;dead-letter queues (DLQs)&lt;/a&gt; only. In this context, the source queue is the dead-letter queue (DLQ), while the destination queue can be the original source queue (from which the messages were driven to the dead-letter-queue), or a custom destination queue. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Currently, only standard queues are supported.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Only one active message movement task is supported per queue at any given time.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param sourceArn The ARN of the queue whose message movement tasks are to be listed. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of results to include in the response. The default is 1, which provides the most recent message movement task. The upper limit is 10. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListMessageMoveTasksAsync(String sourceArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, final ApiCallback<ListMessageMoveTasksResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListMessageMoveTasksValidateBeforeCall(sourceArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, _callback);
        Type localVarReturnType = new TypeToken<ListMessageMoveTasksResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListQueueTags
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListQueueTagsCall(Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{AccountNumber}/{QueueName}/#Action=ListQueueTags"
            .replace("{" + "AccountNumber" + "}", localVarApiClient.escapeString(accountNumber.toString()))
            .replace("{" + "QueueName" + "}", localVarApiClient.escapeString(queueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListQueueTagsValidateBeforeCall(Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountNumber' is set
        if (accountNumber == null) {
            throw new ApiException("Missing the required parameter 'accountNumber' when calling gETListQueueTags(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling gETListQueueTags(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListQueueTags(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListQueueTags(Async)");
        }

        return gETListQueueTagsCall(accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;List all cost allocation tags added to the specified Amazon SQS queue. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html\&quot;&gt;Tagging Your Amazon SQS Queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListQueueTagsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListQueueTagsResult gETListQueueTags(Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListQueueTagsResult> localVarResp = gETListQueueTagsWithHttpInfo(accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;List all cost allocation tags added to the specified Amazon SQS queue. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html\&quot;&gt;Tagging Your Amazon SQS Queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListQueueTagsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListQueueTagsResult> gETListQueueTagsWithHttpInfo(Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETListQueueTagsValidateBeforeCall(accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListQueueTagsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;List all cost allocation tags added to the specified Amazon SQS queue. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html\&quot;&gt;Tagging Your Amazon SQS Queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListQueueTagsAsync(Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListQueueTagsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListQueueTagsValidateBeforeCall(accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListQueueTagsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListQueues
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param queueNamePrefix &lt;p&gt;A string to use for filtering the list results. Only those queues whose name begins with the specified string are returned.&lt;/p&gt; &lt;p&gt;Queue URLs and names are case-sensitive.&lt;/p&gt; (optional)
     * @param nextToken Pagination token to request the next set of results. (optional)
     * @param maxResults Maximum number of results to include in the response. Value range is 1 to 1000. You must set &lt;code&gt;MaxResults&lt;/code&gt; to receive a value for &lt;code&gt;NextToken&lt;/code&gt; in the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListQueuesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String queueNamePrefix, String nextToken, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListQueues";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (queueNamePrefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("QueueNamePrefix", queueNamePrefix));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListQueuesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String queueNamePrefix, String nextToken, Integer maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListQueues(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListQueues(Async)");
        }

        return gETListQueuesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, queueNamePrefix, nextToken, maxResults, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a list of your queues in the current region. The response includes a maximum of 1,000 results. If you specify a value for the optional &lt;code&gt;QueueNamePrefix&lt;/code&gt; parameter, only queues with a name that begins with the specified value are returned.&lt;/p&gt; &lt;p&gt; The &lt;code&gt;listQueues&lt;/code&gt; methods supports pagination. Set parameter &lt;code&gt;MaxResults&lt;/code&gt; in the request to specify the maximum number of results to be returned in the response. If you do not set &lt;code&gt;MaxResults&lt;/code&gt;, the response includes a maximum of 1,000 results. If you set &lt;code&gt;MaxResults&lt;/code&gt; and there are additional results to display, the response includes a value for &lt;code&gt;NextToken&lt;/code&gt;. Use &lt;code&gt;NextToken&lt;/code&gt; as a parameter in your next request to &lt;code&gt;listQueues&lt;/code&gt; to receive the next page of results. &lt;/p&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param queueNamePrefix &lt;p&gt;A string to use for filtering the list results. Only those queues whose name begins with the specified string are returned.&lt;/p&gt; &lt;p&gt;Queue URLs and names are case-sensitive.&lt;/p&gt; (optional)
     * @param nextToken Pagination token to request the next set of results. (optional)
     * @param maxResults Maximum number of results to include in the response. Value range is 1 to 1000. You must set &lt;code&gt;MaxResults&lt;/code&gt; to receive a value for &lt;code&gt;NextToken&lt;/code&gt; in the response. (optional)
     * @return ListQueuesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListQueuesResult gETListQueues(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String queueNamePrefix, String nextToken, Integer maxResults) throws ApiException {
        ApiResponse<ListQueuesResult> localVarResp = gETListQueuesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, queueNamePrefix, nextToken, maxResults);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a list of your queues in the current region. The response includes a maximum of 1,000 results. If you specify a value for the optional &lt;code&gt;QueueNamePrefix&lt;/code&gt; parameter, only queues with a name that begins with the specified value are returned.&lt;/p&gt; &lt;p&gt; The &lt;code&gt;listQueues&lt;/code&gt; methods supports pagination. Set parameter &lt;code&gt;MaxResults&lt;/code&gt; in the request to specify the maximum number of results to be returned in the response. If you do not set &lt;code&gt;MaxResults&lt;/code&gt;, the response includes a maximum of 1,000 results. If you set &lt;code&gt;MaxResults&lt;/code&gt; and there are additional results to display, the response includes a value for &lt;code&gt;NextToken&lt;/code&gt;. Use &lt;code&gt;NextToken&lt;/code&gt; as a parameter in your next request to &lt;code&gt;listQueues&lt;/code&gt; to receive the next page of results. &lt;/p&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param queueNamePrefix &lt;p&gt;A string to use for filtering the list results. Only those queues whose name begins with the specified string are returned.&lt;/p&gt; &lt;p&gt;Queue URLs and names are case-sensitive.&lt;/p&gt; (optional)
     * @param nextToken Pagination token to request the next set of results. (optional)
     * @param maxResults Maximum number of results to include in the response. Value range is 1 to 1000. You must set &lt;code&gt;MaxResults&lt;/code&gt; to receive a value for &lt;code&gt;NextToken&lt;/code&gt; in the response. (optional)
     * @return ApiResponse&lt;ListQueuesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListQueuesResult> gETListQueuesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String queueNamePrefix, String nextToken, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = gETListQueuesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, queueNamePrefix, nextToken, maxResults, null);
        Type localVarReturnType = new TypeToken<ListQueuesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a list of your queues in the current region. The response includes a maximum of 1,000 results. If you specify a value for the optional &lt;code&gt;QueueNamePrefix&lt;/code&gt; parameter, only queues with a name that begins with the specified value are returned.&lt;/p&gt; &lt;p&gt; The &lt;code&gt;listQueues&lt;/code&gt; methods supports pagination. Set parameter &lt;code&gt;MaxResults&lt;/code&gt; in the request to specify the maximum number of results to be returned in the response. If you do not set &lt;code&gt;MaxResults&lt;/code&gt;, the response includes a maximum of 1,000 results. If you set &lt;code&gt;MaxResults&lt;/code&gt; and there are additional results to display, the response includes a value for &lt;code&gt;NextToken&lt;/code&gt;. Use &lt;code&gt;NextToken&lt;/code&gt; as a parameter in your next request to &lt;code&gt;listQueues&lt;/code&gt; to receive the next page of results. &lt;/p&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param queueNamePrefix &lt;p&gt;A string to use for filtering the list results. Only those queues whose name begins with the specified string are returned.&lt;/p&gt; &lt;p&gt;Queue URLs and names are case-sensitive.&lt;/p&gt; (optional)
     * @param nextToken Pagination token to request the next set of results. (optional)
     * @param maxResults Maximum number of results to include in the response. Value range is 1 to 1000. You must set &lt;code&gt;MaxResults&lt;/code&gt; to receive a value for &lt;code&gt;NextToken&lt;/code&gt; in the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListQueuesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String queueNamePrefix, String nextToken, Integer maxResults, final ApiCallback<ListQueuesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListQueuesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, queueNamePrefix, nextToken, maxResults, _callback);
        Type localVarReturnType = new TypeToken<ListQueuesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETPurgeQueue
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PurgeQueueInProgress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPurgeQueueCall(Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{AccountNumber}/{QueueName}/#Action=PurgeQueue"
            .replace("{" + "AccountNumber" + "}", localVarApiClient.escapeString(accountNumber.toString()))
            .replace("{" + "QueueName" + "}", localVarApiClient.escapeString(queueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETPurgeQueueValidateBeforeCall(Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountNumber' is set
        if (accountNumber == null) {
            throw new ApiException("Missing the required parameter 'accountNumber' when calling gETPurgeQueue(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling gETPurgeQueue(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETPurgeQueue(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETPurgeQueue(Async)");
        }

        return gETPurgeQueueCall(accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes available messages in a queue (including in-flight messages) specified by the &lt;code&gt;QueueURL&lt;/code&gt; parameter.&lt;/p&gt; &lt;important&gt; &lt;p&gt;When you use the &lt;code&gt;PurgeQueue&lt;/code&gt; action, you can&#39;t retrieve any messages deleted from a queue.&lt;/p&gt; &lt;p&gt;The message deletion process takes up to 60 seconds. We recommend waiting for 60 seconds regardless of your queue&#39;s size. &lt;/p&gt; &lt;/important&gt; &lt;p&gt;Messages sent to the queue &lt;i&gt;before&lt;/i&gt; you call &lt;code&gt;PurgeQueue&lt;/code&gt; might be received but are deleted within the next minute.&lt;/p&gt; &lt;p&gt;Messages sent to the queue &lt;i&gt;after&lt;/i&gt; you call &lt;code&gt;PurgeQueue&lt;/code&gt; might be deleted while the queue is being purged.&lt;/p&gt;
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PurgeQueueInProgress </td><td>  -  </td></tr>
     </table>
     */
    public void gETPurgeQueue(Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETPurgeQueueWithHttpInfo(accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes available messages in a queue (including in-flight messages) specified by the &lt;code&gt;QueueURL&lt;/code&gt; parameter.&lt;/p&gt; &lt;important&gt; &lt;p&gt;When you use the &lt;code&gt;PurgeQueue&lt;/code&gt; action, you can&#39;t retrieve any messages deleted from a queue.&lt;/p&gt; &lt;p&gt;The message deletion process takes up to 60 seconds. We recommend waiting for 60 seconds regardless of your queue&#39;s size. &lt;/p&gt; &lt;/important&gt; &lt;p&gt;Messages sent to the queue &lt;i&gt;before&lt;/i&gt; you call &lt;code&gt;PurgeQueue&lt;/code&gt; might be received but are deleted within the next minute.&lt;/p&gt; &lt;p&gt;Messages sent to the queue &lt;i&gt;after&lt;/i&gt; you call &lt;code&gt;PurgeQueue&lt;/code&gt; might be deleted while the queue is being purged.&lt;/p&gt;
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PurgeQueueInProgress </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETPurgeQueueWithHttpInfo(Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETPurgeQueueValidateBeforeCall(accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes available messages in a queue (including in-flight messages) specified by the &lt;code&gt;QueueURL&lt;/code&gt; parameter.&lt;/p&gt; &lt;important&gt; &lt;p&gt;When you use the &lt;code&gt;PurgeQueue&lt;/code&gt; action, you can&#39;t retrieve any messages deleted from a queue.&lt;/p&gt; &lt;p&gt;The message deletion process takes up to 60 seconds. We recommend waiting for 60 seconds regardless of your queue&#39;s size. &lt;/p&gt; &lt;/important&gt; &lt;p&gt;Messages sent to the queue &lt;i&gt;before&lt;/i&gt; you call &lt;code&gt;PurgeQueue&lt;/code&gt; might be received but are deleted within the next minute.&lt;/p&gt; &lt;p&gt;Messages sent to the queue &lt;i&gt;after&lt;/i&gt; you call &lt;code&gt;PurgeQueue&lt;/code&gt; might be deleted while the queue is being purged.&lt;/p&gt;
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PurgeQueueInProgress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPurgeQueueAsync(Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETPurgeQueueValidateBeforeCall(accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETReceiveMessage
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attributeNames &lt;p&gt;A list of attributes that need to be returned along with each message. These attributes include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;All&lt;/code&gt; – Returns all values.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApproximateFirstReceiveTimestamp&lt;/code&gt; – Returns the time the message was first received from the queue (&lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/Unix_time\&quot;&gt;epoch time&lt;/a&gt; in milliseconds).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApproximateReceiveCount&lt;/code&gt; – Returns the number of times a message has been received across all queues but not deleted.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AWSTraceHeader&lt;/code&gt; – Returns the X-Ray trace header string. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SenderId&lt;/code&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For a user, returns the user ID, for example &lt;code&gt;ABCDEFGHI1JKLMNOPQ23R&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For an IAM role, returns the IAM role ID, for example &lt;code&gt;ABCDE1F2GH3I4JK5LMNOP:i-a123b456&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SentTimestamp&lt;/code&gt; – Returns the time the message was sent to the queue (&lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/Unix_time\&quot;&gt;epoch time&lt;/a&gt; in milliseconds).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SqsManagedSseEnabled&lt;/code&gt; – Enables server-side queue encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (for example, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html\&quot;&gt;SSE-KMS&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.html\&quot;&gt;SSE-SQS&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageDeduplicationId&lt;/code&gt; – Returns the value provided by the producer that calls the &lt;code&gt; &lt;a&gt;SendMessage&lt;/a&gt; &lt;/code&gt; action.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageGroupId&lt;/code&gt; – Returns the value provided by the producer that calls the &lt;code&gt; &lt;a&gt;SendMessage&lt;/a&gt; &lt;/code&gt; action. Messages with the same &lt;code&gt;MessageGroupId&lt;/code&gt; are returned in sequence.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SequenceNumber&lt;/code&gt; – Returns the value provided by Amazon SQS.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param messageAttributeNames &lt;p&gt;The name of the message attribute, where &lt;i&gt;N&lt;/i&gt; is the index.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The name can contain alphanumeric characters and the underscore (&lt;code&gt;_&lt;/code&gt;), hyphen (&lt;code&gt;-&lt;/code&gt;), and period (&lt;code&gt;.&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The name is case-sensitive and must be unique among all attribute names for the message.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The name must not start with AWS-reserved prefixes such as &lt;code&gt;AWS.&lt;/code&gt; or &lt;code&gt;Amazon.&lt;/code&gt; (or any casing variants).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The name must not start or end with a period (&lt;code&gt;.&lt;/code&gt;), and it should not have periods in succession (&lt;code&gt;..&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The name can be up to 256 characters long.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When using &lt;code&gt;ReceiveMessage&lt;/code&gt;, you can send a list of attribute names to receive, or you can return all of the attributes by specifying &lt;code&gt;All&lt;/code&gt; or &lt;code&gt;.*&lt;/code&gt; in your request. You can also use all message attributes starting with a prefix, for example &lt;code&gt;bar.*&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param maxNumberOfMessages The maximum number of messages to return. Amazon SQS never returns more messages than this value (however, fewer messages might be returned). Valid values: 1 to 10. Default: 1. (optional)
     * @param visibilityTimeout The duration (in seconds) that the received messages are hidden from subsequent retrieve requests after being retrieved by a &lt;code&gt;ReceiveMessage&lt;/code&gt; request. (optional)
     * @param waitTimeSeconds &lt;p&gt;The duration (in seconds) for which the call waits for a message to arrive in the queue before returning. If a message is available, the call returns sooner than &lt;code&gt;WaitTimeSeconds&lt;/code&gt;. If no messages are available and the wait time expires, the call returns successfully with an empty list of messages.&lt;/p&gt; &lt;important&gt; &lt;p&gt;To avoid HTTP errors, ensure that the HTTP response timeout for &lt;code&gt;ReceiveMessage&lt;/code&gt; requests is longer than the &lt;code&gt;WaitTimeSeconds&lt;/code&gt; parameter. For example, with the Java SDK, you can set HTTP transport settings using the &lt;a href&#x3D;\&quot;https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/nio/netty/NettyNioAsyncHttpClient.html\&quot;&gt; NettyNioAsyncHttpClient&lt;/a&gt; for asynchronous clients, or the &lt;a href&#x3D;\&quot;https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/apache/ApacheHttpClient.html\&quot;&gt; ApacheHttpClient&lt;/a&gt; for synchronous clients. &lt;/p&gt; &lt;/important&gt; (optional)
     * @param receiveRequestAttemptId &lt;p&gt;This parameter applies only to FIFO (first-in-first-out) queues.&lt;/p&gt; &lt;p&gt;The token used for deduplication of &lt;code&gt;ReceiveMessage&lt;/code&gt; calls. If a networking issue occurs after a &lt;code&gt;ReceiveMessage&lt;/code&gt; action, and instead of a response you receive a generic error, it is possible to retry the same action with an identical &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt; to retrieve the same set of messages, even if their visibility timeout has not yet expired.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can use &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt; only for 5 minutes after a &lt;code&gt;ReceiveMessage&lt;/code&gt; action.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When you set &lt;code&gt;FifoQueue&lt;/code&gt;, a caller of the &lt;code&gt;ReceiveMessage&lt;/code&gt; action can provide a &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt; explicitly.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If a caller of the &lt;code&gt;ReceiveMessage&lt;/code&gt; action doesn&#39;t provide a &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt;, Amazon SQS generates a &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;It is possible to retry the &lt;code&gt;ReceiveMessage&lt;/code&gt; action with the same &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt; if none of the messages have been modified (deleted or had their visibility changes).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;During a visibility timeout, subsequent calls with the same &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt; return the same messages and receipt handles. If a retry occurs within the deduplication interval, it resets the visibility timeout. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html\&quot;&gt;Visibility Timeout&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If a caller of the &lt;code&gt;ReceiveMessage&lt;/code&gt; action still processes messages when the visibility timeout expires and messages become visible, another worker consuming from the same queue can receive the same messages and therefore process duplicates. Also, if a consumer whose message processing time is longer than the visibility timeout tries to delete the processed messages, the action fails with an error.&lt;/p&gt; &lt;p&gt;To mitigate this effect, ensure that your application observes a safe threshold before the visibility timeout expires and extend the visibility timeout as necessary.&lt;/p&gt; &lt;/important&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;While messages with a particular &lt;code&gt;MessageGroupId&lt;/code&gt; are invisible, no more messages belonging to the same &lt;code&gt;MessageGroupId&lt;/code&gt; are returned until the visibility timeout expires. You can still receive messages with another &lt;code&gt;MessageGroupId&lt;/code&gt; as long as it is also visible.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If a caller of &lt;code&gt;ReceiveMessage&lt;/code&gt; can&#39;t track the &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt;, no retries work until the original visibility timeout expires. As a result, delays might occur but the messages in the queue remain in a strict order.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The maximum length of &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt; is 128 characters. &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt; can contain alphanumeric characters (&lt;code&gt;a-z&lt;/code&gt;, &lt;code&gt;A-Z&lt;/code&gt;, &lt;code&gt;0-9&lt;/code&gt;) and punctuation (&lt;code&gt;!\&quot;#$%&amp;amp;&#39;()*+,-./:;&amp;lt;&#x3D;&amp;gt;?@[\\]^_&#x60;{|}~&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;For best practices of using &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-receiverequestattemptid-request-parameter.html\&quot;&gt;Using the ReceiveRequestAttemptId Request Parameter&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OverLimit </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETReceiveMessageCall(Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<QueueAttributeName> attributeNames, List<String> messageAttributeNames, Integer maxNumberOfMessages, Integer visibilityTimeout, Integer waitTimeSeconds, String receiveRequestAttemptId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{AccountNumber}/{QueueName}/#Action=ReceiveMessage"
            .replace("{" + "AccountNumber" + "}", localVarApiClient.escapeString(accountNumber.toString()))
            .replace("{" + "QueueName" + "}", localVarApiClient.escapeString(queueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attributeNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AttributeNames", attributeNames));
        }

        if (messageAttributeNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "MessageAttributeNames", messageAttributeNames));
        }

        if (maxNumberOfMessages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxNumberOfMessages", maxNumberOfMessages));
        }

        if (visibilityTimeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VisibilityTimeout", visibilityTimeout));
        }

        if (waitTimeSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("WaitTimeSeconds", waitTimeSeconds));
        }

        if (receiveRequestAttemptId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReceiveRequestAttemptId", receiveRequestAttemptId));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETReceiveMessageValidateBeforeCall(Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<QueueAttributeName> attributeNames, List<String> messageAttributeNames, Integer maxNumberOfMessages, Integer visibilityTimeout, Integer waitTimeSeconds, String receiveRequestAttemptId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountNumber' is set
        if (accountNumber == null) {
            throw new ApiException("Missing the required parameter 'accountNumber' when calling gETReceiveMessage(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling gETReceiveMessage(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETReceiveMessage(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETReceiveMessage(Async)");
        }

        return gETReceiveMessageCall(accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attributeNames, messageAttributeNames, maxNumberOfMessages, visibilityTimeout, waitTimeSeconds, receiveRequestAttemptId, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves one or more messages (up to 10), from the specified queue. Using the &lt;code&gt;WaitTimeSeconds&lt;/code&gt; parameter enables long-poll support. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-long-polling.html\&quot;&gt;Amazon SQS Long Polling&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;p&gt;Short poll is the default behavior where a weighted random set of machines is sampled on a &lt;code&gt;ReceiveMessage&lt;/code&gt; call. Thus, only the messages on the sampled machines are returned. If the number of messages in the queue is small (fewer than 1,000), you most likely get fewer messages than you requested per &lt;code&gt;ReceiveMessage&lt;/code&gt; call. If the number of messages in the queue is extremely small, you might not receive any messages in a particular &lt;code&gt;ReceiveMessage&lt;/code&gt; response. If this happens, repeat the request. &lt;/p&gt; &lt;p&gt;For each message returned, the response includes the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The message body.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An MD5 digest of the message body. For information about MD5, see &lt;a href&#x3D;\&quot;https://www.ietf.org/rfc/rfc1321.txt\&quot;&gt;RFC1321&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;MessageId&lt;/code&gt; you received when you sent the message to the queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The receipt handle.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The message attributes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An MD5 digest of the message attributes.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The receipt handle is the identifier you must provide when deleting the message. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-message-identifiers.html\&quot;&gt;Queue and Message Identifiers&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can provide the &lt;code&gt;VisibilityTimeout&lt;/code&gt; parameter in your request. The parameter is applied to the messages that Amazon SQS returns in the response. If you don&#39;t include the parameter, the overall visibility timeout for the queue is used for the returned messages. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html\&quot;&gt;Visibility Timeout&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;A message that isn&#39;t deleted or a message whose visibility isn&#39;t extended before the visibility timeout expires counts as a failed receive. Depending on the configuration of the queue, the message might be sent to the dead-letter queue.&lt;/p&gt; &lt;note&gt; &lt;p&gt;In the future, new attributes might be added. If you write code that calls this action, we recommend that you structure your code so that it can handle new attributes gracefully.&lt;/p&gt; &lt;/note&gt;
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attributeNames &lt;p&gt;A list of attributes that need to be returned along with each message. These attributes include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;All&lt;/code&gt; – Returns all values.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApproximateFirstReceiveTimestamp&lt;/code&gt; – Returns the time the message was first received from the queue (&lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/Unix_time\&quot;&gt;epoch time&lt;/a&gt; in milliseconds).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApproximateReceiveCount&lt;/code&gt; – Returns the number of times a message has been received across all queues but not deleted.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AWSTraceHeader&lt;/code&gt; – Returns the X-Ray trace header string. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SenderId&lt;/code&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For a user, returns the user ID, for example &lt;code&gt;ABCDEFGHI1JKLMNOPQ23R&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For an IAM role, returns the IAM role ID, for example &lt;code&gt;ABCDE1F2GH3I4JK5LMNOP:i-a123b456&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SentTimestamp&lt;/code&gt; – Returns the time the message was sent to the queue (&lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/Unix_time\&quot;&gt;epoch time&lt;/a&gt; in milliseconds).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SqsManagedSseEnabled&lt;/code&gt; – Enables server-side queue encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (for example, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html\&quot;&gt;SSE-KMS&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.html\&quot;&gt;SSE-SQS&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageDeduplicationId&lt;/code&gt; – Returns the value provided by the producer that calls the &lt;code&gt; &lt;a&gt;SendMessage&lt;/a&gt; &lt;/code&gt; action.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageGroupId&lt;/code&gt; – Returns the value provided by the producer that calls the &lt;code&gt; &lt;a&gt;SendMessage&lt;/a&gt; &lt;/code&gt; action. Messages with the same &lt;code&gt;MessageGroupId&lt;/code&gt; are returned in sequence.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SequenceNumber&lt;/code&gt; – Returns the value provided by Amazon SQS.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param messageAttributeNames &lt;p&gt;The name of the message attribute, where &lt;i&gt;N&lt;/i&gt; is the index.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The name can contain alphanumeric characters and the underscore (&lt;code&gt;_&lt;/code&gt;), hyphen (&lt;code&gt;-&lt;/code&gt;), and period (&lt;code&gt;.&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The name is case-sensitive and must be unique among all attribute names for the message.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The name must not start with AWS-reserved prefixes such as &lt;code&gt;AWS.&lt;/code&gt; or &lt;code&gt;Amazon.&lt;/code&gt; (or any casing variants).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The name must not start or end with a period (&lt;code&gt;.&lt;/code&gt;), and it should not have periods in succession (&lt;code&gt;..&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The name can be up to 256 characters long.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When using &lt;code&gt;ReceiveMessage&lt;/code&gt;, you can send a list of attribute names to receive, or you can return all of the attributes by specifying &lt;code&gt;All&lt;/code&gt; or &lt;code&gt;.*&lt;/code&gt; in your request. You can also use all message attributes starting with a prefix, for example &lt;code&gt;bar.*&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param maxNumberOfMessages The maximum number of messages to return. Amazon SQS never returns more messages than this value (however, fewer messages might be returned). Valid values: 1 to 10. Default: 1. (optional)
     * @param visibilityTimeout The duration (in seconds) that the received messages are hidden from subsequent retrieve requests after being retrieved by a &lt;code&gt;ReceiveMessage&lt;/code&gt; request. (optional)
     * @param waitTimeSeconds &lt;p&gt;The duration (in seconds) for which the call waits for a message to arrive in the queue before returning. If a message is available, the call returns sooner than &lt;code&gt;WaitTimeSeconds&lt;/code&gt;. If no messages are available and the wait time expires, the call returns successfully with an empty list of messages.&lt;/p&gt; &lt;important&gt; &lt;p&gt;To avoid HTTP errors, ensure that the HTTP response timeout for &lt;code&gt;ReceiveMessage&lt;/code&gt; requests is longer than the &lt;code&gt;WaitTimeSeconds&lt;/code&gt; parameter. For example, with the Java SDK, you can set HTTP transport settings using the &lt;a href&#x3D;\&quot;https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/nio/netty/NettyNioAsyncHttpClient.html\&quot;&gt; NettyNioAsyncHttpClient&lt;/a&gt; for asynchronous clients, or the &lt;a href&#x3D;\&quot;https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/apache/ApacheHttpClient.html\&quot;&gt; ApacheHttpClient&lt;/a&gt; for synchronous clients. &lt;/p&gt; &lt;/important&gt; (optional)
     * @param receiveRequestAttemptId &lt;p&gt;This parameter applies only to FIFO (first-in-first-out) queues.&lt;/p&gt; &lt;p&gt;The token used for deduplication of &lt;code&gt;ReceiveMessage&lt;/code&gt; calls. If a networking issue occurs after a &lt;code&gt;ReceiveMessage&lt;/code&gt; action, and instead of a response you receive a generic error, it is possible to retry the same action with an identical &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt; to retrieve the same set of messages, even if their visibility timeout has not yet expired.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can use &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt; only for 5 minutes after a &lt;code&gt;ReceiveMessage&lt;/code&gt; action.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When you set &lt;code&gt;FifoQueue&lt;/code&gt;, a caller of the &lt;code&gt;ReceiveMessage&lt;/code&gt; action can provide a &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt; explicitly.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If a caller of the &lt;code&gt;ReceiveMessage&lt;/code&gt; action doesn&#39;t provide a &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt;, Amazon SQS generates a &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;It is possible to retry the &lt;code&gt;ReceiveMessage&lt;/code&gt; action with the same &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt; if none of the messages have been modified (deleted or had their visibility changes).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;During a visibility timeout, subsequent calls with the same &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt; return the same messages and receipt handles. If a retry occurs within the deduplication interval, it resets the visibility timeout. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html\&quot;&gt;Visibility Timeout&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If a caller of the &lt;code&gt;ReceiveMessage&lt;/code&gt; action still processes messages when the visibility timeout expires and messages become visible, another worker consuming from the same queue can receive the same messages and therefore process duplicates. Also, if a consumer whose message processing time is longer than the visibility timeout tries to delete the processed messages, the action fails with an error.&lt;/p&gt; &lt;p&gt;To mitigate this effect, ensure that your application observes a safe threshold before the visibility timeout expires and extend the visibility timeout as necessary.&lt;/p&gt; &lt;/important&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;While messages with a particular &lt;code&gt;MessageGroupId&lt;/code&gt; are invisible, no more messages belonging to the same &lt;code&gt;MessageGroupId&lt;/code&gt; are returned until the visibility timeout expires. You can still receive messages with another &lt;code&gt;MessageGroupId&lt;/code&gt; as long as it is also visible.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If a caller of &lt;code&gt;ReceiveMessage&lt;/code&gt; can&#39;t track the &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt;, no retries work until the original visibility timeout expires. As a result, delays might occur but the messages in the queue remain in a strict order.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The maximum length of &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt; is 128 characters. &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt; can contain alphanumeric characters (&lt;code&gt;a-z&lt;/code&gt;, &lt;code&gt;A-Z&lt;/code&gt;, &lt;code&gt;0-9&lt;/code&gt;) and punctuation (&lt;code&gt;!\&quot;#$%&amp;amp;&#39;()*+,-./:;&amp;lt;&#x3D;&amp;gt;?@[\\]^_&#x60;{|}~&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;For best practices of using &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-receiverequestattemptid-request-parameter.html\&quot;&gt;Using the ReceiveRequestAttemptId Request Parameter&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @return ReceiveMessageResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OverLimit </td><td>  -  </td></tr>
     </table>
     */
    public ReceiveMessageResult gETReceiveMessage(Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<QueueAttributeName> attributeNames, List<String> messageAttributeNames, Integer maxNumberOfMessages, Integer visibilityTimeout, Integer waitTimeSeconds, String receiveRequestAttemptId) throws ApiException {
        ApiResponse<ReceiveMessageResult> localVarResp = gETReceiveMessageWithHttpInfo(accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attributeNames, messageAttributeNames, maxNumberOfMessages, visibilityTimeout, waitTimeSeconds, receiveRequestAttemptId);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves one or more messages (up to 10), from the specified queue. Using the &lt;code&gt;WaitTimeSeconds&lt;/code&gt; parameter enables long-poll support. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-long-polling.html\&quot;&gt;Amazon SQS Long Polling&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;p&gt;Short poll is the default behavior where a weighted random set of machines is sampled on a &lt;code&gt;ReceiveMessage&lt;/code&gt; call. Thus, only the messages on the sampled machines are returned. If the number of messages in the queue is small (fewer than 1,000), you most likely get fewer messages than you requested per &lt;code&gt;ReceiveMessage&lt;/code&gt; call. If the number of messages in the queue is extremely small, you might not receive any messages in a particular &lt;code&gt;ReceiveMessage&lt;/code&gt; response. If this happens, repeat the request. &lt;/p&gt; &lt;p&gt;For each message returned, the response includes the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The message body.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An MD5 digest of the message body. For information about MD5, see &lt;a href&#x3D;\&quot;https://www.ietf.org/rfc/rfc1321.txt\&quot;&gt;RFC1321&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;MessageId&lt;/code&gt; you received when you sent the message to the queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The receipt handle.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The message attributes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An MD5 digest of the message attributes.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The receipt handle is the identifier you must provide when deleting the message. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-message-identifiers.html\&quot;&gt;Queue and Message Identifiers&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can provide the &lt;code&gt;VisibilityTimeout&lt;/code&gt; parameter in your request. The parameter is applied to the messages that Amazon SQS returns in the response. If you don&#39;t include the parameter, the overall visibility timeout for the queue is used for the returned messages. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html\&quot;&gt;Visibility Timeout&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;A message that isn&#39;t deleted or a message whose visibility isn&#39;t extended before the visibility timeout expires counts as a failed receive. Depending on the configuration of the queue, the message might be sent to the dead-letter queue.&lt;/p&gt; &lt;note&gt; &lt;p&gt;In the future, new attributes might be added. If you write code that calls this action, we recommend that you structure your code so that it can handle new attributes gracefully.&lt;/p&gt; &lt;/note&gt;
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attributeNames &lt;p&gt;A list of attributes that need to be returned along with each message. These attributes include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;All&lt;/code&gt; – Returns all values.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApproximateFirstReceiveTimestamp&lt;/code&gt; – Returns the time the message was first received from the queue (&lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/Unix_time\&quot;&gt;epoch time&lt;/a&gt; in milliseconds).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApproximateReceiveCount&lt;/code&gt; – Returns the number of times a message has been received across all queues but not deleted.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AWSTraceHeader&lt;/code&gt; – Returns the X-Ray trace header string. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SenderId&lt;/code&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For a user, returns the user ID, for example &lt;code&gt;ABCDEFGHI1JKLMNOPQ23R&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For an IAM role, returns the IAM role ID, for example &lt;code&gt;ABCDE1F2GH3I4JK5LMNOP:i-a123b456&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SentTimestamp&lt;/code&gt; – Returns the time the message was sent to the queue (&lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/Unix_time\&quot;&gt;epoch time&lt;/a&gt; in milliseconds).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SqsManagedSseEnabled&lt;/code&gt; – Enables server-side queue encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (for example, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html\&quot;&gt;SSE-KMS&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.html\&quot;&gt;SSE-SQS&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageDeduplicationId&lt;/code&gt; – Returns the value provided by the producer that calls the &lt;code&gt; &lt;a&gt;SendMessage&lt;/a&gt; &lt;/code&gt; action.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageGroupId&lt;/code&gt; – Returns the value provided by the producer that calls the &lt;code&gt; &lt;a&gt;SendMessage&lt;/a&gt; &lt;/code&gt; action. Messages with the same &lt;code&gt;MessageGroupId&lt;/code&gt; are returned in sequence.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SequenceNumber&lt;/code&gt; – Returns the value provided by Amazon SQS.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param messageAttributeNames &lt;p&gt;The name of the message attribute, where &lt;i&gt;N&lt;/i&gt; is the index.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The name can contain alphanumeric characters and the underscore (&lt;code&gt;_&lt;/code&gt;), hyphen (&lt;code&gt;-&lt;/code&gt;), and period (&lt;code&gt;.&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The name is case-sensitive and must be unique among all attribute names for the message.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The name must not start with AWS-reserved prefixes such as &lt;code&gt;AWS.&lt;/code&gt; or &lt;code&gt;Amazon.&lt;/code&gt; (or any casing variants).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The name must not start or end with a period (&lt;code&gt;.&lt;/code&gt;), and it should not have periods in succession (&lt;code&gt;..&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The name can be up to 256 characters long.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When using &lt;code&gt;ReceiveMessage&lt;/code&gt;, you can send a list of attribute names to receive, or you can return all of the attributes by specifying &lt;code&gt;All&lt;/code&gt; or &lt;code&gt;.*&lt;/code&gt; in your request. You can also use all message attributes starting with a prefix, for example &lt;code&gt;bar.*&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param maxNumberOfMessages The maximum number of messages to return. Amazon SQS never returns more messages than this value (however, fewer messages might be returned). Valid values: 1 to 10. Default: 1. (optional)
     * @param visibilityTimeout The duration (in seconds) that the received messages are hidden from subsequent retrieve requests after being retrieved by a &lt;code&gt;ReceiveMessage&lt;/code&gt; request. (optional)
     * @param waitTimeSeconds &lt;p&gt;The duration (in seconds) for which the call waits for a message to arrive in the queue before returning. If a message is available, the call returns sooner than &lt;code&gt;WaitTimeSeconds&lt;/code&gt;. If no messages are available and the wait time expires, the call returns successfully with an empty list of messages.&lt;/p&gt; &lt;important&gt; &lt;p&gt;To avoid HTTP errors, ensure that the HTTP response timeout for &lt;code&gt;ReceiveMessage&lt;/code&gt; requests is longer than the &lt;code&gt;WaitTimeSeconds&lt;/code&gt; parameter. For example, with the Java SDK, you can set HTTP transport settings using the &lt;a href&#x3D;\&quot;https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/nio/netty/NettyNioAsyncHttpClient.html\&quot;&gt; NettyNioAsyncHttpClient&lt;/a&gt; for asynchronous clients, or the &lt;a href&#x3D;\&quot;https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/apache/ApacheHttpClient.html\&quot;&gt; ApacheHttpClient&lt;/a&gt; for synchronous clients. &lt;/p&gt; &lt;/important&gt; (optional)
     * @param receiveRequestAttemptId &lt;p&gt;This parameter applies only to FIFO (first-in-first-out) queues.&lt;/p&gt; &lt;p&gt;The token used for deduplication of &lt;code&gt;ReceiveMessage&lt;/code&gt; calls. If a networking issue occurs after a &lt;code&gt;ReceiveMessage&lt;/code&gt; action, and instead of a response you receive a generic error, it is possible to retry the same action with an identical &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt; to retrieve the same set of messages, even if their visibility timeout has not yet expired.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can use &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt; only for 5 minutes after a &lt;code&gt;ReceiveMessage&lt;/code&gt; action.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When you set &lt;code&gt;FifoQueue&lt;/code&gt;, a caller of the &lt;code&gt;ReceiveMessage&lt;/code&gt; action can provide a &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt; explicitly.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If a caller of the &lt;code&gt;ReceiveMessage&lt;/code&gt; action doesn&#39;t provide a &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt;, Amazon SQS generates a &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;It is possible to retry the &lt;code&gt;ReceiveMessage&lt;/code&gt; action with the same &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt; if none of the messages have been modified (deleted or had their visibility changes).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;During a visibility timeout, subsequent calls with the same &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt; return the same messages and receipt handles. If a retry occurs within the deduplication interval, it resets the visibility timeout. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html\&quot;&gt;Visibility Timeout&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If a caller of the &lt;code&gt;ReceiveMessage&lt;/code&gt; action still processes messages when the visibility timeout expires and messages become visible, another worker consuming from the same queue can receive the same messages and therefore process duplicates. Also, if a consumer whose message processing time is longer than the visibility timeout tries to delete the processed messages, the action fails with an error.&lt;/p&gt; &lt;p&gt;To mitigate this effect, ensure that your application observes a safe threshold before the visibility timeout expires and extend the visibility timeout as necessary.&lt;/p&gt; &lt;/important&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;While messages with a particular &lt;code&gt;MessageGroupId&lt;/code&gt; are invisible, no more messages belonging to the same &lt;code&gt;MessageGroupId&lt;/code&gt; are returned until the visibility timeout expires. You can still receive messages with another &lt;code&gt;MessageGroupId&lt;/code&gt; as long as it is also visible.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If a caller of &lt;code&gt;ReceiveMessage&lt;/code&gt; can&#39;t track the &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt;, no retries work until the original visibility timeout expires. As a result, delays might occur but the messages in the queue remain in a strict order.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The maximum length of &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt; is 128 characters. &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt; can contain alphanumeric characters (&lt;code&gt;a-z&lt;/code&gt;, &lt;code&gt;A-Z&lt;/code&gt;, &lt;code&gt;0-9&lt;/code&gt;) and punctuation (&lt;code&gt;!\&quot;#$%&amp;amp;&#39;()*+,-./:;&amp;lt;&#x3D;&amp;gt;?@[\\]^_&#x60;{|}~&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;For best practices of using &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-receiverequestattemptid-request-parameter.html\&quot;&gt;Using the ReceiveRequestAttemptId Request Parameter&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;ReceiveMessageResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OverLimit </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReceiveMessageResult> gETReceiveMessageWithHttpInfo(Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<QueueAttributeName> attributeNames, List<String> messageAttributeNames, Integer maxNumberOfMessages, Integer visibilityTimeout, Integer waitTimeSeconds, String receiveRequestAttemptId) throws ApiException {
        okhttp3.Call localVarCall = gETReceiveMessageValidateBeforeCall(accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attributeNames, messageAttributeNames, maxNumberOfMessages, visibilityTimeout, waitTimeSeconds, receiveRequestAttemptId, null);
        Type localVarReturnType = new TypeToken<ReceiveMessageResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves one or more messages (up to 10), from the specified queue. Using the &lt;code&gt;WaitTimeSeconds&lt;/code&gt; parameter enables long-poll support. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-long-polling.html\&quot;&gt;Amazon SQS Long Polling&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;p&gt;Short poll is the default behavior where a weighted random set of machines is sampled on a &lt;code&gt;ReceiveMessage&lt;/code&gt; call. Thus, only the messages on the sampled machines are returned. If the number of messages in the queue is small (fewer than 1,000), you most likely get fewer messages than you requested per &lt;code&gt;ReceiveMessage&lt;/code&gt; call. If the number of messages in the queue is extremely small, you might not receive any messages in a particular &lt;code&gt;ReceiveMessage&lt;/code&gt; response. If this happens, repeat the request. &lt;/p&gt; &lt;p&gt;For each message returned, the response includes the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The message body.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An MD5 digest of the message body. For information about MD5, see &lt;a href&#x3D;\&quot;https://www.ietf.org/rfc/rfc1321.txt\&quot;&gt;RFC1321&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;MessageId&lt;/code&gt; you received when you sent the message to the queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The receipt handle.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The message attributes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An MD5 digest of the message attributes.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The receipt handle is the identifier you must provide when deleting the message. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-message-identifiers.html\&quot;&gt;Queue and Message Identifiers&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can provide the &lt;code&gt;VisibilityTimeout&lt;/code&gt; parameter in your request. The parameter is applied to the messages that Amazon SQS returns in the response. If you don&#39;t include the parameter, the overall visibility timeout for the queue is used for the returned messages. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html\&quot;&gt;Visibility Timeout&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;A message that isn&#39;t deleted or a message whose visibility isn&#39;t extended before the visibility timeout expires counts as a failed receive. Depending on the configuration of the queue, the message might be sent to the dead-letter queue.&lt;/p&gt; &lt;note&gt; &lt;p&gt;In the future, new attributes might be added. If you write code that calls this action, we recommend that you structure your code so that it can handle new attributes gracefully.&lt;/p&gt; &lt;/note&gt;
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attributeNames &lt;p&gt;A list of attributes that need to be returned along with each message. These attributes include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;All&lt;/code&gt; – Returns all values.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApproximateFirstReceiveTimestamp&lt;/code&gt; – Returns the time the message was first received from the queue (&lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/Unix_time\&quot;&gt;epoch time&lt;/a&gt; in milliseconds).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ApproximateReceiveCount&lt;/code&gt; – Returns the number of times a message has been received across all queues but not deleted.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AWSTraceHeader&lt;/code&gt; – Returns the X-Ray trace header string. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SenderId&lt;/code&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For a user, returns the user ID, for example &lt;code&gt;ABCDEFGHI1JKLMNOPQ23R&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For an IAM role, returns the IAM role ID, for example &lt;code&gt;ABCDE1F2GH3I4JK5LMNOP:i-a123b456&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SentTimestamp&lt;/code&gt; – Returns the time the message was sent to the queue (&lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/Unix_time\&quot;&gt;epoch time&lt;/a&gt; in milliseconds).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SqsManagedSseEnabled&lt;/code&gt; – Enables server-side queue encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (for example, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html\&quot;&gt;SSE-KMS&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.html\&quot;&gt;SSE-SQS&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageDeduplicationId&lt;/code&gt; – Returns the value provided by the producer that calls the &lt;code&gt; &lt;a&gt;SendMessage&lt;/a&gt; &lt;/code&gt; action.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageGroupId&lt;/code&gt; – Returns the value provided by the producer that calls the &lt;code&gt; &lt;a&gt;SendMessage&lt;/a&gt; &lt;/code&gt; action. Messages with the same &lt;code&gt;MessageGroupId&lt;/code&gt; are returned in sequence.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SequenceNumber&lt;/code&gt; – Returns the value provided by Amazon SQS.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param messageAttributeNames &lt;p&gt;The name of the message attribute, where &lt;i&gt;N&lt;/i&gt; is the index.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The name can contain alphanumeric characters and the underscore (&lt;code&gt;_&lt;/code&gt;), hyphen (&lt;code&gt;-&lt;/code&gt;), and period (&lt;code&gt;.&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The name is case-sensitive and must be unique among all attribute names for the message.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The name must not start with AWS-reserved prefixes such as &lt;code&gt;AWS.&lt;/code&gt; or &lt;code&gt;Amazon.&lt;/code&gt; (or any casing variants).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The name must not start or end with a period (&lt;code&gt;.&lt;/code&gt;), and it should not have periods in succession (&lt;code&gt;..&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The name can be up to 256 characters long.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When using &lt;code&gt;ReceiveMessage&lt;/code&gt;, you can send a list of attribute names to receive, or you can return all of the attributes by specifying &lt;code&gt;All&lt;/code&gt; or &lt;code&gt;.*&lt;/code&gt; in your request. You can also use all message attributes starting with a prefix, for example &lt;code&gt;bar.*&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param maxNumberOfMessages The maximum number of messages to return. Amazon SQS never returns more messages than this value (however, fewer messages might be returned). Valid values: 1 to 10. Default: 1. (optional)
     * @param visibilityTimeout The duration (in seconds) that the received messages are hidden from subsequent retrieve requests after being retrieved by a &lt;code&gt;ReceiveMessage&lt;/code&gt; request. (optional)
     * @param waitTimeSeconds &lt;p&gt;The duration (in seconds) for which the call waits for a message to arrive in the queue before returning. If a message is available, the call returns sooner than &lt;code&gt;WaitTimeSeconds&lt;/code&gt;. If no messages are available and the wait time expires, the call returns successfully with an empty list of messages.&lt;/p&gt; &lt;important&gt; &lt;p&gt;To avoid HTTP errors, ensure that the HTTP response timeout for &lt;code&gt;ReceiveMessage&lt;/code&gt; requests is longer than the &lt;code&gt;WaitTimeSeconds&lt;/code&gt; parameter. For example, with the Java SDK, you can set HTTP transport settings using the &lt;a href&#x3D;\&quot;https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/nio/netty/NettyNioAsyncHttpClient.html\&quot;&gt; NettyNioAsyncHttpClient&lt;/a&gt; for asynchronous clients, or the &lt;a href&#x3D;\&quot;https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/apache/ApacheHttpClient.html\&quot;&gt; ApacheHttpClient&lt;/a&gt; for synchronous clients. &lt;/p&gt; &lt;/important&gt; (optional)
     * @param receiveRequestAttemptId &lt;p&gt;This parameter applies only to FIFO (first-in-first-out) queues.&lt;/p&gt; &lt;p&gt;The token used for deduplication of &lt;code&gt;ReceiveMessage&lt;/code&gt; calls. If a networking issue occurs after a &lt;code&gt;ReceiveMessage&lt;/code&gt; action, and instead of a response you receive a generic error, it is possible to retry the same action with an identical &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt; to retrieve the same set of messages, even if their visibility timeout has not yet expired.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can use &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt; only for 5 minutes after a &lt;code&gt;ReceiveMessage&lt;/code&gt; action.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When you set &lt;code&gt;FifoQueue&lt;/code&gt;, a caller of the &lt;code&gt;ReceiveMessage&lt;/code&gt; action can provide a &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt; explicitly.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If a caller of the &lt;code&gt;ReceiveMessage&lt;/code&gt; action doesn&#39;t provide a &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt;, Amazon SQS generates a &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;It is possible to retry the &lt;code&gt;ReceiveMessage&lt;/code&gt; action with the same &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt; if none of the messages have been modified (deleted or had their visibility changes).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;During a visibility timeout, subsequent calls with the same &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt; return the same messages and receipt handles. If a retry occurs within the deduplication interval, it resets the visibility timeout. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html\&quot;&gt;Visibility Timeout&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If a caller of the &lt;code&gt;ReceiveMessage&lt;/code&gt; action still processes messages when the visibility timeout expires and messages become visible, another worker consuming from the same queue can receive the same messages and therefore process duplicates. Also, if a consumer whose message processing time is longer than the visibility timeout tries to delete the processed messages, the action fails with an error.&lt;/p&gt; &lt;p&gt;To mitigate this effect, ensure that your application observes a safe threshold before the visibility timeout expires and extend the visibility timeout as necessary.&lt;/p&gt; &lt;/important&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;While messages with a particular &lt;code&gt;MessageGroupId&lt;/code&gt; are invisible, no more messages belonging to the same &lt;code&gt;MessageGroupId&lt;/code&gt; are returned until the visibility timeout expires. You can still receive messages with another &lt;code&gt;MessageGroupId&lt;/code&gt; as long as it is also visible.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If a caller of &lt;code&gt;ReceiveMessage&lt;/code&gt; can&#39;t track the &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt;, no retries work until the original visibility timeout expires. As a result, delays might occur but the messages in the queue remain in a strict order.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The maximum length of &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt; is 128 characters. &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt; can contain alphanumeric characters (&lt;code&gt;a-z&lt;/code&gt;, &lt;code&gt;A-Z&lt;/code&gt;, &lt;code&gt;0-9&lt;/code&gt;) and punctuation (&lt;code&gt;!\&quot;#$%&amp;amp;&#39;()*+,-./:;&amp;lt;&#x3D;&amp;gt;?@[\\]^_&#x60;{|}~&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;For best practices of using &lt;code&gt;ReceiveRequestAttemptId&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-receiverequestattemptid-request-parameter.html\&quot;&gt;Using the ReceiveRequestAttemptId Request Parameter&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OverLimit </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETReceiveMessageAsync(Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<QueueAttributeName> attributeNames, List<String> messageAttributeNames, Integer maxNumberOfMessages, Integer visibilityTimeout, Integer waitTimeSeconds, String receiveRequestAttemptId, final ApiCallback<ReceiveMessageResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETReceiveMessageValidateBeforeCall(accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attributeNames, messageAttributeNames, maxNumberOfMessages, visibilityTimeout, waitTimeSeconds, receiveRequestAttemptId, _callback);
        Type localVarReturnType = new TypeToken<ReceiveMessageResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRemovePermission
     * @param label The identification of the permission to remove. This is the label added using the &lt;code&gt; &lt;a&gt;AddPermission&lt;/a&gt; &lt;/code&gt; action. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRemovePermissionCall(String label, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{AccountNumber}/{QueueName}/#Action=RemovePermission"
            .replace("{" + "AccountNumber" + "}", localVarApiClient.escapeString(accountNumber.toString()))
            .replace("{" + "QueueName" + "}", localVarApiClient.escapeString(queueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Label", label));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRemovePermissionValidateBeforeCall(String label, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'label' is set
        if (label == null) {
            throw new ApiException("Missing the required parameter 'label' when calling gETRemovePermission(Async)");
        }

        // verify the required parameter 'accountNumber' is set
        if (accountNumber == null) {
            throw new ApiException("Missing the required parameter 'accountNumber' when calling gETRemovePermission(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling gETRemovePermission(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRemovePermission(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRemovePermission(Async)");
        }

        return gETRemovePermissionCall(label, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Revokes any permissions in the queue policy that matches the specified &lt;code&gt;Label&lt;/code&gt; parameter.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Only the owner of a queue can remove permissions from it.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To remove the ability to change queue permissions, you must deny permission to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetQueueAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param label The identification of the permission to remove. This is the label added using the &lt;code&gt; &lt;a&gt;AddPermission&lt;/a&gt; &lt;/code&gt; action. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void gETRemovePermission(String label, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETRemovePermissionWithHttpInfo(label, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Revokes any permissions in the queue policy that matches the specified &lt;code&gt;Label&lt;/code&gt; parameter.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Only the owner of a queue can remove permissions from it.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To remove the ability to change queue permissions, you must deny permission to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetQueueAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param label The identification of the permission to remove. This is the label added using the &lt;code&gt; &lt;a&gt;AddPermission&lt;/a&gt; &lt;/code&gt; action. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETRemovePermissionWithHttpInfo(String label, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETRemovePermissionValidateBeforeCall(label, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Revokes any permissions in the queue policy that matches the specified &lt;code&gt;Label&lt;/code&gt; parameter.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Only the owner of a queue can remove permissions from it.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To remove the ability to change queue permissions, you must deny permission to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetQueueAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param label The identification of the permission to remove. This is the label added using the &lt;code&gt; &lt;a&gt;AddPermission&lt;/a&gt; &lt;/code&gt; action. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRemovePermissionAsync(String label, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRemovePermissionValidateBeforeCall(label, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETSendMessage
     * @param messageBody &lt;p&gt;The message to send. The minimum size is one character. The maximum size is 256 KiB.&lt;/p&gt; &lt;important&gt; &lt;p&gt;A message can include only XML, JSON, and unformatted text. The following Unicode characters are allowed:&lt;/p&gt; &lt;p&gt; &lt;code&gt;#x9&lt;/code&gt; | &lt;code&gt;#xA&lt;/code&gt; | &lt;code&gt;#xD&lt;/code&gt; | &lt;code&gt;#x20&lt;/code&gt; to &lt;code&gt;#xD7FF&lt;/code&gt; | &lt;code&gt;#xE000&lt;/code&gt; to &lt;code&gt;#xFFFD&lt;/code&gt; | &lt;code&gt;#x10000&lt;/code&gt; to &lt;code&gt;#x10FFFF&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Any characters not included in this list will be rejected. For more information, see the &lt;a href&#x3D;\&quot;http://www.w3.org/TR/REC-xml/#charsets\&quot;&gt;W3C specification for characters&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt; (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param delaySeconds &lt;p&gt; The length of time, in seconds, for which to delay a specific message. Valid values: 0 to 900. Maximum: 15 minutes. Messages with a positive &lt;code&gt;DelaySeconds&lt;/code&gt; value become available for processing after the delay period is finished. If you don&#39;t specify a value, the default value for the queue applies. &lt;/p&gt; &lt;note&gt; &lt;p&gt;When you set &lt;code&gt;FifoQueue&lt;/code&gt;, you can&#39;t set &lt;code&gt;DelaySeconds&lt;/code&gt; per message. You can set this parameter only on a queue level.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param messageAttribute Each message attribute consists of a &lt;code&gt;Name&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt;, and &lt;code&gt;Value&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-metadata.html#sqs-message-attributes\&quot;&gt;Amazon SQS message attributes&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. (optional)
     * @param messageSystemAttribute &lt;p&gt;The message system attribute to send. Each message system attribute consists of a &lt;code&gt;Name&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt;, and &lt;code&gt;Value&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Currently, the only supported message system attribute is &lt;code&gt;AWSTraceHeader&lt;/code&gt;. Its type must be &lt;code&gt;String&lt;/code&gt; and its value must be a correctly formatted X-Ray trace header string.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The size of a message system attribute doesn&#39;t count towards the total size of a message.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/important&gt; (optional)
     * @param messageDeduplicationId &lt;p&gt;This parameter applies only to FIFO (first-in-first-out) queues.&lt;/p&gt; &lt;p&gt;The token used for deduplication of sent messages. If a message with a particular &lt;code&gt;MessageDeduplicationId&lt;/code&gt; is sent successfully, any messages sent with the same &lt;code&gt;MessageDeduplicationId&lt;/code&gt; are accepted successfully but aren&#39;t delivered during the 5-minute deduplication interval. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html\&quot;&gt; Exactly-once processing&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Every message must have a unique &lt;code&gt;MessageDeduplicationId&lt;/code&gt;,&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You may provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; explicitly.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you aren&#39;t able to provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; and you enable &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; for your queue, Amazon SQS uses a SHA-256 hash to generate the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; using the body of the message (but not the attributes of the message). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; and the queue doesn&#39;t have &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; set, the action fails with an error.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the queue has &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; set, your &lt;code&gt;MessageDeduplicationId&lt;/code&gt; overrides the generated one.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you send one message with &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; enabled and then another message with a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; that is the same as the one generated for the first &lt;code&gt;MessageDeduplicationId&lt;/code&gt;, the two messages are treated as duplicates and only one copy of the message is delivered. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;MessageDeduplicationId&lt;/code&gt; is available to the consumer of the message (this can be useful for troubleshooting delivery issues).&lt;/p&gt; &lt;p&gt;If a message is sent successfully but the acknowledgement is lost and the message is resent with the same &lt;code&gt;MessageDeduplicationId&lt;/code&gt; after the deduplication interval, Amazon SQS can&#39;t detect duplicate messages.&lt;/p&gt; &lt;p&gt;Amazon SQS continues to keep track of the message deduplication ID even after the message is received and deleted.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The maximum length of &lt;code&gt;MessageDeduplicationId&lt;/code&gt; is 128 characters. &lt;code&gt;MessageDeduplicationId&lt;/code&gt; can contain alphanumeric characters (&lt;code&gt;a-z&lt;/code&gt;, &lt;code&gt;A-Z&lt;/code&gt;, &lt;code&gt;0-9&lt;/code&gt;) and punctuation (&lt;code&gt;!\&quot;#$%&amp;amp;&#39;()*+,-./:;&amp;lt;&#x3D;&amp;gt;?@[\\]^_&#x60;{|}~&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;For best practices of using &lt;code&gt;MessageDeduplicationId&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagededuplicationid-property.html\&quot;&gt;Using the MessageDeduplicationId Property&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param messageGroupId &lt;p&gt;This parameter applies only to FIFO (first-in-first-out) queues.&lt;/p&gt; &lt;p&gt;The tag that specifies that a message belongs to a specific message group. Messages that belong to the same message group are processed in a FIFO manner (however, messages in different message groups might be processed out of order). To interleave multiple ordered streams within a single queue, use &lt;code&gt;MessageGroupId&lt;/code&gt; values (for example, session data for multiple users). In this scenario, multiple consumers can process the queue, but the session data of each user is processed in a FIFO fashion.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You must associate a non-empty &lt;code&gt;MessageGroupId&lt;/code&gt; with a message. If you don&#39;t provide a &lt;code&gt;MessageGroupId&lt;/code&gt;, the action fails.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ReceiveMessage&lt;/code&gt; might return messages with multiple &lt;code&gt;MessageGroupId&lt;/code&gt; values. For each &lt;code&gt;MessageGroupId&lt;/code&gt;, the messages are sorted by time sent. The caller can&#39;t specify a &lt;code&gt;MessageGroupId&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The length of &lt;code&gt;MessageGroupId&lt;/code&gt; is 128 characters. Valid values: alphanumeric characters and punctuation &lt;code&gt;(!\&quot;#$%&amp;amp;&#39;()*+,-./:;&amp;lt;&#x3D;&amp;gt;?@[\\]^_&#x60;{|}~)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For best practices of using &lt;code&gt;MessageGroupId&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagegroupid-property.html\&quot;&gt;Using the MessageGroupId Property&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;code&gt;MessageGroupId&lt;/code&gt; is required for FIFO queues. You can&#39;t use it for Standard queues.&lt;/p&gt; &lt;/important&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidMessageContents </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSendMessageCall(String messageBody, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer delaySeconds, Map<String, MessageAttributeValue> messageAttribute, Map<String, MessageSystemAttributeValue> messageSystemAttribute, String messageDeduplicationId, String messageGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{AccountNumber}/{QueueName}/#Action=SendMessage"
            .replace("{" + "AccountNumber" + "}", localVarApiClient.escapeString(accountNumber.toString()))
            .replace("{" + "QueueName" + "}", localVarApiClient.escapeString(queueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (messageBody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MessageBody", messageBody));
        }

        if (delaySeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DelaySeconds", delaySeconds));
        }

        if (messageAttribute != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MessageAttribute", messageAttribute));
        }

        if (messageSystemAttribute != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MessageSystemAttribute", messageSystemAttribute));
        }

        if (messageDeduplicationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MessageDeduplicationId", messageDeduplicationId));
        }

        if (messageGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MessageGroupId", messageGroupId));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETSendMessageValidateBeforeCall(String messageBody, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer delaySeconds, Map<String, MessageAttributeValue> messageAttribute, Map<String, MessageSystemAttributeValue> messageSystemAttribute, String messageDeduplicationId, String messageGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'messageBody' is set
        if (messageBody == null) {
            throw new ApiException("Missing the required parameter 'messageBody' when calling gETSendMessage(Async)");
        }

        // verify the required parameter 'accountNumber' is set
        if (accountNumber == null) {
            throw new ApiException("Missing the required parameter 'accountNumber' when calling gETSendMessage(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling gETSendMessage(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETSendMessage(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETSendMessage(Async)");
        }

        return gETSendMessageCall(messageBody, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, delaySeconds, messageAttribute, messageSystemAttribute, messageDeduplicationId, messageGroupId, _callback);

    }

    /**
     * 
     * &lt;p&gt;Delivers a message to the specified queue.&lt;/p&gt; &lt;important&gt; &lt;p&gt;A message can include only XML, JSON, and unformatted text. The following Unicode characters are allowed:&lt;/p&gt; &lt;p&gt; &lt;code&gt;#x9&lt;/code&gt; | &lt;code&gt;#xA&lt;/code&gt; | &lt;code&gt;#xD&lt;/code&gt; | &lt;code&gt;#x20&lt;/code&gt; to &lt;code&gt;#xD7FF&lt;/code&gt; | &lt;code&gt;#xE000&lt;/code&gt; to &lt;code&gt;#xFFFD&lt;/code&gt; | &lt;code&gt;#x10000&lt;/code&gt; to &lt;code&gt;#x10FFFF&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Any characters not included in this list will be rejected. For more information, see the &lt;a href&#x3D;\&quot;http://www.w3.org/TR/REC-xml/#charsets\&quot;&gt;W3C specification for characters&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param messageBody &lt;p&gt;The message to send. The minimum size is one character. The maximum size is 256 KiB.&lt;/p&gt; &lt;important&gt; &lt;p&gt;A message can include only XML, JSON, and unformatted text. The following Unicode characters are allowed:&lt;/p&gt; &lt;p&gt; &lt;code&gt;#x9&lt;/code&gt; | &lt;code&gt;#xA&lt;/code&gt; | &lt;code&gt;#xD&lt;/code&gt; | &lt;code&gt;#x20&lt;/code&gt; to &lt;code&gt;#xD7FF&lt;/code&gt; | &lt;code&gt;#xE000&lt;/code&gt; to &lt;code&gt;#xFFFD&lt;/code&gt; | &lt;code&gt;#x10000&lt;/code&gt; to &lt;code&gt;#x10FFFF&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Any characters not included in this list will be rejected. For more information, see the &lt;a href&#x3D;\&quot;http://www.w3.org/TR/REC-xml/#charsets\&quot;&gt;W3C specification for characters&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt; (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param delaySeconds &lt;p&gt; The length of time, in seconds, for which to delay a specific message. Valid values: 0 to 900. Maximum: 15 minutes. Messages with a positive &lt;code&gt;DelaySeconds&lt;/code&gt; value become available for processing after the delay period is finished. If you don&#39;t specify a value, the default value for the queue applies. &lt;/p&gt; &lt;note&gt; &lt;p&gt;When you set &lt;code&gt;FifoQueue&lt;/code&gt;, you can&#39;t set &lt;code&gt;DelaySeconds&lt;/code&gt; per message. You can set this parameter only on a queue level.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param messageAttribute Each message attribute consists of a &lt;code&gt;Name&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt;, and &lt;code&gt;Value&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-metadata.html#sqs-message-attributes\&quot;&gt;Amazon SQS message attributes&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. (optional)
     * @param messageSystemAttribute &lt;p&gt;The message system attribute to send. Each message system attribute consists of a &lt;code&gt;Name&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt;, and &lt;code&gt;Value&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Currently, the only supported message system attribute is &lt;code&gt;AWSTraceHeader&lt;/code&gt;. Its type must be &lt;code&gt;String&lt;/code&gt; and its value must be a correctly formatted X-Ray trace header string.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The size of a message system attribute doesn&#39;t count towards the total size of a message.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/important&gt; (optional)
     * @param messageDeduplicationId &lt;p&gt;This parameter applies only to FIFO (first-in-first-out) queues.&lt;/p&gt; &lt;p&gt;The token used for deduplication of sent messages. If a message with a particular &lt;code&gt;MessageDeduplicationId&lt;/code&gt; is sent successfully, any messages sent with the same &lt;code&gt;MessageDeduplicationId&lt;/code&gt; are accepted successfully but aren&#39;t delivered during the 5-minute deduplication interval. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html\&quot;&gt; Exactly-once processing&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Every message must have a unique &lt;code&gt;MessageDeduplicationId&lt;/code&gt;,&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You may provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; explicitly.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you aren&#39;t able to provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; and you enable &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; for your queue, Amazon SQS uses a SHA-256 hash to generate the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; using the body of the message (but not the attributes of the message). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; and the queue doesn&#39;t have &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; set, the action fails with an error.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the queue has &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; set, your &lt;code&gt;MessageDeduplicationId&lt;/code&gt; overrides the generated one.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you send one message with &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; enabled and then another message with a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; that is the same as the one generated for the first &lt;code&gt;MessageDeduplicationId&lt;/code&gt;, the two messages are treated as duplicates and only one copy of the message is delivered. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;MessageDeduplicationId&lt;/code&gt; is available to the consumer of the message (this can be useful for troubleshooting delivery issues).&lt;/p&gt; &lt;p&gt;If a message is sent successfully but the acknowledgement is lost and the message is resent with the same &lt;code&gt;MessageDeduplicationId&lt;/code&gt; after the deduplication interval, Amazon SQS can&#39;t detect duplicate messages.&lt;/p&gt; &lt;p&gt;Amazon SQS continues to keep track of the message deduplication ID even after the message is received and deleted.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The maximum length of &lt;code&gt;MessageDeduplicationId&lt;/code&gt; is 128 characters. &lt;code&gt;MessageDeduplicationId&lt;/code&gt; can contain alphanumeric characters (&lt;code&gt;a-z&lt;/code&gt;, &lt;code&gt;A-Z&lt;/code&gt;, &lt;code&gt;0-9&lt;/code&gt;) and punctuation (&lt;code&gt;!\&quot;#$%&amp;amp;&#39;()*+,-./:;&amp;lt;&#x3D;&amp;gt;?@[\\]^_&#x60;{|}~&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;For best practices of using &lt;code&gt;MessageDeduplicationId&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagededuplicationid-property.html\&quot;&gt;Using the MessageDeduplicationId Property&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param messageGroupId &lt;p&gt;This parameter applies only to FIFO (first-in-first-out) queues.&lt;/p&gt; &lt;p&gt;The tag that specifies that a message belongs to a specific message group. Messages that belong to the same message group are processed in a FIFO manner (however, messages in different message groups might be processed out of order). To interleave multiple ordered streams within a single queue, use &lt;code&gt;MessageGroupId&lt;/code&gt; values (for example, session data for multiple users). In this scenario, multiple consumers can process the queue, but the session data of each user is processed in a FIFO fashion.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You must associate a non-empty &lt;code&gt;MessageGroupId&lt;/code&gt; with a message. If you don&#39;t provide a &lt;code&gt;MessageGroupId&lt;/code&gt;, the action fails.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ReceiveMessage&lt;/code&gt; might return messages with multiple &lt;code&gt;MessageGroupId&lt;/code&gt; values. For each &lt;code&gt;MessageGroupId&lt;/code&gt;, the messages are sorted by time sent. The caller can&#39;t specify a &lt;code&gt;MessageGroupId&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The length of &lt;code&gt;MessageGroupId&lt;/code&gt; is 128 characters. Valid values: alphanumeric characters and punctuation &lt;code&gt;(!\&quot;#$%&amp;amp;&#39;()*+,-./:;&amp;lt;&#x3D;&amp;gt;?@[\\]^_&#x60;{|}~)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For best practices of using &lt;code&gt;MessageGroupId&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagegroupid-property.html\&quot;&gt;Using the MessageGroupId Property&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;code&gt;MessageGroupId&lt;/code&gt; is required for FIFO queues. You can&#39;t use it for Standard queues.&lt;/p&gt; &lt;/important&gt; (optional)
     * @return SendMessageResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidMessageContents </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public SendMessageResult gETSendMessage(String messageBody, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer delaySeconds, Map<String, MessageAttributeValue> messageAttribute, Map<String, MessageSystemAttributeValue> messageSystemAttribute, String messageDeduplicationId, String messageGroupId) throws ApiException {
        ApiResponse<SendMessageResult> localVarResp = gETSendMessageWithHttpInfo(messageBody, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, delaySeconds, messageAttribute, messageSystemAttribute, messageDeduplicationId, messageGroupId);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Delivers a message to the specified queue.&lt;/p&gt; &lt;important&gt; &lt;p&gt;A message can include only XML, JSON, and unformatted text. The following Unicode characters are allowed:&lt;/p&gt; &lt;p&gt; &lt;code&gt;#x9&lt;/code&gt; | &lt;code&gt;#xA&lt;/code&gt; | &lt;code&gt;#xD&lt;/code&gt; | &lt;code&gt;#x20&lt;/code&gt; to &lt;code&gt;#xD7FF&lt;/code&gt; | &lt;code&gt;#xE000&lt;/code&gt; to &lt;code&gt;#xFFFD&lt;/code&gt; | &lt;code&gt;#x10000&lt;/code&gt; to &lt;code&gt;#x10FFFF&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Any characters not included in this list will be rejected. For more information, see the &lt;a href&#x3D;\&quot;http://www.w3.org/TR/REC-xml/#charsets\&quot;&gt;W3C specification for characters&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param messageBody &lt;p&gt;The message to send. The minimum size is one character. The maximum size is 256 KiB.&lt;/p&gt; &lt;important&gt; &lt;p&gt;A message can include only XML, JSON, and unformatted text. The following Unicode characters are allowed:&lt;/p&gt; &lt;p&gt; &lt;code&gt;#x9&lt;/code&gt; | &lt;code&gt;#xA&lt;/code&gt; | &lt;code&gt;#xD&lt;/code&gt; | &lt;code&gt;#x20&lt;/code&gt; to &lt;code&gt;#xD7FF&lt;/code&gt; | &lt;code&gt;#xE000&lt;/code&gt; to &lt;code&gt;#xFFFD&lt;/code&gt; | &lt;code&gt;#x10000&lt;/code&gt; to &lt;code&gt;#x10FFFF&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Any characters not included in this list will be rejected. For more information, see the &lt;a href&#x3D;\&quot;http://www.w3.org/TR/REC-xml/#charsets\&quot;&gt;W3C specification for characters&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt; (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param delaySeconds &lt;p&gt; The length of time, in seconds, for which to delay a specific message. Valid values: 0 to 900. Maximum: 15 minutes. Messages with a positive &lt;code&gt;DelaySeconds&lt;/code&gt; value become available for processing after the delay period is finished. If you don&#39;t specify a value, the default value for the queue applies. &lt;/p&gt; &lt;note&gt; &lt;p&gt;When you set &lt;code&gt;FifoQueue&lt;/code&gt;, you can&#39;t set &lt;code&gt;DelaySeconds&lt;/code&gt; per message. You can set this parameter only on a queue level.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param messageAttribute Each message attribute consists of a &lt;code&gt;Name&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt;, and &lt;code&gt;Value&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-metadata.html#sqs-message-attributes\&quot;&gt;Amazon SQS message attributes&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. (optional)
     * @param messageSystemAttribute &lt;p&gt;The message system attribute to send. Each message system attribute consists of a &lt;code&gt;Name&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt;, and &lt;code&gt;Value&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Currently, the only supported message system attribute is &lt;code&gt;AWSTraceHeader&lt;/code&gt;. Its type must be &lt;code&gt;String&lt;/code&gt; and its value must be a correctly formatted X-Ray trace header string.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The size of a message system attribute doesn&#39;t count towards the total size of a message.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/important&gt; (optional)
     * @param messageDeduplicationId &lt;p&gt;This parameter applies only to FIFO (first-in-first-out) queues.&lt;/p&gt; &lt;p&gt;The token used for deduplication of sent messages. If a message with a particular &lt;code&gt;MessageDeduplicationId&lt;/code&gt; is sent successfully, any messages sent with the same &lt;code&gt;MessageDeduplicationId&lt;/code&gt; are accepted successfully but aren&#39;t delivered during the 5-minute deduplication interval. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html\&quot;&gt; Exactly-once processing&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Every message must have a unique &lt;code&gt;MessageDeduplicationId&lt;/code&gt;,&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You may provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; explicitly.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you aren&#39;t able to provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; and you enable &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; for your queue, Amazon SQS uses a SHA-256 hash to generate the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; using the body of the message (but not the attributes of the message). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; and the queue doesn&#39;t have &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; set, the action fails with an error.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the queue has &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; set, your &lt;code&gt;MessageDeduplicationId&lt;/code&gt; overrides the generated one.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you send one message with &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; enabled and then another message with a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; that is the same as the one generated for the first &lt;code&gt;MessageDeduplicationId&lt;/code&gt;, the two messages are treated as duplicates and only one copy of the message is delivered. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;MessageDeduplicationId&lt;/code&gt; is available to the consumer of the message (this can be useful for troubleshooting delivery issues).&lt;/p&gt; &lt;p&gt;If a message is sent successfully but the acknowledgement is lost and the message is resent with the same &lt;code&gt;MessageDeduplicationId&lt;/code&gt; after the deduplication interval, Amazon SQS can&#39;t detect duplicate messages.&lt;/p&gt; &lt;p&gt;Amazon SQS continues to keep track of the message deduplication ID even after the message is received and deleted.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The maximum length of &lt;code&gt;MessageDeduplicationId&lt;/code&gt; is 128 characters. &lt;code&gt;MessageDeduplicationId&lt;/code&gt; can contain alphanumeric characters (&lt;code&gt;a-z&lt;/code&gt;, &lt;code&gt;A-Z&lt;/code&gt;, &lt;code&gt;0-9&lt;/code&gt;) and punctuation (&lt;code&gt;!\&quot;#$%&amp;amp;&#39;()*+,-./:;&amp;lt;&#x3D;&amp;gt;?@[\\]^_&#x60;{|}~&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;For best practices of using &lt;code&gt;MessageDeduplicationId&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagededuplicationid-property.html\&quot;&gt;Using the MessageDeduplicationId Property&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param messageGroupId &lt;p&gt;This parameter applies only to FIFO (first-in-first-out) queues.&lt;/p&gt; &lt;p&gt;The tag that specifies that a message belongs to a specific message group. Messages that belong to the same message group are processed in a FIFO manner (however, messages in different message groups might be processed out of order). To interleave multiple ordered streams within a single queue, use &lt;code&gt;MessageGroupId&lt;/code&gt; values (for example, session data for multiple users). In this scenario, multiple consumers can process the queue, but the session data of each user is processed in a FIFO fashion.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You must associate a non-empty &lt;code&gt;MessageGroupId&lt;/code&gt; with a message. If you don&#39;t provide a &lt;code&gt;MessageGroupId&lt;/code&gt;, the action fails.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ReceiveMessage&lt;/code&gt; might return messages with multiple &lt;code&gt;MessageGroupId&lt;/code&gt; values. For each &lt;code&gt;MessageGroupId&lt;/code&gt;, the messages are sorted by time sent. The caller can&#39;t specify a &lt;code&gt;MessageGroupId&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The length of &lt;code&gt;MessageGroupId&lt;/code&gt; is 128 characters. Valid values: alphanumeric characters and punctuation &lt;code&gt;(!\&quot;#$%&amp;amp;&#39;()*+,-./:;&amp;lt;&#x3D;&amp;gt;?@[\\]^_&#x60;{|}~)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For best practices of using &lt;code&gt;MessageGroupId&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagegroupid-property.html\&quot;&gt;Using the MessageGroupId Property&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;code&gt;MessageGroupId&lt;/code&gt; is required for FIFO queues. You can&#39;t use it for Standard queues.&lt;/p&gt; &lt;/important&gt; (optional)
     * @return ApiResponse&lt;SendMessageResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidMessageContents </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendMessageResult> gETSendMessageWithHttpInfo(String messageBody, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer delaySeconds, Map<String, MessageAttributeValue> messageAttribute, Map<String, MessageSystemAttributeValue> messageSystemAttribute, String messageDeduplicationId, String messageGroupId) throws ApiException {
        okhttp3.Call localVarCall = gETSendMessageValidateBeforeCall(messageBody, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, delaySeconds, messageAttribute, messageSystemAttribute, messageDeduplicationId, messageGroupId, null);
        Type localVarReturnType = new TypeToken<SendMessageResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Delivers a message to the specified queue.&lt;/p&gt; &lt;important&gt; &lt;p&gt;A message can include only XML, JSON, and unformatted text. The following Unicode characters are allowed:&lt;/p&gt; &lt;p&gt; &lt;code&gt;#x9&lt;/code&gt; | &lt;code&gt;#xA&lt;/code&gt; | &lt;code&gt;#xD&lt;/code&gt; | &lt;code&gt;#x20&lt;/code&gt; to &lt;code&gt;#xD7FF&lt;/code&gt; | &lt;code&gt;#xE000&lt;/code&gt; to &lt;code&gt;#xFFFD&lt;/code&gt; | &lt;code&gt;#x10000&lt;/code&gt; to &lt;code&gt;#x10FFFF&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Any characters not included in this list will be rejected. For more information, see the &lt;a href&#x3D;\&quot;http://www.w3.org/TR/REC-xml/#charsets\&quot;&gt;W3C specification for characters&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param messageBody &lt;p&gt;The message to send. The minimum size is one character. The maximum size is 256 KiB.&lt;/p&gt; &lt;important&gt; &lt;p&gt;A message can include only XML, JSON, and unformatted text. The following Unicode characters are allowed:&lt;/p&gt; &lt;p&gt; &lt;code&gt;#x9&lt;/code&gt; | &lt;code&gt;#xA&lt;/code&gt; | &lt;code&gt;#xD&lt;/code&gt; | &lt;code&gt;#x20&lt;/code&gt; to &lt;code&gt;#xD7FF&lt;/code&gt; | &lt;code&gt;#xE000&lt;/code&gt; to &lt;code&gt;#xFFFD&lt;/code&gt; | &lt;code&gt;#x10000&lt;/code&gt; to &lt;code&gt;#x10FFFF&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Any characters not included in this list will be rejected. For more information, see the &lt;a href&#x3D;\&quot;http://www.w3.org/TR/REC-xml/#charsets\&quot;&gt;W3C specification for characters&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt; (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param delaySeconds &lt;p&gt; The length of time, in seconds, for which to delay a specific message. Valid values: 0 to 900. Maximum: 15 minutes. Messages with a positive &lt;code&gt;DelaySeconds&lt;/code&gt; value become available for processing after the delay period is finished. If you don&#39;t specify a value, the default value for the queue applies. &lt;/p&gt; &lt;note&gt; &lt;p&gt;When you set &lt;code&gt;FifoQueue&lt;/code&gt;, you can&#39;t set &lt;code&gt;DelaySeconds&lt;/code&gt; per message. You can set this parameter only on a queue level.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param messageAttribute Each message attribute consists of a &lt;code&gt;Name&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt;, and &lt;code&gt;Value&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-metadata.html#sqs-message-attributes\&quot;&gt;Amazon SQS message attributes&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. (optional)
     * @param messageSystemAttribute &lt;p&gt;The message system attribute to send. Each message system attribute consists of a &lt;code&gt;Name&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt;, and &lt;code&gt;Value&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Currently, the only supported message system attribute is &lt;code&gt;AWSTraceHeader&lt;/code&gt;. Its type must be &lt;code&gt;String&lt;/code&gt; and its value must be a correctly formatted X-Ray trace header string.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The size of a message system attribute doesn&#39;t count towards the total size of a message.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/important&gt; (optional)
     * @param messageDeduplicationId &lt;p&gt;This parameter applies only to FIFO (first-in-first-out) queues.&lt;/p&gt; &lt;p&gt;The token used for deduplication of sent messages. If a message with a particular &lt;code&gt;MessageDeduplicationId&lt;/code&gt; is sent successfully, any messages sent with the same &lt;code&gt;MessageDeduplicationId&lt;/code&gt; are accepted successfully but aren&#39;t delivered during the 5-minute deduplication interval. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html\&quot;&gt; Exactly-once processing&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Every message must have a unique &lt;code&gt;MessageDeduplicationId&lt;/code&gt;,&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You may provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; explicitly.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you aren&#39;t able to provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; and you enable &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; for your queue, Amazon SQS uses a SHA-256 hash to generate the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; using the body of the message (but not the attributes of the message). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; and the queue doesn&#39;t have &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; set, the action fails with an error.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the queue has &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; set, your &lt;code&gt;MessageDeduplicationId&lt;/code&gt; overrides the generated one.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you send one message with &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; enabled and then another message with a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; that is the same as the one generated for the first &lt;code&gt;MessageDeduplicationId&lt;/code&gt;, the two messages are treated as duplicates and only one copy of the message is delivered. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;MessageDeduplicationId&lt;/code&gt; is available to the consumer of the message (this can be useful for troubleshooting delivery issues).&lt;/p&gt; &lt;p&gt;If a message is sent successfully but the acknowledgement is lost and the message is resent with the same &lt;code&gt;MessageDeduplicationId&lt;/code&gt; after the deduplication interval, Amazon SQS can&#39;t detect duplicate messages.&lt;/p&gt; &lt;p&gt;Amazon SQS continues to keep track of the message deduplication ID even after the message is received and deleted.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The maximum length of &lt;code&gt;MessageDeduplicationId&lt;/code&gt; is 128 characters. &lt;code&gt;MessageDeduplicationId&lt;/code&gt; can contain alphanumeric characters (&lt;code&gt;a-z&lt;/code&gt;, &lt;code&gt;A-Z&lt;/code&gt;, &lt;code&gt;0-9&lt;/code&gt;) and punctuation (&lt;code&gt;!\&quot;#$%&amp;amp;&#39;()*+,-./:;&amp;lt;&#x3D;&amp;gt;?@[\\]^_&#x60;{|}~&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;For best practices of using &lt;code&gt;MessageDeduplicationId&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagededuplicationid-property.html\&quot;&gt;Using the MessageDeduplicationId Property&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param messageGroupId &lt;p&gt;This parameter applies only to FIFO (first-in-first-out) queues.&lt;/p&gt; &lt;p&gt;The tag that specifies that a message belongs to a specific message group. Messages that belong to the same message group are processed in a FIFO manner (however, messages in different message groups might be processed out of order). To interleave multiple ordered streams within a single queue, use &lt;code&gt;MessageGroupId&lt;/code&gt; values (for example, session data for multiple users). In this scenario, multiple consumers can process the queue, but the session data of each user is processed in a FIFO fashion.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You must associate a non-empty &lt;code&gt;MessageGroupId&lt;/code&gt; with a message. If you don&#39;t provide a &lt;code&gt;MessageGroupId&lt;/code&gt;, the action fails.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ReceiveMessage&lt;/code&gt; might return messages with multiple &lt;code&gt;MessageGroupId&lt;/code&gt; values. For each &lt;code&gt;MessageGroupId&lt;/code&gt;, the messages are sorted by time sent. The caller can&#39;t specify a &lt;code&gt;MessageGroupId&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The length of &lt;code&gt;MessageGroupId&lt;/code&gt; is 128 characters. Valid values: alphanumeric characters and punctuation &lt;code&gt;(!\&quot;#$%&amp;amp;&#39;()*+,-./:;&amp;lt;&#x3D;&amp;gt;?@[\\]^_&#x60;{|}~)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For best practices of using &lt;code&gt;MessageGroupId&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagegroupid-property.html\&quot;&gt;Using the MessageGroupId Property&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;code&gt;MessageGroupId&lt;/code&gt; is required for FIFO queues. You can&#39;t use it for Standard queues.&lt;/p&gt; &lt;/important&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidMessageContents </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSendMessageAsync(String messageBody, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer delaySeconds, Map<String, MessageAttributeValue> messageAttribute, Map<String, MessageSystemAttributeValue> messageSystemAttribute, String messageDeduplicationId, String messageGroupId, final ApiCallback<SendMessageResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETSendMessageValidateBeforeCall(messageBody, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, delaySeconds, messageAttribute, messageSystemAttribute, messageDeduplicationId, messageGroupId, _callback);
        Type localVarReturnType = new TypeToken<SendMessageResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETSendMessageBatch
     * @param entries A list of &lt;code&gt; &lt;a&gt;SendMessageBatchRequestEntry&lt;/a&gt; &lt;/code&gt; items. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEntriesInBatchRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EmptyBatchRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BatchEntryIdsNotDistinct </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BatchRequestTooLong </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidBatchEntryId </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSendMessageBatchCall(List<GETSendMessageBatchEntriesParameterInner> entries, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{AccountNumber}/{QueueName}/#Action=SendMessageBatch"
            .replace("{" + "AccountNumber" + "}", localVarApiClient.escapeString(accountNumber.toString()))
            .replace("{" + "QueueName" + "}", localVarApiClient.escapeString(queueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (entries != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Entries", entries));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETSendMessageBatchValidateBeforeCall(List<GETSendMessageBatchEntriesParameterInner> entries, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entries' is set
        if (entries == null) {
            throw new ApiException("Missing the required parameter 'entries' when calling gETSendMessageBatch(Async)");
        }

        // verify the required parameter 'accountNumber' is set
        if (accountNumber == null) {
            throw new ApiException("Missing the required parameter 'accountNumber' when calling gETSendMessageBatch(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling gETSendMessageBatch(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETSendMessageBatch(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETSendMessageBatch(Async)");
        }

        return gETSendMessageBatchCall(entries, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;You can use &lt;code&gt;SendMessageBatch&lt;/code&gt; to send up to 10 messages to the specified queue by assigning either identical or different values to each message (or by not assigning values at all). This is a batch version of &lt;code&gt; &lt;a&gt;SendMessage&lt;/a&gt;.&lt;/code&gt; For a FIFO queue, multiple messages within a single batch are enqueued in the order they are sent.&lt;/p&gt; &lt;p&gt;The result of sending each message is reported individually in the response. Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The maximum allowed individual message size and the maximum total payload size (the sum of the individual lengths of all of the batched messages) are both 256 KiB (262,144 bytes).&lt;/p&gt; &lt;important&gt; &lt;p&gt;A message can include only XML, JSON, and unformatted text. The following Unicode characters are allowed:&lt;/p&gt; &lt;p&gt; &lt;code&gt;#x9&lt;/code&gt; | &lt;code&gt;#xA&lt;/code&gt; | &lt;code&gt;#xD&lt;/code&gt; | &lt;code&gt;#x20&lt;/code&gt; to &lt;code&gt;#xD7FF&lt;/code&gt; | &lt;code&gt;#xE000&lt;/code&gt; to &lt;code&gt;#xFFFD&lt;/code&gt; | &lt;code&gt;#x10000&lt;/code&gt; to &lt;code&gt;#x10FFFF&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Any characters not included in this list will be rejected. For more information, see the &lt;a href&#x3D;\&quot;http://www.w3.org/TR/REC-xml/#charsets\&quot;&gt;W3C specification for characters&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;If you don&#39;t specify the &lt;code&gt;DelaySeconds&lt;/code&gt; parameter for an entry, Amazon SQS uses the default value for the queue.&lt;/p&gt;
     * @param entries A list of &lt;code&gt; &lt;a&gt;SendMessageBatchRequestEntry&lt;/a&gt; &lt;/code&gt; items. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return SendMessageBatchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEntriesInBatchRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EmptyBatchRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BatchEntryIdsNotDistinct </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BatchRequestTooLong </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidBatchEntryId </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public SendMessageBatchResult gETSendMessageBatch(List<GETSendMessageBatchEntriesParameterInner> entries, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<SendMessageBatchResult> localVarResp = gETSendMessageBatchWithHttpInfo(entries, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;You can use &lt;code&gt;SendMessageBatch&lt;/code&gt; to send up to 10 messages to the specified queue by assigning either identical or different values to each message (or by not assigning values at all). This is a batch version of &lt;code&gt; &lt;a&gt;SendMessage&lt;/a&gt;.&lt;/code&gt; For a FIFO queue, multiple messages within a single batch are enqueued in the order they are sent.&lt;/p&gt; &lt;p&gt;The result of sending each message is reported individually in the response. Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The maximum allowed individual message size and the maximum total payload size (the sum of the individual lengths of all of the batched messages) are both 256 KiB (262,144 bytes).&lt;/p&gt; &lt;important&gt; &lt;p&gt;A message can include only XML, JSON, and unformatted text. The following Unicode characters are allowed:&lt;/p&gt; &lt;p&gt; &lt;code&gt;#x9&lt;/code&gt; | &lt;code&gt;#xA&lt;/code&gt; | &lt;code&gt;#xD&lt;/code&gt; | &lt;code&gt;#x20&lt;/code&gt; to &lt;code&gt;#xD7FF&lt;/code&gt; | &lt;code&gt;#xE000&lt;/code&gt; to &lt;code&gt;#xFFFD&lt;/code&gt; | &lt;code&gt;#x10000&lt;/code&gt; to &lt;code&gt;#x10FFFF&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Any characters not included in this list will be rejected. For more information, see the &lt;a href&#x3D;\&quot;http://www.w3.org/TR/REC-xml/#charsets\&quot;&gt;W3C specification for characters&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;If you don&#39;t specify the &lt;code&gt;DelaySeconds&lt;/code&gt; parameter for an entry, Amazon SQS uses the default value for the queue.&lt;/p&gt;
     * @param entries A list of &lt;code&gt; &lt;a&gt;SendMessageBatchRequestEntry&lt;/a&gt; &lt;/code&gt; items. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;SendMessageBatchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEntriesInBatchRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EmptyBatchRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BatchEntryIdsNotDistinct </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BatchRequestTooLong </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidBatchEntryId </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendMessageBatchResult> gETSendMessageBatchWithHttpInfo(List<GETSendMessageBatchEntriesParameterInner> entries, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETSendMessageBatchValidateBeforeCall(entries, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<SendMessageBatchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;You can use &lt;code&gt;SendMessageBatch&lt;/code&gt; to send up to 10 messages to the specified queue by assigning either identical or different values to each message (or by not assigning values at all). This is a batch version of &lt;code&gt; &lt;a&gt;SendMessage&lt;/a&gt;.&lt;/code&gt; For a FIFO queue, multiple messages within a single batch are enqueued in the order they are sent.&lt;/p&gt; &lt;p&gt;The result of sending each message is reported individually in the response. Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The maximum allowed individual message size and the maximum total payload size (the sum of the individual lengths of all of the batched messages) are both 256 KiB (262,144 bytes).&lt;/p&gt; &lt;important&gt; &lt;p&gt;A message can include only XML, JSON, and unformatted text. The following Unicode characters are allowed:&lt;/p&gt; &lt;p&gt; &lt;code&gt;#x9&lt;/code&gt; | &lt;code&gt;#xA&lt;/code&gt; | &lt;code&gt;#xD&lt;/code&gt; | &lt;code&gt;#x20&lt;/code&gt; to &lt;code&gt;#xD7FF&lt;/code&gt; | &lt;code&gt;#xE000&lt;/code&gt; to &lt;code&gt;#xFFFD&lt;/code&gt; | &lt;code&gt;#x10000&lt;/code&gt; to &lt;code&gt;#x10FFFF&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Any characters not included in this list will be rejected. For more information, see the &lt;a href&#x3D;\&quot;http://www.w3.org/TR/REC-xml/#charsets\&quot;&gt;W3C specification for characters&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;If you don&#39;t specify the &lt;code&gt;DelaySeconds&lt;/code&gt; parameter for an entry, Amazon SQS uses the default value for the queue.&lt;/p&gt;
     * @param entries A list of &lt;code&gt; &lt;a&gt;SendMessageBatchRequestEntry&lt;/a&gt; &lt;/code&gt; items. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEntriesInBatchRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EmptyBatchRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BatchEntryIdsNotDistinct </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BatchRequestTooLong </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidBatchEntryId </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSendMessageBatchAsync(List<GETSendMessageBatchEntriesParameterInner> entries, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<SendMessageBatchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETSendMessageBatchValidateBeforeCall(entries, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<SendMessageBatchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETSetQueueAttributes
     * @param attribute &lt;p&gt;A map of attributes to set.&lt;/p&gt; &lt;p&gt;The following lists the names, descriptions, and values of the special request parameters that the &lt;code&gt;SetQueueAttributes&lt;/code&gt; action uses:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DelaySeconds&lt;/code&gt; – The length of time, in seconds, for which the delivery of all messages in the queue is delayed. Valid values: An integer from 0 to 900 (15 minutes). Default: 0. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MaximumMessageSize&lt;/code&gt; – The limit of how many bytes a message can contain before Amazon SQS rejects it. Valid values: An integer from 1,024 bytes (1 KiB) up to 262,144 bytes (256 KiB). Default: 262,144 (256 KiB). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; – The length of time, in seconds, for which Amazon SQS retains a message. Valid values: An integer representing seconds, from 60 (1 minute) to 1,209,600 (14 days). Default: 345,600 (4 days). When you change a queue&#39;s attributes, the change can take up to 60 seconds for most of the attributes to propagate throughout the Amazon SQS system. Changes made to the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; attribute can take up to 15 minutes and will impact existing messages in the queue potentially causing them to be expired and deleted if the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; is reduced below the age of existing messages.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Policy&lt;/code&gt; – The queue&#39;s policy. A valid Amazon Web Services policy. For more information about policy structure, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/PoliciesOverview.html\&quot;&gt;Overview of Amazon Web Services IAM Policies&lt;/a&gt; in the &lt;i&gt;Identity and Access Management User Guide&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ReceiveMessageWaitTimeSeconds&lt;/code&gt; – The length of time, in seconds, for which a &lt;code&gt; &lt;a&gt;ReceiveMessage&lt;/a&gt; &lt;/code&gt; action waits for a message to arrive. Valid values: An integer from 0 to 20 (seconds). Default: 0. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;VisibilityTimeout&lt;/code&gt; – The visibility timeout for the queue, in seconds. Valid values: An integer from 0 to 43,200 (12 hours). Default: 30. For more information about the visibility timeout, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html\&quot;&gt;Visibility Timeout&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;dead-letter queues:&lt;/a&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedrivePolicy&lt;/code&gt; – The string that includes the parameters for the dead-letter queue functionality of the source queue as a JSON object. The parameters are as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;deadLetterTargetArn&lt;/code&gt; – The Amazon Resource Name (ARN) of the dead-letter queue to which Amazon SQS moves messages after the value of &lt;code&gt;maxReceiveCount&lt;/code&gt; is exceeded.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;maxReceiveCount&lt;/code&gt; – The number of times a message is delivered to the source queue before being moved to the dead-letter queue. Default: 10. When the &lt;code&gt;ReceiveCount&lt;/code&gt; for a message exceeds the &lt;code&gt;maxReceiveCount&lt;/code&gt; for a queue, Amazon SQS moves the message to the dead-letter-queue.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedriveAllowPolicy&lt;/code&gt; – The string that includes the parameters for the permissions for the dead-letter queue redrive permission and which source queues can specify dead-letter queues as a JSON object. The parameters are as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;redrivePermission&lt;/code&gt; – The permission type that defines which source queues can specify the current queue as the dead-letter queue. Valid values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;allowAll&lt;/code&gt; – (Default) Any source queues in this Amazon Web Services account in the same Region can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;denyAll&lt;/code&gt; – No source queues can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;byQueue&lt;/code&gt; – Only queues specified by the &lt;code&gt;sourceQueueArns&lt;/code&gt; parameter can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sourceQueueArns&lt;/code&gt; – The Amazon Resource Names (ARN)s of the source queues that can specify this queue as the dead-letter queue and redrive messages. You can specify this parameter only when the &lt;code&gt;redrivePermission&lt;/code&gt; parameter is set to &lt;code&gt;byQueue&lt;/code&gt;. You can specify up to 10 source queue ARNs. To allow more than 10 source queues to specify dead-letter queues, set the &lt;code&gt;redrivePermission&lt;/code&gt; parameter to &lt;code&gt;allowAll&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The dead-letter queue of a FIFO queue must also be a FIFO queue. Similarly, the dead-letter queue of a standard queue must also be a standard queue.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html\&quot;&gt;server-side-encryption&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsMasterKeyId&lt;/code&gt; – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-sse-key-terms\&quot;&gt;Key Terms&lt;/a&gt;. While the alias of the AWS-managed CMK for Amazon SQS is always &lt;code&gt;alias/aws/sqs&lt;/code&gt;, the alias of a custom CMK can, for example, be &lt;code&gt;alias/&lt;i&gt;MyAlias&lt;/i&gt; &lt;/code&gt;. For more examples, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters\&quot;&gt;KeyId&lt;/a&gt; in the &lt;i&gt;Key Management Service API Reference&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsDataKeyReusePeriodSeconds&lt;/code&gt; – The length of time, in seconds, for which Amazon SQS can reuse a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#data-keys\&quot;&gt;data key&lt;/a&gt; to encrypt or decrypt messages before calling KMS again. An integer representing seconds, between 60 seconds (1 minute) and 86,400 seconds (24 hours). Default: 300 (5 minutes). A shorter time period provides better security but results in more calls to KMS which might incur charges after Free Tier. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-how-does-the-data-key-reuse-period-work\&quot;&gt;How Does the Data Key Reuse Period Work?&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SqsManagedSseEnabled&lt;/code&gt; – Enables server-side queue encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (for example, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html\&quot;&gt;SSE-KMS&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.html\&quot;&gt;SSE-SQS&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attribute applies only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html\&quot;&gt;FIFO (first-in-first-out) queues&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; – Enables content-based deduplication. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html\&quot;&gt;Exactly-once processing&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. Note the following: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Every message must have a unique &lt;code&gt;MessageDeduplicationId&lt;/code&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You may provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; explicitly.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you aren&#39;t able to provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; and you enable &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; for your queue, Amazon SQS uses a SHA-256 hash to generate the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; using the body of the message (but not the attributes of the message). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; and the queue doesn&#39;t have &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; set, the action fails with an error.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the queue has &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; set, your &lt;code&gt;MessageDeduplicationId&lt;/code&gt; overrides the generated one.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you send one message with &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; enabled and then another message with a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; that is the same as the one generated for the first &lt;code&gt;MessageDeduplicationId&lt;/code&gt;, the two messages are treated as duplicates and only one copy of the message is delivered. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html\&quot;&gt;high throughput for FIFO queues&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeduplicationScope&lt;/code&gt; – Specifies whether message deduplication occurs at the message group or queue level. Valid values are &lt;code&gt;messageGroup&lt;/code&gt; and &lt;code&gt;queue&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FifoThroughputLimit&lt;/code&gt; – Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are &lt;code&gt;perQueue&lt;/code&gt; and &lt;code&gt;perMessageGroupId&lt;/code&gt;. The &lt;code&gt;perMessageGroupId&lt;/code&gt; value is allowed only when the value for &lt;code&gt;DeduplicationScope&lt;/code&gt; is &lt;code&gt;messageGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To enable high throughput for FIFO queues, do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;DeduplicationScope&lt;/code&gt; to &lt;code&gt;messageGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;FifoThroughputLimit&lt;/code&gt; to &lt;code&gt;perMessageGroupId&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you set these attributes to anything other than the values shown for enabling high throughput, normal throughput is in effect and deduplication occurs as specified.&lt;/p&gt; &lt;p&gt;For information on throughput quotas, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html\&quot;&gt;Quotas related to messages&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidAttributeName </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetQueueAttributesCall(Map<String, String> attribute, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{AccountNumber}/{QueueName}/#Action=SetQueueAttributes"
            .replace("{" + "AccountNumber" + "}", localVarApiClient.escapeString(accountNumber.toString()))
            .replace("{" + "QueueName" + "}", localVarApiClient.escapeString(queueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attribute != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Attribute", attribute));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETSetQueueAttributesValidateBeforeCall(Map<String, String> attribute, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attribute' is set
        if (attribute == null) {
            throw new ApiException("Missing the required parameter 'attribute' when calling gETSetQueueAttributes(Async)");
        }

        // verify the required parameter 'accountNumber' is set
        if (accountNumber == null) {
            throw new ApiException("Missing the required parameter 'accountNumber' when calling gETSetQueueAttributes(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling gETSetQueueAttributes(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETSetQueueAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETSetQueueAttributes(Async)");
        }

        return gETSetQueueAttributesCall(attribute, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Sets the value of one or more queue attributes. When you change a queue&#39;s attributes, the change can take up to 60 seconds for most of the attributes to propagate throughout the Amazon SQS system. Changes made to the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; attribute can take up to 15 minutes and will impact existing messages in the queue potentially causing them to be expired and deleted if the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; is reduced below the age of existing messages.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;In the future, new attributes might be added. If you write code that calls this action, we recommend that you structure your code so that it can handle new attributes gracefully.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To remove the ability to change queue permissions, you must deny permission to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetQueueAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param attribute &lt;p&gt;A map of attributes to set.&lt;/p&gt; &lt;p&gt;The following lists the names, descriptions, and values of the special request parameters that the &lt;code&gt;SetQueueAttributes&lt;/code&gt; action uses:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DelaySeconds&lt;/code&gt; – The length of time, in seconds, for which the delivery of all messages in the queue is delayed. Valid values: An integer from 0 to 900 (15 minutes). Default: 0. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MaximumMessageSize&lt;/code&gt; – The limit of how many bytes a message can contain before Amazon SQS rejects it. Valid values: An integer from 1,024 bytes (1 KiB) up to 262,144 bytes (256 KiB). Default: 262,144 (256 KiB). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; – The length of time, in seconds, for which Amazon SQS retains a message. Valid values: An integer representing seconds, from 60 (1 minute) to 1,209,600 (14 days). Default: 345,600 (4 days). When you change a queue&#39;s attributes, the change can take up to 60 seconds for most of the attributes to propagate throughout the Amazon SQS system. Changes made to the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; attribute can take up to 15 minutes and will impact existing messages in the queue potentially causing them to be expired and deleted if the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; is reduced below the age of existing messages.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Policy&lt;/code&gt; – The queue&#39;s policy. A valid Amazon Web Services policy. For more information about policy structure, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/PoliciesOverview.html\&quot;&gt;Overview of Amazon Web Services IAM Policies&lt;/a&gt; in the &lt;i&gt;Identity and Access Management User Guide&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ReceiveMessageWaitTimeSeconds&lt;/code&gt; – The length of time, in seconds, for which a &lt;code&gt; &lt;a&gt;ReceiveMessage&lt;/a&gt; &lt;/code&gt; action waits for a message to arrive. Valid values: An integer from 0 to 20 (seconds). Default: 0. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;VisibilityTimeout&lt;/code&gt; – The visibility timeout for the queue, in seconds. Valid values: An integer from 0 to 43,200 (12 hours). Default: 30. For more information about the visibility timeout, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html\&quot;&gt;Visibility Timeout&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;dead-letter queues:&lt;/a&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedrivePolicy&lt;/code&gt; – The string that includes the parameters for the dead-letter queue functionality of the source queue as a JSON object. The parameters are as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;deadLetterTargetArn&lt;/code&gt; – The Amazon Resource Name (ARN) of the dead-letter queue to which Amazon SQS moves messages after the value of &lt;code&gt;maxReceiveCount&lt;/code&gt; is exceeded.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;maxReceiveCount&lt;/code&gt; – The number of times a message is delivered to the source queue before being moved to the dead-letter queue. Default: 10. When the &lt;code&gt;ReceiveCount&lt;/code&gt; for a message exceeds the &lt;code&gt;maxReceiveCount&lt;/code&gt; for a queue, Amazon SQS moves the message to the dead-letter-queue.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedriveAllowPolicy&lt;/code&gt; – The string that includes the parameters for the permissions for the dead-letter queue redrive permission and which source queues can specify dead-letter queues as a JSON object. The parameters are as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;redrivePermission&lt;/code&gt; – The permission type that defines which source queues can specify the current queue as the dead-letter queue. Valid values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;allowAll&lt;/code&gt; – (Default) Any source queues in this Amazon Web Services account in the same Region can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;denyAll&lt;/code&gt; – No source queues can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;byQueue&lt;/code&gt; – Only queues specified by the &lt;code&gt;sourceQueueArns&lt;/code&gt; parameter can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sourceQueueArns&lt;/code&gt; – The Amazon Resource Names (ARN)s of the source queues that can specify this queue as the dead-letter queue and redrive messages. You can specify this parameter only when the &lt;code&gt;redrivePermission&lt;/code&gt; parameter is set to &lt;code&gt;byQueue&lt;/code&gt;. You can specify up to 10 source queue ARNs. To allow more than 10 source queues to specify dead-letter queues, set the &lt;code&gt;redrivePermission&lt;/code&gt; parameter to &lt;code&gt;allowAll&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The dead-letter queue of a FIFO queue must also be a FIFO queue. Similarly, the dead-letter queue of a standard queue must also be a standard queue.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html\&quot;&gt;server-side-encryption&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsMasterKeyId&lt;/code&gt; – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-sse-key-terms\&quot;&gt;Key Terms&lt;/a&gt;. While the alias of the AWS-managed CMK for Amazon SQS is always &lt;code&gt;alias/aws/sqs&lt;/code&gt;, the alias of a custom CMK can, for example, be &lt;code&gt;alias/&lt;i&gt;MyAlias&lt;/i&gt; &lt;/code&gt;. For more examples, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters\&quot;&gt;KeyId&lt;/a&gt; in the &lt;i&gt;Key Management Service API Reference&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsDataKeyReusePeriodSeconds&lt;/code&gt; – The length of time, in seconds, for which Amazon SQS can reuse a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#data-keys\&quot;&gt;data key&lt;/a&gt; to encrypt or decrypt messages before calling KMS again. An integer representing seconds, between 60 seconds (1 minute) and 86,400 seconds (24 hours). Default: 300 (5 minutes). A shorter time period provides better security but results in more calls to KMS which might incur charges after Free Tier. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-how-does-the-data-key-reuse-period-work\&quot;&gt;How Does the Data Key Reuse Period Work?&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SqsManagedSseEnabled&lt;/code&gt; – Enables server-side queue encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (for example, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html\&quot;&gt;SSE-KMS&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.html\&quot;&gt;SSE-SQS&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attribute applies only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html\&quot;&gt;FIFO (first-in-first-out) queues&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; – Enables content-based deduplication. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html\&quot;&gt;Exactly-once processing&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. Note the following: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Every message must have a unique &lt;code&gt;MessageDeduplicationId&lt;/code&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You may provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; explicitly.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you aren&#39;t able to provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; and you enable &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; for your queue, Amazon SQS uses a SHA-256 hash to generate the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; using the body of the message (but not the attributes of the message). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; and the queue doesn&#39;t have &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; set, the action fails with an error.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the queue has &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; set, your &lt;code&gt;MessageDeduplicationId&lt;/code&gt; overrides the generated one.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you send one message with &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; enabled and then another message with a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; that is the same as the one generated for the first &lt;code&gt;MessageDeduplicationId&lt;/code&gt;, the two messages are treated as duplicates and only one copy of the message is delivered. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html\&quot;&gt;high throughput for FIFO queues&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeduplicationScope&lt;/code&gt; – Specifies whether message deduplication occurs at the message group or queue level. Valid values are &lt;code&gt;messageGroup&lt;/code&gt; and &lt;code&gt;queue&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FifoThroughputLimit&lt;/code&gt; – Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are &lt;code&gt;perQueue&lt;/code&gt; and &lt;code&gt;perMessageGroupId&lt;/code&gt;. The &lt;code&gt;perMessageGroupId&lt;/code&gt; value is allowed only when the value for &lt;code&gt;DeduplicationScope&lt;/code&gt; is &lt;code&gt;messageGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To enable high throughput for FIFO queues, do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;DeduplicationScope&lt;/code&gt; to &lt;code&gt;messageGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;FifoThroughputLimit&lt;/code&gt; to &lt;code&gt;perMessageGroupId&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you set these attributes to anything other than the values shown for enabling high throughput, normal throughput is in effect and deduplication occurs as specified.&lt;/p&gt; &lt;p&gt;For information on throughput quotas, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html\&quot;&gt;Quotas related to messages&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidAttributeName </td><td>  -  </td></tr>
     </table>
     */
    public void gETSetQueueAttributes(Map<String, String> attribute, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETSetQueueAttributesWithHttpInfo(attribute, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Sets the value of one or more queue attributes. When you change a queue&#39;s attributes, the change can take up to 60 seconds for most of the attributes to propagate throughout the Amazon SQS system. Changes made to the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; attribute can take up to 15 minutes and will impact existing messages in the queue potentially causing them to be expired and deleted if the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; is reduced below the age of existing messages.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;In the future, new attributes might be added. If you write code that calls this action, we recommend that you structure your code so that it can handle new attributes gracefully.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To remove the ability to change queue permissions, you must deny permission to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetQueueAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param attribute &lt;p&gt;A map of attributes to set.&lt;/p&gt; &lt;p&gt;The following lists the names, descriptions, and values of the special request parameters that the &lt;code&gt;SetQueueAttributes&lt;/code&gt; action uses:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DelaySeconds&lt;/code&gt; – The length of time, in seconds, for which the delivery of all messages in the queue is delayed. Valid values: An integer from 0 to 900 (15 minutes). Default: 0. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MaximumMessageSize&lt;/code&gt; – The limit of how many bytes a message can contain before Amazon SQS rejects it. Valid values: An integer from 1,024 bytes (1 KiB) up to 262,144 bytes (256 KiB). Default: 262,144 (256 KiB). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; – The length of time, in seconds, for which Amazon SQS retains a message. Valid values: An integer representing seconds, from 60 (1 minute) to 1,209,600 (14 days). Default: 345,600 (4 days). When you change a queue&#39;s attributes, the change can take up to 60 seconds for most of the attributes to propagate throughout the Amazon SQS system. Changes made to the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; attribute can take up to 15 minutes and will impact existing messages in the queue potentially causing them to be expired and deleted if the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; is reduced below the age of existing messages.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Policy&lt;/code&gt; – The queue&#39;s policy. A valid Amazon Web Services policy. For more information about policy structure, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/PoliciesOverview.html\&quot;&gt;Overview of Amazon Web Services IAM Policies&lt;/a&gt; in the &lt;i&gt;Identity and Access Management User Guide&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ReceiveMessageWaitTimeSeconds&lt;/code&gt; – The length of time, in seconds, for which a &lt;code&gt; &lt;a&gt;ReceiveMessage&lt;/a&gt; &lt;/code&gt; action waits for a message to arrive. Valid values: An integer from 0 to 20 (seconds). Default: 0. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;VisibilityTimeout&lt;/code&gt; – The visibility timeout for the queue, in seconds. Valid values: An integer from 0 to 43,200 (12 hours). Default: 30. For more information about the visibility timeout, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html\&quot;&gt;Visibility Timeout&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;dead-letter queues:&lt;/a&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedrivePolicy&lt;/code&gt; – The string that includes the parameters for the dead-letter queue functionality of the source queue as a JSON object. The parameters are as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;deadLetterTargetArn&lt;/code&gt; – The Amazon Resource Name (ARN) of the dead-letter queue to which Amazon SQS moves messages after the value of &lt;code&gt;maxReceiveCount&lt;/code&gt; is exceeded.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;maxReceiveCount&lt;/code&gt; – The number of times a message is delivered to the source queue before being moved to the dead-letter queue. Default: 10. When the &lt;code&gt;ReceiveCount&lt;/code&gt; for a message exceeds the &lt;code&gt;maxReceiveCount&lt;/code&gt; for a queue, Amazon SQS moves the message to the dead-letter-queue.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedriveAllowPolicy&lt;/code&gt; – The string that includes the parameters for the permissions for the dead-letter queue redrive permission and which source queues can specify dead-letter queues as a JSON object. The parameters are as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;redrivePermission&lt;/code&gt; – The permission type that defines which source queues can specify the current queue as the dead-letter queue. Valid values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;allowAll&lt;/code&gt; – (Default) Any source queues in this Amazon Web Services account in the same Region can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;denyAll&lt;/code&gt; – No source queues can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;byQueue&lt;/code&gt; – Only queues specified by the &lt;code&gt;sourceQueueArns&lt;/code&gt; parameter can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sourceQueueArns&lt;/code&gt; – The Amazon Resource Names (ARN)s of the source queues that can specify this queue as the dead-letter queue and redrive messages. You can specify this parameter only when the &lt;code&gt;redrivePermission&lt;/code&gt; parameter is set to &lt;code&gt;byQueue&lt;/code&gt;. You can specify up to 10 source queue ARNs. To allow more than 10 source queues to specify dead-letter queues, set the &lt;code&gt;redrivePermission&lt;/code&gt; parameter to &lt;code&gt;allowAll&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The dead-letter queue of a FIFO queue must also be a FIFO queue. Similarly, the dead-letter queue of a standard queue must also be a standard queue.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html\&quot;&gt;server-side-encryption&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsMasterKeyId&lt;/code&gt; – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-sse-key-terms\&quot;&gt;Key Terms&lt;/a&gt;. While the alias of the AWS-managed CMK for Amazon SQS is always &lt;code&gt;alias/aws/sqs&lt;/code&gt;, the alias of a custom CMK can, for example, be &lt;code&gt;alias/&lt;i&gt;MyAlias&lt;/i&gt; &lt;/code&gt;. For more examples, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters\&quot;&gt;KeyId&lt;/a&gt; in the &lt;i&gt;Key Management Service API Reference&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsDataKeyReusePeriodSeconds&lt;/code&gt; – The length of time, in seconds, for which Amazon SQS can reuse a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#data-keys\&quot;&gt;data key&lt;/a&gt; to encrypt or decrypt messages before calling KMS again. An integer representing seconds, between 60 seconds (1 minute) and 86,400 seconds (24 hours). Default: 300 (5 minutes). A shorter time period provides better security but results in more calls to KMS which might incur charges after Free Tier. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-how-does-the-data-key-reuse-period-work\&quot;&gt;How Does the Data Key Reuse Period Work?&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SqsManagedSseEnabled&lt;/code&gt; – Enables server-side queue encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (for example, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html\&quot;&gt;SSE-KMS&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.html\&quot;&gt;SSE-SQS&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attribute applies only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html\&quot;&gt;FIFO (first-in-first-out) queues&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; – Enables content-based deduplication. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html\&quot;&gt;Exactly-once processing&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. Note the following: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Every message must have a unique &lt;code&gt;MessageDeduplicationId&lt;/code&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You may provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; explicitly.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you aren&#39;t able to provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; and you enable &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; for your queue, Amazon SQS uses a SHA-256 hash to generate the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; using the body of the message (but not the attributes of the message). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; and the queue doesn&#39;t have &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; set, the action fails with an error.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the queue has &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; set, your &lt;code&gt;MessageDeduplicationId&lt;/code&gt; overrides the generated one.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you send one message with &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; enabled and then another message with a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; that is the same as the one generated for the first &lt;code&gt;MessageDeduplicationId&lt;/code&gt;, the two messages are treated as duplicates and only one copy of the message is delivered. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html\&quot;&gt;high throughput for FIFO queues&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeduplicationScope&lt;/code&gt; – Specifies whether message deduplication occurs at the message group or queue level. Valid values are &lt;code&gt;messageGroup&lt;/code&gt; and &lt;code&gt;queue&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FifoThroughputLimit&lt;/code&gt; – Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are &lt;code&gt;perQueue&lt;/code&gt; and &lt;code&gt;perMessageGroupId&lt;/code&gt;. The &lt;code&gt;perMessageGroupId&lt;/code&gt; value is allowed only when the value for &lt;code&gt;DeduplicationScope&lt;/code&gt; is &lt;code&gt;messageGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To enable high throughput for FIFO queues, do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;DeduplicationScope&lt;/code&gt; to &lt;code&gt;messageGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;FifoThroughputLimit&lt;/code&gt; to &lt;code&gt;perMessageGroupId&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you set these attributes to anything other than the values shown for enabling high throughput, normal throughput is in effect and deduplication occurs as specified.&lt;/p&gt; &lt;p&gt;For information on throughput quotas, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html\&quot;&gt;Quotas related to messages&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidAttributeName </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETSetQueueAttributesWithHttpInfo(Map<String, String> attribute, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETSetQueueAttributesValidateBeforeCall(attribute, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Sets the value of one or more queue attributes. When you change a queue&#39;s attributes, the change can take up to 60 seconds for most of the attributes to propagate throughout the Amazon SQS system. Changes made to the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; attribute can take up to 15 minutes and will impact existing messages in the queue potentially causing them to be expired and deleted if the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; is reduced below the age of existing messages.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;In the future, new attributes might be added. If you write code that calls this action, we recommend that you structure your code so that it can handle new attributes gracefully.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To remove the ability to change queue permissions, you must deny permission to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetQueueAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param attribute &lt;p&gt;A map of attributes to set.&lt;/p&gt; &lt;p&gt;The following lists the names, descriptions, and values of the special request parameters that the &lt;code&gt;SetQueueAttributes&lt;/code&gt; action uses:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DelaySeconds&lt;/code&gt; – The length of time, in seconds, for which the delivery of all messages in the queue is delayed. Valid values: An integer from 0 to 900 (15 minutes). Default: 0. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MaximumMessageSize&lt;/code&gt; – The limit of how many bytes a message can contain before Amazon SQS rejects it. Valid values: An integer from 1,024 bytes (1 KiB) up to 262,144 bytes (256 KiB). Default: 262,144 (256 KiB). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; – The length of time, in seconds, for which Amazon SQS retains a message. Valid values: An integer representing seconds, from 60 (1 minute) to 1,209,600 (14 days). Default: 345,600 (4 days). When you change a queue&#39;s attributes, the change can take up to 60 seconds for most of the attributes to propagate throughout the Amazon SQS system. Changes made to the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; attribute can take up to 15 minutes and will impact existing messages in the queue potentially causing them to be expired and deleted if the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; is reduced below the age of existing messages.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Policy&lt;/code&gt; – The queue&#39;s policy. A valid Amazon Web Services policy. For more information about policy structure, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/PoliciesOverview.html\&quot;&gt;Overview of Amazon Web Services IAM Policies&lt;/a&gt; in the &lt;i&gt;Identity and Access Management User Guide&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ReceiveMessageWaitTimeSeconds&lt;/code&gt; – The length of time, in seconds, for which a &lt;code&gt; &lt;a&gt;ReceiveMessage&lt;/a&gt; &lt;/code&gt; action waits for a message to arrive. Valid values: An integer from 0 to 20 (seconds). Default: 0. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;VisibilityTimeout&lt;/code&gt; – The visibility timeout for the queue, in seconds. Valid values: An integer from 0 to 43,200 (12 hours). Default: 30. For more information about the visibility timeout, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html\&quot;&gt;Visibility Timeout&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;dead-letter queues:&lt;/a&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedrivePolicy&lt;/code&gt; – The string that includes the parameters for the dead-letter queue functionality of the source queue as a JSON object. The parameters are as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;deadLetterTargetArn&lt;/code&gt; – The Amazon Resource Name (ARN) of the dead-letter queue to which Amazon SQS moves messages after the value of &lt;code&gt;maxReceiveCount&lt;/code&gt; is exceeded.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;maxReceiveCount&lt;/code&gt; – The number of times a message is delivered to the source queue before being moved to the dead-letter queue. Default: 10. When the &lt;code&gt;ReceiveCount&lt;/code&gt; for a message exceeds the &lt;code&gt;maxReceiveCount&lt;/code&gt; for a queue, Amazon SQS moves the message to the dead-letter-queue.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RedriveAllowPolicy&lt;/code&gt; – The string that includes the parameters for the permissions for the dead-letter queue redrive permission and which source queues can specify dead-letter queues as a JSON object. The parameters are as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;redrivePermission&lt;/code&gt; – The permission type that defines which source queues can specify the current queue as the dead-letter queue. Valid values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;allowAll&lt;/code&gt; – (Default) Any source queues in this Amazon Web Services account in the same Region can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;denyAll&lt;/code&gt; – No source queues can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;byQueue&lt;/code&gt; – Only queues specified by the &lt;code&gt;sourceQueueArns&lt;/code&gt; parameter can specify this queue as the dead-letter queue.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sourceQueueArns&lt;/code&gt; – The Amazon Resource Names (ARN)s of the source queues that can specify this queue as the dead-letter queue and redrive messages. You can specify this parameter only when the &lt;code&gt;redrivePermission&lt;/code&gt; parameter is set to &lt;code&gt;byQueue&lt;/code&gt;. You can specify up to 10 source queue ARNs. To allow more than 10 source queues to specify dead-letter queues, set the &lt;code&gt;redrivePermission&lt;/code&gt; parameter to &lt;code&gt;allowAll&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The dead-letter queue of a FIFO queue must also be a FIFO queue. Similarly, the dead-letter queue of a standard queue must also be a standard queue.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html\&quot;&gt;server-side-encryption&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsMasterKeyId&lt;/code&gt; – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-sse-key-terms\&quot;&gt;Key Terms&lt;/a&gt;. While the alias of the AWS-managed CMK for Amazon SQS is always &lt;code&gt;alias/aws/sqs&lt;/code&gt;, the alias of a custom CMK can, for example, be &lt;code&gt;alias/&lt;i&gt;MyAlias&lt;/i&gt; &lt;/code&gt;. For more examples, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters\&quot;&gt;KeyId&lt;/a&gt; in the &lt;i&gt;Key Management Service API Reference&lt;/i&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;KmsDataKeyReusePeriodSeconds&lt;/code&gt; – The length of time, in seconds, for which Amazon SQS can reuse a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#data-keys\&quot;&gt;data key&lt;/a&gt; to encrypt or decrypt messages before calling KMS again. An integer representing seconds, between 60 seconds (1 minute) and 86,400 seconds (24 hours). Default: 300 (5 minutes). A shorter time period provides better security but results in more calls to KMS which might incur charges after Free Tier. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-how-does-the-data-key-reuse-period-work\&quot;&gt;How Does the Data Key Reuse Period Work?&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SqsManagedSseEnabled&lt;/code&gt; – Enables server-side queue encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (for example, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html\&quot;&gt;SSE-KMS&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.html\&quot;&gt;SSE-SQS&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attribute applies only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html\&quot;&gt;FIFO (first-in-first-out) queues&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; – Enables content-based deduplication. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html\&quot;&gt;Exactly-once processing&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. Note the following: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Every message must have a unique &lt;code&gt;MessageDeduplicationId&lt;/code&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You may provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; explicitly.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you aren&#39;t able to provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; and you enable &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; for your queue, Amazon SQS uses a SHA-256 hash to generate the &lt;code&gt;MessageDeduplicationId&lt;/code&gt; using the body of the message (but not the attributes of the message). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t provide a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; and the queue doesn&#39;t have &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; set, the action fails with an error.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the queue has &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; set, your &lt;code&gt;MessageDeduplicationId&lt;/code&gt; overrides the generated one.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you send one message with &lt;code&gt;ContentBasedDeduplication&lt;/code&gt; enabled and then another message with a &lt;code&gt;MessageDeduplicationId&lt;/code&gt; that is the same as the one generated for the first &lt;code&gt;MessageDeduplicationId&lt;/code&gt;, the two messages are treated as duplicates and only one copy of the message is delivered. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following attributes apply only to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html\&quot;&gt;high throughput for FIFO queues&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeduplicationScope&lt;/code&gt; – Specifies whether message deduplication occurs at the message group or queue level. Valid values are &lt;code&gt;messageGroup&lt;/code&gt; and &lt;code&gt;queue&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FifoThroughputLimit&lt;/code&gt; – Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are &lt;code&gt;perQueue&lt;/code&gt; and &lt;code&gt;perMessageGroupId&lt;/code&gt;. The &lt;code&gt;perMessageGroupId&lt;/code&gt; value is allowed only when the value for &lt;code&gt;DeduplicationScope&lt;/code&gt; is &lt;code&gt;messageGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To enable high throughput for FIFO queues, do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;DeduplicationScope&lt;/code&gt; to &lt;code&gt;messageGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Set &lt;code&gt;FifoThroughputLimit&lt;/code&gt; to &lt;code&gt;perMessageGroupId&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you set these attributes to anything other than the values shown for enabling high throughput, normal throughput is in effect and deduplication occurs as specified.&lt;/p&gt; &lt;p&gt;For information on throughput quotas, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html\&quot;&gt;Quotas related to messages&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidAttributeName </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetQueueAttributesAsync(Map<String, String> attribute, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETSetQueueAttributesValidateBeforeCall(attribute, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETStartMessageMoveTask
     * @param sourceArn The ARN of the queue that contains the messages to be moved to another queue. Currently, only ARNs of dead-letter queues (DLQs) whose sources are other Amazon SQS queues are accepted. DLQs whose sources are non-SQS queues, such as Lambda or Amazon SNS topics, are not currently supported. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param destinationArn The ARN of the queue that receives the moved messages. You can use this field to specify the destination queue where you would like to redrive messages. If this field is left blank, the messages will be redriven back to their respective original source queues. (optional)
     * @param maxNumberOfMessagesPerSecond The number of messages to be moved per second (the message movement rate). You can use this field to define a fixed message movement rate. The maximum value for messages per second is 500. If this field is left blank, the system will optimize the rate based on the queue message backlog size, which may vary throughout the duration of the message movement task. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETStartMessageMoveTaskCall(String sourceArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String destinationArn, Integer maxNumberOfMessagesPerSecond, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=StartMessageMoveTask";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceArn", sourceArn));
        }

        if (destinationArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DestinationArn", destinationArn));
        }

        if (maxNumberOfMessagesPerSecond != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxNumberOfMessagesPerSecond", maxNumberOfMessagesPerSecond));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETStartMessageMoveTaskValidateBeforeCall(String sourceArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String destinationArn, Integer maxNumberOfMessagesPerSecond, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceArn' is set
        if (sourceArn == null) {
            throw new ApiException("Missing the required parameter 'sourceArn' when calling gETStartMessageMoveTask(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETStartMessageMoveTask(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETStartMessageMoveTask(Async)");
        }

        return gETStartMessageMoveTaskCall(sourceArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, destinationArn, maxNumberOfMessagesPerSecond, _callback);

    }

    /**
     * 
     * &lt;p&gt;Starts an asynchronous task to move messages from a specified source queue to a specified destination queue.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;This action is currently limited to supporting message redrive from queues that are configured as &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;dead-letter queues (DLQs)&lt;/a&gt; of other Amazon SQS queues only. Non-SQS queue sources of dead-letter queues, such as Lambda or Amazon SNS topics, are currently not supported.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;In dead-letter queues redrive context, the &lt;code&gt;StartMessageMoveTask&lt;/code&gt; the source queue is the DLQ, while the destination queue can be the original source queue (from which the messages were driven to the dead-letter-queue), or a custom destination queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Currently, only standard queues support redrive. FIFO queues don&#39;t support redrive.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Only one active message movement task is supported per queue at any given time.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param sourceArn The ARN of the queue that contains the messages to be moved to another queue. Currently, only ARNs of dead-letter queues (DLQs) whose sources are other Amazon SQS queues are accepted. DLQs whose sources are non-SQS queues, such as Lambda or Amazon SNS topics, are not currently supported. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param destinationArn The ARN of the queue that receives the moved messages. You can use this field to specify the destination queue where you would like to redrive messages. If this field is left blank, the messages will be redriven back to their respective original source queues. (optional)
     * @param maxNumberOfMessagesPerSecond The number of messages to be moved per second (the message movement rate). You can use this field to define a fixed message movement rate. The maximum value for messages per second is 500. If this field is left blank, the system will optimize the rate based on the queue message backlog size, which may vary throughout the duration of the message movement task. (optional)
     * @return StartMessageMoveTaskResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public StartMessageMoveTaskResult gETStartMessageMoveTask(String sourceArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String destinationArn, Integer maxNumberOfMessagesPerSecond) throws ApiException {
        ApiResponse<StartMessageMoveTaskResult> localVarResp = gETStartMessageMoveTaskWithHttpInfo(sourceArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, destinationArn, maxNumberOfMessagesPerSecond);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Starts an asynchronous task to move messages from a specified source queue to a specified destination queue.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;This action is currently limited to supporting message redrive from queues that are configured as &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;dead-letter queues (DLQs)&lt;/a&gt; of other Amazon SQS queues only. Non-SQS queue sources of dead-letter queues, such as Lambda or Amazon SNS topics, are currently not supported.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;In dead-letter queues redrive context, the &lt;code&gt;StartMessageMoveTask&lt;/code&gt; the source queue is the DLQ, while the destination queue can be the original source queue (from which the messages were driven to the dead-letter-queue), or a custom destination queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Currently, only standard queues support redrive. FIFO queues don&#39;t support redrive.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Only one active message movement task is supported per queue at any given time.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param sourceArn The ARN of the queue that contains the messages to be moved to another queue. Currently, only ARNs of dead-letter queues (DLQs) whose sources are other Amazon SQS queues are accepted. DLQs whose sources are non-SQS queues, such as Lambda or Amazon SNS topics, are not currently supported. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param destinationArn The ARN of the queue that receives the moved messages. You can use this field to specify the destination queue where you would like to redrive messages. If this field is left blank, the messages will be redriven back to their respective original source queues. (optional)
     * @param maxNumberOfMessagesPerSecond The number of messages to be moved per second (the message movement rate). You can use this field to define a fixed message movement rate. The maximum value for messages per second is 500. If this field is left blank, the system will optimize the rate based on the queue message backlog size, which may vary throughout the duration of the message movement task. (optional)
     * @return ApiResponse&lt;StartMessageMoveTaskResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartMessageMoveTaskResult> gETStartMessageMoveTaskWithHttpInfo(String sourceArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String destinationArn, Integer maxNumberOfMessagesPerSecond) throws ApiException {
        okhttp3.Call localVarCall = gETStartMessageMoveTaskValidateBeforeCall(sourceArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, destinationArn, maxNumberOfMessagesPerSecond, null);
        Type localVarReturnType = new TypeToken<StartMessageMoveTaskResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Starts an asynchronous task to move messages from a specified source queue to a specified destination queue.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;This action is currently limited to supporting message redrive from queues that are configured as &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;dead-letter queues (DLQs)&lt;/a&gt; of other Amazon SQS queues only. Non-SQS queue sources of dead-letter queues, such as Lambda or Amazon SNS topics, are currently not supported.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;In dead-letter queues redrive context, the &lt;code&gt;StartMessageMoveTask&lt;/code&gt; the source queue is the DLQ, while the destination queue can be the original source queue (from which the messages were driven to the dead-letter-queue), or a custom destination queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Currently, only standard queues support redrive. FIFO queues don&#39;t support redrive.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Only one active message movement task is supported per queue at any given time.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param sourceArn The ARN of the queue that contains the messages to be moved to another queue. Currently, only ARNs of dead-letter queues (DLQs) whose sources are other Amazon SQS queues are accepted. DLQs whose sources are non-SQS queues, such as Lambda or Amazon SNS topics, are not currently supported. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param destinationArn The ARN of the queue that receives the moved messages. You can use this field to specify the destination queue where you would like to redrive messages. If this field is left blank, the messages will be redriven back to their respective original source queues. (optional)
     * @param maxNumberOfMessagesPerSecond The number of messages to be moved per second (the message movement rate). You can use this field to define a fixed message movement rate. The maximum value for messages per second is 500. If this field is left blank, the system will optimize the rate based on the queue message backlog size, which may vary throughout the duration of the message movement task. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETStartMessageMoveTaskAsync(String sourceArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String destinationArn, Integer maxNumberOfMessagesPerSecond, final ApiCallback<StartMessageMoveTaskResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETStartMessageMoveTaskValidateBeforeCall(sourceArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, destinationArn, maxNumberOfMessagesPerSecond, _callback);
        Type localVarReturnType = new TypeToken<StartMessageMoveTaskResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETTagQueue
     * @param tags The list of tags to be added to the specified queue. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETTagQueueCall(Map<String, String> tags, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{AccountNumber}/{QueueName}/#Action=TagQueue"
            .replace("{" + "AccountNumber" + "}", localVarApiClient.escapeString(accountNumber.toString()))
            .replace("{" + "QueueName" + "}", localVarApiClient.escapeString(queueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETTagQueueValidateBeforeCall(Map<String, String> tags, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tags' is set
        if (tags == null) {
            throw new ApiException("Missing the required parameter 'tags' when calling gETTagQueue(Async)");
        }

        // verify the required parameter 'accountNumber' is set
        if (accountNumber == null) {
            throw new ApiException("Missing the required parameter 'accountNumber' when calling gETTagQueue(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling gETTagQueue(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETTagQueue(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETTagQueue(Async)");
        }

        return gETTagQueueCall(tags, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Add cost allocation tags to the specified Amazon SQS queue. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html\&quot;&gt;Tagging Your Amazon SQS Queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you use queue tags, keep the following guidelines in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Adding more than 50 tags to a queue isn&#39;t recommended.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags don&#39;t have any semantic meaning. Amazon SQS interprets tags as character strings.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags are case-sensitive.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A new tag with a key identical to that of an existing tag overwrites the existing tag.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For a full list of tag restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-limits.html#limits-queues\&quot;&gt;Quotas related to queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param tags The list of tags to be added to the specified queue. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void gETTagQueue(Map<String, String> tags, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETTagQueueWithHttpInfo(tags, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Add cost allocation tags to the specified Amazon SQS queue. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html\&quot;&gt;Tagging Your Amazon SQS Queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you use queue tags, keep the following guidelines in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Adding more than 50 tags to a queue isn&#39;t recommended.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags don&#39;t have any semantic meaning. Amazon SQS interprets tags as character strings.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags are case-sensitive.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A new tag with a key identical to that of an existing tag overwrites the existing tag.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For a full list of tag restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-limits.html#limits-queues\&quot;&gt;Quotas related to queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param tags The list of tags to be added to the specified queue. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETTagQueueWithHttpInfo(Map<String, String> tags, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETTagQueueValidateBeforeCall(tags, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Add cost allocation tags to the specified Amazon SQS queue. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html\&quot;&gt;Tagging Your Amazon SQS Queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you use queue tags, keep the following guidelines in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Adding more than 50 tags to a queue isn&#39;t recommended.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags don&#39;t have any semantic meaning. Amazon SQS interprets tags as character strings.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags are case-sensitive.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A new tag with a key identical to that of an existing tag overwrites the existing tag.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For a full list of tag restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-limits.html#limits-queues\&quot;&gt;Quotas related to queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param tags The list of tags to be added to the specified queue. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETTagQueueAsync(Map<String, String> tags, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETTagQueueValidateBeforeCall(tags, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETUntagQueue
     * @param tagKeys The list of tags to be removed from the specified queue. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUntagQueueCall(List<String> tagKeys, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{AccountNumber}/{QueueName}/#Action=UntagQueue"
            .replace("{" + "AccountNumber" + "}", localVarApiClient.escapeString(accountNumber.toString()))
            .replace("{" + "QueueName" + "}", localVarApiClient.escapeString(queueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tagKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "TagKeys", tagKeys));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETUntagQueueValidateBeforeCall(List<String> tagKeys, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tagKeys' is set
        if (tagKeys == null) {
            throw new ApiException("Missing the required parameter 'tagKeys' when calling gETUntagQueue(Async)");
        }

        // verify the required parameter 'accountNumber' is set
        if (accountNumber == null) {
            throw new ApiException("Missing the required parameter 'accountNumber' when calling gETUntagQueue(Async)");
        }

        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling gETUntagQueue(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETUntagQueue(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETUntagQueue(Async)");
        }

        return gETUntagQueueCall(tagKeys, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Remove cost allocation tags from the specified Amazon SQS queue. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html\&quot;&gt;Tagging Your Amazon SQS Queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param tagKeys The list of tags to be removed from the specified queue. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void gETUntagQueue(List<String> tagKeys, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETUntagQueueWithHttpInfo(tagKeys, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Remove cost allocation tags from the specified Amazon SQS queue. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html\&quot;&gt;Tagging Your Amazon SQS Queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param tagKeys The list of tags to be removed from the specified queue. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETUntagQueueWithHttpInfo(List<String> tagKeys, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETUntagQueueValidateBeforeCall(tagKeys, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Remove cost allocation tags from the specified Amazon SQS queue. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html\&quot;&gt;Tagging Your Amazon SQS Queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param tagKeys The list of tags to be removed from the specified queue. (required)
     * @param accountNumber The AWS account number (required)
     * @param queueName The name of the queue (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUntagQueueAsync(List<String> tagKeys, Integer accountNumber, String queueName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETUntagQueueValidateBeforeCall(tagKeys, accountNumber, queueName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTAddPermission
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addPermissionRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OverLimit </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAddPermissionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddPermissionRequest addPermissionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addPermissionRequest;

        // create path and map variables
        String localVarPath = "/#Action=AddPermission";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTAddPermissionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddPermissionRequest addPermissionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTAddPermission(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTAddPermission(Async)");
        }

        return pOSTAddPermissionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addPermissionRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds a permission to a queue for a specific &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/glos-chap.html#P\&quot;&gt;principal&lt;/a&gt;. This allows sharing access to the queue.&lt;/p&gt; &lt;p&gt;When you create a queue, you have full control access rights for the queue. Only you, the owner of the queue, can grant or deny permissions to the queue. For more information about these permissions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-writing-an-sqs-policy.html#write-messages-to-shared-queue\&quot;&gt;Allow Developers to Write Messages to a Shared Queue&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AddPermission&lt;/code&gt; generates a policy for you. You can use &lt;code&gt; &lt;a&gt;SetQueueAttributes&lt;/a&gt; &lt;/code&gt; to upload your policy. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-creating-custom-policies.html\&quot;&gt;Using Custom Policies with the Amazon SQS Access Policy Language&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An Amazon SQS policy can have a maximum of seven actions per statement.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To remove the ability to change queue permissions, you must deny permission to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetQueueAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon SQS &lt;code&gt;AddPermission&lt;/code&gt; does not support adding a non-account principal.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addPermissionRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OverLimit </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTAddPermission(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddPermissionRequest addPermissionRequest) throws ApiException {
        pOSTAddPermissionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addPermissionRequest);
    }

    /**
     * 
     * &lt;p&gt;Adds a permission to a queue for a specific &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/glos-chap.html#P\&quot;&gt;principal&lt;/a&gt;. This allows sharing access to the queue.&lt;/p&gt; &lt;p&gt;When you create a queue, you have full control access rights for the queue. Only you, the owner of the queue, can grant or deny permissions to the queue. For more information about these permissions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-writing-an-sqs-policy.html#write-messages-to-shared-queue\&quot;&gt;Allow Developers to Write Messages to a Shared Queue&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AddPermission&lt;/code&gt; generates a policy for you. You can use &lt;code&gt; &lt;a&gt;SetQueueAttributes&lt;/a&gt; &lt;/code&gt; to upload your policy. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-creating-custom-policies.html\&quot;&gt;Using Custom Policies with the Amazon SQS Access Policy Language&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An Amazon SQS policy can have a maximum of seven actions per statement.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To remove the ability to change queue permissions, you must deny permission to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetQueueAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon SQS &lt;code&gt;AddPermission&lt;/code&gt; does not support adding a non-account principal.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addPermissionRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OverLimit </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTAddPermissionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddPermissionRequest addPermissionRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTAddPermissionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addPermissionRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds a permission to a queue for a specific &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/glos-chap.html#P\&quot;&gt;principal&lt;/a&gt;. This allows sharing access to the queue.&lt;/p&gt; &lt;p&gt;When you create a queue, you have full control access rights for the queue. Only you, the owner of the queue, can grant or deny permissions to the queue. For more information about these permissions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-writing-an-sqs-policy.html#write-messages-to-shared-queue\&quot;&gt;Allow Developers to Write Messages to a Shared Queue&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AddPermission&lt;/code&gt; generates a policy for you. You can use &lt;code&gt; &lt;a&gt;SetQueueAttributes&lt;/a&gt; &lt;/code&gt; to upload your policy. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-creating-custom-policies.html\&quot;&gt;Using Custom Policies with the Amazon SQS Access Policy Language&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An Amazon SQS policy can have a maximum of seven actions per statement.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To remove the ability to change queue permissions, you must deny permission to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetQueueAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon SQS &lt;code&gt;AddPermission&lt;/code&gt; does not support adding a non-account principal.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addPermissionRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OverLimit </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAddPermissionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddPermissionRequest addPermissionRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTAddPermissionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addPermissionRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCancelMessageMoveTask
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cancelMessageMoveTaskRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCancelMessageMoveTaskCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CancelMessageMoveTaskRequest cancelMessageMoveTaskRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancelMessageMoveTaskRequest;

        // create path and map variables
        String localVarPath = "/#Action=CancelMessageMoveTask";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCancelMessageMoveTaskValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CancelMessageMoveTaskRequest cancelMessageMoveTaskRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCancelMessageMoveTask(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCancelMessageMoveTask(Async)");
        }

        return pOSTCancelMessageMoveTaskCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cancelMessageMoveTaskRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt;Cancels a specified message movement task. A message movement can only be cancelled when the current status is RUNNING. Cancelling a message movement task does not revert the messages that have already been moved. It can only stop the messages that have not been moved yet.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;This action is currently limited to supporting message redrive from &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;dead-letter queues (DLQs)&lt;/a&gt; only. In this context, the source queue is the dead-letter queue (DLQ), while the destination queue can be the original source queue (from which the messages were driven to the dead-letter-queue), or a custom destination queue. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Currently, only standard queues are supported.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Only one active message movement task is supported per queue at any given time.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cancelMessageMoveTaskRequest  (optional)
     * @return CancelMessageMoveTaskResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public CancelMessageMoveTaskResult pOSTCancelMessageMoveTask(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CancelMessageMoveTaskRequest cancelMessageMoveTaskRequest) throws ApiException {
        ApiResponse<CancelMessageMoveTaskResult> localVarResp = pOSTCancelMessageMoveTaskWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cancelMessageMoveTaskRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Cancels a specified message movement task. A message movement can only be cancelled when the current status is RUNNING. Cancelling a message movement task does not revert the messages that have already been moved. It can only stop the messages that have not been moved yet.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;This action is currently limited to supporting message redrive from &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;dead-letter queues (DLQs)&lt;/a&gt; only. In this context, the source queue is the dead-letter queue (DLQ), while the destination queue can be the original source queue (from which the messages were driven to the dead-letter-queue), or a custom destination queue. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Currently, only standard queues are supported.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Only one active message movement task is supported per queue at any given time.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cancelMessageMoveTaskRequest  (optional)
     * @return ApiResponse&lt;CancelMessageMoveTaskResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CancelMessageMoveTaskResult> pOSTCancelMessageMoveTaskWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CancelMessageMoveTaskRequest cancelMessageMoveTaskRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTCancelMessageMoveTaskValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cancelMessageMoveTaskRequest, null);
        Type localVarReturnType = new TypeToken<CancelMessageMoveTaskResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Cancels a specified message movement task. A message movement can only be cancelled when the current status is RUNNING. Cancelling a message movement task does not revert the messages that have already been moved. It can only stop the messages that have not been moved yet.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;This action is currently limited to supporting message redrive from &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;dead-letter queues (DLQs)&lt;/a&gt; only. In this context, the source queue is the dead-letter queue (DLQ), while the destination queue can be the original source queue (from which the messages were driven to the dead-letter-queue), or a custom destination queue. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Currently, only standard queues are supported.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Only one active message movement task is supported per queue at any given time.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cancelMessageMoveTaskRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCancelMessageMoveTaskAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CancelMessageMoveTaskRequest cancelMessageMoveTaskRequest, final ApiCallback<CancelMessageMoveTaskResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCancelMessageMoveTaskValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cancelMessageMoveTaskRequest, _callback);
        Type localVarReturnType = new TypeToken<CancelMessageMoveTaskResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTChangeMessageVisibility
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param changeMessageVisibilityRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> MessageNotInflight </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReceiptHandleIsInvalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTChangeMessageVisibilityCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ChangeMessageVisibilityRequest changeMessageVisibilityRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeMessageVisibilityRequest;

        // create path and map variables
        String localVarPath = "/#Action=ChangeMessageVisibility";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTChangeMessageVisibilityValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ChangeMessageVisibilityRequest changeMessageVisibilityRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTChangeMessageVisibility(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTChangeMessageVisibility(Async)");
        }

        return pOSTChangeMessageVisibilityCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, changeMessageVisibilityRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt;Changes the visibility timeout of a specified message in a queue to a new value. The default visibility timeout for a message is 30 seconds. The minimum is 0 seconds. The maximum is 12 hours. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html\&quot;&gt;Visibility Timeout&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For example, if the default timeout for a queue is 60 seconds, 15 seconds have elapsed since you received the message, and you send a ChangeMessageVisibility call with &lt;code&gt;VisibilityTimeout&lt;/code&gt; set to 10 seconds, the 10 seconds begin to count from the time that you make the &lt;code&gt;ChangeMessageVisibility&lt;/code&gt; call. Thus, any attempt to change the visibility timeout or to delete that message 10 seconds after you initially change the visibility timeout (a total of 25 seconds) might result in an error.&lt;/p&gt; &lt;p&gt;An Amazon SQS message has three basic states:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Sent to a queue by a producer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Received from the queue by a consumer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deleted from the queue.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;A message is considered to be &lt;i&gt;stored&lt;/i&gt; after it is sent to a queue by a producer, but not yet received from the queue by a consumer (that is, between states 1 and 2). There is no limit to the number of stored messages. A message is considered to be &lt;i&gt;in flight&lt;/i&gt; after it is received from a queue by a consumer, but not yet deleted from the queue (that is, between states 2 and 3). There is a limit to the number of in flight messages.&lt;/p&gt; &lt;p&gt;Limits that apply to in flight messages are unrelated to the &lt;i&gt;unlimited&lt;/i&gt; number of stored messages.&lt;/p&gt; &lt;p&gt;For most standard queues (depending on queue traffic and message backlog), there can be a maximum of approximately 120,000 in flight messages (received from a queue by a consumer, but not yet deleted from the queue). If you reach this limit, Amazon SQS returns the &lt;code&gt;OverLimit&lt;/code&gt; error message. To avoid reaching the limit, you should delete messages from the queue after they&#39;re processed. You can also increase the number of queues you use to process your messages. To request a limit increase, &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/case/create?issueType&#x3D;service-limit-increase&amp;amp;limitType&#x3D;service-code-sqs\&quot;&gt;file a support request&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For FIFO queues, there can be a maximum of 20,000 in flight messages (received from a queue by a consumer, but not yet deleted from the queue). If you reach this limit, Amazon SQS returns no error messages.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you attempt to set the &lt;code&gt;VisibilityTimeout&lt;/code&gt; to a value greater than the maximum time left, Amazon SQS returns an error. Amazon SQS doesn&#39;t automatically recalculate and increase the timeout to the maximum remaining time.&lt;/p&gt; &lt;p&gt;Unlike with a queue, when you change the visibility timeout for a specific message the timeout value is applied immediately but isn&#39;t saved in memory for that message. If you don&#39;t delete a message after it is received, the visibility timeout for the message reverts to the original timeout value (not to the value you set using the &lt;code&gt;ChangeMessageVisibility&lt;/code&gt; action) the next time the message is received.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param changeMessageVisibilityRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> MessageNotInflight </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReceiptHandleIsInvalid </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTChangeMessageVisibility(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ChangeMessageVisibilityRequest changeMessageVisibilityRequest) throws ApiException {
        pOSTChangeMessageVisibilityWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, changeMessageVisibilityRequest);
    }

    /**
     * 
     * &lt;p&gt;Changes the visibility timeout of a specified message in a queue to a new value. The default visibility timeout for a message is 30 seconds. The minimum is 0 seconds. The maximum is 12 hours. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html\&quot;&gt;Visibility Timeout&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For example, if the default timeout for a queue is 60 seconds, 15 seconds have elapsed since you received the message, and you send a ChangeMessageVisibility call with &lt;code&gt;VisibilityTimeout&lt;/code&gt; set to 10 seconds, the 10 seconds begin to count from the time that you make the &lt;code&gt;ChangeMessageVisibility&lt;/code&gt; call. Thus, any attempt to change the visibility timeout or to delete that message 10 seconds after you initially change the visibility timeout (a total of 25 seconds) might result in an error.&lt;/p&gt; &lt;p&gt;An Amazon SQS message has three basic states:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Sent to a queue by a producer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Received from the queue by a consumer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deleted from the queue.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;A message is considered to be &lt;i&gt;stored&lt;/i&gt; after it is sent to a queue by a producer, but not yet received from the queue by a consumer (that is, between states 1 and 2). There is no limit to the number of stored messages. A message is considered to be &lt;i&gt;in flight&lt;/i&gt; after it is received from a queue by a consumer, but not yet deleted from the queue (that is, between states 2 and 3). There is a limit to the number of in flight messages.&lt;/p&gt; &lt;p&gt;Limits that apply to in flight messages are unrelated to the &lt;i&gt;unlimited&lt;/i&gt; number of stored messages.&lt;/p&gt; &lt;p&gt;For most standard queues (depending on queue traffic and message backlog), there can be a maximum of approximately 120,000 in flight messages (received from a queue by a consumer, but not yet deleted from the queue). If you reach this limit, Amazon SQS returns the &lt;code&gt;OverLimit&lt;/code&gt; error message. To avoid reaching the limit, you should delete messages from the queue after they&#39;re processed. You can also increase the number of queues you use to process your messages. To request a limit increase, &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/case/create?issueType&#x3D;service-limit-increase&amp;amp;limitType&#x3D;service-code-sqs\&quot;&gt;file a support request&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For FIFO queues, there can be a maximum of 20,000 in flight messages (received from a queue by a consumer, but not yet deleted from the queue). If you reach this limit, Amazon SQS returns no error messages.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you attempt to set the &lt;code&gt;VisibilityTimeout&lt;/code&gt; to a value greater than the maximum time left, Amazon SQS returns an error. Amazon SQS doesn&#39;t automatically recalculate and increase the timeout to the maximum remaining time.&lt;/p&gt; &lt;p&gt;Unlike with a queue, when you change the visibility timeout for a specific message the timeout value is applied immediately but isn&#39;t saved in memory for that message. If you don&#39;t delete a message after it is received, the visibility timeout for the message reverts to the original timeout value (not to the value you set using the &lt;code&gt;ChangeMessageVisibility&lt;/code&gt; action) the next time the message is received.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param changeMessageVisibilityRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> MessageNotInflight </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReceiptHandleIsInvalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTChangeMessageVisibilityWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ChangeMessageVisibilityRequest changeMessageVisibilityRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTChangeMessageVisibilityValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, changeMessageVisibilityRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Changes the visibility timeout of a specified message in a queue to a new value. The default visibility timeout for a message is 30 seconds. The minimum is 0 seconds. The maximum is 12 hours. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html\&quot;&gt;Visibility Timeout&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For example, if the default timeout for a queue is 60 seconds, 15 seconds have elapsed since you received the message, and you send a ChangeMessageVisibility call with &lt;code&gt;VisibilityTimeout&lt;/code&gt; set to 10 seconds, the 10 seconds begin to count from the time that you make the &lt;code&gt;ChangeMessageVisibility&lt;/code&gt; call. Thus, any attempt to change the visibility timeout or to delete that message 10 seconds after you initially change the visibility timeout (a total of 25 seconds) might result in an error.&lt;/p&gt; &lt;p&gt;An Amazon SQS message has three basic states:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Sent to a queue by a producer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Received from the queue by a consumer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deleted from the queue.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;A message is considered to be &lt;i&gt;stored&lt;/i&gt; after it is sent to a queue by a producer, but not yet received from the queue by a consumer (that is, between states 1 and 2). There is no limit to the number of stored messages. A message is considered to be &lt;i&gt;in flight&lt;/i&gt; after it is received from a queue by a consumer, but not yet deleted from the queue (that is, between states 2 and 3). There is a limit to the number of in flight messages.&lt;/p&gt; &lt;p&gt;Limits that apply to in flight messages are unrelated to the &lt;i&gt;unlimited&lt;/i&gt; number of stored messages.&lt;/p&gt; &lt;p&gt;For most standard queues (depending on queue traffic and message backlog), there can be a maximum of approximately 120,000 in flight messages (received from a queue by a consumer, but not yet deleted from the queue). If you reach this limit, Amazon SQS returns the &lt;code&gt;OverLimit&lt;/code&gt; error message. To avoid reaching the limit, you should delete messages from the queue after they&#39;re processed. You can also increase the number of queues you use to process your messages. To request a limit increase, &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/support/home#/case/create?issueType&#x3D;service-limit-increase&amp;amp;limitType&#x3D;service-code-sqs\&quot;&gt;file a support request&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For FIFO queues, there can be a maximum of 20,000 in flight messages (received from a queue by a consumer, but not yet deleted from the queue). If you reach this limit, Amazon SQS returns no error messages.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you attempt to set the &lt;code&gt;VisibilityTimeout&lt;/code&gt; to a value greater than the maximum time left, Amazon SQS returns an error. Amazon SQS doesn&#39;t automatically recalculate and increase the timeout to the maximum remaining time.&lt;/p&gt; &lt;p&gt;Unlike with a queue, when you change the visibility timeout for a specific message the timeout value is applied immediately but isn&#39;t saved in memory for that message. If you don&#39;t delete a message after it is received, the visibility timeout for the message reverts to the original timeout value (not to the value you set using the &lt;code&gt;ChangeMessageVisibility&lt;/code&gt; action) the next time the message is received.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param changeMessageVisibilityRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> MessageNotInflight </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReceiptHandleIsInvalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTChangeMessageVisibilityAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ChangeMessageVisibilityRequest changeMessageVisibilityRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTChangeMessageVisibilityValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, changeMessageVisibilityRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTChangeMessageVisibilityBatch
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param changeMessageVisibilityBatchRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEntriesInBatchRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EmptyBatchRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BatchEntryIdsNotDistinct </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidBatchEntryId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTChangeMessageVisibilityBatchCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ChangeMessageVisibilityBatchRequest changeMessageVisibilityBatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeMessageVisibilityBatchRequest;

        // create path and map variables
        String localVarPath = "/#Action=ChangeMessageVisibilityBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTChangeMessageVisibilityBatchValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ChangeMessageVisibilityBatchRequest changeMessageVisibilityBatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTChangeMessageVisibilityBatch(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTChangeMessageVisibilityBatch(Async)");
        }

        return pOSTChangeMessageVisibilityBatchCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, changeMessageVisibilityBatchRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt;Changes the visibility timeout of multiple messages. This is a batch version of &lt;code&gt; &lt;a&gt;ChangeMessageVisibility&lt;/a&gt;.&lt;/code&gt; The result of the action on each message is reported individually in the response. You can send up to 10 &lt;code&gt; &lt;a&gt;ChangeMessageVisibility&lt;/a&gt; &lt;/code&gt; requests with each &lt;code&gt;ChangeMessageVisibilityBatch&lt;/code&gt; action.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param changeMessageVisibilityBatchRequest  (optional)
     * @return ChangeMessageVisibilityBatchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEntriesInBatchRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EmptyBatchRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BatchEntryIdsNotDistinct </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidBatchEntryId </td><td>  -  </td></tr>
     </table>
     */
    public ChangeMessageVisibilityBatchResult pOSTChangeMessageVisibilityBatch(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ChangeMessageVisibilityBatchRequest changeMessageVisibilityBatchRequest) throws ApiException {
        ApiResponse<ChangeMessageVisibilityBatchResult> localVarResp = pOSTChangeMessageVisibilityBatchWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, changeMessageVisibilityBatchRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Changes the visibility timeout of multiple messages. This is a batch version of &lt;code&gt; &lt;a&gt;ChangeMessageVisibility&lt;/a&gt;.&lt;/code&gt; The result of the action on each message is reported individually in the response. You can send up to 10 &lt;code&gt; &lt;a&gt;ChangeMessageVisibility&lt;/a&gt; &lt;/code&gt; requests with each &lt;code&gt;ChangeMessageVisibilityBatch&lt;/code&gt; action.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param changeMessageVisibilityBatchRequest  (optional)
     * @return ApiResponse&lt;ChangeMessageVisibilityBatchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEntriesInBatchRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EmptyBatchRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BatchEntryIdsNotDistinct </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidBatchEntryId </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ChangeMessageVisibilityBatchResult> pOSTChangeMessageVisibilityBatchWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ChangeMessageVisibilityBatchRequest changeMessageVisibilityBatchRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTChangeMessageVisibilityBatchValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, changeMessageVisibilityBatchRequest, null);
        Type localVarReturnType = new TypeToken<ChangeMessageVisibilityBatchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Changes the visibility timeout of multiple messages. This is a batch version of &lt;code&gt; &lt;a&gt;ChangeMessageVisibility&lt;/a&gt;.&lt;/code&gt; The result of the action on each message is reported individually in the response. You can send up to 10 &lt;code&gt; &lt;a&gt;ChangeMessageVisibility&lt;/a&gt; &lt;/code&gt; requests with each &lt;code&gt;ChangeMessageVisibilityBatch&lt;/code&gt; action.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param changeMessageVisibilityBatchRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEntriesInBatchRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EmptyBatchRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BatchEntryIdsNotDistinct </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidBatchEntryId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTChangeMessageVisibilityBatchAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ChangeMessageVisibilityBatchRequest changeMessageVisibilityBatchRequest, final ApiCallback<ChangeMessageVisibilityBatchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTChangeMessageVisibilityBatchValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, changeMessageVisibilityBatchRequest, _callback);
        Type localVarReturnType = new TypeToken<ChangeMessageVisibilityBatchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateQueue
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createQueueRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDeletedRecently </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> QueueNameExists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateQueueCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateQueueRequest createQueueRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createQueueRequest;

        // create path and map variables
        String localVarPath = "/#Action=CreateQueue";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateQueueValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateQueueRequest createQueueRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateQueue(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateQueue(Async)");
        }

        return pOSTCreateQueueCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createQueueRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new standard or FIFO queue. You can pass one or more attributes in the request. Keep the following in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify the &lt;code&gt;FifoQueue&lt;/code&gt; attribute, Amazon SQS creates a standard queue.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can&#39;t change the queue type after you create it and you can&#39;t convert an existing standard queue into a FIFO queue. You must either create a new FIFO queue for your application or delete your existing standard queue and recreate it as a FIFO queue. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html#FIFO-queues-moving\&quot;&gt;Moving From a Standard Queue to a FIFO Queue&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t provide a value for an attribute, the queue is created with the default value for the attribute.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you delete a queue, you must wait at least 60 seconds before creating a queue with the same name.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To successfully create a new queue, you must provide a queue name that adheres to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/limits-queues.html\&quot;&gt;limits related to queues&lt;/a&gt; and is unique within the scope of your queues.&lt;/p&gt; &lt;note&gt; &lt;p&gt;After you create a queue, you must wait at least one second after the queue is created to be able to use the queue.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;To get the queue URL, use the &lt;code&gt; &lt;a&gt;GetQueueUrl&lt;/a&gt; &lt;/code&gt; action. &lt;code&gt; &lt;a&gt;GetQueueUrl&lt;/a&gt; &lt;/code&gt; requires only the &lt;code&gt;QueueName&lt;/code&gt; parameter. be aware of existing queue names:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you provide the name of an existing queue along with the exact names and values of all the queue&#39;s attributes, &lt;code&gt;CreateQueue&lt;/code&gt; returns the queue URL for the existing queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the queue name, attribute names, or attribute values don&#39;t match an existing queue, &lt;code&gt;CreateQueue&lt;/code&gt; returns an error.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createQueueRequest  (optional)
     * @return CreateQueueResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDeletedRecently </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> QueueNameExists </td><td>  -  </td></tr>
     </table>
     */
    public CreateQueueResult pOSTCreateQueue(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateQueueRequest createQueueRequest) throws ApiException {
        ApiResponse<CreateQueueResult> localVarResp = pOSTCreateQueueWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createQueueRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new standard or FIFO queue. You can pass one or more attributes in the request. Keep the following in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify the &lt;code&gt;FifoQueue&lt;/code&gt; attribute, Amazon SQS creates a standard queue.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can&#39;t change the queue type after you create it and you can&#39;t convert an existing standard queue into a FIFO queue. You must either create a new FIFO queue for your application or delete your existing standard queue and recreate it as a FIFO queue. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html#FIFO-queues-moving\&quot;&gt;Moving From a Standard Queue to a FIFO Queue&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t provide a value for an attribute, the queue is created with the default value for the attribute.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you delete a queue, you must wait at least 60 seconds before creating a queue with the same name.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To successfully create a new queue, you must provide a queue name that adheres to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/limits-queues.html\&quot;&gt;limits related to queues&lt;/a&gt; and is unique within the scope of your queues.&lt;/p&gt; &lt;note&gt; &lt;p&gt;After you create a queue, you must wait at least one second after the queue is created to be able to use the queue.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;To get the queue URL, use the &lt;code&gt; &lt;a&gt;GetQueueUrl&lt;/a&gt; &lt;/code&gt; action. &lt;code&gt; &lt;a&gt;GetQueueUrl&lt;/a&gt; &lt;/code&gt; requires only the &lt;code&gt;QueueName&lt;/code&gt; parameter. be aware of existing queue names:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you provide the name of an existing queue along with the exact names and values of all the queue&#39;s attributes, &lt;code&gt;CreateQueue&lt;/code&gt; returns the queue URL for the existing queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the queue name, attribute names, or attribute values don&#39;t match an existing queue, &lt;code&gt;CreateQueue&lt;/code&gt; returns an error.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createQueueRequest  (optional)
     * @return ApiResponse&lt;CreateQueueResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDeletedRecently </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> QueueNameExists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateQueueResult> pOSTCreateQueueWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateQueueRequest createQueueRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateQueueValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createQueueRequest, null);
        Type localVarReturnType = new TypeToken<CreateQueueResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new standard or FIFO queue. You can pass one or more attributes in the request. Keep the following in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify the &lt;code&gt;FifoQueue&lt;/code&gt; attribute, Amazon SQS creates a standard queue.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can&#39;t change the queue type after you create it and you can&#39;t convert an existing standard queue into a FIFO queue. You must either create a new FIFO queue for your application or delete your existing standard queue and recreate it as a FIFO queue. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html#FIFO-queues-moving\&quot;&gt;Moving From a Standard Queue to a FIFO Queue&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t provide a value for an attribute, the queue is created with the default value for the attribute.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you delete a queue, you must wait at least 60 seconds before creating a queue with the same name.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To successfully create a new queue, you must provide a queue name that adheres to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/limits-queues.html\&quot;&gt;limits related to queues&lt;/a&gt; and is unique within the scope of your queues.&lt;/p&gt; &lt;note&gt; &lt;p&gt;After you create a queue, you must wait at least one second after the queue is created to be able to use the queue.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;To get the queue URL, use the &lt;code&gt; &lt;a&gt;GetQueueUrl&lt;/a&gt; &lt;/code&gt; action. &lt;code&gt; &lt;a&gt;GetQueueUrl&lt;/a&gt; &lt;/code&gt; requires only the &lt;code&gt;QueueName&lt;/code&gt; parameter. be aware of existing queue names:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you provide the name of an existing queue along with the exact names and values of all the queue&#39;s attributes, &lt;code&gt;CreateQueue&lt;/code&gt; returns the queue URL for the existing queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the queue name, attribute names, or attribute values don&#39;t match an existing queue, &lt;code&gt;CreateQueue&lt;/code&gt; returns an error.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createQueueRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDeletedRecently </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> QueueNameExists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateQueueAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateQueueRequest createQueueRequest, final ApiCallback<CreateQueueResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateQueueValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createQueueRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateQueueResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteMessage
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteMessageRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidIdFormat </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReceiptHandleIsInvalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteMessageCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteMessageRequest deleteMessageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteMessageRequest;

        // create path and map variables
        String localVarPath = "/#Action=DeleteMessage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteMessageValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteMessageRequest deleteMessageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteMessage(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteMessage(Async)");
        }

        return pOSTDeleteMessageCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteMessageRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified message from the specified queue. To select the message to delete, use the &lt;code&gt;ReceiptHandle&lt;/code&gt; of the message (&lt;i&gt;not&lt;/i&gt; the &lt;code&gt;MessageId&lt;/code&gt; which you receive when you send the message). Amazon SQS can delete a message from a queue even if a visibility timeout setting causes the message to be locked by another consumer. Amazon SQS automatically deletes messages left in a queue longer than the retention period configured for the queue. &lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;ReceiptHandle&lt;/code&gt; is associated with a &lt;i&gt;specific instance&lt;/i&gt; of receiving a message. If you receive a message more than once, the &lt;code&gt;ReceiptHandle&lt;/code&gt; is different each time you receive a message. When you use the &lt;code&gt;DeleteMessage&lt;/code&gt; action, you must provide the most recently received &lt;code&gt;ReceiptHandle&lt;/code&gt; for the message (otherwise, the request succeeds, but the message will not be deleted).&lt;/p&gt; &lt;p&gt;For standard queues, it is possible to receive a message even after you delete it. This might happen on rare occasions if one of the servers which stores a copy of the message is unavailable when you send the request to delete the message. The copy remains on the server and might be returned to you during a subsequent receive request. You should ensure that your application is idempotent, so that receiving a message more than once does not cause issues.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteMessageRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidIdFormat </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReceiptHandleIsInvalid </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTDeleteMessage(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteMessageRequest deleteMessageRequest) throws ApiException {
        pOSTDeleteMessageWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteMessageRequest);
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified message from the specified queue. To select the message to delete, use the &lt;code&gt;ReceiptHandle&lt;/code&gt; of the message (&lt;i&gt;not&lt;/i&gt; the &lt;code&gt;MessageId&lt;/code&gt; which you receive when you send the message). Amazon SQS can delete a message from a queue even if a visibility timeout setting causes the message to be locked by another consumer. Amazon SQS automatically deletes messages left in a queue longer than the retention period configured for the queue. &lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;ReceiptHandle&lt;/code&gt; is associated with a &lt;i&gt;specific instance&lt;/i&gt; of receiving a message. If you receive a message more than once, the &lt;code&gt;ReceiptHandle&lt;/code&gt; is different each time you receive a message. When you use the &lt;code&gt;DeleteMessage&lt;/code&gt; action, you must provide the most recently received &lt;code&gt;ReceiptHandle&lt;/code&gt; for the message (otherwise, the request succeeds, but the message will not be deleted).&lt;/p&gt; &lt;p&gt;For standard queues, it is possible to receive a message even after you delete it. This might happen on rare occasions if one of the servers which stores a copy of the message is unavailable when you send the request to delete the message. The copy remains on the server and might be returned to you during a subsequent receive request. You should ensure that your application is idempotent, so that receiving a message more than once does not cause issues.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteMessageRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidIdFormat </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReceiptHandleIsInvalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTDeleteMessageWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteMessageRequest deleteMessageRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteMessageValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteMessageRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified message from the specified queue. To select the message to delete, use the &lt;code&gt;ReceiptHandle&lt;/code&gt; of the message (&lt;i&gt;not&lt;/i&gt; the &lt;code&gt;MessageId&lt;/code&gt; which you receive when you send the message). Amazon SQS can delete a message from a queue even if a visibility timeout setting causes the message to be locked by another consumer. Amazon SQS automatically deletes messages left in a queue longer than the retention period configured for the queue. &lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;ReceiptHandle&lt;/code&gt; is associated with a &lt;i&gt;specific instance&lt;/i&gt; of receiving a message. If you receive a message more than once, the &lt;code&gt;ReceiptHandle&lt;/code&gt; is different each time you receive a message. When you use the &lt;code&gt;DeleteMessage&lt;/code&gt; action, you must provide the most recently received &lt;code&gt;ReceiptHandle&lt;/code&gt; for the message (otherwise, the request succeeds, but the message will not be deleted).&lt;/p&gt; &lt;p&gt;For standard queues, it is possible to receive a message even after you delete it. This might happen on rare occasions if one of the servers which stores a copy of the message is unavailable when you send the request to delete the message. The copy remains on the server and might be returned to you during a subsequent receive request. You should ensure that your application is idempotent, so that receiving a message more than once does not cause issues.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteMessageRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidIdFormat </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReceiptHandleIsInvalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteMessageAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteMessageRequest deleteMessageRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteMessageValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteMessageRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteMessageBatch
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteMessageBatchRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEntriesInBatchRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EmptyBatchRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BatchEntryIdsNotDistinct </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidBatchEntryId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteMessageBatchCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteMessageBatchRequest deleteMessageBatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteMessageBatchRequest;

        // create path and map variables
        String localVarPath = "/#Action=DeleteMessageBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteMessageBatchValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteMessageBatchRequest deleteMessageBatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteMessageBatch(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteMessageBatch(Async)");
        }

        return pOSTDeleteMessageBatchCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteMessageBatchRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes up to ten messages from the specified queue. This is a batch version of &lt;code&gt; &lt;a&gt;DeleteMessage&lt;/a&gt;.&lt;/code&gt; The result of the action on each message is reported individually in the response.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteMessageBatchRequest  (optional)
     * @return DeleteMessageBatchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEntriesInBatchRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EmptyBatchRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BatchEntryIdsNotDistinct </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidBatchEntryId </td><td>  -  </td></tr>
     </table>
     */
    public DeleteMessageBatchResult pOSTDeleteMessageBatch(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteMessageBatchRequest deleteMessageBatchRequest) throws ApiException {
        ApiResponse<DeleteMessageBatchResult> localVarResp = pOSTDeleteMessageBatchWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteMessageBatchRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes up to ten messages from the specified queue. This is a batch version of &lt;code&gt; &lt;a&gt;DeleteMessage&lt;/a&gt;.&lt;/code&gt; The result of the action on each message is reported individually in the response.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteMessageBatchRequest  (optional)
     * @return ApiResponse&lt;DeleteMessageBatchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEntriesInBatchRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EmptyBatchRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BatchEntryIdsNotDistinct </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidBatchEntryId </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteMessageBatchResult> pOSTDeleteMessageBatchWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteMessageBatchRequest deleteMessageBatchRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteMessageBatchValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteMessageBatchRequest, null);
        Type localVarReturnType = new TypeToken<DeleteMessageBatchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes up to ten messages from the specified queue. This is a batch version of &lt;code&gt; &lt;a&gt;DeleteMessage&lt;/a&gt;.&lt;/code&gt; The result of the action on each message is reported individually in the response.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteMessageBatchRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEntriesInBatchRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EmptyBatchRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BatchEntryIdsNotDistinct </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidBatchEntryId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteMessageBatchAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteMessageBatchRequest deleteMessageBatchRequest, final ApiCallback<DeleteMessageBatchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteMessageBatchValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteMessageBatchRequest, _callback);
        Type localVarReturnType = new TypeToken<DeleteMessageBatchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteQueue
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteQueueRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteQueueCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteQueueRequest deleteQueueRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteQueueRequest;

        // create path and map variables
        String localVarPath = "/#Action=DeleteQueue";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteQueueValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteQueueRequest deleteQueueRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteQueue(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteQueue(Async)");
        }

        return pOSTDeleteQueueCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteQueueRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the queue specified by the &lt;code&gt;QueueUrl&lt;/code&gt;, regardless of the queue&#39;s contents.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Be careful with the &lt;code&gt;DeleteQueue&lt;/code&gt; action: When you delete a queue, any messages in the queue are no longer available. &lt;/p&gt; &lt;/important&gt; &lt;p&gt;When you delete a queue, the deletion process takes up to 60 seconds. Requests you send involving that queue during the 60 seconds might succeed. For example, a &lt;code&gt; &lt;a&gt;SendMessage&lt;/a&gt; &lt;/code&gt; request might succeed, but after 60 seconds the queue and the message you sent no longer exist.&lt;/p&gt; &lt;p&gt;When you delete a queue, you must wait at least 60 seconds before creating a queue with the same name.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;The delete operation uses the HTTP &lt;code&gt;GET&lt;/code&gt; verb.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteQueueRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTDeleteQueue(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteQueueRequest deleteQueueRequest) throws ApiException {
        pOSTDeleteQueueWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteQueueRequest);
    }

    /**
     * 
     * &lt;p&gt;Deletes the queue specified by the &lt;code&gt;QueueUrl&lt;/code&gt;, regardless of the queue&#39;s contents.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Be careful with the &lt;code&gt;DeleteQueue&lt;/code&gt; action: When you delete a queue, any messages in the queue are no longer available. &lt;/p&gt; &lt;/important&gt; &lt;p&gt;When you delete a queue, the deletion process takes up to 60 seconds. Requests you send involving that queue during the 60 seconds might succeed. For example, a &lt;code&gt; &lt;a&gt;SendMessage&lt;/a&gt; &lt;/code&gt; request might succeed, but after 60 seconds the queue and the message you sent no longer exist.&lt;/p&gt; &lt;p&gt;When you delete a queue, you must wait at least 60 seconds before creating a queue with the same name.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;The delete operation uses the HTTP &lt;code&gt;GET&lt;/code&gt; verb.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteQueueRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTDeleteQueueWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteQueueRequest deleteQueueRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteQueueValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteQueueRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the queue specified by the &lt;code&gt;QueueUrl&lt;/code&gt;, regardless of the queue&#39;s contents.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Be careful with the &lt;code&gt;DeleteQueue&lt;/code&gt; action: When you delete a queue, any messages in the queue are no longer available. &lt;/p&gt; &lt;/important&gt; &lt;p&gt;When you delete a queue, the deletion process takes up to 60 seconds. Requests you send involving that queue during the 60 seconds might succeed. For example, a &lt;code&gt; &lt;a&gt;SendMessage&lt;/a&gt; &lt;/code&gt; request might succeed, but after 60 seconds the queue and the message you sent no longer exist.&lt;/p&gt; &lt;p&gt;When you delete a queue, you must wait at least 60 seconds before creating a queue with the same name.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;The delete operation uses the HTTP &lt;code&gt;GET&lt;/code&gt; verb.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteQueueRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteQueueAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteQueueRequest deleteQueueRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteQueueValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteQueueRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTGetQueueAttributes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getQueueAttributesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidAttributeName </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetQueueAttributesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetQueueAttributesRequest getQueueAttributesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getQueueAttributesRequest;

        // create path and map variables
        String localVarPath = "/#Action=GetQueueAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTGetQueueAttributesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetQueueAttributesRequest getQueueAttributesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTGetQueueAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTGetQueueAttributes(Async)");
        }

        return pOSTGetQueueAttributesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getQueueAttributesRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets attributes for the specified queue.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To determine whether a queue is &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html\&quot;&gt;FIFO&lt;/a&gt;, you can check whether &lt;code&gt;QueueName&lt;/code&gt; ends with the &lt;code&gt;.fifo&lt;/code&gt; suffix.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getQueueAttributesRequest  (optional)
     * @return GetQueueAttributesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidAttributeName </td><td>  -  </td></tr>
     </table>
     */
    public GetQueueAttributesResult pOSTGetQueueAttributes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetQueueAttributesRequest getQueueAttributesRequest) throws ApiException {
        ApiResponse<GetQueueAttributesResult> localVarResp = pOSTGetQueueAttributesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getQueueAttributesRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets attributes for the specified queue.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To determine whether a queue is &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html\&quot;&gt;FIFO&lt;/a&gt;, you can check whether &lt;code&gt;QueueName&lt;/code&gt; ends with the &lt;code&gt;.fifo&lt;/code&gt; suffix.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getQueueAttributesRequest  (optional)
     * @return ApiResponse&lt;GetQueueAttributesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidAttributeName </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetQueueAttributesResult> pOSTGetQueueAttributesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetQueueAttributesRequest getQueueAttributesRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTGetQueueAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getQueueAttributesRequest, null);
        Type localVarReturnType = new TypeToken<GetQueueAttributesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets attributes for the specified queue.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To determine whether a queue is &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html\&quot;&gt;FIFO&lt;/a&gt;, you can check whether &lt;code&gt;QueueName&lt;/code&gt; ends with the &lt;code&gt;.fifo&lt;/code&gt; suffix.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getQueueAttributesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidAttributeName </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetQueueAttributesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetQueueAttributesRequest getQueueAttributesRequest, final ApiCallback<GetQueueAttributesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTGetQueueAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getQueueAttributesRequest, _callback);
        Type localVarReturnType = new TypeToken<GetQueueAttributesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTGetQueueUrl
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getQueueUrlRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDoesNotExist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetQueueUrlCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetQueueUrlRequest getQueueUrlRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getQueueUrlRequest;

        // create path and map variables
        String localVarPath = "/#Action=GetQueueUrl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTGetQueueUrlValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetQueueUrlRequest getQueueUrlRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTGetQueueUrl(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTGetQueueUrl(Async)");
        }

        return pOSTGetQueueUrlCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getQueueUrlRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the URL of an existing Amazon SQS queue.&lt;/p&gt; &lt;p&gt;To access a queue that belongs to another AWS account, use the &lt;code&gt;QueueOwnerAWSAccountId&lt;/code&gt; parameter to specify the account ID of the queue&#39;s owner. The queue&#39;s owner must grant you permission to access the queue. For more information about shared queue access, see &lt;code&gt; &lt;a&gt;AddPermission&lt;/a&gt; &lt;/code&gt; or see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-writing-an-sqs-policy.html#write-messages-to-shared-queue\&quot;&gt;Allow Developers to Write Messages to a Shared Queue&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getQueueUrlRequest  (optional)
     * @return GetQueueUrlResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDoesNotExist </td><td>  -  </td></tr>
     </table>
     */
    public GetQueueUrlResult pOSTGetQueueUrl(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetQueueUrlRequest getQueueUrlRequest) throws ApiException {
        ApiResponse<GetQueueUrlResult> localVarResp = pOSTGetQueueUrlWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getQueueUrlRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the URL of an existing Amazon SQS queue.&lt;/p&gt; &lt;p&gt;To access a queue that belongs to another AWS account, use the &lt;code&gt;QueueOwnerAWSAccountId&lt;/code&gt; parameter to specify the account ID of the queue&#39;s owner. The queue&#39;s owner must grant you permission to access the queue. For more information about shared queue access, see &lt;code&gt; &lt;a&gt;AddPermission&lt;/a&gt; &lt;/code&gt; or see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-writing-an-sqs-policy.html#write-messages-to-shared-queue\&quot;&gt;Allow Developers to Write Messages to a Shared Queue&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getQueueUrlRequest  (optional)
     * @return ApiResponse&lt;GetQueueUrlResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDoesNotExist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetQueueUrlResult> pOSTGetQueueUrlWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetQueueUrlRequest getQueueUrlRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTGetQueueUrlValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getQueueUrlRequest, null);
        Type localVarReturnType = new TypeToken<GetQueueUrlResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the URL of an existing Amazon SQS queue.&lt;/p&gt; &lt;p&gt;To access a queue that belongs to another AWS account, use the &lt;code&gt;QueueOwnerAWSAccountId&lt;/code&gt; parameter to specify the account ID of the queue&#39;s owner. The queue&#39;s owner must grant you permission to access the queue. For more information about shared queue access, see &lt;code&gt; &lt;a&gt;AddPermission&lt;/a&gt; &lt;/code&gt; or see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-writing-an-sqs-policy.html#write-messages-to-shared-queue\&quot;&gt;Allow Developers to Write Messages to a Shared Queue&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getQueueUrlRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDoesNotExist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetQueueUrlAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetQueueUrlRequest getQueueUrlRequest, final ApiCallback<GetQueueUrlResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTGetQueueUrlValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getQueueUrlRequest, _callback);
        Type localVarReturnType = new TypeToken<GetQueueUrlResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListDeadLetterSourceQueues
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listDeadLetterSourceQueuesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDoesNotExist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListDeadLetterSourceQueuesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListDeadLetterSourceQueuesRequest listDeadLetterSourceQueuesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listDeadLetterSourceQueuesRequest;

        // create path and map variables
        String localVarPath = "/#Action=ListDeadLetterSourceQueues";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListDeadLetterSourceQueuesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListDeadLetterSourceQueuesRequest listDeadLetterSourceQueuesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListDeadLetterSourceQueues(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListDeadLetterSourceQueues(Async)");
        }

        return pOSTListDeadLetterSourceQueuesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listDeadLetterSourceQueuesRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a list of your queues that have the &lt;code&gt;RedrivePolicy&lt;/code&gt; queue attribute configured with a dead-letter queue.&lt;/p&gt; &lt;p&gt; The &lt;code&gt;ListDeadLetterSourceQueues&lt;/code&gt; methods supports pagination. Set parameter &lt;code&gt;MaxResults&lt;/code&gt; in the request to specify the maximum number of results to be returned in the response. If you do not set &lt;code&gt;MaxResults&lt;/code&gt;, the response includes a maximum of 1,000 results. If you set &lt;code&gt;MaxResults&lt;/code&gt; and there are additional results to display, the response includes a value for &lt;code&gt;NextToken&lt;/code&gt;. Use &lt;code&gt;NextToken&lt;/code&gt; as a parameter in your next request to &lt;code&gt;ListDeadLetterSourceQueues&lt;/code&gt; to receive the next page of results. &lt;/p&gt; &lt;p&gt;For more information about using dead-letter queues, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;Using Amazon SQS Dead-Letter Queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listDeadLetterSourceQueuesRequest  (optional)
     * @return ListDeadLetterSourceQueuesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDoesNotExist </td><td>  -  </td></tr>
     </table>
     */
    public ListDeadLetterSourceQueuesResult pOSTListDeadLetterSourceQueues(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListDeadLetterSourceQueuesRequest listDeadLetterSourceQueuesRequest) throws ApiException {
        ApiResponse<ListDeadLetterSourceQueuesResult> localVarResp = pOSTListDeadLetterSourceQueuesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listDeadLetterSourceQueuesRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a list of your queues that have the &lt;code&gt;RedrivePolicy&lt;/code&gt; queue attribute configured with a dead-letter queue.&lt;/p&gt; &lt;p&gt; The &lt;code&gt;ListDeadLetterSourceQueues&lt;/code&gt; methods supports pagination. Set parameter &lt;code&gt;MaxResults&lt;/code&gt; in the request to specify the maximum number of results to be returned in the response. If you do not set &lt;code&gt;MaxResults&lt;/code&gt;, the response includes a maximum of 1,000 results. If you set &lt;code&gt;MaxResults&lt;/code&gt; and there are additional results to display, the response includes a value for &lt;code&gt;NextToken&lt;/code&gt;. Use &lt;code&gt;NextToken&lt;/code&gt; as a parameter in your next request to &lt;code&gt;ListDeadLetterSourceQueues&lt;/code&gt; to receive the next page of results. &lt;/p&gt; &lt;p&gt;For more information about using dead-letter queues, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;Using Amazon SQS Dead-Letter Queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listDeadLetterSourceQueuesRequest  (optional)
     * @return ApiResponse&lt;ListDeadLetterSourceQueuesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDoesNotExist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDeadLetterSourceQueuesResult> pOSTListDeadLetterSourceQueuesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListDeadLetterSourceQueuesRequest listDeadLetterSourceQueuesRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTListDeadLetterSourceQueuesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listDeadLetterSourceQueuesRequest, null);
        Type localVarReturnType = new TypeToken<ListDeadLetterSourceQueuesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a list of your queues that have the &lt;code&gt;RedrivePolicy&lt;/code&gt; queue attribute configured with a dead-letter queue.&lt;/p&gt; &lt;p&gt; The &lt;code&gt;ListDeadLetterSourceQueues&lt;/code&gt; methods supports pagination. Set parameter &lt;code&gt;MaxResults&lt;/code&gt; in the request to specify the maximum number of results to be returned in the response. If you do not set &lt;code&gt;MaxResults&lt;/code&gt;, the response includes a maximum of 1,000 results. If you set &lt;code&gt;MaxResults&lt;/code&gt; and there are additional results to display, the response includes a value for &lt;code&gt;NextToken&lt;/code&gt;. Use &lt;code&gt;NextToken&lt;/code&gt; as a parameter in your next request to &lt;code&gt;ListDeadLetterSourceQueues&lt;/code&gt; to receive the next page of results. &lt;/p&gt; &lt;p&gt;For more information about using dead-letter queues, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;Using Amazon SQS Dead-Letter Queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listDeadLetterSourceQueuesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDoesNotExist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListDeadLetterSourceQueuesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListDeadLetterSourceQueuesRequest listDeadLetterSourceQueuesRequest, final ApiCallback<ListDeadLetterSourceQueuesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListDeadLetterSourceQueuesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listDeadLetterSourceQueuesRequest, _callback);
        Type localVarReturnType = new TypeToken<ListDeadLetterSourceQueuesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListMessageMoveTasks
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listMessageMoveTasksRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListMessageMoveTasksCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListMessageMoveTasksRequest listMessageMoveTasksRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listMessageMoveTasksRequest;

        // create path and map variables
        String localVarPath = "/#Action=ListMessageMoveTasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListMessageMoveTasksValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListMessageMoveTasksRequest listMessageMoveTasksRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListMessageMoveTasks(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListMessageMoveTasks(Async)");
        }

        return pOSTListMessageMoveTasksCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listMessageMoveTasksRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets the most recent message movement tasks (up to 10) under a specific source queue.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;This action is currently limited to supporting message redrive from &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;dead-letter queues (DLQs)&lt;/a&gt; only. In this context, the source queue is the dead-letter queue (DLQ), while the destination queue can be the original source queue (from which the messages were driven to the dead-letter-queue), or a custom destination queue. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Currently, only standard queues are supported.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Only one active message movement task is supported per queue at any given time.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listMessageMoveTasksRequest  (optional)
     * @return ListMessageMoveTasksResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public ListMessageMoveTasksResult pOSTListMessageMoveTasks(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListMessageMoveTasksRequest listMessageMoveTasksRequest) throws ApiException {
        ApiResponse<ListMessageMoveTasksResult> localVarResp = pOSTListMessageMoveTasksWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listMessageMoveTasksRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets the most recent message movement tasks (up to 10) under a specific source queue.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;This action is currently limited to supporting message redrive from &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;dead-letter queues (DLQs)&lt;/a&gt; only. In this context, the source queue is the dead-letter queue (DLQ), while the destination queue can be the original source queue (from which the messages were driven to the dead-letter-queue), or a custom destination queue. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Currently, only standard queues are supported.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Only one active message movement task is supported per queue at any given time.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listMessageMoveTasksRequest  (optional)
     * @return ApiResponse&lt;ListMessageMoveTasksResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListMessageMoveTasksResult> pOSTListMessageMoveTasksWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListMessageMoveTasksRequest listMessageMoveTasksRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTListMessageMoveTasksValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listMessageMoveTasksRequest, null);
        Type localVarReturnType = new TypeToken<ListMessageMoveTasksResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets the most recent message movement tasks (up to 10) under a specific source queue.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;This action is currently limited to supporting message redrive from &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;dead-letter queues (DLQs)&lt;/a&gt; only. In this context, the source queue is the dead-letter queue (DLQ), while the destination queue can be the original source queue (from which the messages were driven to the dead-letter-queue), or a custom destination queue. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Currently, only standard queues are supported.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Only one active message movement task is supported per queue at any given time.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listMessageMoveTasksRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListMessageMoveTasksAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListMessageMoveTasksRequest listMessageMoveTasksRequest, final ApiCallback<ListMessageMoveTasksResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListMessageMoveTasksValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listMessageMoveTasksRequest, _callback);
        Type localVarReturnType = new TypeToken<ListMessageMoveTasksResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListQueueTags
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listQueueTagsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListQueueTagsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListQueueTagsRequest listQueueTagsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listQueueTagsRequest;

        // create path and map variables
        String localVarPath = "/#Action=ListQueueTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListQueueTagsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListQueueTagsRequest listQueueTagsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListQueueTags(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListQueueTags(Async)");
        }

        return pOSTListQueueTagsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listQueueTagsRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt;List all cost allocation tags added to the specified Amazon SQS queue. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html\&quot;&gt;Tagging Your Amazon SQS Queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listQueueTagsRequest  (optional)
     * @return ListQueueTagsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListQueueTagsResult pOSTListQueueTags(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListQueueTagsRequest listQueueTagsRequest) throws ApiException {
        ApiResponse<ListQueueTagsResult> localVarResp = pOSTListQueueTagsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listQueueTagsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;List all cost allocation tags added to the specified Amazon SQS queue. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html\&quot;&gt;Tagging Your Amazon SQS Queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listQueueTagsRequest  (optional)
     * @return ApiResponse&lt;ListQueueTagsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListQueueTagsResult> pOSTListQueueTagsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListQueueTagsRequest listQueueTagsRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTListQueueTagsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listQueueTagsRequest, null);
        Type localVarReturnType = new TypeToken<ListQueueTagsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;List all cost allocation tags added to the specified Amazon SQS queue. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html\&quot;&gt;Tagging Your Amazon SQS Queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listQueueTagsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListQueueTagsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListQueueTagsRequest listQueueTagsRequest, final ApiCallback<ListQueueTagsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListQueueTagsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listQueueTagsRequest, _callback);
        Type localVarReturnType = new TypeToken<ListQueueTagsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListQueues
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listQueuesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListQueuesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListQueuesRequest listQueuesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listQueuesRequest;

        // create path and map variables
        String localVarPath = "/#Action=ListQueues";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListQueuesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListQueuesRequest listQueuesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListQueues(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListQueues(Async)");
        }

        return pOSTListQueuesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listQueuesRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a list of your queues in the current region. The response includes a maximum of 1,000 results. If you specify a value for the optional &lt;code&gt;QueueNamePrefix&lt;/code&gt; parameter, only queues with a name that begins with the specified value are returned.&lt;/p&gt; &lt;p&gt; The &lt;code&gt;listQueues&lt;/code&gt; methods supports pagination. Set parameter &lt;code&gt;MaxResults&lt;/code&gt; in the request to specify the maximum number of results to be returned in the response. If you do not set &lt;code&gt;MaxResults&lt;/code&gt;, the response includes a maximum of 1,000 results. If you set &lt;code&gt;MaxResults&lt;/code&gt; and there are additional results to display, the response includes a value for &lt;code&gt;NextToken&lt;/code&gt;. Use &lt;code&gt;NextToken&lt;/code&gt; as a parameter in your next request to &lt;code&gt;listQueues&lt;/code&gt; to receive the next page of results. &lt;/p&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listQueuesRequest  (optional)
     * @return ListQueuesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListQueuesResult pOSTListQueues(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListQueuesRequest listQueuesRequest) throws ApiException {
        ApiResponse<ListQueuesResult> localVarResp = pOSTListQueuesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listQueuesRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a list of your queues in the current region. The response includes a maximum of 1,000 results. If you specify a value for the optional &lt;code&gt;QueueNamePrefix&lt;/code&gt; parameter, only queues with a name that begins with the specified value are returned.&lt;/p&gt; &lt;p&gt; The &lt;code&gt;listQueues&lt;/code&gt; methods supports pagination. Set parameter &lt;code&gt;MaxResults&lt;/code&gt; in the request to specify the maximum number of results to be returned in the response. If you do not set &lt;code&gt;MaxResults&lt;/code&gt;, the response includes a maximum of 1,000 results. If you set &lt;code&gt;MaxResults&lt;/code&gt; and there are additional results to display, the response includes a value for &lt;code&gt;NextToken&lt;/code&gt;. Use &lt;code&gt;NextToken&lt;/code&gt; as a parameter in your next request to &lt;code&gt;listQueues&lt;/code&gt; to receive the next page of results. &lt;/p&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listQueuesRequest  (optional)
     * @return ApiResponse&lt;ListQueuesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListQueuesResult> pOSTListQueuesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListQueuesRequest listQueuesRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTListQueuesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listQueuesRequest, null);
        Type localVarReturnType = new TypeToken<ListQueuesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a list of your queues in the current region. The response includes a maximum of 1,000 results. If you specify a value for the optional &lt;code&gt;QueueNamePrefix&lt;/code&gt; parameter, only queues with a name that begins with the specified value are returned.&lt;/p&gt; &lt;p&gt; The &lt;code&gt;listQueues&lt;/code&gt; methods supports pagination. Set parameter &lt;code&gt;MaxResults&lt;/code&gt; in the request to specify the maximum number of results to be returned in the response. If you do not set &lt;code&gt;MaxResults&lt;/code&gt;, the response includes a maximum of 1,000 results. If you set &lt;code&gt;MaxResults&lt;/code&gt; and there are additional results to display, the response includes a value for &lt;code&gt;NextToken&lt;/code&gt;. Use &lt;code&gt;NextToken&lt;/code&gt; as a parameter in your next request to &lt;code&gt;listQueues&lt;/code&gt; to receive the next page of results. &lt;/p&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listQueuesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListQueuesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListQueuesRequest listQueuesRequest, final ApiCallback<ListQueuesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListQueuesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listQueuesRequest, _callback);
        Type localVarReturnType = new TypeToken<ListQueuesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTPurgeQueue
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param purgeQueueRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PurgeQueueInProgress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPurgeQueueCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PurgeQueueRequest purgeQueueRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = purgeQueueRequest;

        // create path and map variables
        String localVarPath = "/#Action=PurgeQueue";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTPurgeQueueValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PurgeQueueRequest purgeQueueRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTPurgeQueue(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTPurgeQueue(Async)");
        }

        return pOSTPurgeQueueCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, purgeQueueRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes available messages in a queue (including in-flight messages) specified by the &lt;code&gt;QueueURL&lt;/code&gt; parameter.&lt;/p&gt; &lt;important&gt; &lt;p&gt;When you use the &lt;code&gt;PurgeQueue&lt;/code&gt; action, you can&#39;t retrieve any messages deleted from a queue.&lt;/p&gt; &lt;p&gt;The message deletion process takes up to 60 seconds. We recommend waiting for 60 seconds regardless of your queue&#39;s size. &lt;/p&gt; &lt;/important&gt; &lt;p&gt;Messages sent to the queue &lt;i&gt;before&lt;/i&gt; you call &lt;code&gt;PurgeQueue&lt;/code&gt; might be received but are deleted within the next minute.&lt;/p&gt; &lt;p&gt;Messages sent to the queue &lt;i&gt;after&lt;/i&gt; you call &lt;code&gt;PurgeQueue&lt;/code&gt; might be deleted while the queue is being purged.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param purgeQueueRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PurgeQueueInProgress </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTPurgeQueue(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PurgeQueueRequest purgeQueueRequest) throws ApiException {
        pOSTPurgeQueueWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, purgeQueueRequest);
    }

    /**
     * 
     * &lt;p&gt;Deletes available messages in a queue (including in-flight messages) specified by the &lt;code&gt;QueueURL&lt;/code&gt; parameter.&lt;/p&gt; &lt;important&gt; &lt;p&gt;When you use the &lt;code&gt;PurgeQueue&lt;/code&gt; action, you can&#39;t retrieve any messages deleted from a queue.&lt;/p&gt; &lt;p&gt;The message deletion process takes up to 60 seconds. We recommend waiting for 60 seconds regardless of your queue&#39;s size. &lt;/p&gt; &lt;/important&gt; &lt;p&gt;Messages sent to the queue &lt;i&gt;before&lt;/i&gt; you call &lt;code&gt;PurgeQueue&lt;/code&gt; might be received but are deleted within the next minute.&lt;/p&gt; &lt;p&gt;Messages sent to the queue &lt;i&gt;after&lt;/i&gt; you call &lt;code&gt;PurgeQueue&lt;/code&gt; might be deleted while the queue is being purged.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param purgeQueueRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PurgeQueueInProgress </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTPurgeQueueWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PurgeQueueRequest purgeQueueRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTPurgeQueueValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, purgeQueueRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes available messages in a queue (including in-flight messages) specified by the &lt;code&gt;QueueURL&lt;/code&gt; parameter.&lt;/p&gt; &lt;important&gt; &lt;p&gt;When you use the &lt;code&gt;PurgeQueue&lt;/code&gt; action, you can&#39;t retrieve any messages deleted from a queue.&lt;/p&gt; &lt;p&gt;The message deletion process takes up to 60 seconds. We recommend waiting for 60 seconds regardless of your queue&#39;s size. &lt;/p&gt; &lt;/important&gt; &lt;p&gt;Messages sent to the queue &lt;i&gt;before&lt;/i&gt; you call &lt;code&gt;PurgeQueue&lt;/code&gt; might be received but are deleted within the next minute.&lt;/p&gt; &lt;p&gt;Messages sent to the queue &lt;i&gt;after&lt;/i&gt; you call &lt;code&gt;PurgeQueue&lt;/code&gt; might be deleted while the queue is being purged.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param purgeQueueRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> QueueDoesNotExist </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> PurgeQueueInProgress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPurgeQueueAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PurgeQueueRequest purgeQueueRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTPurgeQueueValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, purgeQueueRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTReceiveMessage
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param receiveMessageRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OverLimit </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTReceiveMessageCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ReceiveMessageRequest receiveMessageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = receiveMessageRequest;

        // create path and map variables
        String localVarPath = "/#Action=ReceiveMessage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTReceiveMessageValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ReceiveMessageRequest receiveMessageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTReceiveMessage(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTReceiveMessage(Async)");
        }

        return pOSTReceiveMessageCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, receiveMessageRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves one or more messages (up to 10), from the specified queue. Using the &lt;code&gt;WaitTimeSeconds&lt;/code&gt; parameter enables long-poll support. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-long-polling.html\&quot;&gt;Amazon SQS Long Polling&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;p&gt;Short poll is the default behavior where a weighted random set of machines is sampled on a &lt;code&gt;ReceiveMessage&lt;/code&gt; call. Thus, only the messages on the sampled machines are returned. If the number of messages in the queue is small (fewer than 1,000), you most likely get fewer messages than you requested per &lt;code&gt;ReceiveMessage&lt;/code&gt; call. If the number of messages in the queue is extremely small, you might not receive any messages in a particular &lt;code&gt;ReceiveMessage&lt;/code&gt; response. If this happens, repeat the request. &lt;/p&gt; &lt;p&gt;For each message returned, the response includes the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The message body.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An MD5 digest of the message body. For information about MD5, see &lt;a href&#x3D;\&quot;https://www.ietf.org/rfc/rfc1321.txt\&quot;&gt;RFC1321&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;MessageId&lt;/code&gt; you received when you sent the message to the queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The receipt handle.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The message attributes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An MD5 digest of the message attributes.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The receipt handle is the identifier you must provide when deleting the message. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-message-identifiers.html\&quot;&gt;Queue and Message Identifiers&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can provide the &lt;code&gt;VisibilityTimeout&lt;/code&gt; parameter in your request. The parameter is applied to the messages that Amazon SQS returns in the response. If you don&#39;t include the parameter, the overall visibility timeout for the queue is used for the returned messages. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html\&quot;&gt;Visibility Timeout&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;A message that isn&#39;t deleted or a message whose visibility isn&#39;t extended before the visibility timeout expires counts as a failed receive. Depending on the configuration of the queue, the message might be sent to the dead-letter queue.&lt;/p&gt; &lt;note&gt; &lt;p&gt;In the future, new attributes might be added. If you write code that calls this action, we recommend that you structure your code so that it can handle new attributes gracefully.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param receiveMessageRequest  (optional)
     * @return ReceiveMessageResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OverLimit </td><td>  -  </td></tr>
     </table>
     */
    public ReceiveMessageResult pOSTReceiveMessage(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ReceiveMessageRequest receiveMessageRequest) throws ApiException {
        ApiResponse<ReceiveMessageResult> localVarResp = pOSTReceiveMessageWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, receiveMessageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves one or more messages (up to 10), from the specified queue. Using the &lt;code&gt;WaitTimeSeconds&lt;/code&gt; parameter enables long-poll support. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-long-polling.html\&quot;&gt;Amazon SQS Long Polling&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;p&gt;Short poll is the default behavior where a weighted random set of machines is sampled on a &lt;code&gt;ReceiveMessage&lt;/code&gt; call. Thus, only the messages on the sampled machines are returned. If the number of messages in the queue is small (fewer than 1,000), you most likely get fewer messages than you requested per &lt;code&gt;ReceiveMessage&lt;/code&gt; call. If the number of messages in the queue is extremely small, you might not receive any messages in a particular &lt;code&gt;ReceiveMessage&lt;/code&gt; response. If this happens, repeat the request. &lt;/p&gt; &lt;p&gt;For each message returned, the response includes the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The message body.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An MD5 digest of the message body. For information about MD5, see &lt;a href&#x3D;\&quot;https://www.ietf.org/rfc/rfc1321.txt\&quot;&gt;RFC1321&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;MessageId&lt;/code&gt; you received when you sent the message to the queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The receipt handle.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The message attributes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An MD5 digest of the message attributes.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The receipt handle is the identifier you must provide when deleting the message. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-message-identifiers.html\&quot;&gt;Queue and Message Identifiers&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can provide the &lt;code&gt;VisibilityTimeout&lt;/code&gt; parameter in your request. The parameter is applied to the messages that Amazon SQS returns in the response. If you don&#39;t include the parameter, the overall visibility timeout for the queue is used for the returned messages. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html\&quot;&gt;Visibility Timeout&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;A message that isn&#39;t deleted or a message whose visibility isn&#39;t extended before the visibility timeout expires counts as a failed receive. Depending on the configuration of the queue, the message might be sent to the dead-letter queue.&lt;/p&gt; &lt;note&gt; &lt;p&gt;In the future, new attributes might be added. If you write code that calls this action, we recommend that you structure your code so that it can handle new attributes gracefully.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param receiveMessageRequest  (optional)
     * @return ApiResponse&lt;ReceiveMessageResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OverLimit </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReceiveMessageResult> pOSTReceiveMessageWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ReceiveMessageRequest receiveMessageRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTReceiveMessageValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, receiveMessageRequest, null);
        Type localVarReturnType = new TypeToken<ReceiveMessageResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves one or more messages (up to 10), from the specified queue. Using the &lt;code&gt;WaitTimeSeconds&lt;/code&gt; parameter enables long-poll support. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-long-polling.html\&quot;&gt;Amazon SQS Long Polling&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;p&gt;Short poll is the default behavior where a weighted random set of machines is sampled on a &lt;code&gt;ReceiveMessage&lt;/code&gt; call. Thus, only the messages on the sampled machines are returned. If the number of messages in the queue is small (fewer than 1,000), you most likely get fewer messages than you requested per &lt;code&gt;ReceiveMessage&lt;/code&gt; call. If the number of messages in the queue is extremely small, you might not receive any messages in a particular &lt;code&gt;ReceiveMessage&lt;/code&gt; response. If this happens, repeat the request. &lt;/p&gt; &lt;p&gt;For each message returned, the response includes the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The message body.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An MD5 digest of the message body. For information about MD5, see &lt;a href&#x3D;\&quot;https://www.ietf.org/rfc/rfc1321.txt\&quot;&gt;RFC1321&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;MessageId&lt;/code&gt; you received when you sent the message to the queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The receipt handle.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The message attributes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An MD5 digest of the message attributes.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The receipt handle is the identifier you must provide when deleting the message. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-message-identifiers.html\&quot;&gt;Queue and Message Identifiers&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can provide the &lt;code&gt;VisibilityTimeout&lt;/code&gt; parameter in your request. The parameter is applied to the messages that Amazon SQS returns in the response. If you don&#39;t include the parameter, the overall visibility timeout for the queue is used for the returned messages. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html\&quot;&gt;Visibility Timeout&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;A message that isn&#39;t deleted or a message whose visibility isn&#39;t extended before the visibility timeout expires counts as a failed receive. Depending on the configuration of the queue, the message might be sent to the dead-letter queue.&lt;/p&gt; &lt;note&gt; &lt;p&gt;In the future, new attributes might be added. If you write code that calls this action, we recommend that you structure your code so that it can handle new attributes gracefully.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param receiveMessageRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> OverLimit </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTReceiveMessageAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ReceiveMessageRequest receiveMessageRequest, final ApiCallback<ReceiveMessageResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTReceiveMessageValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, receiveMessageRequest, _callback);
        Type localVarReturnType = new TypeToken<ReceiveMessageResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRemovePermission
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removePermissionRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRemovePermissionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemovePermissionRequest removePermissionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removePermissionRequest;

        // create path and map variables
        String localVarPath = "/#Action=RemovePermission";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRemovePermissionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemovePermissionRequest removePermissionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRemovePermission(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRemovePermission(Async)");
        }

        return pOSTRemovePermissionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removePermissionRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt;Revokes any permissions in the queue policy that matches the specified &lt;code&gt;Label&lt;/code&gt; parameter.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Only the owner of a queue can remove permissions from it.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To remove the ability to change queue permissions, you must deny permission to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetQueueAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removePermissionRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTRemovePermission(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemovePermissionRequest removePermissionRequest) throws ApiException {
        pOSTRemovePermissionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removePermissionRequest);
    }

    /**
     * 
     * &lt;p&gt;Revokes any permissions in the queue policy that matches the specified &lt;code&gt;Label&lt;/code&gt; parameter.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Only the owner of a queue can remove permissions from it.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To remove the ability to change queue permissions, you must deny permission to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetQueueAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removePermissionRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTRemovePermissionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemovePermissionRequest removePermissionRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTRemovePermissionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removePermissionRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Revokes any permissions in the queue policy that matches the specified &lt;code&gt;Label&lt;/code&gt; parameter.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Only the owner of a queue can remove permissions from it.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To remove the ability to change queue permissions, you must deny permission to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetQueueAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removePermissionRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRemovePermissionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemovePermissionRequest removePermissionRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRemovePermissionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removePermissionRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTSendMessage
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sendMessageRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidMessageContents </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSendMessageCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SendMessageRequest sendMessageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendMessageRequest;

        // create path and map variables
        String localVarPath = "/#Action=SendMessage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTSendMessageValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SendMessageRequest sendMessageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTSendMessage(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTSendMessage(Async)");
        }

        return pOSTSendMessageCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sendMessageRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt;Delivers a message to the specified queue.&lt;/p&gt; &lt;important&gt; &lt;p&gt;A message can include only XML, JSON, and unformatted text. The following Unicode characters are allowed:&lt;/p&gt; &lt;p&gt; &lt;code&gt;#x9&lt;/code&gt; | &lt;code&gt;#xA&lt;/code&gt; | &lt;code&gt;#xD&lt;/code&gt; | &lt;code&gt;#x20&lt;/code&gt; to &lt;code&gt;#xD7FF&lt;/code&gt; | &lt;code&gt;#xE000&lt;/code&gt; to &lt;code&gt;#xFFFD&lt;/code&gt; | &lt;code&gt;#x10000&lt;/code&gt; to &lt;code&gt;#x10FFFF&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Any characters not included in this list will be rejected. For more information, see the &lt;a href&#x3D;\&quot;http://www.w3.org/TR/REC-xml/#charsets\&quot;&gt;W3C specification for characters&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sendMessageRequest  (optional)
     * @return SendMessageResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidMessageContents </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public SendMessageResult pOSTSendMessage(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SendMessageRequest sendMessageRequest) throws ApiException {
        ApiResponse<SendMessageResult> localVarResp = pOSTSendMessageWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sendMessageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Delivers a message to the specified queue.&lt;/p&gt; &lt;important&gt; &lt;p&gt;A message can include only XML, JSON, and unformatted text. The following Unicode characters are allowed:&lt;/p&gt; &lt;p&gt; &lt;code&gt;#x9&lt;/code&gt; | &lt;code&gt;#xA&lt;/code&gt; | &lt;code&gt;#xD&lt;/code&gt; | &lt;code&gt;#x20&lt;/code&gt; to &lt;code&gt;#xD7FF&lt;/code&gt; | &lt;code&gt;#xE000&lt;/code&gt; to &lt;code&gt;#xFFFD&lt;/code&gt; | &lt;code&gt;#x10000&lt;/code&gt; to &lt;code&gt;#x10FFFF&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Any characters not included in this list will be rejected. For more information, see the &lt;a href&#x3D;\&quot;http://www.w3.org/TR/REC-xml/#charsets\&quot;&gt;W3C specification for characters&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sendMessageRequest  (optional)
     * @return ApiResponse&lt;SendMessageResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidMessageContents </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendMessageResult> pOSTSendMessageWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SendMessageRequest sendMessageRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTSendMessageValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sendMessageRequest, null);
        Type localVarReturnType = new TypeToken<SendMessageResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Delivers a message to the specified queue.&lt;/p&gt; &lt;important&gt; &lt;p&gt;A message can include only XML, JSON, and unformatted text. The following Unicode characters are allowed:&lt;/p&gt; &lt;p&gt; &lt;code&gt;#x9&lt;/code&gt; | &lt;code&gt;#xA&lt;/code&gt; | &lt;code&gt;#xD&lt;/code&gt; | &lt;code&gt;#x20&lt;/code&gt; to &lt;code&gt;#xD7FF&lt;/code&gt; | &lt;code&gt;#xE000&lt;/code&gt; to &lt;code&gt;#xFFFD&lt;/code&gt; | &lt;code&gt;#x10000&lt;/code&gt; to &lt;code&gt;#x10FFFF&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Any characters not included in this list will be rejected. For more information, see the &lt;a href&#x3D;\&quot;http://www.w3.org/TR/REC-xml/#charsets\&quot;&gt;W3C specification for characters&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sendMessageRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidMessageContents </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSendMessageAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SendMessageRequest sendMessageRequest, final ApiCallback<SendMessageResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTSendMessageValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sendMessageRequest, _callback);
        Type localVarReturnType = new TypeToken<SendMessageResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTSendMessageBatch
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sendMessageBatchRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEntriesInBatchRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EmptyBatchRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BatchEntryIdsNotDistinct </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BatchRequestTooLong </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidBatchEntryId </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSendMessageBatchCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SendMessageBatchRequest sendMessageBatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendMessageBatchRequest;

        // create path and map variables
        String localVarPath = "/#Action=SendMessageBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTSendMessageBatchValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SendMessageBatchRequest sendMessageBatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTSendMessageBatch(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTSendMessageBatch(Async)");
        }

        return pOSTSendMessageBatchCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sendMessageBatchRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt;You can use &lt;code&gt;SendMessageBatch&lt;/code&gt; to send up to 10 messages to the specified queue by assigning either identical or different values to each message (or by not assigning values at all). This is a batch version of &lt;code&gt; &lt;a&gt;SendMessage&lt;/a&gt;.&lt;/code&gt; For a FIFO queue, multiple messages within a single batch are enqueued in the order they are sent.&lt;/p&gt; &lt;p&gt;The result of sending each message is reported individually in the response. Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The maximum allowed individual message size and the maximum total payload size (the sum of the individual lengths of all of the batched messages) are both 256 KiB (262,144 bytes).&lt;/p&gt; &lt;important&gt; &lt;p&gt;A message can include only XML, JSON, and unformatted text. The following Unicode characters are allowed:&lt;/p&gt; &lt;p&gt; &lt;code&gt;#x9&lt;/code&gt; | &lt;code&gt;#xA&lt;/code&gt; | &lt;code&gt;#xD&lt;/code&gt; | &lt;code&gt;#x20&lt;/code&gt; to &lt;code&gt;#xD7FF&lt;/code&gt; | &lt;code&gt;#xE000&lt;/code&gt; to &lt;code&gt;#xFFFD&lt;/code&gt; | &lt;code&gt;#x10000&lt;/code&gt; to &lt;code&gt;#x10FFFF&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Any characters not included in this list will be rejected. For more information, see the &lt;a href&#x3D;\&quot;http://www.w3.org/TR/REC-xml/#charsets\&quot;&gt;W3C specification for characters&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;If you don&#39;t specify the &lt;code&gt;DelaySeconds&lt;/code&gt; parameter for an entry, Amazon SQS uses the default value for the queue.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sendMessageBatchRequest  (optional)
     * @return SendMessageBatchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEntriesInBatchRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EmptyBatchRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BatchEntryIdsNotDistinct </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BatchRequestTooLong </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidBatchEntryId </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public SendMessageBatchResult pOSTSendMessageBatch(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SendMessageBatchRequest sendMessageBatchRequest) throws ApiException {
        ApiResponse<SendMessageBatchResult> localVarResp = pOSTSendMessageBatchWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sendMessageBatchRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;You can use &lt;code&gt;SendMessageBatch&lt;/code&gt; to send up to 10 messages to the specified queue by assigning either identical or different values to each message (or by not assigning values at all). This is a batch version of &lt;code&gt; &lt;a&gt;SendMessage&lt;/a&gt;.&lt;/code&gt; For a FIFO queue, multiple messages within a single batch are enqueued in the order they are sent.&lt;/p&gt; &lt;p&gt;The result of sending each message is reported individually in the response. Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The maximum allowed individual message size and the maximum total payload size (the sum of the individual lengths of all of the batched messages) are both 256 KiB (262,144 bytes).&lt;/p&gt; &lt;important&gt; &lt;p&gt;A message can include only XML, JSON, and unformatted text. The following Unicode characters are allowed:&lt;/p&gt; &lt;p&gt; &lt;code&gt;#x9&lt;/code&gt; | &lt;code&gt;#xA&lt;/code&gt; | &lt;code&gt;#xD&lt;/code&gt; | &lt;code&gt;#x20&lt;/code&gt; to &lt;code&gt;#xD7FF&lt;/code&gt; | &lt;code&gt;#xE000&lt;/code&gt; to &lt;code&gt;#xFFFD&lt;/code&gt; | &lt;code&gt;#x10000&lt;/code&gt; to &lt;code&gt;#x10FFFF&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Any characters not included in this list will be rejected. For more information, see the &lt;a href&#x3D;\&quot;http://www.w3.org/TR/REC-xml/#charsets\&quot;&gt;W3C specification for characters&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;If you don&#39;t specify the &lt;code&gt;DelaySeconds&lt;/code&gt; parameter for an entry, Amazon SQS uses the default value for the queue.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sendMessageBatchRequest  (optional)
     * @return ApiResponse&lt;SendMessageBatchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEntriesInBatchRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EmptyBatchRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BatchEntryIdsNotDistinct </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BatchRequestTooLong </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidBatchEntryId </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendMessageBatchResult> pOSTSendMessageBatchWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SendMessageBatchRequest sendMessageBatchRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTSendMessageBatchValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sendMessageBatchRequest, null);
        Type localVarReturnType = new TypeToken<SendMessageBatchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;You can use &lt;code&gt;SendMessageBatch&lt;/code&gt; to send up to 10 messages to the specified queue by assigning either identical or different values to each message (or by not assigning values at all). This is a batch version of &lt;code&gt; &lt;a&gt;SendMessage&lt;/a&gt;.&lt;/code&gt; For a FIFO queue, multiple messages within a single batch are enqueued in the order they are sent.&lt;/p&gt; &lt;p&gt;The result of sending each message is reported individually in the response. Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The maximum allowed individual message size and the maximum total payload size (the sum of the individual lengths of all of the batched messages) are both 256 KiB (262,144 bytes).&lt;/p&gt; &lt;important&gt; &lt;p&gt;A message can include only XML, JSON, and unformatted text. The following Unicode characters are allowed:&lt;/p&gt; &lt;p&gt; &lt;code&gt;#x9&lt;/code&gt; | &lt;code&gt;#xA&lt;/code&gt; | &lt;code&gt;#xD&lt;/code&gt; | &lt;code&gt;#x20&lt;/code&gt; to &lt;code&gt;#xD7FF&lt;/code&gt; | &lt;code&gt;#xE000&lt;/code&gt; to &lt;code&gt;#xFFFD&lt;/code&gt; | &lt;code&gt;#x10000&lt;/code&gt; to &lt;code&gt;#x10FFFF&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Any characters not included in this list will be rejected. For more information, see the &lt;a href&#x3D;\&quot;http://www.w3.org/TR/REC-xml/#charsets\&quot;&gt;W3C specification for characters&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;If you don&#39;t specify the &lt;code&gt;DelaySeconds&lt;/code&gt; parameter for an entry, Amazon SQS uses the default value for the queue.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sendMessageBatchRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyEntriesInBatchRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EmptyBatchRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BatchEntryIdsNotDistinct </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BatchRequestTooLong </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidBatchEntryId </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSendMessageBatchAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SendMessageBatchRequest sendMessageBatchRequest, final ApiCallback<SendMessageBatchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTSendMessageBatchValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sendMessageBatchRequest, _callback);
        Type localVarReturnType = new TypeToken<SendMessageBatchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTSetQueueAttributes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setQueueAttributesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidAttributeName </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetQueueAttributesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetQueueAttributesRequest setQueueAttributesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setQueueAttributesRequest;

        // create path and map variables
        String localVarPath = "/#Action=SetQueueAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTSetQueueAttributesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetQueueAttributesRequest setQueueAttributesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTSetQueueAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTSetQueueAttributes(Async)");
        }

        return pOSTSetQueueAttributesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setQueueAttributesRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt;Sets the value of one or more queue attributes. When you change a queue&#39;s attributes, the change can take up to 60 seconds for most of the attributes to propagate throughout the Amazon SQS system. Changes made to the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; attribute can take up to 15 minutes and will impact existing messages in the queue potentially causing them to be expired and deleted if the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; is reduced below the age of existing messages.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;In the future, new attributes might be added. If you write code that calls this action, we recommend that you structure your code so that it can handle new attributes gracefully.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To remove the ability to change queue permissions, you must deny permission to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetQueueAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setQueueAttributesRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidAttributeName </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTSetQueueAttributes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetQueueAttributesRequest setQueueAttributesRequest) throws ApiException {
        pOSTSetQueueAttributesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setQueueAttributesRequest);
    }

    /**
     * 
     * &lt;p&gt;Sets the value of one or more queue attributes. When you change a queue&#39;s attributes, the change can take up to 60 seconds for most of the attributes to propagate throughout the Amazon SQS system. Changes made to the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; attribute can take up to 15 minutes and will impact existing messages in the queue potentially causing them to be expired and deleted if the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; is reduced below the age of existing messages.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;In the future, new attributes might be added. If you write code that calls this action, we recommend that you structure your code so that it can handle new attributes gracefully.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To remove the ability to change queue permissions, you must deny permission to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetQueueAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setQueueAttributesRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidAttributeName </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTSetQueueAttributesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetQueueAttributesRequest setQueueAttributesRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTSetQueueAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setQueueAttributesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Sets the value of one or more queue attributes. When you change a queue&#39;s attributes, the change can take up to 60 seconds for most of the attributes to propagate throughout the Amazon SQS system. Changes made to the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; attribute can take up to 15 minutes and will impact existing messages in the queue potentially causing them to be expired and deleted if the &lt;code&gt;MessageRetentionPeriod&lt;/code&gt; is reduced below the age of existing messages.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;In the future, new attributes might be added. If you write code that calls this action, we recommend that you structure your code so that it can handle new attributes gracefully.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To remove the ability to change queue permissions, you must deny permission to the &lt;code&gt;AddPermission&lt;/code&gt;, &lt;code&gt;RemovePermission&lt;/code&gt;, and &lt;code&gt;SetQueueAttributes&lt;/code&gt; actions in your IAM policy.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setQueueAttributesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidAttributeName </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetQueueAttributesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetQueueAttributesRequest setQueueAttributesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTSetQueueAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setQueueAttributesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTStartMessageMoveTask
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startMessageMoveTaskRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTStartMessageMoveTaskCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StartMessageMoveTaskRequest startMessageMoveTaskRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startMessageMoveTaskRequest;

        // create path and map variables
        String localVarPath = "/#Action=StartMessageMoveTask";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTStartMessageMoveTaskValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StartMessageMoveTaskRequest startMessageMoveTaskRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTStartMessageMoveTask(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTStartMessageMoveTask(Async)");
        }

        return pOSTStartMessageMoveTaskCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startMessageMoveTaskRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt;Starts an asynchronous task to move messages from a specified source queue to a specified destination queue.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;This action is currently limited to supporting message redrive from queues that are configured as &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;dead-letter queues (DLQs)&lt;/a&gt; of other Amazon SQS queues only. Non-SQS queue sources of dead-letter queues, such as Lambda or Amazon SNS topics, are currently not supported.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;In dead-letter queues redrive context, the &lt;code&gt;StartMessageMoveTask&lt;/code&gt; the source queue is the DLQ, while the destination queue can be the original source queue (from which the messages were driven to the dead-letter-queue), or a custom destination queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Currently, only standard queues support redrive. FIFO queues don&#39;t support redrive.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Only one active message movement task is supported per queue at any given time.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startMessageMoveTaskRequest  (optional)
     * @return StartMessageMoveTaskResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public StartMessageMoveTaskResult pOSTStartMessageMoveTask(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StartMessageMoveTaskRequest startMessageMoveTaskRequest) throws ApiException {
        ApiResponse<StartMessageMoveTaskResult> localVarResp = pOSTStartMessageMoveTaskWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startMessageMoveTaskRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Starts an asynchronous task to move messages from a specified source queue to a specified destination queue.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;This action is currently limited to supporting message redrive from queues that are configured as &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;dead-letter queues (DLQs)&lt;/a&gt; of other Amazon SQS queues only. Non-SQS queue sources of dead-letter queues, such as Lambda or Amazon SNS topics, are currently not supported.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;In dead-letter queues redrive context, the &lt;code&gt;StartMessageMoveTask&lt;/code&gt; the source queue is the DLQ, while the destination queue can be the original source queue (from which the messages were driven to the dead-letter-queue), or a custom destination queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Currently, only standard queues support redrive. FIFO queues don&#39;t support redrive.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Only one active message movement task is supported per queue at any given time.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startMessageMoveTaskRequest  (optional)
     * @return ApiResponse&lt;StartMessageMoveTaskResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartMessageMoveTaskResult> pOSTStartMessageMoveTaskWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StartMessageMoveTaskRequest startMessageMoveTaskRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTStartMessageMoveTaskValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startMessageMoveTaskRequest, null);
        Type localVarReturnType = new TypeToken<StartMessageMoveTaskResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Starts an asynchronous task to move messages from a specified source queue to a specified destination queue.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;This action is currently limited to supporting message redrive from queues that are configured as &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\&quot;&gt;dead-letter queues (DLQs)&lt;/a&gt; of other Amazon SQS queues only. Non-SQS queue sources of dead-letter queues, such as Lambda or Amazon SNS topics, are currently not supported.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;In dead-letter queues redrive context, the &lt;code&gt;StartMessageMoveTask&lt;/code&gt; the source queue is the DLQ, while the destination queue can be the original source queue (from which the messages were driven to the dead-letter-queue), or a custom destination queue.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Currently, only standard queues support redrive. FIFO queues don&#39;t support redrive.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Only one active message movement task is supported per queue at any given time.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startMessageMoveTaskRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTStartMessageMoveTaskAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StartMessageMoveTaskRequest startMessageMoveTaskRequest, final ApiCallback<StartMessageMoveTaskResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTStartMessageMoveTaskValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startMessageMoveTaskRequest, _callback);
        Type localVarReturnType = new TypeToken<StartMessageMoveTaskResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTTagQueue
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tagQueueRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTTagQueueCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TagQueueRequest tagQueueRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagQueueRequest;

        // create path and map variables
        String localVarPath = "/#Action=TagQueue";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTTagQueueValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TagQueueRequest tagQueueRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTTagQueue(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTTagQueue(Async)");
        }

        return pOSTTagQueueCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tagQueueRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt;Add cost allocation tags to the specified Amazon SQS queue. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html\&quot;&gt;Tagging Your Amazon SQS Queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you use queue tags, keep the following guidelines in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Adding more than 50 tags to a queue isn&#39;t recommended.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags don&#39;t have any semantic meaning. Amazon SQS interprets tags as character strings.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags are case-sensitive.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A new tag with a key identical to that of an existing tag overwrites the existing tag.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For a full list of tag restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-limits.html#limits-queues\&quot;&gt;Quotas related to queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tagQueueRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTTagQueue(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TagQueueRequest tagQueueRequest) throws ApiException {
        pOSTTagQueueWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tagQueueRequest);
    }

    /**
     * 
     * &lt;p&gt;Add cost allocation tags to the specified Amazon SQS queue. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html\&quot;&gt;Tagging Your Amazon SQS Queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you use queue tags, keep the following guidelines in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Adding more than 50 tags to a queue isn&#39;t recommended.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags don&#39;t have any semantic meaning. Amazon SQS interprets tags as character strings.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags are case-sensitive.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A new tag with a key identical to that of an existing tag overwrites the existing tag.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For a full list of tag restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-limits.html#limits-queues\&quot;&gt;Quotas related to queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tagQueueRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTTagQueueWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TagQueueRequest tagQueueRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTTagQueueValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tagQueueRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Add cost allocation tags to the specified Amazon SQS queue. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html\&quot;&gt;Tagging Your Amazon SQS Queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you use queue tags, keep the following guidelines in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Adding more than 50 tags to a queue isn&#39;t recommended.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags don&#39;t have any semantic meaning. Amazon SQS interprets tags as character strings.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tags are case-sensitive.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A new tag with a key identical to that of an existing tag overwrites the existing tag.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For a full list of tag restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-limits.html#limits-queues\&quot;&gt;Quotas related to queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tagQueueRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTTagQueueAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TagQueueRequest tagQueueRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTTagQueueValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tagQueueRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTUntagQueue
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param untagQueueRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUntagQueueCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UntagQueueRequest untagQueueRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = untagQueueRequest;

        // create path and map variables
        String localVarPath = "/#Action=UntagQueue";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTUntagQueueValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UntagQueueRequest untagQueueRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTUntagQueue(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTUntagQueue(Async)");
        }

        return pOSTUntagQueueCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, untagQueueRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt;Remove cost allocation tags from the specified Amazon SQS queue. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html\&quot;&gt;Tagging Your Amazon SQS Queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param untagQueueRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTUntagQueue(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UntagQueueRequest untagQueueRequest) throws ApiException {
        pOSTUntagQueueWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, untagQueueRequest);
    }

    /**
     * 
     * &lt;p&gt;Remove cost allocation tags from the specified Amazon SQS queue. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html\&quot;&gt;Tagging Your Amazon SQS Queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param untagQueueRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTUntagQueueWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UntagQueueRequest untagQueueRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTUntagQueueValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, untagQueueRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Remove cost allocation tags from the specified Amazon SQS queue. For an overview, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html\&quot;&gt;Tagging Your Amazon SQS Queues&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Cross-account permissions don&#39;t apply to this action. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name\&quot;&gt;Grant cross-account permissions to a role and a username&lt;/a&gt; in the &lt;i&gt;Amazon SQS Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param untagQueueRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUntagQueueAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UntagQueueRequest untagQueueRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTUntagQueueValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, untagQueueRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
