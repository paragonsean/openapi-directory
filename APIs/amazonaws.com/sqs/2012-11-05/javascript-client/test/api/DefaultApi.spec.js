/**
 * Amazon Simple Queue Service
 * <p>Welcome to the <i>Amazon SQS API Reference</i>.</p> <p>Amazon SQS is a reliable, highly-scalable hosted queue for storing messages as they travel between applications or microservices. Amazon SQS moves data between distributed application components and helps you decouple these components.</p> <p>For information on the permissions you need to use this API, see <a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-authentication-and-access-control.html\">Identity and access management</a> in the <i>Amazon SQS Developer Guide.</i> </p> <p>You can use <a href=\"http://aws.amazon.com/tools/#sdk\">Amazon Web Services SDKs</a> to access Amazon SQS using your favorite programming language. The SDKs perform tasks such as the following automatically:</p> <ul> <li> <p>Cryptographically sign your service requests</p> </li> <li> <p>Retry requests</p> </li> <li> <p>Handle error responses</p> </li> </ul> <p> <b>Additional information</b> </p> <ul> <li> <p> <a href=\"http://aws.amazon.com/sqs/\">Amazon SQS Product Page</a> </p> </li> <li> <p> <i>Amazon SQS Developer Guide</i> </p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-making-api-requests.html\">Making API Requests</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-metadata.html#sqs-message-attributes\">Amazon SQS Message Attributes</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html\">Amazon SQS Dead-Letter Queues</a> </p> </li> </ul> </li> <li> <p> <a href=\"http://docs.aws.amazon.com/cli/latest/reference/sqs/index.html\">Amazon SQS in the <i>Command Line Interface</i> </a> </p> </li> <li> <p> <i>Amazon Web Services General Reference</i> </p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#sqs_region\">Regions and Endpoints</a> </p> </li> </ul> </li> </ul>
 *
 * The version of the OpenAPI document: 2012-11-05
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonSimpleQueueService);
  }
}(this, function(expect, AmazonSimpleQueueService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonSimpleQueueService.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('gETAddPermission', function() {
      it('should call gETAddPermission successfully', function(done) {
        //uncomment below and update the code to test gETAddPermission
        //instance.gETAddPermission(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETCancelMessageMoveTask', function() {
      it('should call gETCancelMessageMoveTask successfully', function(done) {
        //uncomment below and update the code to test gETCancelMessageMoveTask
        //instance.gETCancelMessageMoveTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETChangeMessageVisibility', function() {
      it('should call gETChangeMessageVisibility successfully', function(done) {
        //uncomment below and update the code to test gETChangeMessageVisibility
        //instance.gETChangeMessageVisibility(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETChangeMessageVisibilityBatch', function() {
      it('should call gETChangeMessageVisibilityBatch successfully', function(done) {
        //uncomment below and update the code to test gETChangeMessageVisibilityBatch
        //instance.gETChangeMessageVisibilityBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETCreateQueue', function() {
      it('should call gETCreateQueue successfully', function(done) {
        //uncomment below and update the code to test gETCreateQueue
        //instance.gETCreateQueue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETDeleteMessage', function() {
      it('should call gETDeleteMessage successfully', function(done) {
        //uncomment below and update the code to test gETDeleteMessage
        //instance.gETDeleteMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETDeleteMessageBatch', function() {
      it('should call gETDeleteMessageBatch successfully', function(done) {
        //uncomment below and update the code to test gETDeleteMessageBatch
        //instance.gETDeleteMessageBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETDeleteQueue', function() {
      it('should call gETDeleteQueue successfully', function(done) {
        //uncomment below and update the code to test gETDeleteQueue
        //instance.gETDeleteQueue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETGetQueueAttributes', function() {
      it('should call gETGetQueueAttributes successfully', function(done) {
        //uncomment below and update the code to test gETGetQueueAttributes
        //instance.gETGetQueueAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETGetQueueUrl', function() {
      it('should call gETGetQueueUrl successfully', function(done) {
        //uncomment below and update the code to test gETGetQueueUrl
        //instance.gETGetQueueUrl(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETListDeadLetterSourceQueues', function() {
      it('should call gETListDeadLetterSourceQueues successfully', function(done) {
        //uncomment below and update the code to test gETListDeadLetterSourceQueues
        //instance.gETListDeadLetterSourceQueues(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETListMessageMoveTasks', function() {
      it('should call gETListMessageMoveTasks successfully', function(done) {
        //uncomment below and update the code to test gETListMessageMoveTasks
        //instance.gETListMessageMoveTasks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETListQueueTags', function() {
      it('should call gETListQueueTags successfully', function(done) {
        //uncomment below and update the code to test gETListQueueTags
        //instance.gETListQueueTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETListQueues', function() {
      it('should call gETListQueues successfully', function(done) {
        //uncomment below and update the code to test gETListQueues
        //instance.gETListQueues(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETPurgeQueue', function() {
      it('should call gETPurgeQueue successfully', function(done) {
        //uncomment below and update the code to test gETPurgeQueue
        //instance.gETPurgeQueue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETReceiveMessage', function() {
      it('should call gETReceiveMessage successfully', function(done) {
        //uncomment below and update the code to test gETReceiveMessage
        //instance.gETReceiveMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETRemovePermission', function() {
      it('should call gETRemovePermission successfully', function(done) {
        //uncomment below and update the code to test gETRemovePermission
        //instance.gETRemovePermission(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETSendMessage', function() {
      it('should call gETSendMessage successfully', function(done) {
        //uncomment below and update the code to test gETSendMessage
        //instance.gETSendMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETSendMessageBatch', function() {
      it('should call gETSendMessageBatch successfully', function(done) {
        //uncomment below and update the code to test gETSendMessageBatch
        //instance.gETSendMessageBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETSetQueueAttributes', function() {
      it('should call gETSetQueueAttributes successfully', function(done) {
        //uncomment below and update the code to test gETSetQueueAttributes
        //instance.gETSetQueueAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETStartMessageMoveTask', function() {
      it('should call gETStartMessageMoveTask successfully', function(done) {
        //uncomment below and update the code to test gETStartMessageMoveTask
        //instance.gETStartMessageMoveTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETTagQueue', function() {
      it('should call gETTagQueue successfully', function(done) {
        //uncomment below and update the code to test gETTagQueue
        //instance.gETTagQueue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gETUntagQueue', function() {
      it('should call gETUntagQueue successfully', function(done) {
        //uncomment below and update the code to test gETUntagQueue
        //instance.gETUntagQueue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTAddPermission', function() {
      it('should call pOSTAddPermission successfully', function(done) {
        //uncomment below and update the code to test pOSTAddPermission
        //instance.pOSTAddPermission(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTCancelMessageMoveTask', function() {
      it('should call pOSTCancelMessageMoveTask successfully', function(done) {
        //uncomment below and update the code to test pOSTCancelMessageMoveTask
        //instance.pOSTCancelMessageMoveTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTChangeMessageVisibility', function() {
      it('should call pOSTChangeMessageVisibility successfully', function(done) {
        //uncomment below and update the code to test pOSTChangeMessageVisibility
        //instance.pOSTChangeMessageVisibility(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTChangeMessageVisibilityBatch', function() {
      it('should call pOSTChangeMessageVisibilityBatch successfully', function(done) {
        //uncomment below and update the code to test pOSTChangeMessageVisibilityBatch
        //instance.pOSTChangeMessageVisibilityBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTCreateQueue', function() {
      it('should call pOSTCreateQueue successfully', function(done) {
        //uncomment below and update the code to test pOSTCreateQueue
        //instance.pOSTCreateQueue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTDeleteMessage', function() {
      it('should call pOSTDeleteMessage successfully', function(done) {
        //uncomment below and update the code to test pOSTDeleteMessage
        //instance.pOSTDeleteMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTDeleteMessageBatch', function() {
      it('should call pOSTDeleteMessageBatch successfully', function(done) {
        //uncomment below and update the code to test pOSTDeleteMessageBatch
        //instance.pOSTDeleteMessageBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTDeleteQueue', function() {
      it('should call pOSTDeleteQueue successfully', function(done) {
        //uncomment below and update the code to test pOSTDeleteQueue
        //instance.pOSTDeleteQueue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTGetQueueAttributes', function() {
      it('should call pOSTGetQueueAttributes successfully', function(done) {
        //uncomment below and update the code to test pOSTGetQueueAttributes
        //instance.pOSTGetQueueAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTGetQueueUrl', function() {
      it('should call pOSTGetQueueUrl successfully', function(done) {
        //uncomment below and update the code to test pOSTGetQueueUrl
        //instance.pOSTGetQueueUrl(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTListDeadLetterSourceQueues', function() {
      it('should call pOSTListDeadLetterSourceQueues successfully', function(done) {
        //uncomment below and update the code to test pOSTListDeadLetterSourceQueues
        //instance.pOSTListDeadLetterSourceQueues(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTListMessageMoveTasks', function() {
      it('should call pOSTListMessageMoveTasks successfully', function(done) {
        //uncomment below and update the code to test pOSTListMessageMoveTasks
        //instance.pOSTListMessageMoveTasks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTListQueueTags', function() {
      it('should call pOSTListQueueTags successfully', function(done) {
        //uncomment below and update the code to test pOSTListQueueTags
        //instance.pOSTListQueueTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTListQueues', function() {
      it('should call pOSTListQueues successfully', function(done) {
        //uncomment below and update the code to test pOSTListQueues
        //instance.pOSTListQueues(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTPurgeQueue', function() {
      it('should call pOSTPurgeQueue successfully', function(done) {
        //uncomment below and update the code to test pOSTPurgeQueue
        //instance.pOSTPurgeQueue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTReceiveMessage', function() {
      it('should call pOSTReceiveMessage successfully', function(done) {
        //uncomment below and update the code to test pOSTReceiveMessage
        //instance.pOSTReceiveMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTRemovePermission', function() {
      it('should call pOSTRemovePermission successfully', function(done) {
        //uncomment below and update the code to test pOSTRemovePermission
        //instance.pOSTRemovePermission(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTSendMessage', function() {
      it('should call pOSTSendMessage successfully', function(done) {
        //uncomment below and update the code to test pOSTSendMessage
        //instance.pOSTSendMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTSendMessageBatch', function() {
      it('should call pOSTSendMessageBatch successfully', function(done) {
        //uncomment below and update the code to test pOSTSendMessageBatch
        //instance.pOSTSendMessageBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTSetQueueAttributes', function() {
      it('should call pOSTSetQueueAttributes successfully', function(done) {
        //uncomment below and update the code to test pOSTSetQueueAttributes
        //instance.pOSTSetQueueAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTStartMessageMoveTask', function() {
      it('should call pOSTStartMessageMoveTask successfully', function(done) {
        //uncomment below and update the code to test pOSTStartMessageMoveTask
        //instance.pOSTStartMessageMoveTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTTagQueue', function() {
      it('should call pOSTTagQueue successfully', function(done) {
        //uncomment below and update the code to test pOSTTagQueue
        //instance.pOSTTagQueue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pOSTUntagQueue', function() {
      it('should call pOSTUntagQueue successfully', function(done) {
        //uncomment below and update the code to test pOSTUntagQueue
        //instance.pOSTUntagQueue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
