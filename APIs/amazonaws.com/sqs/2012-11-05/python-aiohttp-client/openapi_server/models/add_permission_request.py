# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddPermissionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, queue_url: str=None, label: str=None, aws_account_ids: List=None, actions: List=None):
        """AddPermissionRequest - a model defined in OpenAPI

        :param queue_url: The queue_url of this AddPermissionRequest.
        :param label: The label of this AddPermissionRequest.
        :param aws_account_ids: The aws_account_ids of this AddPermissionRequest.
        :param actions: The actions of this AddPermissionRequest.
        """
        self.openapi_types = {
            'queue_url': str,
            'label': str,
            'aws_account_ids': List,
            'actions': List
        }

        self.attribute_map = {
            'queue_url': 'QueueUrl',
            'label': 'Label',
            'aws_account_ids': 'AWSAccountIds',
            'actions': 'Actions'
        }

        self._queue_url = queue_url
        self._label = label
        self._aws_account_ids = aws_account_ids
        self._actions = actions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddPermissionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddPermissionRequest of this AddPermissionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def queue_url(self):
        """Gets the queue_url of this AddPermissionRequest.


        :return: The queue_url of this AddPermissionRequest.
        :rtype: str
        """
        return self._queue_url

    @queue_url.setter
    def queue_url(self, queue_url):
        """Sets the queue_url of this AddPermissionRequest.


        :param queue_url: The queue_url of this AddPermissionRequest.
        :type queue_url: str
        """
        if queue_url is None:
            raise ValueError("Invalid value for `queue_url`, must not be `None`")

        self._queue_url = queue_url

    @property
    def label(self):
        """Gets the label of this AddPermissionRequest.


        :return: The label of this AddPermissionRequest.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this AddPermissionRequest.


        :param label: The label of this AddPermissionRequest.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def aws_account_ids(self):
        """Gets the aws_account_ids of this AddPermissionRequest.


        :return: The aws_account_ids of this AddPermissionRequest.
        :rtype: List
        """
        return self._aws_account_ids

    @aws_account_ids.setter
    def aws_account_ids(self, aws_account_ids):
        """Sets the aws_account_ids of this AddPermissionRequest.


        :param aws_account_ids: The aws_account_ids of this AddPermissionRequest.
        :type aws_account_ids: List
        """
        if aws_account_ids is None:
            raise ValueError("Invalid value for `aws_account_ids`, must not be `None`")

        self._aws_account_ids = aws_account_ids

    @property
    def actions(self):
        """Gets the actions of this AddPermissionRequest.


        :return: The actions of this AddPermissionRequest.
        :rtype: List
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this AddPermissionRequest.


        :param actions: The actions of this AddPermissionRequest.
        :type actions: List
        """
        if actions is None:
            raise ValueError("Invalid value for `actions`, must not be `None`")

        self._actions = actions
