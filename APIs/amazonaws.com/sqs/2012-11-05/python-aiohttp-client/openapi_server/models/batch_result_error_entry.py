# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchResultErrorEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, sender_fault: bool=None, code: str=None, message: str=None):
        """BatchResultErrorEntry - a model defined in OpenAPI

        :param id: The id of this BatchResultErrorEntry.
        :param sender_fault: The sender_fault of this BatchResultErrorEntry.
        :param code: The code of this BatchResultErrorEntry.
        :param message: The message of this BatchResultErrorEntry.
        """
        self.openapi_types = {
            'id': str,
            'sender_fault': bool,
            'code': str,
            'message': str
        }

        self.attribute_map = {
            'id': 'Id',
            'sender_fault': 'SenderFault',
            'code': 'Code',
            'message': 'Message'
        }

        self._id = id
        self._sender_fault = sender_fault
        self._code = code
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchResultErrorEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchResultErrorEntry of this BatchResultErrorEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this BatchResultErrorEntry.


        :return: The id of this BatchResultErrorEntry.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BatchResultErrorEntry.


        :param id: The id of this BatchResultErrorEntry.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def sender_fault(self):
        """Gets the sender_fault of this BatchResultErrorEntry.


        :return: The sender_fault of this BatchResultErrorEntry.
        :rtype: bool
        """
        return self._sender_fault

    @sender_fault.setter
    def sender_fault(self, sender_fault):
        """Sets the sender_fault of this BatchResultErrorEntry.


        :param sender_fault: The sender_fault of this BatchResultErrorEntry.
        :type sender_fault: bool
        """
        if sender_fault is None:
            raise ValueError("Invalid value for `sender_fault`, must not be `None`")

        self._sender_fault = sender_fault

    @property
    def code(self):
        """Gets the code of this BatchResultErrorEntry.


        :return: The code of this BatchResultErrorEntry.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this BatchResultErrorEntry.


        :param code: The code of this BatchResultErrorEntry.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def message(self):
        """Gets the message of this BatchResultErrorEntry.


        :return: The message of this BatchResultErrorEntry.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this BatchResultErrorEntry.


        :param message: The message of this BatchResultErrorEntry.
        :type message: str
        """

        self._message = message
