# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteMessageBatchRequestEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, receipt_handle: str=None):
        """DeleteMessageBatchRequestEntry - a model defined in OpenAPI

        :param id: The id of this DeleteMessageBatchRequestEntry.
        :param receipt_handle: The receipt_handle of this DeleteMessageBatchRequestEntry.
        """
        self.openapi_types = {
            'id': str,
            'receipt_handle': str
        }

        self.attribute_map = {
            'id': 'Id',
            'receipt_handle': 'ReceiptHandle'
        }

        self._id = id
        self._receipt_handle = receipt_handle

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteMessageBatchRequestEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteMessageBatchRequestEntry of this DeleteMessageBatchRequestEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this DeleteMessageBatchRequestEntry.


        :return: The id of this DeleteMessageBatchRequestEntry.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeleteMessageBatchRequestEntry.


        :param id: The id of this DeleteMessageBatchRequestEntry.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def receipt_handle(self):
        """Gets the receipt_handle of this DeleteMessageBatchRequestEntry.


        :return: The receipt_handle of this DeleteMessageBatchRequestEntry.
        :rtype: str
        """
        return self._receipt_handle

    @receipt_handle.setter
    def receipt_handle(self, receipt_handle):
        """Sets the receipt_handle of this DeleteMessageBatchRequestEntry.


        :param receipt_handle: The receipt_handle of this DeleteMessageBatchRequestEntry.
        :type receipt_handle: str
        """
        if receipt_handle is None:
            raise ValueError("Invalid value for `receipt_handle`, must not be `None`")

        self._receipt_handle = receipt_handle
