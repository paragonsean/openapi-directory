# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.options import Options
from openapi_server import util


class StartTaskExecutionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, task_arn: str=None, override_options: Options=None, includes: List=None, excludes: List=None, tags: List=None):
        """StartTaskExecutionRequest - a model defined in OpenAPI

        :param task_arn: The task_arn of this StartTaskExecutionRequest.
        :param override_options: The override_options of this StartTaskExecutionRequest.
        :param includes: The includes of this StartTaskExecutionRequest.
        :param excludes: The excludes of this StartTaskExecutionRequest.
        :param tags: The tags of this StartTaskExecutionRequest.
        """
        self.openapi_types = {
            'task_arn': str,
            'override_options': Options,
            'includes': List,
            'excludes': List,
            'tags': List
        }

        self.attribute_map = {
            'task_arn': 'TaskArn',
            'override_options': 'OverrideOptions',
            'includes': 'Includes',
            'excludes': 'Excludes',
            'tags': 'Tags'
        }

        self._task_arn = task_arn
        self._override_options = override_options
        self._includes = includes
        self._excludes = excludes
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartTaskExecutionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartTaskExecutionRequest of this StartTaskExecutionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def task_arn(self):
        """Gets the task_arn of this StartTaskExecutionRequest.


        :return: The task_arn of this StartTaskExecutionRequest.
        :rtype: str
        """
        return self._task_arn

    @task_arn.setter
    def task_arn(self, task_arn):
        """Sets the task_arn of this StartTaskExecutionRequest.


        :param task_arn: The task_arn of this StartTaskExecutionRequest.
        :type task_arn: str
        """
        if task_arn is None:
            raise ValueError("Invalid value for `task_arn`, must not be `None`")

        self._task_arn = task_arn

    @property
    def override_options(self):
        """Gets the override_options of this StartTaskExecutionRequest.


        :return: The override_options of this StartTaskExecutionRequest.
        :rtype: Options
        """
        return self._override_options

    @override_options.setter
    def override_options(self, override_options):
        """Sets the override_options of this StartTaskExecutionRequest.


        :param override_options: The override_options of this StartTaskExecutionRequest.
        :type override_options: Options
        """

        self._override_options = override_options

    @property
    def includes(self):
        """Gets the includes of this StartTaskExecutionRequest.


        :return: The includes of this StartTaskExecutionRequest.
        :rtype: List
        """
        return self._includes

    @includes.setter
    def includes(self, includes):
        """Sets the includes of this StartTaskExecutionRequest.


        :param includes: The includes of this StartTaskExecutionRequest.
        :type includes: List
        """

        self._includes = includes

    @property
    def excludes(self):
        """Gets the excludes of this StartTaskExecutionRequest.


        :return: The excludes of this StartTaskExecutionRequest.
        :rtype: List
        """
        return self._excludes

    @excludes.setter
    def excludes(self, excludes):
        """Sets the excludes of this StartTaskExecutionRequest.


        :param excludes: The excludes of this StartTaskExecutionRequest.
        :type excludes: List
        """

        self._excludes = excludes

    @property
    def tags(self):
        """Gets the tags of this StartTaskExecutionRequest.


        :return: The tags of this StartTaskExecutionRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this StartTaskExecutionRequest.


        :param tags: The tags of this StartTaskExecutionRequest.
        :type tags: List
        """

        self._tags = tags
