# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Throughput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, read: float=None, write: float=None, other: float=None, total: float=None):
        """Throughput - a model defined in OpenAPI

        :param read: The read of this Throughput.
        :param write: The write of this Throughput.
        :param other: The other of this Throughput.
        :param total: The total of this Throughput.
        """
        self.openapi_types = {
            'read': float,
            'write': float,
            'other': float,
            'total': float
        }

        self.attribute_map = {
            'read': 'Read',
            'write': 'Write',
            'other': 'Other',
            'total': 'Total'
        }

        self._read = read
        self._write = write
        self._other = other
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Throughput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Throughput of this Throughput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def read(self):
        """Gets the read of this Throughput.


        :return: The read of this Throughput.
        :rtype: float
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this Throughput.


        :param read: The read of this Throughput.
        :type read: float
        """

        self._read = read

    @property
    def write(self):
        """Gets the write of this Throughput.


        :return: The write of this Throughput.
        :rtype: float
        """
        return self._write

    @write.setter
    def write(self, write):
        """Sets the write of this Throughput.


        :param write: The write of this Throughput.
        :type write: float
        """

        self._write = write

    @property
    def other(self):
        """Gets the other of this Throughput.


        :return: The other of this Throughput.
        :rtype: float
        """
        return self._other

    @other.setter
    def other(self, other):
        """Sets the other of this Throughput.


        :param other: The other of this Throughput.
        :type other: float
        """

        self._other = other

    @property
    def total(self):
        """Gets the total of this Throughput.


        :return: The total of this Throughput.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Throughput.


        :param total: The total of this Throughput.
        :type total: float
        """

        self._total = total
