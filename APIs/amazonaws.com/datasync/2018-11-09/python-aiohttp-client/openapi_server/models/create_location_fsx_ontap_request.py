# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fsx_protocol import FsxProtocol
from openapi_server import util


class CreateLocationFsxOntapRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, protocol: FsxProtocol=None, security_group_arns: List=None, storage_virtual_machine_arn: str=None, subdirectory: str=None, tags: List=None):
        """CreateLocationFsxOntapRequest - a model defined in OpenAPI

        :param protocol: The protocol of this CreateLocationFsxOntapRequest.
        :param security_group_arns: The security_group_arns of this CreateLocationFsxOntapRequest.
        :param storage_virtual_machine_arn: The storage_virtual_machine_arn of this CreateLocationFsxOntapRequest.
        :param subdirectory: The subdirectory of this CreateLocationFsxOntapRequest.
        :param tags: The tags of this CreateLocationFsxOntapRequest.
        """
        self.openapi_types = {
            'protocol': FsxProtocol,
            'security_group_arns': List,
            'storage_virtual_machine_arn': str,
            'subdirectory': str,
            'tags': List
        }

        self.attribute_map = {
            'protocol': 'Protocol',
            'security_group_arns': 'SecurityGroupArns',
            'storage_virtual_machine_arn': 'StorageVirtualMachineArn',
            'subdirectory': 'Subdirectory',
            'tags': 'Tags'
        }

        self._protocol = protocol
        self._security_group_arns = security_group_arns
        self._storage_virtual_machine_arn = storage_virtual_machine_arn
        self._subdirectory = subdirectory
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateLocationFsxOntapRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateLocationFsxOntapRequest of this CreateLocationFsxOntapRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def protocol(self):
        """Gets the protocol of this CreateLocationFsxOntapRequest.


        :return: The protocol of this CreateLocationFsxOntapRequest.
        :rtype: FsxProtocol
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this CreateLocationFsxOntapRequest.


        :param protocol: The protocol of this CreateLocationFsxOntapRequest.
        :type protocol: FsxProtocol
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")

        self._protocol = protocol

    @property
    def security_group_arns(self):
        """Gets the security_group_arns of this CreateLocationFsxOntapRequest.


        :return: The security_group_arns of this CreateLocationFsxOntapRequest.
        :rtype: List
        """
        return self._security_group_arns

    @security_group_arns.setter
    def security_group_arns(self, security_group_arns):
        """Sets the security_group_arns of this CreateLocationFsxOntapRequest.


        :param security_group_arns: The security_group_arns of this CreateLocationFsxOntapRequest.
        :type security_group_arns: List
        """
        if security_group_arns is None:
            raise ValueError("Invalid value for `security_group_arns`, must not be `None`")

        self._security_group_arns = security_group_arns

    @property
    def storage_virtual_machine_arn(self):
        """Gets the storage_virtual_machine_arn of this CreateLocationFsxOntapRequest.


        :return: The storage_virtual_machine_arn of this CreateLocationFsxOntapRequest.
        :rtype: str
        """
        return self._storage_virtual_machine_arn

    @storage_virtual_machine_arn.setter
    def storage_virtual_machine_arn(self, storage_virtual_machine_arn):
        """Sets the storage_virtual_machine_arn of this CreateLocationFsxOntapRequest.


        :param storage_virtual_machine_arn: The storage_virtual_machine_arn of this CreateLocationFsxOntapRequest.
        :type storage_virtual_machine_arn: str
        """
        if storage_virtual_machine_arn is None:
            raise ValueError("Invalid value for `storage_virtual_machine_arn`, must not be `None`")

        self._storage_virtual_machine_arn = storage_virtual_machine_arn

    @property
    def subdirectory(self):
        """Gets the subdirectory of this CreateLocationFsxOntapRequest.


        :return: The subdirectory of this CreateLocationFsxOntapRequest.
        :rtype: str
        """
        return self._subdirectory

    @subdirectory.setter
    def subdirectory(self, subdirectory):
        """Sets the subdirectory of this CreateLocationFsxOntapRequest.


        :param subdirectory: The subdirectory of this CreateLocationFsxOntapRequest.
        :type subdirectory: str
        """

        self._subdirectory = subdirectory

    @property
    def tags(self):
        """Gets the tags of this CreateLocationFsxOntapRequest.


        :return: The tags of this CreateLocationFsxOntapRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateLocationFsxOntapRequest.


        :param tags: The tags of this CreateLocationFsxOntapRequest.
        :type tags: List
        """

        self._tags = tags
