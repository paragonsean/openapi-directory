# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Recommendation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, storage_type: str=None, storage_configuration: Dict=None, estimated_monthly_storage_cost: str=None):
        """Recommendation - a model defined in OpenAPI

        :param storage_type: The storage_type of this Recommendation.
        :param storage_configuration: The storage_configuration of this Recommendation.
        :param estimated_monthly_storage_cost: The estimated_monthly_storage_cost of this Recommendation.
        """
        self.openapi_types = {
            'storage_type': str,
            'storage_configuration': Dict,
            'estimated_monthly_storage_cost': str
        }

        self.attribute_map = {
            'storage_type': 'StorageType',
            'storage_configuration': 'StorageConfiguration',
            'estimated_monthly_storage_cost': 'EstimatedMonthlyStorageCost'
        }

        self._storage_type = storage_type
        self._storage_configuration = storage_configuration
        self._estimated_monthly_storage_cost = estimated_monthly_storage_cost

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Recommendation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Recommendation of this Recommendation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def storage_type(self):
        """Gets the storage_type of this Recommendation.


        :return: The storage_type of this Recommendation.
        :rtype: str
        """
        return self._storage_type

    @storage_type.setter
    def storage_type(self, storage_type):
        """Sets the storage_type of this Recommendation.


        :param storage_type: The storage_type of this Recommendation.
        :type storage_type: str
        """

        self._storage_type = storage_type

    @property
    def storage_configuration(self):
        """Gets the storage_configuration of this Recommendation.


        :return: The storage_configuration of this Recommendation.
        :rtype: Dict
        """
        return self._storage_configuration

    @storage_configuration.setter
    def storage_configuration(self, storage_configuration):
        """Sets the storage_configuration of this Recommendation.


        :param storage_configuration: The storage_configuration of this Recommendation.
        :type storage_configuration: Dict
        """

        self._storage_configuration = storage_configuration

    @property
    def estimated_monthly_storage_cost(self):
        """Gets the estimated_monthly_storage_cost of this Recommendation.


        :return: The estimated_monthly_storage_cost of this Recommendation.
        :rtype: str
        """
        return self._estimated_monthly_storage_cost

    @estimated_monthly_storage_cost.setter
    def estimated_monthly_storage_cost(self, estimated_monthly_storage_cost):
        """Sets the estimated_monthly_storage_cost of this Recommendation.


        :param estimated_monthly_storage_cost: The estimated_monthly_storage_cost of this Recommendation.
        :type estimated_monthly_storage_cost: str
        """

        self._estimated_monthly_storage_cost = estimated_monthly_storage_cost
