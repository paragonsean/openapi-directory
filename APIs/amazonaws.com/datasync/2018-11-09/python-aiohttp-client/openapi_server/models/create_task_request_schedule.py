# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateTaskRequestSchedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, schedule_expression: str=None):
        """CreateTaskRequestSchedule - a model defined in OpenAPI

        :param schedule_expression: The schedule_expression of this CreateTaskRequestSchedule.
        """
        self.openapi_types = {
            'schedule_expression': str
        }

        self.attribute_map = {
            'schedule_expression': 'ScheduleExpression'
        }

        self._schedule_expression = schedule_expression

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateTaskRequestSchedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateTaskRequest_Schedule of this CreateTaskRequestSchedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def schedule_expression(self):
        """Gets the schedule_expression of this CreateTaskRequestSchedule.


        :return: The schedule_expression of this CreateTaskRequestSchedule.
        :rtype: str
        """
        return self._schedule_expression

    @schedule_expression.setter
    def schedule_expression(self, schedule_expression):
        """Sets the schedule_expression of this CreateTaskRequestSchedule.


        :param schedule_expression: The schedule_expression of this CreateTaskRequestSchedule.
        :type schedule_expression: str
        """
        if schedule_expression is None:
            raise ValueError("Invalid value for `schedule_expression`, must not be `None`")

        self._schedule_expression = schedule_expression
