# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_location_nfs_request_mount_options import CreateLocationNfsRequestMountOptions
from openapi_server.models.create_location_nfs_request_on_prem_config import CreateLocationNfsRequestOnPremConfig
from openapi_server import util


class CreateLocationNfsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subdirectory: str=None, server_hostname: str=None, on_prem_config: CreateLocationNfsRequestOnPremConfig=None, mount_options: CreateLocationNfsRequestMountOptions=None, tags: List=None):
        """CreateLocationNfsRequest - a model defined in OpenAPI

        :param subdirectory: The subdirectory of this CreateLocationNfsRequest.
        :param server_hostname: The server_hostname of this CreateLocationNfsRequest.
        :param on_prem_config: The on_prem_config of this CreateLocationNfsRequest.
        :param mount_options: The mount_options of this CreateLocationNfsRequest.
        :param tags: The tags of this CreateLocationNfsRequest.
        """
        self.openapi_types = {
            'subdirectory': str,
            'server_hostname': str,
            'on_prem_config': CreateLocationNfsRequestOnPremConfig,
            'mount_options': CreateLocationNfsRequestMountOptions,
            'tags': List
        }

        self.attribute_map = {
            'subdirectory': 'Subdirectory',
            'server_hostname': 'ServerHostname',
            'on_prem_config': 'OnPremConfig',
            'mount_options': 'MountOptions',
            'tags': 'Tags'
        }

        self._subdirectory = subdirectory
        self._server_hostname = server_hostname
        self._on_prem_config = on_prem_config
        self._mount_options = mount_options
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateLocationNfsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateLocationNfsRequest of this CreateLocationNfsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subdirectory(self):
        """Gets the subdirectory of this CreateLocationNfsRequest.


        :return: The subdirectory of this CreateLocationNfsRequest.
        :rtype: str
        """
        return self._subdirectory

    @subdirectory.setter
    def subdirectory(self, subdirectory):
        """Sets the subdirectory of this CreateLocationNfsRequest.


        :param subdirectory: The subdirectory of this CreateLocationNfsRequest.
        :type subdirectory: str
        """
        if subdirectory is None:
            raise ValueError("Invalid value for `subdirectory`, must not be `None`")

        self._subdirectory = subdirectory

    @property
    def server_hostname(self):
        """Gets the server_hostname of this CreateLocationNfsRequest.


        :return: The server_hostname of this CreateLocationNfsRequest.
        :rtype: str
        """
        return self._server_hostname

    @server_hostname.setter
    def server_hostname(self, server_hostname):
        """Sets the server_hostname of this CreateLocationNfsRequest.


        :param server_hostname: The server_hostname of this CreateLocationNfsRequest.
        :type server_hostname: str
        """
        if server_hostname is None:
            raise ValueError("Invalid value for `server_hostname`, must not be `None`")

        self._server_hostname = server_hostname

    @property
    def on_prem_config(self):
        """Gets the on_prem_config of this CreateLocationNfsRequest.


        :return: The on_prem_config of this CreateLocationNfsRequest.
        :rtype: CreateLocationNfsRequestOnPremConfig
        """
        return self._on_prem_config

    @on_prem_config.setter
    def on_prem_config(self, on_prem_config):
        """Sets the on_prem_config of this CreateLocationNfsRequest.


        :param on_prem_config: The on_prem_config of this CreateLocationNfsRequest.
        :type on_prem_config: CreateLocationNfsRequestOnPremConfig
        """
        if on_prem_config is None:
            raise ValueError("Invalid value for `on_prem_config`, must not be `None`")

        self._on_prem_config = on_prem_config

    @property
    def mount_options(self):
        """Gets the mount_options of this CreateLocationNfsRequest.


        :return: The mount_options of this CreateLocationNfsRequest.
        :rtype: CreateLocationNfsRequestMountOptions
        """
        return self._mount_options

    @mount_options.setter
    def mount_options(self, mount_options):
        """Sets the mount_options of this CreateLocationNfsRequest.


        :param mount_options: The mount_options of this CreateLocationNfsRequest.
        :type mount_options: CreateLocationNfsRequestMountOptions
        """

        self._mount_options = mount_options

    @property
    def tags(self):
        """Gets the tags of this CreateLocationNfsRequest.


        :return: The tags of this CreateLocationNfsRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateLocationNfsRequest.


        :param tags: The tags of this CreateLocationNfsRequest.
        :type tags: List
        """

        self._tags = tags
