# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateLocationFsxWindowsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subdirectory: str=None, fsx_filesystem_arn: str=None, security_group_arns: List=None, tags: List=None, user: str=None, domain: str=None, password: str=None):
        """CreateLocationFsxWindowsRequest - a model defined in OpenAPI

        :param subdirectory: The subdirectory of this CreateLocationFsxWindowsRequest.
        :param fsx_filesystem_arn: The fsx_filesystem_arn of this CreateLocationFsxWindowsRequest.
        :param security_group_arns: The security_group_arns of this CreateLocationFsxWindowsRequest.
        :param tags: The tags of this CreateLocationFsxWindowsRequest.
        :param user: The user of this CreateLocationFsxWindowsRequest.
        :param domain: The domain of this CreateLocationFsxWindowsRequest.
        :param password: The password of this CreateLocationFsxWindowsRequest.
        """
        self.openapi_types = {
            'subdirectory': str,
            'fsx_filesystem_arn': str,
            'security_group_arns': List,
            'tags': List,
            'user': str,
            'domain': str,
            'password': str
        }

        self.attribute_map = {
            'subdirectory': 'Subdirectory',
            'fsx_filesystem_arn': 'FsxFilesystemArn',
            'security_group_arns': 'SecurityGroupArns',
            'tags': 'Tags',
            'user': 'User',
            'domain': 'Domain',
            'password': 'Password'
        }

        self._subdirectory = subdirectory
        self._fsx_filesystem_arn = fsx_filesystem_arn
        self._security_group_arns = security_group_arns
        self._tags = tags
        self._user = user
        self._domain = domain
        self._password = password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateLocationFsxWindowsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateLocationFsxWindowsRequest of this CreateLocationFsxWindowsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subdirectory(self):
        """Gets the subdirectory of this CreateLocationFsxWindowsRequest.


        :return: The subdirectory of this CreateLocationFsxWindowsRequest.
        :rtype: str
        """
        return self._subdirectory

    @subdirectory.setter
    def subdirectory(self, subdirectory):
        """Sets the subdirectory of this CreateLocationFsxWindowsRequest.


        :param subdirectory: The subdirectory of this CreateLocationFsxWindowsRequest.
        :type subdirectory: str
        """

        self._subdirectory = subdirectory

    @property
    def fsx_filesystem_arn(self):
        """Gets the fsx_filesystem_arn of this CreateLocationFsxWindowsRequest.


        :return: The fsx_filesystem_arn of this CreateLocationFsxWindowsRequest.
        :rtype: str
        """
        return self._fsx_filesystem_arn

    @fsx_filesystem_arn.setter
    def fsx_filesystem_arn(self, fsx_filesystem_arn):
        """Sets the fsx_filesystem_arn of this CreateLocationFsxWindowsRequest.


        :param fsx_filesystem_arn: The fsx_filesystem_arn of this CreateLocationFsxWindowsRequest.
        :type fsx_filesystem_arn: str
        """
        if fsx_filesystem_arn is None:
            raise ValueError("Invalid value for `fsx_filesystem_arn`, must not be `None`")

        self._fsx_filesystem_arn = fsx_filesystem_arn

    @property
    def security_group_arns(self):
        """Gets the security_group_arns of this CreateLocationFsxWindowsRequest.


        :return: The security_group_arns of this CreateLocationFsxWindowsRequest.
        :rtype: List
        """
        return self._security_group_arns

    @security_group_arns.setter
    def security_group_arns(self, security_group_arns):
        """Sets the security_group_arns of this CreateLocationFsxWindowsRequest.


        :param security_group_arns: The security_group_arns of this CreateLocationFsxWindowsRequest.
        :type security_group_arns: List
        """
        if security_group_arns is None:
            raise ValueError("Invalid value for `security_group_arns`, must not be `None`")

        self._security_group_arns = security_group_arns

    @property
    def tags(self):
        """Gets the tags of this CreateLocationFsxWindowsRequest.


        :return: The tags of this CreateLocationFsxWindowsRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateLocationFsxWindowsRequest.


        :param tags: The tags of this CreateLocationFsxWindowsRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def user(self):
        """Gets the user of this CreateLocationFsxWindowsRequest.


        :return: The user of this CreateLocationFsxWindowsRequest.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this CreateLocationFsxWindowsRequest.


        :param user: The user of this CreateLocationFsxWindowsRequest.
        :type user: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user

    @property
    def domain(self):
        """Gets the domain of this CreateLocationFsxWindowsRequest.


        :return: The domain of this CreateLocationFsxWindowsRequest.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this CreateLocationFsxWindowsRequest.


        :param domain: The domain of this CreateLocationFsxWindowsRequest.
        :type domain: str
        """

        self._domain = domain

    @property
    def password(self):
        """Gets the password of this CreateLocationFsxWindowsRequest.


        :return: The password of this CreateLocationFsxWindowsRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CreateLocationFsxWindowsRequest.


        :param password: The password of this CreateLocationFsxWindowsRequest.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password
