# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class S3Config(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket_access_role_arn: str=None):
        """S3Config - a model defined in OpenAPI

        :param bucket_access_role_arn: The bucket_access_role_arn of this S3Config.
        """
        self.openapi_types = {
            'bucket_access_role_arn': str
        }

        self.attribute_map = {
            'bucket_access_role_arn': 'BucketAccessRoleArn'
        }

        self._bucket_access_role_arn = bucket_access_role_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'S3Config':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The S3Config of this S3Config.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket_access_role_arn(self):
        """Gets the bucket_access_role_arn of this S3Config.


        :return: The bucket_access_role_arn of this S3Config.
        :rtype: str
        """
        return self._bucket_access_role_arn

    @bucket_access_role_arn.setter
    def bucket_access_role_arn(self, bucket_access_role_arn):
        """Sets the bucket_access_role_arn of this S3Config.


        :param bucket_access_role_arn: The bucket_access_role_arn of this S3Config.
        :type bucket_access_role_arn: str
        """
        if bucket_access_role_arn is None:
            raise ValueError("Invalid value for `bucket_access_role_arn`, must not be `None`")

        self._bucket_access_role_arn = bucket_access_role_arn
