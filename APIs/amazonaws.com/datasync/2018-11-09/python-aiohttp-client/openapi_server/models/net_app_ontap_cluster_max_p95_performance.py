# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NetAppONTAPClusterMaxP95Performance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, iops_read: float=None, iops_write: float=None, iops_other: float=None, iops_total: float=None, throughput_read: float=None, throughput_write: float=None, throughput_other: float=None, throughput_total: float=None, latency_read: float=None, latency_write: float=None, latency_other: float=None):
        """NetAppONTAPClusterMaxP95Performance - a model defined in OpenAPI

        :param iops_read: The iops_read of this NetAppONTAPClusterMaxP95Performance.
        :param iops_write: The iops_write of this NetAppONTAPClusterMaxP95Performance.
        :param iops_other: The iops_other of this NetAppONTAPClusterMaxP95Performance.
        :param iops_total: The iops_total of this NetAppONTAPClusterMaxP95Performance.
        :param throughput_read: The throughput_read of this NetAppONTAPClusterMaxP95Performance.
        :param throughput_write: The throughput_write of this NetAppONTAPClusterMaxP95Performance.
        :param throughput_other: The throughput_other of this NetAppONTAPClusterMaxP95Performance.
        :param throughput_total: The throughput_total of this NetAppONTAPClusterMaxP95Performance.
        :param latency_read: The latency_read of this NetAppONTAPClusterMaxP95Performance.
        :param latency_write: The latency_write of this NetAppONTAPClusterMaxP95Performance.
        :param latency_other: The latency_other of this NetAppONTAPClusterMaxP95Performance.
        """
        self.openapi_types = {
            'iops_read': float,
            'iops_write': float,
            'iops_other': float,
            'iops_total': float,
            'throughput_read': float,
            'throughput_write': float,
            'throughput_other': float,
            'throughput_total': float,
            'latency_read': float,
            'latency_write': float,
            'latency_other': float
        }

        self.attribute_map = {
            'iops_read': 'IopsRead',
            'iops_write': 'IopsWrite',
            'iops_other': 'IopsOther',
            'iops_total': 'IopsTotal',
            'throughput_read': 'ThroughputRead',
            'throughput_write': 'ThroughputWrite',
            'throughput_other': 'ThroughputOther',
            'throughput_total': 'ThroughputTotal',
            'latency_read': 'LatencyRead',
            'latency_write': 'LatencyWrite',
            'latency_other': 'LatencyOther'
        }

        self._iops_read = iops_read
        self._iops_write = iops_write
        self._iops_other = iops_other
        self._iops_total = iops_total
        self._throughput_read = throughput_read
        self._throughput_write = throughput_write
        self._throughput_other = throughput_other
        self._throughput_total = throughput_total
        self._latency_read = latency_read
        self._latency_write = latency_write
        self._latency_other = latency_other

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetAppONTAPClusterMaxP95Performance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetAppONTAPCluster_MaxP95Performance of this NetAppONTAPClusterMaxP95Performance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def iops_read(self):
        """Gets the iops_read of this NetAppONTAPClusterMaxP95Performance.


        :return: The iops_read of this NetAppONTAPClusterMaxP95Performance.
        :rtype: float
        """
        return self._iops_read

    @iops_read.setter
    def iops_read(self, iops_read):
        """Sets the iops_read of this NetAppONTAPClusterMaxP95Performance.


        :param iops_read: The iops_read of this NetAppONTAPClusterMaxP95Performance.
        :type iops_read: float
        """

        self._iops_read = iops_read

    @property
    def iops_write(self):
        """Gets the iops_write of this NetAppONTAPClusterMaxP95Performance.


        :return: The iops_write of this NetAppONTAPClusterMaxP95Performance.
        :rtype: float
        """
        return self._iops_write

    @iops_write.setter
    def iops_write(self, iops_write):
        """Sets the iops_write of this NetAppONTAPClusterMaxP95Performance.


        :param iops_write: The iops_write of this NetAppONTAPClusterMaxP95Performance.
        :type iops_write: float
        """

        self._iops_write = iops_write

    @property
    def iops_other(self):
        """Gets the iops_other of this NetAppONTAPClusterMaxP95Performance.


        :return: The iops_other of this NetAppONTAPClusterMaxP95Performance.
        :rtype: float
        """
        return self._iops_other

    @iops_other.setter
    def iops_other(self, iops_other):
        """Sets the iops_other of this NetAppONTAPClusterMaxP95Performance.


        :param iops_other: The iops_other of this NetAppONTAPClusterMaxP95Performance.
        :type iops_other: float
        """

        self._iops_other = iops_other

    @property
    def iops_total(self):
        """Gets the iops_total of this NetAppONTAPClusterMaxP95Performance.


        :return: The iops_total of this NetAppONTAPClusterMaxP95Performance.
        :rtype: float
        """
        return self._iops_total

    @iops_total.setter
    def iops_total(self, iops_total):
        """Sets the iops_total of this NetAppONTAPClusterMaxP95Performance.


        :param iops_total: The iops_total of this NetAppONTAPClusterMaxP95Performance.
        :type iops_total: float
        """

        self._iops_total = iops_total

    @property
    def throughput_read(self):
        """Gets the throughput_read of this NetAppONTAPClusterMaxP95Performance.


        :return: The throughput_read of this NetAppONTAPClusterMaxP95Performance.
        :rtype: float
        """
        return self._throughput_read

    @throughput_read.setter
    def throughput_read(self, throughput_read):
        """Sets the throughput_read of this NetAppONTAPClusterMaxP95Performance.


        :param throughput_read: The throughput_read of this NetAppONTAPClusterMaxP95Performance.
        :type throughput_read: float
        """

        self._throughput_read = throughput_read

    @property
    def throughput_write(self):
        """Gets the throughput_write of this NetAppONTAPClusterMaxP95Performance.


        :return: The throughput_write of this NetAppONTAPClusterMaxP95Performance.
        :rtype: float
        """
        return self._throughput_write

    @throughput_write.setter
    def throughput_write(self, throughput_write):
        """Sets the throughput_write of this NetAppONTAPClusterMaxP95Performance.


        :param throughput_write: The throughput_write of this NetAppONTAPClusterMaxP95Performance.
        :type throughput_write: float
        """

        self._throughput_write = throughput_write

    @property
    def throughput_other(self):
        """Gets the throughput_other of this NetAppONTAPClusterMaxP95Performance.


        :return: The throughput_other of this NetAppONTAPClusterMaxP95Performance.
        :rtype: float
        """
        return self._throughput_other

    @throughput_other.setter
    def throughput_other(self, throughput_other):
        """Sets the throughput_other of this NetAppONTAPClusterMaxP95Performance.


        :param throughput_other: The throughput_other of this NetAppONTAPClusterMaxP95Performance.
        :type throughput_other: float
        """

        self._throughput_other = throughput_other

    @property
    def throughput_total(self):
        """Gets the throughput_total of this NetAppONTAPClusterMaxP95Performance.


        :return: The throughput_total of this NetAppONTAPClusterMaxP95Performance.
        :rtype: float
        """
        return self._throughput_total

    @throughput_total.setter
    def throughput_total(self, throughput_total):
        """Sets the throughput_total of this NetAppONTAPClusterMaxP95Performance.


        :param throughput_total: The throughput_total of this NetAppONTAPClusterMaxP95Performance.
        :type throughput_total: float
        """

        self._throughput_total = throughput_total

    @property
    def latency_read(self):
        """Gets the latency_read of this NetAppONTAPClusterMaxP95Performance.


        :return: The latency_read of this NetAppONTAPClusterMaxP95Performance.
        :rtype: float
        """
        return self._latency_read

    @latency_read.setter
    def latency_read(self, latency_read):
        """Sets the latency_read of this NetAppONTAPClusterMaxP95Performance.


        :param latency_read: The latency_read of this NetAppONTAPClusterMaxP95Performance.
        :type latency_read: float
        """

        self._latency_read = latency_read

    @property
    def latency_write(self):
        """Gets the latency_write of this NetAppONTAPClusterMaxP95Performance.


        :return: The latency_write of this NetAppONTAPClusterMaxP95Performance.
        :rtype: float
        """
        return self._latency_write

    @latency_write.setter
    def latency_write(self, latency_write):
        """Sets the latency_write of this NetAppONTAPClusterMaxP95Performance.


        :param latency_write: The latency_write of this NetAppONTAPClusterMaxP95Performance.
        :type latency_write: float
        """

        self._latency_write = latency_write

    @property
    def latency_other(self):
        """Gets the latency_other of this NetAppONTAPClusterMaxP95Performance.


        :return: The latency_other of this NetAppONTAPClusterMaxP95Performance.
        :rtype: float
        """
        return self._latency_other

    @latency_other.setter
    def latency_other(self, latency_other):
        """Sets the latency_other of this NetAppONTAPClusterMaxP95Performance.


        :param latency_other: The latency_other of this NetAppONTAPClusterMaxP95Performance.
        :type latency_other: float
        """

        self._latency_other = latency_other
