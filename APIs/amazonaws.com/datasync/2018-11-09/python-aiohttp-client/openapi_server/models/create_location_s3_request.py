# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.s3_config import S3Config
from openapi_server.models.s3_storage_class import S3StorageClass
from openapi_server import util


class CreateLocationS3Request(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subdirectory: str=None, s3_bucket_arn: str=None, s3_storage_class: S3StorageClass=None, s3_config: S3Config=None, agent_arns: List=None, tags: List=None):
        """CreateLocationS3Request - a model defined in OpenAPI

        :param subdirectory: The subdirectory of this CreateLocationS3Request.
        :param s3_bucket_arn: The s3_bucket_arn of this CreateLocationS3Request.
        :param s3_storage_class: The s3_storage_class of this CreateLocationS3Request.
        :param s3_config: The s3_config of this CreateLocationS3Request.
        :param agent_arns: The agent_arns of this CreateLocationS3Request.
        :param tags: The tags of this CreateLocationS3Request.
        """
        self.openapi_types = {
            'subdirectory': str,
            's3_bucket_arn': str,
            's3_storage_class': S3StorageClass,
            's3_config': S3Config,
            'agent_arns': List,
            'tags': List
        }

        self.attribute_map = {
            'subdirectory': 'Subdirectory',
            's3_bucket_arn': 'S3BucketArn',
            's3_storage_class': 'S3StorageClass',
            's3_config': 'S3Config',
            'agent_arns': 'AgentArns',
            'tags': 'Tags'
        }

        self._subdirectory = subdirectory
        self._s3_bucket_arn = s3_bucket_arn
        self._s3_storage_class = s3_storage_class
        self._s3_config = s3_config
        self._agent_arns = agent_arns
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateLocationS3Request':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateLocationS3Request of this CreateLocationS3Request.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subdirectory(self):
        """Gets the subdirectory of this CreateLocationS3Request.


        :return: The subdirectory of this CreateLocationS3Request.
        :rtype: str
        """
        return self._subdirectory

    @subdirectory.setter
    def subdirectory(self, subdirectory):
        """Sets the subdirectory of this CreateLocationS3Request.


        :param subdirectory: The subdirectory of this CreateLocationS3Request.
        :type subdirectory: str
        """

        self._subdirectory = subdirectory

    @property
    def s3_bucket_arn(self):
        """Gets the s3_bucket_arn of this CreateLocationS3Request.


        :return: The s3_bucket_arn of this CreateLocationS3Request.
        :rtype: str
        """
        return self._s3_bucket_arn

    @s3_bucket_arn.setter
    def s3_bucket_arn(self, s3_bucket_arn):
        """Sets the s3_bucket_arn of this CreateLocationS3Request.


        :param s3_bucket_arn: The s3_bucket_arn of this CreateLocationS3Request.
        :type s3_bucket_arn: str
        """
        if s3_bucket_arn is None:
            raise ValueError("Invalid value for `s3_bucket_arn`, must not be `None`")

        self._s3_bucket_arn = s3_bucket_arn

    @property
    def s3_storage_class(self):
        """Gets the s3_storage_class of this CreateLocationS3Request.


        :return: The s3_storage_class of this CreateLocationS3Request.
        :rtype: S3StorageClass
        """
        return self._s3_storage_class

    @s3_storage_class.setter
    def s3_storage_class(self, s3_storage_class):
        """Sets the s3_storage_class of this CreateLocationS3Request.


        :param s3_storage_class: The s3_storage_class of this CreateLocationS3Request.
        :type s3_storage_class: S3StorageClass
        """

        self._s3_storage_class = s3_storage_class

    @property
    def s3_config(self):
        """Gets the s3_config of this CreateLocationS3Request.


        :return: The s3_config of this CreateLocationS3Request.
        :rtype: S3Config
        """
        return self._s3_config

    @s3_config.setter
    def s3_config(self, s3_config):
        """Sets the s3_config of this CreateLocationS3Request.


        :param s3_config: The s3_config of this CreateLocationS3Request.
        :type s3_config: S3Config
        """
        if s3_config is None:
            raise ValueError("Invalid value for `s3_config`, must not be `None`")

        self._s3_config = s3_config

    @property
    def agent_arns(self):
        """Gets the agent_arns of this CreateLocationS3Request.


        :return: The agent_arns of this CreateLocationS3Request.
        :rtype: List
        """
        return self._agent_arns

    @agent_arns.setter
    def agent_arns(self, agent_arns):
        """Sets the agent_arns of this CreateLocationS3Request.


        :param agent_arns: The agent_arns of this CreateLocationS3Request.
        :type agent_arns: List
        """

        self._agent_arns = agent_arns

    @property
    def tags(self):
        """Gets the tags of this CreateLocationS3Request.


        :return: The tags of this CreateLocationS3Request.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateLocationS3Request.


        :param tags: The tags of this CreateLocationS3Request.
        :type tags: List
        """

        self._tags = tags
