# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_location_smb_request_mount_options import CreateLocationSmbRequestMountOptions
from openapi_server import util


class CreateLocationSmbRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subdirectory: str=None, server_hostname: str=None, user: str=None, domain: str=None, password: str=None, agent_arns: List=None, mount_options: CreateLocationSmbRequestMountOptions=None, tags: List=None):
        """CreateLocationSmbRequest - a model defined in OpenAPI

        :param subdirectory: The subdirectory of this CreateLocationSmbRequest.
        :param server_hostname: The server_hostname of this CreateLocationSmbRequest.
        :param user: The user of this CreateLocationSmbRequest.
        :param domain: The domain of this CreateLocationSmbRequest.
        :param password: The password of this CreateLocationSmbRequest.
        :param agent_arns: The agent_arns of this CreateLocationSmbRequest.
        :param mount_options: The mount_options of this CreateLocationSmbRequest.
        :param tags: The tags of this CreateLocationSmbRequest.
        """
        self.openapi_types = {
            'subdirectory': str,
            'server_hostname': str,
            'user': str,
            'domain': str,
            'password': str,
            'agent_arns': List,
            'mount_options': CreateLocationSmbRequestMountOptions,
            'tags': List
        }

        self.attribute_map = {
            'subdirectory': 'Subdirectory',
            'server_hostname': 'ServerHostname',
            'user': 'User',
            'domain': 'Domain',
            'password': 'Password',
            'agent_arns': 'AgentArns',
            'mount_options': 'MountOptions',
            'tags': 'Tags'
        }

        self._subdirectory = subdirectory
        self._server_hostname = server_hostname
        self._user = user
        self._domain = domain
        self._password = password
        self._agent_arns = agent_arns
        self._mount_options = mount_options
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateLocationSmbRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateLocationSmbRequest of this CreateLocationSmbRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subdirectory(self):
        """Gets the subdirectory of this CreateLocationSmbRequest.


        :return: The subdirectory of this CreateLocationSmbRequest.
        :rtype: str
        """
        return self._subdirectory

    @subdirectory.setter
    def subdirectory(self, subdirectory):
        """Sets the subdirectory of this CreateLocationSmbRequest.


        :param subdirectory: The subdirectory of this CreateLocationSmbRequest.
        :type subdirectory: str
        """
        if subdirectory is None:
            raise ValueError("Invalid value for `subdirectory`, must not be `None`")

        self._subdirectory = subdirectory

    @property
    def server_hostname(self):
        """Gets the server_hostname of this CreateLocationSmbRequest.


        :return: The server_hostname of this CreateLocationSmbRequest.
        :rtype: str
        """
        return self._server_hostname

    @server_hostname.setter
    def server_hostname(self, server_hostname):
        """Sets the server_hostname of this CreateLocationSmbRequest.


        :param server_hostname: The server_hostname of this CreateLocationSmbRequest.
        :type server_hostname: str
        """
        if server_hostname is None:
            raise ValueError("Invalid value for `server_hostname`, must not be `None`")

        self._server_hostname = server_hostname

    @property
    def user(self):
        """Gets the user of this CreateLocationSmbRequest.


        :return: The user of this CreateLocationSmbRequest.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this CreateLocationSmbRequest.


        :param user: The user of this CreateLocationSmbRequest.
        :type user: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user

    @property
    def domain(self):
        """Gets the domain of this CreateLocationSmbRequest.


        :return: The domain of this CreateLocationSmbRequest.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this CreateLocationSmbRequest.


        :param domain: The domain of this CreateLocationSmbRequest.
        :type domain: str
        """

        self._domain = domain

    @property
    def password(self):
        """Gets the password of this CreateLocationSmbRequest.


        :return: The password of this CreateLocationSmbRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CreateLocationSmbRequest.


        :param password: The password of this CreateLocationSmbRequest.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def agent_arns(self):
        """Gets the agent_arns of this CreateLocationSmbRequest.


        :return: The agent_arns of this CreateLocationSmbRequest.
        :rtype: List
        """
        return self._agent_arns

    @agent_arns.setter
    def agent_arns(self, agent_arns):
        """Sets the agent_arns of this CreateLocationSmbRequest.


        :param agent_arns: The agent_arns of this CreateLocationSmbRequest.
        :type agent_arns: List
        """
        if agent_arns is None:
            raise ValueError("Invalid value for `agent_arns`, must not be `None`")

        self._agent_arns = agent_arns

    @property
    def mount_options(self):
        """Gets the mount_options of this CreateLocationSmbRequest.


        :return: The mount_options of this CreateLocationSmbRequest.
        :rtype: CreateLocationSmbRequestMountOptions
        """
        return self._mount_options

    @mount_options.setter
    def mount_options(self, mount_options):
        """Sets the mount_options of this CreateLocationSmbRequest.


        :param mount_options: The mount_options of this CreateLocationSmbRequest.
        :type mount_options: CreateLocationSmbRequestMountOptions
        """

        self._mount_options = mount_options

    @property
    def tags(self):
        """Gets the tags of this CreateLocationSmbRequest.


        :return: The tags of this CreateLocationSmbRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateLocationSmbRequest.


        :param tags: The tags of this CreateLocationSmbRequest.
        :type tags: List
        """

        self._tags = tags
