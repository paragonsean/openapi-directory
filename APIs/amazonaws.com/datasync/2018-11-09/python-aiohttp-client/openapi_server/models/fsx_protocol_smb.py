# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.smb_mount_options import SmbMountOptions
from openapi_server import util


class FsxProtocolSmb(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain: str=None, mount_options: SmbMountOptions=None, password: str=None, user: str=None):
        """FsxProtocolSmb - a model defined in OpenAPI

        :param domain: The domain of this FsxProtocolSmb.
        :param mount_options: The mount_options of this FsxProtocolSmb.
        :param password: The password of this FsxProtocolSmb.
        :param user: The user of this FsxProtocolSmb.
        """
        self.openapi_types = {
            'domain': str,
            'mount_options': SmbMountOptions,
            'password': str,
            'user': str
        }

        self.attribute_map = {
            'domain': 'Domain',
            'mount_options': 'MountOptions',
            'password': 'Password',
            'user': 'User'
        }

        self._domain = domain
        self._mount_options = mount_options
        self._password = password
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FsxProtocolSmb':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FsxProtocolSmb of this FsxProtocolSmb.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this FsxProtocolSmb.


        :return: The domain of this FsxProtocolSmb.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this FsxProtocolSmb.


        :param domain: The domain of this FsxProtocolSmb.
        :type domain: str
        """

        self._domain = domain

    @property
    def mount_options(self):
        """Gets the mount_options of this FsxProtocolSmb.


        :return: The mount_options of this FsxProtocolSmb.
        :rtype: SmbMountOptions
        """
        return self._mount_options

    @mount_options.setter
    def mount_options(self, mount_options):
        """Sets the mount_options of this FsxProtocolSmb.


        :param mount_options: The mount_options of this FsxProtocolSmb.
        :type mount_options: SmbMountOptions
        """

        self._mount_options = mount_options

    @property
    def password(self):
        """Gets the password of this FsxProtocolSmb.


        :return: The password of this FsxProtocolSmb.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this FsxProtocolSmb.


        :param password: The password of this FsxProtocolSmb.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def user(self):
        """Gets the user of this FsxProtocolSmb.


        :return: The user of this FsxProtocolSmb.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this FsxProtocolSmb.


        :param user: The user of this FsxProtocolSmb.
        :type user: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
