# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResourceMetricsCapacity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, used: int=None, provisioned: int=None, logical_used: int=None, cluster_cloud_storage_used: int=None):
        """ResourceMetricsCapacity - a model defined in OpenAPI

        :param used: The used of this ResourceMetricsCapacity.
        :param provisioned: The provisioned of this ResourceMetricsCapacity.
        :param logical_used: The logical_used of this ResourceMetricsCapacity.
        :param cluster_cloud_storage_used: The cluster_cloud_storage_used of this ResourceMetricsCapacity.
        """
        self.openapi_types = {
            'used': int,
            'provisioned': int,
            'logical_used': int,
            'cluster_cloud_storage_used': int
        }

        self.attribute_map = {
            'used': 'Used',
            'provisioned': 'Provisioned',
            'logical_used': 'LogicalUsed',
            'cluster_cloud_storage_used': 'ClusterCloudStorageUsed'
        }

        self._used = used
        self._provisioned = provisioned
        self._logical_used = logical_used
        self._cluster_cloud_storage_used = cluster_cloud_storage_used

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceMetricsCapacity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceMetrics_Capacity of this ResourceMetricsCapacity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def used(self):
        """Gets the used of this ResourceMetricsCapacity.


        :return: The used of this ResourceMetricsCapacity.
        :rtype: int
        """
        return self._used

    @used.setter
    def used(self, used):
        """Sets the used of this ResourceMetricsCapacity.


        :param used: The used of this ResourceMetricsCapacity.
        :type used: int
        """

        self._used = used

    @property
    def provisioned(self):
        """Gets the provisioned of this ResourceMetricsCapacity.


        :return: The provisioned of this ResourceMetricsCapacity.
        :rtype: int
        """
        return self._provisioned

    @provisioned.setter
    def provisioned(self, provisioned):
        """Sets the provisioned of this ResourceMetricsCapacity.


        :param provisioned: The provisioned of this ResourceMetricsCapacity.
        :type provisioned: int
        """

        self._provisioned = provisioned

    @property
    def logical_used(self):
        """Gets the logical_used of this ResourceMetricsCapacity.


        :return: The logical_used of this ResourceMetricsCapacity.
        :rtype: int
        """
        return self._logical_used

    @logical_used.setter
    def logical_used(self, logical_used):
        """Sets the logical_used of this ResourceMetricsCapacity.


        :param logical_used: The logical_used of this ResourceMetricsCapacity.
        :type logical_used: int
        """

        self._logical_used = logical_used

    @property
    def cluster_cloud_storage_used(self):
        """Gets the cluster_cloud_storage_used of this ResourceMetricsCapacity.


        :return: The cluster_cloud_storage_used of this ResourceMetricsCapacity.
        :rtype: int
        """
        return self._cluster_cloud_storage_used

    @cluster_cloud_storage_used.setter
    def cluster_cloud_storage_used(self, cluster_cloud_storage_used):
        """Sets the cluster_cloud_storage_used of this ResourceMetricsCapacity.


        :param cluster_cloud_storage_used: The cluster_cloud_storage_used of this ResourceMetricsCapacity.
        :type cluster_cloud_storage_used: int
        """

        self._cluster_cloud_storage_used = cluster_cloud_storage_used
