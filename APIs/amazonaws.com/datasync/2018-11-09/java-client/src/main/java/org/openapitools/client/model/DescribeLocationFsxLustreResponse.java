/*
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeLocationFsxLustreResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:05.755663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeLocationFsxLustreResponse {
  public static final String SERIALIZED_NAME_LOCATION_ARN = "LocationArn";
  @SerializedName(SERIALIZED_NAME_LOCATION_ARN)
  private String locationArn;

  public static final String SERIALIZED_NAME_LOCATION_URI = "LocationUri";
  @SerializedName(SERIALIZED_NAME_LOCATION_URI)
  private String locationUri;

  public static final String SERIALIZED_NAME_SECURITY_GROUP_ARNS = "SecurityGroupArns";
  @SerializedName(SERIALIZED_NAME_SECURITY_GROUP_ARNS)
  private List securityGroupArns;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public DescribeLocationFsxLustreResponse() {
  }

  public DescribeLocationFsxLustreResponse locationArn(String locationArn) {
    this.locationArn = locationArn;
    return this;
  }

  /**
   * Get locationArn
   * @return locationArn
   */
  @javax.annotation.Nullable
  public String getLocationArn() {
    return locationArn;
  }

  public void setLocationArn(String locationArn) {
    this.locationArn = locationArn;
  }


  public DescribeLocationFsxLustreResponse locationUri(String locationUri) {
    this.locationUri = locationUri;
    return this;
  }

  /**
   * Get locationUri
   * @return locationUri
   */
  @javax.annotation.Nullable
  public String getLocationUri() {
    return locationUri;
  }

  public void setLocationUri(String locationUri) {
    this.locationUri = locationUri;
  }


  public DescribeLocationFsxLustreResponse securityGroupArns(List securityGroupArns) {
    this.securityGroupArns = securityGroupArns;
    return this;
  }

  /**
   * Get securityGroupArns
   * @return securityGroupArns
   */
  @javax.annotation.Nullable
  public List getSecurityGroupArns() {
    return securityGroupArns;
  }

  public void setSecurityGroupArns(List securityGroupArns) {
    this.securityGroupArns = securityGroupArns;
  }


  public DescribeLocationFsxLustreResponse creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeLocationFsxLustreResponse describeLocationFsxLustreResponse = (DescribeLocationFsxLustreResponse) o;
    return Objects.equals(this.locationArn, describeLocationFsxLustreResponse.locationArn) &&
        Objects.equals(this.locationUri, describeLocationFsxLustreResponse.locationUri) &&
        Objects.equals(this.securityGroupArns, describeLocationFsxLustreResponse.securityGroupArns) &&
        Objects.equals(this.creationTime, describeLocationFsxLustreResponse.creationTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(locationArn, locationUri, securityGroupArns, creationTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeLocationFsxLustreResponse {\n");
    sb.append("    locationArn: ").append(toIndentedString(locationArn)).append("\n");
    sb.append("    locationUri: ").append(toIndentedString(locationUri)).append("\n");
    sb.append("    securityGroupArns: ").append(toIndentedString(securityGroupArns)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LocationArn");
    openapiFields.add("LocationUri");
    openapiFields.add("SecurityGroupArns");
    openapiFields.add("CreationTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeLocationFsxLustreResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeLocationFsxLustreResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeLocationFsxLustreResponse is not found in the empty JSON string", DescribeLocationFsxLustreResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeLocationFsxLustreResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeLocationFsxLustreResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `LocationArn`
      if (jsonObj.get("LocationArn") != null && !jsonObj.get("LocationArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LocationArn"));
      }
      // validate the optional field `LocationUri`
      if (jsonObj.get("LocationUri") != null && !jsonObj.get("LocationUri").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LocationUri"));
      }
      // validate the optional field `SecurityGroupArns`
      if (jsonObj.get("SecurityGroupArns") != null && !jsonObj.get("SecurityGroupArns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SecurityGroupArns"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeLocationFsxLustreResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeLocationFsxLustreResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeLocationFsxLustreResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeLocationFsxLustreResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeLocationFsxLustreResponse>() {
           @Override
           public void write(JsonWriter out, DescribeLocationFsxLustreResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeLocationFsxLustreResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeLocationFsxLustreResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeLocationFsxLustreResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeLocationFsxLustreResponse
   */
  public static DescribeLocationFsxLustreResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeLocationFsxLustreResponse.class);
  }

  /**
   * Convert an instance of DescribeLocationFsxLustreResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

