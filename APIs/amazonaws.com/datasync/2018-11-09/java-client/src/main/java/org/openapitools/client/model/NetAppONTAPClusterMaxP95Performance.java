/*
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NetAppONTAPClusterMaxP95Performance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:05.755663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetAppONTAPClusterMaxP95Performance {
  public static final String SERIALIZED_NAME_IOPS_READ = "IopsRead";
  @SerializedName(SERIALIZED_NAME_IOPS_READ)
  private Double iopsRead;

  public static final String SERIALIZED_NAME_IOPS_WRITE = "IopsWrite";
  @SerializedName(SERIALIZED_NAME_IOPS_WRITE)
  private Double iopsWrite;

  public static final String SERIALIZED_NAME_IOPS_OTHER = "IopsOther";
  @SerializedName(SERIALIZED_NAME_IOPS_OTHER)
  private Double iopsOther;

  public static final String SERIALIZED_NAME_IOPS_TOTAL = "IopsTotal";
  @SerializedName(SERIALIZED_NAME_IOPS_TOTAL)
  private Double iopsTotal;

  public static final String SERIALIZED_NAME_THROUGHPUT_READ = "ThroughputRead";
  @SerializedName(SERIALIZED_NAME_THROUGHPUT_READ)
  private Double throughputRead;

  public static final String SERIALIZED_NAME_THROUGHPUT_WRITE = "ThroughputWrite";
  @SerializedName(SERIALIZED_NAME_THROUGHPUT_WRITE)
  private Double throughputWrite;

  public static final String SERIALIZED_NAME_THROUGHPUT_OTHER = "ThroughputOther";
  @SerializedName(SERIALIZED_NAME_THROUGHPUT_OTHER)
  private Double throughputOther;

  public static final String SERIALIZED_NAME_THROUGHPUT_TOTAL = "ThroughputTotal";
  @SerializedName(SERIALIZED_NAME_THROUGHPUT_TOTAL)
  private Double throughputTotal;

  public static final String SERIALIZED_NAME_LATENCY_READ = "LatencyRead";
  @SerializedName(SERIALIZED_NAME_LATENCY_READ)
  private Double latencyRead;

  public static final String SERIALIZED_NAME_LATENCY_WRITE = "LatencyWrite";
  @SerializedName(SERIALIZED_NAME_LATENCY_WRITE)
  private Double latencyWrite;

  public static final String SERIALIZED_NAME_LATENCY_OTHER = "LatencyOther";
  @SerializedName(SERIALIZED_NAME_LATENCY_OTHER)
  private Double latencyOther;

  public NetAppONTAPClusterMaxP95Performance() {
  }

  public NetAppONTAPClusterMaxP95Performance iopsRead(Double iopsRead) {
    this.iopsRead = iopsRead;
    return this;
  }

  /**
   * Get iopsRead
   * @return iopsRead
   */
  @javax.annotation.Nullable
  public Double getIopsRead() {
    return iopsRead;
  }

  public void setIopsRead(Double iopsRead) {
    this.iopsRead = iopsRead;
  }


  public NetAppONTAPClusterMaxP95Performance iopsWrite(Double iopsWrite) {
    this.iopsWrite = iopsWrite;
    return this;
  }

  /**
   * Get iopsWrite
   * @return iopsWrite
   */
  @javax.annotation.Nullable
  public Double getIopsWrite() {
    return iopsWrite;
  }

  public void setIopsWrite(Double iopsWrite) {
    this.iopsWrite = iopsWrite;
  }


  public NetAppONTAPClusterMaxP95Performance iopsOther(Double iopsOther) {
    this.iopsOther = iopsOther;
    return this;
  }

  /**
   * Get iopsOther
   * @return iopsOther
   */
  @javax.annotation.Nullable
  public Double getIopsOther() {
    return iopsOther;
  }

  public void setIopsOther(Double iopsOther) {
    this.iopsOther = iopsOther;
  }


  public NetAppONTAPClusterMaxP95Performance iopsTotal(Double iopsTotal) {
    this.iopsTotal = iopsTotal;
    return this;
  }

  /**
   * Get iopsTotal
   * @return iopsTotal
   */
  @javax.annotation.Nullable
  public Double getIopsTotal() {
    return iopsTotal;
  }

  public void setIopsTotal(Double iopsTotal) {
    this.iopsTotal = iopsTotal;
  }


  public NetAppONTAPClusterMaxP95Performance throughputRead(Double throughputRead) {
    this.throughputRead = throughputRead;
    return this;
  }

  /**
   * Get throughputRead
   * @return throughputRead
   */
  @javax.annotation.Nullable
  public Double getThroughputRead() {
    return throughputRead;
  }

  public void setThroughputRead(Double throughputRead) {
    this.throughputRead = throughputRead;
  }


  public NetAppONTAPClusterMaxP95Performance throughputWrite(Double throughputWrite) {
    this.throughputWrite = throughputWrite;
    return this;
  }

  /**
   * Get throughputWrite
   * @return throughputWrite
   */
  @javax.annotation.Nullable
  public Double getThroughputWrite() {
    return throughputWrite;
  }

  public void setThroughputWrite(Double throughputWrite) {
    this.throughputWrite = throughputWrite;
  }


  public NetAppONTAPClusterMaxP95Performance throughputOther(Double throughputOther) {
    this.throughputOther = throughputOther;
    return this;
  }

  /**
   * Get throughputOther
   * @return throughputOther
   */
  @javax.annotation.Nullable
  public Double getThroughputOther() {
    return throughputOther;
  }

  public void setThroughputOther(Double throughputOther) {
    this.throughputOther = throughputOther;
  }


  public NetAppONTAPClusterMaxP95Performance throughputTotal(Double throughputTotal) {
    this.throughputTotal = throughputTotal;
    return this;
  }

  /**
   * Get throughputTotal
   * @return throughputTotal
   */
  @javax.annotation.Nullable
  public Double getThroughputTotal() {
    return throughputTotal;
  }

  public void setThroughputTotal(Double throughputTotal) {
    this.throughputTotal = throughputTotal;
  }


  public NetAppONTAPClusterMaxP95Performance latencyRead(Double latencyRead) {
    this.latencyRead = latencyRead;
    return this;
  }

  /**
   * Get latencyRead
   * @return latencyRead
   */
  @javax.annotation.Nullable
  public Double getLatencyRead() {
    return latencyRead;
  }

  public void setLatencyRead(Double latencyRead) {
    this.latencyRead = latencyRead;
  }


  public NetAppONTAPClusterMaxP95Performance latencyWrite(Double latencyWrite) {
    this.latencyWrite = latencyWrite;
    return this;
  }

  /**
   * Get latencyWrite
   * @return latencyWrite
   */
  @javax.annotation.Nullable
  public Double getLatencyWrite() {
    return latencyWrite;
  }

  public void setLatencyWrite(Double latencyWrite) {
    this.latencyWrite = latencyWrite;
  }


  public NetAppONTAPClusterMaxP95Performance latencyOther(Double latencyOther) {
    this.latencyOther = latencyOther;
    return this;
  }

  /**
   * Get latencyOther
   * @return latencyOther
   */
  @javax.annotation.Nullable
  public Double getLatencyOther() {
    return latencyOther;
  }

  public void setLatencyOther(Double latencyOther) {
    this.latencyOther = latencyOther;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetAppONTAPClusterMaxP95Performance netAppONTAPClusterMaxP95Performance = (NetAppONTAPClusterMaxP95Performance) o;
    return Objects.equals(this.iopsRead, netAppONTAPClusterMaxP95Performance.iopsRead) &&
        Objects.equals(this.iopsWrite, netAppONTAPClusterMaxP95Performance.iopsWrite) &&
        Objects.equals(this.iopsOther, netAppONTAPClusterMaxP95Performance.iopsOther) &&
        Objects.equals(this.iopsTotal, netAppONTAPClusterMaxP95Performance.iopsTotal) &&
        Objects.equals(this.throughputRead, netAppONTAPClusterMaxP95Performance.throughputRead) &&
        Objects.equals(this.throughputWrite, netAppONTAPClusterMaxP95Performance.throughputWrite) &&
        Objects.equals(this.throughputOther, netAppONTAPClusterMaxP95Performance.throughputOther) &&
        Objects.equals(this.throughputTotal, netAppONTAPClusterMaxP95Performance.throughputTotal) &&
        Objects.equals(this.latencyRead, netAppONTAPClusterMaxP95Performance.latencyRead) &&
        Objects.equals(this.latencyWrite, netAppONTAPClusterMaxP95Performance.latencyWrite) &&
        Objects.equals(this.latencyOther, netAppONTAPClusterMaxP95Performance.latencyOther);
  }

  @Override
  public int hashCode() {
    return Objects.hash(iopsRead, iopsWrite, iopsOther, iopsTotal, throughputRead, throughputWrite, throughputOther, throughputTotal, latencyRead, latencyWrite, latencyOther);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetAppONTAPClusterMaxP95Performance {\n");
    sb.append("    iopsRead: ").append(toIndentedString(iopsRead)).append("\n");
    sb.append("    iopsWrite: ").append(toIndentedString(iopsWrite)).append("\n");
    sb.append("    iopsOther: ").append(toIndentedString(iopsOther)).append("\n");
    sb.append("    iopsTotal: ").append(toIndentedString(iopsTotal)).append("\n");
    sb.append("    throughputRead: ").append(toIndentedString(throughputRead)).append("\n");
    sb.append("    throughputWrite: ").append(toIndentedString(throughputWrite)).append("\n");
    sb.append("    throughputOther: ").append(toIndentedString(throughputOther)).append("\n");
    sb.append("    throughputTotal: ").append(toIndentedString(throughputTotal)).append("\n");
    sb.append("    latencyRead: ").append(toIndentedString(latencyRead)).append("\n");
    sb.append("    latencyWrite: ").append(toIndentedString(latencyWrite)).append("\n");
    sb.append("    latencyOther: ").append(toIndentedString(latencyOther)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IopsRead");
    openapiFields.add("IopsWrite");
    openapiFields.add("IopsOther");
    openapiFields.add("IopsTotal");
    openapiFields.add("ThroughputRead");
    openapiFields.add("ThroughputWrite");
    openapiFields.add("ThroughputOther");
    openapiFields.add("ThroughputTotal");
    openapiFields.add("LatencyRead");
    openapiFields.add("LatencyWrite");
    openapiFields.add("LatencyOther");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetAppONTAPClusterMaxP95Performance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetAppONTAPClusterMaxP95Performance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetAppONTAPClusterMaxP95Performance is not found in the empty JSON string", NetAppONTAPClusterMaxP95Performance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetAppONTAPClusterMaxP95Performance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetAppONTAPClusterMaxP95Performance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `IopsRead`
      if (jsonObj.get("IopsRead") != null && !jsonObj.get("IopsRead").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("IopsRead"));
      }
      // validate the optional field `IopsWrite`
      if (jsonObj.get("IopsWrite") != null && !jsonObj.get("IopsWrite").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("IopsWrite"));
      }
      // validate the optional field `IopsOther`
      if (jsonObj.get("IopsOther") != null && !jsonObj.get("IopsOther").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("IopsOther"));
      }
      // validate the optional field `IopsTotal`
      if (jsonObj.get("IopsTotal") != null && !jsonObj.get("IopsTotal").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("IopsTotal"));
      }
      // validate the optional field `ThroughputRead`
      if (jsonObj.get("ThroughputRead") != null && !jsonObj.get("ThroughputRead").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("ThroughputRead"));
      }
      // validate the optional field `ThroughputWrite`
      if (jsonObj.get("ThroughputWrite") != null && !jsonObj.get("ThroughputWrite").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("ThroughputWrite"));
      }
      // validate the optional field `ThroughputOther`
      if (jsonObj.get("ThroughputOther") != null && !jsonObj.get("ThroughputOther").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("ThroughputOther"));
      }
      // validate the optional field `ThroughputTotal`
      if (jsonObj.get("ThroughputTotal") != null && !jsonObj.get("ThroughputTotal").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("ThroughputTotal"));
      }
      // validate the optional field `LatencyRead`
      if (jsonObj.get("LatencyRead") != null && !jsonObj.get("LatencyRead").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("LatencyRead"));
      }
      // validate the optional field `LatencyWrite`
      if (jsonObj.get("LatencyWrite") != null && !jsonObj.get("LatencyWrite").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("LatencyWrite"));
      }
      // validate the optional field `LatencyOther`
      if (jsonObj.get("LatencyOther") != null && !jsonObj.get("LatencyOther").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("LatencyOther"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetAppONTAPClusterMaxP95Performance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetAppONTAPClusterMaxP95Performance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetAppONTAPClusterMaxP95Performance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetAppONTAPClusterMaxP95Performance.class));

       return (TypeAdapter<T>) new TypeAdapter<NetAppONTAPClusterMaxP95Performance>() {
           @Override
           public void write(JsonWriter out, NetAppONTAPClusterMaxP95Performance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetAppONTAPClusterMaxP95Performance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetAppONTAPClusterMaxP95Performance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetAppONTAPClusterMaxP95Performance
   * @throws IOException if the JSON string is invalid with respect to NetAppONTAPClusterMaxP95Performance
   */
  public static NetAppONTAPClusterMaxP95Performance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetAppONTAPClusterMaxP95Performance.class);
  }

  /**
   * Convert an instance of NetAppONTAPClusterMaxP95Performance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

