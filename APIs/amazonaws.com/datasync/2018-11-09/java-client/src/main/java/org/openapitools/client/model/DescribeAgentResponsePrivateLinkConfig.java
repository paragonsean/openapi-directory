/*
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeAgentResponsePrivateLinkConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:05.755663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeAgentResponsePrivateLinkConfig {
  public static final String SERIALIZED_NAME_VPC_ENDPOINT_ID = "VpcEndpointId";
  @SerializedName(SERIALIZED_NAME_VPC_ENDPOINT_ID)
  private String vpcEndpointId;

  public static final String SERIALIZED_NAME_PRIVATE_LINK_ENDPOINT = "PrivateLinkEndpoint";
  @SerializedName(SERIALIZED_NAME_PRIVATE_LINK_ENDPOINT)
  private String privateLinkEndpoint;

  public static final String SERIALIZED_NAME_SUBNET_ARNS = "SubnetArns";
  @SerializedName(SERIALIZED_NAME_SUBNET_ARNS)
  private List subnetArns;

  public static final String SERIALIZED_NAME_SECURITY_GROUP_ARNS = "SecurityGroupArns";
  @SerializedName(SERIALIZED_NAME_SECURITY_GROUP_ARNS)
  private List securityGroupArns;

  public DescribeAgentResponsePrivateLinkConfig() {
  }

  public DescribeAgentResponsePrivateLinkConfig vpcEndpointId(String vpcEndpointId) {
    this.vpcEndpointId = vpcEndpointId;
    return this;
  }

  /**
   * Get vpcEndpointId
   * @return vpcEndpointId
   */
  @javax.annotation.Nullable
  public String getVpcEndpointId() {
    return vpcEndpointId;
  }

  public void setVpcEndpointId(String vpcEndpointId) {
    this.vpcEndpointId = vpcEndpointId;
  }


  public DescribeAgentResponsePrivateLinkConfig privateLinkEndpoint(String privateLinkEndpoint) {
    this.privateLinkEndpoint = privateLinkEndpoint;
    return this;
  }

  /**
   * Get privateLinkEndpoint
   * @return privateLinkEndpoint
   */
  @javax.annotation.Nullable
  public String getPrivateLinkEndpoint() {
    return privateLinkEndpoint;
  }

  public void setPrivateLinkEndpoint(String privateLinkEndpoint) {
    this.privateLinkEndpoint = privateLinkEndpoint;
  }


  public DescribeAgentResponsePrivateLinkConfig subnetArns(List subnetArns) {
    this.subnetArns = subnetArns;
    return this;
  }

  /**
   * Get subnetArns
   * @return subnetArns
   */
  @javax.annotation.Nullable
  public List getSubnetArns() {
    return subnetArns;
  }

  public void setSubnetArns(List subnetArns) {
    this.subnetArns = subnetArns;
  }


  public DescribeAgentResponsePrivateLinkConfig securityGroupArns(List securityGroupArns) {
    this.securityGroupArns = securityGroupArns;
    return this;
  }

  /**
   * Get securityGroupArns
   * @return securityGroupArns
   */
  @javax.annotation.Nullable
  public List getSecurityGroupArns() {
    return securityGroupArns;
  }

  public void setSecurityGroupArns(List securityGroupArns) {
    this.securityGroupArns = securityGroupArns;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeAgentResponsePrivateLinkConfig describeAgentResponsePrivateLinkConfig = (DescribeAgentResponsePrivateLinkConfig) o;
    return Objects.equals(this.vpcEndpointId, describeAgentResponsePrivateLinkConfig.vpcEndpointId) &&
        Objects.equals(this.privateLinkEndpoint, describeAgentResponsePrivateLinkConfig.privateLinkEndpoint) &&
        Objects.equals(this.subnetArns, describeAgentResponsePrivateLinkConfig.subnetArns) &&
        Objects.equals(this.securityGroupArns, describeAgentResponsePrivateLinkConfig.securityGroupArns);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vpcEndpointId, privateLinkEndpoint, subnetArns, securityGroupArns);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeAgentResponsePrivateLinkConfig {\n");
    sb.append("    vpcEndpointId: ").append(toIndentedString(vpcEndpointId)).append("\n");
    sb.append("    privateLinkEndpoint: ").append(toIndentedString(privateLinkEndpoint)).append("\n");
    sb.append("    subnetArns: ").append(toIndentedString(subnetArns)).append("\n");
    sb.append("    securityGroupArns: ").append(toIndentedString(securityGroupArns)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("VpcEndpointId");
    openapiFields.add("PrivateLinkEndpoint");
    openapiFields.add("SubnetArns");
    openapiFields.add("SecurityGroupArns");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeAgentResponsePrivateLinkConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeAgentResponsePrivateLinkConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeAgentResponsePrivateLinkConfig is not found in the empty JSON string", DescribeAgentResponsePrivateLinkConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeAgentResponsePrivateLinkConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeAgentResponsePrivateLinkConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `VpcEndpointId`
      if (jsonObj.get("VpcEndpointId") != null && !jsonObj.get("VpcEndpointId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VpcEndpointId"));
      }
      // validate the optional field `PrivateLinkEndpoint`
      if (jsonObj.get("PrivateLinkEndpoint") != null && !jsonObj.get("PrivateLinkEndpoint").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PrivateLinkEndpoint"));
      }
      // validate the optional field `SubnetArns`
      if (jsonObj.get("SubnetArns") != null && !jsonObj.get("SubnetArns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SubnetArns"));
      }
      // validate the optional field `SecurityGroupArns`
      if (jsonObj.get("SecurityGroupArns") != null && !jsonObj.get("SecurityGroupArns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SecurityGroupArns"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeAgentResponsePrivateLinkConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeAgentResponsePrivateLinkConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeAgentResponsePrivateLinkConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeAgentResponsePrivateLinkConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeAgentResponsePrivateLinkConfig>() {
           @Override
           public void write(JsonWriter out, DescribeAgentResponsePrivateLinkConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeAgentResponsePrivateLinkConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeAgentResponsePrivateLinkConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeAgentResponsePrivateLinkConfig
   * @throws IOException if the JSON string is invalid with respect to DescribeAgentResponsePrivateLinkConfig
   */
  public static DescribeAgentResponsePrivateLinkConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeAgentResponsePrivateLinkConfig.class);
  }

  /**
   * Convert an instance of DescribeAgentResponsePrivateLinkConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

