/*
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateLocationSmbRequestMountOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateLocationSmbRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:05.755663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateLocationSmbRequest {
  public static final String SERIALIZED_NAME_SUBDIRECTORY = "Subdirectory";
  @SerializedName(SERIALIZED_NAME_SUBDIRECTORY)
  private String subdirectory;

  public static final String SERIALIZED_NAME_SERVER_HOSTNAME = "ServerHostname";
  @SerializedName(SERIALIZED_NAME_SERVER_HOSTNAME)
  private String serverHostname;

  public static final String SERIALIZED_NAME_USER = "User";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public static final String SERIALIZED_NAME_DOMAIN = "Domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_PASSWORD = "Password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_AGENT_ARNS = "AgentArns";
  @SerializedName(SERIALIZED_NAME_AGENT_ARNS)
  private List agentArns;

  public static final String SERIALIZED_NAME_MOUNT_OPTIONS = "MountOptions";
  @SerializedName(SERIALIZED_NAME_MOUNT_OPTIONS)
  private CreateLocationSmbRequestMountOptions mountOptions;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public CreateLocationSmbRequest() {
  }

  public CreateLocationSmbRequest subdirectory(String subdirectory) {
    this.subdirectory = subdirectory;
    return this;
  }

  /**
   * Get subdirectory
   * @return subdirectory
   */
  @javax.annotation.Nonnull
  public String getSubdirectory() {
    return subdirectory;
  }

  public void setSubdirectory(String subdirectory) {
    this.subdirectory = subdirectory;
  }


  public CreateLocationSmbRequest serverHostname(String serverHostname) {
    this.serverHostname = serverHostname;
    return this;
  }

  /**
   * Get serverHostname
   * @return serverHostname
   */
  @javax.annotation.Nonnull
  public String getServerHostname() {
    return serverHostname;
  }

  public void setServerHostname(String serverHostname) {
    this.serverHostname = serverHostname;
  }


  public CreateLocationSmbRequest user(String user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nonnull
  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }


  public CreateLocationSmbRequest domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Get domain
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public CreateLocationSmbRequest password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nonnull
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public CreateLocationSmbRequest agentArns(List agentArns) {
    this.agentArns = agentArns;
    return this;
  }

  /**
   * Get agentArns
   * @return agentArns
   */
  @javax.annotation.Nonnull
  public List getAgentArns() {
    return agentArns;
  }

  public void setAgentArns(List agentArns) {
    this.agentArns = agentArns;
  }


  public CreateLocationSmbRequest mountOptions(CreateLocationSmbRequestMountOptions mountOptions) {
    this.mountOptions = mountOptions;
    return this;
  }

  /**
   * Get mountOptions
   * @return mountOptions
   */
  @javax.annotation.Nullable
  public CreateLocationSmbRequestMountOptions getMountOptions() {
    return mountOptions;
  }

  public void setMountOptions(CreateLocationSmbRequestMountOptions mountOptions) {
    this.mountOptions = mountOptions;
  }


  public CreateLocationSmbRequest tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateLocationSmbRequest createLocationSmbRequest = (CreateLocationSmbRequest) o;
    return Objects.equals(this.subdirectory, createLocationSmbRequest.subdirectory) &&
        Objects.equals(this.serverHostname, createLocationSmbRequest.serverHostname) &&
        Objects.equals(this.user, createLocationSmbRequest.user) &&
        Objects.equals(this.domain, createLocationSmbRequest.domain) &&
        Objects.equals(this.password, createLocationSmbRequest.password) &&
        Objects.equals(this.agentArns, createLocationSmbRequest.agentArns) &&
        Objects.equals(this.mountOptions, createLocationSmbRequest.mountOptions) &&
        Objects.equals(this.tags, createLocationSmbRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subdirectory, serverHostname, user, domain, password, agentArns, mountOptions, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateLocationSmbRequest {\n");
    sb.append("    subdirectory: ").append(toIndentedString(subdirectory)).append("\n");
    sb.append("    serverHostname: ").append(toIndentedString(serverHostname)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    agentArns: ").append(toIndentedString(agentArns)).append("\n");
    sb.append("    mountOptions: ").append(toIndentedString(mountOptions)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Subdirectory");
    openapiFields.add("ServerHostname");
    openapiFields.add("User");
    openapiFields.add("Domain");
    openapiFields.add("Password");
    openapiFields.add("AgentArns");
    openapiFields.add("MountOptions");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Subdirectory");
    openapiRequiredFields.add("ServerHostname");
    openapiRequiredFields.add("User");
    openapiRequiredFields.add("Password");
    openapiRequiredFields.add("AgentArns");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateLocationSmbRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateLocationSmbRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateLocationSmbRequest is not found in the empty JSON string", CreateLocationSmbRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateLocationSmbRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateLocationSmbRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateLocationSmbRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Subdirectory`
      String.validateJsonElement(jsonObj.get("Subdirectory"));
      // validate the required field `ServerHostname`
      String.validateJsonElement(jsonObj.get("ServerHostname"));
      // validate the required field `User`
      String.validateJsonElement(jsonObj.get("User"));
      // validate the optional field `Domain`
      if (jsonObj.get("Domain") != null && !jsonObj.get("Domain").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Domain"));
      }
      // validate the required field `Password`
      String.validateJsonElement(jsonObj.get("Password"));
      // validate the required field `AgentArns`
      List.validateJsonElement(jsonObj.get("AgentArns"));
      // validate the optional field `MountOptions`
      if (jsonObj.get("MountOptions") != null && !jsonObj.get("MountOptions").isJsonNull()) {
        CreateLocationSmbRequestMountOptions.validateJsonElement(jsonObj.get("MountOptions"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateLocationSmbRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateLocationSmbRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateLocationSmbRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateLocationSmbRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateLocationSmbRequest>() {
           @Override
           public void write(JsonWriter out, CreateLocationSmbRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateLocationSmbRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateLocationSmbRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateLocationSmbRequest
   * @throws IOException if the JSON string is invalid with respect to CreateLocationSmbRequest
   */
  public static CreateLocationSmbRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateLocationSmbRequest.class);
  }

  /**
   * Convert an instance of CreateLocationSmbRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

