/*
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeStorageSystemResponseServerConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:05.755663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeStorageSystemResponseServerConfiguration {
  public static final String SERIALIZED_NAME_SERVER_HOSTNAME = "ServerHostname";
  @SerializedName(SERIALIZED_NAME_SERVER_HOSTNAME)
  private String serverHostname;

  public static final String SERIALIZED_NAME_SERVER_PORT = "ServerPort";
  @SerializedName(SERIALIZED_NAME_SERVER_PORT)
  private Integer serverPort;

  public DescribeStorageSystemResponseServerConfiguration() {
  }

  public DescribeStorageSystemResponseServerConfiguration serverHostname(String serverHostname) {
    this.serverHostname = serverHostname;
    return this;
  }

  /**
   * Get serverHostname
   * @return serverHostname
   */
  @javax.annotation.Nonnull
  public String getServerHostname() {
    return serverHostname;
  }

  public void setServerHostname(String serverHostname) {
    this.serverHostname = serverHostname;
  }


  public DescribeStorageSystemResponseServerConfiguration serverPort(Integer serverPort) {
    this.serverPort = serverPort;
    return this;
  }

  /**
   * Get serverPort
   * @return serverPort
   */
  @javax.annotation.Nullable
  public Integer getServerPort() {
    return serverPort;
  }

  public void setServerPort(Integer serverPort) {
    this.serverPort = serverPort;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeStorageSystemResponseServerConfiguration describeStorageSystemResponseServerConfiguration = (DescribeStorageSystemResponseServerConfiguration) o;
    return Objects.equals(this.serverHostname, describeStorageSystemResponseServerConfiguration.serverHostname) &&
        Objects.equals(this.serverPort, describeStorageSystemResponseServerConfiguration.serverPort);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serverHostname, serverPort);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeStorageSystemResponseServerConfiguration {\n");
    sb.append("    serverHostname: ").append(toIndentedString(serverHostname)).append("\n");
    sb.append("    serverPort: ").append(toIndentedString(serverPort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ServerHostname");
    openapiFields.add("ServerPort");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ServerHostname");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeStorageSystemResponseServerConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeStorageSystemResponseServerConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeStorageSystemResponseServerConfiguration is not found in the empty JSON string", DescribeStorageSystemResponseServerConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeStorageSystemResponseServerConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeStorageSystemResponseServerConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DescribeStorageSystemResponseServerConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ServerHostname`
      String.validateJsonElement(jsonObj.get("ServerHostname"));
      // validate the optional field `ServerPort`
      if (jsonObj.get("ServerPort") != null && !jsonObj.get("ServerPort").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ServerPort"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeStorageSystemResponseServerConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeStorageSystemResponseServerConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeStorageSystemResponseServerConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeStorageSystemResponseServerConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeStorageSystemResponseServerConfiguration>() {
           @Override
           public void write(JsonWriter out, DescribeStorageSystemResponseServerConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeStorageSystemResponseServerConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeStorageSystemResponseServerConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeStorageSystemResponseServerConfiguration
   * @throws IOException if the JSON string is invalid with respect to DescribeStorageSystemResponseServerConfiguration
   */
  public static DescribeStorageSystemResponseServerConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeStorageSystemResponseServerConfiguration.class);
  }

  /**
   * Convert an instance of DescribeStorageSystemResponseServerConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

