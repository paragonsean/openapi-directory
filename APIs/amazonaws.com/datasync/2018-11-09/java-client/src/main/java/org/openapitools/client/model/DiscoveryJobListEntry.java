/*
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DiscoveryJobStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The details about a specific DataSync discovery job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:05.755663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiscoveryJobListEntry {
  public static final String SERIALIZED_NAME_DISCOVERY_JOB_ARN = "DiscoveryJobArn";
  @SerializedName(SERIALIZED_NAME_DISCOVERY_JOB_ARN)
  private String discoveryJobArn;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private DiscoveryJobStatus status;

  public DiscoveryJobListEntry() {
  }

  public DiscoveryJobListEntry discoveryJobArn(String discoveryJobArn) {
    this.discoveryJobArn = discoveryJobArn;
    return this;
  }

  /**
   * Get discoveryJobArn
   * @return discoveryJobArn
   */
  @javax.annotation.Nullable
  public String getDiscoveryJobArn() {
    return discoveryJobArn;
  }

  public void setDiscoveryJobArn(String discoveryJobArn) {
    this.discoveryJobArn = discoveryJobArn;
  }


  public DiscoveryJobListEntry status(DiscoveryJobStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public DiscoveryJobStatus getStatus() {
    return status;
  }

  public void setStatus(DiscoveryJobStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiscoveryJobListEntry discoveryJobListEntry = (DiscoveryJobListEntry) o;
    return Objects.equals(this.discoveryJobArn, discoveryJobListEntry.discoveryJobArn) &&
        Objects.equals(this.status, discoveryJobListEntry.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(discoveryJobArn, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiscoveryJobListEntry {\n");
    sb.append("    discoveryJobArn: ").append(toIndentedString(discoveryJobArn)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DiscoveryJobArn");
    openapiFields.add("Status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiscoveryJobListEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiscoveryJobListEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiscoveryJobListEntry is not found in the empty JSON string", DiscoveryJobListEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiscoveryJobListEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiscoveryJobListEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DiscoveryJobArn`
      if (jsonObj.get("DiscoveryJobArn") != null && !jsonObj.get("DiscoveryJobArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DiscoveryJobArn"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        DiscoveryJobStatus.validateJsonElement(jsonObj.get("Status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiscoveryJobListEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiscoveryJobListEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiscoveryJobListEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiscoveryJobListEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<DiscoveryJobListEntry>() {
           @Override
           public void write(JsonWriter out, DiscoveryJobListEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiscoveryJobListEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiscoveryJobListEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiscoveryJobListEntry
   * @throws IOException if the JSON string is invalid with respect to DiscoveryJobListEntry
   */
  public static DiscoveryJobListEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiscoveryJobListEntry.class);
  }

  /**
   * Convert an instance of DiscoveryJobListEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

