/*
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PhaseStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the detailed result of a &lt;code&gt;TaskExecution&lt;/code&gt; operation. This result includes the time in milliseconds spent in each phase, the status of the task execution, and the errors encountered.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:05.755663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TaskExecutionResultDetail {
  public static final String SERIALIZED_NAME_PREPARE_DURATION = "PrepareDuration";
  @SerializedName(SERIALIZED_NAME_PREPARE_DURATION)
  private Integer prepareDuration;

  public static final String SERIALIZED_NAME_PREPARE_STATUS = "PrepareStatus";
  @SerializedName(SERIALIZED_NAME_PREPARE_STATUS)
  private PhaseStatus prepareStatus;

  public static final String SERIALIZED_NAME_TOTAL_DURATION = "TotalDuration";
  @SerializedName(SERIALIZED_NAME_TOTAL_DURATION)
  private Integer totalDuration;

  public static final String SERIALIZED_NAME_TRANSFER_DURATION = "TransferDuration";
  @SerializedName(SERIALIZED_NAME_TRANSFER_DURATION)
  private Integer transferDuration;

  public static final String SERIALIZED_NAME_TRANSFER_STATUS = "TransferStatus";
  @SerializedName(SERIALIZED_NAME_TRANSFER_STATUS)
  private PhaseStatus transferStatus;

  public static final String SERIALIZED_NAME_VERIFY_DURATION = "VerifyDuration";
  @SerializedName(SERIALIZED_NAME_VERIFY_DURATION)
  private Integer verifyDuration;

  public static final String SERIALIZED_NAME_VERIFY_STATUS = "VerifyStatus";
  @SerializedName(SERIALIZED_NAME_VERIFY_STATUS)
  private PhaseStatus verifyStatus;

  public static final String SERIALIZED_NAME_ERROR_CODE = "ErrorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private String errorCode;

  public static final String SERIALIZED_NAME_ERROR_DETAIL = "ErrorDetail";
  @SerializedName(SERIALIZED_NAME_ERROR_DETAIL)
  private String errorDetail;

  public TaskExecutionResultDetail() {
  }

  public TaskExecutionResultDetail prepareDuration(Integer prepareDuration) {
    this.prepareDuration = prepareDuration;
    return this;
  }

  /**
   * Get prepareDuration
   * @return prepareDuration
   */
  @javax.annotation.Nullable
  public Integer getPrepareDuration() {
    return prepareDuration;
  }

  public void setPrepareDuration(Integer prepareDuration) {
    this.prepareDuration = prepareDuration;
  }


  public TaskExecutionResultDetail prepareStatus(PhaseStatus prepareStatus) {
    this.prepareStatus = prepareStatus;
    return this;
  }

  /**
   * Get prepareStatus
   * @return prepareStatus
   */
  @javax.annotation.Nullable
  public PhaseStatus getPrepareStatus() {
    return prepareStatus;
  }

  public void setPrepareStatus(PhaseStatus prepareStatus) {
    this.prepareStatus = prepareStatus;
  }


  public TaskExecutionResultDetail totalDuration(Integer totalDuration) {
    this.totalDuration = totalDuration;
    return this;
  }

  /**
   * Get totalDuration
   * @return totalDuration
   */
  @javax.annotation.Nullable
  public Integer getTotalDuration() {
    return totalDuration;
  }

  public void setTotalDuration(Integer totalDuration) {
    this.totalDuration = totalDuration;
  }


  public TaskExecutionResultDetail transferDuration(Integer transferDuration) {
    this.transferDuration = transferDuration;
    return this;
  }

  /**
   * Get transferDuration
   * @return transferDuration
   */
  @javax.annotation.Nullable
  public Integer getTransferDuration() {
    return transferDuration;
  }

  public void setTransferDuration(Integer transferDuration) {
    this.transferDuration = transferDuration;
  }


  public TaskExecutionResultDetail transferStatus(PhaseStatus transferStatus) {
    this.transferStatus = transferStatus;
    return this;
  }

  /**
   * Get transferStatus
   * @return transferStatus
   */
  @javax.annotation.Nullable
  public PhaseStatus getTransferStatus() {
    return transferStatus;
  }

  public void setTransferStatus(PhaseStatus transferStatus) {
    this.transferStatus = transferStatus;
  }


  public TaskExecutionResultDetail verifyDuration(Integer verifyDuration) {
    this.verifyDuration = verifyDuration;
    return this;
  }

  /**
   * Get verifyDuration
   * @return verifyDuration
   */
  @javax.annotation.Nullable
  public Integer getVerifyDuration() {
    return verifyDuration;
  }

  public void setVerifyDuration(Integer verifyDuration) {
    this.verifyDuration = verifyDuration;
  }


  public TaskExecutionResultDetail verifyStatus(PhaseStatus verifyStatus) {
    this.verifyStatus = verifyStatus;
    return this;
  }

  /**
   * Get verifyStatus
   * @return verifyStatus
   */
  @javax.annotation.Nullable
  public PhaseStatus getVerifyStatus() {
    return verifyStatus;
  }

  public void setVerifyStatus(PhaseStatus verifyStatus) {
    this.verifyStatus = verifyStatus;
  }


  public TaskExecutionResultDetail errorCode(String errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  /**
   * Get errorCode
   * @return errorCode
   */
  @javax.annotation.Nullable
  public String getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
  }


  public TaskExecutionResultDetail errorDetail(String errorDetail) {
    this.errorDetail = errorDetail;
    return this;
  }

  /**
   * Get errorDetail
   * @return errorDetail
   */
  @javax.annotation.Nullable
  public String getErrorDetail() {
    return errorDetail;
  }

  public void setErrorDetail(String errorDetail) {
    this.errorDetail = errorDetail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskExecutionResultDetail taskExecutionResultDetail = (TaskExecutionResultDetail) o;
    return Objects.equals(this.prepareDuration, taskExecutionResultDetail.prepareDuration) &&
        Objects.equals(this.prepareStatus, taskExecutionResultDetail.prepareStatus) &&
        Objects.equals(this.totalDuration, taskExecutionResultDetail.totalDuration) &&
        Objects.equals(this.transferDuration, taskExecutionResultDetail.transferDuration) &&
        Objects.equals(this.transferStatus, taskExecutionResultDetail.transferStatus) &&
        Objects.equals(this.verifyDuration, taskExecutionResultDetail.verifyDuration) &&
        Objects.equals(this.verifyStatus, taskExecutionResultDetail.verifyStatus) &&
        Objects.equals(this.errorCode, taskExecutionResultDetail.errorCode) &&
        Objects.equals(this.errorDetail, taskExecutionResultDetail.errorDetail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(prepareDuration, prepareStatus, totalDuration, transferDuration, transferStatus, verifyDuration, verifyStatus, errorCode, errorDetail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskExecutionResultDetail {\n");
    sb.append("    prepareDuration: ").append(toIndentedString(prepareDuration)).append("\n");
    sb.append("    prepareStatus: ").append(toIndentedString(prepareStatus)).append("\n");
    sb.append("    totalDuration: ").append(toIndentedString(totalDuration)).append("\n");
    sb.append("    transferDuration: ").append(toIndentedString(transferDuration)).append("\n");
    sb.append("    transferStatus: ").append(toIndentedString(transferStatus)).append("\n");
    sb.append("    verifyDuration: ").append(toIndentedString(verifyDuration)).append("\n");
    sb.append("    verifyStatus: ").append(toIndentedString(verifyStatus)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    errorDetail: ").append(toIndentedString(errorDetail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PrepareDuration");
    openapiFields.add("PrepareStatus");
    openapiFields.add("TotalDuration");
    openapiFields.add("TransferDuration");
    openapiFields.add("TransferStatus");
    openapiFields.add("VerifyDuration");
    openapiFields.add("VerifyStatus");
    openapiFields.add("ErrorCode");
    openapiFields.add("ErrorDetail");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TaskExecutionResultDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaskExecutionResultDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaskExecutionResultDetail is not found in the empty JSON string", TaskExecutionResultDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaskExecutionResultDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaskExecutionResultDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `PrepareDuration`
      if (jsonObj.get("PrepareDuration") != null && !jsonObj.get("PrepareDuration").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("PrepareDuration"));
      }
      // validate the optional field `PrepareStatus`
      if (jsonObj.get("PrepareStatus") != null && !jsonObj.get("PrepareStatus").isJsonNull()) {
        PhaseStatus.validateJsonElement(jsonObj.get("PrepareStatus"));
      }
      // validate the optional field `TotalDuration`
      if (jsonObj.get("TotalDuration") != null && !jsonObj.get("TotalDuration").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TotalDuration"));
      }
      // validate the optional field `TransferDuration`
      if (jsonObj.get("TransferDuration") != null && !jsonObj.get("TransferDuration").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TransferDuration"));
      }
      // validate the optional field `TransferStatus`
      if (jsonObj.get("TransferStatus") != null && !jsonObj.get("TransferStatus").isJsonNull()) {
        PhaseStatus.validateJsonElement(jsonObj.get("TransferStatus"));
      }
      // validate the optional field `VerifyDuration`
      if (jsonObj.get("VerifyDuration") != null && !jsonObj.get("VerifyDuration").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("VerifyDuration"));
      }
      // validate the optional field `VerifyStatus`
      if (jsonObj.get("VerifyStatus") != null && !jsonObj.get("VerifyStatus").isJsonNull()) {
        PhaseStatus.validateJsonElement(jsonObj.get("VerifyStatus"));
      }
      // validate the optional field `ErrorCode`
      if (jsonObj.get("ErrorCode") != null && !jsonObj.get("ErrorCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ErrorCode"));
      }
      // validate the optional field `ErrorDetail`
      if (jsonObj.get("ErrorDetail") != null && !jsonObj.get("ErrorDetail").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ErrorDetail"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaskExecutionResultDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaskExecutionResultDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaskExecutionResultDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaskExecutionResultDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<TaskExecutionResultDetail>() {
           @Override
           public void write(JsonWriter out, TaskExecutionResultDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaskExecutionResultDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TaskExecutionResultDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TaskExecutionResultDetail
   * @throws IOException if the JSON string is invalid with respect to TaskExecutionResultDetail
   */
  public static TaskExecutionResultDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaskExecutionResultDetail.class);
  }

  /**
   * Convert an instance of TaskExecutionResultDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

