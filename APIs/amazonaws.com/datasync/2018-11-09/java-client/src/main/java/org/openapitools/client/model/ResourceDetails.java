/*
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information provided by DataSync Discovery about the resources in your on-premises storage system.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:05.755663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResourceDetails {
  public static final String SERIALIZED_NAME_NET_APP_O_N_T_A_P_S_V_MS = "NetAppONTAPSVMs";
  @SerializedName(SERIALIZED_NAME_NET_APP_O_N_T_A_P_S_V_MS)
  private List netAppONTAPSVMs;

  public static final String SERIALIZED_NAME_NET_APP_O_N_T_A_P_VOLUMES = "NetAppONTAPVolumes";
  @SerializedName(SERIALIZED_NAME_NET_APP_O_N_T_A_P_VOLUMES)
  private List netAppONTAPVolumes;

  public static final String SERIALIZED_NAME_NET_APP_O_N_T_A_P_CLUSTERS = "NetAppONTAPClusters";
  @SerializedName(SERIALIZED_NAME_NET_APP_O_N_T_A_P_CLUSTERS)
  private List netAppONTAPClusters;

  public ResourceDetails() {
  }

  public ResourceDetails netAppONTAPSVMs(List netAppONTAPSVMs) {
    this.netAppONTAPSVMs = netAppONTAPSVMs;
    return this;
  }

  /**
   * Get netAppONTAPSVMs
   * @return netAppONTAPSVMs
   */
  @javax.annotation.Nullable
  public List getNetAppONTAPSVMs() {
    return netAppONTAPSVMs;
  }

  public void setNetAppONTAPSVMs(List netAppONTAPSVMs) {
    this.netAppONTAPSVMs = netAppONTAPSVMs;
  }


  public ResourceDetails netAppONTAPVolumes(List netAppONTAPVolumes) {
    this.netAppONTAPVolumes = netAppONTAPVolumes;
    return this;
  }

  /**
   * Get netAppONTAPVolumes
   * @return netAppONTAPVolumes
   */
  @javax.annotation.Nullable
  public List getNetAppONTAPVolumes() {
    return netAppONTAPVolumes;
  }

  public void setNetAppONTAPVolumes(List netAppONTAPVolumes) {
    this.netAppONTAPVolumes = netAppONTAPVolumes;
  }


  public ResourceDetails netAppONTAPClusters(List netAppONTAPClusters) {
    this.netAppONTAPClusters = netAppONTAPClusters;
    return this;
  }

  /**
   * Get netAppONTAPClusters
   * @return netAppONTAPClusters
   */
  @javax.annotation.Nullable
  public List getNetAppONTAPClusters() {
    return netAppONTAPClusters;
  }

  public void setNetAppONTAPClusters(List netAppONTAPClusters) {
    this.netAppONTAPClusters = netAppONTAPClusters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceDetails resourceDetails = (ResourceDetails) o;
    return Objects.equals(this.netAppONTAPSVMs, resourceDetails.netAppONTAPSVMs) &&
        Objects.equals(this.netAppONTAPVolumes, resourceDetails.netAppONTAPVolumes) &&
        Objects.equals(this.netAppONTAPClusters, resourceDetails.netAppONTAPClusters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(netAppONTAPSVMs, netAppONTAPVolumes, netAppONTAPClusters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceDetails {\n");
    sb.append("    netAppONTAPSVMs: ").append(toIndentedString(netAppONTAPSVMs)).append("\n");
    sb.append("    netAppONTAPVolumes: ").append(toIndentedString(netAppONTAPVolumes)).append("\n");
    sb.append("    netAppONTAPClusters: ").append(toIndentedString(netAppONTAPClusters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("NetAppONTAPSVMs");
    openapiFields.add("NetAppONTAPVolumes");
    openapiFields.add("NetAppONTAPClusters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourceDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceDetails is not found in the empty JSON string", ResourceDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourceDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourceDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `NetAppONTAPSVMs`
      if (jsonObj.get("NetAppONTAPSVMs") != null && !jsonObj.get("NetAppONTAPSVMs").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("NetAppONTAPSVMs"));
      }
      // validate the optional field `NetAppONTAPVolumes`
      if (jsonObj.get("NetAppONTAPVolumes") != null && !jsonObj.get("NetAppONTAPVolumes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("NetAppONTAPVolumes"));
      }
      // validate the optional field `NetAppONTAPClusters`
      if (jsonObj.get("NetAppONTAPClusters") != null && !jsonObj.get("NetAppONTAPClusters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("NetAppONTAPClusters"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceDetails>() {
           @Override
           public void write(JsonWriter out, ResourceDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResourceDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourceDetails
   * @throws IOException if the JSON string is invalid with respect to ResourceDetails
   */
  public static ResourceDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceDetails.class);
  }

  /**
   * Convert an instance of ResourceDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

