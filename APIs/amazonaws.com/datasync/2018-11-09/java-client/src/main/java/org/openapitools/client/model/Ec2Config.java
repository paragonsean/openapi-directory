/*
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The subnet and security groups that DataSync uses to access your Amazon EFS file system.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:05.755663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Ec2Config {
  public static final String SERIALIZED_NAME_SUBNET_ARN = "SubnetArn";
  @SerializedName(SERIALIZED_NAME_SUBNET_ARN)
  private String subnetArn;

  public static final String SERIALIZED_NAME_SECURITY_GROUP_ARNS = "SecurityGroupArns";
  @SerializedName(SERIALIZED_NAME_SECURITY_GROUP_ARNS)
  private List securityGroupArns;

  public Ec2Config() {
  }

  public Ec2Config subnetArn(String subnetArn) {
    this.subnetArn = subnetArn;
    return this;
  }

  /**
   * Get subnetArn
   * @return subnetArn
   */
  @javax.annotation.Nonnull
  public String getSubnetArn() {
    return subnetArn;
  }

  public void setSubnetArn(String subnetArn) {
    this.subnetArn = subnetArn;
  }


  public Ec2Config securityGroupArns(List securityGroupArns) {
    this.securityGroupArns = securityGroupArns;
    return this;
  }

  /**
   * Get securityGroupArns
   * @return securityGroupArns
   */
  @javax.annotation.Nonnull
  public List getSecurityGroupArns() {
    return securityGroupArns;
  }

  public void setSecurityGroupArns(List securityGroupArns) {
    this.securityGroupArns = securityGroupArns;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ec2Config ec2Config = (Ec2Config) o;
    return Objects.equals(this.subnetArn, ec2Config.subnetArn) &&
        Objects.equals(this.securityGroupArns, ec2Config.securityGroupArns);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subnetArn, securityGroupArns);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ec2Config {\n");
    sb.append("    subnetArn: ").append(toIndentedString(subnetArn)).append("\n");
    sb.append("    securityGroupArns: ").append(toIndentedString(securityGroupArns)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SubnetArn");
    openapiFields.add("SecurityGroupArns");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SubnetArn");
    openapiRequiredFields.add("SecurityGroupArns");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Ec2Config
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Ec2Config.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Ec2Config is not found in the empty JSON string", Ec2Config.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Ec2Config.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Ec2Config` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Ec2Config.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `SubnetArn`
      String.validateJsonElement(jsonObj.get("SubnetArn"));
      // validate the required field `SecurityGroupArns`
      List.validateJsonElement(jsonObj.get("SecurityGroupArns"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Ec2Config.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Ec2Config' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Ec2Config> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Ec2Config.class));

       return (TypeAdapter<T>) new TypeAdapter<Ec2Config>() {
           @Override
           public void write(JsonWriter out, Ec2Config value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Ec2Config read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Ec2Config given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Ec2Config
   * @throws IOException if the JSON string is invalid with respect to Ec2Config
   */
  public static Ec2Config fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Ec2Config.class);
  }

  /**
   * Convert an instance of Ec2Config to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

