/*
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.P95MetricsIOPS;
import org.openapitools.client.model.P95MetricsLatency;
import org.openapitools.client.model.P95MetricsThroughput;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The types of performance data that DataSync Discovery collects about an on-premises storage system resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:05.755663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class P95Metrics {
  public static final String SERIALIZED_NAME_I_O_P_S = "IOPS";
  @SerializedName(SERIALIZED_NAME_I_O_P_S)
  private P95MetricsIOPS IOPS;

  public static final String SERIALIZED_NAME_THROUGHPUT = "Throughput";
  @SerializedName(SERIALIZED_NAME_THROUGHPUT)
  private P95MetricsThroughput throughput;

  public static final String SERIALIZED_NAME_LATENCY = "Latency";
  @SerializedName(SERIALIZED_NAME_LATENCY)
  private P95MetricsLatency latency;

  public P95Metrics() {
  }

  public P95Metrics IOPS(P95MetricsIOPS IOPS) {
    this.IOPS = IOPS;
    return this;
  }

  /**
   * Get IOPS
   * @return IOPS
   */
  @javax.annotation.Nullable
  public P95MetricsIOPS getIOPS() {
    return IOPS;
  }

  public void setIOPS(P95MetricsIOPS IOPS) {
    this.IOPS = IOPS;
  }


  public P95Metrics throughput(P95MetricsThroughput throughput) {
    this.throughput = throughput;
    return this;
  }

  /**
   * Get throughput
   * @return throughput
   */
  @javax.annotation.Nullable
  public P95MetricsThroughput getThroughput() {
    return throughput;
  }

  public void setThroughput(P95MetricsThroughput throughput) {
    this.throughput = throughput;
  }


  public P95Metrics latency(P95MetricsLatency latency) {
    this.latency = latency;
    return this;
  }

  /**
   * Get latency
   * @return latency
   */
  @javax.annotation.Nullable
  public P95MetricsLatency getLatency() {
    return latency;
  }

  public void setLatency(P95MetricsLatency latency) {
    this.latency = latency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    P95Metrics p95Metrics = (P95Metrics) o;
    return Objects.equals(this.IOPS, p95Metrics.IOPS) &&
        Objects.equals(this.throughput, p95Metrics.throughput) &&
        Objects.equals(this.latency, p95Metrics.latency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(IOPS, throughput, latency);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class P95Metrics {\n");
    sb.append("    IOPS: ").append(toIndentedString(IOPS)).append("\n");
    sb.append("    throughput: ").append(toIndentedString(throughput)).append("\n");
    sb.append("    latency: ").append(toIndentedString(latency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IOPS");
    openapiFields.add("Throughput");
    openapiFields.add("Latency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to P95Metrics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!P95Metrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in P95Metrics is not found in the empty JSON string", P95Metrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!P95Metrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `P95Metrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `IOPS`
      if (jsonObj.get("IOPS") != null && !jsonObj.get("IOPS").isJsonNull()) {
        P95MetricsIOPS.validateJsonElement(jsonObj.get("IOPS"));
      }
      // validate the optional field `Throughput`
      if (jsonObj.get("Throughput") != null && !jsonObj.get("Throughput").isJsonNull()) {
        P95MetricsThroughput.validateJsonElement(jsonObj.get("Throughput"));
      }
      // validate the optional field `Latency`
      if (jsonObj.get("Latency") != null && !jsonObj.get("Latency").isJsonNull()) {
        P95MetricsLatency.validateJsonElement(jsonObj.get("Latency"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!P95Metrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'P95Metrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<P95Metrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(P95Metrics.class));

       return (TypeAdapter<T>) new TypeAdapter<P95Metrics>() {
           @Override
           public void write(JsonWriter out, P95Metrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public P95Metrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of P95Metrics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of P95Metrics
   * @throws IOException if the JSON string is invalid with respect to P95Metrics
   */
  public static P95Metrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, P95Metrics.class);
  }

  /**
   * Convert an instance of P95Metrics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

