/*
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateTaskRequestOptions;
import org.openapitools.client.model.CreateTaskRequestSchedule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateTaskRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:05.755663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateTaskRequest {
  public static final String SERIALIZED_NAME_SOURCE_LOCATION_ARN = "SourceLocationArn";
  @SerializedName(SERIALIZED_NAME_SOURCE_LOCATION_ARN)
  private String sourceLocationArn;

  public static final String SERIALIZED_NAME_DESTINATION_LOCATION_ARN = "DestinationLocationArn";
  @SerializedName(SERIALIZED_NAME_DESTINATION_LOCATION_ARN)
  private String destinationLocationArn;

  public static final String SERIALIZED_NAME_CLOUD_WATCH_LOG_GROUP_ARN = "CloudWatchLogGroupArn";
  @SerializedName(SERIALIZED_NAME_CLOUD_WATCH_LOG_GROUP_ARN)
  private String cloudWatchLogGroupArn;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPTIONS = "Options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private CreateTaskRequestOptions options;

  public static final String SERIALIZED_NAME_EXCLUDES = "Excludes";
  @SerializedName(SERIALIZED_NAME_EXCLUDES)
  private List excludes;

  public static final String SERIALIZED_NAME_SCHEDULE = "Schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private CreateTaskRequestSchedule schedule;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_INCLUDES = "Includes";
  @SerializedName(SERIALIZED_NAME_INCLUDES)
  private List includes;

  public CreateTaskRequest() {
  }

  public CreateTaskRequest sourceLocationArn(String sourceLocationArn) {
    this.sourceLocationArn = sourceLocationArn;
    return this;
  }

  /**
   * Get sourceLocationArn
   * @return sourceLocationArn
   */
  @javax.annotation.Nonnull
  public String getSourceLocationArn() {
    return sourceLocationArn;
  }

  public void setSourceLocationArn(String sourceLocationArn) {
    this.sourceLocationArn = sourceLocationArn;
  }


  public CreateTaskRequest destinationLocationArn(String destinationLocationArn) {
    this.destinationLocationArn = destinationLocationArn;
    return this;
  }

  /**
   * Get destinationLocationArn
   * @return destinationLocationArn
   */
  @javax.annotation.Nonnull
  public String getDestinationLocationArn() {
    return destinationLocationArn;
  }

  public void setDestinationLocationArn(String destinationLocationArn) {
    this.destinationLocationArn = destinationLocationArn;
  }


  public CreateTaskRequest cloudWatchLogGroupArn(String cloudWatchLogGroupArn) {
    this.cloudWatchLogGroupArn = cloudWatchLogGroupArn;
    return this;
  }

  /**
   * Get cloudWatchLogGroupArn
   * @return cloudWatchLogGroupArn
   */
  @javax.annotation.Nullable
  public String getCloudWatchLogGroupArn() {
    return cloudWatchLogGroupArn;
  }

  public void setCloudWatchLogGroupArn(String cloudWatchLogGroupArn) {
    this.cloudWatchLogGroupArn = cloudWatchLogGroupArn;
  }


  public CreateTaskRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateTaskRequest options(CreateTaskRequestOptions options) {
    this.options = options;
    return this;
  }

  /**
   * Get options
   * @return options
   */
  @javax.annotation.Nullable
  public CreateTaskRequestOptions getOptions() {
    return options;
  }

  public void setOptions(CreateTaskRequestOptions options) {
    this.options = options;
  }


  public CreateTaskRequest excludes(List excludes) {
    this.excludes = excludes;
    return this;
  }

  /**
   * Get excludes
   * @return excludes
   */
  @javax.annotation.Nullable
  public List getExcludes() {
    return excludes;
  }

  public void setExcludes(List excludes) {
    this.excludes = excludes;
  }


  public CreateTaskRequest schedule(CreateTaskRequestSchedule schedule) {
    this.schedule = schedule;
    return this;
  }

  /**
   * Get schedule
   * @return schedule
   */
  @javax.annotation.Nullable
  public CreateTaskRequestSchedule getSchedule() {
    return schedule;
  }

  public void setSchedule(CreateTaskRequestSchedule schedule) {
    this.schedule = schedule;
  }


  public CreateTaskRequest tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public CreateTaskRequest includes(List includes) {
    this.includes = includes;
    return this;
  }

  /**
   * Get includes
   * @return includes
   */
  @javax.annotation.Nullable
  public List getIncludes() {
    return includes;
  }

  public void setIncludes(List includes) {
    this.includes = includes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateTaskRequest createTaskRequest = (CreateTaskRequest) o;
    return Objects.equals(this.sourceLocationArn, createTaskRequest.sourceLocationArn) &&
        Objects.equals(this.destinationLocationArn, createTaskRequest.destinationLocationArn) &&
        Objects.equals(this.cloudWatchLogGroupArn, createTaskRequest.cloudWatchLogGroupArn) &&
        Objects.equals(this.name, createTaskRequest.name) &&
        Objects.equals(this.options, createTaskRequest.options) &&
        Objects.equals(this.excludes, createTaskRequest.excludes) &&
        Objects.equals(this.schedule, createTaskRequest.schedule) &&
        Objects.equals(this.tags, createTaskRequest.tags) &&
        Objects.equals(this.includes, createTaskRequest.includes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceLocationArn, destinationLocationArn, cloudWatchLogGroupArn, name, options, excludes, schedule, tags, includes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateTaskRequest {\n");
    sb.append("    sourceLocationArn: ").append(toIndentedString(sourceLocationArn)).append("\n");
    sb.append("    destinationLocationArn: ").append(toIndentedString(destinationLocationArn)).append("\n");
    sb.append("    cloudWatchLogGroupArn: ").append(toIndentedString(cloudWatchLogGroupArn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    excludes: ").append(toIndentedString(excludes)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    includes: ").append(toIndentedString(includes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SourceLocationArn");
    openapiFields.add("DestinationLocationArn");
    openapiFields.add("CloudWatchLogGroupArn");
    openapiFields.add("Name");
    openapiFields.add("Options");
    openapiFields.add("Excludes");
    openapiFields.add("Schedule");
    openapiFields.add("Tags");
    openapiFields.add("Includes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SourceLocationArn");
    openapiRequiredFields.add("DestinationLocationArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateTaskRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateTaskRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateTaskRequest is not found in the empty JSON string", CreateTaskRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateTaskRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateTaskRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateTaskRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `SourceLocationArn`
      String.validateJsonElement(jsonObj.get("SourceLocationArn"));
      // validate the required field `DestinationLocationArn`
      String.validateJsonElement(jsonObj.get("DestinationLocationArn"));
      // validate the optional field `CloudWatchLogGroupArn`
      if (jsonObj.get("CloudWatchLogGroupArn") != null && !jsonObj.get("CloudWatchLogGroupArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CloudWatchLogGroupArn"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Options`
      if (jsonObj.get("Options") != null && !jsonObj.get("Options").isJsonNull()) {
        CreateTaskRequestOptions.validateJsonElement(jsonObj.get("Options"));
      }
      // validate the optional field `Excludes`
      if (jsonObj.get("Excludes") != null && !jsonObj.get("Excludes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Excludes"));
      }
      // validate the optional field `Schedule`
      if (jsonObj.get("Schedule") != null && !jsonObj.get("Schedule").isJsonNull()) {
        CreateTaskRequestSchedule.validateJsonElement(jsonObj.get("Schedule"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `Includes`
      if (jsonObj.get("Includes") != null && !jsonObj.get("Includes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Includes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateTaskRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateTaskRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateTaskRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateTaskRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateTaskRequest>() {
           @Override
           public void write(JsonWriter out, CreateTaskRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateTaskRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateTaskRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateTaskRequest
   * @throws IOException if the JSON string is invalid with respect to CreateTaskRequest
   */
  public static CreateTaskRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateTaskRequest.class);
  }

  /**
   * Convert an instance of CreateTaskRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

