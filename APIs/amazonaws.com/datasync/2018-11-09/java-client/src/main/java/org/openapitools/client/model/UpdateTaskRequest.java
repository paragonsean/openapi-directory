/*
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Options;
import org.openapitools.client.model.UpdateTaskRequestSchedule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateTaskResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:05.755663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateTaskRequest {
  public static final String SERIALIZED_NAME_TASK_ARN = "TaskArn";
  @SerializedName(SERIALIZED_NAME_TASK_ARN)
  private String taskArn;

  public static final String SERIALIZED_NAME_OPTIONS = "Options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private Options options;

  public static final String SERIALIZED_NAME_EXCLUDES = "Excludes";
  @SerializedName(SERIALIZED_NAME_EXCLUDES)
  private List excludes;

  public static final String SERIALIZED_NAME_SCHEDULE = "Schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private UpdateTaskRequestSchedule schedule;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CLOUD_WATCH_LOG_GROUP_ARN = "CloudWatchLogGroupArn";
  @SerializedName(SERIALIZED_NAME_CLOUD_WATCH_LOG_GROUP_ARN)
  private String cloudWatchLogGroupArn;

  public static final String SERIALIZED_NAME_INCLUDES = "Includes";
  @SerializedName(SERIALIZED_NAME_INCLUDES)
  private List includes;

  public UpdateTaskRequest() {
  }

  public UpdateTaskRequest taskArn(String taskArn) {
    this.taskArn = taskArn;
    return this;
  }

  /**
   * Get taskArn
   * @return taskArn
   */
  @javax.annotation.Nonnull
  public String getTaskArn() {
    return taskArn;
  }

  public void setTaskArn(String taskArn) {
    this.taskArn = taskArn;
  }


  public UpdateTaskRequest options(Options options) {
    this.options = options;
    return this;
  }

  /**
   * Get options
   * @return options
   */
  @javax.annotation.Nullable
  public Options getOptions() {
    return options;
  }

  public void setOptions(Options options) {
    this.options = options;
  }


  public UpdateTaskRequest excludes(List excludes) {
    this.excludes = excludes;
    return this;
  }

  /**
   * Get excludes
   * @return excludes
   */
  @javax.annotation.Nullable
  public List getExcludes() {
    return excludes;
  }

  public void setExcludes(List excludes) {
    this.excludes = excludes;
  }


  public UpdateTaskRequest schedule(UpdateTaskRequestSchedule schedule) {
    this.schedule = schedule;
    return this;
  }

  /**
   * Get schedule
   * @return schedule
   */
  @javax.annotation.Nullable
  public UpdateTaskRequestSchedule getSchedule() {
    return schedule;
  }

  public void setSchedule(UpdateTaskRequestSchedule schedule) {
    this.schedule = schedule;
  }


  public UpdateTaskRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateTaskRequest cloudWatchLogGroupArn(String cloudWatchLogGroupArn) {
    this.cloudWatchLogGroupArn = cloudWatchLogGroupArn;
    return this;
  }

  /**
   * Get cloudWatchLogGroupArn
   * @return cloudWatchLogGroupArn
   */
  @javax.annotation.Nullable
  public String getCloudWatchLogGroupArn() {
    return cloudWatchLogGroupArn;
  }

  public void setCloudWatchLogGroupArn(String cloudWatchLogGroupArn) {
    this.cloudWatchLogGroupArn = cloudWatchLogGroupArn;
  }


  public UpdateTaskRequest includes(List includes) {
    this.includes = includes;
    return this;
  }

  /**
   * Get includes
   * @return includes
   */
  @javax.annotation.Nullable
  public List getIncludes() {
    return includes;
  }

  public void setIncludes(List includes) {
    this.includes = includes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateTaskRequest updateTaskRequest = (UpdateTaskRequest) o;
    return Objects.equals(this.taskArn, updateTaskRequest.taskArn) &&
        Objects.equals(this.options, updateTaskRequest.options) &&
        Objects.equals(this.excludes, updateTaskRequest.excludes) &&
        Objects.equals(this.schedule, updateTaskRequest.schedule) &&
        Objects.equals(this.name, updateTaskRequest.name) &&
        Objects.equals(this.cloudWatchLogGroupArn, updateTaskRequest.cloudWatchLogGroupArn) &&
        Objects.equals(this.includes, updateTaskRequest.includes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(taskArn, options, excludes, schedule, name, cloudWatchLogGroupArn, includes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateTaskRequest {\n");
    sb.append("    taskArn: ").append(toIndentedString(taskArn)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    excludes: ").append(toIndentedString(excludes)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    cloudWatchLogGroupArn: ").append(toIndentedString(cloudWatchLogGroupArn)).append("\n");
    sb.append("    includes: ").append(toIndentedString(includes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TaskArn");
    openapiFields.add("Options");
    openapiFields.add("Excludes");
    openapiFields.add("Schedule");
    openapiFields.add("Name");
    openapiFields.add("CloudWatchLogGroupArn");
    openapiFields.add("Includes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TaskArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateTaskRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateTaskRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateTaskRequest is not found in the empty JSON string", UpdateTaskRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateTaskRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateTaskRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateTaskRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `TaskArn`
      String.validateJsonElement(jsonObj.get("TaskArn"));
      // validate the optional field `Options`
      if (jsonObj.get("Options") != null && !jsonObj.get("Options").isJsonNull()) {
        Options.validateJsonElement(jsonObj.get("Options"));
      }
      // validate the optional field `Excludes`
      if (jsonObj.get("Excludes") != null && !jsonObj.get("Excludes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Excludes"));
      }
      // validate the optional field `Schedule`
      if (jsonObj.get("Schedule") != null && !jsonObj.get("Schedule").isJsonNull()) {
        UpdateTaskRequestSchedule.validateJsonElement(jsonObj.get("Schedule"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `CloudWatchLogGroupArn`
      if (jsonObj.get("CloudWatchLogGroupArn") != null && !jsonObj.get("CloudWatchLogGroupArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CloudWatchLogGroupArn"));
      }
      // validate the optional field `Includes`
      if (jsonObj.get("Includes") != null && !jsonObj.get("Includes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Includes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateTaskRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateTaskRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateTaskRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateTaskRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateTaskRequest>() {
           @Override
           public void write(JsonWriter out, UpdateTaskRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateTaskRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateTaskRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateTaskRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateTaskRequest
   */
  public static UpdateTaskRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateTaskRequest.class);
  }

  /**
   * Convert an instance of UpdateTaskRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

