/*
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The storage capacity of an on-premises storage system resource (for example, a volume).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:05.755663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Capacity {
  public static final String SERIALIZED_NAME_USED = "Used";
  @SerializedName(SERIALIZED_NAME_USED)
  private Integer used;

  public static final String SERIALIZED_NAME_PROVISIONED = "Provisioned";
  @SerializedName(SERIALIZED_NAME_PROVISIONED)
  private Integer provisioned;

  public static final String SERIALIZED_NAME_LOGICAL_USED = "LogicalUsed";
  @SerializedName(SERIALIZED_NAME_LOGICAL_USED)
  private Integer logicalUsed;

  public static final String SERIALIZED_NAME_CLUSTER_CLOUD_STORAGE_USED = "ClusterCloudStorageUsed";
  @SerializedName(SERIALIZED_NAME_CLUSTER_CLOUD_STORAGE_USED)
  private Integer clusterCloudStorageUsed;

  public Capacity() {
  }

  public Capacity used(Integer used) {
    this.used = used;
    return this;
  }

  /**
   * Get used
   * @return used
   */
  @javax.annotation.Nullable
  public Integer getUsed() {
    return used;
  }

  public void setUsed(Integer used) {
    this.used = used;
  }


  public Capacity provisioned(Integer provisioned) {
    this.provisioned = provisioned;
    return this;
  }

  /**
   * Get provisioned
   * @return provisioned
   */
  @javax.annotation.Nullable
  public Integer getProvisioned() {
    return provisioned;
  }

  public void setProvisioned(Integer provisioned) {
    this.provisioned = provisioned;
  }


  public Capacity logicalUsed(Integer logicalUsed) {
    this.logicalUsed = logicalUsed;
    return this;
  }

  /**
   * Get logicalUsed
   * @return logicalUsed
   */
  @javax.annotation.Nullable
  public Integer getLogicalUsed() {
    return logicalUsed;
  }

  public void setLogicalUsed(Integer logicalUsed) {
    this.logicalUsed = logicalUsed;
  }


  public Capacity clusterCloudStorageUsed(Integer clusterCloudStorageUsed) {
    this.clusterCloudStorageUsed = clusterCloudStorageUsed;
    return this;
  }

  /**
   * Get clusterCloudStorageUsed
   * @return clusterCloudStorageUsed
   */
  @javax.annotation.Nullable
  public Integer getClusterCloudStorageUsed() {
    return clusterCloudStorageUsed;
  }

  public void setClusterCloudStorageUsed(Integer clusterCloudStorageUsed) {
    this.clusterCloudStorageUsed = clusterCloudStorageUsed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Capacity capacity = (Capacity) o;
    return Objects.equals(this.used, capacity.used) &&
        Objects.equals(this.provisioned, capacity.provisioned) &&
        Objects.equals(this.logicalUsed, capacity.logicalUsed) &&
        Objects.equals(this.clusterCloudStorageUsed, capacity.clusterCloudStorageUsed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(used, provisioned, logicalUsed, clusterCloudStorageUsed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Capacity {\n");
    sb.append("    used: ").append(toIndentedString(used)).append("\n");
    sb.append("    provisioned: ").append(toIndentedString(provisioned)).append("\n");
    sb.append("    logicalUsed: ").append(toIndentedString(logicalUsed)).append("\n");
    sb.append("    clusterCloudStorageUsed: ").append(toIndentedString(clusterCloudStorageUsed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Used");
    openapiFields.add("Provisioned");
    openapiFields.add("LogicalUsed");
    openapiFields.add("ClusterCloudStorageUsed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Capacity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Capacity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Capacity is not found in the empty JSON string", Capacity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Capacity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Capacity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Used`
      if (jsonObj.get("Used") != null && !jsonObj.get("Used").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Used"));
      }
      // validate the optional field `Provisioned`
      if (jsonObj.get("Provisioned") != null && !jsonObj.get("Provisioned").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Provisioned"));
      }
      // validate the optional field `LogicalUsed`
      if (jsonObj.get("LogicalUsed") != null && !jsonObj.get("LogicalUsed").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("LogicalUsed"));
      }
      // validate the optional field `ClusterCloudStorageUsed`
      if (jsonObj.get("ClusterCloudStorageUsed") != null && !jsonObj.get("ClusterCloudStorageUsed").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ClusterCloudStorageUsed"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Capacity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Capacity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Capacity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Capacity.class));

       return (TypeAdapter<T>) new TypeAdapter<Capacity>() {
           @Override
           public void write(JsonWriter out, Capacity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Capacity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Capacity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Capacity
   * @throws IOException if the JSON string is invalid with respect to Capacity
   */
  public static Capacity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Capacity.class);
  }

  /**
   * Convert an instance of Capacity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

