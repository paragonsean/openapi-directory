/*
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DescribeLocationSmbResponseMountOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeLocationSmbResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:05.755663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeLocationSmbResponse {
  public static final String SERIALIZED_NAME_LOCATION_ARN = "LocationArn";
  @SerializedName(SERIALIZED_NAME_LOCATION_ARN)
  private String locationArn;

  public static final String SERIALIZED_NAME_LOCATION_URI = "LocationUri";
  @SerializedName(SERIALIZED_NAME_LOCATION_URI)
  private String locationUri;

  public static final String SERIALIZED_NAME_AGENT_ARNS = "AgentArns";
  @SerializedName(SERIALIZED_NAME_AGENT_ARNS)
  private List agentArns;

  public static final String SERIALIZED_NAME_USER = "User";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public static final String SERIALIZED_NAME_DOMAIN = "Domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_MOUNT_OPTIONS = "MountOptions";
  @SerializedName(SERIALIZED_NAME_MOUNT_OPTIONS)
  private DescribeLocationSmbResponseMountOptions mountOptions;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public DescribeLocationSmbResponse() {
  }

  public DescribeLocationSmbResponse locationArn(String locationArn) {
    this.locationArn = locationArn;
    return this;
  }

  /**
   * Get locationArn
   * @return locationArn
   */
  @javax.annotation.Nullable
  public String getLocationArn() {
    return locationArn;
  }

  public void setLocationArn(String locationArn) {
    this.locationArn = locationArn;
  }


  public DescribeLocationSmbResponse locationUri(String locationUri) {
    this.locationUri = locationUri;
    return this;
  }

  /**
   * Get locationUri
   * @return locationUri
   */
  @javax.annotation.Nullable
  public String getLocationUri() {
    return locationUri;
  }

  public void setLocationUri(String locationUri) {
    this.locationUri = locationUri;
  }


  public DescribeLocationSmbResponse agentArns(List agentArns) {
    this.agentArns = agentArns;
    return this;
  }

  /**
   * Get agentArns
   * @return agentArns
   */
  @javax.annotation.Nullable
  public List getAgentArns() {
    return agentArns;
  }

  public void setAgentArns(List agentArns) {
    this.agentArns = agentArns;
  }


  public DescribeLocationSmbResponse user(String user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }


  public DescribeLocationSmbResponse domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Get domain
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public DescribeLocationSmbResponse mountOptions(DescribeLocationSmbResponseMountOptions mountOptions) {
    this.mountOptions = mountOptions;
    return this;
  }

  /**
   * Get mountOptions
   * @return mountOptions
   */
  @javax.annotation.Nullable
  public DescribeLocationSmbResponseMountOptions getMountOptions() {
    return mountOptions;
  }

  public void setMountOptions(DescribeLocationSmbResponseMountOptions mountOptions) {
    this.mountOptions = mountOptions;
  }


  public DescribeLocationSmbResponse creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeLocationSmbResponse describeLocationSmbResponse = (DescribeLocationSmbResponse) o;
    return Objects.equals(this.locationArn, describeLocationSmbResponse.locationArn) &&
        Objects.equals(this.locationUri, describeLocationSmbResponse.locationUri) &&
        Objects.equals(this.agentArns, describeLocationSmbResponse.agentArns) &&
        Objects.equals(this.user, describeLocationSmbResponse.user) &&
        Objects.equals(this.domain, describeLocationSmbResponse.domain) &&
        Objects.equals(this.mountOptions, describeLocationSmbResponse.mountOptions) &&
        Objects.equals(this.creationTime, describeLocationSmbResponse.creationTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(locationArn, locationUri, agentArns, user, domain, mountOptions, creationTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeLocationSmbResponse {\n");
    sb.append("    locationArn: ").append(toIndentedString(locationArn)).append("\n");
    sb.append("    locationUri: ").append(toIndentedString(locationUri)).append("\n");
    sb.append("    agentArns: ").append(toIndentedString(agentArns)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    mountOptions: ").append(toIndentedString(mountOptions)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LocationArn");
    openapiFields.add("LocationUri");
    openapiFields.add("AgentArns");
    openapiFields.add("User");
    openapiFields.add("Domain");
    openapiFields.add("MountOptions");
    openapiFields.add("CreationTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeLocationSmbResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeLocationSmbResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeLocationSmbResponse is not found in the empty JSON string", DescribeLocationSmbResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeLocationSmbResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeLocationSmbResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `LocationArn`
      if (jsonObj.get("LocationArn") != null && !jsonObj.get("LocationArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LocationArn"));
      }
      // validate the optional field `LocationUri`
      if (jsonObj.get("LocationUri") != null && !jsonObj.get("LocationUri").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LocationUri"));
      }
      // validate the optional field `AgentArns`
      if (jsonObj.get("AgentArns") != null && !jsonObj.get("AgentArns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AgentArns"));
      }
      // validate the optional field `User`
      if (jsonObj.get("User") != null && !jsonObj.get("User").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("User"));
      }
      // validate the optional field `Domain`
      if (jsonObj.get("Domain") != null && !jsonObj.get("Domain").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Domain"));
      }
      // validate the optional field `MountOptions`
      if (jsonObj.get("MountOptions") != null && !jsonObj.get("MountOptions").isJsonNull()) {
        DescribeLocationSmbResponseMountOptions.validateJsonElement(jsonObj.get("MountOptions"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeLocationSmbResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeLocationSmbResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeLocationSmbResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeLocationSmbResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeLocationSmbResponse>() {
           @Override
           public void write(JsonWriter out, DescribeLocationSmbResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeLocationSmbResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeLocationSmbResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeLocationSmbResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeLocationSmbResponse
   */
  public static DescribeLocationSmbResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeLocationSmbResponse.class);
  }

  /**
   * Convert an instance of DescribeLocationSmbResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

