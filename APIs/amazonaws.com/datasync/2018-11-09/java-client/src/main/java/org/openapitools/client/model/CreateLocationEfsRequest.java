/*
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateLocationEfsRequestEc2Config;
import org.openapitools.client.model.EfsInTransitEncryption;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateLocationEfsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:05.755663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateLocationEfsRequest {
  public static final String SERIALIZED_NAME_SUBDIRECTORY = "Subdirectory";
  @SerializedName(SERIALIZED_NAME_SUBDIRECTORY)
  private String subdirectory;

  public static final String SERIALIZED_NAME_EFS_FILESYSTEM_ARN = "EfsFilesystemArn";
  @SerializedName(SERIALIZED_NAME_EFS_FILESYSTEM_ARN)
  private String efsFilesystemArn;

  public static final String SERIALIZED_NAME_EC2_CONFIG = "Ec2Config";
  @SerializedName(SERIALIZED_NAME_EC2_CONFIG)
  private CreateLocationEfsRequestEc2Config ec2Config;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_ACCESS_POINT_ARN = "AccessPointArn";
  @SerializedName(SERIALIZED_NAME_ACCESS_POINT_ARN)
  private String accessPointArn;

  public static final String SERIALIZED_NAME_FILE_SYSTEM_ACCESS_ROLE_ARN = "FileSystemAccessRoleArn";
  @SerializedName(SERIALIZED_NAME_FILE_SYSTEM_ACCESS_ROLE_ARN)
  private String fileSystemAccessRoleArn;

  public static final String SERIALIZED_NAME_IN_TRANSIT_ENCRYPTION = "InTransitEncryption";
  @SerializedName(SERIALIZED_NAME_IN_TRANSIT_ENCRYPTION)
  private EfsInTransitEncryption inTransitEncryption;

  public CreateLocationEfsRequest() {
  }

  public CreateLocationEfsRequest subdirectory(String subdirectory) {
    this.subdirectory = subdirectory;
    return this;
  }

  /**
   * Get subdirectory
   * @return subdirectory
   */
  @javax.annotation.Nullable
  public String getSubdirectory() {
    return subdirectory;
  }

  public void setSubdirectory(String subdirectory) {
    this.subdirectory = subdirectory;
  }


  public CreateLocationEfsRequest efsFilesystemArn(String efsFilesystemArn) {
    this.efsFilesystemArn = efsFilesystemArn;
    return this;
  }

  /**
   * Get efsFilesystemArn
   * @return efsFilesystemArn
   */
  @javax.annotation.Nonnull
  public String getEfsFilesystemArn() {
    return efsFilesystemArn;
  }

  public void setEfsFilesystemArn(String efsFilesystemArn) {
    this.efsFilesystemArn = efsFilesystemArn;
  }


  public CreateLocationEfsRequest ec2Config(CreateLocationEfsRequestEc2Config ec2Config) {
    this.ec2Config = ec2Config;
    return this;
  }

  /**
   * Get ec2Config
   * @return ec2Config
   */
  @javax.annotation.Nonnull
  public CreateLocationEfsRequestEc2Config getEc2Config() {
    return ec2Config;
  }

  public void setEc2Config(CreateLocationEfsRequestEc2Config ec2Config) {
    this.ec2Config = ec2Config;
  }


  public CreateLocationEfsRequest tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public CreateLocationEfsRequest accessPointArn(String accessPointArn) {
    this.accessPointArn = accessPointArn;
    return this;
  }

  /**
   * Get accessPointArn
   * @return accessPointArn
   */
  @javax.annotation.Nullable
  public String getAccessPointArn() {
    return accessPointArn;
  }

  public void setAccessPointArn(String accessPointArn) {
    this.accessPointArn = accessPointArn;
  }


  public CreateLocationEfsRequest fileSystemAccessRoleArn(String fileSystemAccessRoleArn) {
    this.fileSystemAccessRoleArn = fileSystemAccessRoleArn;
    return this;
  }

  /**
   * Get fileSystemAccessRoleArn
   * @return fileSystemAccessRoleArn
   */
  @javax.annotation.Nullable
  public String getFileSystemAccessRoleArn() {
    return fileSystemAccessRoleArn;
  }

  public void setFileSystemAccessRoleArn(String fileSystemAccessRoleArn) {
    this.fileSystemAccessRoleArn = fileSystemAccessRoleArn;
  }


  public CreateLocationEfsRequest inTransitEncryption(EfsInTransitEncryption inTransitEncryption) {
    this.inTransitEncryption = inTransitEncryption;
    return this;
  }

  /**
   * Get inTransitEncryption
   * @return inTransitEncryption
   */
  @javax.annotation.Nullable
  public EfsInTransitEncryption getInTransitEncryption() {
    return inTransitEncryption;
  }

  public void setInTransitEncryption(EfsInTransitEncryption inTransitEncryption) {
    this.inTransitEncryption = inTransitEncryption;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateLocationEfsRequest createLocationEfsRequest = (CreateLocationEfsRequest) o;
    return Objects.equals(this.subdirectory, createLocationEfsRequest.subdirectory) &&
        Objects.equals(this.efsFilesystemArn, createLocationEfsRequest.efsFilesystemArn) &&
        Objects.equals(this.ec2Config, createLocationEfsRequest.ec2Config) &&
        Objects.equals(this.tags, createLocationEfsRequest.tags) &&
        Objects.equals(this.accessPointArn, createLocationEfsRequest.accessPointArn) &&
        Objects.equals(this.fileSystemAccessRoleArn, createLocationEfsRequest.fileSystemAccessRoleArn) &&
        Objects.equals(this.inTransitEncryption, createLocationEfsRequest.inTransitEncryption);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subdirectory, efsFilesystemArn, ec2Config, tags, accessPointArn, fileSystemAccessRoleArn, inTransitEncryption);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateLocationEfsRequest {\n");
    sb.append("    subdirectory: ").append(toIndentedString(subdirectory)).append("\n");
    sb.append("    efsFilesystemArn: ").append(toIndentedString(efsFilesystemArn)).append("\n");
    sb.append("    ec2Config: ").append(toIndentedString(ec2Config)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    accessPointArn: ").append(toIndentedString(accessPointArn)).append("\n");
    sb.append("    fileSystemAccessRoleArn: ").append(toIndentedString(fileSystemAccessRoleArn)).append("\n");
    sb.append("    inTransitEncryption: ").append(toIndentedString(inTransitEncryption)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Subdirectory");
    openapiFields.add("EfsFilesystemArn");
    openapiFields.add("Ec2Config");
    openapiFields.add("Tags");
    openapiFields.add("AccessPointArn");
    openapiFields.add("FileSystemAccessRoleArn");
    openapiFields.add("InTransitEncryption");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("EfsFilesystemArn");
    openapiRequiredFields.add("Ec2Config");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateLocationEfsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateLocationEfsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateLocationEfsRequest is not found in the empty JSON string", CreateLocationEfsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateLocationEfsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateLocationEfsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateLocationEfsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Subdirectory`
      if (jsonObj.get("Subdirectory") != null && !jsonObj.get("Subdirectory").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Subdirectory"));
      }
      // validate the required field `EfsFilesystemArn`
      String.validateJsonElement(jsonObj.get("EfsFilesystemArn"));
      // validate the required field `Ec2Config`
      CreateLocationEfsRequestEc2Config.validateJsonElement(jsonObj.get("Ec2Config"));
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `AccessPointArn`
      if (jsonObj.get("AccessPointArn") != null && !jsonObj.get("AccessPointArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AccessPointArn"));
      }
      // validate the optional field `FileSystemAccessRoleArn`
      if (jsonObj.get("FileSystemAccessRoleArn") != null && !jsonObj.get("FileSystemAccessRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FileSystemAccessRoleArn"));
      }
      // validate the optional field `InTransitEncryption`
      if (jsonObj.get("InTransitEncryption") != null && !jsonObj.get("InTransitEncryption").isJsonNull()) {
        EfsInTransitEncryption.validateJsonElement(jsonObj.get("InTransitEncryption"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateLocationEfsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateLocationEfsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateLocationEfsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateLocationEfsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateLocationEfsRequest>() {
           @Override
           public void write(JsonWriter out, CreateLocationEfsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateLocationEfsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateLocationEfsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateLocationEfsRequest
   * @throws IOException if the JSON string is invalid with respect to CreateLocationEfsRequest
   */
  public static CreateLocationEfsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateLocationEfsRequest.class);
  }

  /**
   * Convert an instance of CreateLocationEfsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

