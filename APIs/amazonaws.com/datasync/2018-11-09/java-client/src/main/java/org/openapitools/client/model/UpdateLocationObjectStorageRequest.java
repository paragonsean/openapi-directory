/*
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ObjectStorageServerProtocol;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateLocationObjectStorageRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:05.755663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateLocationObjectStorageRequest {
  public static final String SERIALIZED_NAME_LOCATION_ARN = "LocationArn";
  @SerializedName(SERIALIZED_NAME_LOCATION_ARN)
  private String locationArn;

  public static final String SERIALIZED_NAME_SERVER_PORT = "ServerPort";
  @SerializedName(SERIALIZED_NAME_SERVER_PORT)
  private Integer serverPort;

  public static final String SERIALIZED_NAME_SERVER_PROTOCOL = "ServerProtocol";
  @SerializedName(SERIALIZED_NAME_SERVER_PROTOCOL)
  private ObjectStorageServerProtocol serverProtocol;

  public static final String SERIALIZED_NAME_SUBDIRECTORY = "Subdirectory";
  @SerializedName(SERIALIZED_NAME_SUBDIRECTORY)
  private String subdirectory;

  public static final String SERIALIZED_NAME_ACCESS_KEY = "AccessKey";
  @SerializedName(SERIALIZED_NAME_ACCESS_KEY)
  private String accessKey;

  public static final String SERIALIZED_NAME_SECRET_KEY = "SecretKey";
  @SerializedName(SERIALIZED_NAME_SECRET_KEY)
  private String secretKey;

  public static final String SERIALIZED_NAME_AGENT_ARNS = "AgentArns";
  @SerializedName(SERIALIZED_NAME_AGENT_ARNS)
  private List agentArns;

  public static final String SERIALIZED_NAME_SERVER_CERTIFICATE = "ServerCertificate";
  @SerializedName(SERIALIZED_NAME_SERVER_CERTIFICATE)
  private String serverCertificate;

  public UpdateLocationObjectStorageRequest() {
  }

  public UpdateLocationObjectStorageRequest locationArn(String locationArn) {
    this.locationArn = locationArn;
    return this;
  }

  /**
   * Get locationArn
   * @return locationArn
   */
  @javax.annotation.Nonnull
  public String getLocationArn() {
    return locationArn;
  }

  public void setLocationArn(String locationArn) {
    this.locationArn = locationArn;
  }


  public UpdateLocationObjectStorageRequest serverPort(Integer serverPort) {
    this.serverPort = serverPort;
    return this;
  }

  /**
   * Get serverPort
   * @return serverPort
   */
  @javax.annotation.Nullable
  public Integer getServerPort() {
    return serverPort;
  }

  public void setServerPort(Integer serverPort) {
    this.serverPort = serverPort;
  }


  public UpdateLocationObjectStorageRequest serverProtocol(ObjectStorageServerProtocol serverProtocol) {
    this.serverProtocol = serverProtocol;
    return this;
  }

  /**
   * Get serverProtocol
   * @return serverProtocol
   */
  @javax.annotation.Nullable
  public ObjectStorageServerProtocol getServerProtocol() {
    return serverProtocol;
  }

  public void setServerProtocol(ObjectStorageServerProtocol serverProtocol) {
    this.serverProtocol = serverProtocol;
  }


  public UpdateLocationObjectStorageRequest subdirectory(String subdirectory) {
    this.subdirectory = subdirectory;
    return this;
  }

  /**
   * Get subdirectory
   * @return subdirectory
   */
  @javax.annotation.Nullable
  public String getSubdirectory() {
    return subdirectory;
  }

  public void setSubdirectory(String subdirectory) {
    this.subdirectory = subdirectory;
  }


  public UpdateLocationObjectStorageRequest accessKey(String accessKey) {
    this.accessKey = accessKey;
    return this;
  }

  /**
   * Get accessKey
   * @return accessKey
   */
  @javax.annotation.Nullable
  public String getAccessKey() {
    return accessKey;
  }

  public void setAccessKey(String accessKey) {
    this.accessKey = accessKey;
  }


  public UpdateLocationObjectStorageRequest secretKey(String secretKey) {
    this.secretKey = secretKey;
    return this;
  }

  /**
   * Get secretKey
   * @return secretKey
   */
  @javax.annotation.Nullable
  public String getSecretKey() {
    return secretKey;
  }

  public void setSecretKey(String secretKey) {
    this.secretKey = secretKey;
  }


  public UpdateLocationObjectStorageRequest agentArns(List agentArns) {
    this.agentArns = agentArns;
    return this;
  }

  /**
   * Get agentArns
   * @return agentArns
   */
  @javax.annotation.Nullable
  public List getAgentArns() {
    return agentArns;
  }

  public void setAgentArns(List agentArns) {
    this.agentArns = agentArns;
  }


  public UpdateLocationObjectStorageRequest serverCertificate(String serverCertificate) {
    this.serverCertificate = serverCertificate;
    return this;
  }

  /**
   * Get serverCertificate
   * @return serverCertificate
   */
  @javax.annotation.Nullable
  public String getServerCertificate() {
    return serverCertificate;
  }

  public void setServerCertificate(String serverCertificate) {
    this.serverCertificate = serverCertificate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateLocationObjectStorageRequest updateLocationObjectStorageRequest = (UpdateLocationObjectStorageRequest) o;
    return Objects.equals(this.locationArn, updateLocationObjectStorageRequest.locationArn) &&
        Objects.equals(this.serverPort, updateLocationObjectStorageRequest.serverPort) &&
        Objects.equals(this.serverProtocol, updateLocationObjectStorageRequest.serverProtocol) &&
        Objects.equals(this.subdirectory, updateLocationObjectStorageRequest.subdirectory) &&
        Objects.equals(this.accessKey, updateLocationObjectStorageRequest.accessKey) &&
        Objects.equals(this.secretKey, updateLocationObjectStorageRequest.secretKey) &&
        Objects.equals(this.agentArns, updateLocationObjectStorageRequest.agentArns) &&
        Objects.equals(this.serverCertificate, updateLocationObjectStorageRequest.serverCertificate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(locationArn, serverPort, serverProtocol, subdirectory, accessKey, secretKey, agentArns, serverCertificate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateLocationObjectStorageRequest {\n");
    sb.append("    locationArn: ").append(toIndentedString(locationArn)).append("\n");
    sb.append("    serverPort: ").append(toIndentedString(serverPort)).append("\n");
    sb.append("    serverProtocol: ").append(toIndentedString(serverProtocol)).append("\n");
    sb.append("    subdirectory: ").append(toIndentedString(subdirectory)).append("\n");
    sb.append("    accessKey: ").append(toIndentedString(accessKey)).append("\n");
    sb.append("    secretKey: ").append(toIndentedString(secretKey)).append("\n");
    sb.append("    agentArns: ").append(toIndentedString(agentArns)).append("\n");
    sb.append("    serverCertificate: ").append(toIndentedString(serverCertificate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LocationArn");
    openapiFields.add("ServerPort");
    openapiFields.add("ServerProtocol");
    openapiFields.add("Subdirectory");
    openapiFields.add("AccessKey");
    openapiFields.add("SecretKey");
    openapiFields.add("AgentArns");
    openapiFields.add("ServerCertificate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("LocationArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateLocationObjectStorageRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateLocationObjectStorageRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateLocationObjectStorageRequest is not found in the empty JSON string", UpdateLocationObjectStorageRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateLocationObjectStorageRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateLocationObjectStorageRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateLocationObjectStorageRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `LocationArn`
      String.validateJsonElement(jsonObj.get("LocationArn"));
      // validate the optional field `ServerPort`
      if (jsonObj.get("ServerPort") != null && !jsonObj.get("ServerPort").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ServerPort"));
      }
      // validate the optional field `ServerProtocol`
      if (jsonObj.get("ServerProtocol") != null && !jsonObj.get("ServerProtocol").isJsonNull()) {
        ObjectStorageServerProtocol.validateJsonElement(jsonObj.get("ServerProtocol"));
      }
      // validate the optional field `Subdirectory`
      if (jsonObj.get("Subdirectory") != null && !jsonObj.get("Subdirectory").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Subdirectory"));
      }
      // validate the optional field `AccessKey`
      if (jsonObj.get("AccessKey") != null && !jsonObj.get("AccessKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AccessKey"));
      }
      // validate the optional field `SecretKey`
      if (jsonObj.get("SecretKey") != null && !jsonObj.get("SecretKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SecretKey"));
      }
      // validate the optional field `AgentArns`
      if (jsonObj.get("AgentArns") != null && !jsonObj.get("AgentArns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AgentArns"));
      }
      // validate the optional field `ServerCertificate`
      if (jsonObj.get("ServerCertificate") != null && !jsonObj.get("ServerCertificate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServerCertificate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateLocationObjectStorageRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateLocationObjectStorageRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateLocationObjectStorageRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateLocationObjectStorageRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateLocationObjectStorageRequest>() {
           @Override
           public void write(JsonWriter out, UpdateLocationObjectStorageRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateLocationObjectStorageRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateLocationObjectStorageRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateLocationObjectStorageRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateLocationObjectStorageRequest
   */
  public static UpdateLocationObjectStorageRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateLocationObjectStorageRequest.class);
  }

  /**
   * Convert an instance of UpdateLocationObjectStorageRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

