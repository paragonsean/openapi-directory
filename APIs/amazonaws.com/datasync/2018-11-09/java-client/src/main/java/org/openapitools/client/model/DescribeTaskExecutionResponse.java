/*
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DescribeTaskExecutionResponseResult;
import org.openapitools.client.model.Options;
import org.openapitools.client.model.TaskExecutionStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeTaskExecutionResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:05.755663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeTaskExecutionResponse {
  public static final String SERIALIZED_NAME_TASK_EXECUTION_ARN = "TaskExecutionArn";
  @SerializedName(SERIALIZED_NAME_TASK_EXECUTION_ARN)
  private String taskExecutionArn;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private TaskExecutionStatus status;

  public static final String SERIALIZED_NAME_OPTIONS = "Options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private Options options;

  public static final String SERIALIZED_NAME_EXCLUDES = "Excludes";
  @SerializedName(SERIALIZED_NAME_EXCLUDES)
  private List excludes;

  public static final String SERIALIZED_NAME_INCLUDES = "Includes";
  @SerializedName(SERIALIZED_NAME_INCLUDES)
  private List includes;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_ESTIMATED_FILES_TO_TRANSFER = "EstimatedFilesToTransfer";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_FILES_TO_TRANSFER)
  private Integer estimatedFilesToTransfer;

  public static final String SERIALIZED_NAME_ESTIMATED_BYTES_TO_TRANSFER = "EstimatedBytesToTransfer";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_BYTES_TO_TRANSFER)
  private Integer estimatedBytesToTransfer;

  public static final String SERIALIZED_NAME_FILES_TRANSFERRED = "FilesTransferred";
  @SerializedName(SERIALIZED_NAME_FILES_TRANSFERRED)
  private Integer filesTransferred;

  public static final String SERIALIZED_NAME_BYTES_WRITTEN = "BytesWritten";
  @SerializedName(SERIALIZED_NAME_BYTES_WRITTEN)
  private Integer bytesWritten;

  public static final String SERIALIZED_NAME_BYTES_TRANSFERRED = "BytesTransferred";
  @SerializedName(SERIALIZED_NAME_BYTES_TRANSFERRED)
  private Integer bytesTransferred;

  public static final String SERIALIZED_NAME_RESULT = "Result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private DescribeTaskExecutionResponseResult result;

  public static final String SERIALIZED_NAME_BYTES_COMPRESSED = "BytesCompressed";
  @SerializedName(SERIALIZED_NAME_BYTES_COMPRESSED)
  private Integer bytesCompressed;

  public DescribeTaskExecutionResponse() {
  }

  public DescribeTaskExecutionResponse taskExecutionArn(String taskExecutionArn) {
    this.taskExecutionArn = taskExecutionArn;
    return this;
  }

  /**
   * Get taskExecutionArn
   * @return taskExecutionArn
   */
  @javax.annotation.Nullable
  public String getTaskExecutionArn() {
    return taskExecutionArn;
  }

  public void setTaskExecutionArn(String taskExecutionArn) {
    this.taskExecutionArn = taskExecutionArn;
  }


  public DescribeTaskExecutionResponse status(TaskExecutionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public TaskExecutionStatus getStatus() {
    return status;
  }

  public void setStatus(TaskExecutionStatus status) {
    this.status = status;
  }


  public DescribeTaskExecutionResponse options(Options options) {
    this.options = options;
    return this;
  }

  /**
   * Get options
   * @return options
   */
  @javax.annotation.Nullable
  public Options getOptions() {
    return options;
  }

  public void setOptions(Options options) {
    this.options = options;
  }


  public DescribeTaskExecutionResponse excludes(List excludes) {
    this.excludes = excludes;
    return this;
  }

  /**
   * Get excludes
   * @return excludes
   */
  @javax.annotation.Nullable
  public List getExcludes() {
    return excludes;
  }

  public void setExcludes(List excludes) {
    this.excludes = excludes;
  }


  public DescribeTaskExecutionResponse includes(List includes) {
    this.includes = includes;
    return this;
  }

  /**
   * Get includes
   * @return includes
   */
  @javax.annotation.Nullable
  public List getIncludes() {
    return includes;
  }

  public void setIncludes(List includes) {
    this.includes = includes;
  }


  public DescribeTaskExecutionResponse startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public DescribeTaskExecutionResponse estimatedFilesToTransfer(Integer estimatedFilesToTransfer) {
    this.estimatedFilesToTransfer = estimatedFilesToTransfer;
    return this;
  }

  /**
   * Get estimatedFilesToTransfer
   * @return estimatedFilesToTransfer
   */
  @javax.annotation.Nullable
  public Integer getEstimatedFilesToTransfer() {
    return estimatedFilesToTransfer;
  }

  public void setEstimatedFilesToTransfer(Integer estimatedFilesToTransfer) {
    this.estimatedFilesToTransfer = estimatedFilesToTransfer;
  }


  public DescribeTaskExecutionResponse estimatedBytesToTransfer(Integer estimatedBytesToTransfer) {
    this.estimatedBytesToTransfer = estimatedBytesToTransfer;
    return this;
  }

  /**
   * Get estimatedBytesToTransfer
   * @return estimatedBytesToTransfer
   */
  @javax.annotation.Nullable
  public Integer getEstimatedBytesToTransfer() {
    return estimatedBytesToTransfer;
  }

  public void setEstimatedBytesToTransfer(Integer estimatedBytesToTransfer) {
    this.estimatedBytesToTransfer = estimatedBytesToTransfer;
  }


  public DescribeTaskExecutionResponse filesTransferred(Integer filesTransferred) {
    this.filesTransferred = filesTransferred;
    return this;
  }

  /**
   * Get filesTransferred
   * @return filesTransferred
   */
  @javax.annotation.Nullable
  public Integer getFilesTransferred() {
    return filesTransferred;
  }

  public void setFilesTransferred(Integer filesTransferred) {
    this.filesTransferred = filesTransferred;
  }


  public DescribeTaskExecutionResponse bytesWritten(Integer bytesWritten) {
    this.bytesWritten = bytesWritten;
    return this;
  }

  /**
   * Get bytesWritten
   * @return bytesWritten
   */
  @javax.annotation.Nullable
  public Integer getBytesWritten() {
    return bytesWritten;
  }

  public void setBytesWritten(Integer bytesWritten) {
    this.bytesWritten = bytesWritten;
  }


  public DescribeTaskExecutionResponse bytesTransferred(Integer bytesTransferred) {
    this.bytesTransferred = bytesTransferred;
    return this;
  }

  /**
   * Get bytesTransferred
   * @return bytesTransferred
   */
  @javax.annotation.Nullable
  public Integer getBytesTransferred() {
    return bytesTransferred;
  }

  public void setBytesTransferred(Integer bytesTransferred) {
    this.bytesTransferred = bytesTransferred;
  }


  public DescribeTaskExecutionResponse result(DescribeTaskExecutionResponseResult result) {
    this.result = result;
    return this;
  }

  /**
   * Get result
   * @return result
   */
  @javax.annotation.Nullable
  public DescribeTaskExecutionResponseResult getResult() {
    return result;
  }

  public void setResult(DescribeTaskExecutionResponseResult result) {
    this.result = result;
  }


  public DescribeTaskExecutionResponse bytesCompressed(Integer bytesCompressed) {
    this.bytesCompressed = bytesCompressed;
    return this;
  }

  /**
   * Get bytesCompressed
   * @return bytesCompressed
   */
  @javax.annotation.Nullable
  public Integer getBytesCompressed() {
    return bytesCompressed;
  }

  public void setBytesCompressed(Integer bytesCompressed) {
    this.bytesCompressed = bytesCompressed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeTaskExecutionResponse describeTaskExecutionResponse = (DescribeTaskExecutionResponse) o;
    return Objects.equals(this.taskExecutionArn, describeTaskExecutionResponse.taskExecutionArn) &&
        Objects.equals(this.status, describeTaskExecutionResponse.status) &&
        Objects.equals(this.options, describeTaskExecutionResponse.options) &&
        Objects.equals(this.excludes, describeTaskExecutionResponse.excludes) &&
        Objects.equals(this.includes, describeTaskExecutionResponse.includes) &&
        Objects.equals(this.startTime, describeTaskExecutionResponse.startTime) &&
        Objects.equals(this.estimatedFilesToTransfer, describeTaskExecutionResponse.estimatedFilesToTransfer) &&
        Objects.equals(this.estimatedBytesToTransfer, describeTaskExecutionResponse.estimatedBytesToTransfer) &&
        Objects.equals(this.filesTransferred, describeTaskExecutionResponse.filesTransferred) &&
        Objects.equals(this.bytesWritten, describeTaskExecutionResponse.bytesWritten) &&
        Objects.equals(this.bytesTransferred, describeTaskExecutionResponse.bytesTransferred) &&
        Objects.equals(this.result, describeTaskExecutionResponse.result) &&
        Objects.equals(this.bytesCompressed, describeTaskExecutionResponse.bytesCompressed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(taskExecutionArn, status, options, excludes, includes, startTime, estimatedFilesToTransfer, estimatedBytesToTransfer, filesTransferred, bytesWritten, bytesTransferred, result, bytesCompressed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeTaskExecutionResponse {\n");
    sb.append("    taskExecutionArn: ").append(toIndentedString(taskExecutionArn)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    excludes: ").append(toIndentedString(excludes)).append("\n");
    sb.append("    includes: ").append(toIndentedString(includes)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    estimatedFilesToTransfer: ").append(toIndentedString(estimatedFilesToTransfer)).append("\n");
    sb.append("    estimatedBytesToTransfer: ").append(toIndentedString(estimatedBytesToTransfer)).append("\n");
    sb.append("    filesTransferred: ").append(toIndentedString(filesTransferred)).append("\n");
    sb.append("    bytesWritten: ").append(toIndentedString(bytesWritten)).append("\n");
    sb.append("    bytesTransferred: ").append(toIndentedString(bytesTransferred)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    bytesCompressed: ").append(toIndentedString(bytesCompressed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TaskExecutionArn");
    openapiFields.add("Status");
    openapiFields.add("Options");
    openapiFields.add("Excludes");
    openapiFields.add("Includes");
    openapiFields.add("StartTime");
    openapiFields.add("EstimatedFilesToTransfer");
    openapiFields.add("EstimatedBytesToTransfer");
    openapiFields.add("FilesTransferred");
    openapiFields.add("BytesWritten");
    openapiFields.add("BytesTransferred");
    openapiFields.add("Result");
    openapiFields.add("BytesCompressed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeTaskExecutionResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeTaskExecutionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeTaskExecutionResponse is not found in the empty JSON string", DescribeTaskExecutionResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeTaskExecutionResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeTaskExecutionResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TaskExecutionArn`
      if (jsonObj.get("TaskExecutionArn") != null && !jsonObj.get("TaskExecutionArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TaskExecutionArn"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        TaskExecutionStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `Options`
      if (jsonObj.get("Options") != null && !jsonObj.get("Options").isJsonNull()) {
        Options.validateJsonElement(jsonObj.get("Options"));
      }
      // validate the optional field `Excludes`
      if (jsonObj.get("Excludes") != null && !jsonObj.get("Excludes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Excludes"));
      }
      // validate the optional field `Includes`
      if (jsonObj.get("Includes") != null && !jsonObj.get("Includes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Includes"));
      }
      // validate the optional field `StartTime`
      if (jsonObj.get("StartTime") != null && !jsonObj.get("StartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartTime"));
      }
      // validate the optional field `EstimatedFilesToTransfer`
      if (jsonObj.get("EstimatedFilesToTransfer") != null && !jsonObj.get("EstimatedFilesToTransfer").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("EstimatedFilesToTransfer"));
      }
      // validate the optional field `EstimatedBytesToTransfer`
      if (jsonObj.get("EstimatedBytesToTransfer") != null && !jsonObj.get("EstimatedBytesToTransfer").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("EstimatedBytesToTransfer"));
      }
      // validate the optional field `FilesTransferred`
      if (jsonObj.get("FilesTransferred") != null && !jsonObj.get("FilesTransferred").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FilesTransferred"));
      }
      // validate the optional field `BytesWritten`
      if (jsonObj.get("BytesWritten") != null && !jsonObj.get("BytesWritten").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("BytesWritten"));
      }
      // validate the optional field `BytesTransferred`
      if (jsonObj.get("BytesTransferred") != null && !jsonObj.get("BytesTransferred").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("BytesTransferred"));
      }
      // validate the optional field `Result`
      if (jsonObj.get("Result") != null && !jsonObj.get("Result").isJsonNull()) {
        DescribeTaskExecutionResponseResult.validateJsonElement(jsonObj.get("Result"));
      }
      // validate the optional field `BytesCompressed`
      if (jsonObj.get("BytesCompressed") != null && !jsonObj.get("BytesCompressed").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("BytesCompressed"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeTaskExecutionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeTaskExecutionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeTaskExecutionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeTaskExecutionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeTaskExecutionResponse>() {
           @Override
           public void write(JsonWriter out, DescribeTaskExecutionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeTaskExecutionResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeTaskExecutionResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeTaskExecutionResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeTaskExecutionResponse
   */
  public static DescribeTaskExecutionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeTaskExecutionResponse.class);
  }

  /**
   * Convert an instance of DescribeTaskExecutionResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

