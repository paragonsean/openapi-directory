/*
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.S3Config;
import org.openapitools.client.model.S3StorageClass;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateLocationS3Request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:05.755663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateLocationS3Request {
  public static final String SERIALIZED_NAME_SUBDIRECTORY = "Subdirectory";
  @SerializedName(SERIALIZED_NAME_SUBDIRECTORY)
  private String subdirectory;

  public static final String SERIALIZED_NAME_S3_BUCKET_ARN = "S3BucketArn";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET_ARN)
  private String s3BucketArn;

  public static final String SERIALIZED_NAME_S3_STORAGE_CLASS = "S3StorageClass";
  @SerializedName(SERIALIZED_NAME_S3_STORAGE_CLASS)
  private S3StorageClass s3StorageClass;

  public static final String SERIALIZED_NAME_S3_CONFIG = "S3Config";
  @SerializedName(SERIALIZED_NAME_S3_CONFIG)
  private S3Config s3Config;

  public static final String SERIALIZED_NAME_AGENT_ARNS = "AgentArns";
  @SerializedName(SERIALIZED_NAME_AGENT_ARNS)
  private List agentArns;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public CreateLocationS3Request() {
  }

  public CreateLocationS3Request subdirectory(String subdirectory) {
    this.subdirectory = subdirectory;
    return this;
  }

  /**
   * Get subdirectory
   * @return subdirectory
   */
  @javax.annotation.Nullable
  public String getSubdirectory() {
    return subdirectory;
  }

  public void setSubdirectory(String subdirectory) {
    this.subdirectory = subdirectory;
  }


  public CreateLocationS3Request s3BucketArn(String s3BucketArn) {
    this.s3BucketArn = s3BucketArn;
    return this;
  }

  /**
   * Get s3BucketArn
   * @return s3BucketArn
   */
  @javax.annotation.Nonnull
  public String getS3BucketArn() {
    return s3BucketArn;
  }

  public void setS3BucketArn(String s3BucketArn) {
    this.s3BucketArn = s3BucketArn;
  }


  public CreateLocationS3Request s3StorageClass(S3StorageClass s3StorageClass) {
    this.s3StorageClass = s3StorageClass;
    return this;
  }

  /**
   * Get s3StorageClass
   * @return s3StorageClass
   */
  @javax.annotation.Nullable
  public S3StorageClass getS3StorageClass() {
    return s3StorageClass;
  }

  public void setS3StorageClass(S3StorageClass s3StorageClass) {
    this.s3StorageClass = s3StorageClass;
  }


  public CreateLocationS3Request s3Config(S3Config s3Config) {
    this.s3Config = s3Config;
    return this;
  }

  /**
   * Get s3Config
   * @return s3Config
   */
  @javax.annotation.Nonnull
  public S3Config getS3Config() {
    return s3Config;
  }

  public void setS3Config(S3Config s3Config) {
    this.s3Config = s3Config;
  }


  public CreateLocationS3Request agentArns(List agentArns) {
    this.agentArns = agentArns;
    return this;
  }

  /**
   * Get agentArns
   * @return agentArns
   */
  @javax.annotation.Nullable
  public List getAgentArns() {
    return agentArns;
  }

  public void setAgentArns(List agentArns) {
    this.agentArns = agentArns;
  }


  public CreateLocationS3Request tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateLocationS3Request createLocationS3Request = (CreateLocationS3Request) o;
    return Objects.equals(this.subdirectory, createLocationS3Request.subdirectory) &&
        Objects.equals(this.s3BucketArn, createLocationS3Request.s3BucketArn) &&
        Objects.equals(this.s3StorageClass, createLocationS3Request.s3StorageClass) &&
        Objects.equals(this.s3Config, createLocationS3Request.s3Config) &&
        Objects.equals(this.agentArns, createLocationS3Request.agentArns) &&
        Objects.equals(this.tags, createLocationS3Request.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subdirectory, s3BucketArn, s3StorageClass, s3Config, agentArns, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateLocationS3Request {\n");
    sb.append("    subdirectory: ").append(toIndentedString(subdirectory)).append("\n");
    sb.append("    s3BucketArn: ").append(toIndentedString(s3BucketArn)).append("\n");
    sb.append("    s3StorageClass: ").append(toIndentedString(s3StorageClass)).append("\n");
    sb.append("    s3Config: ").append(toIndentedString(s3Config)).append("\n");
    sb.append("    agentArns: ").append(toIndentedString(agentArns)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Subdirectory");
    openapiFields.add("S3BucketArn");
    openapiFields.add("S3StorageClass");
    openapiFields.add("S3Config");
    openapiFields.add("AgentArns");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("S3BucketArn");
    openapiRequiredFields.add("S3Config");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateLocationS3Request
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateLocationS3Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateLocationS3Request is not found in the empty JSON string", CreateLocationS3Request.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateLocationS3Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateLocationS3Request` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateLocationS3Request.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Subdirectory`
      if (jsonObj.get("Subdirectory") != null && !jsonObj.get("Subdirectory").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Subdirectory"));
      }
      // validate the required field `S3BucketArn`
      String.validateJsonElement(jsonObj.get("S3BucketArn"));
      // validate the optional field `S3StorageClass`
      if (jsonObj.get("S3StorageClass") != null && !jsonObj.get("S3StorageClass").isJsonNull()) {
        S3StorageClass.validateJsonElement(jsonObj.get("S3StorageClass"));
      }
      // validate the required field `S3Config`
      S3Config.validateJsonElement(jsonObj.get("S3Config"));
      // validate the optional field `AgentArns`
      if (jsonObj.get("AgentArns") != null && !jsonObj.get("AgentArns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AgentArns"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateLocationS3Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateLocationS3Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateLocationS3Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateLocationS3Request.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateLocationS3Request>() {
           @Override
           public void write(JsonWriter out, CreateLocationS3Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateLocationS3Request read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateLocationS3Request given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateLocationS3Request
   * @throws IOException if the JSON string is invalid with respect to CreateLocationS3Request
   */
  public static CreateLocationS3Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateLocationS3Request.class);
  }

  /**
   * Convert an instance of CreateLocationS3Request to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

