/*
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DiscoveryResourceType;
import org.openapitools.client.model.ResourceMetricsCapacity;
import org.openapitools.client.model.ResourceMetricsP95Metrics;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information, including performance data and capacity usage, provided by DataSync Discovery about a resource in your on-premises storage system.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:05.755663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResourceMetrics {
  public static final String SERIALIZED_NAME_TIMESTAMP = "Timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_P95_METRICS = "P95Metrics";
  @SerializedName(SERIALIZED_NAME_P95_METRICS)
  private ResourceMetricsP95Metrics p95Metrics;

  public static final String SERIALIZED_NAME_CAPACITY = "Capacity";
  @SerializedName(SERIALIZED_NAME_CAPACITY)
  private ResourceMetricsCapacity capacity;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "ResourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "ResourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private DiscoveryResourceType resourceType;

  public ResourceMetrics() {
  }

  public ResourceMetrics timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public ResourceMetrics p95Metrics(ResourceMetricsP95Metrics p95Metrics) {
    this.p95Metrics = p95Metrics;
    return this;
  }

  /**
   * Get p95Metrics
   * @return p95Metrics
   */
  @javax.annotation.Nullable
  public ResourceMetricsP95Metrics getP95Metrics() {
    return p95Metrics;
  }

  public void setP95Metrics(ResourceMetricsP95Metrics p95Metrics) {
    this.p95Metrics = p95Metrics;
  }


  public ResourceMetrics capacity(ResourceMetricsCapacity capacity) {
    this.capacity = capacity;
    return this;
  }

  /**
   * Get capacity
   * @return capacity
   */
  @javax.annotation.Nullable
  public ResourceMetricsCapacity getCapacity() {
    return capacity;
  }

  public void setCapacity(ResourceMetricsCapacity capacity) {
    this.capacity = capacity;
  }


  public ResourceMetrics resourceId(String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * Get resourceId
   * @return resourceId
   */
  @javax.annotation.Nullable
  public String getResourceId() {
    return resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }


  public ResourceMetrics resourceType(DiscoveryResourceType resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nullable
  public DiscoveryResourceType getResourceType() {
    return resourceType;
  }

  public void setResourceType(DiscoveryResourceType resourceType) {
    this.resourceType = resourceType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceMetrics resourceMetrics = (ResourceMetrics) o;
    return Objects.equals(this.timestamp, resourceMetrics.timestamp) &&
        Objects.equals(this.p95Metrics, resourceMetrics.p95Metrics) &&
        Objects.equals(this.capacity, resourceMetrics.capacity) &&
        Objects.equals(this.resourceId, resourceMetrics.resourceId) &&
        Objects.equals(this.resourceType, resourceMetrics.resourceType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timestamp, p95Metrics, capacity, resourceId, resourceType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceMetrics {\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    p95Metrics: ").append(toIndentedString(p95Metrics)).append("\n");
    sb.append("    capacity: ").append(toIndentedString(capacity)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Timestamp");
    openapiFields.add("P95Metrics");
    openapiFields.add("Capacity");
    openapiFields.add("ResourceId");
    openapiFields.add("ResourceType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourceMetrics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceMetrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceMetrics is not found in the empty JSON string", ResourceMetrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourceMetrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourceMetrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Timestamp`
      if (jsonObj.get("Timestamp") != null && !jsonObj.get("Timestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("Timestamp"));
      }
      // validate the optional field `P95Metrics`
      if (jsonObj.get("P95Metrics") != null && !jsonObj.get("P95Metrics").isJsonNull()) {
        ResourceMetricsP95Metrics.validateJsonElement(jsonObj.get("P95Metrics"));
      }
      // validate the optional field `Capacity`
      if (jsonObj.get("Capacity") != null && !jsonObj.get("Capacity").isJsonNull()) {
        ResourceMetricsCapacity.validateJsonElement(jsonObj.get("Capacity"));
      }
      // validate the optional field `ResourceId`
      if (jsonObj.get("ResourceId") != null && !jsonObj.get("ResourceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResourceId"));
      }
      // validate the optional field `ResourceType`
      if (jsonObj.get("ResourceType") != null && !jsonObj.get("ResourceType").isJsonNull()) {
        DiscoveryResourceType.validateJsonElement(jsonObj.get("ResourceType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceMetrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceMetrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceMetrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceMetrics.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceMetrics>() {
           @Override
           public void write(JsonWriter out, ResourceMetrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceMetrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResourceMetrics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourceMetrics
   * @throws IOException if the JSON string is invalid with respect to ResourceMetrics
   */
  public static ResourceMetrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceMetrics.class);
  }

  /**
   * Convert an instance of ResourceMetrics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

