/*
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * P95MetricsIOPS
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:05.755663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class P95MetricsIOPS {
  public static final String SERIALIZED_NAME_READ = "Read";
  @SerializedName(SERIALIZED_NAME_READ)
  private Double read;

  public static final String SERIALIZED_NAME_WRITE = "Write";
  @SerializedName(SERIALIZED_NAME_WRITE)
  private Double write;

  public static final String SERIALIZED_NAME_OTHER = "Other";
  @SerializedName(SERIALIZED_NAME_OTHER)
  private Double other;

  public static final String SERIALIZED_NAME_TOTAL = "Total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Double total;

  public P95MetricsIOPS() {
  }

  public P95MetricsIOPS read(Double read) {
    this.read = read;
    return this;
  }

  /**
   * Get read
   * @return read
   */
  @javax.annotation.Nullable
  public Double getRead() {
    return read;
  }

  public void setRead(Double read) {
    this.read = read;
  }


  public P95MetricsIOPS write(Double write) {
    this.write = write;
    return this;
  }

  /**
   * Get write
   * @return write
   */
  @javax.annotation.Nullable
  public Double getWrite() {
    return write;
  }

  public void setWrite(Double write) {
    this.write = write;
  }


  public P95MetricsIOPS other(Double other) {
    this.other = other;
    return this;
  }

  /**
   * Get other
   * @return other
   */
  @javax.annotation.Nullable
  public Double getOther() {
    return other;
  }

  public void setOther(Double other) {
    this.other = other;
  }


  public P95MetricsIOPS total(Double total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nullable
  public Double getTotal() {
    return total;
  }

  public void setTotal(Double total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    P95MetricsIOPS p95MetricsIOPS = (P95MetricsIOPS) o;
    return Objects.equals(this.read, p95MetricsIOPS.read) &&
        Objects.equals(this.write, p95MetricsIOPS.write) &&
        Objects.equals(this.other, p95MetricsIOPS.other) &&
        Objects.equals(this.total, p95MetricsIOPS.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(read, write, other, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class P95MetricsIOPS {\n");
    sb.append("    read: ").append(toIndentedString(read)).append("\n");
    sb.append("    write: ").append(toIndentedString(write)).append("\n");
    sb.append("    other: ").append(toIndentedString(other)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Read");
    openapiFields.add("Write");
    openapiFields.add("Other");
    openapiFields.add("Total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to P95MetricsIOPS
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!P95MetricsIOPS.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in P95MetricsIOPS is not found in the empty JSON string", P95MetricsIOPS.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!P95MetricsIOPS.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `P95MetricsIOPS` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Read`
      if (jsonObj.get("Read") != null && !jsonObj.get("Read").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Read"));
      }
      // validate the optional field `Write`
      if (jsonObj.get("Write") != null && !jsonObj.get("Write").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Write"));
      }
      // validate the optional field `Other`
      if (jsonObj.get("Other") != null && !jsonObj.get("Other").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Other"));
      }
      // validate the optional field `Total`
      if (jsonObj.get("Total") != null && !jsonObj.get("Total").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Total"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!P95MetricsIOPS.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'P95MetricsIOPS' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<P95MetricsIOPS> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(P95MetricsIOPS.class));

       return (TypeAdapter<T>) new TypeAdapter<P95MetricsIOPS>() {
           @Override
           public void write(JsonWriter out, P95MetricsIOPS value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public P95MetricsIOPS read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of P95MetricsIOPS given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of P95MetricsIOPS
   * @throws IOException if the JSON string is invalid with respect to P95MetricsIOPS
   */
  public static P95MetricsIOPS fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, P95MetricsIOPS.class);
  }

  /**
   * Convert an instance of P95MetricsIOPS to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

