/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeStorageSystemResponse_ServerConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeStorageSystemResponse_ServerConfiguration::OAIDescribeStorageSystemResponse_ServerConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeStorageSystemResponse_ServerConfiguration::OAIDescribeStorageSystemResponse_ServerConfiguration() {
    this->initializeModel();
}

OAIDescribeStorageSystemResponse_ServerConfiguration::~OAIDescribeStorageSystemResponse_ServerConfiguration() {}

void OAIDescribeStorageSystemResponse_ServerConfiguration::initializeModel() {

    m_server_hostname_isSet = false;
    m_server_hostname_isValid = false;

    m_server_port_isSet = false;
    m_server_port_isValid = false;
}

void OAIDescribeStorageSystemResponse_ServerConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeStorageSystemResponse_ServerConfiguration::fromJsonObject(QJsonObject json) {

    m_server_hostname_isValid = ::OpenAPI::fromJsonValue(m_server_hostname, json[QString("ServerHostname")]);
    m_server_hostname_isSet = !json[QString("ServerHostname")].isNull() && m_server_hostname_isValid;

    m_server_port_isValid = ::OpenAPI::fromJsonValue(m_server_port, json[QString("ServerPort")]);
    m_server_port_isSet = !json[QString("ServerPort")].isNull() && m_server_port_isValid;
}

QString OAIDescribeStorageSystemResponse_ServerConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeStorageSystemResponse_ServerConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_server_hostname_isSet) {
        obj.insert(QString("ServerHostname"), ::OpenAPI::toJsonValue(m_server_hostname));
    }
    if (m_server_port_isSet) {
        obj.insert(QString("ServerPort"), ::OpenAPI::toJsonValue(m_server_port));
    }
    return obj;
}

QString OAIDescribeStorageSystemResponse_ServerConfiguration::getServerHostname() const {
    return m_server_hostname;
}
void OAIDescribeStorageSystemResponse_ServerConfiguration::setServerHostname(const QString &server_hostname) {
    m_server_hostname = server_hostname;
    m_server_hostname_isSet = true;
}

bool OAIDescribeStorageSystemResponse_ServerConfiguration::is_server_hostname_Set() const{
    return m_server_hostname_isSet;
}

bool OAIDescribeStorageSystemResponse_ServerConfiguration::is_server_hostname_Valid() const{
    return m_server_hostname_isValid;
}

qint32 OAIDescribeStorageSystemResponse_ServerConfiguration::getServerPort() const {
    return m_server_port;
}
void OAIDescribeStorageSystemResponse_ServerConfiguration::setServerPort(const qint32 &server_port) {
    m_server_port = server_port;
    m_server_port_isSet = true;
}

bool OAIDescribeStorageSystemResponse_ServerConfiguration::is_server_port_Set() const{
    return m_server_port_isSet;
}

bool OAIDescribeStorageSystemResponse_ServerConfiguration::is_server_port_Valid() const{
    return m_server_port_isValid;
}

bool OAIDescribeStorageSystemResponse_ServerConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_server_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_port_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeStorageSystemResponse_ServerConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_server_hostname_isValid && true;
}

} // namespace OpenAPI
