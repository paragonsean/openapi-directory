/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateLocationHdfsRequest.h
 *
 * 
 */

#ifndef OAICreateLocationHdfsRequest_H
#define OAICreateLocationHdfsRequest_H

#include <QJsonObject>

#include "OAICreateLocationHdfsRequest_QopConfiguration.h"
#include "OAIHdfsAuthenticationType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateLocationHdfsRequest_QopConfiguration;

class OAICreateLocationHdfsRequest : public OAIObject {
public:
    OAICreateLocationHdfsRequest();
    OAICreateLocationHdfsRequest(QString json);
    ~OAICreateLocationHdfsRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getSubdirectory() const;
    void setSubdirectory(const QString &subdirectory);
    bool is_subdirectory_Set() const;
    bool is_subdirectory_Valid() const;

    QList getNameNodes() const;
    void setNameNodes(const QList &name_nodes);
    bool is_name_nodes_Set() const;
    bool is_name_nodes_Valid() const;

    qint32 getBlockSize() const;
    void setBlockSize(const qint32 &block_size);
    bool is_block_size_Set() const;
    bool is_block_size_Valid() const;

    qint32 getReplicationFactor() const;
    void setReplicationFactor(const qint32 &replication_factor);
    bool is_replication_factor_Set() const;
    bool is_replication_factor_Valid() const;

    QString getKmsKeyProviderUri() const;
    void setKmsKeyProviderUri(const QString &kms_key_provider_uri);
    bool is_kms_key_provider_uri_Set() const;
    bool is_kms_key_provider_uri_Valid() const;

    OAICreateLocationHdfsRequest_QopConfiguration getQopConfiguration() const;
    void setQopConfiguration(const OAICreateLocationHdfsRequest_QopConfiguration &qop_configuration);
    bool is_qop_configuration_Set() const;
    bool is_qop_configuration_Valid() const;

    OAIHdfsAuthenticationType getAuthenticationType() const;
    void setAuthenticationType(const OAIHdfsAuthenticationType &authentication_type);
    bool is_authentication_type_Set() const;
    bool is_authentication_type_Valid() const;

    QString getSimpleUser() const;
    void setSimpleUser(const QString &simple_user);
    bool is_simple_user_Set() const;
    bool is_simple_user_Valid() const;

    QString getKerberosPrincipal() const;
    void setKerberosPrincipal(const QString &kerberos_principal);
    bool is_kerberos_principal_Set() const;
    bool is_kerberos_principal_Valid() const;

    QString getKerberosKeytab() const;
    void setKerberosKeytab(const QString &kerberos_keytab);
    bool is_kerberos_keytab_Set() const;
    bool is_kerberos_keytab_Valid() const;

    QString getKerberosKrb5Conf() const;
    void setKerberosKrb5Conf(const QString &kerberos_krb5_conf);
    bool is_kerberos_krb5_conf_Set() const;
    bool is_kerberos_krb5_conf_Valid() const;

    QList getAgentArns() const;
    void setAgentArns(const QList &agent_arns);
    bool is_agent_arns_Set() const;
    bool is_agent_arns_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_subdirectory;
    bool m_subdirectory_isSet;
    bool m_subdirectory_isValid;

    QList m_name_nodes;
    bool m_name_nodes_isSet;
    bool m_name_nodes_isValid;

    qint32 m_block_size;
    bool m_block_size_isSet;
    bool m_block_size_isValid;

    qint32 m_replication_factor;
    bool m_replication_factor_isSet;
    bool m_replication_factor_isValid;

    QString m_kms_key_provider_uri;
    bool m_kms_key_provider_uri_isSet;
    bool m_kms_key_provider_uri_isValid;

    OAICreateLocationHdfsRequest_QopConfiguration m_qop_configuration;
    bool m_qop_configuration_isSet;
    bool m_qop_configuration_isValid;

    OAIHdfsAuthenticationType m_authentication_type;
    bool m_authentication_type_isSet;
    bool m_authentication_type_isValid;

    QString m_simple_user;
    bool m_simple_user_isSet;
    bool m_simple_user_isValid;

    QString m_kerberos_principal;
    bool m_kerberos_principal_isSet;
    bool m_kerberos_principal_isValid;

    QString m_kerberos_keytab;
    bool m_kerberos_keytab_isSet;
    bool m_kerberos_keytab_isValid;

    QString m_kerberos_krb5_conf;
    bool m_kerberos_krb5_conf_isSet;
    bool m_kerberos_krb5_conf_isValid;

    QList m_agent_arns;
    bool m_agent_arns_isSet;
    bool m_agent_arns_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateLocationHdfsRequest)

#endif // OAICreateLocationHdfsRequest_H
