/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddStorageSystemRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddStorageSystemRequest::OAIAddStorageSystemRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddStorageSystemRequest::OAIAddStorageSystemRequest() {
    this->initializeModel();
}

OAIAddStorageSystemRequest::~OAIAddStorageSystemRequest() {}

void OAIAddStorageSystemRequest::initializeModel() {

    m_server_configuration_isSet = false;
    m_server_configuration_isValid = false;

    m_system_type_isSet = false;
    m_system_type_isValid = false;

    m_agent_arns_isSet = false;
    m_agent_arns_isValid = false;

    m_cloud_watch_log_group_arn_isSet = false;
    m_cloud_watch_log_group_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_credentials_isSet = false;
    m_credentials_isValid = false;
}

void OAIAddStorageSystemRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddStorageSystemRequest::fromJsonObject(QJsonObject json) {

    m_server_configuration_isValid = ::OpenAPI::fromJsonValue(m_server_configuration, json[QString("ServerConfiguration")]);
    m_server_configuration_isSet = !json[QString("ServerConfiguration")].isNull() && m_server_configuration_isValid;

    m_system_type_isValid = ::OpenAPI::fromJsonValue(m_system_type, json[QString("SystemType")]);
    m_system_type_isSet = !json[QString("SystemType")].isNull() && m_system_type_isValid;

    m_agent_arns_isValid = ::OpenAPI::fromJsonValue(m_agent_arns, json[QString("AgentArns")]);
    m_agent_arns_isSet = !json[QString("AgentArns")].isNull() && m_agent_arns_isValid;

    m_cloud_watch_log_group_arn_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_log_group_arn, json[QString("CloudWatchLogGroupArn")]);
    m_cloud_watch_log_group_arn_isSet = !json[QString("CloudWatchLogGroupArn")].isNull() && m_cloud_watch_log_group_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_credentials_isValid = ::OpenAPI::fromJsonValue(m_credentials, json[QString("Credentials")]);
    m_credentials_isSet = !json[QString("Credentials")].isNull() && m_credentials_isValid;
}

QString OAIAddStorageSystemRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddStorageSystemRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_server_configuration.isSet()) {
        obj.insert(QString("ServerConfiguration"), ::OpenAPI::toJsonValue(m_server_configuration));
    }
    if (m_system_type.isSet()) {
        obj.insert(QString("SystemType"), ::OpenAPI::toJsonValue(m_system_type));
    }
    if (m_agent_arns.isSet()) {
        obj.insert(QString("AgentArns"), ::OpenAPI::toJsonValue(m_agent_arns));
    }
    if (m_cloud_watch_log_group_arn_isSet) {
        obj.insert(QString("CloudWatchLogGroupArn"), ::OpenAPI::toJsonValue(m_cloud_watch_log_group_arn));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_credentials.isSet()) {
        obj.insert(QString("Credentials"), ::OpenAPI::toJsonValue(m_credentials));
    }
    return obj;
}

OAIAddStorageSystemRequest_ServerConfiguration OAIAddStorageSystemRequest::getServerConfiguration() const {
    return m_server_configuration;
}
void OAIAddStorageSystemRequest::setServerConfiguration(const OAIAddStorageSystemRequest_ServerConfiguration &server_configuration) {
    m_server_configuration = server_configuration;
    m_server_configuration_isSet = true;
}

bool OAIAddStorageSystemRequest::is_server_configuration_Set() const{
    return m_server_configuration_isSet;
}

bool OAIAddStorageSystemRequest::is_server_configuration_Valid() const{
    return m_server_configuration_isValid;
}

OAIDiscoverySystemType OAIAddStorageSystemRequest::getSystemType() const {
    return m_system_type;
}
void OAIAddStorageSystemRequest::setSystemType(const OAIDiscoverySystemType &system_type) {
    m_system_type = system_type;
    m_system_type_isSet = true;
}

bool OAIAddStorageSystemRequest::is_system_type_Set() const{
    return m_system_type_isSet;
}

bool OAIAddStorageSystemRequest::is_system_type_Valid() const{
    return m_system_type_isValid;
}

QList OAIAddStorageSystemRequest::getAgentArns() const {
    return m_agent_arns;
}
void OAIAddStorageSystemRequest::setAgentArns(const QList &agent_arns) {
    m_agent_arns = agent_arns;
    m_agent_arns_isSet = true;
}

bool OAIAddStorageSystemRequest::is_agent_arns_Set() const{
    return m_agent_arns_isSet;
}

bool OAIAddStorageSystemRequest::is_agent_arns_Valid() const{
    return m_agent_arns_isValid;
}

QString OAIAddStorageSystemRequest::getCloudWatchLogGroupArn() const {
    return m_cloud_watch_log_group_arn;
}
void OAIAddStorageSystemRequest::setCloudWatchLogGroupArn(const QString &cloud_watch_log_group_arn) {
    m_cloud_watch_log_group_arn = cloud_watch_log_group_arn;
    m_cloud_watch_log_group_arn_isSet = true;
}

bool OAIAddStorageSystemRequest::is_cloud_watch_log_group_arn_Set() const{
    return m_cloud_watch_log_group_arn_isSet;
}

bool OAIAddStorageSystemRequest::is_cloud_watch_log_group_arn_Valid() const{
    return m_cloud_watch_log_group_arn_isValid;
}

QList OAIAddStorageSystemRequest::getTags() const {
    return m_tags;
}
void OAIAddStorageSystemRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIAddStorageSystemRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIAddStorageSystemRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIAddStorageSystemRequest::getName() const {
    return m_name;
}
void OAIAddStorageSystemRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAddStorageSystemRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAddStorageSystemRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAddStorageSystemRequest::getClientToken() const {
    return m_client_token;
}
void OAIAddStorageSystemRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIAddStorageSystemRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIAddStorageSystemRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAIAddStorageSystemRequest_Credentials OAIAddStorageSystemRequest::getCredentials() const {
    return m_credentials;
}
void OAIAddStorageSystemRequest::setCredentials(const OAIAddStorageSystemRequest_Credentials &credentials) {
    m_credentials = credentials;
    m_credentials_isSet = true;
}

bool OAIAddStorageSystemRequest::is_credentials_Set() const{
    return m_credentials_isSet;
}

bool OAIAddStorageSystemRequest::is_credentials_Valid() const{
    return m_credentials_isValid;
}

bool OAIAddStorageSystemRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_server_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_log_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddStorageSystemRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_server_configuration_isValid && m_system_type_isValid && m_agent_arns_isValid && m_client_token_isValid && m_credentials_isValid && true;
}

} // namespace OpenAPI
