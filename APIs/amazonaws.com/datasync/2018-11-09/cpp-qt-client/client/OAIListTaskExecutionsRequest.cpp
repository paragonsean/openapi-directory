/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListTaskExecutionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListTaskExecutionsRequest::OAIListTaskExecutionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListTaskExecutionsRequest::OAIListTaskExecutionsRequest() {
    this->initializeModel();
}

OAIListTaskExecutionsRequest::~OAIListTaskExecutionsRequest() {}

void OAIListTaskExecutionsRequest::initializeModel() {

    m_task_arn_isSet = false;
    m_task_arn_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListTaskExecutionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListTaskExecutionsRequest::fromJsonObject(QJsonObject json) {

    m_task_arn_isValid = ::OpenAPI::fromJsonValue(m_task_arn, json[QString("TaskArn")]);
    m_task_arn_isSet = !json[QString("TaskArn")].isNull() && m_task_arn_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListTaskExecutionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListTaskExecutionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_task_arn_isSet) {
        obj.insert(QString("TaskArn"), ::OpenAPI::toJsonValue(m_task_arn));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QString OAIListTaskExecutionsRequest::getTaskArn() const {
    return m_task_arn;
}
void OAIListTaskExecutionsRequest::setTaskArn(const QString &task_arn) {
    m_task_arn = task_arn;
    m_task_arn_isSet = true;
}

bool OAIListTaskExecutionsRequest::is_task_arn_Set() const{
    return m_task_arn_isSet;
}

bool OAIListTaskExecutionsRequest::is_task_arn_Valid() const{
    return m_task_arn_isValid;
}

qint32 OAIListTaskExecutionsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListTaskExecutionsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListTaskExecutionsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListTaskExecutionsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListTaskExecutionsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListTaskExecutionsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListTaskExecutionsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListTaskExecutionsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListTaskExecutionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_task_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListTaskExecutionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
