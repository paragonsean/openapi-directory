/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeLocationFsxOntapResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeLocationFsxOntapResponse::OAIDescribeLocationFsxOntapResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeLocationFsxOntapResponse::OAIDescribeLocationFsxOntapResponse() {
    this->initializeModel();
}

OAIDescribeLocationFsxOntapResponse::~OAIDescribeLocationFsxOntapResponse() {}

void OAIDescribeLocationFsxOntapResponse::initializeModel() {

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_location_arn_isSet = false;
    m_location_arn_isValid = false;

    m_location_uri_isSet = false;
    m_location_uri_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_security_group_arns_isSet = false;
    m_security_group_arns_isValid = false;

    m_storage_virtual_machine_arn_isSet = false;
    m_storage_virtual_machine_arn_isValid = false;

    m_fsx_filesystem_arn_isSet = false;
    m_fsx_filesystem_arn_isValid = false;
}

void OAIDescribeLocationFsxOntapResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeLocationFsxOntapResponse::fromJsonObject(QJsonObject json) {

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_location_arn_isValid = ::OpenAPI::fromJsonValue(m_location_arn, json[QString("LocationArn")]);
    m_location_arn_isSet = !json[QString("LocationArn")].isNull() && m_location_arn_isValid;

    m_location_uri_isValid = ::OpenAPI::fromJsonValue(m_location_uri, json[QString("LocationUri")]);
    m_location_uri_isSet = !json[QString("LocationUri")].isNull() && m_location_uri_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("Protocol")]);
    m_protocol_isSet = !json[QString("Protocol")].isNull() && m_protocol_isValid;

    m_security_group_arns_isValid = ::OpenAPI::fromJsonValue(m_security_group_arns, json[QString("SecurityGroupArns")]);
    m_security_group_arns_isSet = !json[QString("SecurityGroupArns")].isNull() && m_security_group_arns_isValid;

    m_storage_virtual_machine_arn_isValid = ::OpenAPI::fromJsonValue(m_storage_virtual_machine_arn, json[QString("StorageVirtualMachineArn")]);
    m_storage_virtual_machine_arn_isSet = !json[QString("StorageVirtualMachineArn")].isNull() && m_storage_virtual_machine_arn_isValid;

    m_fsx_filesystem_arn_isValid = ::OpenAPI::fromJsonValue(m_fsx_filesystem_arn, json[QString("FsxFilesystemArn")]);
    m_fsx_filesystem_arn_isSet = !json[QString("FsxFilesystemArn")].isNull() && m_fsx_filesystem_arn_isValid;
}

QString OAIDescribeLocationFsxOntapResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeLocationFsxOntapResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_location_arn_isSet) {
        obj.insert(QString("LocationArn"), ::OpenAPI::toJsonValue(m_location_arn));
    }
    if (m_location_uri_isSet) {
        obj.insert(QString("LocationUri"), ::OpenAPI::toJsonValue(m_location_uri));
    }
    if (m_protocol.isSet()) {
        obj.insert(QString("Protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_security_group_arns.isSet()) {
        obj.insert(QString("SecurityGroupArns"), ::OpenAPI::toJsonValue(m_security_group_arns));
    }
    if (m_storage_virtual_machine_arn_isSet) {
        obj.insert(QString("StorageVirtualMachineArn"), ::OpenAPI::toJsonValue(m_storage_virtual_machine_arn));
    }
    if (m_fsx_filesystem_arn_isSet) {
        obj.insert(QString("FsxFilesystemArn"), ::OpenAPI::toJsonValue(m_fsx_filesystem_arn));
    }
    return obj;
}

QDateTime OAIDescribeLocationFsxOntapResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeLocationFsxOntapResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeLocationFsxOntapResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeLocationFsxOntapResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIDescribeLocationFsxOntapResponse::getLocationArn() const {
    return m_location_arn;
}
void OAIDescribeLocationFsxOntapResponse::setLocationArn(const QString &location_arn) {
    m_location_arn = location_arn;
    m_location_arn_isSet = true;
}

bool OAIDescribeLocationFsxOntapResponse::is_location_arn_Set() const{
    return m_location_arn_isSet;
}

bool OAIDescribeLocationFsxOntapResponse::is_location_arn_Valid() const{
    return m_location_arn_isValid;
}

QString OAIDescribeLocationFsxOntapResponse::getLocationUri() const {
    return m_location_uri;
}
void OAIDescribeLocationFsxOntapResponse::setLocationUri(const QString &location_uri) {
    m_location_uri = location_uri;
    m_location_uri_isSet = true;
}

bool OAIDescribeLocationFsxOntapResponse::is_location_uri_Set() const{
    return m_location_uri_isSet;
}

bool OAIDescribeLocationFsxOntapResponse::is_location_uri_Valid() const{
    return m_location_uri_isValid;
}

OAIFsxProtocol OAIDescribeLocationFsxOntapResponse::getProtocol() const {
    return m_protocol;
}
void OAIDescribeLocationFsxOntapResponse::setProtocol(const OAIFsxProtocol &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIDescribeLocationFsxOntapResponse::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIDescribeLocationFsxOntapResponse::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QList OAIDescribeLocationFsxOntapResponse::getSecurityGroupArns() const {
    return m_security_group_arns;
}
void OAIDescribeLocationFsxOntapResponse::setSecurityGroupArns(const QList &security_group_arns) {
    m_security_group_arns = security_group_arns;
    m_security_group_arns_isSet = true;
}

bool OAIDescribeLocationFsxOntapResponse::is_security_group_arns_Set() const{
    return m_security_group_arns_isSet;
}

bool OAIDescribeLocationFsxOntapResponse::is_security_group_arns_Valid() const{
    return m_security_group_arns_isValid;
}

QString OAIDescribeLocationFsxOntapResponse::getStorageVirtualMachineArn() const {
    return m_storage_virtual_machine_arn;
}
void OAIDescribeLocationFsxOntapResponse::setStorageVirtualMachineArn(const QString &storage_virtual_machine_arn) {
    m_storage_virtual_machine_arn = storage_virtual_machine_arn;
    m_storage_virtual_machine_arn_isSet = true;
}

bool OAIDescribeLocationFsxOntapResponse::is_storage_virtual_machine_arn_Set() const{
    return m_storage_virtual_machine_arn_isSet;
}

bool OAIDescribeLocationFsxOntapResponse::is_storage_virtual_machine_arn_Valid() const{
    return m_storage_virtual_machine_arn_isValid;
}

QString OAIDescribeLocationFsxOntapResponse::getFsxFilesystemArn() const {
    return m_fsx_filesystem_arn;
}
void OAIDescribeLocationFsxOntapResponse::setFsxFilesystemArn(const QString &fsx_filesystem_arn) {
    m_fsx_filesystem_arn = fsx_filesystem_arn;
    m_fsx_filesystem_arn_isSet = true;
}

bool OAIDescribeLocationFsxOntapResponse::is_fsx_filesystem_arn_Set() const{
    return m_fsx_filesystem_arn_isSet;
}

bool OAIDescribeLocationFsxOntapResponse::is_fsx_filesystem_arn_Valid() const{
    return m_fsx_filesystem_arn_isValid;
}

bool OAIDescribeLocationFsxOntapResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_virtual_machine_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fsx_filesystem_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeLocationFsxOntapResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
