/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceMetrics_P95Metrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceMetrics_P95Metrics::OAIResourceMetrics_P95Metrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceMetrics_P95Metrics::OAIResourceMetrics_P95Metrics() {
    this->initializeModel();
}

OAIResourceMetrics_P95Metrics::~OAIResourceMetrics_P95Metrics() {}

void OAIResourceMetrics_P95Metrics::initializeModel() {

    m_iops_isSet = false;
    m_iops_isValid = false;

    m_throughput_isSet = false;
    m_throughput_isValid = false;

    m_latency_isSet = false;
    m_latency_isValid = false;
}

void OAIResourceMetrics_P95Metrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceMetrics_P95Metrics::fromJsonObject(QJsonObject json) {

    m_iops_isValid = ::OpenAPI::fromJsonValue(m_iops, json[QString("IOPS")]);
    m_iops_isSet = !json[QString("IOPS")].isNull() && m_iops_isValid;

    m_throughput_isValid = ::OpenAPI::fromJsonValue(m_throughput, json[QString("Throughput")]);
    m_throughput_isSet = !json[QString("Throughput")].isNull() && m_throughput_isValid;

    m_latency_isValid = ::OpenAPI::fromJsonValue(m_latency, json[QString("Latency")]);
    m_latency_isSet = !json[QString("Latency")].isNull() && m_latency_isValid;
}

QString OAIResourceMetrics_P95Metrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceMetrics_P95Metrics::asJsonObject() const {
    QJsonObject obj;
    if (m_iops.isSet()) {
        obj.insert(QString("IOPS"), ::OpenAPI::toJsonValue(m_iops));
    }
    if (m_throughput.isSet()) {
        obj.insert(QString("Throughput"), ::OpenAPI::toJsonValue(m_throughput));
    }
    if (m_latency.isSet()) {
        obj.insert(QString("Latency"), ::OpenAPI::toJsonValue(m_latency));
    }
    return obj;
}

OAIP95Metrics_IOPS OAIResourceMetrics_P95Metrics::getIops() const {
    return m_iops;
}
void OAIResourceMetrics_P95Metrics::setIops(const OAIP95Metrics_IOPS &iops) {
    m_iops = iops;
    m_iops_isSet = true;
}

bool OAIResourceMetrics_P95Metrics::is_iops_Set() const{
    return m_iops_isSet;
}

bool OAIResourceMetrics_P95Metrics::is_iops_Valid() const{
    return m_iops_isValid;
}

OAIP95Metrics_Throughput OAIResourceMetrics_P95Metrics::getThroughput() const {
    return m_throughput;
}
void OAIResourceMetrics_P95Metrics::setThroughput(const OAIP95Metrics_Throughput &throughput) {
    m_throughput = throughput;
    m_throughput_isSet = true;
}

bool OAIResourceMetrics_P95Metrics::is_throughput_Set() const{
    return m_throughput_isSet;
}

bool OAIResourceMetrics_P95Metrics::is_throughput_Valid() const{
    return m_throughput_isValid;
}

OAIP95Metrics_Latency OAIResourceMetrics_P95Metrics::getLatency() const {
    return m_latency;
}
void OAIResourceMetrics_P95Metrics::setLatency(const OAIP95Metrics_Latency &latency) {
    m_latency = latency;
    m_latency_isSet = true;
}

bool OAIResourceMetrics_P95Metrics::is_latency_Set() const{
    return m_latency_isSet;
}

bool OAIResourceMetrics_P95Metrics::is_latency_Valid() const{
    return m_latency_isValid;
}

bool OAIResourceMetrics_P95Metrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_iops.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_throughput.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_latency.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceMetrics_P95Metrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
