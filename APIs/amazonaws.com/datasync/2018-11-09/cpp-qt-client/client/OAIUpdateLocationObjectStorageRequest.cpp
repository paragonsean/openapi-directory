/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateLocationObjectStorageRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateLocationObjectStorageRequest::OAIUpdateLocationObjectStorageRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateLocationObjectStorageRequest::OAIUpdateLocationObjectStorageRequest() {
    this->initializeModel();
}

OAIUpdateLocationObjectStorageRequest::~OAIUpdateLocationObjectStorageRequest() {}

void OAIUpdateLocationObjectStorageRequest::initializeModel() {

    m_location_arn_isSet = false;
    m_location_arn_isValid = false;

    m_server_port_isSet = false;
    m_server_port_isValid = false;

    m_server_protocol_isSet = false;
    m_server_protocol_isValid = false;

    m_subdirectory_isSet = false;
    m_subdirectory_isValid = false;

    m_access_key_isSet = false;
    m_access_key_isValid = false;

    m_secret_key_isSet = false;
    m_secret_key_isValid = false;

    m_agent_arns_isSet = false;
    m_agent_arns_isValid = false;

    m_server_certificate_isSet = false;
    m_server_certificate_isValid = false;
}

void OAIUpdateLocationObjectStorageRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateLocationObjectStorageRequest::fromJsonObject(QJsonObject json) {

    m_location_arn_isValid = ::OpenAPI::fromJsonValue(m_location_arn, json[QString("LocationArn")]);
    m_location_arn_isSet = !json[QString("LocationArn")].isNull() && m_location_arn_isValid;

    m_server_port_isValid = ::OpenAPI::fromJsonValue(m_server_port, json[QString("ServerPort")]);
    m_server_port_isSet = !json[QString("ServerPort")].isNull() && m_server_port_isValid;

    m_server_protocol_isValid = ::OpenAPI::fromJsonValue(m_server_protocol, json[QString("ServerProtocol")]);
    m_server_protocol_isSet = !json[QString("ServerProtocol")].isNull() && m_server_protocol_isValid;

    m_subdirectory_isValid = ::OpenAPI::fromJsonValue(m_subdirectory, json[QString("Subdirectory")]);
    m_subdirectory_isSet = !json[QString("Subdirectory")].isNull() && m_subdirectory_isValid;

    m_access_key_isValid = ::OpenAPI::fromJsonValue(m_access_key, json[QString("AccessKey")]);
    m_access_key_isSet = !json[QString("AccessKey")].isNull() && m_access_key_isValid;

    m_secret_key_isValid = ::OpenAPI::fromJsonValue(m_secret_key, json[QString("SecretKey")]);
    m_secret_key_isSet = !json[QString("SecretKey")].isNull() && m_secret_key_isValid;

    m_agent_arns_isValid = ::OpenAPI::fromJsonValue(m_agent_arns, json[QString("AgentArns")]);
    m_agent_arns_isSet = !json[QString("AgentArns")].isNull() && m_agent_arns_isValid;

    m_server_certificate_isValid = ::OpenAPI::fromJsonValue(m_server_certificate, json[QString("ServerCertificate")]);
    m_server_certificate_isSet = !json[QString("ServerCertificate")].isNull() && m_server_certificate_isValid;
}

QString OAIUpdateLocationObjectStorageRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateLocationObjectStorageRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_location_arn_isSet) {
        obj.insert(QString("LocationArn"), ::OpenAPI::toJsonValue(m_location_arn));
    }
    if (m_server_port_isSet) {
        obj.insert(QString("ServerPort"), ::OpenAPI::toJsonValue(m_server_port));
    }
    if (m_server_protocol.isSet()) {
        obj.insert(QString("ServerProtocol"), ::OpenAPI::toJsonValue(m_server_protocol));
    }
    if (m_subdirectory_isSet) {
        obj.insert(QString("Subdirectory"), ::OpenAPI::toJsonValue(m_subdirectory));
    }
    if (m_access_key_isSet) {
        obj.insert(QString("AccessKey"), ::OpenAPI::toJsonValue(m_access_key));
    }
    if (m_secret_key_isSet) {
        obj.insert(QString("SecretKey"), ::OpenAPI::toJsonValue(m_secret_key));
    }
    if (m_agent_arns.isSet()) {
        obj.insert(QString("AgentArns"), ::OpenAPI::toJsonValue(m_agent_arns));
    }
    if (m_server_certificate_isSet) {
        obj.insert(QString("ServerCertificate"), ::OpenAPI::toJsonValue(m_server_certificate));
    }
    return obj;
}

QString OAIUpdateLocationObjectStorageRequest::getLocationArn() const {
    return m_location_arn;
}
void OAIUpdateLocationObjectStorageRequest::setLocationArn(const QString &location_arn) {
    m_location_arn = location_arn;
    m_location_arn_isSet = true;
}

bool OAIUpdateLocationObjectStorageRequest::is_location_arn_Set() const{
    return m_location_arn_isSet;
}

bool OAIUpdateLocationObjectStorageRequest::is_location_arn_Valid() const{
    return m_location_arn_isValid;
}

qint32 OAIUpdateLocationObjectStorageRequest::getServerPort() const {
    return m_server_port;
}
void OAIUpdateLocationObjectStorageRequest::setServerPort(const qint32 &server_port) {
    m_server_port = server_port;
    m_server_port_isSet = true;
}

bool OAIUpdateLocationObjectStorageRequest::is_server_port_Set() const{
    return m_server_port_isSet;
}

bool OAIUpdateLocationObjectStorageRequest::is_server_port_Valid() const{
    return m_server_port_isValid;
}

OAIObjectStorageServerProtocol OAIUpdateLocationObjectStorageRequest::getServerProtocol() const {
    return m_server_protocol;
}
void OAIUpdateLocationObjectStorageRequest::setServerProtocol(const OAIObjectStorageServerProtocol &server_protocol) {
    m_server_protocol = server_protocol;
    m_server_protocol_isSet = true;
}

bool OAIUpdateLocationObjectStorageRequest::is_server_protocol_Set() const{
    return m_server_protocol_isSet;
}

bool OAIUpdateLocationObjectStorageRequest::is_server_protocol_Valid() const{
    return m_server_protocol_isValid;
}

QString OAIUpdateLocationObjectStorageRequest::getSubdirectory() const {
    return m_subdirectory;
}
void OAIUpdateLocationObjectStorageRequest::setSubdirectory(const QString &subdirectory) {
    m_subdirectory = subdirectory;
    m_subdirectory_isSet = true;
}

bool OAIUpdateLocationObjectStorageRequest::is_subdirectory_Set() const{
    return m_subdirectory_isSet;
}

bool OAIUpdateLocationObjectStorageRequest::is_subdirectory_Valid() const{
    return m_subdirectory_isValid;
}

QString OAIUpdateLocationObjectStorageRequest::getAccessKey() const {
    return m_access_key;
}
void OAIUpdateLocationObjectStorageRequest::setAccessKey(const QString &access_key) {
    m_access_key = access_key;
    m_access_key_isSet = true;
}

bool OAIUpdateLocationObjectStorageRequest::is_access_key_Set() const{
    return m_access_key_isSet;
}

bool OAIUpdateLocationObjectStorageRequest::is_access_key_Valid() const{
    return m_access_key_isValid;
}

QString OAIUpdateLocationObjectStorageRequest::getSecretKey() const {
    return m_secret_key;
}
void OAIUpdateLocationObjectStorageRequest::setSecretKey(const QString &secret_key) {
    m_secret_key = secret_key;
    m_secret_key_isSet = true;
}

bool OAIUpdateLocationObjectStorageRequest::is_secret_key_Set() const{
    return m_secret_key_isSet;
}

bool OAIUpdateLocationObjectStorageRequest::is_secret_key_Valid() const{
    return m_secret_key_isValid;
}

QList OAIUpdateLocationObjectStorageRequest::getAgentArns() const {
    return m_agent_arns;
}
void OAIUpdateLocationObjectStorageRequest::setAgentArns(const QList &agent_arns) {
    m_agent_arns = agent_arns;
    m_agent_arns_isSet = true;
}

bool OAIUpdateLocationObjectStorageRequest::is_agent_arns_Set() const{
    return m_agent_arns_isSet;
}

bool OAIUpdateLocationObjectStorageRequest::is_agent_arns_Valid() const{
    return m_agent_arns_isValid;
}

QString OAIUpdateLocationObjectStorageRequest::getServerCertificate() const {
    return m_server_certificate;
}
void OAIUpdateLocationObjectStorageRequest::setServerCertificate(const QString &server_certificate) {
    m_server_certificate = server_certificate;
    m_server_certificate_isSet = true;
}

bool OAIUpdateLocationObjectStorageRequest::is_server_certificate_Set() const{
    return m_server_certificate_isSet;
}

bool OAIUpdateLocationObjectStorageRequest::is_server_certificate_Valid() const{
    return m_server_certificate_isValid;
}

bool OAIUpdateLocationObjectStorageRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subdirectory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateLocationObjectStorageRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_location_arn_isValid && true;
}

} // namespace OpenAPI
