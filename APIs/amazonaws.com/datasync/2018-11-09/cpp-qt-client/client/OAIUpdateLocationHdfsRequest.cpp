/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateLocationHdfsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateLocationHdfsRequest::OAIUpdateLocationHdfsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateLocationHdfsRequest::OAIUpdateLocationHdfsRequest() {
    this->initializeModel();
}

OAIUpdateLocationHdfsRequest::~OAIUpdateLocationHdfsRequest() {}

void OAIUpdateLocationHdfsRequest::initializeModel() {

    m_location_arn_isSet = false;
    m_location_arn_isValid = false;

    m_subdirectory_isSet = false;
    m_subdirectory_isValid = false;

    m_name_nodes_isSet = false;
    m_name_nodes_isValid = false;

    m_block_size_isSet = false;
    m_block_size_isValid = false;

    m_replication_factor_isSet = false;
    m_replication_factor_isValid = false;

    m_kms_key_provider_uri_isSet = false;
    m_kms_key_provider_uri_isValid = false;

    m_qop_configuration_isSet = false;
    m_qop_configuration_isValid = false;

    m_authentication_type_isSet = false;
    m_authentication_type_isValid = false;

    m_simple_user_isSet = false;
    m_simple_user_isValid = false;

    m_kerberos_principal_isSet = false;
    m_kerberos_principal_isValid = false;

    m_kerberos_keytab_isSet = false;
    m_kerberos_keytab_isValid = false;

    m_kerberos_krb5_conf_isSet = false;
    m_kerberos_krb5_conf_isValid = false;

    m_agent_arns_isSet = false;
    m_agent_arns_isValid = false;
}

void OAIUpdateLocationHdfsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateLocationHdfsRequest::fromJsonObject(QJsonObject json) {

    m_location_arn_isValid = ::OpenAPI::fromJsonValue(m_location_arn, json[QString("LocationArn")]);
    m_location_arn_isSet = !json[QString("LocationArn")].isNull() && m_location_arn_isValid;

    m_subdirectory_isValid = ::OpenAPI::fromJsonValue(m_subdirectory, json[QString("Subdirectory")]);
    m_subdirectory_isSet = !json[QString("Subdirectory")].isNull() && m_subdirectory_isValid;

    m_name_nodes_isValid = ::OpenAPI::fromJsonValue(m_name_nodes, json[QString("NameNodes")]);
    m_name_nodes_isSet = !json[QString("NameNodes")].isNull() && m_name_nodes_isValid;

    m_block_size_isValid = ::OpenAPI::fromJsonValue(m_block_size, json[QString("BlockSize")]);
    m_block_size_isSet = !json[QString("BlockSize")].isNull() && m_block_size_isValid;

    m_replication_factor_isValid = ::OpenAPI::fromJsonValue(m_replication_factor, json[QString("ReplicationFactor")]);
    m_replication_factor_isSet = !json[QString("ReplicationFactor")].isNull() && m_replication_factor_isValid;

    m_kms_key_provider_uri_isValid = ::OpenAPI::fromJsonValue(m_kms_key_provider_uri, json[QString("KmsKeyProviderUri")]);
    m_kms_key_provider_uri_isSet = !json[QString("KmsKeyProviderUri")].isNull() && m_kms_key_provider_uri_isValid;

    m_qop_configuration_isValid = ::OpenAPI::fromJsonValue(m_qop_configuration, json[QString("QopConfiguration")]);
    m_qop_configuration_isSet = !json[QString("QopConfiguration")].isNull() && m_qop_configuration_isValid;

    m_authentication_type_isValid = ::OpenAPI::fromJsonValue(m_authentication_type, json[QString("AuthenticationType")]);
    m_authentication_type_isSet = !json[QString("AuthenticationType")].isNull() && m_authentication_type_isValid;

    m_simple_user_isValid = ::OpenAPI::fromJsonValue(m_simple_user, json[QString("SimpleUser")]);
    m_simple_user_isSet = !json[QString("SimpleUser")].isNull() && m_simple_user_isValid;

    m_kerberos_principal_isValid = ::OpenAPI::fromJsonValue(m_kerberos_principal, json[QString("KerberosPrincipal")]);
    m_kerberos_principal_isSet = !json[QString("KerberosPrincipal")].isNull() && m_kerberos_principal_isValid;

    m_kerberos_keytab_isValid = ::OpenAPI::fromJsonValue(m_kerberos_keytab, json[QString("KerberosKeytab")]);
    m_kerberos_keytab_isSet = !json[QString("KerberosKeytab")].isNull() && m_kerberos_keytab_isValid;

    m_kerberos_krb5_conf_isValid = ::OpenAPI::fromJsonValue(m_kerberos_krb5_conf, json[QString("KerberosKrb5Conf")]);
    m_kerberos_krb5_conf_isSet = !json[QString("KerberosKrb5Conf")].isNull() && m_kerberos_krb5_conf_isValid;

    m_agent_arns_isValid = ::OpenAPI::fromJsonValue(m_agent_arns, json[QString("AgentArns")]);
    m_agent_arns_isSet = !json[QString("AgentArns")].isNull() && m_agent_arns_isValid;
}

QString OAIUpdateLocationHdfsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateLocationHdfsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_location_arn_isSet) {
        obj.insert(QString("LocationArn"), ::OpenAPI::toJsonValue(m_location_arn));
    }
    if (m_subdirectory_isSet) {
        obj.insert(QString("Subdirectory"), ::OpenAPI::toJsonValue(m_subdirectory));
    }
    if (m_name_nodes.isSet()) {
        obj.insert(QString("NameNodes"), ::OpenAPI::toJsonValue(m_name_nodes));
    }
    if (m_block_size_isSet) {
        obj.insert(QString("BlockSize"), ::OpenAPI::toJsonValue(m_block_size));
    }
    if (m_replication_factor_isSet) {
        obj.insert(QString("ReplicationFactor"), ::OpenAPI::toJsonValue(m_replication_factor));
    }
    if (m_kms_key_provider_uri_isSet) {
        obj.insert(QString("KmsKeyProviderUri"), ::OpenAPI::toJsonValue(m_kms_key_provider_uri));
    }
    if (m_qop_configuration.isSet()) {
        obj.insert(QString("QopConfiguration"), ::OpenAPI::toJsonValue(m_qop_configuration));
    }
    if (m_authentication_type.isSet()) {
        obj.insert(QString("AuthenticationType"), ::OpenAPI::toJsonValue(m_authentication_type));
    }
    if (m_simple_user_isSet) {
        obj.insert(QString("SimpleUser"), ::OpenAPI::toJsonValue(m_simple_user));
    }
    if (m_kerberos_principal_isSet) {
        obj.insert(QString("KerberosPrincipal"), ::OpenAPI::toJsonValue(m_kerberos_principal));
    }
    if (m_kerberos_keytab_isSet) {
        obj.insert(QString("KerberosKeytab"), ::OpenAPI::toJsonValue(m_kerberos_keytab));
    }
    if (m_kerberos_krb5_conf_isSet) {
        obj.insert(QString("KerberosKrb5Conf"), ::OpenAPI::toJsonValue(m_kerberos_krb5_conf));
    }
    if (m_agent_arns.isSet()) {
        obj.insert(QString("AgentArns"), ::OpenAPI::toJsonValue(m_agent_arns));
    }
    return obj;
}

QString OAIUpdateLocationHdfsRequest::getLocationArn() const {
    return m_location_arn;
}
void OAIUpdateLocationHdfsRequest::setLocationArn(const QString &location_arn) {
    m_location_arn = location_arn;
    m_location_arn_isSet = true;
}

bool OAIUpdateLocationHdfsRequest::is_location_arn_Set() const{
    return m_location_arn_isSet;
}

bool OAIUpdateLocationHdfsRequest::is_location_arn_Valid() const{
    return m_location_arn_isValid;
}

QString OAIUpdateLocationHdfsRequest::getSubdirectory() const {
    return m_subdirectory;
}
void OAIUpdateLocationHdfsRequest::setSubdirectory(const QString &subdirectory) {
    m_subdirectory = subdirectory;
    m_subdirectory_isSet = true;
}

bool OAIUpdateLocationHdfsRequest::is_subdirectory_Set() const{
    return m_subdirectory_isSet;
}

bool OAIUpdateLocationHdfsRequest::is_subdirectory_Valid() const{
    return m_subdirectory_isValid;
}

QList OAIUpdateLocationHdfsRequest::getNameNodes() const {
    return m_name_nodes;
}
void OAIUpdateLocationHdfsRequest::setNameNodes(const QList &name_nodes) {
    m_name_nodes = name_nodes;
    m_name_nodes_isSet = true;
}

bool OAIUpdateLocationHdfsRequest::is_name_nodes_Set() const{
    return m_name_nodes_isSet;
}

bool OAIUpdateLocationHdfsRequest::is_name_nodes_Valid() const{
    return m_name_nodes_isValid;
}

qint32 OAIUpdateLocationHdfsRequest::getBlockSize() const {
    return m_block_size;
}
void OAIUpdateLocationHdfsRequest::setBlockSize(const qint32 &block_size) {
    m_block_size = block_size;
    m_block_size_isSet = true;
}

bool OAIUpdateLocationHdfsRequest::is_block_size_Set() const{
    return m_block_size_isSet;
}

bool OAIUpdateLocationHdfsRequest::is_block_size_Valid() const{
    return m_block_size_isValid;
}

qint32 OAIUpdateLocationHdfsRequest::getReplicationFactor() const {
    return m_replication_factor;
}
void OAIUpdateLocationHdfsRequest::setReplicationFactor(const qint32 &replication_factor) {
    m_replication_factor = replication_factor;
    m_replication_factor_isSet = true;
}

bool OAIUpdateLocationHdfsRequest::is_replication_factor_Set() const{
    return m_replication_factor_isSet;
}

bool OAIUpdateLocationHdfsRequest::is_replication_factor_Valid() const{
    return m_replication_factor_isValid;
}

QString OAIUpdateLocationHdfsRequest::getKmsKeyProviderUri() const {
    return m_kms_key_provider_uri;
}
void OAIUpdateLocationHdfsRequest::setKmsKeyProviderUri(const QString &kms_key_provider_uri) {
    m_kms_key_provider_uri = kms_key_provider_uri;
    m_kms_key_provider_uri_isSet = true;
}

bool OAIUpdateLocationHdfsRequest::is_kms_key_provider_uri_Set() const{
    return m_kms_key_provider_uri_isSet;
}

bool OAIUpdateLocationHdfsRequest::is_kms_key_provider_uri_Valid() const{
    return m_kms_key_provider_uri_isValid;
}

OAIUpdateLocationHdfsRequest_QopConfiguration OAIUpdateLocationHdfsRequest::getQopConfiguration() const {
    return m_qop_configuration;
}
void OAIUpdateLocationHdfsRequest::setQopConfiguration(const OAIUpdateLocationHdfsRequest_QopConfiguration &qop_configuration) {
    m_qop_configuration = qop_configuration;
    m_qop_configuration_isSet = true;
}

bool OAIUpdateLocationHdfsRequest::is_qop_configuration_Set() const{
    return m_qop_configuration_isSet;
}

bool OAIUpdateLocationHdfsRequest::is_qop_configuration_Valid() const{
    return m_qop_configuration_isValid;
}

OAIHdfsAuthenticationType OAIUpdateLocationHdfsRequest::getAuthenticationType() const {
    return m_authentication_type;
}
void OAIUpdateLocationHdfsRequest::setAuthenticationType(const OAIHdfsAuthenticationType &authentication_type) {
    m_authentication_type = authentication_type;
    m_authentication_type_isSet = true;
}

bool OAIUpdateLocationHdfsRequest::is_authentication_type_Set() const{
    return m_authentication_type_isSet;
}

bool OAIUpdateLocationHdfsRequest::is_authentication_type_Valid() const{
    return m_authentication_type_isValid;
}

QString OAIUpdateLocationHdfsRequest::getSimpleUser() const {
    return m_simple_user;
}
void OAIUpdateLocationHdfsRequest::setSimpleUser(const QString &simple_user) {
    m_simple_user = simple_user;
    m_simple_user_isSet = true;
}

bool OAIUpdateLocationHdfsRequest::is_simple_user_Set() const{
    return m_simple_user_isSet;
}

bool OAIUpdateLocationHdfsRequest::is_simple_user_Valid() const{
    return m_simple_user_isValid;
}

QString OAIUpdateLocationHdfsRequest::getKerberosPrincipal() const {
    return m_kerberos_principal;
}
void OAIUpdateLocationHdfsRequest::setKerberosPrincipal(const QString &kerberos_principal) {
    m_kerberos_principal = kerberos_principal;
    m_kerberos_principal_isSet = true;
}

bool OAIUpdateLocationHdfsRequest::is_kerberos_principal_Set() const{
    return m_kerberos_principal_isSet;
}

bool OAIUpdateLocationHdfsRequest::is_kerberos_principal_Valid() const{
    return m_kerberos_principal_isValid;
}

QString OAIUpdateLocationHdfsRequest::getKerberosKeytab() const {
    return m_kerberos_keytab;
}
void OAIUpdateLocationHdfsRequest::setKerberosKeytab(const QString &kerberos_keytab) {
    m_kerberos_keytab = kerberos_keytab;
    m_kerberos_keytab_isSet = true;
}

bool OAIUpdateLocationHdfsRequest::is_kerberos_keytab_Set() const{
    return m_kerberos_keytab_isSet;
}

bool OAIUpdateLocationHdfsRequest::is_kerberos_keytab_Valid() const{
    return m_kerberos_keytab_isValid;
}

QString OAIUpdateLocationHdfsRequest::getKerberosKrb5Conf() const {
    return m_kerberos_krb5_conf;
}
void OAIUpdateLocationHdfsRequest::setKerberosKrb5Conf(const QString &kerberos_krb5_conf) {
    m_kerberos_krb5_conf = kerberos_krb5_conf;
    m_kerberos_krb5_conf_isSet = true;
}

bool OAIUpdateLocationHdfsRequest::is_kerberos_krb5_conf_Set() const{
    return m_kerberos_krb5_conf_isSet;
}

bool OAIUpdateLocationHdfsRequest::is_kerberos_krb5_conf_Valid() const{
    return m_kerberos_krb5_conf_isValid;
}

QList OAIUpdateLocationHdfsRequest::getAgentArns() const {
    return m_agent_arns;
}
void OAIUpdateLocationHdfsRequest::setAgentArns(const QList &agent_arns) {
    m_agent_arns = agent_arns;
    m_agent_arns_isSet = true;
}

bool OAIUpdateLocationHdfsRequest::is_agent_arns_Set() const{
    return m_agent_arns_isSet;
}

bool OAIUpdateLocationHdfsRequest::is_agent_arns_Valid() const{
    return m_agent_arns_isValid;
}

bool OAIUpdateLocationHdfsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subdirectory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_nodes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_block_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_provider_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qop_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_simple_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kerberos_principal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kerberos_keytab_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kerberos_krb5_conf_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateLocationHdfsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_location_arn_isValid && true;
}

} // namespace OpenAPI
