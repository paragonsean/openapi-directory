/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFsxProtocolSmb.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFsxProtocolSmb::OAIFsxProtocolSmb(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFsxProtocolSmb::OAIFsxProtocolSmb() {
    this->initializeModel();
}

OAIFsxProtocolSmb::~OAIFsxProtocolSmb() {}

void OAIFsxProtocolSmb::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_mount_options_isSet = false;
    m_mount_options_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIFsxProtocolSmb::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFsxProtocolSmb::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;

    m_mount_options_isValid = ::OpenAPI::fromJsonValue(m_mount_options, json[QString("MountOptions")]);
    m_mount_options_isSet = !json[QString("MountOptions")].isNull() && m_mount_options_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("Password")]);
    m_password_isSet = !json[QString("Password")].isNull() && m_password_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("User")]);
    m_user_isSet = !json[QString("User")].isNull() && m_user_isValid;
}

QString OAIFsxProtocolSmb::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFsxProtocolSmb::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_isSet) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_mount_options.isSet()) {
        obj.insert(QString("MountOptions"), ::OpenAPI::toJsonValue(m_mount_options));
    }
    if (m_password_isSet) {
        obj.insert(QString("Password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_user_isSet) {
        obj.insert(QString("User"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIFsxProtocolSmb::getDomain() const {
    return m_domain;
}
void OAIFsxProtocolSmb::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIFsxProtocolSmb::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIFsxProtocolSmb::is_domain_Valid() const{
    return m_domain_isValid;
}

OAISmbMountOptions OAIFsxProtocolSmb::getMountOptions() const {
    return m_mount_options;
}
void OAIFsxProtocolSmb::setMountOptions(const OAISmbMountOptions &mount_options) {
    m_mount_options = mount_options;
    m_mount_options_isSet = true;
}

bool OAIFsxProtocolSmb::is_mount_options_Set() const{
    return m_mount_options_isSet;
}

bool OAIFsxProtocolSmb::is_mount_options_Valid() const{
    return m_mount_options_isValid;
}

QString OAIFsxProtocolSmb::getPassword() const {
    return m_password;
}
void OAIFsxProtocolSmb::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIFsxProtocolSmb::is_password_Set() const{
    return m_password_isSet;
}

bool OAIFsxProtocolSmb::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIFsxProtocolSmb::getUser() const {
    return m_user;
}
void OAIFsxProtocolSmb::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIFsxProtocolSmb::is_user_Set() const{
    return m_user_isSet;
}

bool OAIFsxProtocolSmb::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIFsxProtocolSmb::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mount_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFsxProtocolSmb::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_password_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
