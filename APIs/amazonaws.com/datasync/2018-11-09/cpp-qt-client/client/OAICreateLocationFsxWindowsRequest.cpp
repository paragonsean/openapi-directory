/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLocationFsxWindowsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLocationFsxWindowsRequest::OAICreateLocationFsxWindowsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLocationFsxWindowsRequest::OAICreateLocationFsxWindowsRequest() {
    this->initializeModel();
}

OAICreateLocationFsxWindowsRequest::~OAICreateLocationFsxWindowsRequest() {}

void OAICreateLocationFsxWindowsRequest::initializeModel() {

    m_subdirectory_isSet = false;
    m_subdirectory_isValid = false;

    m_fsx_filesystem_arn_isSet = false;
    m_fsx_filesystem_arn_isValid = false;

    m_security_group_arns_isSet = false;
    m_security_group_arns_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;
}

void OAICreateLocationFsxWindowsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLocationFsxWindowsRequest::fromJsonObject(QJsonObject json) {

    m_subdirectory_isValid = ::OpenAPI::fromJsonValue(m_subdirectory, json[QString("Subdirectory")]);
    m_subdirectory_isSet = !json[QString("Subdirectory")].isNull() && m_subdirectory_isValid;

    m_fsx_filesystem_arn_isValid = ::OpenAPI::fromJsonValue(m_fsx_filesystem_arn, json[QString("FsxFilesystemArn")]);
    m_fsx_filesystem_arn_isSet = !json[QString("FsxFilesystemArn")].isNull() && m_fsx_filesystem_arn_isValid;

    m_security_group_arns_isValid = ::OpenAPI::fromJsonValue(m_security_group_arns, json[QString("SecurityGroupArns")]);
    m_security_group_arns_isSet = !json[QString("SecurityGroupArns")].isNull() && m_security_group_arns_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("User")]);
    m_user_isSet = !json[QString("User")].isNull() && m_user_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("Password")]);
    m_password_isSet = !json[QString("Password")].isNull() && m_password_isValid;
}

QString OAICreateLocationFsxWindowsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLocationFsxWindowsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_subdirectory_isSet) {
        obj.insert(QString("Subdirectory"), ::OpenAPI::toJsonValue(m_subdirectory));
    }
    if (m_fsx_filesystem_arn_isSet) {
        obj.insert(QString("FsxFilesystemArn"), ::OpenAPI::toJsonValue(m_fsx_filesystem_arn));
    }
    if (m_security_group_arns.isSet()) {
        obj.insert(QString("SecurityGroupArns"), ::OpenAPI::toJsonValue(m_security_group_arns));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_user_isSet) {
        obj.insert(QString("User"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_domain_isSet) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_password_isSet) {
        obj.insert(QString("Password"), ::OpenAPI::toJsonValue(m_password));
    }
    return obj;
}

QString OAICreateLocationFsxWindowsRequest::getSubdirectory() const {
    return m_subdirectory;
}
void OAICreateLocationFsxWindowsRequest::setSubdirectory(const QString &subdirectory) {
    m_subdirectory = subdirectory;
    m_subdirectory_isSet = true;
}

bool OAICreateLocationFsxWindowsRequest::is_subdirectory_Set() const{
    return m_subdirectory_isSet;
}

bool OAICreateLocationFsxWindowsRequest::is_subdirectory_Valid() const{
    return m_subdirectory_isValid;
}

QString OAICreateLocationFsxWindowsRequest::getFsxFilesystemArn() const {
    return m_fsx_filesystem_arn;
}
void OAICreateLocationFsxWindowsRequest::setFsxFilesystemArn(const QString &fsx_filesystem_arn) {
    m_fsx_filesystem_arn = fsx_filesystem_arn;
    m_fsx_filesystem_arn_isSet = true;
}

bool OAICreateLocationFsxWindowsRequest::is_fsx_filesystem_arn_Set() const{
    return m_fsx_filesystem_arn_isSet;
}

bool OAICreateLocationFsxWindowsRequest::is_fsx_filesystem_arn_Valid() const{
    return m_fsx_filesystem_arn_isValid;
}

QList OAICreateLocationFsxWindowsRequest::getSecurityGroupArns() const {
    return m_security_group_arns;
}
void OAICreateLocationFsxWindowsRequest::setSecurityGroupArns(const QList &security_group_arns) {
    m_security_group_arns = security_group_arns;
    m_security_group_arns_isSet = true;
}

bool OAICreateLocationFsxWindowsRequest::is_security_group_arns_Set() const{
    return m_security_group_arns_isSet;
}

bool OAICreateLocationFsxWindowsRequest::is_security_group_arns_Valid() const{
    return m_security_group_arns_isValid;
}

QList OAICreateLocationFsxWindowsRequest::getTags() const {
    return m_tags;
}
void OAICreateLocationFsxWindowsRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateLocationFsxWindowsRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateLocationFsxWindowsRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateLocationFsxWindowsRequest::getUser() const {
    return m_user;
}
void OAICreateLocationFsxWindowsRequest::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAICreateLocationFsxWindowsRequest::is_user_Set() const{
    return m_user_isSet;
}

bool OAICreateLocationFsxWindowsRequest::is_user_Valid() const{
    return m_user_isValid;
}

QString OAICreateLocationFsxWindowsRequest::getDomain() const {
    return m_domain;
}
void OAICreateLocationFsxWindowsRequest::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAICreateLocationFsxWindowsRequest::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAICreateLocationFsxWindowsRequest::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAICreateLocationFsxWindowsRequest::getPassword() const {
    return m_password;
}
void OAICreateLocationFsxWindowsRequest::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAICreateLocationFsxWindowsRequest::is_password_Set() const{
    return m_password_isSet;
}

bool OAICreateLocationFsxWindowsRequest::is_password_Valid() const{
    return m_password_isValid;
}

bool OAICreateLocationFsxWindowsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_subdirectory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fsx_filesystem_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLocationFsxWindowsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_fsx_filesystem_arn_isValid && m_security_group_arns_isValid && m_user_isValid && m_password_isValid && true;
}

} // namespace OpenAPI
