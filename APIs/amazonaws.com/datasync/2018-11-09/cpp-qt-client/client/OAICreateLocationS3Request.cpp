/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLocationS3Request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLocationS3Request::OAICreateLocationS3Request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLocationS3Request::OAICreateLocationS3Request() {
    this->initializeModel();
}

OAICreateLocationS3Request::~OAICreateLocationS3Request() {}

void OAICreateLocationS3Request::initializeModel() {

    m_subdirectory_isSet = false;
    m_subdirectory_isValid = false;

    m_s3_bucket_arn_isSet = false;
    m_s3_bucket_arn_isValid = false;

    m_s3_storage_class_isSet = false;
    m_s3_storage_class_isValid = false;

    m_s3_config_isSet = false;
    m_s3_config_isValid = false;

    m_agent_arns_isSet = false;
    m_agent_arns_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateLocationS3Request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLocationS3Request::fromJsonObject(QJsonObject json) {

    m_subdirectory_isValid = ::OpenAPI::fromJsonValue(m_subdirectory, json[QString("Subdirectory")]);
    m_subdirectory_isSet = !json[QString("Subdirectory")].isNull() && m_subdirectory_isValid;

    m_s3_bucket_arn_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket_arn, json[QString("S3BucketArn")]);
    m_s3_bucket_arn_isSet = !json[QString("S3BucketArn")].isNull() && m_s3_bucket_arn_isValid;

    m_s3_storage_class_isValid = ::OpenAPI::fromJsonValue(m_s3_storage_class, json[QString("S3StorageClass")]);
    m_s3_storage_class_isSet = !json[QString("S3StorageClass")].isNull() && m_s3_storage_class_isValid;

    m_s3_config_isValid = ::OpenAPI::fromJsonValue(m_s3_config, json[QString("S3Config")]);
    m_s3_config_isSet = !json[QString("S3Config")].isNull() && m_s3_config_isValid;

    m_agent_arns_isValid = ::OpenAPI::fromJsonValue(m_agent_arns, json[QString("AgentArns")]);
    m_agent_arns_isSet = !json[QString("AgentArns")].isNull() && m_agent_arns_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateLocationS3Request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLocationS3Request::asJsonObject() const {
    QJsonObject obj;
    if (m_subdirectory_isSet) {
        obj.insert(QString("Subdirectory"), ::OpenAPI::toJsonValue(m_subdirectory));
    }
    if (m_s3_bucket_arn_isSet) {
        obj.insert(QString("S3BucketArn"), ::OpenAPI::toJsonValue(m_s3_bucket_arn));
    }
    if (m_s3_storage_class.isSet()) {
        obj.insert(QString("S3StorageClass"), ::OpenAPI::toJsonValue(m_s3_storage_class));
    }
    if (m_s3_config.isSet()) {
        obj.insert(QString("S3Config"), ::OpenAPI::toJsonValue(m_s3_config));
    }
    if (m_agent_arns.isSet()) {
        obj.insert(QString("AgentArns"), ::OpenAPI::toJsonValue(m_agent_arns));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateLocationS3Request::getSubdirectory() const {
    return m_subdirectory;
}
void OAICreateLocationS3Request::setSubdirectory(const QString &subdirectory) {
    m_subdirectory = subdirectory;
    m_subdirectory_isSet = true;
}

bool OAICreateLocationS3Request::is_subdirectory_Set() const{
    return m_subdirectory_isSet;
}

bool OAICreateLocationS3Request::is_subdirectory_Valid() const{
    return m_subdirectory_isValid;
}

QString OAICreateLocationS3Request::getS3BucketArn() const {
    return m_s3_bucket_arn;
}
void OAICreateLocationS3Request::setS3BucketArn(const QString &s3_bucket_arn) {
    m_s3_bucket_arn = s3_bucket_arn;
    m_s3_bucket_arn_isSet = true;
}

bool OAICreateLocationS3Request::is_s3_bucket_arn_Set() const{
    return m_s3_bucket_arn_isSet;
}

bool OAICreateLocationS3Request::is_s3_bucket_arn_Valid() const{
    return m_s3_bucket_arn_isValid;
}

OAIS3StorageClass OAICreateLocationS3Request::getS3StorageClass() const {
    return m_s3_storage_class;
}
void OAICreateLocationS3Request::setS3StorageClass(const OAIS3StorageClass &s3_storage_class) {
    m_s3_storage_class = s3_storage_class;
    m_s3_storage_class_isSet = true;
}

bool OAICreateLocationS3Request::is_s3_storage_class_Set() const{
    return m_s3_storage_class_isSet;
}

bool OAICreateLocationS3Request::is_s3_storage_class_Valid() const{
    return m_s3_storage_class_isValid;
}

OAIS3Config OAICreateLocationS3Request::getS3Config() const {
    return m_s3_config;
}
void OAICreateLocationS3Request::setS3Config(const OAIS3Config &s3_config) {
    m_s3_config = s3_config;
    m_s3_config_isSet = true;
}

bool OAICreateLocationS3Request::is_s3_config_Set() const{
    return m_s3_config_isSet;
}

bool OAICreateLocationS3Request::is_s3_config_Valid() const{
    return m_s3_config_isValid;
}

QList OAICreateLocationS3Request::getAgentArns() const {
    return m_agent_arns;
}
void OAICreateLocationS3Request::setAgentArns(const QList &agent_arns) {
    m_agent_arns = agent_arns;
    m_agent_arns_isSet = true;
}

bool OAICreateLocationS3Request::is_agent_arns_Set() const{
    return m_agent_arns_isSet;
}

bool OAICreateLocationS3Request::is_agent_arns_Valid() const{
    return m_agent_arns_isValid;
}

QList OAICreateLocationS3Request::getTags() const {
    return m_tags;
}
void OAICreateLocationS3Request::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateLocationS3Request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateLocationS3Request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateLocationS3Request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_subdirectory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_bucket_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_storage_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLocationS3Request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_s3_bucket_arn_isValid && m_s3_config_isValid && true;
}

} // namespace OpenAPI
