/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendation::OAIRecommendation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendation::OAIRecommendation() {
    this->initializeModel();
}

OAIRecommendation::~OAIRecommendation() {}

void OAIRecommendation::initializeModel() {

    m_storage_type_isSet = false;
    m_storage_type_isValid = false;

    m_storage_configuration_isSet = false;
    m_storage_configuration_isValid = false;

    m_estimated_monthly_storage_cost_isSet = false;
    m_estimated_monthly_storage_cost_isValid = false;
}

void OAIRecommendation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendation::fromJsonObject(QJsonObject json) {

    m_storage_type_isValid = ::OpenAPI::fromJsonValue(m_storage_type, json[QString("StorageType")]);
    m_storage_type_isSet = !json[QString("StorageType")].isNull() && m_storage_type_isValid;

    m_storage_configuration_isValid = ::OpenAPI::fromJsonValue(m_storage_configuration, json[QString("StorageConfiguration")]);
    m_storage_configuration_isSet = !json[QString("StorageConfiguration")].isNull() && m_storage_configuration_isValid;

    m_estimated_monthly_storage_cost_isValid = ::OpenAPI::fromJsonValue(m_estimated_monthly_storage_cost, json[QString("EstimatedMonthlyStorageCost")]);
    m_estimated_monthly_storage_cost_isSet = !json[QString("EstimatedMonthlyStorageCost")].isNull() && m_estimated_monthly_storage_cost_isValid;
}

QString OAIRecommendation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendation::asJsonObject() const {
    QJsonObject obj;
    if (m_storage_type_isSet) {
        obj.insert(QString("StorageType"), ::OpenAPI::toJsonValue(m_storage_type));
    }
    if (m_storage_configuration.isSet()) {
        obj.insert(QString("StorageConfiguration"), ::OpenAPI::toJsonValue(m_storage_configuration));
    }
    if (m_estimated_monthly_storage_cost_isSet) {
        obj.insert(QString("EstimatedMonthlyStorageCost"), ::OpenAPI::toJsonValue(m_estimated_monthly_storage_cost));
    }
    return obj;
}

QString OAIRecommendation::getStorageType() const {
    return m_storage_type;
}
void OAIRecommendation::setStorageType(const QString &storage_type) {
    m_storage_type = storage_type;
    m_storage_type_isSet = true;
}

bool OAIRecommendation::is_storage_type_Set() const{
    return m_storage_type_isSet;
}

bool OAIRecommendation::is_storage_type_Valid() const{
    return m_storage_type_isValid;
}

QMap OAIRecommendation::getStorageConfiguration() const {
    return m_storage_configuration;
}
void OAIRecommendation::setStorageConfiguration(const QMap &storage_configuration) {
    m_storage_configuration = storage_configuration;
    m_storage_configuration_isSet = true;
}

bool OAIRecommendation::is_storage_configuration_Set() const{
    return m_storage_configuration_isSet;
}

bool OAIRecommendation::is_storage_configuration_Valid() const{
    return m_storage_configuration_isValid;
}

QString OAIRecommendation::getEstimatedMonthlyStorageCost() const {
    return m_estimated_monthly_storage_cost;
}
void OAIRecommendation::setEstimatedMonthlyStorageCost(const QString &estimated_monthly_storage_cost) {
    m_estimated_monthly_storage_cost = estimated_monthly_storage_cost;
    m_estimated_monthly_storage_cost_isSet = true;
}

bool OAIRecommendation::is_estimated_monthly_storage_cost_Set() const{
    return m_estimated_monthly_storage_cost_isSet;
}

bool OAIRecommendation::is_estimated_monthly_storage_cost_Valid() const{
    return m_estimated_monthly_storage_cost_isValid;
}

bool OAIRecommendation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_storage_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_monthly_storage_cost_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
