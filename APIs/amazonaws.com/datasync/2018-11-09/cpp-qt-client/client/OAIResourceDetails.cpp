/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceDetails::OAIResourceDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceDetails::OAIResourceDetails() {
    this->initializeModel();
}

OAIResourceDetails::~OAIResourceDetails() {}

void OAIResourceDetails::initializeModel() {

    m_net_app_ontapsvms_isSet = false;
    m_net_app_ontapsvms_isValid = false;

    m_net_app_ontap_volumes_isSet = false;
    m_net_app_ontap_volumes_isValid = false;

    m_net_app_ontap_clusters_isSet = false;
    m_net_app_ontap_clusters_isValid = false;
}

void OAIResourceDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceDetails::fromJsonObject(QJsonObject json) {

    m_net_app_ontapsvms_isValid = ::OpenAPI::fromJsonValue(m_net_app_ontapsvms, json[QString("NetAppONTAPSVMs")]);
    m_net_app_ontapsvms_isSet = !json[QString("NetAppONTAPSVMs")].isNull() && m_net_app_ontapsvms_isValid;

    m_net_app_ontap_volumes_isValid = ::OpenAPI::fromJsonValue(m_net_app_ontap_volumes, json[QString("NetAppONTAPVolumes")]);
    m_net_app_ontap_volumes_isSet = !json[QString("NetAppONTAPVolumes")].isNull() && m_net_app_ontap_volumes_isValid;

    m_net_app_ontap_clusters_isValid = ::OpenAPI::fromJsonValue(m_net_app_ontap_clusters, json[QString("NetAppONTAPClusters")]);
    m_net_app_ontap_clusters_isSet = !json[QString("NetAppONTAPClusters")].isNull() && m_net_app_ontap_clusters_isValid;
}

QString OAIResourceDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_net_app_ontapsvms.isSet()) {
        obj.insert(QString("NetAppONTAPSVMs"), ::OpenAPI::toJsonValue(m_net_app_ontapsvms));
    }
    if (m_net_app_ontap_volumes.isSet()) {
        obj.insert(QString("NetAppONTAPVolumes"), ::OpenAPI::toJsonValue(m_net_app_ontap_volumes));
    }
    if (m_net_app_ontap_clusters.isSet()) {
        obj.insert(QString("NetAppONTAPClusters"), ::OpenAPI::toJsonValue(m_net_app_ontap_clusters));
    }
    return obj;
}

QList OAIResourceDetails::getNetAppOntapsvms() const {
    return m_net_app_ontapsvms;
}
void OAIResourceDetails::setNetAppOntapsvms(const QList &net_app_ontapsvms) {
    m_net_app_ontapsvms = net_app_ontapsvms;
    m_net_app_ontapsvms_isSet = true;
}

bool OAIResourceDetails::is_net_app_ontapsvms_Set() const{
    return m_net_app_ontapsvms_isSet;
}

bool OAIResourceDetails::is_net_app_ontapsvms_Valid() const{
    return m_net_app_ontapsvms_isValid;
}

QList OAIResourceDetails::getNetAppOntapVolumes() const {
    return m_net_app_ontap_volumes;
}
void OAIResourceDetails::setNetAppOntapVolumes(const QList &net_app_ontap_volumes) {
    m_net_app_ontap_volumes = net_app_ontap_volumes;
    m_net_app_ontap_volumes_isSet = true;
}

bool OAIResourceDetails::is_net_app_ontap_volumes_Set() const{
    return m_net_app_ontap_volumes_isSet;
}

bool OAIResourceDetails::is_net_app_ontap_volumes_Valid() const{
    return m_net_app_ontap_volumes_isValid;
}

QList OAIResourceDetails::getNetAppOntapClusters() const {
    return m_net_app_ontap_clusters;
}
void OAIResourceDetails::setNetAppOntapClusters(const QList &net_app_ontap_clusters) {
    m_net_app_ontap_clusters = net_app_ontap_clusters;
    m_net_app_ontap_clusters_isSet = true;
}

bool OAIResourceDetails::is_net_app_ontap_clusters_Set() const{
    return m_net_app_ontap_clusters_isSet;
}

bool OAIResourceDetails::is_net_app_ontap_clusters_Valid() const{
    return m_net_app_ontap_clusters_isValid;
}

bool OAIResourceDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_net_app_ontapsvms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_app_ontap_volumes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_app_ontap_clusters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
