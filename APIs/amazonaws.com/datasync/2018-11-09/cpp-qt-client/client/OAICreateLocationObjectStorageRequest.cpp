/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLocationObjectStorageRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLocationObjectStorageRequest::OAICreateLocationObjectStorageRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLocationObjectStorageRequest::OAICreateLocationObjectStorageRequest() {
    this->initializeModel();
}

OAICreateLocationObjectStorageRequest::~OAICreateLocationObjectStorageRequest() {}

void OAICreateLocationObjectStorageRequest::initializeModel() {

    m_server_hostname_isSet = false;
    m_server_hostname_isValid = false;

    m_server_port_isSet = false;
    m_server_port_isValid = false;

    m_server_protocol_isSet = false;
    m_server_protocol_isValid = false;

    m_subdirectory_isSet = false;
    m_subdirectory_isValid = false;

    m_bucket_name_isSet = false;
    m_bucket_name_isValid = false;

    m_access_key_isSet = false;
    m_access_key_isValid = false;

    m_secret_key_isSet = false;
    m_secret_key_isValid = false;

    m_agent_arns_isSet = false;
    m_agent_arns_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_server_certificate_isSet = false;
    m_server_certificate_isValid = false;
}

void OAICreateLocationObjectStorageRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLocationObjectStorageRequest::fromJsonObject(QJsonObject json) {

    m_server_hostname_isValid = ::OpenAPI::fromJsonValue(m_server_hostname, json[QString("ServerHostname")]);
    m_server_hostname_isSet = !json[QString("ServerHostname")].isNull() && m_server_hostname_isValid;

    m_server_port_isValid = ::OpenAPI::fromJsonValue(m_server_port, json[QString("ServerPort")]);
    m_server_port_isSet = !json[QString("ServerPort")].isNull() && m_server_port_isValid;

    m_server_protocol_isValid = ::OpenAPI::fromJsonValue(m_server_protocol, json[QString("ServerProtocol")]);
    m_server_protocol_isSet = !json[QString("ServerProtocol")].isNull() && m_server_protocol_isValid;

    m_subdirectory_isValid = ::OpenAPI::fromJsonValue(m_subdirectory, json[QString("Subdirectory")]);
    m_subdirectory_isSet = !json[QString("Subdirectory")].isNull() && m_subdirectory_isValid;

    m_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_bucket_name, json[QString("BucketName")]);
    m_bucket_name_isSet = !json[QString("BucketName")].isNull() && m_bucket_name_isValid;

    m_access_key_isValid = ::OpenAPI::fromJsonValue(m_access_key, json[QString("AccessKey")]);
    m_access_key_isSet = !json[QString("AccessKey")].isNull() && m_access_key_isValid;

    m_secret_key_isValid = ::OpenAPI::fromJsonValue(m_secret_key, json[QString("SecretKey")]);
    m_secret_key_isSet = !json[QString("SecretKey")].isNull() && m_secret_key_isValid;

    m_agent_arns_isValid = ::OpenAPI::fromJsonValue(m_agent_arns, json[QString("AgentArns")]);
    m_agent_arns_isSet = !json[QString("AgentArns")].isNull() && m_agent_arns_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_server_certificate_isValid = ::OpenAPI::fromJsonValue(m_server_certificate, json[QString("ServerCertificate")]);
    m_server_certificate_isSet = !json[QString("ServerCertificate")].isNull() && m_server_certificate_isValid;
}

QString OAICreateLocationObjectStorageRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLocationObjectStorageRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_server_hostname_isSet) {
        obj.insert(QString("ServerHostname"), ::OpenAPI::toJsonValue(m_server_hostname));
    }
    if (m_server_port_isSet) {
        obj.insert(QString("ServerPort"), ::OpenAPI::toJsonValue(m_server_port));
    }
    if (m_server_protocol.isSet()) {
        obj.insert(QString("ServerProtocol"), ::OpenAPI::toJsonValue(m_server_protocol));
    }
    if (m_subdirectory_isSet) {
        obj.insert(QString("Subdirectory"), ::OpenAPI::toJsonValue(m_subdirectory));
    }
    if (m_bucket_name_isSet) {
        obj.insert(QString("BucketName"), ::OpenAPI::toJsonValue(m_bucket_name));
    }
    if (m_access_key_isSet) {
        obj.insert(QString("AccessKey"), ::OpenAPI::toJsonValue(m_access_key));
    }
    if (m_secret_key_isSet) {
        obj.insert(QString("SecretKey"), ::OpenAPI::toJsonValue(m_secret_key));
    }
    if (m_agent_arns.isSet()) {
        obj.insert(QString("AgentArns"), ::OpenAPI::toJsonValue(m_agent_arns));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_server_certificate_isSet) {
        obj.insert(QString("ServerCertificate"), ::OpenAPI::toJsonValue(m_server_certificate));
    }
    return obj;
}

QString OAICreateLocationObjectStorageRequest::getServerHostname() const {
    return m_server_hostname;
}
void OAICreateLocationObjectStorageRequest::setServerHostname(const QString &server_hostname) {
    m_server_hostname = server_hostname;
    m_server_hostname_isSet = true;
}

bool OAICreateLocationObjectStorageRequest::is_server_hostname_Set() const{
    return m_server_hostname_isSet;
}

bool OAICreateLocationObjectStorageRequest::is_server_hostname_Valid() const{
    return m_server_hostname_isValid;
}

qint32 OAICreateLocationObjectStorageRequest::getServerPort() const {
    return m_server_port;
}
void OAICreateLocationObjectStorageRequest::setServerPort(const qint32 &server_port) {
    m_server_port = server_port;
    m_server_port_isSet = true;
}

bool OAICreateLocationObjectStorageRequest::is_server_port_Set() const{
    return m_server_port_isSet;
}

bool OAICreateLocationObjectStorageRequest::is_server_port_Valid() const{
    return m_server_port_isValid;
}

OAIObjectStorageServerProtocol OAICreateLocationObjectStorageRequest::getServerProtocol() const {
    return m_server_protocol;
}
void OAICreateLocationObjectStorageRequest::setServerProtocol(const OAIObjectStorageServerProtocol &server_protocol) {
    m_server_protocol = server_protocol;
    m_server_protocol_isSet = true;
}

bool OAICreateLocationObjectStorageRequest::is_server_protocol_Set() const{
    return m_server_protocol_isSet;
}

bool OAICreateLocationObjectStorageRequest::is_server_protocol_Valid() const{
    return m_server_protocol_isValid;
}

QString OAICreateLocationObjectStorageRequest::getSubdirectory() const {
    return m_subdirectory;
}
void OAICreateLocationObjectStorageRequest::setSubdirectory(const QString &subdirectory) {
    m_subdirectory = subdirectory;
    m_subdirectory_isSet = true;
}

bool OAICreateLocationObjectStorageRequest::is_subdirectory_Set() const{
    return m_subdirectory_isSet;
}

bool OAICreateLocationObjectStorageRequest::is_subdirectory_Valid() const{
    return m_subdirectory_isValid;
}

QString OAICreateLocationObjectStorageRequest::getBucketName() const {
    return m_bucket_name;
}
void OAICreateLocationObjectStorageRequest::setBucketName(const QString &bucket_name) {
    m_bucket_name = bucket_name;
    m_bucket_name_isSet = true;
}

bool OAICreateLocationObjectStorageRequest::is_bucket_name_Set() const{
    return m_bucket_name_isSet;
}

bool OAICreateLocationObjectStorageRequest::is_bucket_name_Valid() const{
    return m_bucket_name_isValid;
}

QString OAICreateLocationObjectStorageRequest::getAccessKey() const {
    return m_access_key;
}
void OAICreateLocationObjectStorageRequest::setAccessKey(const QString &access_key) {
    m_access_key = access_key;
    m_access_key_isSet = true;
}

bool OAICreateLocationObjectStorageRequest::is_access_key_Set() const{
    return m_access_key_isSet;
}

bool OAICreateLocationObjectStorageRequest::is_access_key_Valid() const{
    return m_access_key_isValid;
}

QString OAICreateLocationObjectStorageRequest::getSecretKey() const {
    return m_secret_key;
}
void OAICreateLocationObjectStorageRequest::setSecretKey(const QString &secret_key) {
    m_secret_key = secret_key;
    m_secret_key_isSet = true;
}

bool OAICreateLocationObjectStorageRequest::is_secret_key_Set() const{
    return m_secret_key_isSet;
}

bool OAICreateLocationObjectStorageRequest::is_secret_key_Valid() const{
    return m_secret_key_isValid;
}

QList OAICreateLocationObjectStorageRequest::getAgentArns() const {
    return m_agent_arns;
}
void OAICreateLocationObjectStorageRequest::setAgentArns(const QList &agent_arns) {
    m_agent_arns = agent_arns;
    m_agent_arns_isSet = true;
}

bool OAICreateLocationObjectStorageRequest::is_agent_arns_Set() const{
    return m_agent_arns_isSet;
}

bool OAICreateLocationObjectStorageRequest::is_agent_arns_Valid() const{
    return m_agent_arns_isValid;
}

QList OAICreateLocationObjectStorageRequest::getTags() const {
    return m_tags;
}
void OAICreateLocationObjectStorageRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateLocationObjectStorageRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateLocationObjectStorageRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateLocationObjectStorageRequest::getServerCertificate() const {
    return m_server_certificate;
}
void OAICreateLocationObjectStorageRequest::setServerCertificate(const QString &server_certificate) {
    m_server_certificate = server_certificate;
    m_server_certificate_isSet = true;
}

bool OAICreateLocationObjectStorageRequest::is_server_certificate_Set() const{
    return m_server_certificate_isSet;
}

bool OAICreateLocationObjectStorageRequest::is_server_certificate_Valid() const{
    return m_server_certificate_isValid;
}

bool OAICreateLocationObjectStorageRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_server_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subdirectory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLocationObjectStorageRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_server_hostname_isValid && m_bucket_name_isValid && m_agent_arns_isValid && true;
}

} // namespace OpenAPI
