/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskExecutionListEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskExecutionListEntry::OAITaskExecutionListEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskExecutionListEntry::OAITaskExecutionListEntry() {
    this->initializeModel();
}

OAITaskExecutionListEntry::~OAITaskExecutionListEntry() {}

void OAITaskExecutionListEntry::initializeModel() {

    m_task_execution_arn_isSet = false;
    m_task_execution_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAITaskExecutionListEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskExecutionListEntry::fromJsonObject(QJsonObject json) {

    m_task_execution_arn_isValid = ::OpenAPI::fromJsonValue(m_task_execution_arn, json[QString("TaskExecutionArn")]);
    m_task_execution_arn_isSet = !json[QString("TaskExecutionArn")].isNull() && m_task_execution_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAITaskExecutionListEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskExecutionListEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_task_execution_arn_isSet) {
        obj.insert(QString("TaskExecutionArn"), ::OpenAPI::toJsonValue(m_task_execution_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAITaskExecutionListEntry::getTaskExecutionArn() const {
    return m_task_execution_arn;
}
void OAITaskExecutionListEntry::setTaskExecutionArn(const QString &task_execution_arn) {
    m_task_execution_arn = task_execution_arn;
    m_task_execution_arn_isSet = true;
}

bool OAITaskExecutionListEntry::is_task_execution_arn_Set() const{
    return m_task_execution_arn_isSet;
}

bool OAITaskExecutionListEntry::is_task_execution_arn_Valid() const{
    return m_task_execution_arn_isValid;
}

OAITaskExecutionStatus OAITaskExecutionListEntry::getStatus() const {
    return m_status;
}
void OAITaskExecutionListEntry::setStatus(const OAITaskExecutionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITaskExecutionListEntry::is_status_Set() const{
    return m_status_isSet;
}

bool OAITaskExecutionListEntry::is_status_Valid() const{
    return m_status_isValid;
}

bool OAITaskExecutionListEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_task_execution_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskExecutionListEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
