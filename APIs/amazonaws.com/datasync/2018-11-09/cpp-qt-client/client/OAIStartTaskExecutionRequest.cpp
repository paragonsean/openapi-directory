/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartTaskExecutionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartTaskExecutionRequest::OAIStartTaskExecutionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartTaskExecutionRequest::OAIStartTaskExecutionRequest() {
    this->initializeModel();
}

OAIStartTaskExecutionRequest::~OAIStartTaskExecutionRequest() {}

void OAIStartTaskExecutionRequest::initializeModel() {

    m_task_arn_isSet = false;
    m_task_arn_isValid = false;

    m_override_options_isSet = false;
    m_override_options_isValid = false;

    m_includes_isSet = false;
    m_includes_isValid = false;

    m_excludes_isSet = false;
    m_excludes_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIStartTaskExecutionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartTaskExecutionRequest::fromJsonObject(QJsonObject json) {

    m_task_arn_isValid = ::OpenAPI::fromJsonValue(m_task_arn, json[QString("TaskArn")]);
    m_task_arn_isSet = !json[QString("TaskArn")].isNull() && m_task_arn_isValid;

    m_override_options_isValid = ::OpenAPI::fromJsonValue(m_override_options, json[QString("OverrideOptions")]);
    m_override_options_isSet = !json[QString("OverrideOptions")].isNull() && m_override_options_isValid;

    m_includes_isValid = ::OpenAPI::fromJsonValue(m_includes, json[QString("Includes")]);
    m_includes_isSet = !json[QString("Includes")].isNull() && m_includes_isValid;

    m_excludes_isValid = ::OpenAPI::fromJsonValue(m_excludes, json[QString("Excludes")]);
    m_excludes_isSet = !json[QString("Excludes")].isNull() && m_excludes_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIStartTaskExecutionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartTaskExecutionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_task_arn_isSet) {
        obj.insert(QString("TaskArn"), ::OpenAPI::toJsonValue(m_task_arn));
    }
    if (m_override_options.isSet()) {
        obj.insert(QString("OverrideOptions"), ::OpenAPI::toJsonValue(m_override_options));
    }
    if (m_includes.isSet()) {
        obj.insert(QString("Includes"), ::OpenAPI::toJsonValue(m_includes));
    }
    if (m_excludes.isSet()) {
        obj.insert(QString("Excludes"), ::OpenAPI::toJsonValue(m_excludes));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIStartTaskExecutionRequest::getTaskArn() const {
    return m_task_arn;
}
void OAIStartTaskExecutionRequest::setTaskArn(const QString &task_arn) {
    m_task_arn = task_arn;
    m_task_arn_isSet = true;
}

bool OAIStartTaskExecutionRequest::is_task_arn_Set() const{
    return m_task_arn_isSet;
}

bool OAIStartTaskExecutionRequest::is_task_arn_Valid() const{
    return m_task_arn_isValid;
}

OAIOptions OAIStartTaskExecutionRequest::getOverrideOptions() const {
    return m_override_options;
}
void OAIStartTaskExecutionRequest::setOverrideOptions(const OAIOptions &override_options) {
    m_override_options = override_options;
    m_override_options_isSet = true;
}

bool OAIStartTaskExecutionRequest::is_override_options_Set() const{
    return m_override_options_isSet;
}

bool OAIStartTaskExecutionRequest::is_override_options_Valid() const{
    return m_override_options_isValid;
}

QList OAIStartTaskExecutionRequest::getIncludes() const {
    return m_includes;
}
void OAIStartTaskExecutionRequest::setIncludes(const QList &includes) {
    m_includes = includes;
    m_includes_isSet = true;
}

bool OAIStartTaskExecutionRequest::is_includes_Set() const{
    return m_includes_isSet;
}

bool OAIStartTaskExecutionRequest::is_includes_Valid() const{
    return m_includes_isValid;
}

QList OAIStartTaskExecutionRequest::getExcludes() const {
    return m_excludes;
}
void OAIStartTaskExecutionRequest::setExcludes(const QList &excludes) {
    m_excludes = excludes;
    m_excludes_isSet = true;
}

bool OAIStartTaskExecutionRequest::is_excludes_Set() const{
    return m_excludes_isSet;
}

bool OAIStartTaskExecutionRequest::is_excludes_Valid() const{
    return m_excludes_isValid;
}

QList OAIStartTaskExecutionRequest::getTags() const {
    return m_tags;
}
void OAIStartTaskExecutionRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIStartTaskExecutionRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIStartTaskExecutionRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIStartTaskExecutionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_task_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_includes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_excludes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartTaskExecutionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_task_arn_isValid && true;
}

} // namespace OpenAPI
