/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAgentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAgentResponse::OAIDescribeAgentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAgentResponse::OAIDescribeAgentResponse() {
    this->initializeModel();
}

OAIDescribeAgentResponse::~OAIDescribeAgentResponse() {}

void OAIDescribeAgentResponse::initializeModel() {

    m_agent_arn_isSet = false;
    m_agent_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_last_connection_time_isSet = false;
    m_last_connection_time_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_endpoint_type_isSet = false;
    m_endpoint_type_isValid = false;

    m_private_link_config_isSet = false;
    m_private_link_config_isValid = false;
}

void OAIDescribeAgentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAgentResponse::fromJsonObject(QJsonObject json) {

    m_agent_arn_isValid = ::OpenAPI::fromJsonValue(m_agent_arn, json[QString("AgentArn")]);
    m_agent_arn_isSet = !json[QString("AgentArn")].isNull() && m_agent_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_last_connection_time_isValid = ::OpenAPI::fromJsonValue(m_last_connection_time, json[QString("LastConnectionTime")]);
    m_last_connection_time_isSet = !json[QString("LastConnectionTime")].isNull() && m_last_connection_time_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_endpoint_type_isValid = ::OpenAPI::fromJsonValue(m_endpoint_type, json[QString("EndpointType")]);
    m_endpoint_type_isSet = !json[QString("EndpointType")].isNull() && m_endpoint_type_isValid;

    m_private_link_config_isValid = ::OpenAPI::fromJsonValue(m_private_link_config, json[QString("PrivateLinkConfig")]);
    m_private_link_config_isSet = !json[QString("PrivateLinkConfig")].isNull() && m_private_link_config_isValid;
}

QString OAIDescribeAgentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAgentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_arn_isSet) {
        obj.insert(QString("AgentArn"), ::OpenAPI::toJsonValue(m_agent_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_last_connection_time_isSet) {
        obj.insert(QString("LastConnectionTime"), ::OpenAPI::toJsonValue(m_last_connection_time));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_endpoint_type.isSet()) {
        obj.insert(QString("EndpointType"), ::OpenAPI::toJsonValue(m_endpoint_type));
    }
    if (m_private_link_config.isSet()) {
        obj.insert(QString("PrivateLinkConfig"), ::OpenAPI::toJsonValue(m_private_link_config));
    }
    return obj;
}

QString OAIDescribeAgentResponse::getAgentArn() const {
    return m_agent_arn;
}
void OAIDescribeAgentResponse::setAgentArn(const QString &agent_arn) {
    m_agent_arn = agent_arn;
    m_agent_arn_isSet = true;
}

bool OAIDescribeAgentResponse::is_agent_arn_Set() const{
    return m_agent_arn_isSet;
}

bool OAIDescribeAgentResponse::is_agent_arn_Valid() const{
    return m_agent_arn_isValid;
}

QString OAIDescribeAgentResponse::getName() const {
    return m_name;
}
void OAIDescribeAgentResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeAgentResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeAgentResponse::is_name_Valid() const{
    return m_name_isValid;
}

OAIAgentStatus OAIDescribeAgentResponse::getStatus() const {
    return m_status;
}
void OAIDescribeAgentResponse::setStatus(const OAIAgentStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeAgentResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeAgentResponse::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIDescribeAgentResponse::getLastConnectionTime() const {
    return m_last_connection_time;
}
void OAIDescribeAgentResponse::setLastConnectionTime(const QDateTime &last_connection_time) {
    m_last_connection_time = last_connection_time;
    m_last_connection_time_isSet = true;
}

bool OAIDescribeAgentResponse::is_last_connection_time_Set() const{
    return m_last_connection_time_isSet;
}

bool OAIDescribeAgentResponse::is_last_connection_time_Valid() const{
    return m_last_connection_time_isValid;
}

QDateTime OAIDescribeAgentResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeAgentResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeAgentResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeAgentResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAIEndpointType OAIDescribeAgentResponse::getEndpointType() const {
    return m_endpoint_type;
}
void OAIDescribeAgentResponse::setEndpointType(const OAIEndpointType &endpoint_type) {
    m_endpoint_type = endpoint_type;
    m_endpoint_type_isSet = true;
}

bool OAIDescribeAgentResponse::is_endpoint_type_Set() const{
    return m_endpoint_type_isSet;
}

bool OAIDescribeAgentResponse::is_endpoint_type_Valid() const{
    return m_endpoint_type_isValid;
}

OAIDescribeAgentResponse_PrivateLinkConfig OAIDescribeAgentResponse::getPrivateLinkConfig() const {
    return m_private_link_config;
}
void OAIDescribeAgentResponse::setPrivateLinkConfig(const OAIDescribeAgentResponse_PrivateLinkConfig &private_link_config) {
    m_private_link_config = private_link_config;
    m_private_link_config_isSet = true;
}

bool OAIDescribeAgentResponse::is_private_link_config_Set() const{
    return m_private_link_config_isSet;
}

bool OAIDescribeAgentResponse::is_private_link_config_Valid() const{
    return m_private_link_config_isValid;
}

bool OAIDescribeAgentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_connection_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_link_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAgentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
