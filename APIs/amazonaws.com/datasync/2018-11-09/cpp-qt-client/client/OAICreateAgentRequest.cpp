/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAgentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAgentRequest::OAICreateAgentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAgentRequest::OAICreateAgentRequest() {
    this->initializeModel();
}

OAICreateAgentRequest::~OAICreateAgentRequest() {}

void OAICreateAgentRequest::initializeModel() {

    m_activation_key_isSet = false;
    m_activation_key_isValid = false;

    m_agent_name_isSet = false;
    m_agent_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_vpc_endpoint_id_isSet = false;
    m_vpc_endpoint_id_isValid = false;

    m_subnet_arns_isSet = false;
    m_subnet_arns_isValid = false;

    m_security_group_arns_isSet = false;
    m_security_group_arns_isValid = false;
}

void OAICreateAgentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAgentRequest::fromJsonObject(QJsonObject json) {

    m_activation_key_isValid = ::OpenAPI::fromJsonValue(m_activation_key, json[QString("ActivationKey")]);
    m_activation_key_isSet = !json[QString("ActivationKey")].isNull() && m_activation_key_isValid;

    m_agent_name_isValid = ::OpenAPI::fromJsonValue(m_agent_name, json[QString("AgentName")]);
    m_agent_name_isSet = !json[QString("AgentName")].isNull() && m_agent_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_vpc_endpoint_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_endpoint_id, json[QString("VpcEndpointId")]);
    m_vpc_endpoint_id_isSet = !json[QString("VpcEndpointId")].isNull() && m_vpc_endpoint_id_isValid;

    m_subnet_arns_isValid = ::OpenAPI::fromJsonValue(m_subnet_arns, json[QString("SubnetArns")]);
    m_subnet_arns_isSet = !json[QString("SubnetArns")].isNull() && m_subnet_arns_isValid;

    m_security_group_arns_isValid = ::OpenAPI::fromJsonValue(m_security_group_arns, json[QString("SecurityGroupArns")]);
    m_security_group_arns_isSet = !json[QString("SecurityGroupArns")].isNull() && m_security_group_arns_isValid;
}

QString OAICreateAgentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAgentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_activation_key_isSet) {
        obj.insert(QString("ActivationKey"), ::OpenAPI::toJsonValue(m_activation_key));
    }
    if (m_agent_name_isSet) {
        obj.insert(QString("AgentName"), ::OpenAPI::toJsonValue(m_agent_name));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_vpc_endpoint_id_isSet) {
        obj.insert(QString("VpcEndpointId"), ::OpenAPI::toJsonValue(m_vpc_endpoint_id));
    }
    if (m_subnet_arns.isSet()) {
        obj.insert(QString("SubnetArns"), ::OpenAPI::toJsonValue(m_subnet_arns));
    }
    if (m_security_group_arns.isSet()) {
        obj.insert(QString("SecurityGroupArns"), ::OpenAPI::toJsonValue(m_security_group_arns));
    }
    return obj;
}

QString OAICreateAgentRequest::getActivationKey() const {
    return m_activation_key;
}
void OAICreateAgentRequest::setActivationKey(const QString &activation_key) {
    m_activation_key = activation_key;
    m_activation_key_isSet = true;
}

bool OAICreateAgentRequest::is_activation_key_Set() const{
    return m_activation_key_isSet;
}

bool OAICreateAgentRequest::is_activation_key_Valid() const{
    return m_activation_key_isValid;
}

QString OAICreateAgentRequest::getAgentName() const {
    return m_agent_name;
}
void OAICreateAgentRequest::setAgentName(const QString &agent_name) {
    m_agent_name = agent_name;
    m_agent_name_isSet = true;
}

bool OAICreateAgentRequest::is_agent_name_Set() const{
    return m_agent_name_isSet;
}

bool OAICreateAgentRequest::is_agent_name_Valid() const{
    return m_agent_name_isValid;
}

QList OAICreateAgentRequest::getTags() const {
    return m_tags;
}
void OAICreateAgentRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateAgentRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateAgentRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateAgentRequest::getVpcEndpointId() const {
    return m_vpc_endpoint_id;
}
void OAICreateAgentRequest::setVpcEndpointId(const QString &vpc_endpoint_id) {
    m_vpc_endpoint_id = vpc_endpoint_id;
    m_vpc_endpoint_id_isSet = true;
}

bool OAICreateAgentRequest::is_vpc_endpoint_id_Set() const{
    return m_vpc_endpoint_id_isSet;
}

bool OAICreateAgentRequest::is_vpc_endpoint_id_Valid() const{
    return m_vpc_endpoint_id_isValid;
}

QList OAICreateAgentRequest::getSubnetArns() const {
    return m_subnet_arns;
}
void OAICreateAgentRequest::setSubnetArns(const QList &subnet_arns) {
    m_subnet_arns = subnet_arns;
    m_subnet_arns_isSet = true;
}

bool OAICreateAgentRequest::is_subnet_arns_Set() const{
    return m_subnet_arns_isSet;
}

bool OAICreateAgentRequest::is_subnet_arns_Valid() const{
    return m_subnet_arns_isValid;
}

QList OAICreateAgentRequest::getSecurityGroupArns() const {
    return m_security_group_arns;
}
void OAICreateAgentRequest::setSecurityGroupArns(const QList &security_group_arns) {
    m_security_group_arns = security_group_arns;
    m_security_group_arns_isSet = true;
}

bool OAICreateAgentRequest::is_security_group_arns_Set() const{
    return m_security_group_arns_isSet;
}

bool OAICreateAgentRequest::is_security_group_arns_Valid() const{
    return m_security_group_arns_isValid;
}

bool OAICreateAgentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activation_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_endpoint_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAgentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_activation_key_isValid && true;
}

} // namespace OpenAPI
