/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDiscoveryJobResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDiscoveryJobResponse::OAIDescribeDiscoveryJobResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDiscoveryJobResponse::OAIDescribeDiscoveryJobResponse() {
    this->initializeModel();
}

OAIDescribeDiscoveryJobResponse::~OAIDescribeDiscoveryJobResponse() {}

void OAIDescribeDiscoveryJobResponse::initializeModel() {

    m_storage_system_arn_isSet = false;
    m_storage_system_arn_isValid = false;

    m_discovery_job_arn_isSet = false;
    m_discovery_job_arn_isValid = false;

    m_collection_duration_minutes_isSet = false;
    m_collection_duration_minutes_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_job_start_time_isSet = false;
    m_job_start_time_isValid = false;

    m_job_end_time_isSet = false;
    m_job_end_time_isValid = false;
}

void OAIDescribeDiscoveryJobResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDiscoveryJobResponse::fromJsonObject(QJsonObject json) {

    m_storage_system_arn_isValid = ::OpenAPI::fromJsonValue(m_storage_system_arn, json[QString("StorageSystemArn")]);
    m_storage_system_arn_isSet = !json[QString("StorageSystemArn")].isNull() && m_storage_system_arn_isValid;

    m_discovery_job_arn_isValid = ::OpenAPI::fromJsonValue(m_discovery_job_arn, json[QString("DiscoveryJobArn")]);
    m_discovery_job_arn_isSet = !json[QString("DiscoveryJobArn")].isNull() && m_discovery_job_arn_isValid;

    m_collection_duration_minutes_isValid = ::OpenAPI::fromJsonValue(m_collection_duration_minutes, json[QString("CollectionDurationMinutes")]);
    m_collection_duration_minutes_isSet = !json[QString("CollectionDurationMinutes")].isNull() && m_collection_duration_minutes_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_job_start_time_isValid = ::OpenAPI::fromJsonValue(m_job_start_time, json[QString("JobStartTime")]);
    m_job_start_time_isSet = !json[QString("JobStartTime")].isNull() && m_job_start_time_isValid;

    m_job_end_time_isValid = ::OpenAPI::fromJsonValue(m_job_end_time, json[QString("JobEndTime")]);
    m_job_end_time_isSet = !json[QString("JobEndTime")].isNull() && m_job_end_time_isValid;
}

QString OAIDescribeDiscoveryJobResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDiscoveryJobResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_storage_system_arn_isSet) {
        obj.insert(QString("StorageSystemArn"), ::OpenAPI::toJsonValue(m_storage_system_arn));
    }
    if (m_discovery_job_arn_isSet) {
        obj.insert(QString("DiscoveryJobArn"), ::OpenAPI::toJsonValue(m_discovery_job_arn));
    }
    if (m_collection_duration_minutes_isSet) {
        obj.insert(QString("CollectionDurationMinutes"), ::OpenAPI::toJsonValue(m_collection_duration_minutes));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_job_start_time_isSet) {
        obj.insert(QString("JobStartTime"), ::OpenAPI::toJsonValue(m_job_start_time));
    }
    if (m_job_end_time_isSet) {
        obj.insert(QString("JobEndTime"), ::OpenAPI::toJsonValue(m_job_end_time));
    }
    return obj;
}

QString OAIDescribeDiscoveryJobResponse::getStorageSystemArn() const {
    return m_storage_system_arn;
}
void OAIDescribeDiscoveryJobResponse::setStorageSystemArn(const QString &storage_system_arn) {
    m_storage_system_arn = storage_system_arn;
    m_storage_system_arn_isSet = true;
}

bool OAIDescribeDiscoveryJobResponse::is_storage_system_arn_Set() const{
    return m_storage_system_arn_isSet;
}

bool OAIDescribeDiscoveryJobResponse::is_storage_system_arn_Valid() const{
    return m_storage_system_arn_isValid;
}

QString OAIDescribeDiscoveryJobResponse::getDiscoveryJobArn() const {
    return m_discovery_job_arn;
}
void OAIDescribeDiscoveryJobResponse::setDiscoveryJobArn(const QString &discovery_job_arn) {
    m_discovery_job_arn = discovery_job_arn;
    m_discovery_job_arn_isSet = true;
}

bool OAIDescribeDiscoveryJobResponse::is_discovery_job_arn_Set() const{
    return m_discovery_job_arn_isSet;
}

bool OAIDescribeDiscoveryJobResponse::is_discovery_job_arn_Valid() const{
    return m_discovery_job_arn_isValid;
}

qint32 OAIDescribeDiscoveryJobResponse::getCollectionDurationMinutes() const {
    return m_collection_duration_minutes;
}
void OAIDescribeDiscoveryJobResponse::setCollectionDurationMinutes(const qint32 &collection_duration_minutes) {
    m_collection_duration_minutes = collection_duration_minutes;
    m_collection_duration_minutes_isSet = true;
}

bool OAIDescribeDiscoveryJobResponse::is_collection_duration_minutes_Set() const{
    return m_collection_duration_minutes_isSet;
}

bool OAIDescribeDiscoveryJobResponse::is_collection_duration_minutes_Valid() const{
    return m_collection_duration_minutes_isValid;
}

OAIDiscoveryJobStatus OAIDescribeDiscoveryJobResponse::getStatus() const {
    return m_status;
}
void OAIDescribeDiscoveryJobResponse::setStatus(const OAIDiscoveryJobStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeDiscoveryJobResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeDiscoveryJobResponse::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIDescribeDiscoveryJobResponse::getJobStartTime() const {
    return m_job_start_time;
}
void OAIDescribeDiscoveryJobResponse::setJobStartTime(const QDateTime &job_start_time) {
    m_job_start_time = job_start_time;
    m_job_start_time_isSet = true;
}

bool OAIDescribeDiscoveryJobResponse::is_job_start_time_Set() const{
    return m_job_start_time_isSet;
}

bool OAIDescribeDiscoveryJobResponse::is_job_start_time_Valid() const{
    return m_job_start_time_isValid;
}

QDateTime OAIDescribeDiscoveryJobResponse::getJobEndTime() const {
    return m_job_end_time;
}
void OAIDescribeDiscoveryJobResponse::setJobEndTime(const QDateTime &job_end_time) {
    m_job_end_time = job_end_time;
    m_job_end_time_isSet = true;
}

bool OAIDescribeDiscoveryJobResponse::is_job_end_time_Set() const{
    return m_job_end_time_isSet;
}

bool OAIDescribeDiscoveryJobResponse::is_job_end_time_Valid() const{
    return m_job_end_time_isValid;
}

bool OAIDescribeDiscoveryJobResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_storage_system_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discovery_job_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_duration_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDiscoveryJobResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
