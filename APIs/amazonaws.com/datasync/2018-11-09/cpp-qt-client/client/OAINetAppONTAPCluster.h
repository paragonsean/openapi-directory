/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINetAppONTAPCluster.h
 *
 * The information that DataSync Discovery collects about an on-premises storage system cluster.
 */

#ifndef OAINetAppONTAPCluster_H
#define OAINetAppONTAPCluster_H

#include <QJsonObject>

#include "OAINetAppONTAPCluster_MaxP95Performance.h"
#include "OAIRecommendationStatus.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINetAppONTAPCluster_MaxP95Performance;

class OAINetAppONTAPCluster : public OAIObject {
public:
    OAINetAppONTAPCluster();
    OAINetAppONTAPCluster(QString json);
    ~OAINetAppONTAPCluster() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCifsShareCount() const;
    void setCifsShareCount(const qint32 &cifs_share_count);
    bool is_cifs_share_count_Set() const;
    bool is_cifs_share_count_Valid() const;

    qint32 getNfsExportedVolumes() const;
    void setNfsExportedVolumes(const qint32 &nfs_exported_volumes);
    bool is_nfs_exported_volumes_Set() const;
    bool is_nfs_exported_volumes_Valid() const;

    QString getResourceId() const;
    void setResourceId(const QString &resource_id);
    bool is_resource_id_Set() const;
    bool is_resource_id_Valid() const;

    QString getClusterName() const;
    void setClusterName(const QString &cluster_name);
    bool is_cluster_name_Set() const;
    bool is_cluster_name_Valid() const;

    OAINetAppONTAPCluster_MaxP95Performance getMaxP95Performance() const;
    void setMaxP95Performance(const OAINetAppONTAPCluster_MaxP95Performance &max_p95_performance);
    bool is_max_p95_performance_Set() const;
    bool is_max_p95_performance_Valid() const;

    qint32 getClusterBlockStorageSize() const;
    void setClusterBlockStorageSize(const qint32 &cluster_block_storage_size);
    bool is_cluster_block_storage_size_Set() const;
    bool is_cluster_block_storage_size_Valid() const;

    qint32 getClusterBlockStorageUsed() const;
    void setClusterBlockStorageUsed(const qint32 &cluster_block_storage_used);
    bool is_cluster_block_storage_used_Set() const;
    bool is_cluster_block_storage_used_Valid() const;

    qint32 getClusterBlockStorageLogicalUsed() const;
    void setClusterBlockStorageLogicalUsed(const qint32 &cluster_block_storage_logical_used);
    bool is_cluster_block_storage_logical_used_Set() const;
    bool is_cluster_block_storage_logical_used_Valid() const;

    QList getRecommendations() const;
    void setRecommendations(const QList &recommendations);
    bool is_recommendations_Set() const;
    bool is_recommendations_Valid() const;

    OAIRecommendationStatus getRecommendationStatus() const;
    void setRecommendationStatus(const OAIRecommendationStatus &recommendation_status);
    bool is_recommendation_status_Set() const;
    bool is_recommendation_status_Valid() const;

    qint32 getLunCount() const;
    void setLunCount(const qint32 &lun_count);
    bool is_lun_count_Set() const;
    bool is_lun_count_Valid() const;

    qint32 getClusterCloudStorageUsed() const;
    void setClusterCloudStorageUsed(const qint32 &cluster_cloud_storage_used);
    bool is_cluster_cloud_storage_used_Set() const;
    bool is_cluster_cloud_storage_used_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_cifs_share_count;
    bool m_cifs_share_count_isSet;
    bool m_cifs_share_count_isValid;

    qint32 m_nfs_exported_volumes;
    bool m_nfs_exported_volumes_isSet;
    bool m_nfs_exported_volumes_isValid;

    QString m_resource_id;
    bool m_resource_id_isSet;
    bool m_resource_id_isValid;

    QString m_cluster_name;
    bool m_cluster_name_isSet;
    bool m_cluster_name_isValid;

    OAINetAppONTAPCluster_MaxP95Performance m_max_p95_performance;
    bool m_max_p95_performance_isSet;
    bool m_max_p95_performance_isValid;

    qint32 m_cluster_block_storage_size;
    bool m_cluster_block_storage_size_isSet;
    bool m_cluster_block_storage_size_isValid;

    qint32 m_cluster_block_storage_used;
    bool m_cluster_block_storage_used_isSet;
    bool m_cluster_block_storage_used_isValid;

    qint32 m_cluster_block_storage_logical_used;
    bool m_cluster_block_storage_logical_used_isSet;
    bool m_cluster_block_storage_logical_used_isValid;

    QList m_recommendations;
    bool m_recommendations_isSet;
    bool m_recommendations_isValid;

    OAIRecommendationStatus m_recommendation_status;
    bool m_recommendation_status_isSet;
    bool m_recommendation_status_isValid;

    qint32 m_lun_count;
    bool m_lun_count_isSet;
    bool m_lun_count_isValid;

    qint32 m_cluster_cloud_storage_used;
    bool m_cluster_cloud_storage_used_isSet;
    bool m_cluster_cloud_storage_used_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINetAppONTAPCluster)

#endif // OAINetAppONTAPCluster_H
