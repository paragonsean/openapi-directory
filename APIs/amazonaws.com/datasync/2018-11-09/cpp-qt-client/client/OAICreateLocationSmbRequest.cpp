/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLocationSmbRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLocationSmbRequest::OAICreateLocationSmbRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLocationSmbRequest::OAICreateLocationSmbRequest() {
    this->initializeModel();
}

OAICreateLocationSmbRequest::~OAICreateLocationSmbRequest() {}

void OAICreateLocationSmbRequest::initializeModel() {

    m_subdirectory_isSet = false;
    m_subdirectory_isValid = false;

    m_server_hostname_isSet = false;
    m_server_hostname_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_agent_arns_isSet = false;
    m_agent_arns_isValid = false;

    m_mount_options_isSet = false;
    m_mount_options_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateLocationSmbRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLocationSmbRequest::fromJsonObject(QJsonObject json) {

    m_subdirectory_isValid = ::OpenAPI::fromJsonValue(m_subdirectory, json[QString("Subdirectory")]);
    m_subdirectory_isSet = !json[QString("Subdirectory")].isNull() && m_subdirectory_isValid;

    m_server_hostname_isValid = ::OpenAPI::fromJsonValue(m_server_hostname, json[QString("ServerHostname")]);
    m_server_hostname_isSet = !json[QString("ServerHostname")].isNull() && m_server_hostname_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("User")]);
    m_user_isSet = !json[QString("User")].isNull() && m_user_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("Password")]);
    m_password_isSet = !json[QString("Password")].isNull() && m_password_isValid;

    m_agent_arns_isValid = ::OpenAPI::fromJsonValue(m_agent_arns, json[QString("AgentArns")]);
    m_agent_arns_isSet = !json[QString("AgentArns")].isNull() && m_agent_arns_isValid;

    m_mount_options_isValid = ::OpenAPI::fromJsonValue(m_mount_options, json[QString("MountOptions")]);
    m_mount_options_isSet = !json[QString("MountOptions")].isNull() && m_mount_options_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateLocationSmbRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLocationSmbRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_subdirectory_isSet) {
        obj.insert(QString("Subdirectory"), ::OpenAPI::toJsonValue(m_subdirectory));
    }
    if (m_server_hostname_isSet) {
        obj.insert(QString("ServerHostname"), ::OpenAPI::toJsonValue(m_server_hostname));
    }
    if (m_user_isSet) {
        obj.insert(QString("User"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_domain_isSet) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_password_isSet) {
        obj.insert(QString("Password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_agent_arns.isSet()) {
        obj.insert(QString("AgentArns"), ::OpenAPI::toJsonValue(m_agent_arns));
    }
    if (m_mount_options.isSet()) {
        obj.insert(QString("MountOptions"), ::OpenAPI::toJsonValue(m_mount_options));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateLocationSmbRequest::getSubdirectory() const {
    return m_subdirectory;
}
void OAICreateLocationSmbRequest::setSubdirectory(const QString &subdirectory) {
    m_subdirectory = subdirectory;
    m_subdirectory_isSet = true;
}

bool OAICreateLocationSmbRequest::is_subdirectory_Set() const{
    return m_subdirectory_isSet;
}

bool OAICreateLocationSmbRequest::is_subdirectory_Valid() const{
    return m_subdirectory_isValid;
}

QString OAICreateLocationSmbRequest::getServerHostname() const {
    return m_server_hostname;
}
void OAICreateLocationSmbRequest::setServerHostname(const QString &server_hostname) {
    m_server_hostname = server_hostname;
    m_server_hostname_isSet = true;
}

bool OAICreateLocationSmbRequest::is_server_hostname_Set() const{
    return m_server_hostname_isSet;
}

bool OAICreateLocationSmbRequest::is_server_hostname_Valid() const{
    return m_server_hostname_isValid;
}

QString OAICreateLocationSmbRequest::getUser() const {
    return m_user;
}
void OAICreateLocationSmbRequest::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAICreateLocationSmbRequest::is_user_Set() const{
    return m_user_isSet;
}

bool OAICreateLocationSmbRequest::is_user_Valid() const{
    return m_user_isValid;
}

QString OAICreateLocationSmbRequest::getDomain() const {
    return m_domain;
}
void OAICreateLocationSmbRequest::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAICreateLocationSmbRequest::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAICreateLocationSmbRequest::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAICreateLocationSmbRequest::getPassword() const {
    return m_password;
}
void OAICreateLocationSmbRequest::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAICreateLocationSmbRequest::is_password_Set() const{
    return m_password_isSet;
}

bool OAICreateLocationSmbRequest::is_password_Valid() const{
    return m_password_isValid;
}

QList OAICreateLocationSmbRequest::getAgentArns() const {
    return m_agent_arns;
}
void OAICreateLocationSmbRequest::setAgentArns(const QList &agent_arns) {
    m_agent_arns = agent_arns;
    m_agent_arns_isSet = true;
}

bool OAICreateLocationSmbRequest::is_agent_arns_Set() const{
    return m_agent_arns_isSet;
}

bool OAICreateLocationSmbRequest::is_agent_arns_Valid() const{
    return m_agent_arns_isValid;
}

OAICreateLocationSmbRequest_MountOptions OAICreateLocationSmbRequest::getMountOptions() const {
    return m_mount_options;
}
void OAICreateLocationSmbRequest::setMountOptions(const OAICreateLocationSmbRequest_MountOptions &mount_options) {
    m_mount_options = mount_options;
    m_mount_options_isSet = true;
}

bool OAICreateLocationSmbRequest::is_mount_options_Set() const{
    return m_mount_options_isSet;
}

bool OAICreateLocationSmbRequest::is_mount_options_Valid() const{
    return m_mount_options_isValid;
}

QList OAICreateLocationSmbRequest::getTags() const {
    return m_tags;
}
void OAICreateLocationSmbRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateLocationSmbRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateLocationSmbRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateLocationSmbRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_subdirectory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mount_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLocationSmbRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_subdirectory_isValid && m_server_hostname_isValid && m_user_isValid && m_password_isValid && m_agent_arns_isValid && true;
}

} // namespace OpenAPI
