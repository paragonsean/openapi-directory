/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateLocationObjectStorageRequest.h
 *
 * CreateLocationObjectStorageRequest
 */

#ifndef OAICreateLocationObjectStorageRequest_H
#define OAICreateLocationObjectStorageRequest_H

#include <QJsonObject>

#include "OAIObjectStorageServerProtocol.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateLocationObjectStorageRequest : public OAIObject {
public:
    OAICreateLocationObjectStorageRequest();
    OAICreateLocationObjectStorageRequest(QString json);
    ~OAICreateLocationObjectStorageRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getServerHostname() const;
    void setServerHostname(const QString &server_hostname);
    bool is_server_hostname_Set() const;
    bool is_server_hostname_Valid() const;

    qint32 getServerPort() const;
    void setServerPort(const qint32 &server_port);
    bool is_server_port_Set() const;
    bool is_server_port_Valid() const;

    OAIObjectStorageServerProtocol getServerProtocol() const;
    void setServerProtocol(const OAIObjectStorageServerProtocol &server_protocol);
    bool is_server_protocol_Set() const;
    bool is_server_protocol_Valid() const;

    QString getSubdirectory() const;
    void setSubdirectory(const QString &subdirectory);
    bool is_subdirectory_Set() const;
    bool is_subdirectory_Valid() const;

    QString getBucketName() const;
    void setBucketName(const QString &bucket_name);
    bool is_bucket_name_Set() const;
    bool is_bucket_name_Valid() const;

    QString getAccessKey() const;
    void setAccessKey(const QString &access_key);
    bool is_access_key_Set() const;
    bool is_access_key_Valid() const;

    QString getSecretKey() const;
    void setSecretKey(const QString &secret_key);
    bool is_secret_key_Set() const;
    bool is_secret_key_Valid() const;

    QList getAgentArns() const;
    void setAgentArns(const QList &agent_arns);
    bool is_agent_arns_Set() const;
    bool is_agent_arns_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getServerCertificate() const;
    void setServerCertificate(const QString &server_certificate);
    bool is_server_certificate_Set() const;
    bool is_server_certificate_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_server_hostname;
    bool m_server_hostname_isSet;
    bool m_server_hostname_isValid;

    qint32 m_server_port;
    bool m_server_port_isSet;
    bool m_server_port_isValid;

    OAIObjectStorageServerProtocol m_server_protocol;
    bool m_server_protocol_isSet;
    bool m_server_protocol_isValid;

    QString m_subdirectory;
    bool m_subdirectory_isSet;
    bool m_subdirectory_isValid;

    QString m_bucket_name;
    bool m_bucket_name_isSet;
    bool m_bucket_name_isValid;

    QString m_access_key;
    bool m_access_key_isSet;
    bool m_access_key_isValid;

    QString m_secret_key;
    bool m_secret_key_isSet;
    bool m_secret_key_isValid;

    QList m_agent_arns;
    bool m_agent_arns_isSet;
    bool m_agent_arns_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_server_certificate;
    bool m_server_certificate_isSet;
    bool m_server_certificate_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateLocationObjectStorageRequest)

#endif // OAICreateLocationObjectStorageRequest_H
