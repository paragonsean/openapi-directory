/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeLocationAzureBlobResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeLocationAzureBlobResponse::OAIDescribeLocationAzureBlobResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeLocationAzureBlobResponse::OAIDescribeLocationAzureBlobResponse() {
    this->initializeModel();
}

OAIDescribeLocationAzureBlobResponse::~OAIDescribeLocationAzureBlobResponse() {}

void OAIDescribeLocationAzureBlobResponse::initializeModel() {

    m_location_arn_isSet = false;
    m_location_arn_isValid = false;

    m_location_uri_isSet = false;
    m_location_uri_isValid = false;

    m_authentication_type_isSet = false;
    m_authentication_type_isValid = false;

    m_blob_type_isSet = false;
    m_blob_type_isValid = false;

    m_access_tier_isSet = false;
    m_access_tier_isValid = false;

    m_agent_arns_isSet = false;
    m_agent_arns_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;
}

void OAIDescribeLocationAzureBlobResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeLocationAzureBlobResponse::fromJsonObject(QJsonObject json) {

    m_location_arn_isValid = ::OpenAPI::fromJsonValue(m_location_arn, json[QString("LocationArn")]);
    m_location_arn_isSet = !json[QString("LocationArn")].isNull() && m_location_arn_isValid;

    m_location_uri_isValid = ::OpenAPI::fromJsonValue(m_location_uri, json[QString("LocationUri")]);
    m_location_uri_isSet = !json[QString("LocationUri")].isNull() && m_location_uri_isValid;

    m_authentication_type_isValid = ::OpenAPI::fromJsonValue(m_authentication_type, json[QString("AuthenticationType")]);
    m_authentication_type_isSet = !json[QString("AuthenticationType")].isNull() && m_authentication_type_isValid;

    m_blob_type_isValid = ::OpenAPI::fromJsonValue(m_blob_type, json[QString("BlobType")]);
    m_blob_type_isSet = !json[QString("BlobType")].isNull() && m_blob_type_isValid;

    m_access_tier_isValid = ::OpenAPI::fromJsonValue(m_access_tier, json[QString("AccessTier")]);
    m_access_tier_isSet = !json[QString("AccessTier")].isNull() && m_access_tier_isValid;

    m_agent_arns_isValid = ::OpenAPI::fromJsonValue(m_agent_arns, json[QString("AgentArns")]);
    m_agent_arns_isSet = !json[QString("AgentArns")].isNull() && m_agent_arns_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;
}

QString OAIDescribeLocationAzureBlobResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeLocationAzureBlobResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_location_arn_isSet) {
        obj.insert(QString("LocationArn"), ::OpenAPI::toJsonValue(m_location_arn));
    }
    if (m_location_uri_isSet) {
        obj.insert(QString("LocationUri"), ::OpenAPI::toJsonValue(m_location_uri));
    }
    if (m_authentication_type.isSet()) {
        obj.insert(QString("AuthenticationType"), ::OpenAPI::toJsonValue(m_authentication_type));
    }
    if (m_blob_type.isSet()) {
        obj.insert(QString("BlobType"), ::OpenAPI::toJsonValue(m_blob_type));
    }
    if (m_access_tier.isSet()) {
        obj.insert(QString("AccessTier"), ::OpenAPI::toJsonValue(m_access_tier));
    }
    if (m_agent_arns.isSet()) {
        obj.insert(QString("AgentArns"), ::OpenAPI::toJsonValue(m_agent_arns));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    return obj;
}

QString OAIDescribeLocationAzureBlobResponse::getLocationArn() const {
    return m_location_arn;
}
void OAIDescribeLocationAzureBlobResponse::setLocationArn(const QString &location_arn) {
    m_location_arn = location_arn;
    m_location_arn_isSet = true;
}

bool OAIDescribeLocationAzureBlobResponse::is_location_arn_Set() const{
    return m_location_arn_isSet;
}

bool OAIDescribeLocationAzureBlobResponse::is_location_arn_Valid() const{
    return m_location_arn_isValid;
}

QString OAIDescribeLocationAzureBlobResponse::getLocationUri() const {
    return m_location_uri;
}
void OAIDescribeLocationAzureBlobResponse::setLocationUri(const QString &location_uri) {
    m_location_uri = location_uri;
    m_location_uri_isSet = true;
}

bool OAIDescribeLocationAzureBlobResponse::is_location_uri_Set() const{
    return m_location_uri_isSet;
}

bool OAIDescribeLocationAzureBlobResponse::is_location_uri_Valid() const{
    return m_location_uri_isValid;
}

OAIAzureBlobAuthenticationType OAIDescribeLocationAzureBlobResponse::getAuthenticationType() const {
    return m_authentication_type;
}
void OAIDescribeLocationAzureBlobResponse::setAuthenticationType(const OAIAzureBlobAuthenticationType &authentication_type) {
    m_authentication_type = authentication_type;
    m_authentication_type_isSet = true;
}

bool OAIDescribeLocationAzureBlobResponse::is_authentication_type_Set() const{
    return m_authentication_type_isSet;
}

bool OAIDescribeLocationAzureBlobResponse::is_authentication_type_Valid() const{
    return m_authentication_type_isValid;
}

OAIAzureBlobType OAIDescribeLocationAzureBlobResponse::getBlobType() const {
    return m_blob_type;
}
void OAIDescribeLocationAzureBlobResponse::setBlobType(const OAIAzureBlobType &blob_type) {
    m_blob_type = blob_type;
    m_blob_type_isSet = true;
}

bool OAIDescribeLocationAzureBlobResponse::is_blob_type_Set() const{
    return m_blob_type_isSet;
}

bool OAIDescribeLocationAzureBlobResponse::is_blob_type_Valid() const{
    return m_blob_type_isValid;
}

OAIAzureAccessTier OAIDescribeLocationAzureBlobResponse::getAccessTier() const {
    return m_access_tier;
}
void OAIDescribeLocationAzureBlobResponse::setAccessTier(const OAIAzureAccessTier &access_tier) {
    m_access_tier = access_tier;
    m_access_tier_isSet = true;
}

bool OAIDescribeLocationAzureBlobResponse::is_access_tier_Set() const{
    return m_access_tier_isSet;
}

bool OAIDescribeLocationAzureBlobResponse::is_access_tier_Valid() const{
    return m_access_tier_isValid;
}

QList OAIDescribeLocationAzureBlobResponse::getAgentArns() const {
    return m_agent_arns;
}
void OAIDescribeLocationAzureBlobResponse::setAgentArns(const QList &agent_arns) {
    m_agent_arns = agent_arns;
    m_agent_arns_isSet = true;
}

bool OAIDescribeLocationAzureBlobResponse::is_agent_arns_Set() const{
    return m_agent_arns_isSet;
}

bool OAIDescribeLocationAzureBlobResponse::is_agent_arns_Valid() const{
    return m_agent_arns_isValid;
}

QDateTime OAIDescribeLocationAzureBlobResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeLocationAzureBlobResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeLocationAzureBlobResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeLocationAzureBlobResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

bool OAIDescribeLocationAzureBlobResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_blob_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_tier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeLocationAzureBlobResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
