/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetAppONTAPCluster.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetAppONTAPCluster::OAINetAppONTAPCluster(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetAppONTAPCluster::OAINetAppONTAPCluster() {
    this->initializeModel();
}

OAINetAppONTAPCluster::~OAINetAppONTAPCluster() {}

void OAINetAppONTAPCluster::initializeModel() {

    m_cifs_share_count_isSet = false;
    m_cifs_share_count_isValid = false;

    m_nfs_exported_volumes_isSet = false;
    m_nfs_exported_volumes_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_cluster_name_isSet = false;
    m_cluster_name_isValid = false;

    m_max_p95_performance_isSet = false;
    m_max_p95_performance_isValid = false;

    m_cluster_block_storage_size_isSet = false;
    m_cluster_block_storage_size_isValid = false;

    m_cluster_block_storage_used_isSet = false;
    m_cluster_block_storage_used_isValid = false;

    m_cluster_block_storage_logical_used_isSet = false;
    m_cluster_block_storage_logical_used_isValid = false;

    m_recommendations_isSet = false;
    m_recommendations_isValid = false;

    m_recommendation_status_isSet = false;
    m_recommendation_status_isValid = false;

    m_lun_count_isSet = false;
    m_lun_count_isValid = false;

    m_cluster_cloud_storage_used_isSet = false;
    m_cluster_cloud_storage_used_isValid = false;
}

void OAINetAppONTAPCluster::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetAppONTAPCluster::fromJsonObject(QJsonObject json) {

    m_cifs_share_count_isValid = ::OpenAPI::fromJsonValue(m_cifs_share_count, json[QString("CifsShareCount")]);
    m_cifs_share_count_isSet = !json[QString("CifsShareCount")].isNull() && m_cifs_share_count_isValid;

    m_nfs_exported_volumes_isValid = ::OpenAPI::fromJsonValue(m_nfs_exported_volumes, json[QString("NfsExportedVolumes")]);
    m_nfs_exported_volumes_isSet = !json[QString("NfsExportedVolumes")].isNull() && m_nfs_exported_volumes_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("ResourceId")]);
    m_resource_id_isSet = !json[QString("ResourceId")].isNull() && m_resource_id_isValid;

    m_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_name, json[QString("ClusterName")]);
    m_cluster_name_isSet = !json[QString("ClusterName")].isNull() && m_cluster_name_isValid;

    m_max_p95_performance_isValid = ::OpenAPI::fromJsonValue(m_max_p95_performance, json[QString("MaxP95Performance")]);
    m_max_p95_performance_isSet = !json[QString("MaxP95Performance")].isNull() && m_max_p95_performance_isValid;

    m_cluster_block_storage_size_isValid = ::OpenAPI::fromJsonValue(m_cluster_block_storage_size, json[QString("ClusterBlockStorageSize")]);
    m_cluster_block_storage_size_isSet = !json[QString("ClusterBlockStorageSize")].isNull() && m_cluster_block_storage_size_isValid;

    m_cluster_block_storage_used_isValid = ::OpenAPI::fromJsonValue(m_cluster_block_storage_used, json[QString("ClusterBlockStorageUsed")]);
    m_cluster_block_storage_used_isSet = !json[QString("ClusterBlockStorageUsed")].isNull() && m_cluster_block_storage_used_isValid;

    m_cluster_block_storage_logical_used_isValid = ::OpenAPI::fromJsonValue(m_cluster_block_storage_logical_used, json[QString("ClusterBlockStorageLogicalUsed")]);
    m_cluster_block_storage_logical_used_isSet = !json[QString("ClusterBlockStorageLogicalUsed")].isNull() && m_cluster_block_storage_logical_used_isValid;

    m_recommendations_isValid = ::OpenAPI::fromJsonValue(m_recommendations, json[QString("Recommendations")]);
    m_recommendations_isSet = !json[QString("Recommendations")].isNull() && m_recommendations_isValid;

    m_recommendation_status_isValid = ::OpenAPI::fromJsonValue(m_recommendation_status, json[QString("RecommendationStatus")]);
    m_recommendation_status_isSet = !json[QString("RecommendationStatus")].isNull() && m_recommendation_status_isValid;

    m_lun_count_isValid = ::OpenAPI::fromJsonValue(m_lun_count, json[QString("LunCount")]);
    m_lun_count_isSet = !json[QString("LunCount")].isNull() && m_lun_count_isValid;

    m_cluster_cloud_storage_used_isValid = ::OpenAPI::fromJsonValue(m_cluster_cloud_storage_used, json[QString("ClusterCloudStorageUsed")]);
    m_cluster_cloud_storage_used_isSet = !json[QString("ClusterCloudStorageUsed")].isNull() && m_cluster_cloud_storage_used_isValid;
}

QString OAINetAppONTAPCluster::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetAppONTAPCluster::asJsonObject() const {
    QJsonObject obj;
    if (m_cifs_share_count_isSet) {
        obj.insert(QString("CifsShareCount"), ::OpenAPI::toJsonValue(m_cifs_share_count));
    }
    if (m_nfs_exported_volumes_isSet) {
        obj.insert(QString("NfsExportedVolumes"), ::OpenAPI::toJsonValue(m_nfs_exported_volumes));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("ResourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_cluster_name_isSet) {
        obj.insert(QString("ClusterName"), ::OpenAPI::toJsonValue(m_cluster_name));
    }
    if (m_max_p95_performance.isSet()) {
        obj.insert(QString("MaxP95Performance"), ::OpenAPI::toJsonValue(m_max_p95_performance));
    }
    if (m_cluster_block_storage_size_isSet) {
        obj.insert(QString("ClusterBlockStorageSize"), ::OpenAPI::toJsonValue(m_cluster_block_storage_size));
    }
    if (m_cluster_block_storage_used_isSet) {
        obj.insert(QString("ClusterBlockStorageUsed"), ::OpenAPI::toJsonValue(m_cluster_block_storage_used));
    }
    if (m_cluster_block_storage_logical_used_isSet) {
        obj.insert(QString("ClusterBlockStorageLogicalUsed"), ::OpenAPI::toJsonValue(m_cluster_block_storage_logical_used));
    }
    if (m_recommendations.isSet()) {
        obj.insert(QString("Recommendations"), ::OpenAPI::toJsonValue(m_recommendations));
    }
    if (m_recommendation_status.isSet()) {
        obj.insert(QString("RecommendationStatus"), ::OpenAPI::toJsonValue(m_recommendation_status));
    }
    if (m_lun_count_isSet) {
        obj.insert(QString("LunCount"), ::OpenAPI::toJsonValue(m_lun_count));
    }
    if (m_cluster_cloud_storage_used_isSet) {
        obj.insert(QString("ClusterCloudStorageUsed"), ::OpenAPI::toJsonValue(m_cluster_cloud_storage_used));
    }
    return obj;
}

qint32 OAINetAppONTAPCluster::getCifsShareCount() const {
    return m_cifs_share_count;
}
void OAINetAppONTAPCluster::setCifsShareCount(const qint32 &cifs_share_count) {
    m_cifs_share_count = cifs_share_count;
    m_cifs_share_count_isSet = true;
}

bool OAINetAppONTAPCluster::is_cifs_share_count_Set() const{
    return m_cifs_share_count_isSet;
}

bool OAINetAppONTAPCluster::is_cifs_share_count_Valid() const{
    return m_cifs_share_count_isValid;
}

qint32 OAINetAppONTAPCluster::getNfsExportedVolumes() const {
    return m_nfs_exported_volumes;
}
void OAINetAppONTAPCluster::setNfsExportedVolumes(const qint32 &nfs_exported_volumes) {
    m_nfs_exported_volumes = nfs_exported_volumes;
    m_nfs_exported_volumes_isSet = true;
}

bool OAINetAppONTAPCluster::is_nfs_exported_volumes_Set() const{
    return m_nfs_exported_volumes_isSet;
}

bool OAINetAppONTAPCluster::is_nfs_exported_volumes_Valid() const{
    return m_nfs_exported_volumes_isValid;
}

QString OAINetAppONTAPCluster::getResourceId() const {
    return m_resource_id;
}
void OAINetAppONTAPCluster::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAINetAppONTAPCluster::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAINetAppONTAPCluster::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAINetAppONTAPCluster::getClusterName() const {
    return m_cluster_name;
}
void OAINetAppONTAPCluster::setClusterName(const QString &cluster_name) {
    m_cluster_name = cluster_name;
    m_cluster_name_isSet = true;
}

bool OAINetAppONTAPCluster::is_cluster_name_Set() const{
    return m_cluster_name_isSet;
}

bool OAINetAppONTAPCluster::is_cluster_name_Valid() const{
    return m_cluster_name_isValid;
}

OAINetAppONTAPCluster_MaxP95Performance OAINetAppONTAPCluster::getMaxP95Performance() const {
    return m_max_p95_performance;
}
void OAINetAppONTAPCluster::setMaxP95Performance(const OAINetAppONTAPCluster_MaxP95Performance &max_p95_performance) {
    m_max_p95_performance = max_p95_performance;
    m_max_p95_performance_isSet = true;
}

bool OAINetAppONTAPCluster::is_max_p95_performance_Set() const{
    return m_max_p95_performance_isSet;
}

bool OAINetAppONTAPCluster::is_max_p95_performance_Valid() const{
    return m_max_p95_performance_isValid;
}

qint32 OAINetAppONTAPCluster::getClusterBlockStorageSize() const {
    return m_cluster_block_storage_size;
}
void OAINetAppONTAPCluster::setClusterBlockStorageSize(const qint32 &cluster_block_storage_size) {
    m_cluster_block_storage_size = cluster_block_storage_size;
    m_cluster_block_storage_size_isSet = true;
}

bool OAINetAppONTAPCluster::is_cluster_block_storage_size_Set() const{
    return m_cluster_block_storage_size_isSet;
}

bool OAINetAppONTAPCluster::is_cluster_block_storage_size_Valid() const{
    return m_cluster_block_storage_size_isValid;
}

qint32 OAINetAppONTAPCluster::getClusterBlockStorageUsed() const {
    return m_cluster_block_storage_used;
}
void OAINetAppONTAPCluster::setClusterBlockStorageUsed(const qint32 &cluster_block_storage_used) {
    m_cluster_block_storage_used = cluster_block_storage_used;
    m_cluster_block_storage_used_isSet = true;
}

bool OAINetAppONTAPCluster::is_cluster_block_storage_used_Set() const{
    return m_cluster_block_storage_used_isSet;
}

bool OAINetAppONTAPCluster::is_cluster_block_storage_used_Valid() const{
    return m_cluster_block_storage_used_isValid;
}

qint32 OAINetAppONTAPCluster::getClusterBlockStorageLogicalUsed() const {
    return m_cluster_block_storage_logical_used;
}
void OAINetAppONTAPCluster::setClusterBlockStorageLogicalUsed(const qint32 &cluster_block_storage_logical_used) {
    m_cluster_block_storage_logical_used = cluster_block_storage_logical_used;
    m_cluster_block_storage_logical_used_isSet = true;
}

bool OAINetAppONTAPCluster::is_cluster_block_storage_logical_used_Set() const{
    return m_cluster_block_storage_logical_used_isSet;
}

bool OAINetAppONTAPCluster::is_cluster_block_storage_logical_used_Valid() const{
    return m_cluster_block_storage_logical_used_isValid;
}

QList OAINetAppONTAPCluster::getRecommendations() const {
    return m_recommendations;
}
void OAINetAppONTAPCluster::setRecommendations(const QList &recommendations) {
    m_recommendations = recommendations;
    m_recommendations_isSet = true;
}

bool OAINetAppONTAPCluster::is_recommendations_Set() const{
    return m_recommendations_isSet;
}

bool OAINetAppONTAPCluster::is_recommendations_Valid() const{
    return m_recommendations_isValid;
}

OAIRecommendationStatus OAINetAppONTAPCluster::getRecommendationStatus() const {
    return m_recommendation_status;
}
void OAINetAppONTAPCluster::setRecommendationStatus(const OAIRecommendationStatus &recommendation_status) {
    m_recommendation_status = recommendation_status;
    m_recommendation_status_isSet = true;
}

bool OAINetAppONTAPCluster::is_recommendation_status_Set() const{
    return m_recommendation_status_isSet;
}

bool OAINetAppONTAPCluster::is_recommendation_status_Valid() const{
    return m_recommendation_status_isValid;
}

qint32 OAINetAppONTAPCluster::getLunCount() const {
    return m_lun_count;
}
void OAINetAppONTAPCluster::setLunCount(const qint32 &lun_count) {
    m_lun_count = lun_count;
    m_lun_count_isSet = true;
}

bool OAINetAppONTAPCluster::is_lun_count_Set() const{
    return m_lun_count_isSet;
}

bool OAINetAppONTAPCluster::is_lun_count_Valid() const{
    return m_lun_count_isValid;
}

qint32 OAINetAppONTAPCluster::getClusterCloudStorageUsed() const {
    return m_cluster_cloud_storage_used;
}
void OAINetAppONTAPCluster::setClusterCloudStorageUsed(const qint32 &cluster_cloud_storage_used) {
    m_cluster_cloud_storage_used = cluster_cloud_storage_used;
    m_cluster_cloud_storage_used_isSet = true;
}

bool OAINetAppONTAPCluster::is_cluster_cloud_storage_used_Set() const{
    return m_cluster_cloud_storage_used_isSet;
}

bool OAINetAppONTAPCluster::is_cluster_cloud_storage_used_Valid() const{
    return m_cluster_cloud_storage_used_isValid;
}

bool OAINetAppONTAPCluster::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cifs_share_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nfs_exported_volumes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_p95_performance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_block_storage_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_block_storage_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_block_storage_logical_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lun_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_cloud_storage_used_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetAppONTAPCluster::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
