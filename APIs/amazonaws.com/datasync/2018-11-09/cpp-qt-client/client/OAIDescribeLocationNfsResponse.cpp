/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeLocationNfsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeLocationNfsResponse::OAIDescribeLocationNfsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeLocationNfsResponse::OAIDescribeLocationNfsResponse() {
    this->initializeModel();
}

OAIDescribeLocationNfsResponse::~OAIDescribeLocationNfsResponse() {}

void OAIDescribeLocationNfsResponse::initializeModel() {

    m_location_arn_isSet = false;
    m_location_arn_isValid = false;

    m_location_uri_isSet = false;
    m_location_uri_isValid = false;

    m_on_prem_config_isSet = false;
    m_on_prem_config_isValid = false;

    m_mount_options_isSet = false;
    m_mount_options_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;
}

void OAIDescribeLocationNfsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeLocationNfsResponse::fromJsonObject(QJsonObject json) {

    m_location_arn_isValid = ::OpenAPI::fromJsonValue(m_location_arn, json[QString("LocationArn")]);
    m_location_arn_isSet = !json[QString("LocationArn")].isNull() && m_location_arn_isValid;

    m_location_uri_isValid = ::OpenAPI::fromJsonValue(m_location_uri, json[QString("LocationUri")]);
    m_location_uri_isSet = !json[QString("LocationUri")].isNull() && m_location_uri_isValid;

    m_on_prem_config_isValid = ::OpenAPI::fromJsonValue(m_on_prem_config, json[QString("OnPremConfig")]);
    m_on_prem_config_isSet = !json[QString("OnPremConfig")].isNull() && m_on_prem_config_isValid;

    m_mount_options_isValid = ::OpenAPI::fromJsonValue(m_mount_options, json[QString("MountOptions")]);
    m_mount_options_isSet = !json[QString("MountOptions")].isNull() && m_mount_options_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;
}

QString OAIDescribeLocationNfsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeLocationNfsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_location_arn_isSet) {
        obj.insert(QString("LocationArn"), ::OpenAPI::toJsonValue(m_location_arn));
    }
    if (m_location_uri_isSet) {
        obj.insert(QString("LocationUri"), ::OpenAPI::toJsonValue(m_location_uri));
    }
    if (m_on_prem_config.isSet()) {
        obj.insert(QString("OnPremConfig"), ::OpenAPI::toJsonValue(m_on_prem_config));
    }
    if (m_mount_options.isSet()) {
        obj.insert(QString("MountOptions"), ::OpenAPI::toJsonValue(m_mount_options));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    return obj;
}

QString OAIDescribeLocationNfsResponse::getLocationArn() const {
    return m_location_arn;
}
void OAIDescribeLocationNfsResponse::setLocationArn(const QString &location_arn) {
    m_location_arn = location_arn;
    m_location_arn_isSet = true;
}

bool OAIDescribeLocationNfsResponse::is_location_arn_Set() const{
    return m_location_arn_isSet;
}

bool OAIDescribeLocationNfsResponse::is_location_arn_Valid() const{
    return m_location_arn_isValid;
}

QString OAIDescribeLocationNfsResponse::getLocationUri() const {
    return m_location_uri;
}
void OAIDescribeLocationNfsResponse::setLocationUri(const QString &location_uri) {
    m_location_uri = location_uri;
    m_location_uri_isSet = true;
}

bool OAIDescribeLocationNfsResponse::is_location_uri_Set() const{
    return m_location_uri_isSet;
}

bool OAIDescribeLocationNfsResponse::is_location_uri_Valid() const{
    return m_location_uri_isValid;
}

OAIOnPremConfig OAIDescribeLocationNfsResponse::getOnPremConfig() const {
    return m_on_prem_config;
}
void OAIDescribeLocationNfsResponse::setOnPremConfig(const OAIOnPremConfig &on_prem_config) {
    m_on_prem_config = on_prem_config;
    m_on_prem_config_isSet = true;
}

bool OAIDescribeLocationNfsResponse::is_on_prem_config_Set() const{
    return m_on_prem_config_isSet;
}

bool OAIDescribeLocationNfsResponse::is_on_prem_config_Valid() const{
    return m_on_prem_config_isValid;
}

OAIDescribeLocationNfsResponse_MountOptions OAIDescribeLocationNfsResponse::getMountOptions() const {
    return m_mount_options;
}
void OAIDescribeLocationNfsResponse::setMountOptions(const OAIDescribeLocationNfsResponse_MountOptions &mount_options) {
    m_mount_options = mount_options;
    m_mount_options_isSet = true;
}

bool OAIDescribeLocationNfsResponse::is_mount_options_Set() const{
    return m_mount_options_isSet;
}

bool OAIDescribeLocationNfsResponse::is_mount_options_Valid() const{
    return m_mount_options_isValid;
}

QDateTime OAIDescribeLocationNfsResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeLocationNfsResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeLocationNfsResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeLocationNfsResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

bool OAIDescribeLocationNfsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_prem_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mount_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeLocationNfsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
