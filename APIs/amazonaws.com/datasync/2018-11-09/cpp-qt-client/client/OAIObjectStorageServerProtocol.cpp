/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjectStorageServerProtocol.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjectStorageServerProtocol::OAIObjectStorageServerProtocol(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjectStorageServerProtocol::OAIObjectStorageServerProtocol() {
    this->initializeModel();
}

OAIObjectStorageServerProtocol::~OAIObjectStorageServerProtocol() {}

void OAIObjectStorageServerProtocol::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIObjectStorageServerProtocol::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIObjectStorageServerProtocol::fromJson(QString jsonString) {
    
    if ( jsonString.compare("HTTPS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectStorageServerProtocol::HTTPS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HTTP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIObjectStorageServerProtocol::HTTP;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIObjectStorageServerProtocol::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIObjectStorageServerProtocol::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIObjectStorageServerProtocol::HTTPS:
            val = "HTTPS";
            break;
        case eOAIObjectStorageServerProtocol::HTTP:
            val = "HTTP";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIObjectStorageServerProtocol::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIObjectStorageServerProtocol::eOAIObjectStorageServerProtocol OAIObjectStorageServerProtocol::getValue() const {
    return m_value;
}

void OAIObjectStorageServerProtocol::setValue(const OAIObjectStorageServerProtocol::eOAIObjectStorageServerProtocol& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIObjectStorageServerProtocol::isSet() const {
    
    return m_value_isSet;
}

bool OAIObjectStorageServerProtocol::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
