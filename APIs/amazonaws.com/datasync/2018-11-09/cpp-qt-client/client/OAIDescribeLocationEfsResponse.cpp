/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeLocationEfsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeLocationEfsResponse::OAIDescribeLocationEfsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeLocationEfsResponse::OAIDescribeLocationEfsResponse() {
    this->initializeModel();
}

OAIDescribeLocationEfsResponse::~OAIDescribeLocationEfsResponse() {}

void OAIDescribeLocationEfsResponse::initializeModel() {

    m_location_arn_isSet = false;
    m_location_arn_isValid = false;

    m_location_uri_isSet = false;
    m_location_uri_isValid = false;

    m_ec2_config_isSet = false;
    m_ec2_config_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_access_point_arn_isSet = false;
    m_access_point_arn_isValid = false;

    m_file_system_access_role_arn_isSet = false;
    m_file_system_access_role_arn_isValid = false;

    m_in_transit_encryption_isSet = false;
    m_in_transit_encryption_isValid = false;
}

void OAIDescribeLocationEfsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeLocationEfsResponse::fromJsonObject(QJsonObject json) {

    m_location_arn_isValid = ::OpenAPI::fromJsonValue(m_location_arn, json[QString("LocationArn")]);
    m_location_arn_isSet = !json[QString("LocationArn")].isNull() && m_location_arn_isValid;

    m_location_uri_isValid = ::OpenAPI::fromJsonValue(m_location_uri, json[QString("LocationUri")]);
    m_location_uri_isSet = !json[QString("LocationUri")].isNull() && m_location_uri_isValid;

    m_ec2_config_isValid = ::OpenAPI::fromJsonValue(m_ec2_config, json[QString("Ec2Config")]);
    m_ec2_config_isSet = !json[QString("Ec2Config")].isNull() && m_ec2_config_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_access_point_arn_isValid = ::OpenAPI::fromJsonValue(m_access_point_arn, json[QString("AccessPointArn")]);
    m_access_point_arn_isSet = !json[QString("AccessPointArn")].isNull() && m_access_point_arn_isValid;

    m_file_system_access_role_arn_isValid = ::OpenAPI::fromJsonValue(m_file_system_access_role_arn, json[QString("FileSystemAccessRoleArn")]);
    m_file_system_access_role_arn_isSet = !json[QString("FileSystemAccessRoleArn")].isNull() && m_file_system_access_role_arn_isValid;

    m_in_transit_encryption_isValid = ::OpenAPI::fromJsonValue(m_in_transit_encryption, json[QString("InTransitEncryption")]);
    m_in_transit_encryption_isSet = !json[QString("InTransitEncryption")].isNull() && m_in_transit_encryption_isValid;
}

QString OAIDescribeLocationEfsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeLocationEfsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_location_arn_isSet) {
        obj.insert(QString("LocationArn"), ::OpenAPI::toJsonValue(m_location_arn));
    }
    if (m_location_uri_isSet) {
        obj.insert(QString("LocationUri"), ::OpenAPI::toJsonValue(m_location_uri));
    }
    if (m_ec2_config.isSet()) {
        obj.insert(QString("Ec2Config"), ::OpenAPI::toJsonValue(m_ec2_config));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_access_point_arn_isSet) {
        obj.insert(QString("AccessPointArn"), ::OpenAPI::toJsonValue(m_access_point_arn));
    }
    if (m_file_system_access_role_arn_isSet) {
        obj.insert(QString("FileSystemAccessRoleArn"), ::OpenAPI::toJsonValue(m_file_system_access_role_arn));
    }
    if (m_in_transit_encryption.isSet()) {
        obj.insert(QString("InTransitEncryption"), ::OpenAPI::toJsonValue(m_in_transit_encryption));
    }
    return obj;
}

QString OAIDescribeLocationEfsResponse::getLocationArn() const {
    return m_location_arn;
}
void OAIDescribeLocationEfsResponse::setLocationArn(const QString &location_arn) {
    m_location_arn = location_arn;
    m_location_arn_isSet = true;
}

bool OAIDescribeLocationEfsResponse::is_location_arn_Set() const{
    return m_location_arn_isSet;
}

bool OAIDescribeLocationEfsResponse::is_location_arn_Valid() const{
    return m_location_arn_isValid;
}

QString OAIDescribeLocationEfsResponse::getLocationUri() const {
    return m_location_uri;
}
void OAIDescribeLocationEfsResponse::setLocationUri(const QString &location_uri) {
    m_location_uri = location_uri;
    m_location_uri_isSet = true;
}

bool OAIDescribeLocationEfsResponse::is_location_uri_Set() const{
    return m_location_uri_isSet;
}

bool OAIDescribeLocationEfsResponse::is_location_uri_Valid() const{
    return m_location_uri_isValid;
}

OAIEc2Config OAIDescribeLocationEfsResponse::getEc2Config() const {
    return m_ec2_config;
}
void OAIDescribeLocationEfsResponse::setEc2Config(const OAIEc2Config &ec2_config) {
    m_ec2_config = ec2_config;
    m_ec2_config_isSet = true;
}

bool OAIDescribeLocationEfsResponse::is_ec2_config_Set() const{
    return m_ec2_config_isSet;
}

bool OAIDescribeLocationEfsResponse::is_ec2_config_Valid() const{
    return m_ec2_config_isValid;
}

QDateTime OAIDescribeLocationEfsResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeLocationEfsResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeLocationEfsResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeLocationEfsResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIDescribeLocationEfsResponse::getAccessPointArn() const {
    return m_access_point_arn;
}
void OAIDescribeLocationEfsResponse::setAccessPointArn(const QString &access_point_arn) {
    m_access_point_arn = access_point_arn;
    m_access_point_arn_isSet = true;
}

bool OAIDescribeLocationEfsResponse::is_access_point_arn_Set() const{
    return m_access_point_arn_isSet;
}

bool OAIDescribeLocationEfsResponse::is_access_point_arn_Valid() const{
    return m_access_point_arn_isValid;
}

QString OAIDescribeLocationEfsResponse::getFileSystemAccessRoleArn() const {
    return m_file_system_access_role_arn;
}
void OAIDescribeLocationEfsResponse::setFileSystemAccessRoleArn(const QString &file_system_access_role_arn) {
    m_file_system_access_role_arn = file_system_access_role_arn;
    m_file_system_access_role_arn_isSet = true;
}

bool OAIDescribeLocationEfsResponse::is_file_system_access_role_arn_Set() const{
    return m_file_system_access_role_arn_isSet;
}

bool OAIDescribeLocationEfsResponse::is_file_system_access_role_arn_Valid() const{
    return m_file_system_access_role_arn_isValid;
}

OAIEfsInTransitEncryption OAIDescribeLocationEfsResponse::getInTransitEncryption() const {
    return m_in_transit_encryption;
}
void OAIDescribeLocationEfsResponse::setInTransitEncryption(const OAIEfsInTransitEncryption &in_transit_encryption) {
    m_in_transit_encryption = in_transit_encryption;
    m_in_transit_encryption_isSet = true;
}

bool OAIDescribeLocationEfsResponse::is_in_transit_encryption_Set() const{
    return m_in_transit_encryption_isSet;
}

bool OAIDescribeLocationEfsResponse::is_in_transit_encryption_Valid() const{
    return m_in_transit_encryption_isValid;
}

bool OAIDescribeLocationEfsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ec2_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_point_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_access_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_transit_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeLocationEfsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
