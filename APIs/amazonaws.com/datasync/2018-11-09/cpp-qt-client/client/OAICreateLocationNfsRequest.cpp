/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLocationNfsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLocationNfsRequest::OAICreateLocationNfsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLocationNfsRequest::OAICreateLocationNfsRequest() {
    this->initializeModel();
}

OAICreateLocationNfsRequest::~OAICreateLocationNfsRequest() {}

void OAICreateLocationNfsRequest::initializeModel() {

    m_subdirectory_isSet = false;
    m_subdirectory_isValid = false;

    m_server_hostname_isSet = false;
    m_server_hostname_isValid = false;

    m_on_prem_config_isSet = false;
    m_on_prem_config_isValid = false;

    m_mount_options_isSet = false;
    m_mount_options_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateLocationNfsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLocationNfsRequest::fromJsonObject(QJsonObject json) {

    m_subdirectory_isValid = ::OpenAPI::fromJsonValue(m_subdirectory, json[QString("Subdirectory")]);
    m_subdirectory_isSet = !json[QString("Subdirectory")].isNull() && m_subdirectory_isValid;

    m_server_hostname_isValid = ::OpenAPI::fromJsonValue(m_server_hostname, json[QString("ServerHostname")]);
    m_server_hostname_isSet = !json[QString("ServerHostname")].isNull() && m_server_hostname_isValid;

    m_on_prem_config_isValid = ::OpenAPI::fromJsonValue(m_on_prem_config, json[QString("OnPremConfig")]);
    m_on_prem_config_isSet = !json[QString("OnPremConfig")].isNull() && m_on_prem_config_isValid;

    m_mount_options_isValid = ::OpenAPI::fromJsonValue(m_mount_options, json[QString("MountOptions")]);
    m_mount_options_isSet = !json[QString("MountOptions")].isNull() && m_mount_options_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateLocationNfsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLocationNfsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_subdirectory_isSet) {
        obj.insert(QString("Subdirectory"), ::OpenAPI::toJsonValue(m_subdirectory));
    }
    if (m_server_hostname_isSet) {
        obj.insert(QString("ServerHostname"), ::OpenAPI::toJsonValue(m_server_hostname));
    }
    if (m_on_prem_config.isSet()) {
        obj.insert(QString("OnPremConfig"), ::OpenAPI::toJsonValue(m_on_prem_config));
    }
    if (m_mount_options.isSet()) {
        obj.insert(QString("MountOptions"), ::OpenAPI::toJsonValue(m_mount_options));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateLocationNfsRequest::getSubdirectory() const {
    return m_subdirectory;
}
void OAICreateLocationNfsRequest::setSubdirectory(const QString &subdirectory) {
    m_subdirectory = subdirectory;
    m_subdirectory_isSet = true;
}

bool OAICreateLocationNfsRequest::is_subdirectory_Set() const{
    return m_subdirectory_isSet;
}

bool OAICreateLocationNfsRequest::is_subdirectory_Valid() const{
    return m_subdirectory_isValid;
}

QString OAICreateLocationNfsRequest::getServerHostname() const {
    return m_server_hostname;
}
void OAICreateLocationNfsRequest::setServerHostname(const QString &server_hostname) {
    m_server_hostname = server_hostname;
    m_server_hostname_isSet = true;
}

bool OAICreateLocationNfsRequest::is_server_hostname_Set() const{
    return m_server_hostname_isSet;
}

bool OAICreateLocationNfsRequest::is_server_hostname_Valid() const{
    return m_server_hostname_isValid;
}

OAICreateLocationNfsRequest_OnPremConfig OAICreateLocationNfsRequest::getOnPremConfig() const {
    return m_on_prem_config;
}
void OAICreateLocationNfsRequest::setOnPremConfig(const OAICreateLocationNfsRequest_OnPremConfig &on_prem_config) {
    m_on_prem_config = on_prem_config;
    m_on_prem_config_isSet = true;
}

bool OAICreateLocationNfsRequest::is_on_prem_config_Set() const{
    return m_on_prem_config_isSet;
}

bool OAICreateLocationNfsRequest::is_on_prem_config_Valid() const{
    return m_on_prem_config_isValid;
}

OAICreateLocationNfsRequest_MountOptions OAICreateLocationNfsRequest::getMountOptions() const {
    return m_mount_options;
}
void OAICreateLocationNfsRequest::setMountOptions(const OAICreateLocationNfsRequest_MountOptions &mount_options) {
    m_mount_options = mount_options;
    m_mount_options_isSet = true;
}

bool OAICreateLocationNfsRequest::is_mount_options_Set() const{
    return m_mount_options_isSet;
}

bool OAICreateLocationNfsRequest::is_mount_options_Valid() const{
    return m_mount_options_isValid;
}

QList OAICreateLocationNfsRequest::getTags() const {
    return m_tags;
}
void OAICreateLocationNfsRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateLocationNfsRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateLocationNfsRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateLocationNfsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_subdirectory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_prem_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mount_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLocationNfsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_subdirectory_isValid && m_server_hostname_isValid && m_on_prem_config_isValid && true;
}

} // namespace OpenAPI
