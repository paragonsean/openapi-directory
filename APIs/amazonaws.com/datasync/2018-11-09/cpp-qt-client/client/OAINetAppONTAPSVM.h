/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINetAppONTAPSVM.h
 *
 * The information that DataSync Discovery collects about a storage virtual machine (SVM) in your on-premises storage system.
 */

#ifndef OAINetAppONTAPSVM_H
#define OAINetAppONTAPSVM_H

#include <QJsonObject>

#include "OAINetAppONTAPSVM_MaxP95Performance.h"
#include "OAIRecommendationStatus.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINetAppONTAPSVM_MaxP95Performance;

class OAINetAppONTAPSVM : public OAIObject {
public:
    OAINetAppONTAPSVM();
    OAINetAppONTAPSVM(QString json);
    ~OAINetAppONTAPSVM() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClusterUuid() const;
    void setClusterUuid(const QString &cluster_uuid);
    bool is_cluster_uuid_Set() const;
    bool is_cluster_uuid_Valid() const;

    QString getResourceId() const;
    void setResourceId(const QString &resource_id);
    bool is_resource_id_Set() const;
    bool is_resource_id_Valid() const;

    QString getSvmName() const;
    void setSvmName(const QString &svm_name);
    bool is_svm_name_Set() const;
    bool is_svm_name_Valid() const;

    qint32 getCifsShareCount() const;
    void setCifsShareCount(const qint32 &cifs_share_count);
    bool is_cifs_share_count_Set() const;
    bool is_cifs_share_count_Valid() const;

    QList getEnabledProtocols() const;
    void setEnabledProtocols(const QList &enabled_protocols);
    bool is_enabled_protocols_Set() const;
    bool is_enabled_protocols_Valid() const;

    qint32 getTotalCapacityUsed() const;
    void setTotalCapacityUsed(const qint32 &total_capacity_used);
    bool is_total_capacity_used_Set() const;
    bool is_total_capacity_used_Valid() const;

    qint32 getTotalCapacityProvisioned() const;
    void setTotalCapacityProvisioned(const qint32 &total_capacity_provisioned);
    bool is_total_capacity_provisioned_Set() const;
    bool is_total_capacity_provisioned_Valid() const;

    qint32 getTotalLogicalCapacityUsed() const;
    void setTotalLogicalCapacityUsed(const qint32 &total_logical_capacity_used);
    bool is_total_logical_capacity_used_Set() const;
    bool is_total_logical_capacity_used_Valid() const;

    OAINetAppONTAPSVM_MaxP95Performance getMaxP95Performance() const;
    void setMaxP95Performance(const OAINetAppONTAPSVM_MaxP95Performance &max_p95_performance);
    bool is_max_p95_performance_Set() const;
    bool is_max_p95_performance_Valid() const;

    QList getRecommendations() const;
    void setRecommendations(const QList &recommendations);
    bool is_recommendations_Set() const;
    bool is_recommendations_Valid() const;

    qint32 getNfsExportedVolumes() const;
    void setNfsExportedVolumes(const qint32 &nfs_exported_volumes);
    bool is_nfs_exported_volumes_Set() const;
    bool is_nfs_exported_volumes_Valid() const;

    OAIRecommendationStatus getRecommendationStatus() const;
    void setRecommendationStatus(const OAIRecommendationStatus &recommendation_status);
    bool is_recommendation_status_Set() const;
    bool is_recommendation_status_Valid() const;

    qint32 getTotalSnapshotCapacityUsed() const;
    void setTotalSnapshotCapacityUsed(const qint32 &total_snapshot_capacity_used);
    bool is_total_snapshot_capacity_used_Set() const;
    bool is_total_snapshot_capacity_used_Valid() const;

    qint32 getLunCount() const;
    void setLunCount(const qint32 &lun_count);
    bool is_lun_count_Set() const;
    bool is_lun_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cluster_uuid;
    bool m_cluster_uuid_isSet;
    bool m_cluster_uuid_isValid;

    QString m_resource_id;
    bool m_resource_id_isSet;
    bool m_resource_id_isValid;

    QString m_svm_name;
    bool m_svm_name_isSet;
    bool m_svm_name_isValid;

    qint32 m_cifs_share_count;
    bool m_cifs_share_count_isSet;
    bool m_cifs_share_count_isValid;

    QList m_enabled_protocols;
    bool m_enabled_protocols_isSet;
    bool m_enabled_protocols_isValid;

    qint32 m_total_capacity_used;
    bool m_total_capacity_used_isSet;
    bool m_total_capacity_used_isValid;

    qint32 m_total_capacity_provisioned;
    bool m_total_capacity_provisioned_isSet;
    bool m_total_capacity_provisioned_isValid;

    qint32 m_total_logical_capacity_used;
    bool m_total_logical_capacity_used_isSet;
    bool m_total_logical_capacity_used_isValid;

    OAINetAppONTAPSVM_MaxP95Performance m_max_p95_performance;
    bool m_max_p95_performance_isSet;
    bool m_max_p95_performance_isValid;

    QList m_recommendations;
    bool m_recommendations_isSet;
    bool m_recommendations_isValid;

    qint32 m_nfs_exported_volumes;
    bool m_nfs_exported_volumes_isSet;
    bool m_nfs_exported_volumes_isValid;

    OAIRecommendationStatus m_recommendation_status;
    bool m_recommendation_status_isSet;
    bool m_recommendation_status_isValid;

    qint32 m_total_snapshot_capacity_used;
    bool m_total_snapshot_capacity_used_isSet;
    bool m_total_snapshot_capacity_used_isValid;

    qint32 m_lun_count;
    bool m_lun_count_isSet;
    bool m_lun_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINetAppONTAPSVM)

#endif // OAINetAppONTAPSVM_H
