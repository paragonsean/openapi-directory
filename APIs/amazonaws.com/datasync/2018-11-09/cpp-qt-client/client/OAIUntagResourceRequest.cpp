/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUntagResourceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUntagResourceRequest::OAIUntagResourceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUntagResourceRequest::OAIUntagResourceRequest() {
    this->initializeModel();
}

OAIUntagResourceRequest::~OAIUntagResourceRequest() {}

void OAIUntagResourceRequest::initializeModel() {

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_keys_isSet = false;
    m_keys_isValid = false;
}

void OAIUntagResourceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUntagResourceRequest::fromJsonObject(QJsonObject json) {

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;

    m_keys_isValid = ::OpenAPI::fromJsonValue(m_keys, json[QString("Keys")]);
    m_keys_isSet = !json[QString("Keys")].isNull() && m_keys_isValid;
}

QString OAIUntagResourceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUntagResourceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_keys.isSet()) {
        obj.insert(QString("Keys"), ::OpenAPI::toJsonValue(m_keys));
    }
    return obj;
}

QString OAIUntagResourceRequest::getResourceArn() const {
    return m_resource_arn;
}
void OAIUntagResourceRequest::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIUntagResourceRequest::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIUntagResourceRequest::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

QList OAIUntagResourceRequest::getKeys() const {
    return m_keys;
}
void OAIUntagResourceRequest::setKeys(const QList &keys) {
    m_keys = keys;
    m_keys_isSet = true;
}

bool OAIUntagResourceRequest::is_keys_Set() const{
    return m_keys_isSet;
}

bool OAIUntagResourceRequest::is_keys_Valid() const{
    return m_keys_isValid;
}

bool OAIUntagResourceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUntagResourceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_arn_isValid && m_keys_isValid && true;
}

} // namespace OpenAPI
