/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeStorageSystemResourcesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeStorageSystemResourcesRequest::OAIDescribeStorageSystemResourcesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeStorageSystemResourcesRequest::OAIDescribeStorageSystemResourcesRequest() {
    this->initializeModel();
}

OAIDescribeStorageSystemResourcesRequest::~OAIDescribeStorageSystemResourcesRequest() {}

void OAIDescribeStorageSystemResourcesRequest::initializeModel() {

    m_discovery_job_arn_isSet = false;
    m_discovery_job_arn_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_resource_ids_isSet = false;
    m_resource_ids_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIDescribeStorageSystemResourcesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeStorageSystemResourcesRequest::fromJsonObject(QJsonObject json) {

    m_discovery_job_arn_isValid = ::OpenAPI::fromJsonValue(m_discovery_job_arn, json[QString("DiscoveryJobArn")]);
    m_discovery_job_arn_isSet = !json[QString("DiscoveryJobArn")].isNull() && m_discovery_job_arn_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("ResourceType")]);
    m_resource_type_isSet = !json[QString("ResourceType")].isNull() && m_resource_type_isValid;

    m_resource_ids_isValid = ::OpenAPI::fromJsonValue(m_resource_ids, json[QString("ResourceIds")]);
    m_resource_ids_isSet = !json[QString("ResourceIds")].isNull() && m_resource_ids_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("Filter")]);
    m_filter_isSet = !json[QString("Filter")].isNull() && m_filter_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIDescribeStorageSystemResourcesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeStorageSystemResourcesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_discovery_job_arn_isSet) {
        obj.insert(QString("DiscoveryJobArn"), ::OpenAPI::toJsonValue(m_discovery_job_arn));
    }
    if (m_resource_type.isSet()) {
        obj.insert(QString("ResourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_resource_ids.isSet()) {
        obj.insert(QString("ResourceIds"), ::OpenAPI::toJsonValue(m_resource_ids));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("Filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QString OAIDescribeStorageSystemResourcesRequest::getDiscoveryJobArn() const {
    return m_discovery_job_arn;
}
void OAIDescribeStorageSystemResourcesRequest::setDiscoveryJobArn(const QString &discovery_job_arn) {
    m_discovery_job_arn = discovery_job_arn;
    m_discovery_job_arn_isSet = true;
}

bool OAIDescribeStorageSystemResourcesRequest::is_discovery_job_arn_Set() const{
    return m_discovery_job_arn_isSet;
}

bool OAIDescribeStorageSystemResourcesRequest::is_discovery_job_arn_Valid() const{
    return m_discovery_job_arn_isValid;
}

OAIDiscoveryResourceType OAIDescribeStorageSystemResourcesRequest::getResourceType() const {
    return m_resource_type;
}
void OAIDescribeStorageSystemResourcesRequest::setResourceType(const OAIDiscoveryResourceType &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIDescribeStorageSystemResourcesRequest::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIDescribeStorageSystemResourcesRequest::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QList OAIDescribeStorageSystemResourcesRequest::getResourceIds() const {
    return m_resource_ids;
}
void OAIDescribeStorageSystemResourcesRequest::setResourceIds(const QList &resource_ids) {
    m_resource_ids = resource_ids;
    m_resource_ids_isSet = true;
}

bool OAIDescribeStorageSystemResourcesRequest::is_resource_ids_Set() const{
    return m_resource_ids_isSet;
}

bool OAIDescribeStorageSystemResourcesRequest::is_resource_ids_Valid() const{
    return m_resource_ids_isValid;
}

QMap OAIDescribeStorageSystemResourcesRequest::getFilter() const {
    return m_filter;
}
void OAIDescribeStorageSystemResourcesRequest::setFilter(const QMap &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIDescribeStorageSystemResourcesRequest::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIDescribeStorageSystemResourcesRequest::is_filter_Valid() const{
    return m_filter_isValid;
}

qint32 OAIDescribeStorageSystemResourcesRequest::getMaxResults() const {
    return m_max_results;
}
void OAIDescribeStorageSystemResourcesRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIDescribeStorageSystemResourcesRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIDescribeStorageSystemResourcesRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIDescribeStorageSystemResourcesRequest::getNextToken() const {
    return m_next_token;
}
void OAIDescribeStorageSystemResourcesRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeStorageSystemResourcesRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeStorageSystemResourcesRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIDescribeStorageSystemResourcesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_discovery_job_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeStorageSystemResourcesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_discovery_job_arn_isValid && m_resource_type_isValid && true;
}

} // namespace OpenAPI
