/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeStorageSystemResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeStorageSystemResponse::OAIDescribeStorageSystemResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeStorageSystemResponse::OAIDescribeStorageSystemResponse() {
    this->initializeModel();
}

OAIDescribeStorageSystemResponse::~OAIDescribeStorageSystemResponse() {}

void OAIDescribeStorageSystemResponse::initializeModel() {

    m_storage_system_arn_isSet = false;
    m_storage_system_arn_isValid = false;

    m_server_configuration_isSet = false;
    m_server_configuration_isValid = false;

    m_system_type_isSet = false;
    m_system_type_isValid = false;

    m_agent_arns_isSet = false;
    m_agent_arns_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_connectivity_status_isSet = false;
    m_connectivity_status_isValid = false;

    m_cloud_watch_log_group_arn_isSet = false;
    m_cloud_watch_log_group_arn_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_secrets_manager_arn_isSet = false;
    m_secrets_manager_arn_isValid = false;
}

void OAIDescribeStorageSystemResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeStorageSystemResponse::fromJsonObject(QJsonObject json) {

    m_storage_system_arn_isValid = ::OpenAPI::fromJsonValue(m_storage_system_arn, json[QString("StorageSystemArn")]);
    m_storage_system_arn_isSet = !json[QString("StorageSystemArn")].isNull() && m_storage_system_arn_isValid;

    m_server_configuration_isValid = ::OpenAPI::fromJsonValue(m_server_configuration, json[QString("ServerConfiguration")]);
    m_server_configuration_isSet = !json[QString("ServerConfiguration")].isNull() && m_server_configuration_isValid;

    m_system_type_isValid = ::OpenAPI::fromJsonValue(m_system_type, json[QString("SystemType")]);
    m_system_type_isSet = !json[QString("SystemType")].isNull() && m_system_type_isValid;

    m_agent_arns_isValid = ::OpenAPI::fromJsonValue(m_agent_arns, json[QString("AgentArns")]);
    m_agent_arns_isSet = !json[QString("AgentArns")].isNull() && m_agent_arns_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("ErrorMessage")]);
    m_error_message_isSet = !json[QString("ErrorMessage")].isNull() && m_error_message_isValid;

    m_connectivity_status_isValid = ::OpenAPI::fromJsonValue(m_connectivity_status, json[QString("ConnectivityStatus")]);
    m_connectivity_status_isSet = !json[QString("ConnectivityStatus")].isNull() && m_connectivity_status_isValid;

    m_cloud_watch_log_group_arn_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_log_group_arn, json[QString("CloudWatchLogGroupArn")]);
    m_cloud_watch_log_group_arn_isSet = !json[QString("CloudWatchLogGroupArn")].isNull() && m_cloud_watch_log_group_arn_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_secrets_manager_arn_isValid = ::OpenAPI::fromJsonValue(m_secrets_manager_arn, json[QString("SecretsManagerArn")]);
    m_secrets_manager_arn_isSet = !json[QString("SecretsManagerArn")].isNull() && m_secrets_manager_arn_isValid;
}

QString OAIDescribeStorageSystemResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeStorageSystemResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_storage_system_arn_isSet) {
        obj.insert(QString("StorageSystemArn"), ::OpenAPI::toJsonValue(m_storage_system_arn));
    }
    if (m_server_configuration.isSet()) {
        obj.insert(QString("ServerConfiguration"), ::OpenAPI::toJsonValue(m_server_configuration));
    }
    if (m_system_type.isSet()) {
        obj.insert(QString("SystemType"), ::OpenAPI::toJsonValue(m_system_type));
    }
    if (m_agent_arns.isSet()) {
        obj.insert(QString("AgentArns"), ::OpenAPI::toJsonValue(m_agent_arns));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("ErrorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_connectivity_status.isSet()) {
        obj.insert(QString("ConnectivityStatus"), ::OpenAPI::toJsonValue(m_connectivity_status));
    }
    if (m_cloud_watch_log_group_arn_isSet) {
        obj.insert(QString("CloudWatchLogGroupArn"), ::OpenAPI::toJsonValue(m_cloud_watch_log_group_arn));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_secrets_manager_arn_isSet) {
        obj.insert(QString("SecretsManagerArn"), ::OpenAPI::toJsonValue(m_secrets_manager_arn));
    }
    return obj;
}

QString OAIDescribeStorageSystemResponse::getStorageSystemArn() const {
    return m_storage_system_arn;
}
void OAIDescribeStorageSystemResponse::setStorageSystemArn(const QString &storage_system_arn) {
    m_storage_system_arn = storage_system_arn;
    m_storage_system_arn_isSet = true;
}

bool OAIDescribeStorageSystemResponse::is_storage_system_arn_Set() const{
    return m_storage_system_arn_isSet;
}

bool OAIDescribeStorageSystemResponse::is_storage_system_arn_Valid() const{
    return m_storage_system_arn_isValid;
}

OAIDescribeStorageSystemResponse_ServerConfiguration OAIDescribeStorageSystemResponse::getServerConfiguration() const {
    return m_server_configuration;
}
void OAIDescribeStorageSystemResponse::setServerConfiguration(const OAIDescribeStorageSystemResponse_ServerConfiguration &server_configuration) {
    m_server_configuration = server_configuration;
    m_server_configuration_isSet = true;
}

bool OAIDescribeStorageSystemResponse::is_server_configuration_Set() const{
    return m_server_configuration_isSet;
}

bool OAIDescribeStorageSystemResponse::is_server_configuration_Valid() const{
    return m_server_configuration_isValid;
}

OAIDiscoverySystemType OAIDescribeStorageSystemResponse::getSystemType() const {
    return m_system_type;
}
void OAIDescribeStorageSystemResponse::setSystemType(const OAIDiscoverySystemType &system_type) {
    m_system_type = system_type;
    m_system_type_isSet = true;
}

bool OAIDescribeStorageSystemResponse::is_system_type_Set() const{
    return m_system_type_isSet;
}

bool OAIDescribeStorageSystemResponse::is_system_type_Valid() const{
    return m_system_type_isValid;
}

QList OAIDescribeStorageSystemResponse::getAgentArns() const {
    return m_agent_arns;
}
void OAIDescribeStorageSystemResponse::setAgentArns(const QList &agent_arns) {
    m_agent_arns = agent_arns;
    m_agent_arns_isSet = true;
}

bool OAIDescribeStorageSystemResponse::is_agent_arns_Set() const{
    return m_agent_arns_isSet;
}

bool OAIDescribeStorageSystemResponse::is_agent_arns_Valid() const{
    return m_agent_arns_isValid;
}

QString OAIDescribeStorageSystemResponse::getName() const {
    return m_name;
}
void OAIDescribeStorageSystemResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeStorageSystemResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeStorageSystemResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDescribeStorageSystemResponse::getErrorMessage() const {
    return m_error_message;
}
void OAIDescribeStorageSystemResponse::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIDescribeStorageSystemResponse::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIDescribeStorageSystemResponse::is_error_message_Valid() const{
    return m_error_message_isValid;
}

OAIStorageSystemConnectivityStatus OAIDescribeStorageSystemResponse::getConnectivityStatus() const {
    return m_connectivity_status;
}
void OAIDescribeStorageSystemResponse::setConnectivityStatus(const OAIStorageSystemConnectivityStatus &connectivity_status) {
    m_connectivity_status = connectivity_status;
    m_connectivity_status_isSet = true;
}

bool OAIDescribeStorageSystemResponse::is_connectivity_status_Set() const{
    return m_connectivity_status_isSet;
}

bool OAIDescribeStorageSystemResponse::is_connectivity_status_Valid() const{
    return m_connectivity_status_isValid;
}

QString OAIDescribeStorageSystemResponse::getCloudWatchLogGroupArn() const {
    return m_cloud_watch_log_group_arn;
}
void OAIDescribeStorageSystemResponse::setCloudWatchLogGroupArn(const QString &cloud_watch_log_group_arn) {
    m_cloud_watch_log_group_arn = cloud_watch_log_group_arn;
    m_cloud_watch_log_group_arn_isSet = true;
}

bool OAIDescribeStorageSystemResponse::is_cloud_watch_log_group_arn_Set() const{
    return m_cloud_watch_log_group_arn_isSet;
}

bool OAIDescribeStorageSystemResponse::is_cloud_watch_log_group_arn_Valid() const{
    return m_cloud_watch_log_group_arn_isValid;
}

QDateTime OAIDescribeStorageSystemResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeStorageSystemResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeStorageSystemResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeStorageSystemResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIDescribeStorageSystemResponse::getSecretsManagerArn() const {
    return m_secrets_manager_arn;
}
void OAIDescribeStorageSystemResponse::setSecretsManagerArn(const QString &secrets_manager_arn) {
    m_secrets_manager_arn = secrets_manager_arn;
    m_secrets_manager_arn_isSet = true;
}

bool OAIDescribeStorageSystemResponse::is_secrets_manager_arn_Set() const{
    return m_secrets_manager_arn_isSet;
}

bool OAIDescribeStorageSystemResponse::is_secrets_manager_arn_Valid() const{
    return m_secrets_manager_arn_isValid;
}

bool OAIDescribeStorageSystemResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_storage_system_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connectivity_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_log_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secrets_manager_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeStorageSystemResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
