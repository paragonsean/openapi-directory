/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLocationNfsRequest_OnPremConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLocationNfsRequest_OnPremConfig::OAICreateLocationNfsRequest_OnPremConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLocationNfsRequest_OnPremConfig::OAICreateLocationNfsRequest_OnPremConfig() {
    this->initializeModel();
}

OAICreateLocationNfsRequest_OnPremConfig::~OAICreateLocationNfsRequest_OnPremConfig() {}

void OAICreateLocationNfsRequest_OnPremConfig::initializeModel() {

    m_agent_arns_isSet = false;
    m_agent_arns_isValid = false;
}

void OAICreateLocationNfsRequest_OnPremConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLocationNfsRequest_OnPremConfig::fromJsonObject(QJsonObject json) {

    m_agent_arns_isValid = ::OpenAPI::fromJsonValue(m_agent_arns, json[QString("AgentArns")]);
    m_agent_arns_isSet = !json[QString("AgentArns")].isNull() && m_agent_arns_isValid;
}

QString OAICreateLocationNfsRequest_OnPremConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLocationNfsRequest_OnPremConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_arns.isSet()) {
        obj.insert(QString("AgentArns"), ::OpenAPI::toJsonValue(m_agent_arns));
    }
    return obj;
}

QList OAICreateLocationNfsRequest_OnPremConfig::getAgentArns() const {
    return m_agent_arns;
}
void OAICreateLocationNfsRequest_OnPremConfig::setAgentArns(const QList &agent_arns) {
    m_agent_arns = agent_arns;
    m_agent_arns_isSet = true;
}

bool OAICreateLocationNfsRequest_OnPremConfig::is_agent_arns_Set() const{
    return m_agent_arns_isSet;
}

bool OAICreateLocationNfsRequest_OnPremConfig::is_agent_arns_Valid() const{
    return m_agent_arns_isValid;
}

bool OAICreateLocationNfsRequest_OnPremConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLocationNfsRequest_OnPremConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_agent_arns_isValid && true;
}

} // namespace OpenAPI
