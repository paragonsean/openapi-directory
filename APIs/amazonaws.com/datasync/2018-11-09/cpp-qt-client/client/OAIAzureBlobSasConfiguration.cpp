/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureBlobSasConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureBlobSasConfiguration::OAIAzureBlobSasConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureBlobSasConfiguration::OAIAzureBlobSasConfiguration() {
    this->initializeModel();
}

OAIAzureBlobSasConfiguration::~OAIAzureBlobSasConfiguration() {}

void OAIAzureBlobSasConfiguration::initializeModel() {

    m_token_isSet = false;
    m_token_isValid = false;
}

void OAIAzureBlobSasConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureBlobSasConfiguration::fromJsonObject(QJsonObject json) {

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("Token")]);
    m_token_isSet = !json[QString("Token")].isNull() && m_token_isValid;
}

QString OAIAzureBlobSasConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureBlobSasConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_token_isSet) {
        obj.insert(QString("Token"), ::OpenAPI::toJsonValue(m_token));
    }
    return obj;
}

QString OAIAzureBlobSasConfiguration::getToken() const {
    return m_token;
}
void OAIAzureBlobSasConfiguration::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIAzureBlobSasConfiguration::is_token_Set() const{
    return m_token_isSet;
}

bool OAIAzureBlobSasConfiguration::is_token_Valid() const{
    return m_token_isValid;
}

bool OAIAzureBlobSasConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureBlobSasConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_token_isValid && true;
}

} // namespace OpenAPI
