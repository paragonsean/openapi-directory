/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeLocationNfsResponse_MountOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeLocationNfsResponse_MountOptions::OAIDescribeLocationNfsResponse_MountOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeLocationNfsResponse_MountOptions::OAIDescribeLocationNfsResponse_MountOptions() {
    this->initializeModel();
}

OAIDescribeLocationNfsResponse_MountOptions::~OAIDescribeLocationNfsResponse_MountOptions() {}

void OAIDescribeLocationNfsResponse_MountOptions::initializeModel() {

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIDescribeLocationNfsResponse_MountOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeLocationNfsResponse_MountOptions::fromJsonObject(QJsonObject json) {

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;
}

QString OAIDescribeLocationNfsResponse_MountOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeLocationNfsResponse_MountOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_version.isSet()) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAINfsVersion OAIDescribeLocationNfsResponse_MountOptions::getVersion() const {
    return m_version;
}
void OAIDescribeLocationNfsResponse_MountOptions::setVersion(const OAINfsVersion &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIDescribeLocationNfsResponse_MountOptions::is_version_Set() const{
    return m_version_isSet;
}

bool OAIDescribeLocationNfsResponse_MountOptions::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIDescribeLocationNfsResponse_MountOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeLocationNfsResponse_MountOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
