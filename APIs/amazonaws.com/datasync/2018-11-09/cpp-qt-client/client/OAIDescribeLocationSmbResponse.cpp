/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeLocationSmbResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeLocationSmbResponse::OAIDescribeLocationSmbResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeLocationSmbResponse::OAIDescribeLocationSmbResponse() {
    this->initializeModel();
}

OAIDescribeLocationSmbResponse::~OAIDescribeLocationSmbResponse() {}

void OAIDescribeLocationSmbResponse::initializeModel() {

    m_location_arn_isSet = false;
    m_location_arn_isValid = false;

    m_location_uri_isSet = false;
    m_location_uri_isValid = false;

    m_agent_arns_isSet = false;
    m_agent_arns_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_mount_options_isSet = false;
    m_mount_options_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;
}

void OAIDescribeLocationSmbResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeLocationSmbResponse::fromJsonObject(QJsonObject json) {

    m_location_arn_isValid = ::OpenAPI::fromJsonValue(m_location_arn, json[QString("LocationArn")]);
    m_location_arn_isSet = !json[QString("LocationArn")].isNull() && m_location_arn_isValid;

    m_location_uri_isValid = ::OpenAPI::fromJsonValue(m_location_uri, json[QString("LocationUri")]);
    m_location_uri_isSet = !json[QString("LocationUri")].isNull() && m_location_uri_isValid;

    m_agent_arns_isValid = ::OpenAPI::fromJsonValue(m_agent_arns, json[QString("AgentArns")]);
    m_agent_arns_isSet = !json[QString("AgentArns")].isNull() && m_agent_arns_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("User")]);
    m_user_isSet = !json[QString("User")].isNull() && m_user_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;

    m_mount_options_isValid = ::OpenAPI::fromJsonValue(m_mount_options, json[QString("MountOptions")]);
    m_mount_options_isSet = !json[QString("MountOptions")].isNull() && m_mount_options_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;
}

QString OAIDescribeLocationSmbResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeLocationSmbResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_location_arn_isSet) {
        obj.insert(QString("LocationArn"), ::OpenAPI::toJsonValue(m_location_arn));
    }
    if (m_location_uri_isSet) {
        obj.insert(QString("LocationUri"), ::OpenAPI::toJsonValue(m_location_uri));
    }
    if (m_agent_arns.isSet()) {
        obj.insert(QString("AgentArns"), ::OpenAPI::toJsonValue(m_agent_arns));
    }
    if (m_user_isSet) {
        obj.insert(QString("User"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_domain_isSet) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_mount_options.isSet()) {
        obj.insert(QString("MountOptions"), ::OpenAPI::toJsonValue(m_mount_options));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    return obj;
}

QString OAIDescribeLocationSmbResponse::getLocationArn() const {
    return m_location_arn;
}
void OAIDescribeLocationSmbResponse::setLocationArn(const QString &location_arn) {
    m_location_arn = location_arn;
    m_location_arn_isSet = true;
}

bool OAIDescribeLocationSmbResponse::is_location_arn_Set() const{
    return m_location_arn_isSet;
}

bool OAIDescribeLocationSmbResponse::is_location_arn_Valid() const{
    return m_location_arn_isValid;
}

QString OAIDescribeLocationSmbResponse::getLocationUri() const {
    return m_location_uri;
}
void OAIDescribeLocationSmbResponse::setLocationUri(const QString &location_uri) {
    m_location_uri = location_uri;
    m_location_uri_isSet = true;
}

bool OAIDescribeLocationSmbResponse::is_location_uri_Set() const{
    return m_location_uri_isSet;
}

bool OAIDescribeLocationSmbResponse::is_location_uri_Valid() const{
    return m_location_uri_isValid;
}

QList OAIDescribeLocationSmbResponse::getAgentArns() const {
    return m_agent_arns;
}
void OAIDescribeLocationSmbResponse::setAgentArns(const QList &agent_arns) {
    m_agent_arns = agent_arns;
    m_agent_arns_isSet = true;
}

bool OAIDescribeLocationSmbResponse::is_agent_arns_Set() const{
    return m_agent_arns_isSet;
}

bool OAIDescribeLocationSmbResponse::is_agent_arns_Valid() const{
    return m_agent_arns_isValid;
}

QString OAIDescribeLocationSmbResponse::getUser() const {
    return m_user;
}
void OAIDescribeLocationSmbResponse::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIDescribeLocationSmbResponse::is_user_Set() const{
    return m_user_isSet;
}

bool OAIDescribeLocationSmbResponse::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIDescribeLocationSmbResponse::getDomain() const {
    return m_domain;
}
void OAIDescribeLocationSmbResponse::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIDescribeLocationSmbResponse::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIDescribeLocationSmbResponse::is_domain_Valid() const{
    return m_domain_isValid;
}

OAIDescribeLocationSmbResponse_MountOptions OAIDescribeLocationSmbResponse::getMountOptions() const {
    return m_mount_options;
}
void OAIDescribeLocationSmbResponse::setMountOptions(const OAIDescribeLocationSmbResponse_MountOptions &mount_options) {
    m_mount_options = mount_options;
    m_mount_options_isSet = true;
}

bool OAIDescribeLocationSmbResponse::is_mount_options_Set() const{
    return m_mount_options_isSet;
}

bool OAIDescribeLocationSmbResponse::is_mount_options_Valid() const{
    return m_mount_options_isValid;
}

QDateTime OAIDescribeLocationSmbResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeLocationSmbResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeLocationSmbResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeLocationSmbResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

bool OAIDescribeLocationSmbResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mount_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeLocationSmbResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
