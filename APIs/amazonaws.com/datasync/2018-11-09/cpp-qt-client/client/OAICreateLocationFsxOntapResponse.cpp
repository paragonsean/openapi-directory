/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLocationFsxOntapResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLocationFsxOntapResponse::OAICreateLocationFsxOntapResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLocationFsxOntapResponse::OAICreateLocationFsxOntapResponse() {
    this->initializeModel();
}

OAICreateLocationFsxOntapResponse::~OAICreateLocationFsxOntapResponse() {}

void OAICreateLocationFsxOntapResponse::initializeModel() {

    m_location_arn_isSet = false;
    m_location_arn_isValid = false;
}

void OAICreateLocationFsxOntapResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLocationFsxOntapResponse::fromJsonObject(QJsonObject json) {

    m_location_arn_isValid = ::OpenAPI::fromJsonValue(m_location_arn, json[QString("LocationArn")]);
    m_location_arn_isSet = !json[QString("LocationArn")].isNull() && m_location_arn_isValid;
}

QString OAICreateLocationFsxOntapResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLocationFsxOntapResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_location_arn_isSet) {
        obj.insert(QString("LocationArn"), ::OpenAPI::toJsonValue(m_location_arn));
    }
    return obj;
}

QString OAICreateLocationFsxOntapResponse::getLocationArn() const {
    return m_location_arn;
}
void OAICreateLocationFsxOntapResponse::setLocationArn(const QString &location_arn) {
    m_location_arn = location_arn;
    m_location_arn_isSet = true;
}

bool OAICreateLocationFsxOntapResponse::is_location_arn_Set() const{
    return m_location_arn_isSet;
}

bool OAICreateLocationFsxOntapResponse::is_location_arn_Valid() const{
    return m_location_arn_isValid;
}

bool OAICreateLocationFsxOntapResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLocationFsxOntapResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
