/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOptions::OAIOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOptions::OAIOptions() {
    this->initializeModel();
}

OAIOptions::~OAIOptions() {}

void OAIOptions::initializeModel() {

    m_verify_mode_isSet = false;
    m_verify_mode_isValid = false;

    m_overwrite_mode_isSet = false;
    m_overwrite_mode_isValid = false;

    m_atime_isSet = false;
    m_atime_isValid = false;

    m_mtime_isSet = false;
    m_mtime_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_gid_isSet = false;
    m_gid_isValid = false;

    m_preserve_deleted_files_isSet = false;
    m_preserve_deleted_files_isValid = false;

    m_preserve_devices_isSet = false;
    m_preserve_devices_isValid = false;

    m_posix_permissions_isSet = false;
    m_posix_permissions_isValid = false;

    m_bytes_per_second_isSet = false;
    m_bytes_per_second_isValid = false;

    m_task_queueing_isSet = false;
    m_task_queueing_isValid = false;

    m_log_level_isSet = false;
    m_log_level_isValid = false;

    m_transfer_mode_isSet = false;
    m_transfer_mode_isValid = false;

    m_security_descriptor_copy_flags_isSet = false;
    m_security_descriptor_copy_flags_isValid = false;

    m_object_tags_isSet = false;
    m_object_tags_isValid = false;
}

void OAIOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOptions::fromJsonObject(QJsonObject json) {

    m_verify_mode_isValid = ::OpenAPI::fromJsonValue(m_verify_mode, json[QString("VerifyMode")]);
    m_verify_mode_isSet = !json[QString("VerifyMode")].isNull() && m_verify_mode_isValid;

    m_overwrite_mode_isValid = ::OpenAPI::fromJsonValue(m_overwrite_mode, json[QString("OverwriteMode")]);
    m_overwrite_mode_isSet = !json[QString("OverwriteMode")].isNull() && m_overwrite_mode_isValid;

    m_atime_isValid = ::OpenAPI::fromJsonValue(m_atime, json[QString("Atime")]);
    m_atime_isSet = !json[QString("Atime")].isNull() && m_atime_isValid;

    m_mtime_isValid = ::OpenAPI::fromJsonValue(m_mtime, json[QString("Mtime")]);
    m_mtime_isSet = !json[QString("Mtime")].isNull() && m_mtime_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("Uid")]);
    m_uid_isSet = !json[QString("Uid")].isNull() && m_uid_isValid;

    m_gid_isValid = ::OpenAPI::fromJsonValue(m_gid, json[QString("Gid")]);
    m_gid_isSet = !json[QString("Gid")].isNull() && m_gid_isValid;

    m_preserve_deleted_files_isValid = ::OpenAPI::fromJsonValue(m_preserve_deleted_files, json[QString("PreserveDeletedFiles")]);
    m_preserve_deleted_files_isSet = !json[QString("PreserveDeletedFiles")].isNull() && m_preserve_deleted_files_isValid;

    m_preserve_devices_isValid = ::OpenAPI::fromJsonValue(m_preserve_devices, json[QString("PreserveDevices")]);
    m_preserve_devices_isSet = !json[QString("PreserveDevices")].isNull() && m_preserve_devices_isValid;

    m_posix_permissions_isValid = ::OpenAPI::fromJsonValue(m_posix_permissions, json[QString("PosixPermissions")]);
    m_posix_permissions_isSet = !json[QString("PosixPermissions")].isNull() && m_posix_permissions_isValid;

    m_bytes_per_second_isValid = ::OpenAPI::fromJsonValue(m_bytes_per_second, json[QString("BytesPerSecond")]);
    m_bytes_per_second_isSet = !json[QString("BytesPerSecond")].isNull() && m_bytes_per_second_isValid;

    m_task_queueing_isValid = ::OpenAPI::fromJsonValue(m_task_queueing, json[QString("TaskQueueing")]);
    m_task_queueing_isSet = !json[QString("TaskQueueing")].isNull() && m_task_queueing_isValid;

    m_log_level_isValid = ::OpenAPI::fromJsonValue(m_log_level, json[QString("LogLevel")]);
    m_log_level_isSet = !json[QString("LogLevel")].isNull() && m_log_level_isValid;

    m_transfer_mode_isValid = ::OpenAPI::fromJsonValue(m_transfer_mode, json[QString("TransferMode")]);
    m_transfer_mode_isSet = !json[QString("TransferMode")].isNull() && m_transfer_mode_isValid;

    m_security_descriptor_copy_flags_isValid = ::OpenAPI::fromJsonValue(m_security_descriptor_copy_flags, json[QString("SecurityDescriptorCopyFlags")]);
    m_security_descriptor_copy_flags_isSet = !json[QString("SecurityDescriptorCopyFlags")].isNull() && m_security_descriptor_copy_flags_isValid;

    m_object_tags_isValid = ::OpenAPI::fromJsonValue(m_object_tags, json[QString("ObjectTags")]);
    m_object_tags_isSet = !json[QString("ObjectTags")].isNull() && m_object_tags_isValid;
}

QString OAIOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_verify_mode.isSet()) {
        obj.insert(QString("VerifyMode"), ::OpenAPI::toJsonValue(m_verify_mode));
    }
    if (m_overwrite_mode.isSet()) {
        obj.insert(QString("OverwriteMode"), ::OpenAPI::toJsonValue(m_overwrite_mode));
    }
    if (m_atime.isSet()) {
        obj.insert(QString("Atime"), ::OpenAPI::toJsonValue(m_atime));
    }
    if (m_mtime.isSet()) {
        obj.insert(QString("Mtime"), ::OpenAPI::toJsonValue(m_mtime));
    }
    if (m_uid.isSet()) {
        obj.insert(QString("Uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_gid.isSet()) {
        obj.insert(QString("Gid"), ::OpenAPI::toJsonValue(m_gid));
    }
    if (m_preserve_deleted_files.isSet()) {
        obj.insert(QString("PreserveDeletedFiles"), ::OpenAPI::toJsonValue(m_preserve_deleted_files));
    }
    if (m_preserve_devices.isSet()) {
        obj.insert(QString("PreserveDevices"), ::OpenAPI::toJsonValue(m_preserve_devices));
    }
    if (m_posix_permissions.isSet()) {
        obj.insert(QString("PosixPermissions"), ::OpenAPI::toJsonValue(m_posix_permissions));
    }
    if (m_bytes_per_second_isSet) {
        obj.insert(QString("BytesPerSecond"), ::OpenAPI::toJsonValue(m_bytes_per_second));
    }
    if (m_task_queueing.isSet()) {
        obj.insert(QString("TaskQueueing"), ::OpenAPI::toJsonValue(m_task_queueing));
    }
    if (m_log_level.isSet()) {
        obj.insert(QString("LogLevel"), ::OpenAPI::toJsonValue(m_log_level));
    }
    if (m_transfer_mode.isSet()) {
        obj.insert(QString("TransferMode"), ::OpenAPI::toJsonValue(m_transfer_mode));
    }
    if (m_security_descriptor_copy_flags.isSet()) {
        obj.insert(QString("SecurityDescriptorCopyFlags"), ::OpenAPI::toJsonValue(m_security_descriptor_copy_flags));
    }
    if (m_object_tags.isSet()) {
        obj.insert(QString("ObjectTags"), ::OpenAPI::toJsonValue(m_object_tags));
    }
    return obj;
}

OAIVerifyMode OAIOptions::getVerifyMode() const {
    return m_verify_mode;
}
void OAIOptions::setVerifyMode(const OAIVerifyMode &verify_mode) {
    m_verify_mode = verify_mode;
    m_verify_mode_isSet = true;
}

bool OAIOptions::is_verify_mode_Set() const{
    return m_verify_mode_isSet;
}

bool OAIOptions::is_verify_mode_Valid() const{
    return m_verify_mode_isValid;
}

OAIOverwriteMode OAIOptions::getOverwriteMode() const {
    return m_overwrite_mode;
}
void OAIOptions::setOverwriteMode(const OAIOverwriteMode &overwrite_mode) {
    m_overwrite_mode = overwrite_mode;
    m_overwrite_mode_isSet = true;
}

bool OAIOptions::is_overwrite_mode_Set() const{
    return m_overwrite_mode_isSet;
}

bool OAIOptions::is_overwrite_mode_Valid() const{
    return m_overwrite_mode_isValid;
}

OAIAtime OAIOptions::getAtime() const {
    return m_atime;
}
void OAIOptions::setAtime(const OAIAtime &atime) {
    m_atime = atime;
    m_atime_isSet = true;
}

bool OAIOptions::is_atime_Set() const{
    return m_atime_isSet;
}

bool OAIOptions::is_atime_Valid() const{
    return m_atime_isValid;
}

OAIMtime OAIOptions::getMtime() const {
    return m_mtime;
}
void OAIOptions::setMtime(const OAIMtime &mtime) {
    m_mtime = mtime;
    m_mtime_isSet = true;
}

bool OAIOptions::is_mtime_Set() const{
    return m_mtime_isSet;
}

bool OAIOptions::is_mtime_Valid() const{
    return m_mtime_isValid;
}

OAIUid OAIOptions::getUid() const {
    return m_uid;
}
void OAIOptions::setUid(const OAIUid &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIOptions::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIOptions::is_uid_Valid() const{
    return m_uid_isValid;
}

OAIGid OAIOptions::getGid() const {
    return m_gid;
}
void OAIOptions::setGid(const OAIGid &gid) {
    m_gid = gid;
    m_gid_isSet = true;
}

bool OAIOptions::is_gid_Set() const{
    return m_gid_isSet;
}

bool OAIOptions::is_gid_Valid() const{
    return m_gid_isValid;
}

OAIPreserveDeletedFiles OAIOptions::getPreserveDeletedFiles() const {
    return m_preserve_deleted_files;
}
void OAIOptions::setPreserveDeletedFiles(const OAIPreserveDeletedFiles &preserve_deleted_files) {
    m_preserve_deleted_files = preserve_deleted_files;
    m_preserve_deleted_files_isSet = true;
}

bool OAIOptions::is_preserve_deleted_files_Set() const{
    return m_preserve_deleted_files_isSet;
}

bool OAIOptions::is_preserve_deleted_files_Valid() const{
    return m_preserve_deleted_files_isValid;
}

OAIPreserveDevices OAIOptions::getPreserveDevices() const {
    return m_preserve_devices;
}
void OAIOptions::setPreserveDevices(const OAIPreserveDevices &preserve_devices) {
    m_preserve_devices = preserve_devices;
    m_preserve_devices_isSet = true;
}

bool OAIOptions::is_preserve_devices_Set() const{
    return m_preserve_devices_isSet;
}

bool OAIOptions::is_preserve_devices_Valid() const{
    return m_preserve_devices_isValid;
}

OAIPosixPermissions OAIOptions::getPosixPermissions() const {
    return m_posix_permissions;
}
void OAIOptions::setPosixPermissions(const OAIPosixPermissions &posix_permissions) {
    m_posix_permissions = posix_permissions;
    m_posix_permissions_isSet = true;
}

bool OAIOptions::is_posix_permissions_Set() const{
    return m_posix_permissions_isSet;
}

bool OAIOptions::is_posix_permissions_Valid() const{
    return m_posix_permissions_isValid;
}

qint32 OAIOptions::getBytesPerSecond() const {
    return m_bytes_per_second;
}
void OAIOptions::setBytesPerSecond(const qint32 &bytes_per_second) {
    m_bytes_per_second = bytes_per_second;
    m_bytes_per_second_isSet = true;
}

bool OAIOptions::is_bytes_per_second_Set() const{
    return m_bytes_per_second_isSet;
}

bool OAIOptions::is_bytes_per_second_Valid() const{
    return m_bytes_per_second_isValid;
}

OAITaskQueueing OAIOptions::getTaskQueueing() const {
    return m_task_queueing;
}
void OAIOptions::setTaskQueueing(const OAITaskQueueing &task_queueing) {
    m_task_queueing = task_queueing;
    m_task_queueing_isSet = true;
}

bool OAIOptions::is_task_queueing_Set() const{
    return m_task_queueing_isSet;
}

bool OAIOptions::is_task_queueing_Valid() const{
    return m_task_queueing_isValid;
}

OAILogLevel OAIOptions::getLogLevel() const {
    return m_log_level;
}
void OAIOptions::setLogLevel(const OAILogLevel &log_level) {
    m_log_level = log_level;
    m_log_level_isSet = true;
}

bool OAIOptions::is_log_level_Set() const{
    return m_log_level_isSet;
}

bool OAIOptions::is_log_level_Valid() const{
    return m_log_level_isValid;
}

OAITransferMode OAIOptions::getTransferMode() const {
    return m_transfer_mode;
}
void OAIOptions::setTransferMode(const OAITransferMode &transfer_mode) {
    m_transfer_mode = transfer_mode;
    m_transfer_mode_isSet = true;
}

bool OAIOptions::is_transfer_mode_Set() const{
    return m_transfer_mode_isSet;
}

bool OAIOptions::is_transfer_mode_Valid() const{
    return m_transfer_mode_isValid;
}

OAISmbSecurityDescriptorCopyFlags OAIOptions::getSecurityDescriptorCopyFlags() const {
    return m_security_descriptor_copy_flags;
}
void OAIOptions::setSecurityDescriptorCopyFlags(const OAISmbSecurityDescriptorCopyFlags &security_descriptor_copy_flags) {
    m_security_descriptor_copy_flags = security_descriptor_copy_flags;
    m_security_descriptor_copy_flags_isSet = true;
}

bool OAIOptions::is_security_descriptor_copy_flags_Set() const{
    return m_security_descriptor_copy_flags_isSet;
}

bool OAIOptions::is_security_descriptor_copy_flags_Valid() const{
    return m_security_descriptor_copy_flags_isValid;
}

OAIObjectTags OAIOptions::getObjectTags() const {
    return m_object_tags;
}
void OAIOptions::setObjectTags(const OAIObjectTags &object_tags) {
    m_object_tags = object_tags;
    m_object_tags_isSet = true;
}

bool OAIOptions::is_object_tags_Set() const{
    return m_object_tags_isSet;
}

bool OAIOptions::is_object_tags_Valid() const{
    return m_object_tags_isValid;
}

bool OAIOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_verify_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_overwrite_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_atime.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mtime.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gid.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preserve_deleted_files.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preserve_devices.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_posix_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bytes_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_queueing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_descriptor_copy_flags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
