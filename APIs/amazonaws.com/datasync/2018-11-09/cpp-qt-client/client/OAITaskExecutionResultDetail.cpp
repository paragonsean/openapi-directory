/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskExecutionResultDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskExecutionResultDetail::OAITaskExecutionResultDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskExecutionResultDetail::OAITaskExecutionResultDetail() {
    this->initializeModel();
}

OAITaskExecutionResultDetail::~OAITaskExecutionResultDetail() {}

void OAITaskExecutionResultDetail::initializeModel() {

    m_prepare_duration_isSet = false;
    m_prepare_duration_isValid = false;

    m_prepare_status_isSet = false;
    m_prepare_status_isValid = false;

    m_total_duration_isSet = false;
    m_total_duration_isValid = false;

    m_transfer_duration_isSet = false;
    m_transfer_duration_isValid = false;

    m_transfer_status_isSet = false;
    m_transfer_status_isValid = false;

    m_verify_duration_isSet = false;
    m_verify_duration_isValid = false;

    m_verify_status_isSet = false;
    m_verify_status_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_detail_isSet = false;
    m_error_detail_isValid = false;
}

void OAITaskExecutionResultDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskExecutionResultDetail::fromJsonObject(QJsonObject json) {

    m_prepare_duration_isValid = ::OpenAPI::fromJsonValue(m_prepare_duration, json[QString("PrepareDuration")]);
    m_prepare_duration_isSet = !json[QString("PrepareDuration")].isNull() && m_prepare_duration_isValid;

    m_prepare_status_isValid = ::OpenAPI::fromJsonValue(m_prepare_status, json[QString("PrepareStatus")]);
    m_prepare_status_isSet = !json[QString("PrepareStatus")].isNull() && m_prepare_status_isValid;

    m_total_duration_isValid = ::OpenAPI::fromJsonValue(m_total_duration, json[QString("TotalDuration")]);
    m_total_duration_isSet = !json[QString("TotalDuration")].isNull() && m_total_duration_isValid;

    m_transfer_duration_isValid = ::OpenAPI::fromJsonValue(m_transfer_duration, json[QString("TransferDuration")]);
    m_transfer_duration_isSet = !json[QString("TransferDuration")].isNull() && m_transfer_duration_isValid;

    m_transfer_status_isValid = ::OpenAPI::fromJsonValue(m_transfer_status, json[QString("TransferStatus")]);
    m_transfer_status_isSet = !json[QString("TransferStatus")].isNull() && m_transfer_status_isValid;

    m_verify_duration_isValid = ::OpenAPI::fromJsonValue(m_verify_duration, json[QString("VerifyDuration")]);
    m_verify_duration_isSet = !json[QString("VerifyDuration")].isNull() && m_verify_duration_isValid;

    m_verify_status_isValid = ::OpenAPI::fromJsonValue(m_verify_status, json[QString("VerifyStatus")]);
    m_verify_status_isSet = !json[QString("VerifyStatus")].isNull() && m_verify_status_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("ErrorCode")]);
    m_error_code_isSet = !json[QString("ErrorCode")].isNull() && m_error_code_isValid;

    m_error_detail_isValid = ::OpenAPI::fromJsonValue(m_error_detail, json[QString("ErrorDetail")]);
    m_error_detail_isSet = !json[QString("ErrorDetail")].isNull() && m_error_detail_isValid;
}

QString OAITaskExecutionResultDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskExecutionResultDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_prepare_duration_isSet) {
        obj.insert(QString("PrepareDuration"), ::OpenAPI::toJsonValue(m_prepare_duration));
    }
    if (m_prepare_status.isSet()) {
        obj.insert(QString("PrepareStatus"), ::OpenAPI::toJsonValue(m_prepare_status));
    }
    if (m_total_duration_isSet) {
        obj.insert(QString("TotalDuration"), ::OpenAPI::toJsonValue(m_total_duration));
    }
    if (m_transfer_duration_isSet) {
        obj.insert(QString("TransferDuration"), ::OpenAPI::toJsonValue(m_transfer_duration));
    }
    if (m_transfer_status.isSet()) {
        obj.insert(QString("TransferStatus"), ::OpenAPI::toJsonValue(m_transfer_status));
    }
    if (m_verify_duration_isSet) {
        obj.insert(QString("VerifyDuration"), ::OpenAPI::toJsonValue(m_verify_duration));
    }
    if (m_verify_status.isSet()) {
        obj.insert(QString("VerifyStatus"), ::OpenAPI::toJsonValue(m_verify_status));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("ErrorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_detail_isSet) {
        obj.insert(QString("ErrorDetail"), ::OpenAPI::toJsonValue(m_error_detail));
    }
    return obj;
}

qint32 OAITaskExecutionResultDetail::getPrepareDuration() const {
    return m_prepare_duration;
}
void OAITaskExecutionResultDetail::setPrepareDuration(const qint32 &prepare_duration) {
    m_prepare_duration = prepare_duration;
    m_prepare_duration_isSet = true;
}

bool OAITaskExecutionResultDetail::is_prepare_duration_Set() const{
    return m_prepare_duration_isSet;
}

bool OAITaskExecutionResultDetail::is_prepare_duration_Valid() const{
    return m_prepare_duration_isValid;
}

OAIPhaseStatus OAITaskExecutionResultDetail::getPrepareStatus() const {
    return m_prepare_status;
}
void OAITaskExecutionResultDetail::setPrepareStatus(const OAIPhaseStatus &prepare_status) {
    m_prepare_status = prepare_status;
    m_prepare_status_isSet = true;
}

bool OAITaskExecutionResultDetail::is_prepare_status_Set() const{
    return m_prepare_status_isSet;
}

bool OAITaskExecutionResultDetail::is_prepare_status_Valid() const{
    return m_prepare_status_isValid;
}

qint32 OAITaskExecutionResultDetail::getTotalDuration() const {
    return m_total_duration;
}
void OAITaskExecutionResultDetail::setTotalDuration(const qint32 &total_duration) {
    m_total_duration = total_duration;
    m_total_duration_isSet = true;
}

bool OAITaskExecutionResultDetail::is_total_duration_Set() const{
    return m_total_duration_isSet;
}

bool OAITaskExecutionResultDetail::is_total_duration_Valid() const{
    return m_total_duration_isValid;
}

qint32 OAITaskExecutionResultDetail::getTransferDuration() const {
    return m_transfer_duration;
}
void OAITaskExecutionResultDetail::setTransferDuration(const qint32 &transfer_duration) {
    m_transfer_duration = transfer_duration;
    m_transfer_duration_isSet = true;
}

bool OAITaskExecutionResultDetail::is_transfer_duration_Set() const{
    return m_transfer_duration_isSet;
}

bool OAITaskExecutionResultDetail::is_transfer_duration_Valid() const{
    return m_transfer_duration_isValid;
}

OAIPhaseStatus OAITaskExecutionResultDetail::getTransferStatus() const {
    return m_transfer_status;
}
void OAITaskExecutionResultDetail::setTransferStatus(const OAIPhaseStatus &transfer_status) {
    m_transfer_status = transfer_status;
    m_transfer_status_isSet = true;
}

bool OAITaskExecutionResultDetail::is_transfer_status_Set() const{
    return m_transfer_status_isSet;
}

bool OAITaskExecutionResultDetail::is_transfer_status_Valid() const{
    return m_transfer_status_isValid;
}

qint32 OAITaskExecutionResultDetail::getVerifyDuration() const {
    return m_verify_duration;
}
void OAITaskExecutionResultDetail::setVerifyDuration(const qint32 &verify_duration) {
    m_verify_duration = verify_duration;
    m_verify_duration_isSet = true;
}

bool OAITaskExecutionResultDetail::is_verify_duration_Set() const{
    return m_verify_duration_isSet;
}

bool OAITaskExecutionResultDetail::is_verify_duration_Valid() const{
    return m_verify_duration_isValid;
}

OAIPhaseStatus OAITaskExecutionResultDetail::getVerifyStatus() const {
    return m_verify_status;
}
void OAITaskExecutionResultDetail::setVerifyStatus(const OAIPhaseStatus &verify_status) {
    m_verify_status = verify_status;
    m_verify_status_isSet = true;
}

bool OAITaskExecutionResultDetail::is_verify_status_Set() const{
    return m_verify_status_isSet;
}

bool OAITaskExecutionResultDetail::is_verify_status_Valid() const{
    return m_verify_status_isValid;
}

QString OAITaskExecutionResultDetail::getErrorCode() const {
    return m_error_code;
}
void OAITaskExecutionResultDetail::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAITaskExecutionResultDetail::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAITaskExecutionResultDetail::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAITaskExecutionResultDetail::getErrorDetail() const {
    return m_error_detail;
}
void OAITaskExecutionResultDetail::setErrorDetail(const QString &error_detail) {
    m_error_detail = error_detail;
    m_error_detail_isSet = true;
}

bool OAITaskExecutionResultDetail::is_error_detail_Set() const{
    return m_error_detail_isSet;
}

bool OAITaskExecutionResultDetail::is_error_detail_Valid() const{
    return m_error_detail_isValid;
}

bool OAITaskExecutionResultDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_prepare_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prepare_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_verify_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verify_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_detail_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskExecutionResultDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
