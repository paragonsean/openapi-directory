/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeLocationS3Response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeLocationS3Response::OAIDescribeLocationS3Response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeLocationS3Response::OAIDescribeLocationS3Response() {
    this->initializeModel();
}

OAIDescribeLocationS3Response::~OAIDescribeLocationS3Response() {}

void OAIDescribeLocationS3Response::initializeModel() {

    m_location_arn_isSet = false;
    m_location_arn_isValid = false;

    m_location_uri_isSet = false;
    m_location_uri_isValid = false;

    m_s3_storage_class_isSet = false;
    m_s3_storage_class_isValid = false;

    m_s3_config_isSet = false;
    m_s3_config_isValid = false;

    m_agent_arns_isSet = false;
    m_agent_arns_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;
}

void OAIDescribeLocationS3Response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeLocationS3Response::fromJsonObject(QJsonObject json) {

    m_location_arn_isValid = ::OpenAPI::fromJsonValue(m_location_arn, json[QString("LocationArn")]);
    m_location_arn_isSet = !json[QString("LocationArn")].isNull() && m_location_arn_isValid;

    m_location_uri_isValid = ::OpenAPI::fromJsonValue(m_location_uri, json[QString("LocationUri")]);
    m_location_uri_isSet = !json[QString("LocationUri")].isNull() && m_location_uri_isValid;

    m_s3_storage_class_isValid = ::OpenAPI::fromJsonValue(m_s3_storage_class, json[QString("S3StorageClass")]);
    m_s3_storage_class_isSet = !json[QString("S3StorageClass")].isNull() && m_s3_storage_class_isValid;

    m_s3_config_isValid = ::OpenAPI::fromJsonValue(m_s3_config, json[QString("S3Config")]);
    m_s3_config_isSet = !json[QString("S3Config")].isNull() && m_s3_config_isValid;

    m_agent_arns_isValid = ::OpenAPI::fromJsonValue(m_agent_arns, json[QString("AgentArns")]);
    m_agent_arns_isSet = !json[QString("AgentArns")].isNull() && m_agent_arns_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;
}

QString OAIDescribeLocationS3Response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeLocationS3Response::asJsonObject() const {
    QJsonObject obj;
    if (m_location_arn_isSet) {
        obj.insert(QString("LocationArn"), ::OpenAPI::toJsonValue(m_location_arn));
    }
    if (m_location_uri_isSet) {
        obj.insert(QString("LocationUri"), ::OpenAPI::toJsonValue(m_location_uri));
    }
    if (m_s3_storage_class.isSet()) {
        obj.insert(QString("S3StorageClass"), ::OpenAPI::toJsonValue(m_s3_storage_class));
    }
    if (m_s3_config.isSet()) {
        obj.insert(QString("S3Config"), ::OpenAPI::toJsonValue(m_s3_config));
    }
    if (m_agent_arns.isSet()) {
        obj.insert(QString("AgentArns"), ::OpenAPI::toJsonValue(m_agent_arns));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    return obj;
}

QString OAIDescribeLocationS3Response::getLocationArn() const {
    return m_location_arn;
}
void OAIDescribeLocationS3Response::setLocationArn(const QString &location_arn) {
    m_location_arn = location_arn;
    m_location_arn_isSet = true;
}

bool OAIDescribeLocationS3Response::is_location_arn_Set() const{
    return m_location_arn_isSet;
}

bool OAIDescribeLocationS3Response::is_location_arn_Valid() const{
    return m_location_arn_isValid;
}

QString OAIDescribeLocationS3Response::getLocationUri() const {
    return m_location_uri;
}
void OAIDescribeLocationS3Response::setLocationUri(const QString &location_uri) {
    m_location_uri = location_uri;
    m_location_uri_isSet = true;
}

bool OAIDescribeLocationS3Response::is_location_uri_Set() const{
    return m_location_uri_isSet;
}

bool OAIDescribeLocationS3Response::is_location_uri_Valid() const{
    return m_location_uri_isValid;
}

OAIS3StorageClass OAIDescribeLocationS3Response::getS3StorageClass() const {
    return m_s3_storage_class;
}
void OAIDescribeLocationS3Response::setS3StorageClass(const OAIS3StorageClass &s3_storage_class) {
    m_s3_storage_class = s3_storage_class;
    m_s3_storage_class_isSet = true;
}

bool OAIDescribeLocationS3Response::is_s3_storage_class_Set() const{
    return m_s3_storage_class_isSet;
}

bool OAIDescribeLocationS3Response::is_s3_storage_class_Valid() const{
    return m_s3_storage_class_isValid;
}

OAIS3Config OAIDescribeLocationS3Response::getS3Config() const {
    return m_s3_config;
}
void OAIDescribeLocationS3Response::setS3Config(const OAIS3Config &s3_config) {
    m_s3_config = s3_config;
    m_s3_config_isSet = true;
}

bool OAIDescribeLocationS3Response::is_s3_config_Set() const{
    return m_s3_config_isSet;
}

bool OAIDescribeLocationS3Response::is_s3_config_Valid() const{
    return m_s3_config_isValid;
}

QList OAIDescribeLocationS3Response::getAgentArns() const {
    return m_agent_arns;
}
void OAIDescribeLocationS3Response::setAgentArns(const QList &agent_arns) {
    m_agent_arns = agent_arns;
    m_agent_arns_isSet = true;
}

bool OAIDescribeLocationS3Response::is_agent_arns_Set() const{
    return m_agent_arns_isSet;
}

bool OAIDescribeLocationS3Response::is_agent_arns_Valid() const{
    return m_agent_arns_isValid;
}

QDateTime OAIDescribeLocationS3Response::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeLocationS3Response::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeLocationS3Response::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeLocationS3Response::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

bool OAIDescribeLocationS3Response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_storage_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeLocationS3Response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
