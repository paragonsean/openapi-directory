/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIP95Metrics_IOPS.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIP95Metrics_IOPS::OAIP95Metrics_IOPS(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIP95Metrics_IOPS::OAIP95Metrics_IOPS() {
    this->initializeModel();
}

OAIP95Metrics_IOPS::~OAIP95Metrics_IOPS() {}

void OAIP95Metrics_IOPS::initializeModel() {

    m_read_isSet = false;
    m_read_isValid = false;

    m_write_isSet = false;
    m_write_isValid = false;

    m_other_isSet = false;
    m_other_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIP95Metrics_IOPS::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIP95Metrics_IOPS::fromJsonObject(QJsonObject json) {

    m_read_isValid = ::OpenAPI::fromJsonValue(m_read, json[QString("Read")]);
    m_read_isSet = !json[QString("Read")].isNull() && m_read_isValid;

    m_write_isValid = ::OpenAPI::fromJsonValue(m_write, json[QString("Write")]);
    m_write_isSet = !json[QString("Write")].isNull() && m_write_isValid;

    m_other_isValid = ::OpenAPI::fromJsonValue(m_other, json[QString("Other")]);
    m_other_isSet = !json[QString("Other")].isNull() && m_other_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("Total")]);
    m_total_isSet = !json[QString("Total")].isNull() && m_total_isValid;
}

QString OAIP95Metrics_IOPS::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIP95Metrics_IOPS::asJsonObject() const {
    QJsonObject obj;
    if (m_read_isSet) {
        obj.insert(QString("Read"), ::OpenAPI::toJsonValue(m_read));
    }
    if (m_write_isSet) {
        obj.insert(QString("Write"), ::OpenAPI::toJsonValue(m_write));
    }
    if (m_other_isSet) {
        obj.insert(QString("Other"), ::OpenAPI::toJsonValue(m_other));
    }
    if (m_total_isSet) {
        obj.insert(QString("Total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

double OAIP95Metrics_IOPS::getRead() const {
    return m_read;
}
void OAIP95Metrics_IOPS::setRead(const double &read) {
    m_read = read;
    m_read_isSet = true;
}

bool OAIP95Metrics_IOPS::is_read_Set() const{
    return m_read_isSet;
}

bool OAIP95Metrics_IOPS::is_read_Valid() const{
    return m_read_isValid;
}

double OAIP95Metrics_IOPS::getWrite() const {
    return m_write;
}
void OAIP95Metrics_IOPS::setWrite(const double &write) {
    m_write = write;
    m_write_isSet = true;
}

bool OAIP95Metrics_IOPS::is_write_Set() const{
    return m_write_isSet;
}

bool OAIP95Metrics_IOPS::is_write_Valid() const{
    return m_write_isValid;
}

double OAIP95Metrics_IOPS::getOther() const {
    return m_other;
}
void OAIP95Metrics_IOPS::setOther(const double &other) {
    m_other = other;
    m_other_isSet = true;
}

bool OAIP95Metrics_IOPS::is_other_Set() const{
    return m_other_isSet;
}

bool OAIP95Metrics_IOPS::is_other_Valid() const{
    return m_other_isValid;
}

double OAIP95Metrics_IOPS::getTotal() const {
    return m_total;
}
void OAIP95Metrics_IOPS::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIP95Metrics_IOPS::is_total_Set() const{
    return m_total_isSet;
}

bool OAIP95Metrics_IOPS::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIP95Metrics_IOPS::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIP95Metrics_IOPS::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
