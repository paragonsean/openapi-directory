/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLocationAzureBlobRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLocationAzureBlobRequest::OAICreateLocationAzureBlobRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLocationAzureBlobRequest::OAICreateLocationAzureBlobRequest() {
    this->initializeModel();
}

OAICreateLocationAzureBlobRequest::~OAICreateLocationAzureBlobRequest() {}

void OAICreateLocationAzureBlobRequest::initializeModel() {

    m_container_url_isSet = false;
    m_container_url_isValid = false;

    m_authentication_type_isSet = false;
    m_authentication_type_isValid = false;

    m_sas_configuration_isSet = false;
    m_sas_configuration_isValid = false;

    m_blob_type_isSet = false;
    m_blob_type_isValid = false;

    m_access_tier_isSet = false;
    m_access_tier_isValid = false;

    m_subdirectory_isSet = false;
    m_subdirectory_isValid = false;

    m_agent_arns_isSet = false;
    m_agent_arns_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateLocationAzureBlobRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLocationAzureBlobRequest::fromJsonObject(QJsonObject json) {

    m_container_url_isValid = ::OpenAPI::fromJsonValue(m_container_url, json[QString("ContainerUrl")]);
    m_container_url_isSet = !json[QString("ContainerUrl")].isNull() && m_container_url_isValid;

    m_authentication_type_isValid = ::OpenAPI::fromJsonValue(m_authentication_type, json[QString("AuthenticationType")]);
    m_authentication_type_isSet = !json[QString("AuthenticationType")].isNull() && m_authentication_type_isValid;

    m_sas_configuration_isValid = ::OpenAPI::fromJsonValue(m_sas_configuration, json[QString("SasConfiguration")]);
    m_sas_configuration_isSet = !json[QString("SasConfiguration")].isNull() && m_sas_configuration_isValid;

    m_blob_type_isValid = ::OpenAPI::fromJsonValue(m_blob_type, json[QString("BlobType")]);
    m_blob_type_isSet = !json[QString("BlobType")].isNull() && m_blob_type_isValid;

    m_access_tier_isValid = ::OpenAPI::fromJsonValue(m_access_tier, json[QString("AccessTier")]);
    m_access_tier_isSet = !json[QString("AccessTier")].isNull() && m_access_tier_isValid;

    m_subdirectory_isValid = ::OpenAPI::fromJsonValue(m_subdirectory, json[QString("Subdirectory")]);
    m_subdirectory_isSet = !json[QString("Subdirectory")].isNull() && m_subdirectory_isValid;

    m_agent_arns_isValid = ::OpenAPI::fromJsonValue(m_agent_arns, json[QString("AgentArns")]);
    m_agent_arns_isSet = !json[QString("AgentArns")].isNull() && m_agent_arns_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateLocationAzureBlobRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLocationAzureBlobRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_container_url_isSet) {
        obj.insert(QString("ContainerUrl"), ::OpenAPI::toJsonValue(m_container_url));
    }
    if (m_authentication_type.isSet()) {
        obj.insert(QString("AuthenticationType"), ::OpenAPI::toJsonValue(m_authentication_type));
    }
    if (m_sas_configuration.isSet()) {
        obj.insert(QString("SasConfiguration"), ::OpenAPI::toJsonValue(m_sas_configuration));
    }
    if (m_blob_type.isSet()) {
        obj.insert(QString("BlobType"), ::OpenAPI::toJsonValue(m_blob_type));
    }
    if (m_access_tier.isSet()) {
        obj.insert(QString("AccessTier"), ::OpenAPI::toJsonValue(m_access_tier));
    }
    if (m_subdirectory_isSet) {
        obj.insert(QString("Subdirectory"), ::OpenAPI::toJsonValue(m_subdirectory));
    }
    if (m_agent_arns.isSet()) {
        obj.insert(QString("AgentArns"), ::OpenAPI::toJsonValue(m_agent_arns));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateLocationAzureBlobRequest::getContainerUrl() const {
    return m_container_url;
}
void OAICreateLocationAzureBlobRequest::setContainerUrl(const QString &container_url) {
    m_container_url = container_url;
    m_container_url_isSet = true;
}

bool OAICreateLocationAzureBlobRequest::is_container_url_Set() const{
    return m_container_url_isSet;
}

bool OAICreateLocationAzureBlobRequest::is_container_url_Valid() const{
    return m_container_url_isValid;
}

OAIAzureBlobAuthenticationType OAICreateLocationAzureBlobRequest::getAuthenticationType() const {
    return m_authentication_type;
}
void OAICreateLocationAzureBlobRequest::setAuthenticationType(const OAIAzureBlobAuthenticationType &authentication_type) {
    m_authentication_type = authentication_type;
    m_authentication_type_isSet = true;
}

bool OAICreateLocationAzureBlobRequest::is_authentication_type_Set() const{
    return m_authentication_type_isSet;
}

bool OAICreateLocationAzureBlobRequest::is_authentication_type_Valid() const{
    return m_authentication_type_isValid;
}

OAICreateLocationAzureBlobRequest_SasConfiguration OAICreateLocationAzureBlobRequest::getSasConfiguration() const {
    return m_sas_configuration;
}
void OAICreateLocationAzureBlobRequest::setSasConfiguration(const OAICreateLocationAzureBlobRequest_SasConfiguration &sas_configuration) {
    m_sas_configuration = sas_configuration;
    m_sas_configuration_isSet = true;
}

bool OAICreateLocationAzureBlobRequest::is_sas_configuration_Set() const{
    return m_sas_configuration_isSet;
}

bool OAICreateLocationAzureBlobRequest::is_sas_configuration_Valid() const{
    return m_sas_configuration_isValid;
}

OAIAzureBlobType OAICreateLocationAzureBlobRequest::getBlobType() const {
    return m_blob_type;
}
void OAICreateLocationAzureBlobRequest::setBlobType(const OAIAzureBlobType &blob_type) {
    m_blob_type = blob_type;
    m_blob_type_isSet = true;
}

bool OAICreateLocationAzureBlobRequest::is_blob_type_Set() const{
    return m_blob_type_isSet;
}

bool OAICreateLocationAzureBlobRequest::is_blob_type_Valid() const{
    return m_blob_type_isValid;
}

OAIAzureAccessTier OAICreateLocationAzureBlobRequest::getAccessTier() const {
    return m_access_tier;
}
void OAICreateLocationAzureBlobRequest::setAccessTier(const OAIAzureAccessTier &access_tier) {
    m_access_tier = access_tier;
    m_access_tier_isSet = true;
}

bool OAICreateLocationAzureBlobRequest::is_access_tier_Set() const{
    return m_access_tier_isSet;
}

bool OAICreateLocationAzureBlobRequest::is_access_tier_Valid() const{
    return m_access_tier_isValid;
}

QString OAICreateLocationAzureBlobRequest::getSubdirectory() const {
    return m_subdirectory;
}
void OAICreateLocationAzureBlobRequest::setSubdirectory(const QString &subdirectory) {
    m_subdirectory = subdirectory;
    m_subdirectory_isSet = true;
}

bool OAICreateLocationAzureBlobRequest::is_subdirectory_Set() const{
    return m_subdirectory_isSet;
}

bool OAICreateLocationAzureBlobRequest::is_subdirectory_Valid() const{
    return m_subdirectory_isValid;
}

QList OAICreateLocationAzureBlobRequest::getAgentArns() const {
    return m_agent_arns;
}
void OAICreateLocationAzureBlobRequest::setAgentArns(const QList &agent_arns) {
    m_agent_arns = agent_arns;
    m_agent_arns_isSet = true;
}

bool OAICreateLocationAzureBlobRequest::is_agent_arns_Set() const{
    return m_agent_arns_isSet;
}

bool OAICreateLocationAzureBlobRequest::is_agent_arns_Valid() const{
    return m_agent_arns_isValid;
}

QList OAICreateLocationAzureBlobRequest::getTags() const {
    return m_tags;
}
void OAICreateLocationAzureBlobRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateLocationAzureBlobRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateLocationAzureBlobRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateLocationAzureBlobRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sas_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_blob_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_tier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subdirectory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLocationAzureBlobRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_container_url_isValid && m_authentication_type_isValid && m_agent_arns_isValid && true;
}

} // namespace OpenAPI
