/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeStorageSystemResourceMetricsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeStorageSystemResourceMetricsRequest::OAIDescribeStorageSystemResourceMetricsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeStorageSystemResourceMetricsRequest::OAIDescribeStorageSystemResourceMetricsRequest() {
    this->initializeModel();
}

OAIDescribeStorageSystemResourceMetricsRequest::~OAIDescribeStorageSystemResourceMetricsRequest() {}

void OAIDescribeStorageSystemResourceMetricsRequest::initializeModel() {

    m_discovery_job_arn_isSet = false;
    m_discovery_job_arn_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIDescribeStorageSystemResourceMetricsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeStorageSystemResourceMetricsRequest::fromJsonObject(QJsonObject json) {

    m_discovery_job_arn_isValid = ::OpenAPI::fromJsonValue(m_discovery_job_arn, json[QString("DiscoveryJobArn")]);
    m_discovery_job_arn_isSet = !json[QString("DiscoveryJobArn")].isNull() && m_discovery_job_arn_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("ResourceType")]);
    m_resource_type_isSet = !json[QString("ResourceType")].isNull() && m_resource_type_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("ResourceId")]);
    m_resource_id_isSet = !json[QString("ResourceId")].isNull() && m_resource_id_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIDescribeStorageSystemResourceMetricsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeStorageSystemResourceMetricsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_discovery_job_arn_isSet) {
        obj.insert(QString("DiscoveryJobArn"), ::OpenAPI::toJsonValue(m_discovery_job_arn));
    }
    if (m_resource_type.isSet()) {
        obj.insert(QString("ResourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("ResourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QString OAIDescribeStorageSystemResourceMetricsRequest::getDiscoveryJobArn() const {
    return m_discovery_job_arn;
}
void OAIDescribeStorageSystemResourceMetricsRequest::setDiscoveryJobArn(const QString &discovery_job_arn) {
    m_discovery_job_arn = discovery_job_arn;
    m_discovery_job_arn_isSet = true;
}

bool OAIDescribeStorageSystemResourceMetricsRequest::is_discovery_job_arn_Set() const{
    return m_discovery_job_arn_isSet;
}

bool OAIDescribeStorageSystemResourceMetricsRequest::is_discovery_job_arn_Valid() const{
    return m_discovery_job_arn_isValid;
}

OAIDiscoveryResourceType OAIDescribeStorageSystemResourceMetricsRequest::getResourceType() const {
    return m_resource_type;
}
void OAIDescribeStorageSystemResourceMetricsRequest::setResourceType(const OAIDiscoveryResourceType &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIDescribeStorageSystemResourceMetricsRequest::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIDescribeStorageSystemResourceMetricsRequest::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIDescribeStorageSystemResourceMetricsRequest::getResourceId() const {
    return m_resource_id;
}
void OAIDescribeStorageSystemResourceMetricsRequest::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIDescribeStorageSystemResourceMetricsRequest::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIDescribeStorageSystemResourceMetricsRequest::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QDateTime OAIDescribeStorageSystemResourceMetricsRequest::getStartTime() const {
    return m_start_time;
}
void OAIDescribeStorageSystemResourceMetricsRequest::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIDescribeStorageSystemResourceMetricsRequest::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIDescribeStorageSystemResourceMetricsRequest::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIDescribeStorageSystemResourceMetricsRequest::getEndTime() const {
    return m_end_time;
}
void OAIDescribeStorageSystemResourceMetricsRequest::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIDescribeStorageSystemResourceMetricsRequest::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIDescribeStorageSystemResourceMetricsRequest::is_end_time_Valid() const{
    return m_end_time_isValid;
}

qint32 OAIDescribeStorageSystemResourceMetricsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIDescribeStorageSystemResourceMetricsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIDescribeStorageSystemResourceMetricsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIDescribeStorageSystemResourceMetricsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIDescribeStorageSystemResourceMetricsRequest::getNextToken() const {
    return m_next_token;
}
void OAIDescribeStorageSystemResourceMetricsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeStorageSystemResourceMetricsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeStorageSystemResourceMetricsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIDescribeStorageSystemResourceMetricsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_discovery_job_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeStorageSystemResourceMetricsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_discovery_job_arn_isValid && m_resource_type_isValid && m_resource_id_isValid && true;
}

} // namespace OpenAPI
