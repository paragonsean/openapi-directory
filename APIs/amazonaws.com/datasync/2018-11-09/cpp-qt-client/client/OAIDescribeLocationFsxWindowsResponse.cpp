/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeLocationFsxWindowsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeLocationFsxWindowsResponse::OAIDescribeLocationFsxWindowsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeLocationFsxWindowsResponse::OAIDescribeLocationFsxWindowsResponse() {
    this->initializeModel();
}

OAIDescribeLocationFsxWindowsResponse::~OAIDescribeLocationFsxWindowsResponse() {}

void OAIDescribeLocationFsxWindowsResponse::initializeModel() {

    m_location_arn_isSet = false;
    m_location_arn_isValid = false;

    m_location_uri_isSet = false;
    m_location_uri_isValid = false;

    m_security_group_arns_isSet = false;
    m_security_group_arns_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;
}

void OAIDescribeLocationFsxWindowsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeLocationFsxWindowsResponse::fromJsonObject(QJsonObject json) {

    m_location_arn_isValid = ::OpenAPI::fromJsonValue(m_location_arn, json[QString("LocationArn")]);
    m_location_arn_isSet = !json[QString("LocationArn")].isNull() && m_location_arn_isValid;

    m_location_uri_isValid = ::OpenAPI::fromJsonValue(m_location_uri, json[QString("LocationUri")]);
    m_location_uri_isSet = !json[QString("LocationUri")].isNull() && m_location_uri_isValid;

    m_security_group_arns_isValid = ::OpenAPI::fromJsonValue(m_security_group_arns, json[QString("SecurityGroupArns")]);
    m_security_group_arns_isSet = !json[QString("SecurityGroupArns")].isNull() && m_security_group_arns_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("User")]);
    m_user_isSet = !json[QString("User")].isNull() && m_user_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;
}

QString OAIDescribeLocationFsxWindowsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeLocationFsxWindowsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_location_arn_isSet) {
        obj.insert(QString("LocationArn"), ::OpenAPI::toJsonValue(m_location_arn));
    }
    if (m_location_uri_isSet) {
        obj.insert(QString("LocationUri"), ::OpenAPI::toJsonValue(m_location_uri));
    }
    if (m_security_group_arns.isSet()) {
        obj.insert(QString("SecurityGroupArns"), ::OpenAPI::toJsonValue(m_security_group_arns));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_user_isSet) {
        obj.insert(QString("User"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_domain_isSet) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    return obj;
}

QString OAIDescribeLocationFsxWindowsResponse::getLocationArn() const {
    return m_location_arn;
}
void OAIDescribeLocationFsxWindowsResponse::setLocationArn(const QString &location_arn) {
    m_location_arn = location_arn;
    m_location_arn_isSet = true;
}

bool OAIDescribeLocationFsxWindowsResponse::is_location_arn_Set() const{
    return m_location_arn_isSet;
}

bool OAIDescribeLocationFsxWindowsResponse::is_location_arn_Valid() const{
    return m_location_arn_isValid;
}

QString OAIDescribeLocationFsxWindowsResponse::getLocationUri() const {
    return m_location_uri;
}
void OAIDescribeLocationFsxWindowsResponse::setLocationUri(const QString &location_uri) {
    m_location_uri = location_uri;
    m_location_uri_isSet = true;
}

bool OAIDescribeLocationFsxWindowsResponse::is_location_uri_Set() const{
    return m_location_uri_isSet;
}

bool OAIDescribeLocationFsxWindowsResponse::is_location_uri_Valid() const{
    return m_location_uri_isValid;
}

QList OAIDescribeLocationFsxWindowsResponse::getSecurityGroupArns() const {
    return m_security_group_arns;
}
void OAIDescribeLocationFsxWindowsResponse::setSecurityGroupArns(const QList &security_group_arns) {
    m_security_group_arns = security_group_arns;
    m_security_group_arns_isSet = true;
}

bool OAIDescribeLocationFsxWindowsResponse::is_security_group_arns_Set() const{
    return m_security_group_arns_isSet;
}

bool OAIDescribeLocationFsxWindowsResponse::is_security_group_arns_Valid() const{
    return m_security_group_arns_isValid;
}

QDateTime OAIDescribeLocationFsxWindowsResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeLocationFsxWindowsResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeLocationFsxWindowsResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeLocationFsxWindowsResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIDescribeLocationFsxWindowsResponse::getUser() const {
    return m_user;
}
void OAIDescribeLocationFsxWindowsResponse::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIDescribeLocationFsxWindowsResponse::is_user_Set() const{
    return m_user_isSet;
}

bool OAIDescribeLocationFsxWindowsResponse::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIDescribeLocationFsxWindowsResponse::getDomain() const {
    return m_domain;
}
void OAIDescribeLocationFsxWindowsResponse::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIDescribeLocationFsxWindowsResponse::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIDescribeLocationFsxWindowsResponse::is_domain_Valid() const{
    return m_domain_isValid;
}

bool OAIDescribeLocationFsxWindowsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeLocationFsxWindowsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
