/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeLocationObjectStorageResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeLocationObjectStorageResponse::OAIDescribeLocationObjectStorageResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeLocationObjectStorageResponse::OAIDescribeLocationObjectStorageResponse() {
    this->initializeModel();
}

OAIDescribeLocationObjectStorageResponse::~OAIDescribeLocationObjectStorageResponse() {}

void OAIDescribeLocationObjectStorageResponse::initializeModel() {

    m_location_arn_isSet = false;
    m_location_arn_isValid = false;

    m_location_uri_isSet = false;
    m_location_uri_isValid = false;

    m_access_key_isSet = false;
    m_access_key_isValid = false;

    m_server_port_isSet = false;
    m_server_port_isValid = false;

    m_server_protocol_isSet = false;
    m_server_protocol_isValid = false;

    m_agent_arns_isSet = false;
    m_agent_arns_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_server_certificate_isSet = false;
    m_server_certificate_isValid = false;
}

void OAIDescribeLocationObjectStorageResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeLocationObjectStorageResponse::fromJsonObject(QJsonObject json) {

    m_location_arn_isValid = ::OpenAPI::fromJsonValue(m_location_arn, json[QString("LocationArn")]);
    m_location_arn_isSet = !json[QString("LocationArn")].isNull() && m_location_arn_isValid;

    m_location_uri_isValid = ::OpenAPI::fromJsonValue(m_location_uri, json[QString("LocationUri")]);
    m_location_uri_isSet = !json[QString("LocationUri")].isNull() && m_location_uri_isValid;

    m_access_key_isValid = ::OpenAPI::fromJsonValue(m_access_key, json[QString("AccessKey")]);
    m_access_key_isSet = !json[QString("AccessKey")].isNull() && m_access_key_isValid;

    m_server_port_isValid = ::OpenAPI::fromJsonValue(m_server_port, json[QString("ServerPort")]);
    m_server_port_isSet = !json[QString("ServerPort")].isNull() && m_server_port_isValid;

    m_server_protocol_isValid = ::OpenAPI::fromJsonValue(m_server_protocol, json[QString("ServerProtocol")]);
    m_server_protocol_isSet = !json[QString("ServerProtocol")].isNull() && m_server_protocol_isValid;

    m_agent_arns_isValid = ::OpenAPI::fromJsonValue(m_agent_arns, json[QString("AgentArns")]);
    m_agent_arns_isSet = !json[QString("AgentArns")].isNull() && m_agent_arns_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_server_certificate_isValid = ::OpenAPI::fromJsonValue(m_server_certificate, json[QString("ServerCertificate")]);
    m_server_certificate_isSet = !json[QString("ServerCertificate")].isNull() && m_server_certificate_isValid;
}

QString OAIDescribeLocationObjectStorageResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeLocationObjectStorageResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_location_arn_isSet) {
        obj.insert(QString("LocationArn"), ::OpenAPI::toJsonValue(m_location_arn));
    }
    if (m_location_uri_isSet) {
        obj.insert(QString("LocationUri"), ::OpenAPI::toJsonValue(m_location_uri));
    }
    if (m_access_key_isSet) {
        obj.insert(QString("AccessKey"), ::OpenAPI::toJsonValue(m_access_key));
    }
    if (m_server_port_isSet) {
        obj.insert(QString("ServerPort"), ::OpenAPI::toJsonValue(m_server_port));
    }
    if (m_server_protocol.isSet()) {
        obj.insert(QString("ServerProtocol"), ::OpenAPI::toJsonValue(m_server_protocol));
    }
    if (m_agent_arns.isSet()) {
        obj.insert(QString("AgentArns"), ::OpenAPI::toJsonValue(m_agent_arns));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_server_certificate_isSet) {
        obj.insert(QString("ServerCertificate"), ::OpenAPI::toJsonValue(m_server_certificate));
    }
    return obj;
}

QString OAIDescribeLocationObjectStorageResponse::getLocationArn() const {
    return m_location_arn;
}
void OAIDescribeLocationObjectStorageResponse::setLocationArn(const QString &location_arn) {
    m_location_arn = location_arn;
    m_location_arn_isSet = true;
}

bool OAIDescribeLocationObjectStorageResponse::is_location_arn_Set() const{
    return m_location_arn_isSet;
}

bool OAIDescribeLocationObjectStorageResponse::is_location_arn_Valid() const{
    return m_location_arn_isValid;
}

QString OAIDescribeLocationObjectStorageResponse::getLocationUri() const {
    return m_location_uri;
}
void OAIDescribeLocationObjectStorageResponse::setLocationUri(const QString &location_uri) {
    m_location_uri = location_uri;
    m_location_uri_isSet = true;
}

bool OAIDescribeLocationObjectStorageResponse::is_location_uri_Set() const{
    return m_location_uri_isSet;
}

bool OAIDescribeLocationObjectStorageResponse::is_location_uri_Valid() const{
    return m_location_uri_isValid;
}

QString OAIDescribeLocationObjectStorageResponse::getAccessKey() const {
    return m_access_key;
}
void OAIDescribeLocationObjectStorageResponse::setAccessKey(const QString &access_key) {
    m_access_key = access_key;
    m_access_key_isSet = true;
}

bool OAIDescribeLocationObjectStorageResponse::is_access_key_Set() const{
    return m_access_key_isSet;
}

bool OAIDescribeLocationObjectStorageResponse::is_access_key_Valid() const{
    return m_access_key_isValid;
}

qint32 OAIDescribeLocationObjectStorageResponse::getServerPort() const {
    return m_server_port;
}
void OAIDescribeLocationObjectStorageResponse::setServerPort(const qint32 &server_port) {
    m_server_port = server_port;
    m_server_port_isSet = true;
}

bool OAIDescribeLocationObjectStorageResponse::is_server_port_Set() const{
    return m_server_port_isSet;
}

bool OAIDescribeLocationObjectStorageResponse::is_server_port_Valid() const{
    return m_server_port_isValid;
}

OAIObjectStorageServerProtocol OAIDescribeLocationObjectStorageResponse::getServerProtocol() const {
    return m_server_protocol;
}
void OAIDescribeLocationObjectStorageResponse::setServerProtocol(const OAIObjectStorageServerProtocol &server_protocol) {
    m_server_protocol = server_protocol;
    m_server_protocol_isSet = true;
}

bool OAIDescribeLocationObjectStorageResponse::is_server_protocol_Set() const{
    return m_server_protocol_isSet;
}

bool OAIDescribeLocationObjectStorageResponse::is_server_protocol_Valid() const{
    return m_server_protocol_isValid;
}

QList OAIDescribeLocationObjectStorageResponse::getAgentArns() const {
    return m_agent_arns;
}
void OAIDescribeLocationObjectStorageResponse::setAgentArns(const QList &agent_arns) {
    m_agent_arns = agent_arns;
    m_agent_arns_isSet = true;
}

bool OAIDescribeLocationObjectStorageResponse::is_agent_arns_Set() const{
    return m_agent_arns_isSet;
}

bool OAIDescribeLocationObjectStorageResponse::is_agent_arns_Valid() const{
    return m_agent_arns_isValid;
}

QDateTime OAIDescribeLocationObjectStorageResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeLocationObjectStorageResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeLocationObjectStorageResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeLocationObjectStorageResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIDescribeLocationObjectStorageResponse::getServerCertificate() const {
    return m_server_certificate;
}
void OAIDescribeLocationObjectStorageResponse::setServerCertificate(const QString &server_certificate) {
    m_server_certificate = server_certificate;
    m_server_certificate_isSet = true;
}

bool OAIDescribeLocationObjectStorageResponse::is_server_certificate_Set() const{
    return m_server_certificate_isSet;
}

bool OAIDescribeLocationObjectStorageResponse::is_server_certificate_Valid() const{
    return m_server_certificate_isValid;
}

bool OAIDescribeLocationObjectStorageResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeLocationObjectStorageResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
