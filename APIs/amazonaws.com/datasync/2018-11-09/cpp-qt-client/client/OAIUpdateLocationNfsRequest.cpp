/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateLocationNfsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateLocationNfsRequest::OAIUpdateLocationNfsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateLocationNfsRequest::OAIUpdateLocationNfsRequest() {
    this->initializeModel();
}

OAIUpdateLocationNfsRequest::~OAIUpdateLocationNfsRequest() {}

void OAIUpdateLocationNfsRequest::initializeModel() {

    m_location_arn_isSet = false;
    m_location_arn_isValid = false;

    m_subdirectory_isSet = false;
    m_subdirectory_isValid = false;

    m_on_prem_config_isSet = false;
    m_on_prem_config_isValid = false;

    m_mount_options_isSet = false;
    m_mount_options_isValid = false;
}

void OAIUpdateLocationNfsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateLocationNfsRequest::fromJsonObject(QJsonObject json) {

    m_location_arn_isValid = ::OpenAPI::fromJsonValue(m_location_arn, json[QString("LocationArn")]);
    m_location_arn_isSet = !json[QString("LocationArn")].isNull() && m_location_arn_isValid;

    m_subdirectory_isValid = ::OpenAPI::fromJsonValue(m_subdirectory, json[QString("Subdirectory")]);
    m_subdirectory_isSet = !json[QString("Subdirectory")].isNull() && m_subdirectory_isValid;

    m_on_prem_config_isValid = ::OpenAPI::fromJsonValue(m_on_prem_config, json[QString("OnPremConfig")]);
    m_on_prem_config_isSet = !json[QString("OnPremConfig")].isNull() && m_on_prem_config_isValid;

    m_mount_options_isValid = ::OpenAPI::fromJsonValue(m_mount_options, json[QString("MountOptions")]);
    m_mount_options_isSet = !json[QString("MountOptions")].isNull() && m_mount_options_isValid;
}

QString OAIUpdateLocationNfsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateLocationNfsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_location_arn_isSet) {
        obj.insert(QString("LocationArn"), ::OpenAPI::toJsonValue(m_location_arn));
    }
    if (m_subdirectory_isSet) {
        obj.insert(QString("Subdirectory"), ::OpenAPI::toJsonValue(m_subdirectory));
    }
    if (m_on_prem_config.isSet()) {
        obj.insert(QString("OnPremConfig"), ::OpenAPI::toJsonValue(m_on_prem_config));
    }
    if (m_mount_options.isSet()) {
        obj.insert(QString("MountOptions"), ::OpenAPI::toJsonValue(m_mount_options));
    }
    return obj;
}

QString OAIUpdateLocationNfsRequest::getLocationArn() const {
    return m_location_arn;
}
void OAIUpdateLocationNfsRequest::setLocationArn(const QString &location_arn) {
    m_location_arn = location_arn;
    m_location_arn_isSet = true;
}

bool OAIUpdateLocationNfsRequest::is_location_arn_Set() const{
    return m_location_arn_isSet;
}

bool OAIUpdateLocationNfsRequest::is_location_arn_Valid() const{
    return m_location_arn_isValid;
}

QString OAIUpdateLocationNfsRequest::getSubdirectory() const {
    return m_subdirectory;
}
void OAIUpdateLocationNfsRequest::setSubdirectory(const QString &subdirectory) {
    m_subdirectory = subdirectory;
    m_subdirectory_isSet = true;
}

bool OAIUpdateLocationNfsRequest::is_subdirectory_Set() const{
    return m_subdirectory_isSet;
}

bool OAIUpdateLocationNfsRequest::is_subdirectory_Valid() const{
    return m_subdirectory_isValid;
}

OAIOnPremConfig OAIUpdateLocationNfsRequest::getOnPremConfig() const {
    return m_on_prem_config;
}
void OAIUpdateLocationNfsRequest::setOnPremConfig(const OAIOnPremConfig &on_prem_config) {
    m_on_prem_config = on_prem_config;
    m_on_prem_config_isSet = true;
}

bool OAIUpdateLocationNfsRequest::is_on_prem_config_Set() const{
    return m_on_prem_config_isSet;
}

bool OAIUpdateLocationNfsRequest::is_on_prem_config_Valid() const{
    return m_on_prem_config_isValid;
}

OAINfsMountOptions OAIUpdateLocationNfsRequest::getMountOptions() const {
    return m_mount_options;
}
void OAIUpdateLocationNfsRequest::setMountOptions(const OAINfsMountOptions &mount_options) {
    m_mount_options = mount_options;
    m_mount_options_isSet = true;
}

bool OAIUpdateLocationNfsRequest::is_mount_options_Set() const{
    return m_mount_options_isSet;
}

bool OAIUpdateLocationNfsRequest::is_mount_options_Valid() const{
    return m_mount_options_isValid;
}

bool OAIUpdateLocationNfsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subdirectory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_prem_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mount_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateLocationNfsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_location_arn_isValid && true;
}

} // namespace OpenAPI
