/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiscoveryServerConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiscoveryServerConfiguration::OAIDiscoveryServerConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiscoveryServerConfiguration::OAIDiscoveryServerConfiguration() {
    this->initializeModel();
}

OAIDiscoveryServerConfiguration::~OAIDiscoveryServerConfiguration() {}

void OAIDiscoveryServerConfiguration::initializeModel() {

    m_server_hostname_isSet = false;
    m_server_hostname_isValid = false;

    m_server_port_isSet = false;
    m_server_port_isValid = false;
}

void OAIDiscoveryServerConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiscoveryServerConfiguration::fromJsonObject(QJsonObject json) {

    m_server_hostname_isValid = ::OpenAPI::fromJsonValue(m_server_hostname, json[QString("ServerHostname")]);
    m_server_hostname_isSet = !json[QString("ServerHostname")].isNull() && m_server_hostname_isValid;

    m_server_port_isValid = ::OpenAPI::fromJsonValue(m_server_port, json[QString("ServerPort")]);
    m_server_port_isSet = !json[QString("ServerPort")].isNull() && m_server_port_isValid;
}

QString OAIDiscoveryServerConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiscoveryServerConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_server_hostname_isSet) {
        obj.insert(QString("ServerHostname"), ::OpenAPI::toJsonValue(m_server_hostname));
    }
    if (m_server_port_isSet) {
        obj.insert(QString("ServerPort"), ::OpenAPI::toJsonValue(m_server_port));
    }
    return obj;
}

QString OAIDiscoveryServerConfiguration::getServerHostname() const {
    return m_server_hostname;
}
void OAIDiscoveryServerConfiguration::setServerHostname(const QString &server_hostname) {
    m_server_hostname = server_hostname;
    m_server_hostname_isSet = true;
}

bool OAIDiscoveryServerConfiguration::is_server_hostname_Set() const{
    return m_server_hostname_isSet;
}

bool OAIDiscoveryServerConfiguration::is_server_hostname_Valid() const{
    return m_server_hostname_isValid;
}

qint32 OAIDiscoveryServerConfiguration::getServerPort() const {
    return m_server_port;
}
void OAIDiscoveryServerConfiguration::setServerPort(const qint32 &server_port) {
    m_server_port = server_port;
    m_server_port_isSet = true;
}

bool OAIDiscoveryServerConfiguration::is_server_port_Set() const{
    return m_server_port_isSet;
}

bool OAIDiscoveryServerConfiguration::is_server_port_Valid() const{
    return m_server_port_isValid;
}

bool OAIDiscoveryServerConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_server_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_port_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiscoveryServerConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_server_hostname_isValid && true;
}

} // namespace OpenAPI
