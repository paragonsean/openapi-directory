/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLocationAzureBlobRequest_SasConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLocationAzureBlobRequest_SasConfiguration::OAICreateLocationAzureBlobRequest_SasConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLocationAzureBlobRequest_SasConfiguration::OAICreateLocationAzureBlobRequest_SasConfiguration() {
    this->initializeModel();
}

OAICreateLocationAzureBlobRequest_SasConfiguration::~OAICreateLocationAzureBlobRequest_SasConfiguration() {}

void OAICreateLocationAzureBlobRequest_SasConfiguration::initializeModel() {

    m_token_isSet = false;
    m_token_isValid = false;
}

void OAICreateLocationAzureBlobRequest_SasConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLocationAzureBlobRequest_SasConfiguration::fromJsonObject(QJsonObject json) {

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("Token")]);
    m_token_isSet = !json[QString("Token")].isNull() && m_token_isValid;
}

QString OAICreateLocationAzureBlobRequest_SasConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLocationAzureBlobRequest_SasConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_token_isSet) {
        obj.insert(QString("Token"), ::OpenAPI::toJsonValue(m_token));
    }
    return obj;
}

QString OAICreateLocationAzureBlobRequest_SasConfiguration::getToken() const {
    return m_token;
}
void OAICreateLocationAzureBlobRequest_SasConfiguration::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAICreateLocationAzureBlobRequest_SasConfiguration::is_token_Set() const{
    return m_token_isSet;
}

bool OAICreateLocationAzureBlobRequest_SasConfiguration::is_token_Valid() const{
    return m_token_isValid;
}

bool OAICreateLocationAzureBlobRequest_SasConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLocationAzureBlobRequest_SasConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_token_isValid && true;
}

} // namespace OpenAPI
