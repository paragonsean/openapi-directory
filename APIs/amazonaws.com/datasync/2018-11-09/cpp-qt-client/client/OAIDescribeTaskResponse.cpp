/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeTaskResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeTaskResponse::OAIDescribeTaskResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeTaskResponse::OAIDescribeTaskResponse() {
    this->initializeModel();
}

OAIDescribeTaskResponse::~OAIDescribeTaskResponse() {}

void OAIDescribeTaskResponse::initializeModel() {

    m_task_arn_isSet = false;
    m_task_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_current_task_execution_arn_isSet = false;
    m_current_task_execution_arn_isValid = false;

    m_source_location_arn_isSet = false;
    m_source_location_arn_isValid = false;

    m_destination_location_arn_isSet = false;
    m_destination_location_arn_isValid = false;

    m_cloud_watch_log_group_arn_isSet = false;
    m_cloud_watch_log_group_arn_isValid = false;

    m_source_network_interface_arns_isSet = false;
    m_source_network_interface_arns_isValid = false;

    m_destination_network_interface_arns_isSet = false;
    m_destination_network_interface_arns_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_excludes_isSet = false;
    m_excludes_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_detail_isSet = false;
    m_error_detail_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_includes_isSet = false;
    m_includes_isValid = false;
}

void OAIDescribeTaskResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeTaskResponse::fromJsonObject(QJsonObject json) {

    m_task_arn_isValid = ::OpenAPI::fromJsonValue(m_task_arn, json[QString("TaskArn")]);
    m_task_arn_isSet = !json[QString("TaskArn")].isNull() && m_task_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_current_task_execution_arn_isValid = ::OpenAPI::fromJsonValue(m_current_task_execution_arn, json[QString("CurrentTaskExecutionArn")]);
    m_current_task_execution_arn_isSet = !json[QString("CurrentTaskExecutionArn")].isNull() && m_current_task_execution_arn_isValid;

    m_source_location_arn_isValid = ::OpenAPI::fromJsonValue(m_source_location_arn, json[QString("SourceLocationArn")]);
    m_source_location_arn_isSet = !json[QString("SourceLocationArn")].isNull() && m_source_location_arn_isValid;

    m_destination_location_arn_isValid = ::OpenAPI::fromJsonValue(m_destination_location_arn, json[QString("DestinationLocationArn")]);
    m_destination_location_arn_isSet = !json[QString("DestinationLocationArn")].isNull() && m_destination_location_arn_isValid;

    m_cloud_watch_log_group_arn_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_log_group_arn, json[QString("CloudWatchLogGroupArn")]);
    m_cloud_watch_log_group_arn_isSet = !json[QString("CloudWatchLogGroupArn")].isNull() && m_cloud_watch_log_group_arn_isValid;

    m_source_network_interface_arns_isValid = ::OpenAPI::fromJsonValue(m_source_network_interface_arns, json[QString("SourceNetworkInterfaceArns")]);
    m_source_network_interface_arns_isSet = !json[QString("SourceNetworkInterfaceArns")].isNull() && m_source_network_interface_arns_isValid;

    m_destination_network_interface_arns_isValid = ::OpenAPI::fromJsonValue(m_destination_network_interface_arns, json[QString("DestinationNetworkInterfaceArns")]);
    m_destination_network_interface_arns_isSet = !json[QString("DestinationNetworkInterfaceArns")].isNull() && m_destination_network_interface_arns_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("Options")]);
    m_options_isSet = !json[QString("Options")].isNull() && m_options_isValid;

    m_excludes_isValid = ::OpenAPI::fromJsonValue(m_excludes, json[QString("Excludes")]);
    m_excludes_isSet = !json[QString("Excludes")].isNull() && m_excludes_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("Schedule")]);
    m_schedule_isSet = !json[QString("Schedule")].isNull() && m_schedule_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("ErrorCode")]);
    m_error_code_isSet = !json[QString("ErrorCode")].isNull() && m_error_code_isValid;

    m_error_detail_isValid = ::OpenAPI::fromJsonValue(m_error_detail, json[QString("ErrorDetail")]);
    m_error_detail_isSet = !json[QString("ErrorDetail")].isNull() && m_error_detail_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_includes_isValid = ::OpenAPI::fromJsonValue(m_includes, json[QString("Includes")]);
    m_includes_isSet = !json[QString("Includes")].isNull() && m_includes_isValid;
}

QString OAIDescribeTaskResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeTaskResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_task_arn_isSet) {
        obj.insert(QString("TaskArn"), ::OpenAPI::toJsonValue(m_task_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_current_task_execution_arn_isSet) {
        obj.insert(QString("CurrentTaskExecutionArn"), ::OpenAPI::toJsonValue(m_current_task_execution_arn));
    }
    if (m_source_location_arn_isSet) {
        obj.insert(QString("SourceLocationArn"), ::OpenAPI::toJsonValue(m_source_location_arn));
    }
    if (m_destination_location_arn_isSet) {
        obj.insert(QString("DestinationLocationArn"), ::OpenAPI::toJsonValue(m_destination_location_arn));
    }
    if (m_cloud_watch_log_group_arn_isSet) {
        obj.insert(QString("CloudWatchLogGroupArn"), ::OpenAPI::toJsonValue(m_cloud_watch_log_group_arn));
    }
    if (m_source_network_interface_arns.isSet()) {
        obj.insert(QString("SourceNetworkInterfaceArns"), ::OpenAPI::toJsonValue(m_source_network_interface_arns));
    }
    if (m_destination_network_interface_arns.isSet()) {
        obj.insert(QString("DestinationNetworkInterfaceArns"), ::OpenAPI::toJsonValue(m_destination_network_interface_arns));
    }
    if (m_options.isSet()) {
        obj.insert(QString("Options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_excludes.isSet()) {
        obj.insert(QString("Excludes"), ::OpenAPI::toJsonValue(m_excludes));
    }
    if (m_schedule.isSet()) {
        obj.insert(QString("Schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("ErrorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_detail_isSet) {
        obj.insert(QString("ErrorDetail"), ::OpenAPI::toJsonValue(m_error_detail));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_includes.isSet()) {
        obj.insert(QString("Includes"), ::OpenAPI::toJsonValue(m_includes));
    }
    return obj;
}

QString OAIDescribeTaskResponse::getTaskArn() const {
    return m_task_arn;
}
void OAIDescribeTaskResponse::setTaskArn(const QString &task_arn) {
    m_task_arn = task_arn;
    m_task_arn_isSet = true;
}

bool OAIDescribeTaskResponse::is_task_arn_Set() const{
    return m_task_arn_isSet;
}

bool OAIDescribeTaskResponse::is_task_arn_Valid() const{
    return m_task_arn_isValid;
}

OAITaskStatus OAIDescribeTaskResponse::getStatus() const {
    return m_status;
}
void OAIDescribeTaskResponse::setStatus(const OAITaskStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeTaskResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeTaskResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeTaskResponse::getName() const {
    return m_name;
}
void OAIDescribeTaskResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeTaskResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeTaskResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDescribeTaskResponse::getCurrentTaskExecutionArn() const {
    return m_current_task_execution_arn;
}
void OAIDescribeTaskResponse::setCurrentTaskExecutionArn(const QString &current_task_execution_arn) {
    m_current_task_execution_arn = current_task_execution_arn;
    m_current_task_execution_arn_isSet = true;
}

bool OAIDescribeTaskResponse::is_current_task_execution_arn_Set() const{
    return m_current_task_execution_arn_isSet;
}

bool OAIDescribeTaskResponse::is_current_task_execution_arn_Valid() const{
    return m_current_task_execution_arn_isValid;
}

QString OAIDescribeTaskResponse::getSourceLocationArn() const {
    return m_source_location_arn;
}
void OAIDescribeTaskResponse::setSourceLocationArn(const QString &source_location_arn) {
    m_source_location_arn = source_location_arn;
    m_source_location_arn_isSet = true;
}

bool OAIDescribeTaskResponse::is_source_location_arn_Set() const{
    return m_source_location_arn_isSet;
}

bool OAIDescribeTaskResponse::is_source_location_arn_Valid() const{
    return m_source_location_arn_isValid;
}

QString OAIDescribeTaskResponse::getDestinationLocationArn() const {
    return m_destination_location_arn;
}
void OAIDescribeTaskResponse::setDestinationLocationArn(const QString &destination_location_arn) {
    m_destination_location_arn = destination_location_arn;
    m_destination_location_arn_isSet = true;
}

bool OAIDescribeTaskResponse::is_destination_location_arn_Set() const{
    return m_destination_location_arn_isSet;
}

bool OAIDescribeTaskResponse::is_destination_location_arn_Valid() const{
    return m_destination_location_arn_isValid;
}

QString OAIDescribeTaskResponse::getCloudWatchLogGroupArn() const {
    return m_cloud_watch_log_group_arn;
}
void OAIDescribeTaskResponse::setCloudWatchLogGroupArn(const QString &cloud_watch_log_group_arn) {
    m_cloud_watch_log_group_arn = cloud_watch_log_group_arn;
    m_cloud_watch_log_group_arn_isSet = true;
}

bool OAIDescribeTaskResponse::is_cloud_watch_log_group_arn_Set() const{
    return m_cloud_watch_log_group_arn_isSet;
}

bool OAIDescribeTaskResponse::is_cloud_watch_log_group_arn_Valid() const{
    return m_cloud_watch_log_group_arn_isValid;
}

QList OAIDescribeTaskResponse::getSourceNetworkInterfaceArns() const {
    return m_source_network_interface_arns;
}
void OAIDescribeTaskResponse::setSourceNetworkInterfaceArns(const QList &source_network_interface_arns) {
    m_source_network_interface_arns = source_network_interface_arns;
    m_source_network_interface_arns_isSet = true;
}

bool OAIDescribeTaskResponse::is_source_network_interface_arns_Set() const{
    return m_source_network_interface_arns_isSet;
}

bool OAIDescribeTaskResponse::is_source_network_interface_arns_Valid() const{
    return m_source_network_interface_arns_isValid;
}

QList OAIDescribeTaskResponse::getDestinationNetworkInterfaceArns() const {
    return m_destination_network_interface_arns;
}
void OAIDescribeTaskResponse::setDestinationNetworkInterfaceArns(const QList &destination_network_interface_arns) {
    m_destination_network_interface_arns = destination_network_interface_arns;
    m_destination_network_interface_arns_isSet = true;
}

bool OAIDescribeTaskResponse::is_destination_network_interface_arns_Set() const{
    return m_destination_network_interface_arns_isSet;
}

bool OAIDescribeTaskResponse::is_destination_network_interface_arns_Valid() const{
    return m_destination_network_interface_arns_isValid;
}

OAIDescribeTaskResponse_Options OAIDescribeTaskResponse::getOptions() const {
    return m_options;
}
void OAIDescribeTaskResponse::setOptions(const OAIDescribeTaskResponse_Options &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIDescribeTaskResponse::is_options_Set() const{
    return m_options_isSet;
}

bool OAIDescribeTaskResponse::is_options_Valid() const{
    return m_options_isValid;
}

QList OAIDescribeTaskResponse::getExcludes() const {
    return m_excludes;
}
void OAIDescribeTaskResponse::setExcludes(const QList &excludes) {
    m_excludes = excludes;
    m_excludes_isSet = true;
}

bool OAIDescribeTaskResponse::is_excludes_Set() const{
    return m_excludes_isSet;
}

bool OAIDescribeTaskResponse::is_excludes_Valid() const{
    return m_excludes_isValid;
}

OAIDescribeTaskResponse_Schedule OAIDescribeTaskResponse::getSchedule() const {
    return m_schedule;
}
void OAIDescribeTaskResponse::setSchedule(const OAIDescribeTaskResponse_Schedule &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIDescribeTaskResponse::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIDescribeTaskResponse::is_schedule_Valid() const{
    return m_schedule_isValid;
}

QString OAIDescribeTaskResponse::getErrorCode() const {
    return m_error_code;
}
void OAIDescribeTaskResponse::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIDescribeTaskResponse::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIDescribeTaskResponse::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIDescribeTaskResponse::getErrorDetail() const {
    return m_error_detail;
}
void OAIDescribeTaskResponse::setErrorDetail(const QString &error_detail) {
    m_error_detail = error_detail;
    m_error_detail_isSet = true;
}

bool OAIDescribeTaskResponse::is_error_detail_Set() const{
    return m_error_detail_isSet;
}

bool OAIDescribeTaskResponse::is_error_detail_Valid() const{
    return m_error_detail_isValid;
}

QDateTime OAIDescribeTaskResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeTaskResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeTaskResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeTaskResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QList OAIDescribeTaskResponse::getIncludes() const {
    return m_includes;
}
void OAIDescribeTaskResponse::setIncludes(const QList &includes) {
    m_includes = includes;
    m_includes_isSet = true;
}

bool OAIDescribeTaskResponse::is_includes_Set() const{
    return m_includes_isSet;
}

bool OAIDescribeTaskResponse::is_includes_Valid() const{
    return m_includes_isValid;
}

bool OAIDescribeTaskResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_task_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_task_execution_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_location_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_location_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_log_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_network_interface_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_network_interface_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_excludes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_includes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeTaskResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
