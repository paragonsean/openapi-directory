/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLocationAzureBlobResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLocationAzureBlobResponse::OAICreateLocationAzureBlobResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLocationAzureBlobResponse::OAICreateLocationAzureBlobResponse() {
    this->initializeModel();
}

OAICreateLocationAzureBlobResponse::~OAICreateLocationAzureBlobResponse() {}

void OAICreateLocationAzureBlobResponse::initializeModel() {

    m_location_arn_isSet = false;
    m_location_arn_isValid = false;
}

void OAICreateLocationAzureBlobResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLocationAzureBlobResponse::fromJsonObject(QJsonObject json) {

    m_location_arn_isValid = ::OpenAPI::fromJsonValue(m_location_arn, json[QString("LocationArn")]);
    m_location_arn_isSet = !json[QString("LocationArn")].isNull() && m_location_arn_isValid;
}

QString OAICreateLocationAzureBlobResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLocationAzureBlobResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_location_arn_isSet) {
        obj.insert(QString("LocationArn"), ::OpenAPI::toJsonValue(m_location_arn));
    }
    return obj;
}

QString OAICreateLocationAzureBlobResponse::getLocationArn() const {
    return m_location_arn;
}
void OAICreateLocationAzureBlobResponse::setLocationArn(const QString &location_arn) {
    m_location_arn = location_arn;
    m_location_arn_isSet = true;
}

bool OAICreateLocationAzureBlobResponse::is_location_arn_Set() const{
    return m_location_arn_isSet;
}

bool OAICreateLocationAzureBlobResponse::is_location_arn_Valid() const{
    return m_location_arn_isValid;
}

bool OAICreateLocationAzureBlobResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLocationAzureBlobResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
