/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3StorageClass.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3StorageClass::OAIS3StorageClass(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3StorageClass::OAIS3StorageClass() {
    this->initializeModel();
}

OAIS3StorageClass::~OAIS3StorageClass() {}

void OAIS3StorageClass::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIS3StorageClass::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIS3StorageClass::fromJson(QString jsonString) {
    
    if ( jsonString.compare("STANDARD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3StorageClass::STANDARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STANDARD_IA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3StorageClass::STANDARD_IA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ONEZONE_IA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3StorageClass::ONEZONE_IA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INTELLIGENT_TIERING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3StorageClass::INTELLIGENT_TIERING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GLACIER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3StorageClass::GLACIER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEEP_ARCHIVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3StorageClass::DEEP_ARCHIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OUTPOSTS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3StorageClass::OUTPOSTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GLACIER_INSTANT_RETRIEVAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3StorageClass::GLACIER_INSTANT_RETRIEVAL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIS3StorageClass::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIS3StorageClass::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIS3StorageClass::STANDARD:
            val = "STANDARD";
            break;
        case eOAIS3StorageClass::STANDARD_IA:
            val = "STANDARD_IA";
            break;
        case eOAIS3StorageClass::ONEZONE_IA:
            val = "ONEZONE_IA";
            break;
        case eOAIS3StorageClass::INTELLIGENT_TIERING:
            val = "INTELLIGENT_TIERING";
            break;
        case eOAIS3StorageClass::GLACIER:
            val = "GLACIER";
            break;
        case eOAIS3StorageClass::DEEP_ARCHIVE:
            val = "DEEP_ARCHIVE";
            break;
        case eOAIS3StorageClass::OUTPOSTS:
            val = "OUTPOSTS";
            break;
        case eOAIS3StorageClass::GLACIER_INSTANT_RETRIEVAL:
            val = "GLACIER_INSTANT_RETRIEVAL";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIS3StorageClass::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIS3StorageClass::eOAIS3StorageClass OAIS3StorageClass::getValue() const {
    return m_value;
}

void OAIS3StorageClass::setValue(const OAIS3StorageClass::eOAIS3StorageClass& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIS3StorageClass::isSet() const {
    
    return m_value_isSet;
}

bool OAIS3StorageClass::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
