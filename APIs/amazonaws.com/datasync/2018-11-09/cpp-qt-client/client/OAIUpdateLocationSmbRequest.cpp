/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateLocationSmbRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateLocationSmbRequest::OAIUpdateLocationSmbRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateLocationSmbRequest::OAIUpdateLocationSmbRequest() {
    this->initializeModel();
}

OAIUpdateLocationSmbRequest::~OAIUpdateLocationSmbRequest() {}

void OAIUpdateLocationSmbRequest::initializeModel() {

    m_location_arn_isSet = false;
    m_location_arn_isValid = false;

    m_subdirectory_isSet = false;
    m_subdirectory_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_agent_arns_isSet = false;
    m_agent_arns_isValid = false;

    m_mount_options_isSet = false;
    m_mount_options_isValid = false;
}

void OAIUpdateLocationSmbRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateLocationSmbRequest::fromJsonObject(QJsonObject json) {

    m_location_arn_isValid = ::OpenAPI::fromJsonValue(m_location_arn, json[QString("LocationArn")]);
    m_location_arn_isSet = !json[QString("LocationArn")].isNull() && m_location_arn_isValid;

    m_subdirectory_isValid = ::OpenAPI::fromJsonValue(m_subdirectory, json[QString("Subdirectory")]);
    m_subdirectory_isSet = !json[QString("Subdirectory")].isNull() && m_subdirectory_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("User")]);
    m_user_isSet = !json[QString("User")].isNull() && m_user_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("Password")]);
    m_password_isSet = !json[QString("Password")].isNull() && m_password_isValid;

    m_agent_arns_isValid = ::OpenAPI::fromJsonValue(m_agent_arns, json[QString("AgentArns")]);
    m_agent_arns_isSet = !json[QString("AgentArns")].isNull() && m_agent_arns_isValid;

    m_mount_options_isValid = ::OpenAPI::fromJsonValue(m_mount_options, json[QString("MountOptions")]);
    m_mount_options_isSet = !json[QString("MountOptions")].isNull() && m_mount_options_isValid;
}

QString OAIUpdateLocationSmbRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateLocationSmbRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_location_arn_isSet) {
        obj.insert(QString("LocationArn"), ::OpenAPI::toJsonValue(m_location_arn));
    }
    if (m_subdirectory_isSet) {
        obj.insert(QString("Subdirectory"), ::OpenAPI::toJsonValue(m_subdirectory));
    }
    if (m_user_isSet) {
        obj.insert(QString("User"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_domain_isSet) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_password_isSet) {
        obj.insert(QString("Password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_agent_arns.isSet()) {
        obj.insert(QString("AgentArns"), ::OpenAPI::toJsonValue(m_agent_arns));
    }
    if (m_mount_options.isSet()) {
        obj.insert(QString("MountOptions"), ::OpenAPI::toJsonValue(m_mount_options));
    }
    return obj;
}

QString OAIUpdateLocationSmbRequest::getLocationArn() const {
    return m_location_arn;
}
void OAIUpdateLocationSmbRequest::setLocationArn(const QString &location_arn) {
    m_location_arn = location_arn;
    m_location_arn_isSet = true;
}

bool OAIUpdateLocationSmbRequest::is_location_arn_Set() const{
    return m_location_arn_isSet;
}

bool OAIUpdateLocationSmbRequest::is_location_arn_Valid() const{
    return m_location_arn_isValid;
}

QString OAIUpdateLocationSmbRequest::getSubdirectory() const {
    return m_subdirectory;
}
void OAIUpdateLocationSmbRequest::setSubdirectory(const QString &subdirectory) {
    m_subdirectory = subdirectory;
    m_subdirectory_isSet = true;
}

bool OAIUpdateLocationSmbRequest::is_subdirectory_Set() const{
    return m_subdirectory_isSet;
}

bool OAIUpdateLocationSmbRequest::is_subdirectory_Valid() const{
    return m_subdirectory_isValid;
}

QString OAIUpdateLocationSmbRequest::getUser() const {
    return m_user;
}
void OAIUpdateLocationSmbRequest::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIUpdateLocationSmbRequest::is_user_Set() const{
    return m_user_isSet;
}

bool OAIUpdateLocationSmbRequest::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIUpdateLocationSmbRequest::getDomain() const {
    return m_domain;
}
void OAIUpdateLocationSmbRequest::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIUpdateLocationSmbRequest::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIUpdateLocationSmbRequest::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIUpdateLocationSmbRequest::getPassword() const {
    return m_password;
}
void OAIUpdateLocationSmbRequest::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIUpdateLocationSmbRequest::is_password_Set() const{
    return m_password_isSet;
}

bool OAIUpdateLocationSmbRequest::is_password_Valid() const{
    return m_password_isValid;
}

QList OAIUpdateLocationSmbRequest::getAgentArns() const {
    return m_agent_arns;
}
void OAIUpdateLocationSmbRequest::setAgentArns(const QList &agent_arns) {
    m_agent_arns = agent_arns;
    m_agent_arns_isSet = true;
}

bool OAIUpdateLocationSmbRequest::is_agent_arns_Set() const{
    return m_agent_arns_isSet;
}

bool OAIUpdateLocationSmbRequest::is_agent_arns_Valid() const{
    return m_agent_arns_isValid;
}

OAISmbMountOptions OAIUpdateLocationSmbRequest::getMountOptions() const {
    return m_mount_options;
}
void OAIUpdateLocationSmbRequest::setMountOptions(const OAISmbMountOptions &mount_options) {
    m_mount_options = mount_options;
    m_mount_options_isSet = true;
}

bool OAIUpdateLocationSmbRequest::is_mount_options_Set() const{
    return m_mount_options_isSet;
}

bool OAIUpdateLocationSmbRequest::is_mount_options_Valid() const{
    return m_mount_options_isValid;
}

bool OAIUpdateLocationSmbRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subdirectory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mount_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateLocationSmbRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_location_arn_isValid && true;
}

} // namespace OpenAPI
