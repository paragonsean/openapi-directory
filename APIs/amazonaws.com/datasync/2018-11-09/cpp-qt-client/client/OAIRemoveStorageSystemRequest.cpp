/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemoveStorageSystemRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRemoveStorageSystemRequest::OAIRemoveStorageSystemRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRemoveStorageSystemRequest::OAIRemoveStorageSystemRequest() {
    this->initializeModel();
}

OAIRemoveStorageSystemRequest::~OAIRemoveStorageSystemRequest() {}

void OAIRemoveStorageSystemRequest::initializeModel() {

    m_storage_system_arn_isSet = false;
    m_storage_system_arn_isValid = false;
}

void OAIRemoveStorageSystemRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRemoveStorageSystemRequest::fromJsonObject(QJsonObject json) {

    m_storage_system_arn_isValid = ::OpenAPI::fromJsonValue(m_storage_system_arn, json[QString("StorageSystemArn")]);
    m_storage_system_arn_isSet = !json[QString("StorageSystemArn")].isNull() && m_storage_system_arn_isValid;
}

QString OAIRemoveStorageSystemRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRemoveStorageSystemRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_storage_system_arn_isSet) {
        obj.insert(QString("StorageSystemArn"), ::OpenAPI::toJsonValue(m_storage_system_arn));
    }
    return obj;
}

QString OAIRemoveStorageSystemRequest::getStorageSystemArn() const {
    return m_storage_system_arn;
}
void OAIRemoveStorageSystemRequest::setStorageSystemArn(const QString &storage_system_arn) {
    m_storage_system_arn = storage_system_arn;
    m_storage_system_arn_isSet = true;
}

bool OAIRemoveStorageSystemRequest::is_storage_system_arn_Set() const{
    return m_storage_system_arn_isSet;
}

bool OAIRemoveStorageSystemRequest::is_storage_system_arn_Valid() const{
    return m_storage_system_arn_isValid;
}

bool OAIRemoveStorageSystemRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_storage_system_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRemoveStorageSystemRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_storage_system_arn_isValid && true;
}

} // namespace OpenAPI
