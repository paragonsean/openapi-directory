/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocationFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocationFilter::OAILocationFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocationFilter::OAILocationFilter() {
    this->initializeModel();
}

OAILocationFilter::~OAILocationFilter() {}

void OAILocationFilter::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;
}

void OAILocationFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocationFilter::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("Values")]);
    m_values_isSet = !json[QString("Values")].isNull() && m_values_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("Operator")]);
    m_r_operator_isSet = !json[QString("Operator")].isNull() && m_r_operator_isValid;
}

QString OAILocationFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocationFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_name.isSet()) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_values.isSet()) {
        obj.insert(QString("Values"), ::OpenAPI::toJsonValue(m_values));
    }
    if (m_r_operator.isSet()) {
        obj.insert(QString("Operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    return obj;
}

OAILocationFilterName OAILocationFilter::getName() const {
    return m_name;
}
void OAILocationFilter::setName(const OAILocationFilterName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILocationFilter::is_name_Set() const{
    return m_name_isSet;
}

bool OAILocationFilter::is_name_Valid() const{
    return m_name_isValid;
}

QList OAILocationFilter::getValues() const {
    return m_values;
}
void OAILocationFilter::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAILocationFilter::is_values_Set() const{
    return m_values_isSet;
}

bool OAILocationFilter::is_values_Valid() const{
    return m_values_isValid;
}

OAIOperator OAILocationFilter::getROperator() const {
    return m_r_operator;
}
void OAILocationFilter::setROperator(const OAIOperator &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAILocationFilter::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAILocationFilter::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

bool OAILocationFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocationFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_values_isValid && m_r_operator_isValid && true;
}

} // namespace OpenAPI
