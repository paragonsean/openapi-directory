/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListLocationsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListLocationsResponse::OAIListLocationsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListLocationsResponse::OAIListLocationsResponse() {
    this->initializeModel();
}

OAIListLocationsResponse::~OAIListLocationsResponse() {}

void OAIListLocationsResponse::initializeModel() {

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListLocationsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListLocationsResponse::fromJsonObject(QJsonObject json) {

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("Locations")]);
    m_locations_isSet = !json[QString("Locations")].isNull() && m_locations_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListLocationsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListLocationsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_locations.isSet()) {
        obj.insert(QString("Locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListLocationsResponse::getLocations() const {
    return m_locations;
}
void OAIListLocationsResponse::setLocations(const QList &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIListLocationsResponse::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIListLocationsResponse::is_locations_Valid() const{
    return m_locations_isValid;
}

QString OAIListLocationsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListLocationsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListLocationsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListLocationsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListLocationsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_locations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListLocationsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
