/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceMetrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceMetrics::OAIResourceMetrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceMetrics::OAIResourceMetrics() {
    this->initializeModel();
}

OAIResourceMetrics::~OAIResourceMetrics() {}

void OAIResourceMetrics::initializeModel() {

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_p95_metrics_isSet = false;
    m_p95_metrics_isValid = false;

    m_capacity_isSet = false;
    m_capacity_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;
}

void OAIResourceMetrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceMetrics::fromJsonObject(QJsonObject json) {

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("Timestamp")]);
    m_timestamp_isSet = !json[QString("Timestamp")].isNull() && m_timestamp_isValid;

    m_p95_metrics_isValid = ::OpenAPI::fromJsonValue(m_p95_metrics, json[QString("P95Metrics")]);
    m_p95_metrics_isSet = !json[QString("P95Metrics")].isNull() && m_p95_metrics_isValid;

    m_capacity_isValid = ::OpenAPI::fromJsonValue(m_capacity, json[QString("Capacity")]);
    m_capacity_isSet = !json[QString("Capacity")].isNull() && m_capacity_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("ResourceId")]);
    m_resource_id_isSet = !json[QString("ResourceId")].isNull() && m_resource_id_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("ResourceType")]);
    m_resource_type_isSet = !json[QString("ResourceType")].isNull() && m_resource_type_isValid;
}

QString OAIResourceMetrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceMetrics::asJsonObject() const {
    QJsonObject obj;
    if (m_timestamp_isSet) {
        obj.insert(QString("Timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_p95_metrics.isSet()) {
        obj.insert(QString("P95Metrics"), ::OpenAPI::toJsonValue(m_p95_metrics));
    }
    if (m_capacity.isSet()) {
        obj.insert(QString("Capacity"), ::OpenAPI::toJsonValue(m_capacity));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("ResourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_type.isSet()) {
        obj.insert(QString("ResourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    return obj;
}

QDateTime OAIResourceMetrics::getTimestamp() const {
    return m_timestamp;
}
void OAIResourceMetrics::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIResourceMetrics::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIResourceMetrics::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

OAIResourceMetrics_P95Metrics OAIResourceMetrics::getP95Metrics() const {
    return m_p95_metrics;
}
void OAIResourceMetrics::setP95Metrics(const OAIResourceMetrics_P95Metrics &p95_metrics) {
    m_p95_metrics = p95_metrics;
    m_p95_metrics_isSet = true;
}

bool OAIResourceMetrics::is_p95_metrics_Set() const{
    return m_p95_metrics_isSet;
}

bool OAIResourceMetrics::is_p95_metrics_Valid() const{
    return m_p95_metrics_isValid;
}

OAIResourceMetrics_Capacity OAIResourceMetrics::getCapacity() const {
    return m_capacity;
}
void OAIResourceMetrics::setCapacity(const OAIResourceMetrics_Capacity &capacity) {
    m_capacity = capacity;
    m_capacity_isSet = true;
}

bool OAIResourceMetrics::is_capacity_Set() const{
    return m_capacity_isSet;
}

bool OAIResourceMetrics::is_capacity_Valid() const{
    return m_capacity_isValid;
}

QString OAIResourceMetrics::getResourceId() const {
    return m_resource_id;
}
void OAIResourceMetrics::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIResourceMetrics::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIResourceMetrics::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

OAIDiscoveryResourceType OAIResourceMetrics::getResourceType() const {
    return m_resource_type;
}
void OAIResourceMetrics::setResourceType(const OAIDiscoveryResourceType &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIResourceMetrics::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIResourceMetrics::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

bool OAIResourceMetrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p95_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceMetrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
