/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIP95Metrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIP95Metrics::OAIP95Metrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIP95Metrics::OAIP95Metrics() {
    this->initializeModel();
}

OAIP95Metrics::~OAIP95Metrics() {}

void OAIP95Metrics::initializeModel() {

    m_iops_isSet = false;
    m_iops_isValid = false;

    m_throughput_isSet = false;
    m_throughput_isValid = false;

    m_latency_isSet = false;
    m_latency_isValid = false;
}

void OAIP95Metrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIP95Metrics::fromJsonObject(QJsonObject json) {

    m_iops_isValid = ::OpenAPI::fromJsonValue(m_iops, json[QString("IOPS")]);
    m_iops_isSet = !json[QString("IOPS")].isNull() && m_iops_isValid;

    m_throughput_isValid = ::OpenAPI::fromJsonValue(m_throughput, json[QString("Throughput")]);
    m_throughput_isSet = !json[QString("Throughput")].isNull() && m_throughput_isValid;

    m_latency_isValid = ::OpenAPI::fromJsonValue(m_latency, json[QString("Latency")]);
    m_latency_isSet = !json[QString("Latency")].isNull() && m_latency_isValid;
}

QString OAIP95Metrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIP95Metrics::asJsonObject() const {
    QJsonObject obj;
    if (m_iops.isSet()) {
        obj.insert(QString("IOPS"), ::OpenAPI::toJsonValue(m_iops));
    }
    if (m_throughput.isSet()) {
        obj.insert(QString("Throughput"), ::OpenAPI::toJsonValue(m_throughput));
    }
    if (m_latency.isSet()) {
        obj.insert(QString("Latency"), ::OpenAPI::toJsonValue(m_latency));
    }
    return obj;
}

OAIP95Metrics_IOPS OAIP95Metrics::getIops() const {
    return m_iops;
}
void OAIP95Metrics::setIops(const OAIP95Metrics_IOPS &iops) {
    m_iops = iops;
    m_iops_isSet = true;
}

bool OAIP95Metrics::is_iops_Set() const{
    return m_iops_isSet;
}

bool OAIP95Metrics::is_iops_Valid() const{
    return m_iops_isValid;
}

OAIP95Metrics_Throughput OAIP95Metrics::getThroughput() const {
    return m_throughput;
}
void OAIP95Metrics::setThroughput(const OAIP95Metrics_Throughput &throughput) {
    m_throughput = throughput;
    m_throughput_isSet = true;
}

bool OAIP95Metrics::is_throughput_Set() const{
    return m_throughput_isSet;
}

bool OAIP95Metrics::is_throughput_Valid() const{
    return m_throughput_isValid;
}

OAIP95Metrics_Latency OAIP95Metrics::getLatency() const {
    return m_latency;
}
void OAIP95Metrics::setLatency(const OAIP95Metrics_Latency &latency) {
    m_latency = latency;
    m_latency_isSet = true;
}

bool OAIP95Metrics::is_latency_Set() const{
    return m_latency_isSet;
}

bool OAIP95Metrics::is_latency_Valid() const{
    return m_latency_isValid;
}

bool OAIP95Metrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_iops.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_throughput.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_latency.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIP95Metrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
