/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartDiscoveryJobRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartDiscoveryJobRequest::OAIStartDiscoveryJobRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartDiscoveryJobRequest::OAIStartDiscoveryJobRequest() {
    this->initializeModel();
}

OAIStartDiscoveryJobRequest::~OAIStartDiscoveryJobRequest() {}

void OAIStartDiscoveryJobRequest::initializeModel() {

    m_storage_system_arn_isSet = false;
    m_storage_system_arn_isValid = false;

    m_collection_duration_minutes_isSet = false;
    m_collection_duration_minutes_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIStartDiscoveryJobRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartDiscoveryJobRequest::fromJsonObject(QJsonObject json) {

    m_storage_system_arn_isValid = ::OpenAPI::fromJsonValue(m_storage_system_arn, json[QString("StorageSystemArn")]);
    m_storage_system_arn_isSet = !json[QString("StorageSystemArn")].isNull() && m_storage_system_arn_isValid;

    m_collection_duration_minutes_isValid = ::OpenAPI::fromJsonValue(m_collection_duration_minutes, json[QString("CollectionDurationMinutes")]);
    m_collection_duration_minutes_isSet = !json[QString("CollectionDurationMinutes")].isNull() && m_collection_duration_minutes_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIStartDiscoveryJobRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartDiscoveryJobRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_storage_system_arn_isSet) {
        obj.insert(QString("StorageSystemArn"), ::OpenAPI::toJsonValue(m_storage_system_arn));
    }
    if (m_collection_duration_minutes_isSet) {
        obj.insert(QString("CollectionDurationMinutes"), ::OpenAPI::toJsonValue(m_collection_duration_minutes));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIStartDiscoveryJobRequest::getStorageSystemArn() const {
    return m_storage_system_arn;
}
void OAIStartDiscoveryJobRequest::setStorageSystemArn(const QString &storage_system_arn) {
    m_storage_system_arn = storage_system_arn;
    m_storage_system_arn_isSet = true;
}

bool OAIStartDiscoveryJobRequest::is_storage_system_arn_Set() const{
    return m_storage_system_arn_isSet;
}

bool OAIStartDiscoveryJobRequest::is_storage_system_arn_Valid() const{
    return m_storage_system_arn_isValid;
}

qint32 OAIStartDiscoveryJobRequest::getCollectionDurationMinutes() const {
    return m_collection_duration_minutes;
}
void OAIStartDiscoveryJobRequest::setCollectionDurationMinutes(const qint32 &collection_duration_minutes) {
    m_collection_duration_minutes = collection_duration_minutes;
    m_collection_duration_minutes_isSet = true;
}

bool OAIStartDiscoveryJobRequest::is_collection_duration_minutes_Set() const{
    return m_collection_duration_minutes_isSet;
}

bool OAIStartDiscoveryJobRequest::is_collection_duration_minutes_Valid() const{
    return m_collection_duration_minutes_isValid;
}

QString OAIStartDiscoveryJobRequest::getClientToken() const {
    return m_client_token;
}
void OAIStartDiscoveryJobRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIStartDiscoveryJobRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIStartDiscoveryJobRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QList OAIStartDiscoveryJobRequest::getTags() const {
    return m_tags;
}
void OAIStartDiscoveryJobRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIStartDiscoveryJobRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIStartDiscoveryJobRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIStartDiscoveryJobRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_storage_system_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_duration_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartDiscoveryJobRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_storage_system_arn_isValid && m_collection_duration_minutes_isValid && m_client_token_isValid && true;
}

} // namespace OpenAPI
