/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterRule::OAIFilterRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterRule::OAIFilterRule() {
    this->initializeModel();
}

OAIFilterRule::~OAIFilterRule() {}

void OAIFilterRule::initializeModel() {

    m_filter_type_isSet = false;
    m_filter_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIFilterRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilterRule::fromJsonObject(QJsonObject json) {

    m_filter_type_isValid = ::OpenAPI::fromJsonValue(m_filter_type, json[QString("FilterType")]);
    m_filter_type_isSet = !json[QString("FilterType")].isNull() && m_filter_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;
}

QString OAIFilterRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilterRule::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_type.isSet()) {
        obj.insert(QString("FilterType"), ::OpenAPI::toJsonValue(m_filter_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAIFilterType OAIFilterRule::getFilterType() const {
    return m_filter_type;
}
void OAIFilterRule::setFilterType(const OAIFilterType &filter_type) {
    m_filter_type = filter_type;
    m_filter_type_isSet = true;
}

bool OAIFilterRule::is_filter_type_Set() const{
    return m_filter_type_isSet;
}

bool OAIFilterRule::is_filter_type_Valid() const{
    return m_filter_type_isValid;
}

QString OAIFilterRule::getValue() const {
    return m_value;
}
void OAIFilterRule::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIFilterRule::is_value_Set() const{
    return m_value_isSet;
}

bool OAIFilterRule::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIFilterRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilterRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
