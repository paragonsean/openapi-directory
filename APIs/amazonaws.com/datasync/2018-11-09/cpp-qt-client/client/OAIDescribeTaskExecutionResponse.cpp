/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeTaskExecutionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeTaskExecutionResponse::OAIDescribeTaskExecutionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeTaskExecutionResponse::OAIDescribeTaskExecutionResponse() {
    this->initializeModel();
}

OAIDescribeTaskExecutionResponse::~OAIDescribeTaskExecutionResponse() {}

void OAIDescribeTaskExecutionResponse::initializeModel() {

    m_task_execution_arn_isSet = false;
    m_task_execution_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_excludes_isSet = false;
    m_excludes_isValid = false;

    m_includes_isSet = false;
    m_includes_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_estimated_files_to_transfer_isSet = false;
    m_estimated_files_to_transfer_isValid = false;

    m_estimated_bytes_to_transfer_isSet = false;
    m_estimated_bytes_to_transfer_isValid = false;

    m_files_transferred_isSet = false;
    m_files_transferred_isValid = false;

    m_bytes_written_isSet = false;
    m_bytes_written_isValid = false;

    m_bytes_transferred_isSet = false;
    m_bytes_transferred_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_bytes_compressed_isSet = false;
    m_bytes_compressed_isValid = false;
}

void OAIDescribeTaskExecutionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeTaskExecutionResponse::fromJsonObject(QJsonObject json) {

    m_task_execution_arn_isValid = ::OpenAPI::fromJsonValue(m_task_execution_arn, json[QString("TaskExecutionArn")]);
    m_task_execution_arn_isSet = !json[QString("TaskExecutionArn")].isNull() && m_task_execution_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("Options")]);
    m_options_isSet = !json[QString("Options")].isNull() && m_options_isValid;

    m_excludes_isValid = ::OpenAPI::fromJsonValue(m_excludes, json[QString("Excludes")]);
    m_excludes_isSet = !json[QString("Excludes")].isNull() && m_excludes_isValid;

    m_includes_isValid = ::OpenAPI::fromJsonValue(m_includes, json[QString("Includes")]);
    m_includes_isSet = !json[QString("Includes")].isNull() && m_includes_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_estimated_files_to_transfer_isValid = ::OpenAPI::fromJsonValue(m_estimated_files_to_transfer, json[QString("EstimatedFilesToTransfer")]);
    m_estimated_files_to_transfer_isSet = !json[QString("EstimatedFilesToTransfer")].isNull() && m_estimated_files_to_transfer_isValid;

    m_estimated_bytes_to_transfer_isValid = ::OpenAPI::fromJsonValue(m_estimated_bytes_to_transfer, json[QString("EstimatedBytesToTransfer")]);
    m_estimated_bytes_to_transfer_isSet = !json[QString("EstimatedBytesToTransfer")].isNull() && m_estimated_bytes_to_transfer_isValid;

    m_files_transferred_isValid = ::OpenAPI::fromJsonValue(m_files_transferred, json[QString("FilesTransferred")]);
    m_files_transferred_isSet = !json[QString("FilesTransferred")].isNull() && m_files_transferred_isValid;

    m_bytes_written_isValid = ::OpenAPI::fromJsonValue(m_bytes_written, json[QString("BytesWritten")]);
    m_bytes_written_isSet = !json[QString("BytesWritten")].isNull() && m_bytes_written_isValid;

    m_bytes_transferred_isValid = ::OpenAPI::fromJsonValue(m_bytes_transferred, json[QString("BytesTransferred")]);
    m_bytes_transferred_isSet = !json[QString("BytesTransferred")].isNull() && m_bytes_transferred_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("Result")]);
    m_result_isSet = !json[QString("Result")].isNull() && m_result_isValid;

    m_bytes_compressed_isValid = ::OpenAPI::fromJsonValue(m_bytes_compressed, json[QString("BytesCompressed")]);
    m_bytes_compressed_isSet = !json[QString("BytesCompressed")].isNull() && m_bytes_compressed_isValid;
}

QString OAIDescribeTaskExecutionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeTaskExecutionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_task_execution_arn_isSet) {
        obj.insert(QString("TaskExecutionArn"), ::OpenAPI::toJsonValue(m_task_execution_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_options.isSet()) {
        obj.insert(QString("Options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_excludes.isSet()) {
        obj.insert(QString("Excludes"), ::OpenAPI::toJsonValue(m_excludes));
    }
    if (m_includes.isSet()) {
        obj.insert(QString("Includes"), ::OpenAPI::toJsonValue(m_includes));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_estimated_files_to_transfer_isSet) {
        obj.insert(QString("EstimatedFilesToTransfer"), ::OpenAPI::toJsonValue(m_estimated_files_to_transfer));
    }
    if (m_estimated_bytes_to_transfer_isSet) {
        obj.insert(QString("EstimatedBytesToTransfer"), ::OpenAPI::toJsonValue(m_estimated_bytes_to_transfer));
    }
    if (m_files_transferred_isSet) {
        obj.insert(QString("FilesTransferred"), ::OpenAPI::toJsonValue(m_files_transferred));
    }
    if (m_bytes_written_isSet) {
        obj.insert(QString("BytesWritten"), ::OpenAPI::toJsonValue(m_bytes_written));
    }
    if (m_bytes_transferred_isSet) {
        obj.insert(QString("BytesTransferred"), ::OpenAPI::toJsonValue(m_bytes_transferred));
    }
    if (m_result.isSet()) {
        obj.insert(QString("Result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_bytes_compressed_isSet) {
        obj.insert(QString("BytesCompressed"), ::OpenAPI::toJsonValue(m_bytes_compressed));
    }
    return obj;
}

QString OAIDescribeTaskExecutionResponse::getTaskExecutionArn() const {
    return m_task_execution_arn;
}
void OAIDescribeTaskExecutionResponse::setTaskExecutionArn(const QString &task_execution_arn) {
    m_task_execution_arn = task_execution_arn;
    m_task_execution_arn_isSet = true;
}

bool OAIDescribeTaskExecutionResponse::is_task_execution_arn_Set() const{
    return m_task_execution_arn_isSet;
}

bool OAIDescribeTaskExecutionResponse::is_task_execution_arn_Valid() const{
    return m_task_execution_arn_isValid;
}

OAITaskExecutionStatus OAIDescribeTaskExecutionResponse::getStatus() const {
    return m_status;
}
void OAIDescribeTaskExecutionResponse::setStatus(const OAITaskExecutionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeTaskExecutionResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeTaskExecutionResponse::is_status_Valid() const{
    return m_status_isValid;
}

OAIOptions OAIDescribeTaskExecutionResponse::getOptions() const {
    return m_options;
}
void OAIDescribeTaskExecutionResponse::setOptions(const OAIOptions &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIDescribeTaskExecutionResponse::is_options_Set() const{
    return m_options_isSet;
}

bool OAIDescribeTaskExecutionResponse::is_options_Valid() const{
    return m_options_isValid;
}

QList OAIDescribeTaskExecutionResponse::getExcludes() const {
    return m_excludes;
}
void OAIDescribeTaskExecutionResponse::setExcludes(const QList &excludes) {
    m_excludes = excludes;
    m_excludes_isSet = true;
}

bool OAIDescribeTaskExecutionResponse::is_excludes_Set() const{
    return m_excludes_isSet;
}

bool OAIDescribeTaskExecutionResponse::is_excludes_Valid() const{
    return m_excludes_isValid;
}

QList OAIDescribeTaskExecutionResponse::getIncludes() const {
    return m_includes;
}
void OAIDescribeTaskExecutionResponse::setIncludes(const QList &includes) {
    m_includes = includes;
    m_includes_isSet = true;
}

bool OAIDescribeTaskExecutionResponse::is_includes_Set() const{
    return m_includes_isSet;
}

bool OAIDescribeTaskExecutionResponse::is_includes_Valid() const{
    return m_includes_isValid;
}

QDateTime OAIDescribeTaskExecutionResponse::getStartTime() const {
    return m_start_time;
}
void OAIDescribeTaskExecutionResponse::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIDescribeTaskExecutionResponse::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIDescribeTaskExecutionResponse::is_start_time_Valid() const{
    return m_start_time_isValid;
}

qint32 OAIDescribeTaskExecutionResponse::getEstimatedFilesToTransfer() const {
    return m_estimated_files_to_transfer;
}
void OAIDescribeTaskExecutionResponse::setEstimatedFilesToTransfer(const qint32 &estimated_files_to_transfer) {
    m_estimated_files_to_transfer = estimated_files_to_transfer;
    m_estimated_files_to_transfer_isSet = true;
}

bool OAIDescribeTaskExecutionResponse::is_estimated_files_to_transfer_Set() const{
    return m_estimated_files_to_transfer_isSet;
}

bool OAIDescribeTaskExecutionResponse::is_estimated_files_to_transfer_Valid() const{
    return m_estimated_files_to_transfer_isValid;
}

qint32 OAIDescribeTaskExecutionResponse::getEstimatedBytesToTransfer() const {
    return m_estimated_bytes_to_transfer;
}
void OAIDescribeTaskExecutionResponse::setEstimatedBytesToTransfer(const qint32 &estimated_bytes_to_transfer) {
    m_estimated_bytes_to_transfer = estimated_bytes_to_transfer;
    m_estimated_bytes_to_transfer_isSet = true;
}

bool OAIDescribeTaskExecutionResponse::is_estimated_bytes_to_transfer_Set() const{
    return m_estimated_bytes_to_transfer_isSet;
}

bool OAIDescribeTaskExecutionResponse::is_estimated_bytes_to_transfer_Valid() const{
    return m_estimated_bytes_to_transfer_isValid;
}

qint32 OAIDescribeTaskExecutionResponse::getFilesTransferred() const {
    return m_files_transferred;
}
void OAIDescribeTaskExecutionResponse::setFilesTransferred(const qint32 &files_transferred) {
    m_files_transferred = files_transferred;
    m_files_transferred_isSet = true;
}

bool OAIDescribeTaskExecutionResponse::is_files_transferred_Set() const{
    return m_files_transferred_isSet;
}

bool OAIDescribeTaskExecutionResponse::is_files_transferred_Valid() const{
    return m_files_transferred_isValid;
}

qint32 OAIDescribeTaskExecutionResponse::getBytesWritten() const {
    return m_bytes_written;
}
void OAIDescribeTaskExecutionResponse::setBytesWritten(const qint32 &bytes_written) {
    m_bytes_written = bytes_written;
    m_bytes_written_isSet = true;
}

bool OAIDescribeTaskExecutionResponse::is_bytes_written_Set() const{
    return m_bytes_written_isSet;
}

bool OAIDescribeTaskExecutionResponse::is_bytes_written_Valid() const{
    return m_bytes_written_isValid;
}

qint32 OAIDescribeTaskExecutionResponse::getBytesTransferred() const {
    return m_bytes_transferred;
}
void OAIDescribeTaskExecutionResponse::setBytesTransferred(const qint32 &bytes_transferred) {
    m_bytes_transferred = bytes_transferred;
    m_bytes_transferred_isSet = true;
}

bool OAIDescribeTaskExecutionResponse::is_bytes_transferred_Set() const{
    return m_bytes_transferred_isSet;
}

bool OAIDescribeTaskExecutionResponse::is_bytes_transferred_Valid() const{
    return m_bytes_transferred_isValid;
}

OAIDescribeTaskExecutionResponse_Result OAIDescribeTaskExecutionResponse::getResult() const {
    return m_result;
}
void OAIDescribeTaskExecutionResponse::setResult(const OAIDescribeTaskExecutionResponse_Result &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIDescribeTaskExecutionResponse::is_result_Set() const{
    return m_result_isSet;
}

bool OAIDescribeTaskExecutionResponse::is_result_Valid() const{
    return m_result_isValid;
}

qint32 OAIDescribeTaskExecutionResponse::getBytesCompressed() const {
    return m_bytes_compressed;
}
void OAIDescribeTaskExecutionResponse::setBytesCompressed(const qint32 &bytes_compressed) {
    m_bytes_compressed = bytes_compressed;
    m_bytes_compressed_isSet = true;
}

bool OAIDescribeTaskExecutionResponse::is_bytes_compressed_Set() const{
    return m_bytes_compressed_isSet;
}

bool OAIDescribeTaskExecutionResponse::is_bytes_compressed_Valid() const{
    return m_bytes_compressed_isValid;
}

bool OAIDescribeTaskExecutionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_task_execution_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_excludes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_includes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_files_to_transfer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_bytes_to_transfer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_files_transferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bytes_written_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bytes_transferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bytes_compressed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeTaskExecutionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
