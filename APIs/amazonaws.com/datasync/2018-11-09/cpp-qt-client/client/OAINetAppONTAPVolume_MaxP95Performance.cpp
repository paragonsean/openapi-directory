/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetAppONTAPVolume_MaxP95Performance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetAppONTAPVolume_MaxP95Performance::OAINetAppONTAPVolume_MaxP95Performance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetAppONTAPVolume_MaxP95Performance::OAINetAppONTAPVolume_MaxP95Performance() {
    this->initializeModel();
}

OAINetAppONTAPVolume_MaxP95Performance::~OAINetAppONTAPVolume_MaxP95Performance() {}

void OAINetAppONTAPVolume_MaxP95Performance::initializeModel() {

    m_iops_read_isSet = false;
    m_iops_read_isValid = false;

    m_iops_write_isSet = false;
    m_iops_write_isValid = false;

    m_iops_other_isSet = false;
    m_iops_other_isValid = false;

    m_iops_total_isSet = false;
    m_iops_total_isValid = false;

    m_throughput_read_isSet = false;
    m_throughput_read_isValid = false;

    m_throughput_write_isSet = false;
    m_throughput_write_isValid = false;

    m_throughput_other_isSet = false;
    m_throughput_other_isValid = false;

    m_throughput_total_isSet = false;
    m_throughput_total_isValid = false;

    m_latency_read_isSet = false;
    m_latency_read_isValid = false;

    m_latency_write_isSet = false;
    m_latency_write_isValid = false;

    m_latency_other_isSet = false;
    m_latency_other_isValid = false;
}

void OAINetAppONTAPVolume_MaxP95Performance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetAppONTAPVolume_MaxP95Performance::fromJsonObject(QJsonObject json) {

    m_iops_read_isValid = ::OpenAPI::fromJsonValue(m_iops_read, json[QString("IopsRead")]);
    m_iops_read_isSet = !json[QString("IopsRead")].isNull() && m_iops_read_isValid;

    m_iops_write_isValid = ::OpenAPI::fromJsonValue(m_iops_write, json[QString("IopsWrite")]);
    m_iops_write_isSet = !json[QString("IopsWrite")].isNull() && m_iops_write_isValid;

    m_iops_other_isValid = ::OpenAPI::fromJsonValue(m_iops_other, json[QString("IopsOther")]);
    m_iops_other_isSet = !json[QString("IopsOther")].isNull() && m_iops_other_isValid;

    m_iops_total_isValid = ::OpenAPI::fromJsonValue(m_iops_total, json[QString("IopsTotal")]);
    m_iops_total_isSet = !json[QString("IopsTotal")].isNull() && m_iops_total_isValid;

    m_throughput_read_isValid = ::OpenAPI::fromJsonValue(m_throughput_read, json[QString("ThroughputRead")]);
    m_throughput_read_isSet = !json[QString("ThroughputRead")].isNull() && m_throughput_read_isValid;

    m_throughput_write_isValid = ::OpenAPI::fromJsonValue(m_throughput_write, json[QString("ThroughputWrite")]);
    m_throughput_write_isSet = !json[QString("ThroughputWrite")].isNull() && m_throughput_write_isValid;

    m_throughput_other_isValid = ::OpenAPI::fromJsonValue(m_throughput_other, json[QString("ThroughputOther")]);
    m_throughput_other_isSet = !json[QString("ThroughputOther")].isNull() && m_throughput_other_isValid;

    m_throughput_total_isValid = ::OpenAPI::fromJsonValue(m_throughput_total, json[QString("ThroughputTotal")]);
    m_throughput_total_isSet = !json[QString("ThroughputTotal")].isNull() && m_throughput_total_isValid;

    m_latency_read_isValid = ::OpenAPI::fromJsonValue(m_latency_read, json[QString("LatencyRead")]);
    m_latency_read_isSet = !json[QString("LatencyRead")].isNull() && m_latency_read_isValid;

    m_latency_write_isValid = ::OpenAPI::fromJsonValue(m_latency_write, json[QString("LatencyWrite")]);
    m_latency_write_isSet = !json[QString("LatencyWrite")].isNull() && m_latency_write_isValid;

    m_latency_other_isValid = ::OpenAPI::fromJsonValue(m_latency_other, json[QString("LatencyOther")]);
    m_latency_other_isSet = !json[QString("LatencyOther")].isNull() && m_latency_other_isValid;
}

QString OAINetAppONTAPVolume_MaxP95Performance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetAppONTAPVolume_MaxP95Performance::asJsonObject() const {
    QJsonObject obj;
    if (m_iops_read_isSet) {
        obj.insert(QString("IopsRead"), ::OpenAPI::toJsonValue(m_iops_read));
    }
    if (m_iops_write_isSet) {
        obj.insert(QString("IopsWrite"), ::OpenAPI::toJsonValue(m_iops_write));
    }
    if (m_iops_other_isSet) {
        obj.insert(QString("IopsOther"), ::OpenAPI::toJsonValue(m_iops_other));
    }
    if (m_iops_total_isSet) {
        obj.insert(QString("IopsTotal"), ::OpenAPI::toJsonValue(m_iops_total));
    }
    if (m_throughput_read_isSet) {
        obj.insert(QString("ThroughputRead"), ::OpenAPI::toJsonValue(m_throughput_read));
    }
    if (m_throughput_write_isSet) {
        obj.insert(QString("ThroughputWrite"), ::OpenAPI::toJsonValue(m_throughput_write));
    }
    if (m_throughput_other_isSet) {
        obj.insert(QString("ThroughputOther"), ::OpenAPI::toJsonValue(m_throughput_other));
    }
    if (m_throughput_total_isSet) {
        obj.insert(QString("ThroughputTotal"), ::OpenAPI::toJsonValue(m_throughput_total));
    }
    if (m_latency_read_isSet) {
        obj.insert(QString("LatencyRead"), ::OpenAPI::toJsonValue(m_latency_read));
    }
    if (m_latency_write_isSet) {
        obj.insert(QString("LatencyWrite"), ::OpenAPI::toJsonValue(m_latency_write));
    }
    if (m_latency_other_isSet) {
        obj.insert(QString("LatencyOther"), ::OpenAPI::toJsonValue(m_latency_other));
    }
    return obj;
}

double OAINetAppONTAPVolume_MaxP95Performance::getIopsRead() const {
    return m_iops_read;
}
void OAINetAppONTAPVolume_MaxP95Performance::setIopsRead(const double &iops_read) {
    m_iops_read = iops_read;
    m_iops_read_isSet = true;
}

bool OAINetAppONTAPVolume_MaxP95Performance::is_iops_read_Set() const{
    return m_iops_read_isSet;
}

bool OAINetAppONTAPVolume_MaxP95Performance::is_iops_read_Valid() const{
    return m_iops_read_isValid;
}

double OAINetAppONTAPVolume_MaxP95Performance::getIopsWrite() const {
    return m_iops_write;
}
void OAINetAppONTAPVolume_MaxP95Performance::setIopsWrite(const double &iops_write) {
    m_iops_write = iops_write;
    m_iops_write_isSet = true;
}

bool OAINetAppONTAPVolume_MaxP95Performance::is_iops_write_Set() const{
    return m_iops_write_isSet;
}

bool OAINetAppONTAPVolume_MaxP95Performance::is_iops_write_Valid() const{
    return m_iops_write_isValid;
}

double OAINetAppONTAPVolume_MaxP95Performance::getIopsOther() const {
    return m_iops_other;
}
void OAINetAppONTAPVolume_MaxP95Performance::setIopsOther(const double &iops_other) {
    m_iops_other = iops_other;
    m_iops_other_isSet = true;
}

bool OAINetAppONTAPVolume_MaxP95Performance::is_iops_other_Set() const{
    return m_iops_other_isSet;
}

bool OAINetAppONTAPVolume_MaxP95Performance::is_iops_other_Valid() const{
    return m_iops_other_isValid;
}

double OAINetAppONTAPVolume_MaxP95Performance::getIopsTotal() const {
    return m_iops_total;
}
void OAINetAppONTAPVolume_MaxP95Performance::setIopsTotal(const double &iops_total) {
    m_iops_total = iops_total;
    m_iops_total_isSet = true;
}

bool OAINetAppONTAPVolume_MaxP95Performance::is_iops_total_Set() const{
    return m_iops_total_isSet;
}

bool OAINetAppONTAPVolume_MaxP95Performance::is_iops_total_Valid() const{
    return m_iops_total_isValid;
}

double OAINetAppONTAPVolume_MaxP95Performance::getThroughputRead() const {
    return m_throughput_read;
}
void OAINetAppONTAPVolume_MaxP95Performance::setThroughputRead(const double &throughput_read) {
    m_throughput_read = throughput_read;
    m_throughput_read_isSet = true;
}

bool OAINetAppONTAPVolume_MaxP95Performance::is_throughput_read_Set() const{
    return m_throughput_read_isSet;
}

bool OAINetAppONTAPVolume_MaxP95Performance::is_throughput_read_Valid() const{
    return m_throughput_read_isValid;
}

double OAINetAppONTAPVolume_MaxP95Performance::getThroughputWrite() const {
    return m_throughput_write;
}
void OAINetAppONTAPVolume_MaxP95Performance::setThroughputWrite(const double &throughput_write) {
    m_throughput_write = throughput_write;
    m_throughput_write_isSet = true;
}

bool OAINetAppONTAPVolume_MaxP95Performance::is_throughput_write_Set() const{
    return m_throughput_write_isSet;
}

bool OAINetAppONTAPVolume_MaxP95Performance::is_throughput_write_Valid() const{
    return m_throughput_write_isValid;
}

double OAINetAppONTAPVolume_MaxP95Performance::getThroughputOther() const {
    return m_throughput_other;
}
void OAINetAppONTAPVolume_MaxP95Performance::setThroughputOther(const double &throughput_other) {
    m_throughput_other = throughput_other;
    m_throughput_other_isSet = true;
}

bool OAINetAppONTAPVolume_MaxP95Performance::is_throughput_other_Set() const{
    return m_throughput_other_isSet;
}

bool OAINetAppONTAPVolume_MaxP95Performance::is_throughput_other_Valid() const{
    return m_throughput_other_isValid;
}

double OAINetAppONTAPVolume_MaxP95Performance::getThroughputTotal() const {
    return m_throughput_total;
}
void OAINetAppONTAPVolume_MaxP95Performance::setThroughputTotal(const double &throughput_total) {
    m_throughput_total = throughput_total;
    m_throughput_total_isSet = true;
}

bool OAINetAppONTAPVolume_MaxP95Performance::is_throughput_total_Set() const{
    return m_throughput_total_isSet;
}

bool OAINetAppONTAPVolume_MaxP95Performance::is_throughput_total_Valid() const{
    return m_throughput_total_isValid;
}

double OAINetAppONTAPVolume_MaxP95Performance::getLatencyRead() const {
    return m_latency_read;
}
void OAINetAppONTAPVolume_MaxP95Performance::setLatencyRead(const double &latency_read) {
    m_latency_read = latency_read;
    m_latency_read_isSet = true;
}

bool OAINetAppONTAPVolume_MaxP95Performance::is_latency_read_Set() const{
    return m_latency_read_isSet;
}

bool OAINetAppONTAPVolume_MaxP95Performance::is_latency_read_Valid() const{
    return m_latency_read_isValid;
}

double OAINetAppONTAPVolume_MaxP95Performance::getLatencyWrite() const {
    return m_latency_write;
}
void OAINetAppONTAPVolume_MaxP95Performance::setLatencyWrite(const double &latency_write) {
    m_latency_write = latency_write;
    m_latency_write_isSet = true;
}

bool OAINetAppONTAPVolume_MaxP95Performance::is_latency_write_Set() const{
    return m_latency_write_isSet;
}

bool OAINetAppONTAPVolume_MaxP95Performance::is_latency_write_Valid() const{
    return m_latency_write_isValid;
}

double OAINetAppONTAPVolume_MaxP95Performance::getLatencyOther() const {
    return m_latency_other;
}
void OAINetAppONTAPVolume_MaxP95Performance::setLatencyOther(const double &latency_other) {
    m_latency_other = latency_other;
    m_latency_other_isSet = true;
}

bool OAINetAppONTAPVolume_MaxP95Performance::is_latency_other_Set() const{
    return m_latency_other_isSet;
}

bool OAINetAppONTAPVolume_MaxP95Performance::is_latency_other_Valid() const{
    return m_latency_other_isValid;
}

bool OAINetAppONTAPVolume_MaxP95Performance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_iops_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iops_write_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iops_other_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iops_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_throughput_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_throughput_write_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_throughput_other_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_throughput_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latency_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latency_write_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latency_other_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetAppONTAPVolume_MaxP95Performance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
