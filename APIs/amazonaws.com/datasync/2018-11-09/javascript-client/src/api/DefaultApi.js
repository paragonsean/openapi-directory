/**
 * AWS DataSync
 * <fullname>DataSync</fullname> <p>DataSync is an online data movement and discovery service that simplifies data migration and helps you quickly, easily, and securely transfer your file or object data to, from, and between Amazon Web Services storage services.</p> <p>This API interface reference includes documentation for using DataSync programmatically. For complete information, see the <i> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/what-is-datasync.html\">DataSync User Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2018-11-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddStorageSystemRequest from '../model/AddStorageSystemRequest';
import AddStorageSystemResponse from '../model/AddStorageSystemResponse';
import CancelTaskExecutionRequest from '../model/CancelTaskExecutionRequest';
import CreateAgentRequest from '../model/CreateAgentRequest';
import CreateAgentResponse from '../model/CreateAgentResponse';
import CreateLocationAzureBlobRequest from '../model/CreateLocationAzureBlobRequest';
import CreateLocationAzureBlobResponse from '../model/CreateLocationAzureBlobResponse';
import CreateLocationEfsRequest from '../model/CreateLocationEfsRequest';
import CreateLocationEfsResponse from '../model/CreateLocationEfsResponse';
import CreateLocationFsxLustreRequest from '../model/CreateLocationFsxLustreRequest';
import CreateLocationFsxLustreResponse from '../model/CreateLocationFsxLustreResponse';
import CreateLocationFsxOntapRequest from '../model/CreateLocationFsxOntapRequest';
import CreateLocationFsxOntapResponse from '../model/CreateLocationFsxOntapResponse';
import CreateLocationFsxOpenZfsRequest from '../model/CreateLocationFsxOpenZfsRequest';
import CreateLocationFsxOpenZfsResponse from '../model/CreateLocationFsxOpenZfsResponse';
import CreateLocationFsxWindowsRequest from '../model/CreateLocationFsxWindowsRequest';
import CreateLocationFsxWindowsResponse from '../model/CreateLocationFsxWindowsResponse';
import CreateLocationHdfsRequest from '../model/CreateLocationHdfsRequest';
import CreateLocationHdfsResponse from '../model/CreateLocationHdfsResponse';
import CreateLocationNfsRequest from '../model/CreateLocationNfsRequest';
import CreateLocationNfsResponse from '../model/CreateLocationNfsResponse';
import CreateLocationObjectStorageRequest from '../model/CreateLocationObjectStorageRequest';
import CreateLocationObjectStorageResponse from '../model/CreateLocationObjectStorageResponse';
import CreateLocationS3Request from '../model/CreateLocationS3Request';
import CreateLocationS3Response from '../model/CreateLocationS3Response';
import CreateLocationSmbRequest from '../model/CreateLocationSmbRequest';
import CreateLocationSmbResponse from '../model/CreateLocationSmbResponse';
import CreateTaskRequest from '../model/CreateTaskRequest';
import CreateTaskResponse from '../model/CreateTaskResponse';
import DeleteAgentRequest from '../model/DeleteAgentRequest';
import DeleteLocationRequest from '../model/DeleteLocationRequest';
import DeleteTaskRequest from '../model/DeleteTaskRequest';
import DescribeAgentRequest from '../model/DescribeAgentRequest';
import DescribeAgentResponse from '../model/DescribeAgentResponse';
import DescribeDiscoveryJobRequest from '../model/DescribeDiscoveryJobRequest';
import DescribeDiscoveryJobResponse from '../model/DescribeDiscoveryJobResponse';
import DescribeLocationAzureBlobRequest from '../model/DescribeLocationAzureBlobRequest';
import DescribeLocationAzureBlobResponse from '../model/DescribeLocationAzureBlobResponse';
import DescribeLocationEfsRequest from '../model/DescribeLocationEfsRequest';
import DescribeLocationEfsResponse from '../model/DescribeLocationEfsResponse';
import DescribeLocationFsxLustreRequest from '../model/DescribeLocationFsxLustreRequest';
import DescribeLocationFsxLustreResponse from '../model/DescribeLocationFsxLustreResponse';
import DescribeLocationFsxOntapRequest from '../model/DescribeLocationFsxOntapRequest';
import DescribeLocationFsxOntapResponse from '../model/DescribeLocationFsxOntapResponse';
import DescribeLocationFsxOpenZfsRequest from '../model/DescribeLocationFsxOpenZfsRequest';
import DescribeLocationFsxOpenZfsResponse from '../model/DescribeLocationFsxOpenZfsResponse';
import DescribeLocationFsxWindowsRequest from '../model/DescribeLocationFsxWindowsRequest';
import DescribeLocationFsxWindowsResponse from '../model/DescribeLocationFsxWindowsResponse';
import DescribeLocationHdfsRequest from '../model/DescribeLocationHdfsRequest';
import DescribeLocationHdfsResponse from '../model/DescribeLocationHdfsResponse';
import DescribeLocationNfsRequest from '../model/DescribeLocationNfsRequest';
import DescribeLocationNfsResponse from '../model/DescribeLocationNfsResponse';
import DescribeLocationObjectStorageRequest from '../model/DescribeLocationObjectStorageRequest';
import DescribeLocationObjectStorageResponse from '../model/DescribeLocationObjectStorageResponse';
import DescribeLocationS3Request from '../model/DescribeLocationS3Request';
import DescribeLocationS3Response from '../model/DescribeLocationS3Response';
import DescribeLocationSmbRequest from '../model/DescribeLocationSmbRequest';
import DescribeLocationSmbResponse from '../model/DescribeLocationSmbResponse';
import DescribeStorageSystemRequest from '../model/DescribeStorageSystemRequest';
import DescribeStorageSystemResourceMetricsRequest from '../model/DescribeStorageSystemResourceMetricsRequest';
import DescribeStorageSystemResourceMetricsResponse from '../model/DescribeStorageSystemResourceMetricsResponse';
import DescribeStorageSystemResourcesRequest from '../model/DescribeStorageSystemResourcesRequest';
import DescribeStorageSystemResourcesResponse from '../model/DescribeStorageSystemResourcesResponse';
import DescribeStorageSystemResponse from '../model/DescribeStorageSystemResponse';
import DescribeTaskExecutionRequest from '../model/DescribeTaskExecutionRequest';
import DescribeTaskExecutionResponse from '../model/DescribeTaskExecutionResponse';
import DescribeTaskRequest from '../model/DescribeTaskRequest';
import DescribeTaskResponse from '../model/DescribeTaskResponse';
import GenerateRecommendationsRequest from '../model/GenerateRecommendationsRequest';
import ListAgentsRequest from '../model/ListAgentsRequest';
import ListAgentsResponse from '../model/ListAgentsResponse';
import ListDiscoveryJobsRequest from '../model/ListDiscoveryJobsRequest';
import ListDiscoveryJobsResponse from '../model/ListDiscoveryJobsResponse';
import ListLocationsRequest from '../model/ListLocationsRequest';
import ListLocationsResponse from '../model/ListLocationsResponse';
import ListStorageSystemsRequest from '../model/ListStorageSystemsRequest';
import ListStorageSystemsResponse from '../model/ListStorageSystemsResponse';
import ListTagsForResourceRequest from '../model/ListTagsForResourceRequest';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import ListTaskExecutionsRequest from '../model/ListTaskExecutionsRequest';
import ListTaskExecutionsResponse from '../model/ListTaskExecutionsResponse';
import ListTasksRequest from '../model/ListTasksRequest';
import ListTasksResponse from '../model/ListTasksResponse';
import RemoveStorageSystemRequest from '../model/RemoveStorageSystemRequest';
import StartDiscoveryJobRequest from '../model/StartDiscoveryJobRequest';
import StartDiscoveryJobResponse from '../model/StartDiscoveryJobResponse';
import StartTaskExecutionRequest from '../model/StartTaskExecutionRequest';
import StartTaskExecutionResponse from '../model/StartTaskExecutionResponse';
import StopDiscoveryJobRequest from '../model/StopDiscoveryJobRequest';
import TagResourceRequest from '../model/TagResourceRequest';
import UntagResourceRequest from '../model/UntagResourceRequest';
import UpdateAgentRequest from '../model/UpdateAgentRequest';
import UpdateDiscoveryJobRequest from '../model/UpdateDiscoveryJobRequest';
import UpdateLocationAzureBlobRequest from '../model/UpdateLocationAzureBlobRequest';
import UpdateLocationHdfsRequest from '../model/UpdateLocationHdfsRequest';
import UpdateLocationNfsRequest from '../model/UpdateLocationNfsRequest';
import UpdateLocationObjectStorageRequest from '../model/UpdateLocationObjectStorageRequest';
import UpdateLocationSmbRequest from '../model/UpdateLocationSmbRequest';
import UpdateStorageSystemRequest from '../model/UpdateStorageSystemRequest';
import UpdateTaskExecutionRequest from '../model/UpdateTaskExecutionRequest';
import UpdateTaskRequest from '../model/UpdateTaskRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-11-09
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addStorageSystem operation.
     * @callback module:api/DefaultApi~addStorageSystemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddStorageSystemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an Amazon Web Services resource for an on-premises storage system that you want DataSync Discovery to collect information about.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AddStorageSystemRequest} addStorageSystemRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~addStorageSystemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddStorageSystemResponse}
     */
    addStorageSystem(xAmzTarget, addStorageSystemRequest, opts, callback) {
      opts = opts || {};
      let postBody = addStorageSystemRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling addStorageSystem");
      }
      // verify the required parameter 'addStorageSystemRequest' is set
      if (addStorageSystemRequest === undefined || addStorageSystemRequest === null) {
        throw new Error("Missing the required parameter 'addStorageSystemRequest' when calling addStorageSystem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddStorageSystemResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.AddStorageSystem', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelTaskExecution operation.
     * @callback module:api/DefaultApi~cancelTaskExecutionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Stops an DataSync task execution that's in progress. The transfer of some files are abruptly interrupted. File contents that're transferred to the destination might be incomplete or inconsistent with the source files.</p> <p>However, if you start a new task execution using the same task and allow it to finish, file content on the destination will be complete and consistent. This applies to other unexpected failures that interrupt a task execution. In all of these cases, DataSync successfully completes the transfer when you start the next task execution.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CancelTaskExecutionRequest} cancelTaskExecutionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~cancelTaskExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cancelTaskExecution(xAmzTarget, cancelTaskExecutionRequest, opts, callback) {
      opts = opts || {};
      let postBody = cancelTaskExecutionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling cancelTaskExecution");
      }
      // verify the required parameter 'cancelTaskExecutionRequest' is set
      if (cancelTaskExecutionRequest === undefined || cancelTaskExecutionRequest === null) {
        throw new Error("Missing the required parameter 'cancelTaskExecutionRequest' when calling cancelTaskExecution");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.CancelTaskExecution', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAgent operation.
     * @callback module:api/DefaultApi~createAgentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAgentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Activates an DataSync agent that you've deployed in your storage environment. The activation process associates the agent with your Amazon Web Services account.</p> <p>If you haven't deployed an agent yet, see the following topics to learn more:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/agent-requirements.html\">Agent requirements</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/configure-agent.html\">Create an agent</a> </p> </li> </ul> <note> <p>If you're transferring between Amazon Web Services storage services, you don't need a DataSync agent. </p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateAgentRequest} createAgentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAgentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAgentResponse}
     */
    createAgent(xAmzTarget, createAgentRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAgentRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createAgent");
      }
      // verify the required parameter 'createAgentRequest' is set
      if (createAgentRequest === undefined || createAgentRequest === null) {
        throw new Error("Missing the required parameter 'createAgentRequest' when calling createAgent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAgentResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.CreateAgent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLocationAzureBlob operation.
     * @callback module:api/DefaultApi~createLocationAzureBlobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLocationAzureBlobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an endpoint for a Microsoft Azure Blob Storage container that DataSync can use as a transfer source or destination.</p> <p>Before you begin, make sure you know <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/creating-azure-blob-location.html#azure-blob-access\">how DataSync accesses Azure Blob Storage</a> and works with <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/creating-azure-blob-location.html#azure-blob-access-tiers\">access tiers</a> and <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/creating-azure-blob-location.html#blob-types\">blob types</a>. You also need a <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/creating-azure-blob-location.html#azure-blob-creating-agent\">DataSync agent</a> that can connect to your container.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateLocationAzureBlobRequest} createLocationAzureBlobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createLocationAzureBlobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLocationAzureBlobResponse}
     */
    createLocationAzureBlob(xAmzTarget, createLocationAzureBlobRequest, opts, callback) {
      opts = opts || {};
      let postBody = createLocationAzureBlobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createLocationAzureBlob");
      }
      // verify the required parameter 'createLocationAzureBlobRequest' is set
      if (createLocationAzureBlobRequest === undefined || createLocationAzureBlobRequest === null) {
        throw new Error("Missing the required parameter 'createLocationAzureBlobRequest' when calling createLocationAzureBlob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLocationAzureBlobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.CreateLocationAzureBlob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLocationEfs operation.
     * @callback module:api/DefaultApi~createLocationEfsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLocationEfsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an endpoint for an Amazon EFS file system that DataSync can access for a transfer. For more information, see <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/create-efs-location.html\">Creating a location for Amazon EFS</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateLocationEfsRequest} createLocationEfsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createLocationEfsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLocationEfsResponse}
     */
    createLocationEfs(xAmzTarget, createLocationEfsRequest, opts, callback) {
      opts = opts || {};
      let postBody = createLocationEfsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createLocationEfs");
      }
      // verify the required parameter 'createLocationEfsRequest' is set
      if (createLocationEfsRequest === undefined || createLocationEfsRequest === null) {
        throw new Error("Missing the required parameter 'createLocationEfsRequest' when calling createLocationEfs");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLocationEfsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.CreateLocationEfs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLocationFsxLustre operation.
     * @callback module:api/DefaultApi~createLocationFsxLustreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLocationFsxLustreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an endpoint for an Amazon FSx for Lustre file system.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateLocationFsxLustreRequest} createLocationFsxLustreRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createLocationFsxLustreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLocationFsxLustreResponse}
     */
    createLocationFsxLustre(xAmzTarget, createLocationFsxLustreRequest, opts, callback) {
      opts = opts || {};
      let postBody = createLocationFsxLustreRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createLocationFsxLustre");
      }
      // verify the required parameter 'createLocationFsxLustreRequest' is set
      if (createLocationFsxLustreRequest === undefined || createLocationFsxLustreRequest === null) {
        throw new Error("Missing the required parameter 'createLocationFsxLustreRequest' when calling createLocationFsxLustre");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLocationFsxLustreResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.CreateLocationFsxLustre', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLocationFsxOntap operation.
     * @callback module:api/DefaultApi~createLocationFsxOntapCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLocationFsxOntapResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an endpoint for an Amazon FSx for NetApp ONTAP file system that DataSync can access for a transfer. For more information, see <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/create-ontap-location.html\">Creating a location for FSx for ONTAP</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateLocationFsxOntapRequest} createLocationFsxOntapRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createLocationFsxOntapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLocationFsxOntapResponse}
     */
    createLocationFsxOntap(xAmzTarget, createLocationFsxOntapRequest, opts, callback) {
      opts = opts || {};
      let postBody = createLocationFsxOntapRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createLocationFsxOntap");
      }
      // verify the required parameter 'createLocationFsxOntapRequest' is set
      if (createLocationFsxOntapRequest === undefined || createLocationFsxOntapRequest === null) {
        throw new Error("Missing the required parameter 'createLocationFsxOntapRequest' when calling createLocationFsxOntap");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLocationFsxOntapResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.CreateLocationFsxOntap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLocationFsxOpenZfs operation.
     * @callback module:api/DefaultApi~createLocationFsxOpenZfsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLocationFsxOpenZfsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an endpoint for an Amazon FSx for OpenZFS file system that DataSync can access for a transfer. For more information, see <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/create-openzfs-location.html\">Creating a location for FSx for OpenZFS</a>.</p> <note> <p>Request parameters related to <code>SMB</code> aren't supported with the <code>CreateLocationFsxOpenZfs</code> operation.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateLocationFsxOpenZfsRequest} createLocationFsxOpenZfsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createLocationFsxOpenZfsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLocationFsxOpenZfsResponse}
     */
    createLocationFsxOpenZfs(xAmzTarget, createLocationFsxOpenZfsRequest, opts, callback) {
      opts = opts || {};
      let postBody = createLocationFsxOpenZfsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createLocationFsxOpenZfs");
      }
      // verify the required parameter 'createLocationFsxOpenZfsRequest' is set
      if (createLocationFsxOpenZfsRequest === undefined || createLocationFsxOpenZfsRequest === null) {
        throw new Error("Missing the required parameter 'createLocationFsxOpenZfsRequest' when calling createLocationFsxOpenZfs");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLocationFsxOpenZfsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.CreateLocationFsxOpenZfs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLocationFsxWindows operation.
     * @callback module:api/DefaultApi~createLocationFsxWindowsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLocationFsxWindowsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an endpoint for an Amazon FSx for Windows File Server file system.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateLocationFsxWindowsRequest} createLocationFsxWindowsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createLocationFsxWindowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLocationFsxWindowsResponse}
     */
    createLocationFsxWindows(xAmzTarget, createLocationFsxWindowsRequest, opts, callback) {
      opts = opts || {};
      let postBody = createLocationFsxWindowsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createLocationFsxWindows");
      }
      // verify the required parameter 'createLocationFsxWindowsRequest' is set
      if (createLocationFsxWindowsRequest === undefined || createLocationFsxWindowsRequest === null) {
        throw new Error("Missing the required parameter 'createLocationFsxWindowsRequest' when calling createLocationFsxWindows");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLocationFsxWindowsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.CreateLocationFsxWindows', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLocationHdfs operation.
     * @callback module:api/DefaultApi~createLocationHdfsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLocationHdfsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an endpoint for a Hadoop Distributed File System (HDFS). 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateLocationHdfsRequest} createLocationHdfsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createLocationHdfsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLocationHdfsResponse}
     */
    createLocationHdfs(xAmzTarget, createLocationHdfsRequest, opts, callback) {
      opts = opts || {};
      let postBody = createLocationHdfsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createLocationHdfs");
      }
      // verify the required parameter 'createLocationHdfsRequest' is set
      if (createLocationHdfsRequest === undefined || createLocationHdfsRequest === null) {
        throw new Error("Missing the required parameter 'createLocationHdfsRequest' when calling createLocationHdfs");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLocationHdfsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.CreateLocationHdfs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLocationNfs operation.
     * @callback module:api/DefaultApi~createLocationNfsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLocationNfsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an endpoint for a Network File System (NFS) file server that DataSync can use for a data transfer.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/create-nfs-location.html\">Configuring transfers to or from an NFS file server</a>.</p> <note> <p>If you're copying data to or from an Snowcone device, you can also use <code>CreateLocationNfs</code> to create your transfer location. For more information, see <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/nfs-on-snowcone.html\">Configuring transfers with Snowcone</a>.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateLocationNfsRequest} createLocationNfsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createLocationNfsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLocationNfsResponse}
     */
    createLocationNfs(xAmzTarget, createLocationNfsRequest, opts, callback) {
      opts = opts || {};
      let postBody = createLocationNfsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createLocationNfs");
      }
      // verify the required parameter 'createLocationNfsRequest' is set
      if (createLocationNfsRequest === undefined || createLocationNfsRequest === null) {
        throw new Error("Missing the required parameter 'createLocationNfsRequest' when calling createLocationNfs");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLocationNfsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.CreateLocationNfs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLocationObjectStorage operation.
     * @callback module:api/DefaultApi~createLocationObjectStorageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLocationObjectStorageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an endpoint for an object storage system that DataSync can access for a transfer. For more information, see <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/create-object-location.html\">Creating a location for object storage</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateLocationObjectStorageRequest} createLocationObjectStorageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createLocationObjectStorageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLocationObjectStorageResponse}
     */
    createLocationObjectStorage(xAmzTarget, createLocationObjectStorageRequest, opts, callback) {
      opts = opts || {};
      let postBody = createLocationObjectStorageRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createLocationObjectStorage");
      }
      // verify the required parameter 'createLocationObjectStorageRequest' is set
      if (createLocationObjectStorageRequest === undefined || createLocationObjectStorageRequest === null) {
        throw new Error("Missing the required parameter 'createLocationObjectStorageRequest' when calling createLocationObjectStorage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLocationObjectStorageResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.CreateLocationObjectStorage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLocationS3 operation.
     * @callback module:api/DefaultApi~createLocationS3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLocationS3Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>A <i>location</i> is an endpoint for an Amazon S3 bucket. DataSync can use the location as a source or destination for copying data.</p> <important> <p>Before you create your location, make sure that you read the following sections:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes\">Storage class considerations with Amazon S3 locations</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#create-s3-location-s3-requests\">Evaluating S3 request costs when using DataSync</a> </p> </li> </ul> </important> <p> For more information, see <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/create-locations-cli.html#create-location-s3-cli\">Creating an Amazon S3 location</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateLocationS3Request} createLocationS3Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createLocationS3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLocationS3Response}
     */
    createLocationS3(xAmzTarget, createLocationS3Request, opts, callback) {
      opts = opts || {};
      let postBody = createLocationS3Request;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createLocationS3");
      }
      // verify the required parameter 'createLocationS3Request' is set
      if (createLocationS3Request === undefined || createLocationS3Request === null) {
        throw new Error("Missing the required parameter 'createLocationS3Request' when calling createLocationS3");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLocationS3Response;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.CreateLocationS3', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLocationSmb operation.
     * @callback module:api/DefaultApi~createLocationSmbCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLocationSmbResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an endpoint for a Server Message Block (SMB) file server that DataSync can use for a data transfer.</p> <p>Before you begin, make sure that you understand how DataSync <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/create-smb-location.html\">accesses an SMB file server</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateLocationSmbRequest} createLocationSmbRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createLocationSmbCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLocationSmbResponse}
     */
    createLocationSmb(xAmzTarget, createLocationSmbRequest, opts, callback) {
      opts = opts || {};
      let postBody = createLocationSmbRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createLocationSmb");
      }
      // verify the required parameter 'createLocationSmbRequest' is set
      if (createLocationSmbRequest === undefined || createLocationSmbRequest === null) {
        throw new Error("Missing the required parameter 'createLocationSmbRequest' when calling createLocationSmb");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLocationSmbResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.CreateLocationSmb', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTask operation.
     * @callback module:api/DefaultApi~createTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTaskResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Configures a task, which defines where and how DataSync transfers your data.</p> <p>A task includes a source location, a destination location, and the preferences for how and when you want to transfer your data (such as bandwidth limits, scheduling, among other options).</p> <important> <p>If you're planning to transfer data to or from an Amazon S3 location, review <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#create-s3-location-s3-requests\">how DataSync can affect your S3 request charges</a> and the <a href=\"http://aws.amazon.com/datasync/pricing/\">DataSync pricing page</a> before you begin.</p> </important>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateTaskRequest} createTaskRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTaskResponse}
     */
    createTask(xAmzTarget, createTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = createTaskRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createTask");
      }
      // verify the required parameter 'createTaskRequest' is set
      if (createTaskRequest === undefined || createTaskRequest === null) {
        throw new Error("Missing the required parameter 'createTaskRequest' when calling createTask");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTaskResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.CreateTask', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAgent operation.
     * @callback module:api/DefaultApi~deleteAgentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an agent. To specify which agent to delete, use the Amazon Resource Name (ARN) of the agent in your request. The operation disassociates the agent from your Amazon Web Services account. However, it doesn't delete the agent virtual machine (VM) from your on-premises environment.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteAgentRequest} deleteAgentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAgentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteAgent(xAmzTarget, deleteAgentRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteAgentRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteAgent");
      }
      // verify the required parameter 'deleteAgentRequest' is set
      if (deleteAgentRequest === undefined || deleteAgentRequest === null) {
        throw new Error("Missing the required parameter 'deleteAgentRequest' when calling deleteAgent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.DeleteAgent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLocation operation.
     * @callback module:api/DefaultApi~deleteLocationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the configuration of a location used by DataSync. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteLocationRequest} deleteLocationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteLocation(xAmzTarget, deleteLocationRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteLocationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteLocation");
      }
      // verify the required parameter 'deleteLocationRequest' is set
      if (deleteLocationRequest === undefined || deleteLocationRequest === null) {
        throw new Error("Missing the required parameter 'deleteLocationRequest' when calling deleteLocation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.DeleteLocation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTask operation.
     * @callback module:api/DefaultApi~deleteTaskCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an DataSync task.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteTaskRequest} deleteTaskRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteTask(xAmzTarget, deleteTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteTaskRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteTask");
      }
      // verify the required parameter 'deleteTaskRequest' is set
      if (deleteTaskRequest === undefined || deleteTaskRequest === null) {
        throw new Error("Missing the required parameter 'deleteTaskRequest' when calling deleteTask");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.DeleteTask', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAgent operation.
     * @callback module:api/DefaultApi~describeAgentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAgentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns metadata about an DataSync agent, such as its name, endpoint type, and status.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeAgentRequest} describeAgentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeAgentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAgentResponse}
     */
    describeAgent(xAmzTarget, describeAgentRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeAgentRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeAgent");
      }
      // verify the required parameter 'describeAgentRequest' is set
      if (describeAgentRequest === undefined || describeAgentRequest === null) {
        throw new Error("Missing the required parameter 'describeAgentRequest' when calling describeAgent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeAgentResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.DescribeAgent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDiscoveryJob operation.
     * @callback module:api/DefaultApi~describeDiscoveryJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDiscoveryJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a DataSync discovery job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeDiscoveryJobRequest} describeDiscoveryJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeDiscoveryJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDiscoveryJobResponse}
     */
    describeDiscoveryJob(xAmzTarget, describeDiscoveryJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeDiscoveryJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeDiscoveryJob");
      }
      // verify the required parameter 'describeDiscoveryJobRequest' is set
      if (describeDiscoveryJobRequest === undefined || describeDiscoveryJobRequest === null) {
        throw new Error("Missing the required parameter 'describeDiscoveryJobRequest' when calling describeDiscoveryJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeDiscoveryJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.DescribeDiscoveryJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeLocationAzureBlob operation.
     * @callback module:api/DefaultApi~describeLocationAzureBlobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeLocationAzureBlobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides details about how an DataSync transfer location for Microsoft Azure Blob Storage is configured.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeLocationAzureBlobRequest} describeLocationAzureBlobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeLocationAzureBlobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeLocationAzureBlobResponse}
     */
    describeLocationAzureBlob(xAmzTarget, describeLocationAzureBlobRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeLocationAzureBlobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeLocationAzureBlob");
      }
      // verify the required parameter 'describeLocationAzureBlobRequest' is set
      if (describeLocationAzureBlobRequest === undefined || describeLocationAzureBlobRequest === null) {
        throw new Error("Missing the required parameter 'describeLocationAzureBlobRequest' when calling describeLocationAzureBlob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeLocationAzureBlobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.DescribeLocationAzureBlob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeLocationEfs operation.
     * @callback module:api/DefaultApi~describeLocationEfsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeLocationEfsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns metadata about your DataSync location for an Amazon EFS file system.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeLocationEfsRequest} describeLocationEfsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeLocationEfsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeLocationEfsResponse}
     */
    describeLocationEfs(xAmzTarget, describeLocationEfsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeLocationEfsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeLocationEfs");
      }
      // verify the required parameter 'describeLocationEfsRequest' is set
      if (describeLocationEfsRequest === undefined || describeLocationEfsRequest === null) {
        throw new Error("Missing the required parameter 'describeLocationEfsRequest' when calling describeLocationEfs");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeLocationEfsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.DescribeLocationEfs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeLocationFsxLustre operation.
     * @callback module:api/DefaultApi~describeLocationFsxLustreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeLocationFsxLustreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides details about how an DataSync location for an Amazon FSx for Lustre file system is configured.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeLocationFsxLustreRequest} describeLocationFsxLustreRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeLocationFsxLustreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeLocationFsxLustreResponse}
     */
    describeLocationFsxLustre(xAmzTarget, describeLocationFsxLustreRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeLocationFsxLustreRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeLocationFsxLustre");
      }
      // verify the required parameter 'describeLocationFsxLustreRequest' is set
      if (describeLocationFsxLustreRequest === undefined || describeLocationFsxLustreRequest === null) {
        throw new Error("Missing the required parameter 'describeLocationFsxLustreRequest' when calling describeLocationFsxLustre");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeLocationFsxLustreResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.DescribeLocationFsxLustre', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeLocationFsxOntap operation.
     * @callback module:api/DefaultApi~describeLocationFsxOntapCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeLocationFsxOntapResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Provides details about how an DataSync location for an Amazon FSx for NetApp ONTAP file system is configured.</p> <note> <p>If your location uses SMB, the <code>DescribeLocationFsxOntap</code> operation doesn't actually return a <code>Password</code>.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeLocationFsxOntapRequest} describeLocationFsxOntapRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeLocationFsxOntapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeLocationFsxOntapResponse}
     */
    describeLocationFsxOntap(xAmzTarget, describeLocationFsxOntapRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeLocationFsxOntapRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeLocationFsxOntap");
      }
      // verify the required parameter 'describeLocationFsxOntapRequest' is set
      if (describeLocationFsxOntapRequest === undefined || describeLocationFsxOntapRequest === null) {
        throw new Error("Missing the required parameter 'describeLocationFsxOntapRequest' when calling describeLocationFsxOntap");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeLocationFsxOntapResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.DescribeLocationFsxOntap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeLocationFsxOpenZfs operation.
     * @callback module:api/DefaultApi~describeLocationFsxOpenZfsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeLocationFsxOpenZfsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Provides details about how an DataSync location for an Amazon FSx for OpenZFS file system is configured.</p> <note> <p>Response elements related to <code>SMB</code> aren't supported with the <code>DescribeLocationFsxOpenZfs</code> operation.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeLocationFsxOpenZfsRequest} describeLocationFsxOpenZfsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeLocationFsxOpenZfsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeLocationFsxOpenZfsResponse}
     */
    describeLocationFsxOpenZfs(xAmzTarget, describeLocationFsxOpenZfsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeLocationFsxOpenZfsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeLocationFsxOpenZfs");
      }
      // verify the required parameter 'describeLocationFsxOpenZfsRequest' is set
      if (describeLocationFsxOpenZfsRequest === undefined || describeLocationFsxOpenZfsRequest === null) {
        throw new Error("Missing the required parameter 'describeLocationFsxOpenZfsRequest' when calling describeLocationFsxOpenZfs");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeLocationFsxOpenZfsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.DescribeLocationFsxOpenZfs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeLocationFsxWindows operation.
     * @callback module:api/DefaultApi~describeLocationFsxWindowsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeLocationFsxWindowsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns metadata about an Amazon FSx for Windows File Server location, such as information about its path.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeLocationFsxWindowsRequest} describeLocationFsxWindowsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeLocationFsxWindowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeLocationFsxWindowsResponse}
     */
    describeLocationFsxWindows(xAmzTarget, describeLocationFsxWindowsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeLocationFsxWindowsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeLocationFsxWindows");
      }
      // verify the required parameter 'describeLocationFsxWindowsRequest' is set
      if (describeLocationFsxWindowsRequest === undefined || describeLocationFsxWindowsRequest === null) {
        throw new Error("Missing the required parameter 'describeLocationFsxWindowsRequest' when calling describeLocationFsxWindows");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeLocationFsxWindowsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.DescribeLocationFsxWindows', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeLocationHdfs operation.
     * @callback module:api/DefaultApi~describeLocationHdfsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeLocationHdfsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns metadata, such as the authentication information about the Hadoop Distributed File System (HDFS) location. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeLocationHdfsRequest} describeLocationHdfsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeLocationHdfsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeLocationHdfsResponse}
     */
    describeLocationHdfs(xAmzTarget, describeLocationHdfsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeLocationHdfsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeLocationHdfs");
      }
      // verify the required parameter 'describeLocationHdfsRequest' is set
      if (describeLocationHdfsRequest === undefined || describeLocationHdfsRequest === null) {
        throw new Error("Missing the required parameter 'describeLocationHdfsRequest' when calling describeLocationHdfs");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeLocationHdfsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.DescribeLocationHdfs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeLocationNfs operation.
     * @callback module:api/DefaultApi~describeLocationNfsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeLocationNfsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides details about how an DataSync transfer location for a Network File System (NFS) file server is configured.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeLocationNfsRequest} describeLocationNfsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeLocationNfsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeLocationNfsResponse}
     */
    describeLocationNfs(xAmzTarget, describeLocationNfsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeLocationNfsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeLocationNfs");
      }
      // verify the required parameter 'describeLocationNfsRequest' is set
      if (describeLocationNfsRequest === undefined || describeLocationNfsRequest === null) {
        throw new Error("Missing the required parameter 'describeLocationNfsRequest' when calling describeLocationNfs");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeLocationNfsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.DescribeLocationNfs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeLocationObjectStorage operation.
     * @callback module:api/DefaultApi~describeLocationObjectStorageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeLocationObjectStorageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns metadata about your DataSync location for an object storage system.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeLocationObjectStorageRequest} describeLocationObjectStorageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeLocationObjectStorageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeLocationObjectStorageResponse}
     */
    describeLocationObjectStorage(xAmzTarget, describeLocationObjectStorageRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeLocationObjectStorageRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeLocationObjectStorage");
      }
      // verify the required parameter 'describeLocationObjectStorageRequest' is set
      if (describeLocationObjectStorageRequest === undefined || describeLocationObjectStorageRequest === null) {
        throw new Error("Missing the required parameter 'describeLocationObjectStorageRequest' when calling describeLocationObjectStorage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeLocationObjectStorageResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.DescribeLocationObjectStorage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeLocationS3 operation.
     * @callback module:api/DefaultApi~describeLocationS3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeLocationS3Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns metadata, such as bucket name, about an Amazon S3 bucket location.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeLocationS3Request} describeLocationS3Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeLocationS3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeLocationS3Response}
     */
    describeLocationS3(xAmzTarget, describeLocationS3Request, opts, callback) {
      opts = opts || {};
      let postBody = describeLocationS3Request;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeLocationS3");
      }
      // verify the required parameter 'describeLocationS3Request' is set
      if (describeLocationS3Request === undefined || describeLocationS3Request === null) {
        throw new Error("Missing the required parameter 'describeLocationS3Request' when calling describeLocationS3");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeLocationS3Response;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.DescribeLocationS3', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeLocationSmb operation.
     * @callback module:api/DefaultApi~describeLocationSmbCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeLocationSmbResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns metadata, such as the path and user information about an SMB location.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeLocationSmbRequest} describeLocationSmbRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeLocationSmbCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeLocationSmbResponse}
     */
    describeLocationSmb(xAmzTarget, describeLocationSmbRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeLocationSmbRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeLocationSmb");
      }
      // verify the required parameter 'describeLocationSmbRequest' is set
      if (describeLocationSmbRequest === undefined || describeLocationSmbRequest === null) {
        throw new Error("Missing the required parameter 'describeLocationSmbRequest' when calling describeLocationSmb");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeLocationSmbResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.DescribeLocationSmb', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeStorageSystem operation.
     * @callback module:api/DefaultApi~describeStorageSystemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeStorageSystemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about an on-premises storage system that you're using with DataSync Discovery.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeStorageSystemRequest} describeStorageSystemRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeStorageSystemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeStorageSystemResponse}
     */
    describeStorageSystem(xAmzTarget, describeStorageSystemRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeStorageSystemRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeStorageSystem");
      }
      // verify the required parameter 'describeStorageSystemRequest' is set
      if (describeStorageSystemRequest === undefined || describeStorageSystemRequest === null) {
        throw new Error("Missing the required parameter 'describeStorageSystemRequest' when calling describeStorageSystem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeStorageSystemResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.DescribeStorageSystem', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeStorageSystemResourceMetrics operation.
     * @callback module:api/DefaultApi~describeStorageSystemResourceMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeStorageSystemResourceMetricsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information, including performance data and capacity usage, which DataSync Discovery collects about a specific resource in your-premises storage system.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeStorageSystemResourceMetricsRequest} describeStorageSystemResourceMetricsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeStorageSystemResourceMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeStorageSystemResourceMetricsResponse}
     */
    describeStorageSystemResourceMetrics(xAmzTarget, describeStorageSystemResourceMetricsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeStorageSystemResourceMetricsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeStorageSystemResourceMetrics");
      }
      // verify the required parameter 'describeStorageSystemResourceMetricsRequest' is set
      if (describeStorageSystemResourceMetricsRequest === undefined || describeStorageSystemResourceMetricsRequest === null) {
        throw new Error("Missing the required parameter 'describeStorageSystemResourceMetricsRequest' when calling describeStorageSystemResourceMetrics");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeStorageSystemResourceMetricsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.DescribeStorageSystemResourceMetrics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeStorageSystemResources operation.
     * @callback module:api/DefaultApi~describeStorageSystemResourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeStorageSystemResourcesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information that DataSync Discovery collects about resources in your on-premises storage system.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeStorageSystemResourcesRequest} describeStorageSystemResourcesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeStorageSystemResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeStorageSystemResourcesResponse}
     */
    describeStorageSystemResources(xAmzTarget, describeStorageSystemResourcesRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeStorageSystemResourcesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeStorageSystemResources");
      }
      // verify the required parameter 'describeStorageSystemResourcesRequest' is set
      if (describeStorageSystemResourcesRequest === undefined || describeStorageSystemResourcesRequest === null) {
        throw new Error("Missing the required parameter 'describeStorageSystemResourcesRequest' when calling describeStorageSystemResources");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeStorageSystemResourcesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.DescribeStorageSystemResources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeTask operation.
     * @callback module:api/DefaultApi~describeTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeTaskResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides information about an DataSync transfer task.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeTaskRequest} describeTaskRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeTaskResponse}
     */
    describeTask(xAmzTarget, describeTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeTaskRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeTask");
      }
      // verify the required parameter 'describeTaskRequest' is set
      if (describeTaskRequest === undefined || describeTaskRequest === null) {
        throw new Error("Missing the required parameter 'describeTaskRequest' when calling describeTask");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeTaskResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.DescribeTask', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeTaskExecution operation.
     * @callback module:api/DefaultApi~describeTaskExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeTaskExecutionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides information about an DataSync transfer task that's running.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeTaskExecutionRequest} describeTaskExecutionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeTaskExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeTaskExecutionResponse}
     */
    describeTaskExecution(xAmzTarget, describeTaskExecutionRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeTaskExecutionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeTaskExecution");
      }
      // verify the required parameter 'describeTaskExecutionRequest' is set
      if (describeTaskExecutionRequest === undefined || describeTaskExecutionRequest === null) {
        throw new Error("Missing the required parameter 'describeTaskExecutionRequest' when calling describeTaskExecution");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeTaskExecutionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.DescribeTaskExecution', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateRecommendations operation.
     * @callback module:api/DefaultApi~generateRecommendationsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates recommendations about where to migrate your data to in Amazon Web Services. Recommendations are generated based on information that DataSync Discovery collects about your on-premises storage system's resources. For more information, see <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/discovery-understand-recommendations.html\">Recommendations provided by DataSync Discovery</a>.</p> <p>Once generated, you can view your recommendations by using the <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/API_DescribeStorageSystemResources.html\">DescribeStorageSystemResources</a> operation.</p> <note> <p>If your <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/discovery-job-statuses.html#discovery-job-statuses-table\">discovery job completes successfully</a>, you don't need to use this operation. DataSync Discovery generates the recommendations for you automatically.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GenerateRecommendationsRequest} generateRecommendationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~generateRecommendationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    generateRecommendations(xAmzTarget, generateRecommendationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = generateRecommendationsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling generateRecommendations");
      }
      // verify the required parameter 'generateRecommendationsRequest' is set
      if (generateRecommendationsRequest === undefined || generateRecommendationsRequest === null) {
        throw new Error("Missing the required parameter 'generateRecommendationsRequest' when calling generateRecommendations");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.GenerateRecommendations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAgents operation.
     * @callback module:api/DefaultApi~listAgentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAgentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a list of DataSync agents that belong to an Amazon Web Services account in the Amazon Web Services Region specified in the request.</p> <p>With pagination, you can reduce the number of agents returned in a response. If you get a truncated list of agents in a response, the response contains a marker that you can specify in your next request to fetch the next page of agents.</p> <p> <code>ListAgents</code> is eventually consistent. This means the result of running the operation might not reflect that you just created or deleted an agent. For example, if you create an agent with <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/API_CreateAgent.html\">CreateAgent</a> and then immediately run <code>ListAgents</code>, that agent might not show up in the list right away. In situations like this, you can always confirm whether an agent has been created (or deleted) by using <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/API_DescribeAgent.html\">DescribeAgent</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListAgentsRequest} listAgentsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listAgentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAgentsResponse}
     */
    listAgents(xAmzTarget, listAgentsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAgentsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listAgents");
      }
      // verify the required parameter 'listAgentsRequest' is set
      if (listAgentsRequest === undefined || listAgentsRequest === null) {
        throw new Error("Missing the required parameter 'listAgentsRequest' when calling listAgents");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAgentsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.ListAgents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDiscoveryJobs operation.
     * @callback module:api/DefaultApi~listDiscoveryJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDiscoveryJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides a list of the existing discovery jobs in the Amazon Web Services Region and Amazon Web Services account where you're using DataSync Discovery.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListDiscoveryJobsRequest} listDiscoveryJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listDiscoveryJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDiscoveryJobsResponse}
     */
    listDiscoveryJobs(xAmzTarget, listDiscoveryJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listDiscoveryJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listDiscoveryJobs");
      }
      // verify the required parameter 'listDiscoveryJobsRequest' is set
      if (listDiscoveryJobsRequest === undefined || listDiscoveryJobsRequest === null) {
        throw new Error("Missing the required parameter 'listDiscoveryJobsRequest' when calling listDiscoveryJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListDiscoveryJobsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.ListDiscoveryJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLocations operation.
     * @callback module:api/DefaultApi~listLocationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLocationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a list of source and destination locations.</p> <p>If you have more locations than are returned in a response (that is, the response returns only a truncated list of your agents), the response contains a token that you can specify in your next request to fetch the next page of locations.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListLocationsRequest} listLocationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listLocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLocationsResponse}
     */
    listLocations(xAmzTarget, listLocationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listLocationsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listLocations");
      }
      // verify the required parameter 'listLocationsRequest' is set
      if (listLocationsRequest === undefined || listLocationsRequest === null) {
        throw new Error("Missing the required parameter 'listLocationsRequest' when calling listLocations");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListLocationsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.ListLocations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listStorageSystems operation.
     * @callback module:api/DefaultApi~listStorageSystemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListStorageSystemsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the on-premises storage systems that you're using with DataSync Discovery.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListStorageSystemsRequest} listStorageSystemsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listStorageSystemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListStorageSystemsResponse}
     */
    listStorageSystems(xAmzTarget, listStorageSystemsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listStorageSystemsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listStorageSystems");
      }
      // verify the required parameter 'listStorageSystemsRequest' is set
      if (listStorageSystemsRequest === undefined || listStorageSystemsRequest === null) {
        throw new Error("Missing the required parameter 'listStorageSystemsRequest' when calling listStorageSystems");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListStorageSystemsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.ListStorageSystems', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all the tags associated with an Amazon Web Services resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTagsForResourceRequest} listTagsForResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(xAmzTarget, listTagsForResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTagsForResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTagsForResource");
      }
      // verify the required parameter 'listTagsForResourceRequest' is set
      if (listTagsForResourceRequest === undefined || listTagsForResourceRequest === null) {
        throw new Error("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.ListTagsForResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTaskExecutions operation.
     * @callback module:api/DefaultApi~listTaskExecutionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTaskExecutionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of executed tasks.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTaskExecutionsRequest} listTaskExecutionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTaskExecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTaskExecutionsResponse}
     */
    listTaskExecutions(xAmzTarget, listTaskExecutionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTaskExecutionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTaskExecutions");
      }
      // verify the required parameter 'listTaskExecutionsRequest' is set
      if (listTaskExecutionsRequest === undefined || listTaskExecutionsRequest === null) {
        throw new Error("Missing the required parameter 'listTaskExecutionsRequest' when calling listTaskExecutions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTaskExecutionsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.ListTaskExecutions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTasks operation.
     * @callback module:api/DefaultApi~listTasksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTasksResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of the DataSync tasks you created.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTasksRequest} listTasksRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTasksResponse}
     */
    listTasks(xAmzTarget, listTasksRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTasksRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTasks");
      }
      // verify the required parameter 'listTasksRequest' is set
      if (listTasksRequest === undefined || listTasksRequest === null) {
        throw new Error("Missing the required parameter 'listTasksRequest' when calling listTasks");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTasksResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.ListTasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeStorageSystem operation.
     * @callback module:api/DefaultApi~removeStorageSystemCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Permanently removes a storage system resource from DataSync Discovery, including the associated discovery jobs, collected data, and recommendations.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/RemoveStorageSystemRequest} removeStorageSystemRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~removeStorageSystemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    removeStorageSystem(xAmzTarget, removeStorageSystemRequest, opts, callback) {
      opts = opts || {};
      let postBody = removeStorageSystemRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling removeStorageSystem");
      }
      // verify the required parameter 'removeStorageSystemRequest' is set
      if (removeStorageSystemRequest === undefined || removeStorageSystemRequest === null) {
        throw new Error("Missing the required parameter 'removeStorageSystemRequest' when calling removeStorageSystem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.RemoveStorageSystem', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startDiscoveryJob operation.
     * @callback module:api/DefaultApi~startDiscoveryJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartDiscoveryJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs a DataSync discovery job on your on-premises storage system. If you haven't added the storage system to DataSync Discovery yet, do this first by using the <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/API_AddStorageSystem.html\">AddStorageSystem</a> operation.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartDiscoveryJobRequest} startDiscoveryJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startDiscoveryJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartDiscoveryJobResponse}
     */
    startDiscoveryJob(xAmzTarget, startDiscoveryJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = startDiscoveryJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startDiscoveryJob");
      }
      // verify the required parameter 'startDiscoveryJobRequest' is set
      if (startDiscoveryJobRequest === undefined || startDiscoveryJobRequest === null) {
        throw new Error("Missing the required parameter 'startDiscoveryJobRequest' when calling startDiscoveryJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartDiscoveryJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.StartDiscoveryJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startTaskExecution operation.
     * @callback module:api/DefaultApi~startTaskExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartTaskExecutionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Starts an DataSync task. For each task, you can only run one task execution at a time.</p> <p>There are several phases to a task execution. For more information, see <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/working-with-task-executions.html#understand-task-execution-statuses\">Task execution statuses</a>.</p> <important> <p>If you're planning to transfer data to or from an Amazon S3 location, review <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#create-s3-location-s3-requests\">how DataSync can affect your S3 request charges</a> and the <a href=\"http://aws.amazon.com/datasync/pricing/\">DataSync pricing page</a> before you begin.</p> </important>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartTaskExecutionRequest} startTaskExecutionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startTaskExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartTaskExecutionResponse}
     */
    startTaskExecution(xAmzTarget, startTaskExecutionRequest, opts, callback) {
      opts = opts || {};
      let postBody = startTaskExecutionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startTaskExecution");
      }
      // verify the required parameter 'startTaskExecutionRequest' is set
      if (startTaskExecutionRequest === undefined || startTaskExecutionRequest === null) {
        throw new Error("Missing the required parameter 'startTaskExecutionRequest' when calling startTaskExecution");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartTaskExecutionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.StartTaskExecution', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopDiscoveryJob operation.
     * @callback module:api/DefaultApi~stopDiscoveryJobCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Stops a running DataSync discovery job.</p> <p>You can stop a discovery job anytime. A job that's stopped before it's scheduled to end likely will provide you some information about your on-premises storage system resources. To get recommendations for a stopped job, you must use the <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/API_GenerateRecommendations.html\">GenerateRecommendations</a> operation.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopDiscoveryJobRequest} stopDiscoveryJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopDiscoveryJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    stopDiscoveryJob(xAmzTarget, stopDiscoveryJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopDiscoveryJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopDiscoveryJob");
      }
      // verify the required parameter 'stopDiscoveryJobRequest' is set
      if (stopDiscoveryJobRequest === undefined || stopDiscoveryJobRequest === null) {
        throw new Error("Missing the required parameter 'stopDiscoveryJobRequest' when calling stopDiscoveryJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.StopDiscoveryJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Applies a <i>tag</i> to an Amazon Web Services resource. Tags are key-value pairs that can help you manage, filter, and search for your resources.</p> <p>These include DataSync resources, such as locations, tasks, and task executions.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(xAmzTarget, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.TagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes tags from an Amazon Web Services resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UntagResourceRequest} untagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(xAmzTarget, untagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = untagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling untagResource");
      }
      // verify the required parameter 'untagResourceRequest' is set
      if (untagResourceRequest === undefined || untagResourceRequest === null) {
        throw new Error("Missing the required parameter 'untagResourceRequest' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.UntagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAgent operation.
     * @callback module:api/DefaultApi~updateAgentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the name of an agent.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateAgentRequest} updateAgentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAgentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateAgent(xAmzTarget, updateAgentRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAgentRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateAgent");
      }
      // verify the required parameter 'updateAgentRequest' is set
      if (updateAgentRequest === undefined || updateAgentRequest === null) {
        throw new Error("Missing the required parameter 'updateAgentRequest' when calling updateAgent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.UpdateAgent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDiscoveryJob operation.
     * @callback module:api/DefaultApi~updateDiscoveryJobCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edits a DataSync discovery job configuration.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateDiscoveryJobRequest} updateDiscoveryJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateDiscoveryJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDiscoveryJob(xAmzTarget, updateDiscoveryJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateDiscoveryJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateDiscoveryJob");
      }
      // verify the required parameter 'updateDiscoveryJobRequest' is set
      if (updateDiscoveryJobRequest === undefined || updateDiscoveryJobRequest === null) {
        throw new Error("Missing the required parameter 'updateDiscoveryJobRequest' when calling updateDiscoveryJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.UpdateDiscoveryJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLocationAzureBlob operation.
     * @callback module:api/DefaultApi~updateLocationAzureBlobCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies some configurations of the Microsoft Azure Blob Storage transfer location that you're using with DataSync.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateLocationAzureBlobRequest} updateLocationAzureBlobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateLocationAzureBlobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateLocationAzureBlob(xAmzTarget, updateLocationAzureBlobRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateLocationAzureBlobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateLocationAzureBlob");
      }
      // verify the required parameter 'updateLocationAzureBlobRequest' is set
      if (updateLocationAzureBlobRequest === undefined || updateLocationAzureBlobRequest === null) {
        throw new Error("Missing the required parameter 'updateLocationAzureBlobRequest' when calling updateLocationAzureBlob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.UpdateLocationAzureBlob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLocationHdfs operation.
     * @callback module:api/DefaultApi~updateLocationHdfsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates some parameters of a previously created location for a Hadoop Distributed File System cluster.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateLocationHdfsRequest} updateLocationHdfsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateLocationHdfsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateLocationHdfs(xAmzTarget, updateLocationHdfsRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateLocationHdfsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateLocationHdfs");
      }
      // verify the required parameter 'updateLocationHdfsRequest' is set
      if (updateLocationHdfsRequest === undefined || updateLocationHdfsRequest === null) {
        throw new Error("Missing the required parameter 'updateLocationHdfsRequest' when calling updateLocationHdfs");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.UpdateLocationHdfs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLocationNfs operation.
     * @callback module:api/DefaultApi~updateLocationNfsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Modifies some configurations of the Network File System (NFS) transfer location that you're using with DataSync.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/create-nfs-location.html\">Configuring transfers to or from an NFS file server</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateLocationNfsRequest} updateLocationNfsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateLocationNfsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateLocationNfs(xAmzTarget, updateLocationNfsRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateLocationNfsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateLocationNfs");
      }
      // verify the required parameter 'updateLocationNfsRequest' is set
      if (updateLocationNfsRequest === undefined || updateLocationNfsRequest === null) {
        throw new Error("Missing the required parameter 'updateLocationNfsRequest' when calling updateLocationNfs");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.UpdateLocationNfs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLocationObjectStorage operation.
     * @callback module:api/DefaultApi~updateLocationObjectStorageCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates some parameters of an existing object storage location that DataSync accesses for a transfer. For information about creating a self-managed object storage location, see <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/create-object-location.html\">Creating a location for object storage</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateLocationObjectStorageRequest} updateLocationObjectStorageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateLocationObjectStorageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateLocationObjectStorage(xAmzTarget, updateLocationObjectStorageRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateLocationObjectStorageRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateLocationObjectStorage");
      }
      // verify the required parameter 'updateLocationObjectStorageRequest' is set
      if (updateLocationObjectStorageRequest === undefined || updateLocationObjectStorageRequest === null) {
        throw new Error("Missing the required parameter 'updateLocationObjectStorageRequest' when calling updateLocationObjectStorage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.UpdateLocationObjectStorage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLocationSmb operation.
     * @callback module:api/DefaultApi~updateLocationSmbCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates some of the parameters of a previously created location for Server Message Block (SMB) file system access. For information about creating an SMB location, see <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/create-smb-location.html\">Creating a location for SMB</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateLocationSmbRequest} updateLocationSmbRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateLocationSmbCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateLocationSmb(xAmzTarget, updateLocationSmbRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateLocationSmbRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateLocationSmb");
      }
      // verify the required parameter 'updateLocationSmbRequest' is set
      if (updateLocationSmbRequest === undefined || updateLocationSmbRequest === null) {
        throw new Error("Missing the required parameter 'updateLocationSmbRequest' when calling updateLocationSmb");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.UpdateLocationSmb', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStorageSystem operation.
     * @callback module:api/DefaultApi~updateStorageSystemCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies some configurations of an on-premises storage system resource that you're using with DataSync Discovery.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateStorageSystemRequest} updateStorageSystemRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateStorageSystemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateStorageSystem(xAmzTarget, updateStorageSystemRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateStorageSystemRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateStorageSystem");
      }
      // verify the required parameter 'updateStorageSystemRequest' is set
      if (updateStorageSystemRequest === undefined || updateStorageSystemRequest === null) {
        throw new Error("Missing the required parameter 'updateStorageSystemRequest' when calling updateStorageSystem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.UpdateStorageSystem', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTask operation.
     * @callback module:api/DefaultApi~updateTaskCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the metadata associated with a task.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateTaskRequest} updateTaskRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateTask(xAmzTarget, updateTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateTaskRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateTask");
      }
      // verify the required parameter 'updateTaskRequest' is set
      if (updateTaskRequest === undefined || updateTaskRequest === null) {
        throw new Error("Missing the required parameter 'updateTaskRequest' when calling updateTask");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.UpdateTask', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTaskExecution operation.
     * @callback module:api/DefaultApi~updateTaskExecutionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Modifies a running DataSync task.</p> <note> <p>Currently, the only <code>Option</code> that you can modify with <code>UpdateTaskExecution</code> is <code> <a href=\"https://docs.aws.amazon.com/datasync/latest/userguide/API_Options.html#DataSync-Type-Options-BytesPerSecond\">BytesPerSecond</a> </code>, which throttles bandwidth for a running or queued task.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateTaskExecutionRequest} updateTaskExecutionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateTaskExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateTaskExecution(xAmzTarget, updateTaskExecutionRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateTaskExecutionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateTaskExecution");
      }
      // verify the required parameter 'updateTaskExecutionRequest' is set
      if (updateTaskExecutionRequest === undefined || updateTaskExecutionRequest === null) {
        throw new Error("Missing the required parameter 'updateTaskExecutionRequest' when calling updateTaskExecution");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=FmrsService.UpdateTaskExecution', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
