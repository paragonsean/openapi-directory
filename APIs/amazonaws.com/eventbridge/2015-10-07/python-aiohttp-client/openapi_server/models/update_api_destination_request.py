# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_destination_http_method import ApiDestinationHttpMethod
from openapi_server import util


class UpdateApiDestinationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, connection_arn: str=None, invocation_endpoint: str=None, http_method: ApiDestinationHttpMethod=None, invocation_rate_limit_per_second: int=None):
        """UpdateApiDestinationRequest - a model defined in OpenAPI

        :param name: The name of this UpdateApiDestinationRequest.
        :param description: The description of this UpdateApiDestinationRequest.
        :param connection_arn: The connection_arn of this UpdateApiDestinationRequest.
        :param invocation_endpoint: The invocation_endpoint of this UpdateApiDestinationRequest.
        :param http_method: The http_method of this UpdateApiDestinationRequest.
        :param invocation_rate_limit_per_second: The invocation_rate_limit_per_second of this UpdateApiDestinationRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'connection_arn': str,
            'invocation_endpoint': str,
            'http_method': ApiDestinationHttpMethod,
            'invocation_rate_limit_per_second': int
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'connection_arn': 'ConnectionArn',
            'invocation_endpoint': 'InvocationEndpoint',
            'http_method': 'HttpMethod',
            'invocation_rate_limit_per_second': 'InvocationRateLimitPerSecond'
        }

        self._name = name
        self._description = description
        self._connection_arn = connection_arn
        self._invocation_endpoint = invocation_endpoint
        self._http_method = http_method
        self._invocation_rate_limit_per_second = invocation_rate_limit_per_second

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateApiDestinationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateApiDestinationRequest of this UpdateApiDestinationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this UpdateApiDestinationRequest.


        :return: The name of this UpdateApiDestinationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateApiDestinationRequest.


        :param name: The name of this UpdateApiDestinationRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this UpdateApiDestinationRequest.


        :return: The description of this UpdateApiDestinationRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateApiDestinationRequest.


        :param description: The description of this UpdateApiDestinationRequest.
        :type description: str
        """

        self._description = description

    @property
    def connection_arn(self):
        """Gets the connection_arn of this UpdateApiDestinationRequest.


        :return: The connection_arn of this UpdateApiDestinationRequest.
        :rtype: str
        """
        return self._connection_arn

    @connection_arn.setter
    def connection_arn(self, connection_arn):
        """Sets the connection_arn of this UpdateApiDestinationRequest.


        :param connection_arn: The connection_arn of this UpdateApiDestinationRequest.
        :type connection_arn: str
        """

        self._connection_arn = connection_arn

    @property
    def invocation_endpoint(self):
        """Gets the invocation_endpoint of this UpdateApiDestinationRequest.


        :return: The invocation_endpoint of this UpdateApiDestinationRequest.
        :rtype: str
        """
        return self._invocation_endpoint

    @invocation_endpoint.setter
    def invocation_endpoint(self, invocation_endpoint):
        """Sets the invocation_endpoint of this UpdateApiDestinationRequest.


        :param invocation_endpoint: The invocation_endpoint of this UpdateApiDestinationRequest.
        :type invocation_endpoint: str
        """

        self._invocation_endpoint = invocation_endpoint

    @property
    def http_method(self):
        """Gets the http_method of this UpdateApiDestinationRequest.


        :return: The http_method of this UpdateApiDestinationRequest.
        :rtype: ApiDestinationHttpMethod
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this UpdateApiDestinationRequest.


        :param http_method: The http_method of this UpdateApiDestinationRequest.
        :type http_method: ApiDestinationHttpMethod
        """

        self._http_method = http_method

    @property
    def invocation_rate_limit_per_second(self):
        """Gets the invocation_rate_limit_per_second of this UpdateApiDestinationRequest.


        :return: The invocation_rate_limit_per_second of this UpdateApiDestinationRequest.
        :rtype: int
        """
        return self._invocation_rate_limit_per_second

    @invocation_rate_limit_per_second.setter
    def invocation_rate_limit_per_second(self, invocation_rate_limit_per_second):
        """Sets the invocation_rate_limit_per_second of this UpdateApiDestinationRequest.


        :param invocation_rate_limit_per_second: The invocation_rate_limit_per_second of this UpdateApiDestinationRequest.
        :type invocation_rate_limit_per_second: int
        """

        self._invocation_rate_limit_per_second = invocation_rate_limit_per_second
