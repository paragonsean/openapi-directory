# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateArchiveRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archive_name: str=None, description: str=None, event_pattern: str=None, retention_days: int=None):
        """UpdateArchiveRequest - a model defined in OpenAPI

        :param archive_name: The archive_name of this UpdateArchiveRequest.
        :param description: The description of this UpdateArchiveRequest.
        :param event_pattern: The event_pattern of this UpdateArchiveRequest.
        :param retention_days: The retention_days of this UpdateArchiveRequest.
        """
        self.openapi_types = {
            'archive_name': str,
            'description': str,
            'event_pattern': str,
            'retention_days': int
        }

        self.attribute_map = {
            'archive_name': 'ArchiveName',
            'description': 'Description',
            'event_pattern': 'EventPattern',
            'retention_days': 'RetentionDays'
        }

        self._archive_name = archive_name
        self._description = description
        self._event_pattern = event_pattern
        self._retention_days = retention_days

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateArchiveRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateArchiveRequest of this UpdateArchiveRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archive_name(self):
        """Gets the archive_name of this UpdateArchiveRequest.


        :return: The archive_name of this UpdateArchiveRequest.
        :rtype: str
        """
        return self._archive_name

    @archive_name.setter
    def archive_name(self, archive_name):
        """Sets the archive_name of this UpdateArchiveRequest.


        :param archive_name: The archive_name of this UpdateArchiveRequest.
        :type archive_name: str
        """
        if archive_name is None:
            raise ValueError("Invalid value for `archive_name`, must not be `None`")

        self._archive_name = archive_name

    @property
    def description(self):
        """Gets the description of this UpdateArchiveRequest.


        :return: The description of this UpdateArchiveRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateArchiveRequest.


        :param description: The description of this UpdateArchiveRequest.
        :type description: str
        """

        self._description = description

    @property
    def event_pattern(self):
        """Gets the event_pattern of this UpdateArchiveRequest.


        :return: The event_pattern of this UpdateArchiveRequest.
        :rtype: str
        """
        return self._event_pattern

    @event_pattern.setter
    def event_pattern(self, event_pattern):
        """Sets the event_pattern of this UpdateArchiveRequest.


        :param event_pattern: The event_pattern of this UpdateArchiveRequest.
        :type event_pattern: str
        """

        self._event_pattern = event_pattern

    @property
    def retention_days(self):
        """Gets the retention_days of this UpdateArchiveRequest.


        :return: The retention_days of this UpdateArchiveRequest.
        :rtype: int
        """
        return self._retention_days

    @retention_days.setter
    def retention_days(self, retention_days):
        """Sets the retention_days of this UpdateArchiveRequest.


        :param retention_days: The retention_days of this UpdateArchiveRequest.
        :type retention_days: int
        """

        self._retention_days = retention_days
