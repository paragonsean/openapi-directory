# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TargetRunCommandParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, run_command_targets: List=None):
        """TargetRunCommandParameters - a model defined in OpenAPI

        :param run_command_targets: The run_command_targets of this TargetRunCommandParameters.
        """
        self.openapi_types = {
            'run_command_targets': List
        }

        self.attribute_map = {
            'run_command_targets': 'RunCommandTargets'
        }

        self._run_command_targets = run_command_targets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TargetRunCommandParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Target_RunCommandParameters of this TargetRunCommandParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def run_command_targets(self):
        """Gets the run_command_targets of this TargetRunCommandParameters.


        :return: The run_command_targets of this TargetRunCommandParameters.
        :rtype: List
        """
        return self._run_command_targets

    @run_command_targets.setter
    def run_command_targets(self, run_command_targets):
        """Sets the run_command_targets of this TargetRunCommandParameters.


        :param run_command_targets: The run_command_targets of this TargetRunCommandParameters.
        :type run_command_targets: List
        """
        if run_command_targets is None:
            raise ValueError("Invalid value for `run_command_targets`, must not be `None`")

        self._run_command_targets = run_command_targets
