# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.archive_state import ArchiveState
from openapi_server import util


class ListArchivesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name_prefix: str=None, event_source_arn: str=None, state: ArchiveState=None, next_token: str=None, limit: int=None):
        """ListArchivesRequest - a model defined in OpenAPI

        :param name_prefix: The name_prefix of this ListArchivesRequest.
        :param event_source_arn: The event_source_arn of this ListArchivesRequest.
        :param state: The state of this ListArchivesRequest.
        :param next_token: The next_token of this ListArchivesRequest.
        :param limit: The limit of this ListArchivesRequest.
        """
        self.openapi_types = {
            'name_prefix': str,
            'event_source_arn': str,
            'state': ArchiveState,
            'next_token': str,
            'limit': int
        }

        self.attribute_map = {
            'name_prefix': 'NamePrefix',
            'event_source_arn': 'EventSourceArn',
            'state': 'State',
            'next_token': 'NextToken',
            'limit': 'Limit'
        }

        self._name_prefix = name_prefix
        self._event_source_arn = event_source_arn
        self._state = state
        self._next_token = next_token
        self._limit = limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListArchivesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListArchivesRequest of this ListArchivesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name_prefix(self):
        """Gets the name_prefix of this ListArchivesRequest.


        :return: The name_prefix of this ListArchivesRequest.
        :rtype: str
        """
        return self._name_prefix

    @name_prefix.setter
    def name_prefix(self, name_prefix):
        """Sets the name_prefix of this ListArchivesRequest.


        :param name_prefix: The name_prefix of this ListArchivesRequest.
        :type name_prefix: str
        """

        self._name_prefix = name_prefix

    @property
    def event_source_arn(self):
        """Gets the event_source_arn of this ListArchivesRequest.


        :return: The event_source_arn of this ListArchivesRequest.
        :rtype: str
        """
        return self._event_source_arn

    @event_source_arn.setter
    def event_source_arn(self, event_source_arn):
        """Sets the event_source_arn of this ListArchivesRequest.


        :param event_source_arn: The event_source_arn of this ListArchivesRequest.
        :type event_source_arn: str
        """

        self._event_source_arn = event_source_arn

    @property
    def state(self):
        """Gets the state of this ListArchivesRequest.


        :return: The state of this ListArchivesRequest.
        :rtype: ArchiveState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ListArchivesRequest.


        :param state: The state of this ListArchivesRequest.
        :type state: ArchiveState
        """

        self._state = state

    @property
    def next_token(self):
        """Gets the next_token of this ListArchivesRequest.


        :return: The next_token of this ListArchivesRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListArchivesRequest.


        :param next_token: The next_token of this ListArchivesRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def limit(self):
        """Gets the limit of this ListArchivesRequest.


        :return: The limit of this ListArchivesRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ListArchivesRequest.


        :param limit: The limit of this ListArchivesRequest.
        :type limit: int
        """

        self._limit = limit
