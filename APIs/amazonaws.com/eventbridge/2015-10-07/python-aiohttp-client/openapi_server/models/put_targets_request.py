# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutTargetsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule: str=None, event_bus_name: str=None, targets: List=None):
        """PutTargetsRequest - a model defined in OpenAPI

        :param rule: The rule of this PutTargetsRequest.
        :param event_bus_name: The event_bus_name of this PutTargetsRequest.
        :param targets: The targets of this PutTargetsRequest.
        """
        self.openapi_types = {
            'rule': str,
            'event_bus_name': str,
            'targets': List
        }

        self.attribute_map = {
            'rule': 'Rule',
            'event_bus_name': 'EventBusName',
            'targets': 'Targets'
        }

        self._rule = rule
        self._event_bus_name = event_bus_name
        self._targets = targets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutTargetsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutTargetsRequest of this PutTargetsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule(self):
        """Gets the rule of this PutTargetsRequest.


        :return: The rule of this PutTargetsRequest.
        :rtype: str
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this PutTargetsRequest.


        :param rule: The rule of this PutTargetsRequest.
        :type rule: str
        """
        if rule is None:
            raise ValueError("Invalid value for `rule`, must not be `None`")

        self._rule = rule

    @property
    def event_bus_name(self):
        """Gets the event_bus_name of this PutTargetsRequest.


        :return: The event_bus_name of this PutTargetsRequest.
        :rtype: str
        """
        return self._event_bus_name

    @event_bus_name.setter
    def event_bus_name(self, event_bus_name):
        """Sets the event_bus_name of this PutTargetsRequest.


        :param event_bus_name: The event_bus_name of this PutTargetsRequest.
        :type event_bus_name: str
        """

        self._event_bus_name = event_bus_name

    @property
    def targets(self):
        """Gets the targets of this PutTargetsRequest.


        :return: The targets of this PutTargetsRequest.
        :rtype: List
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this PutTargetsRequest.


        :param targets: The targets of this PutTargetsRequest.
        :type targets: List
        """
        if targets is None:
            raise ValueError("Invalid value for `targets`, must not be `None`")

        self._targets = targets
