# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputTransformer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, input_paths_map: Dict=None, input_template: str=None):
        """InputTransformer - a model defined in OpenAPI

        :param input_paths_map: The input_paths_map of this InputTransformer.
        :param input_template: The input_template of this InputTransformer.
        """
        self.openapi_types = {
            'input_paths_map': Dict,
            'input_template': str
        }

        self.attribute_map = {
            'input_paths_map': 'InputPathsMap',
            'input_template': 'InputTemplate'
        }

        self._input_paths_map = input_paths_map
        self._input_template = input_template

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputTransformer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputTransformer of this InputTransformer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input_paths_map(self):
        """Gets the input_paths_map of this InputTransformer.


        :return: The input_paths_map of this InputTransformer.
        :rtype: Dict
        """
        return self._input_paths_map

    @input_paths_map.setter
    def input_paths_map(self, input_paths_map):
        """Sets the input_paths_map of this InputTransformer.


        :param input_paths_map: The input_paths_map of this InputTransformer.
        :type input_paths_map: Dict
        """

        self._input_paths_map = input_paths_map

    @property
    def input_template(self):
        """Gets the input_template of this InputTransformer.


        :return: The input_template of this InputTransformer.
        :rtype: str
        """
        return self._input_template

    @input_template.setter
    def input_template(self, input_template):
        """Sets the input_template of this InputTransformer.


        :param input_template: The input_template of this InputTransformer.
        :type input_template: str
        """
        if input_template is None:
            raise ValueError("Invalid value for `input_template`, must not be `None`")

        self._input_template = input_template
