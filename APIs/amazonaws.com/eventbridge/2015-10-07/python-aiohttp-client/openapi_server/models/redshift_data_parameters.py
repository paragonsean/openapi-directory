# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RedshiftDataParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, secret_manager_arn: str=None, database: str=None, db_user: str=None, sql: str=None, statement_name: str=None, with_event: bool=None, sqls: List[str]=None):
        """RedshiftDataParameters - a model defined in OpenAPI

        :param secret_manager_arn: The secret_manager_arn of this RedshiftDataParameters.
        :param database: The database of this RedshiftDataParameters.
        :param db_user: The db_user of this RedshiftDataParameters.
        :param sql: The sql of this RedshiftDataParameters.
        :param statement_name: The statement_name of this RedshiftDataParameters.
        :param with_event: The with_event of this RedshiftDataParameters.
        :param sqls: The sqls of this RedshiftDataParameters.
        """
        self.openapi_types = {
            'secret_manager_arn': str,
            'database': str,
            'db_user': str,
            'sql': str,
            'statement_name': str,
            'with_event': bool,
            'sqls': List[str]
        }

        self.attribute_map = {
            'secret_manager_arn': 'SecretManagerArn',
            'database': 'Database',
            'db_user': 'DbUser',
            'sql': 'Sql',
            'statement_name': 'StatementName',
            'with_event': 'WithEvent',
            'sqls': 'Sqls'
        }

        self._secret_manager_arn = secret_manager_arn
        self._database = database
        self._db_user = db_user
        self._sql = sql
        self._statement_name = statement_name
        self._with_event = with_event
        self._sqls = sqls

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RedshiftDataParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RedshiftDataParameters of this RedshiftDataParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def secret_manager_arn(self):
        """Gets the secret_manager_arn of this RedshiftDataParameters.


        :return: The secret_manager_arn of this RedshiftDataParameters.
        :rtype: str
        """
        return self._secret_manager_arn

    @secret_manager_arn.setter
    def secret_manager_arn(self, secret_manager_arn):
        """Sets the secret_manager_arn of this RedshiftDataParameters.


        :param secret_manager_arn: The secret_manager_arn of this RedshiftDataParameters.
        :type secret_manager_arn: str
        """

        self._secret_manager_arn = secret_manager_arn

    @property
    def database(self):
        """Gets the database of this RedshiftDataParameters.


        :return: The database of this RedshiftDataParameters.
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this RedshiftDataParameters.


        :param database: The database of this RedshiftDataParameters.
        :type database: str
        """
        if database is None:
            raise ValueError("Invalid value for `database`, must not be `None`")

        self._database = database

    @property
    def db_user(self):
        """Gets the db_user of this RedshiftDataParameters.


        :return: The db_user of this RedshiftDataParameters.
        :rtype: str
        """
        return self._db_user

    @db_user.setter
    def db_user(self, db_user):
        """Sets the db_user of this RedshiftDataParameters.


        :param db_user: The db_user of this RedshiftDataParameters.
        :type db_user: str
        """

        self._db_user = db_user

    @property
    def sql(self):
        """Gets the sql of this RedshiftDataParameters.


        :return: The sql of this RedshiftDataParameters.
        :rtype: str
        """
        return self._sql

    @sql.setter
    def sql(self, sql):
        """Sets the sql of this RedshiftDataParameters.


        :param sql: The sql of this RedshiftDataParameters.
        :type sql: str
        """

        self._sql = sql

    @property
    def statement_name(self):
        """Gets the statement_name of this RedshiftDataParameters.


        :return: The statement_name of this RedshiftDataParameters.
        :rtype: str
        """
        return self._statement_name

    @statement_name.setter
    def statement_name(self, statement_name):
        """Sets the statement_name of this RedshiftDataParameters.


        :param statement_name: The statement_name of this RedshiftDataParameters.
        :type statement_name: str
        """

        self._statement_name = statement_name

    @property
    def with_event(self):
        """Gets the with_event of this RedshiftDataParameters.


        :return: The with_event of this RedshiftDataParameters.
        :rtype: bool
        """
        return self._with_event

    @with_event.setter
    def with_event(self, with_event):
        """Sets the with_event of this RedshiftDataParameters.


        :param with_event: The with_event of this RedshiftDataParameters.
        :type with_event: bool
        """

        self._with_event = with_event

    @property
    def sqls(self):
        """Gets the sqls of this RedshiftDataParameters.

        A list of SQLs.

        :return: The sqls of this RedshiftDataParameters.
        :rtype: List[str]
        """
        return self._sqls

    @sqls.setter
    def sqls(self, sqls):
        """Sets the sqls of this RedshiftDataParameters.

        A list of SQLs.

        :param sqls: The sqls of this RedshiftDataParameters.
        :type sqls: List[str]
        """
        if sqls is not None and len(sqls) > 40:
            raise ValueError("Invalid value for `sqls`, number of items must be less than or equal to `40`")
        if sqls is not None and len(sqls) < 0:
            raise ValueError("Invalid value for `sqls`, number of items must be greater than or equal to `0`")

        self._sqls = sqls
