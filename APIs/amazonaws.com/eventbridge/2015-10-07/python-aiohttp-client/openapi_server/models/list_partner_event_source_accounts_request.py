# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListPartnerEventSourceAccountsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_source_name: str=None, next_token: str=None, limit: int=None):
        """ListPartnerEventSourceAccountsRequest - a model defined in OpenAPI

        :param event_source_name: The event_source_name of this ListPartnerEventSourceAccountsRequest.
        :param next_token: The next_token of this ListPartnerEventSourceAccountsRequest.
        :param limit: The limit of this ListPartnerEventSourceAccountsRequest.
        """
        self.openapi_types = {
            'event_source_name': str,
            'next_token': str,
            'limit': int
        }

        self.attribute_map = {
            'event_source_name': 'EventSourceName',
            'next_token': 'NextToken',
            'limit': 'Limit'
        }

        self._event_source_name = event_source_name
        self._next_token = next_token
        self._limit = limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListPartnerEventSourceAccountsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListPartnerEventSourceAccountsRequest of this ListPartnerEventSourceAccountsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_source_name(self):
        """Gets the event_source_name of this ListPartnerEventSourceAccountsRequest.


        :return: The event_source_name of this ListPartnerEventSourceAccountsRequest.
        :rtype: str
        """
        return self._event_source_name

    @event_source_name.setter
    def event_source_name(self, event_source_name):
        """Sets the event_source_name of this ListPartnerEventSourceAccountsRequest.


        :param event_source_name: The event_source_name of this ListPartnerEventSourceAccountsRequest.
        :type event_source_name: str
        """
        if event_source_name is None:
            raise ValueError("Invalid value for `event_source_name`, must not be `None`")

        self._event_source_name = event_source_name

    @property
    def next_token(self):
        """Gets the next_token of this ListPartnerEventSourceAccountsRequest.


        :return: The next_token of this ListPartnerEventSourceAccountsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListPartnerEventSourceAccountsRequest.


        :param next_token: The next_token of this ListPartnerEventSourceAccountsRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def limit(self):
        """Gets the limit of this ListPartnerEventSourceAccountsRequest.


        :return: The limit of this ListPartnerEventSourceAccountsRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ListPartnerEventSourceAccountsRequest.


        :param limit: The limit of this ListPartnerEventSourceAccountsRequest.
        :type limit: int
        """

        self._limit = limit
