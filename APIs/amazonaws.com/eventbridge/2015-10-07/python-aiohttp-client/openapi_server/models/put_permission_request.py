# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.put_permission_request_condition import PutPermissionRequestCondition
from openapi_server import util


class PutPermissionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_bus_name: str=None, action: str=None, principal: str=None, statement_id: str=None, condition: PutPermissionRequestCondition=None, policy: str=None):
        """PutPermissionRequest - a model defined in OpenAPI

        :param event_bus_name: The event_bus_name of this PutPermissionRequest.
        :param action: The action of this PutPermissionRequest.
        :param principal: The principal of this PutPermissionRequest.
        :param statement_id: The statement_id of this PutPermissionRequest.
        :param condition: The condition of this PutPermissionRequest.
        :param policy: The policy of this PutPermissionRequest.
        """
        self.openapi_types = {
            'event_bus_name': str,
            'action': str,
            'principal': str,
            'statement_id': str,
            'condition': PutPermissionRequestCondition,
            'policy': str
        }

        self.attribute_map = {
            'event_bus_name': 'EventBusName',
            'action': 'Action',
            'principal': 'Principal',
            'statement_id': 'StatementId',
            'condition': 'Condition',
            'policy': 'Policy'
        }

        self._event_bus_name = event_bus_name
        self._action = action
        self._principal = principal
        self._statement_id = statement_id
        self._condition = condition
        self._policy = policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutPermissionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutPermissionRequest of this PutPermissionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_bus_name(self):
        """Gets the event_bus_name of this PutPermissionRequest.


        :return: The event_bus_name of this PutPermissionRequest.
        :rtype: str
        """
        return self._event_bus_name

    @event_bus_name.setter
    def event_bus_name(self, event_bus_name):
        """Sets the event_bus_name of this PutPermissionRequest.


        :param event_bus_name: The event_bus_name of this PutPermissionRequest.
        :type event_bus_name: str
        """

        self._event_bus_name = event_bus_name

    @property
    def action(self):
        """Gets the action of this PutPermissionRequest.


        :return: The action of this PutPermissionRequest.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this PutPermissionRequest.


        :param action: The action of this PutPermissionRequest.
        :type action: str
        """

        self._action = action

    @property
    def principal(self):
        """Gets the principal of this PutPermissionRequest.


        :return: The principal of this PutPermissionRequest.
        :rtype: str
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this PutPermissionRequest.


        :param principal: The principal of this PutPermissionRequest.
        :type principal: str
        """

        self._principal = principal

    @property
    def statement_id(self):
        """Gets the statement_id of this PutPermissionRequest.


        :return: The statement_id of this PutPermissionRequest.
        :rtype: str
        """
        return self._statement_id

    @statement_id.setter
    def statement_id(self, statement_id):
        """Sets the statement_id of this PutPermissionRequest.


        :param statement_id: The statement_id of this PutPermissionRequest.
        :type statement_id: str
        """

        self._statement_id = statement_id

    @property
    def condition(self):
        """Gets the condition of this PutPermissionRequest.


        :return: The condition of this PutPermissionRequest.
        :rtype: PutPermissionRequestCondition
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this PutPermissionRequest.


        :param condition: The condition of this PutPermissionRequest.
        :type condition: PutPermissionRequestCondition
        """

        self._condition = condition

    @property
    def policy(self):
        """Gets the policy of this PutPermissionRequest.


        :return: The policy of this PutPermissionRequest.
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this PutPermissionRequest.


        :param policy: The policy of this PutPermissionRequest.
        :type policy: str
        """

        self._policy = policy
