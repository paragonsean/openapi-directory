# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_endpoint_request_replication_config import CreateEndpointRequestReplicationConfig
from openapi_server.models.create_endpoint_request_routing_config import CreateEndpointRequestRoutingConfig
from openapi_server import util


class CreateEndpointRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, routing_config: CreateEndpointRequestRoutingConfig=None, replication_config: CreateEndpointRequestReplicationConfig=None, event_buses: List=None, role_arn: str=None):
        """CreateEndpointRequest - a model defined in OpenAPI

        :param name: The name of this CreateEndpointRequest.
        :param description: The description of this CreateEndpointRequest.
        :param routing_config: The routing_config of this CreateEndpointRequest.
        :param replication_config: The replication_config of this CreateEndpointRequest.
        :param event_buses: The event_buses of this CreateEndpointRequest.
        :param role_arn: The role_arn of this CreateEndpointRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'routing_config': CreateEndpointRequestRoutingConfig,
            'replication_config': CreateEndpointRequestReplicationConfig,
            'event_buses': List,
            'role_arn': str
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'routing_config': 'RoutingConfig',
            'replication_config': 'ReplicationConfig',
            'event_buses': 'EventBuses',
            'role_arn': 'RoleArn'
        }

        self._name = name
        self._description = description
        self._routing_config = routing_config
        self._replication_config = replication_config
        self._event_buses = event_buses
        self._role_arn = role_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateEndpointRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateEndpointRequest of this CreateEndpointRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateEndpointRequest.


        :return: The name of this CreateEndpointRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateEndpointRequest.


        :param name: The name of this CreateEndpointRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateEndpointRequest.


        :return: The description of this CreateEndpointRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateEndpointRequest.


        :param description: The description of this CreateEndpointRequest.
        :type description: str
        """

        self._description = description

    @property
    def routing_config(self):
        """Gets the routing_config of this CreateEndpointRequest.


        :return: The routing_config of this CreateEndpointRequest.
        :rtype: CreateEndpointRequestRoutingConfig
        """
        return self._routing_config

    @routing_config.setter
    def routing_config(self, routing_config):
        """Sets the routing_config of this CreateEndpointRequest.


        :param routing_config: The routing_config of this CreateEndpointRequest.
        :type routing_config: CreateEndpointRequestRoutingConfig
        """
        if routing_config is None:
            raise ValueError("Invalid value for `routing_config`, must not be `None`")

        self._routing_config = routing_config

    @property
    def replication_config(self):
        """Gets the replication_config of this CreateEndpointRequest.


        :return: The replication_config of this CreateEndpointRequest.
        :rtype: CreateEndpointRequestReplicationConfig
        """
        return self._replication_config

    @replication_config.setter
    def replication_config(self, replication_config):
        """Sets the replication_config of this CreateEndpointRequest.


        :param replication_config: The replication_config of this CreateEndpointRequest.
        :type replication_config: CreateEndpointRequestReplicationConfig
        """

        self._replication_config = replication_config

    @property
    def event_buses(self):
        """Gets the event_buses of this CreateEndpointRequest.


        :return: The event_buses of this CreateEndpointRequest.
        :rtype: List
        """
        return self._event_buses

    @event_buses.setter
    def event_buses(self, event_buses):
        """Sets the event_buses of this CreateEndpointRequest.


        :param event_buses: The event_buses of this CreateEndpointRequest.
        :type event_buses: List
        """
        if event_buses is None:
            raise ValueError("Invalid value for `event_buses`, must not be `None`")

        self._event_buses = event_buses

    @property
    def role_arn(self):
        """Gets the role_arn of this CreateEndpointRequest.


        :return: The role_arn of this CreateEndpointRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CreateEndpointRequest.


        :param role_arn: The role_arn of this CreateEndpointRequest.
        :type role_arn: str
        """

        self._role_arn = role_arn
