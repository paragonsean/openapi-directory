# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RemoveTargetsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule: str=None, event_bus_name: str=None, ids: List=None, force: bool=None):
        """RemoveTargetsRequest - a model defined in OpenAPI

        :param rule: The rule of this RemoveTargetsRequest.
        :param event_bus_name: The event_bus_name of this RemoveTargetsRequest.
        :param ids: The ids of this RemoveTargetsRequest.
        :param force: The force of this RemoveTargetsRequest.
        """
        self.openapi_types = {
            'rule': str,
            'event_bus_name': str,
            'ids': List,
            'force': bool
        }

        self.attribute_map = {
            'rule': 'Rule',
            'event_bus_name': 'EventBusName',
            'ids': 'Ids',
            'force': 'Force'
        }

        self._rule = rule
        self._event_bus_name = event_bus_name
        self._ids = ids
        self._force = force

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RemoveTargetsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RemoveTargetsRequest of this RemoveTargetsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule(self):
        """Gets the rule of this RemoveTargetsRequest.


        :return: The rule of this RemoveTargetsRequest.
        :rtype: str
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this RemoveTargetsRequest.


        :param rule: The rule of this RemoveTargetsRequest.
        :type rule: str
        """
        if rule is None:
            raise ValueError("Invalid value for `rule`, must not be `None`")

        self._rule = rule

    @property
    def event_bus_name(self):
        """Gets the event_bus_name of this RemoveTargetsRequest.


        :return: The event_bus_name of this RemoveTargetsRequest.
        :rtype: str
        """
        return self._event_bus_name

    @event_bus_name.setter
    def event_bus_name(self, event_bus_name):
        """Sets the event_bus_name of this RemoveTargetsRequest.


        :param event_bus_name: The event_bus_name of this RemoveTargetsRequest.
        :type event_bus_name: str
        """

        self._event_bus_name = event_bus_name

    @property
    def ids(self):
        """Gets the ids of this RemoveTargetsRequest.


        :return: The ids of this RemoveTargetsRequest.
        :rtype: List
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this RemoveTargetsRequest.


        :param ids: The ids of this RemoveTargetsRequest.
        :type ids: List
        """
        if ids is None:
            raise ValueError("Invalid value for `ids`, must not be `None`")

        self._ids = ids

    @property
    def force(self):
        """Gets the force of this RemoveTargetsRequest.


        :return: The force of this RemoveTargetsRequest.
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this RemoveTargetsRequest.


        :param force: The force of this RemoveTargetsRequest.
        :type force: bool
        """

        self._force = force
