# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.target_batch_parameters import TargetBatchParameters
from openapi_server.models.target_dead_letter_config import TargetDeadLetterConfig
from openapi_server.models.target_ecs_parameters import TargetEcsParameters
from openapi_server.models.target_http_parameters import TargetHttpParameters
from openapi_server.models.target_input_transformer import TargetInputTransformer
from openapi_server.models.target_kinesis_parameters import TargetKinesisParameters
from openapi_server.models.target_redshift_data_parameters import TargetRedshiftDataParameters
from openapi_server.models.target_retry_policy import TargetRetryPolicy
from openapi_server.models.target_run_command_parameters import TargetRunCommandParameters
from openapi_server.models.target_sage_maker_pipeline_parameters import TargetSageMakerPipelineParameters
from openapi_server.models.target_sqs_parameters import TargetSqsParameters
from openapi_server import util


class Target(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, arn: str=None, role_arn: str=None, input: str=None, input_path: str=None, input_transformer: TargetInputTransformer=None, kinesis_parameters: TargetKinesisParameters=None, run_command_parameters: TargetRunCommandParameters=None, ecs_parameters: TargetEcsParameters=None, batch_parameters: TargetBatchParameters=None, sqs_parameters: TargetSqsParameters=None, http_parameters: TargetHttpParameters=None, redshift_data_parameters: TargetRedshiftDataParameters=None, sage_maker_pipeline_parameters: TargetSageMakerPipelineParameters=None, dead_letter_config: TargetDeadLetterConfig=None, retry_policy: TargetRetryPolicy=None):
        """Target - a model defined in OpenAPI

        :param id: The id of this Target.
        :param arn: The arn of this Target.
        :param role_arn: The role_arn of this Target.
        :param input: The input of this Target.
        :param input_path: The input_path of this Target.
        :param input_transformer: The input_transformer of this Target.
        :param kinesis_parameters: The kinesis_parameters of this Target.
        :param run_command_parameters: The run_command_parameters of this Target.
        :param ecs_parameters: The ecs_parameters of this Target.
        :param batch_parameters: The batch_parameters of this Target.
        :param sqs_parameters: The sqs_parameters of this Target.
        :param http_parameters: The http_parameters of this Target.
        :param redshift_data_parameters: The redshift_data_parameters of this Target.
        :param sage_maker_pipeline_parameters: The sage_maker_pipeline_parameters of this Target.
        :param dead_letter_config: The dead_letter_config of this Target.
        :param retry_policy: The retry_policy of this Target.
        """
        self.openapi_types = {
            'id': str,
            'arn': str,
            'role_arn': str,
            'input': str,
            'input_path': str,
            'input_transformer': TargetInputTransformer,
            'kinesis_parameters': TargetKinesisParameters,
            'run_command_parameters': TargetRunCommandParameters,
            'ecs_parameters': TargetEcsParameters,
            'batch_parameters': TargetBatchParameters,
            'sqs_parameters': TargetSqsParameters,
            'http_parameters': TargetHttpParameters,
            'redshift_data_parameters': TargetRedshiftDataParameters,
            'sage_maker_pipeline_parameters': TargetSageMakerPipelineParameters,
            'dead_letter_config': TargetDeadLetterConfig,
            'retry_policy': TargetRetryPolicy
        }

        self.attribute_map = {
            'id': 'Id',
            'arn': 'Arn',
            'role_arn': 'RoleArn',
            'input': 'Input',
            'input_path': 'InputPath',
            'input_transformer': 'InputTransformer',
            'kinesis_parameters': 'KinesisParameters',
            'run_command_parameters': 'RunCommandParameters',
            'ecs_parameters': 'EcsParameters',
            'batch_parameters': 'BatchParameters',
            'sqs_parameters': 'SqsParameters',
            'http_parameters': 'HttpParameters',
            'redshift_data_parameters': 'RedshiftDataParameters',
            'sage_maker_pipeline_parameters': 'SageMakerPipelineParameters',
            'dead_letter_config': 'DeadLetterConfig',
            'retry_policy': 'RetryPolicy'
        }

        self._id = id
        self._arn = arn
        self._role_arn = role_arn
        self._input = input
        self._input_path = input_path
        self._input_transformer = input_transformer
        self._kinesis_parameters = kinesis_parameters
        self._run_command_parameters = run_command_parameters
        self._ecs_parameters = ecs_parameters
        self._batch_parameters = batch_parameters
        self._sqs_parameters = sqs_parameters
        self._http_parameters = http_parameters
        self._redshift_data_parameters = redshift_data_parameters
        self._sage_maker_pipeline_parameters = sage_maker_pipeline_parameters
        self._dead_letter_config = dead_letter_config
        self._retry_policy = retry_policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Target':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Target of this Target.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Target.


        :return: The id of this Target.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Target.


        :param id: The id of this Target.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def arn(self):
        """Gets the arn of this Target.


        :return: The arn of this Target.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this Target.


        :param arn: The arn of this Target.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def role_arn(self):
        """Gets the role_arn of this Target.


        :return: The role_arn of this Target.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this Target.


        :param role_arn: The role_arn of this Target.
        :type role_arn: str
        """

        self._role_arn = role_arn

    @property
    def input(self):
        """Gets the input of this Target.


        :return: The input of this Target.
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this Target.


        :param input: The input of this Target.
        :type input: str
        """

        self._input = input

    @property
    def input_path(self):
        """Gets the input_path of this Target.


        :return: The input_path of this Target.
        :rtype: str
        """
        return self._input_path

    @input_path.setter
    def input_path(self, input_path):
        """Sets the input_path of this Target.


        :param input_path: The input_path of this Target.
        :type input_path: str
        """

        self._input_path = input_path

    @property
    def input_transformer(self):
        """Gets the input_transformer of this Target.


        :return: The input_transformer of this Target.
        :rtype: TargetInputTransformer
        """
        return self._input_transformer

    @input_transformer.setter
    def input_transformer(self, input_transformer):
        """Sets the input_transformer of this Target.


        :param input_transformer: The input_transformer of this Target.
        :type input_transformer: TargetInputTransformer
        """

        self._input_transformer = input_transformer

    @property
    def kinesis_parameters(self):
        """Gets the kinesis_parameters of this Target.


        :return: The kinesis_parameters of this Target.
        :rtype: TargetKinesisParameters
        """
        return self._kinesis_parameters

    @kinesis_parameters.setter
    def kinesis_parameters(self, kinesis_parameters):
        """Sets the kinesis_parameters of this Target.


        :param kinesis_parameters: The kinesis_parameters of this Target.
        :type kinesis_parameters: TargetKinesisParameters
        """

        self._kinesis_parameters = kinesis_parameters

    @property
    def run_command_parameters(self):
        """Gets the run_command_parameters of this Target.


        :return: The run_command_parameters of this Target.
        :rtype: TargetRunCommandParameters
        """
        return self._run_command_parameters

    @run_command_parameters.setter
    def run_command_parameters(self, run_command_parameters):
        """Sets the run_command_parameters of this Target.


        :param run_command_parameters: The run_command_parameters of this Target.
        :type run_command_parameters: TargetRunCommandParameters
        """

        self._run_command_parameters = run_command_parameters

    @property
    def ecs_parameters(self):
        """Gets the ecs_parameters of this Target.


        :return: The ecs_parameters of this Target.
        :rtype: TargetEcsParameters
        """
        return self._ecs_parameters

    @ecs_parameters.setter
    def ecs_parameters(self, ecs_parameters):
        """Sets the ecs_parameters of this Target.


        :param ecs_parameters: The ecs_parameters of this Target.
        :type ecs_parameters: TargetEcsParameters
        """

        self._ecs_parameters = ecs_parameters

    @property
    def batch_parameters(self):
        """Gets the batch_parameters of this Target.


        :return: The batch_parameters of this Target.
        :rtype: TargetBatchParameters
        """
        return self._batch_parameters

    @batch_parameters.setter
    def batch_parameters(self, batch_parameters):
        """Sets the batch_parameters of this Target.


        :param batch_parameters: The batch_parameters of this Target.
        :type batch_parameters: TargetBatchParameters
        """

        self._batch_parameters = batch_parameters

    @property
    def sqs_parameters(self):
        """Gets the sqs_parameters of this Target.


        :return: The sqs_parameters of this Target.
        :rtype: TargetSqsParameters
        """
        return self._sqs_parameters

    @sqs_parameters.setter
    def sqs_parameters(self, sqs_parameters):
        """Sets the sqs_parameters of this Target.


        :param sqs_parameters: The sqs_parameters of this Target.
        :type sqs_parameters: TargetSqsParameters
        """

        self._sqs_parameters = sqs_parameters

    @property
    def http_parameters(self):
        """Gets the http_parameters of this Target.


        :return: The http_parameters of this Target.
        :rtype: TargetHttpParameters
        """
        return self._http_parameters

    @http_parameters.setter
    def http_parameters(self, http_parameters):
        """Sets the http_parameters of this Target.


        :param http_parameters: The http_parameters of this Target.
        :type http_parameters: TargetHttpParameters
        """

        self._http_parameters = http_parameters

    @property
    def redshift_data_parameters(self):
        """Gets the redshift_data_parameters of this Target.


        :return: The redshift_data_parameters of this Target.
        :rtype: TargetRedshiftDataParameters
        """
        return self._redshift_data_parameters

    @redshift_data_parameters.setter
    def redshift_data_parameters(self, redshift_data_parameters):
        """Sets the redshift_data_parameters of this Target.


        :param redshift_data_parameters: The redshift_data_parameters of this Target.
        :type redshift_data_parameters: TargetRedshiftDataParameters
        """

        self._redshift_data_parameters = redshift_data_parameters

    @property
    def sage_maker_pipeline_parameters(self):
        """Gets the sage_maker_pipeline_parameters of this Target.


        :return: The sage_maker_pipeline_parameters of this Target.
        :rtype: TargetSageMakerPipelineParameters
        """
        return self._sage_maker_pipeline_parameters

    @sage_maker_pipeline_parameters.setter
    def sage_maker_pipeline_parameters(self, sage_maker_pipeline_parameters):
        """Sets the sage_maker_pipeline_parameters of this Target.


        :param sage_maker_pipeline_parameters: The sage_maker_pipeline_parameters of this Target.
        :type sage_maker_pipeline_parameters: TargetSageMakerPipelineParameters
        """

        self._sage_maker_pipeline_parameters = sage_maker_pipeline_parameters

    @property
    def dead_letter_config(self):
        """Gets the dead_letter_config of this Target.


        :return: The dead_letter_config of this Target.
        :rtype: TargetDeadLetterConfig
        """
        return self._dead_letter_config

    @dead_letter_config.setter
    def dead_letter_config(self, dead_letter_config):
        """Sets the dead_letter_config of this Target.


        :param dead_letter_config: The dead_letter_config of this Target.
        :type dead_letter_config: TargetDeadLetterConfig
        """

        self._dead_letter_config = dead_letter_config

    @property
    def retry_policy(self):
        """Gets the retry_policy of this Target.


        :return: The retry_policy of this Target.
        :rtype: TargetRetryPolicy
        """
        return self._retry_policy

    @retry_policy.setter
    def retry_policy(self, retry_policy):
        """Sets the retry_policy of this Target.


        :param retry_policy: The retry_policy of this Target.
        :type retry_policy: TargetRetryPolicy
        """

        self._retry_policy = retry_policy
