# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_state import ConnectionState
from openapi_server import util


class ListConnectionsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name_prefix: str=None, connection_state: ConnectionState=None, next_token: str=None, limit: int=None):
        """ListConnectionsRequest - a model defined in OpenAPI

        :param name_prefix: The name_prefix of this ListConnectionsRequest.
        :param connection_state: The connection_state of this ListConnectionsRequest.
        :param next_token: The next_token of this ListConnectionsRequest.
        :param limit: The limit of this ListConnectionsRequest.
        """
        self.openapi_types = {
            'name_prefix': str,
            'connection_state': ConnectionState,
            'next_token': str,
            'limit': int
        }

        self.attribute_map = {
            'name_prefix': 'NamePrefix',
            'connection_state': 'ConnectionState',
            'next_token': 'NextToken',
            'limit': 'Limit'
        }

        self._name_prefix = name_prefix
        self._connection_state = connection_state
        self._next_token = next_token
        self._limit = limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListConnectionsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListConnectionsRequest of this ListConnectionsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name_prefix(self):
        """Gets the name_prefix of this ListConnectionsRequest.


        :return: The name_prefix of this ListConnectionsRequest.
        :rtype: str
        """
        return self._name_prefix

    @name_prefix.setter
    def name_prefix(self, name_prefix):
        """Sets the name_prefix of this ListConnectionsRequest.


        :param name_prefix: The name_prefix of this ListConnectionsRequest.
        :type name_prefix: str
        """

        self._name_prefix = name_prefix

    @property
    def connection_state(self):
        """Gets the connection_state of this ListConnectionsRequest.


        :return: The connection_state of this ListConnectionsRequest.
        :rtype: ConnectionState
        """
        return self._connection_state

    @connection_state.setter
    def connection_state(self, connection_state):
        """Sets the connection_state of this ListConnectionsRequest.


        :param connection_state: The connection_state of this ListConnectionsRequest.
        :type connection_state: ConnectionState
        """

        self._connection_state = connection_state

    @property
    def next_token(self):
        """Gets the next_token of this ListConnectionsRequest.


        :return: The next_token of this ListConnectionsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListConnectionsRequest.


        :param next_token: The next_token of this ListConnectionsRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def limit(self):
        """Gets the limit of this ListConnectionsRequest.


        :return: The limit of this ListConnectionsRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ListConnectionsRequest.


        :param limit: The limit of this ListConnectionsRequest.
        :type limit: int
        """

        self._limit = limit
