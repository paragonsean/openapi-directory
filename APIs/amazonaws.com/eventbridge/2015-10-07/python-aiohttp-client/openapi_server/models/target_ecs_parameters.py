# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ecs_parameters_network_configuration import EcsParametersNetworkConfiguration
from openapi_server.models.launch_type import LaunchType
from openapi_server.models.propagate_tags import PropagateTags
from openapi_server import util


class TargetEcsParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, task_definition_arn: str=None, task_count: int=None, launch_type: LaunchType=None, network_configuration: EcsParametersNetworkConfiguration=None, platform_version: str=None, group: str=None, capacity_provider_strategy: List=None, enable_ecs_managed_tags: bool=None, enable_execute_command: bool=None, placement_constraints: List=None, placement_strategy: List=None, propagate_tags: PropagateTags=None, reference_id: str=None, tags: List=None):
        """TargetEcsParameters - a model defined in OpenAPI

        :param task_definition_arn: The task_definition_arn of this TargetEcsParameters.
        :param task_count: The task_count of this TargetEcsParameters.
        :param launch_type: The launch_type of this TargetEcsParameters.
        :param network_configuration: The network_configuration of this TargetEcsParameters.
        :param platform_version: The platform_version of this TargetEcsParameters.
        :param group: The group of this TargetEcsParameters.
        :param capacity_provider_strategy: The capacity_provider_strategy of this TargetEcsParameters.
        :param enable_ecs_managed_tags: The enable_ecs_managed_tags of this TargetEcsParameters.
        :param enable_execute_command: The enable_execute_command of this TargetEcsParameters.
        :param placement_constraints: The placement_constraints of this TargetEcsParameters.
        :param placement_strategy: The placement_strategy of this TargetEcsParameters.
        :param propagate_tags: The propagate_tags of this TargetEcsParameters.
        :param reference_id: The reference_id of this TargetEcsParameters.
        :param tags: The tags of this TargetEcsParameters.
        """
        self.openapi_types = {
            'task_definition_arn': str,
            'task_count': int,
            'launch_type': LaunchType,
            'network_configuration': EcsParametersNetworkConfiguration,
            'platform_version': str,
            'group': str,
            'capacity_provider_strategy': List,
            'enable_ecs_managed_tags': bool,
            'enable_execute_command': bool,
            'placement_constraints': List,
            'placement_strategy': List,
            'propagate_tags': PropagateTags,
            'reference_id': str,
            'tags': List
        }

        self.attribute_map = {
            'task_definition_arn': 'TaskDefinitionArn',
            'task_count': 'TaskCount',
            'launch_type': 'LaunchType',
            'network_configuration': 'NetworkConfiguration',
            'platform_version': 'PlatformVersion',
            'group': 'Group',
            'capacity_provider_strategy': 'CapacityProviderStrategy',
            'enable_ecs_managed_tags': 'EnableECSManagedTags',
            'enable_execute_command': 'EnableExecuteCommand',
            'placement_constraints': 'PlacementConstraints',
            'placement_strategy': 'PlacementStrategy',
            'propagate_tags': 'PropagateTags',
            'reference_id': 'ReferenceId',
            'tags': 'Tags'
        }

        self._task_definition_arn = task_definition_arn
        self._task_count = task_count
        self._launch_type = launch_type
        self._network_configuration = network_configuration
        self._platform_version = platform_version
        self._group = group
        self._capacity_provider_strategy = capacity_provider_strategy
        self._enable_ecs_managed_tags = enable_ecs_managed_tags
        self._enable_execute_command = enable_execute_command
        self._placement_constraints = placement_constraints
        self._placement_strategy = placement_strategy
        self._propagate_tags = propagate_tags
        self._reference_id = reference_id
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TargetEcsParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Target_EcsParameters of this TargetEcsParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def task_definition_arn(self):
        """Gets the task_definition_arn of this TargetEcsParameters.


        :return: The task_definition_arn of this TargetEcsParameters.
        :rtype: str
        """
        return self._task_definition_arn

    @task_definition_arn.setter
    def task_definition_arn(self, task_definition_arn):
        """Sets the task_definition_arn of this TargetEcsParameters.


        :param task_definition_arn: The task_definition_arn of this TargetEcsParameters.
        :type task_definition_arn: str
        """
        if task_definition_arn is None:
            raise ValueError("Invalid value for `task_definition_arn`, must not be `None`")

        self._task_definition_arn = task_definition_arn

    @property
    def task_count(self):
        """Gets the task_count of this TargetEcsParameters.


        :return: The task_count of this TargetEcsParameters.
        :rtype: int
        """
        return self._task_count

    @task_count.setter
    def task_count(self, task_count):
        """Sets the task_count of this TargetEcsParameters.


        :param task_count: The task_count of this TargetEcsParameters.
        :type task_count: int
        """

        self._task_count = task_count

    @property
    def launch_type(self):
        """Gets the launch_type of this TargetEcsParameters.


        :return: The launch_type of this TargetEcsParameters.
        :rtype: LaunchType
        """
        return self._launch_type

    @launch_type.setter
    def launch_type(self, launch_type):
        """Sets the launch_type of this TargetEcsParameters.


        :param launch_type: The launch_type of this TargetEcsParameters.
        :type launch_type: LaunchType
        """

        self._launch_type = launch_type

    @property
    def network_configuration(self):
        """Gets the network_configuration of this TargetEcsParameters.


        :return: The network_configuration of this TargetEcsParameters.
        :rtype: EcsParametersNetworkConfiguration
        """
        return self._network_configuration

    @network_configuration.setter
    def network_configuration(self, network_configuration):
        """Sets the network_configuration of this TargetEcsParameters.


        :param network_configuration: The network_configuration of this TargetEcsParameters.
        :type network_configuration: EcsParametersNetworkConfiguration
        """

        self._network_configuration = network_configuration

    @property
    def platform_version(self):
        """Gets the platform_version of this TargetEcsParameters.


        :return: The platform_version of this TargetEcsParameters.
        :rtype: str
        """
        return self._platform_version

    @platform_version.setter
    def platform_version(self, platform_version):
        """Sets the platform_version of this TargetEcsParameters.


        :param platform_version: The platform_version of this TargetEcsParameters.
        :type platform_version: str
        """

        self._platform_version = platform_version

    @property
    def group(self):
        """Gets the group of this TargetEcsParameters.


        :return: The group of this TargetEcsParameters.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this TargetEcsParameters.


        :param group: The group of this TargetEcsParameters.
        :type group: str
        """

        self._group = group

    @property
    def capacity_provider_strategy(self):
        """Gets the capacity_provider_strategy of this TargetEcsParameters.


        :return: The capacity_provider_strategy of this TargetEcsParameters.
        :rtype: List
        """
        return self._capacity_provider_strategy

    @capacity_provider_strategy.setter
    def capacity_provider_strategy(self, capacity_provider_strategy):
        """Sets the capacity_provider_strategy of this TargetEcsParameters.


        :param capacity_provider_strategy: The capacity_provider_strategy of this TargetEcsParameters.
        :type capacity_provider_strategy: List
        """

        self._capacity_provider_strategy = capacity_provider_strategy

    @property
    def enable_ecs_managed_tags(self):
        """Gets the enable_ecs_managed_tags of this TargetEcsParameters.


        :return: The enable_ecs_managed_tags of this TargetEcsParameters.
        :rtype: bool
        """
        return self._enable_ecs_managed_tags

    @enable_ecs_managed_tags.setter
    def enable_ecs_managed_tags(self, enable_ecs_managed_tags):
        """Sets the enable_ecs_managed_tags of this TargetEcsParameters.


        :param enable_ecs_managed_tags: The enable_ecs_managed_tags of this TargetEcsParameters.
        :type enable_ecs_managed_tags: bool
        """

        self._enable_ecs_managed_tags = enable_ecs_managed_tags

    @property
    def enable_execute_command(self):
        """Gets the enable_execute_command of this TargetEcsParameters.


        :return: The enable_execute_command of this TargetEcsParameters.
        :rtype: bool
        """
        return self._enable_execute_command

    @enable_execute_command.setter
    def enable_execute_command(self, enable_execute_command):
        """Sets the enable_execute_command of this TargetEcsParameters.


        :param enable_execute_command: The enable_execute_command of this TargetEcsParameters.
        :type enable_execute_command: bool
        """

        self._enable_execute_command = enable_execute_command

    @property
    def placement_constraints(self):
        """Gets the placement_constraints of this TargetEcsParameters.


        :return: The placement_constraints of this TargetEcsParameters.
        :rtype: List
        """
        return self._placement_constraints

    @placement_constraints.setter
    def placement_constraints(self, placement_constraints):
        """Sets the placement_constraints of this TargetEcsParameters.


        :param placement_constraints: The placement_constraints of this TargetEcsParameters.
        :type placement_constraints: List
        """

        self._placement_constraints = placement_constraints

    @property
    def placement_strategy(self):
        """Gets the placement_strategy of this TargetEcsParameters.


        :return: The placement_strategy of this TargetEcsParameters.
        :rtype: List
        """
        return self._placement_strategy

    @placement_strategy.setter
    def placement_strategy(self, placement_strategy):
        """Sets the placement_strategy of this TargetEcsParameters.


        :param placement_strategy: The placement_strategy of this TargetEcsParameters.
        :type placement_strategy: List
        """

        self._placement_strategy = placement_strategy

    @property
    def propagate_tags(self):
        """Gets the propagate_tags of this TargetEcsParameters.


        :return: The propagate_tags of this TargetEcsParameters.
        :rtype: PropagateTags
        """
        return self._propagate_tags

    @propagate_tags.setter
    def propagate_tags(self, propagate_tags):
        """Sets the propagate_tags of this TargetEcsParameters.


        :param propagate_tags: The propagate_tags of this TargetEcsParameters.
        :type propagate_tags: PropagateTags
        """

        self._propagate_tags = propagate_tags

    @property
    def reference_id(self):
        """Gets the reference_id of this TargetEcsParameters.


        :return: The reference_id of this TargetEcsParameters.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this TargetEcsParameters.


        :param reference_id: The reference_id of this TargetEcsParameters.
        :type reference_id: str
        """

        self._reference_id = reference_id

    @property
    def tags(self):
        """Gets the tags of this TargetEcsParameters.


        :return: The tags of this TargetEcsParameters.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TargetEcsParameters.


        :param tags: The tags of this TargetEcsParameters.
        :type tags: List
        """

        self._tags = tags
