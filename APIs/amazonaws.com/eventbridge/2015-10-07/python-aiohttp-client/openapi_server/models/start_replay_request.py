# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_replay_request_destination import StartReplayRequestDestination
from openapi_server import util


class StartReplayRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, replay_name: str=None, description: str=None, event_source_arn: str=None, event_start_time: datetime=None, event_end_time: datetime=None, destination: StartReplayRequestDestination=None):
        """StartReplayRequest - a model defined in OpenAPI

        :param replay_name: The replay_name of this StartReplayRequest.
        :param description: The description of this StartReplayRequest.
        :param event_source_arn: The event_source_arn of this StartReplayRequest.
        :param event_start_time: The event_start_time of this StartReplayRequest.
        :param event_end_time: The event_end_time of this StartReplayRequest.
        :param destination: The destination of this StartReplayRequest.
        """
        self.openapi_types = {
            'replay_name': str,
            'description': str,
            'event_source_arn': str,
            'event_start_time': datetime,
            'event_end_time': datetime,
            'destination': StartReplayRequestDestination
        }

        self.attribute_map = {
            'replay_name': 'ReplayName',
            'description': 'Description',
            'event_source_arn': 'EventSourceArn',
            'event_start_time': 'EventStartTime',
            'event_end_time': 'EventEndTime',
            'destination': 'Destination'
        }

        self._replay_name = replay_name
        self._description = description
        self._event_source_arn = event_source_arn
        self._event_start_time = event_start_time
        self._event_end_time = event_end_time
        self._destination = destination

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartReplayRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartReplayRequest of this StartReplayRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def replay_name(self):
        """Gets the replay_name of this StartReplayRequest.


        :return: The replay_name of this StartReplayRequest.
        :rtype: str
        """
        return self._replay_name

    @replay_name.setter
    def replay_name(self, replay_name):
        """Sets the replay_name of this StartReplayRequest.


        :param replay_name: The replay_name of this StartReplayRequest.
        :type replay_name: str
        """
        if replay_name is None:
            raise ValueError("Invalid value for `replay_name`, must not be `None`")

        self._replay_name = replay_name

    @property
    def description(self):
        """Gets the description of this StartReplayRequest.


        :return: The description of this StartReplayRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StartReplayRequest.


        :param description: The description of this StartReplayRequest.
        :type description: str
        """

        self._description = description

    @property
    def event_source_arn(self):
        """Gets the event_source_arn of this StartReplayRequest.


        :return: The event_source_arn of this StartReplayRequest.
        :rtype: str
        """
        return self._event_source_arn

    @event_source_arn.setter
    def event_source_arn(self, event_source_arn):
        """Sets the event_source_arn of this StartReplayRequest.


        :param event_source_arn: The event_source_arn of this StartReplayRequest.
        :type event_source_arn: str
        """
        if event_source_arn is None:
            raise ValueError("Invalid value for `event_source_arn`, must not be `None`")

        self._event_source_arn = event_source_arn

    @property
    def event_start_time(self):
        """Gets the event_start_time of this StartReplayRequest.


        :return: The event_start_time of this StartReplayRequest.
        :rtype: datetime
        """
        return self._event_start_time

    @event_start_time.setter
    def event_start_time(self, event_start_time):
        """Sets the event_start_time of this StartReplayRequest.


        :param event_start_time: The event_start_time of this StartReplayRequest.
        :type event_start_time: datetime
        """
        if event_start_time is None:
            raise ValueError("Invalid value for `event_start_time`, must not be `None`")

        self._event_start_time = event_start_time

    @property
    def event_end_time(self):
        """Gets the event_end_time of this StartReplayRequest.


        :return: The event_end_time of this StartReplayRequest.
        :rtype: datetime
        """
        return self._event_end_time

    @event_end_time.setter
    def event_end_time(self, event_end_time):
        """Sets the event_end_time of this StartReplayRequest.


        :param event_end_time: The event_end_time of this StartReplayRequest.
        :type event_end_time: datetime
        """
        if event_end_time is None:
            raise ValueError("Invalid value for `event_end_time`, must not be `None`")

        self._event_end_time = event_end_time

    @property
    def destination(self):
        """Gets the destination of this StartReplayRequest.


        :return: The destination of this StartReplayRequest.
        :rtype: StartReplayRequestDestination
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this StartReplayRequest.


        :param destination: The destination of this StartReplayRequest.
        :type destination: StartReplayRequestDestination
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination
