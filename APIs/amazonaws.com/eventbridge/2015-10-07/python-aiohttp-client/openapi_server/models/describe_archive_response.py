# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.archive_state import ArchiveState
from openapi_server import util


class DescribeArchiveResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archive_arn: str=None, archive_name: str=None, event_source_arn: str=None, description: str=None, event_pattern: str=None, state: ArchiveState=None, state_reason: str=None, retention_days: int=None, size_bytes: int=None, event_count: int=None, creation_time: datetime=None):
        """DescribeArchiveResponse - a model defined in OpenAPI

        :param archive_arn: The archive_arn of this DescribeArchiveResponse.
        :param archive_name: The archive_name of this DescribeArchiveResponse.
        :param event_source_arn: The event_source_arn of this DescribeArchiveResponse.
        :param description: The description of this DescribeArchiveResponse.
        :param event_pattern: The event_pattern of this DescribeArchiveResponse.
        :param state: The state of this DescribeArchiveResponse.
        :param state_reason: The state_reason of this DescribeArchiveResponse.
        :param retention_days: The retention_days of this DescribeArchiveResponse.
        :param size_bytes: The size_bytes of this DescribeArchiveResponse.
        :param event_count: The event_count of this DescribeArchiveResponse.
        :param creation_time: The creation_time of this DescribeArchiveResponse.
        """
        self.openapi_types = {
            'archive_arn': str,
            'archive_name': str,
            'event_source_arn': str,
            'description': str,
            'event_pattern': str,
            'state': ArchiveState,
            'state_reason': str,
            'retention_days': int,
            'size_bytes': int,
            'event_count': int,
            'creation_time': datetime
        }

        self.attribute_map = {
            'archive_arn': 'ArchiveArn',
            'archive_name': 'ArchiveName',
            'event_source_arn': 'EventSourceArn',
            'description': 'Description',
            'event_pattern': 'EventPattern',
            'state': 'State',
            'state_reason': 'StateReason',
            'retention_days': 'RetentionDays',
            'size_bytes': 'SizeBytes',
            'event_count': 'EventCount',
            'creation_time': 'CreationTime'
        }

        self._archive_arn = archive_arn
        self._archive_name = archive_name
        self._event_source_arn = event_source_arn
        self._description = description
        self._event_pattern = event_pattern
        self._state = state
        self._state_reason = state_reason
        self._retention_days = retention_days
        self._size_bytes = size_bytes
        self._event_count = event_count
        self._creation_time = creation_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeArchiveResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeArchiveResponse of this DescribeArchiveResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archive_arn(self):
        """Gets the archive_arn of this DescribeArchiveResponse.


        :return: The archive_arn of this DescribeArchiveResponse.
        :rtype: str
        """
        return self._archive_arn

    @archive_arn.setter
    def archive_arn(self, archive_arn):
        """Sets the archive_arn of this DescribeArchiveResponse.


        :param archive_arn: The archive_arn of this DescribeArchiveResponse.
        :type archive_arn: str
        """

        self._archive_arn = archive_arn

    @property
    def archive_name(self):
        """Gets the archive_name of this DescribeArchiveResponse.


        :return: The archive_name of this DescribeArchiveResponse.
        :rtype: str
        """
        return self._archive_name

    @archive_name.setter
    def archive_name(self, archive_name):
        """Sets the archive_name of this DescribeArchiveResponse.


        :param archive_name: The archive_name of this DescribeArchiveResponse.
        :type archive_name: str
        """

        self._archive_name = archive_name

    @property
    def event_source_arn(self):
        """Gets the event_source_arn of this DescribeArchiveResponse.


        :return: The event_source_arn of this DescribeArchiveResponse.
        :rtype: str
        """
        return self._event_source_arn

    @event_source_arn.setter
    def event_source_arn(self, event_source_arn):
        """Sets the event_source_arn of this DescribeArchiveResponse.


        :param event_source_arn: The event_source_arn of this DescribeArchiveResponse.
        :type event_source_arn: str
        """

        self._event_source_arn = event_source_arn

    @property
    def description(self):
        """Gets the description of this DescribeArchiveResponse.


        :return: The description of this DescribeArchiveResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DescribeArchiveResponse.


        :param description: The description of this DescribeArchiveResponse.
        :type description: str
        """

        self._description = description

    @property
    def event_pattern(self):
        """Gets the event_pattern of this DescribeArchiveResponse.


        :return: The event_pattern of this DescribeArchiveResponse.
        :rtype: str
        """
        return self._event_pattern

    @event_pattern.setter
    def event_pattern(self, event_pattern):
        """Sets the event_pattern of this DescribeArchiveResponse.


        :param event_pattern: The event_pattern of this DescribeArchiveResponse.
        :type event_pattern: str
        """

        self._event_pattern = event_pattern

    @property
    def state(self):
        """Gets the state of this DescribeArchiveResponse.


        :return: The state of this DescribeArchiveResponse.
        :rtype: ArchiveState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DescribeArchiveResponse.


        :param state: The state of this DescribeArchiveResponse.
        :type state: ArchiveState
        """

        self._state = state

    @property
    def state_reason(self):
        """Gets the state_reason of this DescribeArchiveResponse.


        :return: The state_reason of this DescribeArchiveResponse.
        :rtype: str
        """
        return self._state_reason

    @state_reason.setter
    def state_reason(self, state_reason):
        """Sets the state_reason of this DescribeArchiveResponse.


        :param state_reason: The state_reason of this DescribeArchiveResponse.
        :type state_reason: str
        """

        self._state_reason = state_reason

    @property
    def retention_days(self):
        """Gets the retention_days of this DescribeArchiveResponse.


        :return: The retention_days of this DescribeArchiveResponse.
        :rtype: int
        """
        return self._retention_days

    @retention_days.setter
    def retention_days(self, retention_days):
        """Sets the retention_days of this DescribeArchiveResponse.


        :param retention_days: The retention_days of this DescribeArchiveResponse.
        :type retention_days: int
        """

        self._retention_days = retention_days

    @property
    def size_bytes(self):
        """Gets the size_bytes of this DescribeArchiveResponse.


        :return: The size_bytes of this DescribeArchiveResponse.
        :rtype: int
        """
        return self._size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes):
        """Sets the size_bytes of this DescribeArchiveResponse.


        :param size_bytes: The size_bytes of this DescribeArchiveResponse.
        :type size_bytes: int
        """

        self._size_bytes = size_bytes

    @property
    def event_count(self):
        """Gets the event_count of this DescribeArchiveResponse.


        :return: The event_count of this DescribeArchiveResponse.
        :rtype: int
        """
        return self._event_count

    @event_count.setter
    def event_count(self, event_count):
        """Sets the event_count of this DescribeArchiveResponse.


        :param event_count: The event_count of this DescribeArchiveResponse.
        :type event_count: int
        """

        self._event_count = event_count

    @property
    def creation_time(self):
        """Gets the creation_time of this DescribeArchiveResponse.


        :return: The creation_time of this DescribeArchiveResponse.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this DescribeArchiveResponse.


        :param creation_time: The creation_time of this DescribeArchiveResponse.
        :type creation_time: datetime
        """

        self._creation_time = creation_time
