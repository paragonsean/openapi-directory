/*
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DescribeReplayResponseDestination;
import org.openapitools.client.model.ReplayState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeReplayResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:59.209962-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeReplayResponse {
  public static final String SERIALIZED_NAME_REPLAY_NAME = "ReplayName";
  @SerializedName(SERIALIZED_NAME_REPLAY_NAME)
  private String replayName;

  public static final String SERIALIZED_NAME_REPLAY_ARN = "ReplayArn";
  @SerializedName(SERIALIZED_NAME_REPLAY_ARN)
  private String replayArn;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private ReplayState state;

  public static final String SERIALIZED_NAME_STATE_REASON = "StateReason";
  @SerializedName(SERIALIZED_NAME_STATE_REASON)
  private String stateReason;

  public static final String SERIALIZED_NAME_EVENT_SOURCE_ARN = "EventSourceArn";
  @SerializedName(SERIALIZED_NAME_EVENT_SOURCE_ARN)
  private String eventSourceArn;

  public static final String SERIALIZED_NAME_DESTINATION = "Destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private DescribeReplayResponseDestination destination;

  public static final String SERIALIZED_NAME_EVENT_START_TIME = "EventStartTime";
  @SerializedName(SERIALIZED_NAME_EVENT_START_TIME)
  private OffsetDateTime eventStartTime;

  public static final String SERIALIZED_NAME_EVENT_END_TIME = "EventEndTime";
  @SerializedName(SERIALIZED_NAME_EVENT_END_TIME)
  private OffsetDateTime eventEndTime;

  public static final String SERIALIZED_NAME_EVENT_LAST_REPLAYED_TIME = "EventLastReplayedTime";
  @SerializedName(SERIALIZED_NAME_EVENT_LAST_REPLAYED_TIME)
  private OffsetDateTime eventLastReplayedTime;

  public static final String SERIALIZED_NAME_REPLAY_START_TIME = "ReplayStartTime";
  @SerializedName(SERIALIZED_NAME_REPLAY_START_TIME)
  private OffsetDateTime replayStartTime;

  public static final String SERIALIZED_NAME_REPLAY_END_TIME = "ReplayEndTime";
  @SerializedName(SERIALIZED_NAME_REPLAY_END_TIME)
  private OffsetDateTime replayEndTime;

  public DescribeReplayResponse() {
  }

  public DescribeReplayResponse replayName(String replayName) {
    this.replayName = replayName;
    return this;
  }

  /**
   * Get replayName
   * @return replayName
   */
  @javax.annotation.Nullable
  public String getReplayName() {
    return replayName;
  }

  public void setReplayName(String replayName) {
    this.replayName = replayName;
  }


  public DescribeReplayResponse replayArn(String replayArn) {
    this.replayArn = replayArn;
    return this;
  }

  /**
   * Get replayArn
   * @return replayArn
   */
  @javax.annotation.Nullable
  public String getReplayArn() {
    return replayArn;
  }

  public void setReplayArn(String replayArn) {
    this.replayArn = replayArn;
  }


  public DescribeReplayResponse description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DescribeReplayResponse state(ReplayState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public ReplayState getState() {
    return state;
  }

  public void setState(ReplayState state) {
    this.state = state;
  }


  public DescribeReplayResponse stateReason(String stateReason) {
    this.stateReason = stateReason;
    return this;
  }

  /**
   * Get stateReason
   * @return stateReason
   */
  @javax.annotation.Nullable
  public String getStateReason() {
    return stateReason;
  }

  public void setStateReason(String stateReason) {
    this.stateReason = stateReason;
  }


  public DescribeReplayResponse eventSourceArn(String eventSourceArn) {
    this.eventSourceArn = eventSourceArn;
    return this;
  }

  /**
   * Get eventSourceArn
   * @return eventSourceArn
   */
  @javax.annotation.Nullable
  public String getEventSourceArn() {
    return eventSourceArn;
  }

  public void setEventSourceArn(String eventSourceArn) {
    this.eventSourceArn = eventSourceArn;
  }


  public DescribeReplayResponse destination(DescribeReplayResponseDestination destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Get destination
   * @return destination
   */
  @javax.annotation.Nullable
  public DescribeReplayResponseDestination getDestination() {
    return destination;
  }

  public void setDestination(DescribeReplayResponseDestination destination) {
    this.destination = destination;
  }


  public DescribeReplayResponse eventStartTime(OffsetDateTime eventStartTime) {
    this.eventStartTime = eventStartTime;
    return this;
  }

  /**
   * Get eventStartTime
   * @return eventStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEventStartTime() {
    return eventStartTime;
  }

  public void setEventStartTime(OffsetDateTime eventStartTime) {
    this.eventStartTime = eventStartTime;
  }


  public DescribeReplayResponse eventEndTime(OffsetDateTime eventEndTime) {
    this.eventEndTime = eventEndTime;
    return this;
  }

  /**
   * Get eventEndTime
   * @return eventEndTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEventEndTime() {
    return eventEndTime;
  }

  public void setEventEndTime(OffsetDateTime eventEndTime) {
    this.eventEndTime = eventEndTime;
  }


  public DescribeReplayResponse eventLastReplayedTime(OffsetDateTime eventLastReplayedTime) {
    this.eventLastReplayedTime = eventLastReplayedTime;
    return this;
  }

  /**
   * Get eventLastReplayedTime
   * @return eventLastReplayedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEventLastReplayedTime() {
    return eventLastReplayedTime;
  }

  public void setEventLastReplayedTime(OffsetDateTime eventLastReplayedTime) {
    this.eventLastReplayedTime = eventLastReplayedTime;
  }


  public DescribeReplayResponse replayStartTime(OffsetDateTime replayStartTime) {
    this.replayStartTime = replayStartTime;
    return this;
  }

  /**
   * Get replayStartTime
   * @return replayStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getReplayStartTime() {
    return replayStartTime;
  }

  public void setReplayStartTime(OffsetDateTime replayStartTime) {
    this.replayStartTime = replayStartTime;
  }


  public DescribeReplayResponse replayEndTime(OffsetDateTime replayEndTime) {
    this.replayEndTime = replayEndTime;
    return this;
  }

  /**
   * Get replayEndTime
   * @return replayEndTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getReplayEndTime() {
    return replayEndTime;
  }

  public void setReplayEndTime(OffsetDateTime replayEndTime) {
    this.replayEndTime = replayEndTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeReplayResponse describeReplayResponse = (DescribeReplayResponse) o;
    return Objects.equals(this.replayName, describeReplayResponse.replayName) &&
        Objects.equals(this.replayArn, describeReplayResponse.replayArn) &&
        Objects.equals(this.description, describeReplayResponse.description) &&
        Objects.equals(this.state, describeReplayResponse.state) &&
        Objects.equals(this.stateReason, describeReplayResponse.stateReason) &&
        Objects.equals(this.eventSourceArn, describeReplayResponse.eventSourceArn) &&
        Objects.equals(this.destination, describeReplayResponse.destination) &&
        Objects.equals(this.eventStartTime, describeReplayResponse.eventStartTime) &&
        Objects.equals(this.eventEndTime, describeReplayResponse.eventEndTime) &&
        Objects.equals(this.eventLastReplayedTime, describeReplayResponse.eventLastReplayedTime) &&
        Objects.equals(this.replayStartTime, describeReplayResponse.replayStartTime) &&
        Objects.equals(this.replayEndTime, describeReplayResponse.replayEndTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(replayName, replayArn, description, state, stateReason, eventSourceArn, destination, eventStartTime, eventEndTime, eventLastReplayedTime, replayStartTime, replayEndTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeReplayResponse {\n");
    sb.append("    replayName: ").append(toIndentedString(replayName)).append("\n");
    sb.append("    replayArn: ").append(toIndentedString(replayArn)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateReason: ").append(toIndentedString(stateReason)).append("\n");
    sb.append("    eventSourceArn: ").append(toIndentedString(eventSourceArn)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    eventStartTime: ").append(toIndentedString(eventStartTime)).append("\n");
    sb.append("    eventEndTime: ").append(toIndentedString(eventEndTime)).append("\n");
    sb.append("    eventLastReplayedTime: ").append(toIndentedString(eventLastReplayedTime)).append("\n");
    sb.append("    replayStartTime: ").append(toIndentedString(replayStartTime)).append("\n");
    sb.append("    replayEndTime: ").append(toIndentedString(replayEndTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ReplayName");
    openapiFields.add("ReplayArn");
    openapiFields.add("Description");
    openapiFields.add("State");
    openapiFields.add("StateReason");
    openapiFields.add("EventSourceArn");
    openapiFields.add("Destination");
    openapiFields.add("EventStartTime");
    openapiFields.add("EventEndTime");
    openapiFields.add("EventLastReplayedTime");
    openapiFields.add("ReplayStartTime");
    openapiFields.add("ReplayEndTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeReplayResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeReplayResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeReplayResponse is not found in the empty JSON string", DescribeReplayResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeReplayResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeReplayResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ReplayName`
      if (jsonObj.get("ReplayName") != null && !jsonObj.get("ReplayName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReplayName"));
      }
      // validate the optional field `ReplayArn`
      if (jsonObj.get("ReplayArn") != null && !jsonObj.get("ReplayArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReplayArn"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        ReplayState.validateJsonElement(jsonObj.get("State"));
      }
      // validate the optional field `StateReason`
      if (jsonObj.get("StateReason") != null && !jsonObj.get("StateReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StateReason"));
      }
      // validate the optional field `EventSourceArn`
      if (jsonObj.get("EventSourceArn") != null && !jsonObj.get("EventSourceArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EventSourceArn"));
      }
      // validate the optional field `Destination`
      if (jsonObj.get("Destination") != null && !jsonObj.get("Destination").isJsonNull()) {
        DescribeReplayResponseDestination.validateJsonElement(jsonObj.get("Destination"));
      }
      // validate the optional field `EventStartTime`
      if (jsonObj.get("EventStartTime") != null && !jsonObj.get("EventStartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("EventStartTime"));
      }
      // validate the optional field `EventEndTime`
      if (jsonObj.get("EventEndTime") != null && !jsonObj.get("EventEndTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("EventEndTime"));
      }
      // validate the optional field `EventLastReplayedTime`
      if (jsonObj.get("EventLastReplayedTime") != null && !jsonObj.get("EventLastReplayedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("EventLastReplayedTime"));
      }
      // validate the optional field `ReplayStartTime`
      if (jsonObj.get("ReplayStartTime") != null && !jsonObj.get("ReplayStartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ReplayStartTime"));
      }
      // validate the optional field `ReplayEndTime`
      if (jsonObj.get("ReplayEndTime") != null && !jsonObj.get("ReplayEndTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ReplayEndTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeReplayResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeReplayResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeReplayResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeReplayResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeReplayResponse>() {
           @Override
           public void write(JsonWriter out, DescribeReplayResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeReplayResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeReplayResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeReplayResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeReplayResponse
   */
  public static DescribeReplayResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeReplayResponse.class);
  }

  /**
   * Convert an instance of DescribeReplayResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

