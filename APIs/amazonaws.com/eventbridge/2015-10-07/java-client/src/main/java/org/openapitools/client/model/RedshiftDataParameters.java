/*
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * These are custom parameters to be used when the target is a Amazon Redshift cluster or Redshift Serverless workgroup to invoke the Amazon Redshift Data API ExecuteStatement based on EventBridge events.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:59.209962-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RedshiftDataParameters {
  public static final String SERIALIZED_NAME_SECRET_MANAGER_ARN = "SecretManagerArn";
  @SerializedName(SERIALIZED_NAME_SECRET_MANAGER_ARN)
  private String secretManagerArn;

  public static final String SERIALIZED_NAME_DATABASE = "Database";
  @SerializedName(SERIALIZED_NAME_DATABASE)
  private String database;

  public static final String SERIALIZED_NAME_DB_USER = "DbUser";
  @SerializedName(SERIALIZED_NAME_DB_USER)
  private String dbUser;

  public static final String SERIALIZED_NAME_SQL = "Sql";
  @SerializedName(SERIALIZED_NAME_SQL)
  private String sql;

  public static final String SERIALIZED_NAME_STATEMENT_NAME = "StatementName";
  @SerializedName(SERIALIZED_NAME_STATEMENT_NAME)
  private String statementName;

  public static final String SERIALIZED_NAME_WITH_EVENT = "WithEvent";
  @SerializedName(SERIALIZED_NAME_WITH_EVENT)
  private Boolean withEvent;

  public static final String SERIALIZED_NAME_SQLS = "Sqls";
  @SerializedName(SERIALIZED_NAME_SQLS)
  private List<String> sqls = new ArrayList<>();

  public RedshiftDataParameters() {
  }

  public RedshiftDataParameters secretManagerArn(String secretManagerArn) {
    this.secretManagerArn = secretManagerArn;
    return this;
  }

  /**
   * Get secretManagerArn
   * @return secretManagerArn
   */
  @javax.annotation.Nullable
  public String getSecretManagerArn() {
    return secretManagerArn;
  }

  public void setSecretManagerArn(String secretManagerArn) {
    this.secretManagerArn = secretManagerArn;
  }


  public RedshiftDataParameters database(String database) {
    this.database = database;
    return this;
  }

  /**
   * Get database
   * @return database
   */
  @javax.annotation.Nonnull
  public String getDatabase() {
    return database;
  }

  public void setDatabase(String database) {
    this.database = database;
  }


  public RedshiftDataParameters dbUser(String dbUser) {
    this.dbUser = dbUser;
    return this;
  }

  /**
   * Get dbUser
   * @return dbUser
   */
  @javax.annotation.Nullable
  public String getDbUser() {
    return dbUser;
  }

  public void setDbUser(String dbUser) {
    this.dbUser = dbUser;
  }


  public RedshiftDataParameters sql(String sql) {
    this.sql = sql;
    return this;
  }

  /**
   * Get sql
   * @return sql
   */
  @javax.annotation.Nullable
  public String getSql() {
    return sql;
  }

  public void setSql(String sql) {
    this.sql = sql;
  }


  public RedshiftDataParameters statementName(String statementName) {
    this.statementName = statementName;
    return this;
  }

  /**
   * Get statementName
   * @return statementName
   */
  @javax.annotation.Nullable
  public String getStatementName() {
    return statementName;
  }

  public void setStatementName(String statementName) {
    this.statementName = statementName;
  }


  public RedshiftDataParameters withEvent(Boolean withEvent) {
    this.withEvent = withEvent;
    return this;
  }

  /**
   * Get withEvent
   * @return withEvent
   */
  @javax.annotation.Nullable
  public Boolean getWithEvent() {
    return withEvent;
  }

  public void setWithEvent(Boolean withEvent) {
    this.withEvent = withEvent;
  }


  public RedshiftDataParameters sqls(List<String> sqls) {
    this.sqls = sqls;
    return this;
  }

  public RedshiftDataParameters addSqlsItem(String sqlsItem) {
    if (this.sqls == null) {
      this.sqls = new ArrayList<>();
    }
    this.sqls.add(sqlsItem);
    return this;
  }

  /**
   * A list of SQLs.
   * @return sqls
   */
  @javax.annotation.Nullable
  public List<String> getSqls() {
    return sqls;
  }

  public void setSqls(List<String> sqls) {
    this.sqls = sqls;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RedshiftDataParameters redshiftDataParameters = (RedshiftDataParameters) o;
    return Objects.equals(this.secretManagerArn, redshiftDataParameters.secretManagerArn) &&
        Objects.equals(this.database, redshiftDataParameters.database) &&
        Objects.equals(this.dbUser, redshiftDataParameters.dbUser) &&
        Objects.equals(this.sql, redshiftDataParameters.sql) &&
        Objects.equals(this.statementName, redshiftDataParameters.statementName) &&
        Objects.equals(this.withEvent, redshiftDataParameters.withEvent) &&
        Objects.equals(this.sqls, redshiftDataParameters.sqls);
  }

  @Override
  public int hashCode() {
    return Objects.hash(secretManagerArn, database, dbUser, sql, statementName, withEvent, sqls);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RedshiftDataParameters {\n");
    sb.append("    secretManagerArn: ").append(toIndentedString(secretManagerArn)).append("\n");
    sb.append("    database: ").append(toIndentedString(database)).append("\n");
    sb.append("    dbUser: ").append(toIndentedString(dbUser)).append("\n");
    sb.append("    sql: ").append(toIndentedString(sql)).append("\n");
    sb.append("    statementName: ").append(toIndentedString(statementName)).append("\n");
    sb.append("    withEvent: ").append(toIndentedString(withEvent)).append("\n");
    sb.append("    sqls: ").append(toIndentedString(sqls)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SecretManagerArn");
    openapiFields.add("Database");
    openapiFields.add("DbUser");
    openapiFields.add("Sql");
    openapiFields.add("StatementName");
    openapiFields.add("WithEvent");
    openapiFields.add("Sqls");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Database");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RedshiftDataParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RedshiftDataParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RedshiftDataParameters is not found in the empty JSON string", RedshiftDataParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RedshiftDataParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RedshiftDataParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RedshiftDataParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SecretManagerArn`
      if (jsonObj.get("SecretManagerArn") != null && !jsonObj.get("SecretManagerArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SecretManagerArn"));
      }
      // validate the required field `Database`
      String.validateJsonElement(jsonObj.get("Database"));
      // validate the optional field `DbUser`
      if (jsonObj.get("DbUser") != null && !jsonObj.get("DbUser").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DbUser"));
      }
      // validate the optional field `Sql`
      if (jsonObj.get("Sql") != null && !jsonObj.get("Sql").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Sql"));
      }
      // validate the optional field `StatementName`
      if (jsonObj.get("StatementName") != null && !jsonObj.get("StatementName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StatementName"));
      }
      // validate the optional field `WithEvent`
      if (jsonObj.get("WithEvent") != null && !jsonObj.get("WithEvent").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("WithEvent"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Sqls") != null && !jsonObj.get("Sqls").isJsonNull() && !jsonObj.get("Sqls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Sqls` to be an array in the JSON string but got `%s`", jsonObj.get("Sqls").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RedshiftDataParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RedshiftDataParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RedshiftDataParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RedshiftDataParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<RedshiftDataParameters>() {
           @Override
           public void write(JsonWriter out, RedshiftDataParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RedshiftDataParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RedshiftDataParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RedshiftDataParameters
   * @throws IOException if the JSON string is invalid with respect to RedshiftDataParameters
   */
  public static RedshiftDataParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RedshiftDataParameters.class);
  }

  /**
   * Convert an instance of RedshiftDataParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

