/*
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ArchiveState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An &lt;code&gt;Archive&lt;/code&gt; object that contains details about an archive.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:59.209962-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Archive {
  public static final String SERIALIZED_NAME_ARCHIVE_NAME = "ArchiveName";
  @SerializedName(SERIALIZED_NAME_ARCHIVE_NAME)
  private String archiveName;

  public static final String SERIALIZED_NAME_EVENT_SOURCE_ARN = "EventSourceArn";
  @SerializedName(SERIALIZED_NAME_EVENT_SOURCE_ARN)
  private String eventSourceArn;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private ArchiveState state;

  public static final String SERIALIZED_NAME_STATE_REASON = "StateReason";
  @SerializedName(SERIALIZED_NAME_STATE_REASON)
  private String stateReason;

  public static final String SERIALIZED_NAME_RETENTION_DAYS = "RetentionDays";
  @SerializedName(SERIALIZED_NAME_RETENTION_DAYS)
  private Integer retentionDays;

  public static final String SERIALIZED_NAME_SIZE_BYTES = "SizeBytes";
  @SerializedName(SERIALIZED_NAME_SIZE_BYTES)
  private Integer sizeBytes;

  public static final String SERIALIZED_NAME_EVENT_COUNT = "EventCount";
  @SerializedName(SERIALIZED_NAME_EVENT_COUNT)
  private Integer eventCount;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public Archive() {
  }

  public Archive archiveName(String archiveName) {
    this.archiveName = archiveName;
    return this;
  }

  /**
   * Get archiveName
   * @return archiveName
   */
  @javax.annotation.Nullable
  public String getArchiveName() {
    return archiveName;
  }

  public void setArchiveName(String archiveName) {
    this.archiveName = archiveName;
  }


  public Archive eventSourceArn(String eventSourceArn) {
    this.eventSourceArn = eventSourceArn;
    return this;
  }

  /**
   * Get eventSourceArn
   * @return eventSourceArn
   */
  @javax.annotation.Nullable
  public String getEventSourceArn() {
    return eventSourceArn;
  }

  public void setEventSourceArn(String eventSourceArn) {
    this.eventSourceArn = eventSourceArn;
  }


  public Archive state(ArchiveState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public ArchiveState getState() {
    return state;
  }

  public void setState(ArchiveState state) {
    this.state = state;
  }


  public Archive stateReason(String stateReason) {
    this.stateReason = stateReason;
    return this;
  }

  /**
   * Get stateReason
   * @return stateReason
   */
  @javax.annotation.Nullable
  public String getStateReason() {
    return stateReason;
  }

  public void setStateReason(String stateReason) {
    this.stateReason = stateReason;
  }


  public Archive retentionDays(Integer retentionDays) {
    this.retentionDays = retentionDays;
    return this;
  }

  /**
   * Get retentionDays
   * @return retentionDays
   */
  @javax.annotation.Nullable
  public Integer getRetentionDays() {
    return retentionDays;
  }

  public void setRetentionDays(Integer retentionDays) {
    this.retentionDays = retentionDays;
  }


  public Archive sizeBytes(Integer sizeBytes) {
    this.sizeBytes = sizeBytes;
    return this;
  }

  /**
   * Get sizeBytes
   * @return sizeBytes
   */
  @javax.annotation.Nullable
  public Integer getSizeBytes() {
    return sizeBytes;
  }

  public void setSizeBytes(Integer sizeBytes) {
    this.sizeBytes = sizeBytes;
  }


  public Archive eventCount(Integer eventCount) {
    this.eventCount = eventCount;
    return this;
  }

  /**
   * Get eventCount
   * @return eventCount
   */
  @javax.annotation.Nullable
  public Integer getEventCount() {
    return eventCount;
  }

  public void setEventCount(Integer eventCount) {
    this.eventCount = eventCount;
  }


  public Archive creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Archive archive = (Archive) o;
    return Objects.equals(this.archiveName, archive.archiveName) &&
        Objects.equals(this.eventSourceArn, archive.eventSourceArn) &&
        Objects.equals(this.state, archive.state) &&
        Objects.equals(this.stateReason, archive.stateReason) &&
        Objects.equals(this.retentionDays, archive.retentionDays) &&
        Objects.equals(this.sizeBytes, archive.sizeBytes) &&
        Objects.equals(this.eventCount, archive.eventCount) &&
        Objects.equals(this.creationTime, archive.creationTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archiveName, eventSourceArn, state, stateReason, retentionDays, sizeBytes, eventCount, creationTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Archive {\n");
    sb.append("    archiveName: ").append(toIndentedString(archiveName)).append("\n");
    sb.append("    eventSourceArn: ").append(toIndentedString(eventSourceArn)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateReason: ").append(toIndentedString(stateReason)).append("\n");
    sb.append("    retentionDays: ").append(toIndentedString(retentionDays)).append("\n");
    sb.append("    sizeBytes: ").append(toIndentedString(sizeBytes)).append("\n");
    sb.append("    eventCount: ").append(toIndentedString(eventCount)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ArchiveName");
    openapiFields.add("EventSourceArn");
    openapiFields.add("State");
    openapiFields.add("StateReason");
    openapiFields.add("RetentionDays");
    openapiFields.add("SizeBytes");
    openapiFields.add("EventCount");
    openapiFields.add("CreationTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Archive
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Archive.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Archive is not found in the empty JSON string", Archive.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Archive.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Archive` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ArchiveName`
      if (jsonObj.get("ArchiveName") != null && !jsonObj.get("ArchiveName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ArchiveName"));
      }
      // validate the optional field `EventSourceArn`
      if (jsonObj.get("EventSourceArn") != null && !jsonObj.get("EventSourceArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EventSourceArn"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        ArchiveState.validateJsonElement(jsonObj.get("State"));
      }
      // validate the optional field `StateReason`
      if (jsonObj.get("StateReason") != null && !jsonObj.get("StateReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StateReason"));
      }
      // validate the optional field `RetentionDays`
      if (jsonObj.get("RetentionDays") != null && !jsonObj.get("RetentionDays").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("RetentionDays"));
      }
      // validate the optional field `SizeBytes`
      if (jsonObj.get("SizeBytes") != null && !jsonObj.get("SizeBytes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SizeBytes"));
      }
      // validate the optional field `EventCount`
      if (jsonObj.get("EventCount") != null && !jsonObj.get("EventCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("EventCount"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Archive.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Archive' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Archive> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Archive.class));

       return (TypeAdapter<T>) new TypeAdapter<Archive>() {
           @Override
           public void write(JsonWriter out, Archive value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Archive read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Archive given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Archive
   * @throws IOException if the JSON string is invalid with respect to Archive
   */
  public static Archive fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Archive.class);
  }

  /**
   * Convert an instance of Archive to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

