/*
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TargetBatchParameters;
import org.openapitools.client.model.TargetDeadLetterConfig;
import org.openapitools.client.model.TargetEcsParameters;
import org.openapitools.client.model.TargetHttpParameters;
import org.openapitools.client.model.TargetInputTransformer;
import org.openapitools.client.model.TargetKinesisParameters;
import org.openapitools.client.model.TargetRedshiftDataParameters;
import org.openapitools.client.model.TargetRetryPolicy;
import org.openapitools.client.model.TargetRunCommandParameters;
import org.openapitools.client.model.TargetSageMakerPipelineParameters;
import org.openapitools.client.model.TargetSqsParameters;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Targets are the resources to be invoked when a rule is triggered. For a complete list of services and resources that can be set as a target, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutTargets.html\&quot;&gt;PutTargets&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you are setting the event bus of another account as the target, and that account granted permission to your account through an organization instead of directly by the account ID, then you must specify a &lt;code&gt;RoleArn&lt;/code&gt; with proper permissions in the &lt;code&gt;Target&lt;/code&gt; structure. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-cross-account-event-delivery.html\&quot;&gt;Sending and Receiving Events Between Amazon Web Services Accounts&lt;/a&gt; in the &lt;i&gt;Amazon EventBridge User Guide&lt;/i&gt;.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:59.209962-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Target {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_ROLE_ARN = "RoleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_INPUT = "Input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private String input;

  public static final String SERIALIZED_NAME_INPUT_PATH = "InputPath";
  @SerializedName(SERIALIZED_NAME_INPUT_PATH)
  private String inputPath;

  public static final String SERIALIZED_NAME_INPUT_TRANSFORMER = "InputTransformer";
  @SerializedName(SERIALIZED_NAME_INPUT_TRANSFORMER)
  private TargetInputTransformer inputTransformer;

  public static final String SERIALIZED_NAME_KINESIS_PARAMETERS = "KinesisParameters";
  @SerializedName(SERIALIZED_NAME_KINESIS_PARAMETERS)
  private TargetKinesisParameters kinesisParameters;

  public static final String SERIALIZED_NAME_RUN_COMMAND_PARAMETERS = "RunCommandParameters";
  @SerializedName(SERIALIZED_NAME_RUN_COMMAND_PARAMETERS)
  private TargetRunCommandParameters runCommandParameters;

  public static final String SERIALIZED_NAME_ECS_PARAMETERS = "EcsParameters";
  @SerializedName(SERIALIZED_NAME_ECS_PARAMETERS)
  private TargetEcsParameters ecsParameters;

  public static final String SERIALIZED_NAME_BATCH_PARAMETERS = "BatchParameters";
  @SerializedName(SERIALIZED_NAME_BATCH_PARAMETERS)
  private TargetBatchParameters batchParameters;

  public static final String SERIALIZED_NAME_SQS_PARAMETERS = "SqsParameters";
  @SerializedName(SERIALIZED_NAME_SQS_PARAMETERS)
  private TargetSqsParameters sqsParameters;

  public static final String SERIALIZED_NAME_HTTP_PARAMETERS = "HttpParameters";
  @SerializedName(SERIALIZED_NAME_HTTP_PARAMETERS)
  private TargetHttpParameters httpParameters;

  public static final String SERIALIZED_NAME_REDSHIFT_DATA_PARAMETERS = "RedshiftDataParameters";
  @SerializedName(SERIALIZED_NAME_REDSHIFT_DATA_PARAMETERS)
  private TargetRedshiftDataParameters redshiftDataParameters;

  public static final String SERIALIZED_NAME_SAGE_MAKER_PIPELINE_PARAMETERS = "SageMakerPipelineParameters";
  @SerializedName(SERIALIZED_NAME_SAGE_MAKER_PIPELINE_PARAMETERS)
  private TargetSageMakerPipelineParameters sageMakerPipelineParameters;

  public static final String SERIALIZED_NAME_DEAD_LETTER_CONFIG = "DeadLetterConfig";
  @SerializedName(SERIALIZED_NAME_DEAD_LETTER_CONFIG)
  private TargetDeadLetterConfig deadLetterConfig;

  public static final String SERIALIZED_NAME_RETRY_POLICY = "RetryPolicy";
  @SerializedName(SERIALIZED_NAME_RETRY_POLICY)
  private TargetRetryPolicy retryPolicy;

  public Target() {
  }

  public Target id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Target arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nonnull
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public Target roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Get roleArn
   * @return roleArn
   */
  @javax.annotation.Nullable
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public Target input(String input) {
    this.input = input;
    return this;
  }

  /**
   * Get input
   * @return input
   */
  @javax.annotation.Nullable
  public String getInput() {
    return input;
  }

  public void setInput(String input) {
    this.input = input;
  }


  public Target inputPath(String inputPath) {
    this.inputPath = inputPath;
    return this;
  }

  /**
   * Get inputPath
   * @return inputPath
   */
  @javax.annotation.Nullable
  public String getInputPath() {
    return inputPath;
  }

  public void setInputPath(String inputPath) {
    this.inputPath = inputPath;
  }


  public Target inputTransformer(TargetInputTransformer inputTransformer) {
    this.inputTransformer = inputTransformer;
    return this;
  }

  /**
   * Get inputTransformer
   * @return inputTransformer
   */
  @javax.annotation.Nullable
  public TargetInputTransformer getInputTransformer() {
    return inputTransformer;
  }

  public void setInputTransformer(TargetInputTransformer inputTransformer) {
    this.inputTransformer = inputTransformer;
  }


  public Target kinesisParameters(TargetKinesisParameters kinesisParameters) {
    this.kinesisParameters = kinesisParameters;
    return this;
  }

  /**
   * Get kinesisParameters
   * @return kinesisParameters
   */
  @javax.annotation.Nullable
  public TargetKinesisParameters getKinesisParameters() {
    return kinesisParameters;
  }

  public void setKinesisParameters(TargetKinesisParameters kinesisParameters) {
    this.kinesisParameters = kinesisParameters;
  }


  public Target runCommandParameters(TargetRunCommandParameters runCommandParameters) {
    this.runCommandParameters = runCommandParameters;
    return this;
  }

  /**
   * Get runCommandParameters
   * @return runCommandParameters
   */
  @javax.annotation.Nullable
  public TargetRunCommandParameters getRunCommandParameters() {
    return runCommandParameters;
  }

  public void setRunCommandParameters(TargetRunCommandParameters runCommandParameters) {
    this.runCommandParameters = runCommandParameters;
  }


  public Target ecsParameters(TargetEcsParameters ecsParameters) {
    this.ecsParameters = ecsParameters;
    return this;
  }

  /**
   * Get ecsParameters
   * @return ecsParameters
   */
  @javax.annotation.Nullable
  public TargetEcsParameters getEcsParameters() {
    return ecsParameters;
  }

  public void setEcsParameters(TargetEcsParameters ecsParameters) {
    this.ecsParameters = ecsParameters;
  }


  public Target batchParameters(TargetBatchParameters batchParameters) {
    this.batchParameters = batchParameters;
    return this;
  }

  /**
   * Get batchParameters
   * @return batchParameters
   */
  @javax.annotation.Nullable
  public TargetBatchParameters getBatchParameters() {
    return batchParameters;
  }

  public void setBatchParameters(TargetBatchParameters batchParameters) {
    this.batchParameters = batchParameters;
  }


  public Target sqsParameters(TargetSqsParameters sqsParameters) {
    this.sqsParameters = sqsParameters;
    return this;
  }

  /**
   * Get sqsParameters
   * @return sqsParameters
   */
  @javax.annotation.Nullable
  public TargetSqsParameters getSqsParameters() {
    return sqsParameters;
  }

  public void setSqsParameters(TargetSqsParameters sqsParameters) {
    this.sqsParameters = sqsParameters;
  }


  public Target httpParameters(TargetHttpParameters httpParameters) {
    this.httpParameters = httpParameters;
    return this;
  }

  /**
   * Get httpParameters
   * @return httpParameters
   */
  @javax.annotation.Nullable
  public TargetHttpParameters getHttpParameters() {
    return httpParameters;
  }

  public void setHttpParameters(TargetHttpParameters httpParameters) {
    this.httpParameters = httpParameters;
  }


  public Target redshiftDataParameters(TargetRedshiftDataParameters redshiftDataParameters) {
    this.redshiftDataParameters = redshiftDataParameters;
    return this;
  }

  /**
   * Get redshiftDataParameters
   * @return redshiftDataParameters
   */
  @javax.annotation.Nullable
  public TargetRedshiftDataParameters getRedshiftDataParameters() {
    return redshiftDataParameters;
  }

  public void setRedshiftDataParameters(TargetRedshiftDataParameters redshiftDataParameters) {
    this.redshiftDataParameters = redshiftDataParameters;
  }


  public Target sageMakerPipelineParameters(TargetSageMakerPipelineParameters sageMakerPipelineParameters) {
    this.sageMakerPipelineParameters = sageMakerPipelineParameters;
    return this;
  }

  /**
   * Get sageMakerPipelineParameters
   * @return sageMakerPipelineParameters
   */
  @javax.annotation.Nullable
  public TargetSageMakerPipelineParameters getSageMakerPipelineParameters() {
    return sageMakerPipelineParameters;
  }

  public void setSageMakerPipelineParameters(TargetSageMakerPipelineParameters sageMakerPipelineParameters) {
    this.sageMakerPipelineParameters = sageMakerPipelineParameters;
  }


  public Target deadLetterConfig(TargetDeadLetterConfig deadLetterConfig) {
    this.deadLetterConfig = deadLetterConfig;
    return this;
  }

  /**
   * Get deadLetterConfig
   * @return deadLetterConfig
   */
  @javax.annotation.Nullable
  public TargetDeadLetterConfig getDeadLetterConfig() {
    return deadLetterConfig;
  }

  public void setDeadLetterConfig(TargetDeadLetterConfig deadLetterConfig) {
    this.deadLetterConfig = deadLetterConfig;
  }


  public Target retryPolicy(TargetRetryPolicy retryPolicy) {
    this.retryPolicy = retryPolicy;
    return this;
  }

  /**
   * Get retryPolicy
   * @return retryPolicy
   */
  @javax.annotation.Nullable
  public TargetRetryPolicy getRetryPolicy() {
    return retryPolicy;
  }

  public void setRetryPolicy(TargetRetryPolicy retryPolicy) {
    this.retryPolicy = retryPolicy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Target target = (Target) o;
    return Objects.equals(this.id, target.id) &&
        Objects.equals(this.arn, target.arn) &&
        Objects.equals(this.roleArn, target.roleArn) &&
        Objects.equals(this.input, target.input) &&
        Objects.equals(this.inputPath, target.inputPath) &&
        Objects.equals(this.inputTransformer, target.inputTransformer) &&
        Objects.equals(this.kinesisParameters, target.kinesisParameters) &&
        Objects.equals(this.runCommandParameters, target.runCommandParameters) &&
        Objects.equals(this.ecsParameters, target.ecsParameters) &&
        Objects.equals(this.batchParameters, target.batchParameters) &&
        Objects.equals(this.sqsParameters, target.sqsParameters) &&
        Objects.equals(this.httpParameters, target.httpParameters) &&
        Objects.equals(this.redshiftDataParameters, target.redshiftDataParameters) &&
        Objects.equals(this.sageMakerPipelineParameters, target.sageMakerPipelineParameters) &&
        Objects.equals(this.deadLetterConfig, target.deadLetterConfig) &&
        Objects.equals(this.retryPolicy, target.retryPolicy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, arn, roleArn, input, inputPath, inputTransformer, kinesisParameters, runCommandParameters, ecsParameters, batchParameters, sqsParameters, httpParameters, redshiftDataParameters, sageMakerPipelineParameters, deadLetterConfig, retryPolicy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Target {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    inputPath: ").append(toIndentedString(inputPath)).append("\n");
    sb.append("    inputTransformer: ").append(toIndentedString(inputTransformer)).append("\n");
    sb.append("    kinesisParameters: ").append(toIndentedString(kinesisParameters)).append("\n");
    sb.append("    runCommandParameters: ").append(toIndentedString(runCommandParameters)).append("\n");
    sb.append("    ecsParameters: ").append(toIndentedString(ecsParameters)).append("\n");
    sb.append("    batchParameters: ").append(toIndentedString(batchParameters)).append("\n");
    sb.append("    sqsParameters: ").append(toIndentedString(sqsParameters)).append("\n");
    sb.append("    httpParameters: ").append(toIndentedString(httpParameters)).append("\n");
    sb.append("    redshiftDataParameters: ").append(toIndentedString(redshiftDataParameters)).append("\n");
    sb.append("    sageMakerPipelineParameters: ").append(toIndentedString(sageMakerPipelineParameters)).append("\n");
    sb.append("    deadLetterConfig: ").append(toIndentedString(deadLetterConfig)).append("\n");
    sb.append("    retryPolicy: ").append(toIndentedString(retryPolicy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Arn");
    openapiFields.add("RoleArn");
    openapiFields.add("Input");
    openapiFields.add("InputPath");
    openapiFields.add("InputTransformer");
    openapiFields.add("KinesisParameters");
    openapiFields.add("RunCommandParameters");
    openapiFields.add("EcsParameters");
    openapiFields.add("BatchParameters");
    openapiFields.add("SqsParameters");
    openapiFields.add("HttpParameters");
    openapiFields.add("RedshiftDataParameters");
    openapiFields.add("SageMakerPipelineParameters");
    openapiFields.add("DeadLetterConfig");
    openapiFields.add("RetryPolicy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Id");
    openapiRequiredFields.add("Arn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Target
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Target.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Target is not found in the empty JSON string", Target.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Target.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Target` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Target.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Id`
      String.validateJsonElement(jsonObj.get("Id"));
      // validate the required field `Arn`
      String.validateJsonElement(jsonObj.get("Arn"));
      // validate the optional field `RoleArn`
      if (jsonObj.get("RoleArn") != null && !jsonObj.get("RoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RoleArn"));
      }
      // validate the optional field `Input`
      if (jsonObj.get("Input") != null && !jsonObj.get("Input").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Input"));
      }
      // validate the optional field `InputPath`
      if (jsonObj.get("InputPath") != null && !jsonObj.get("InputPath").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InputPath"));
      }
      // validate the optional field `InputTransformer`
      if (jsonObj.get("InputTransformer") != null && !jsonObj.get("InputTransformer").isJsonNull()) {
        TargetInputTransformer.validateJsonElement(jsonObj.get("InputTransformer"));
      }
      // validate the optional field `KinesisParameters`
      if (jsonObj.get("KinesisParameters") != null && !jsonObj.get("KinesisParameters").isJsonNull()) {
        TargetKinesisParameters.validateJsonElement(jsonObj.get("KinesisParameters"));
      }
      // validate the optional field `RunCommandParameters`
      if (jsonObj.get("RunCommandParameters") != null && !jsonObj.get("RunCommandParameters").isJsonNull()) {
        TargetRunCommandParameters.validateJsonElement(jsonObj.get("RunCommandParameters"));
      }
      // validate the optional field `EcsParameters`
      if (jsonObj.get("EcsParameters") != null && !jsonObj.get("EcsParameters").isJsonNull()) {
        TargetEcsParameters.validateJsonElement(jsonObj.get("EcsParameters"));
      }
      // validate the optional field `BatchParameters`
      if (jsonObj.get("BatchParameters") != null && !jsonObj.get("BatchParameters").isJsonNull()) {
        TargetBatchParameters.validateJsonElement(jsonObj.get("BatchParameters"));
      }
      // validate the optional field `SqsParameters`
      if (jsonObj.get("SqsParameters") != null && !jsonObj.get("SqsParameters").isJsonNull()) {
        TargetSqsParameters.validateJsonElement(jsonObj.get("SqsParameters"));
      }
      // validate the optional field `HttpParameters`
      if (jsonObj.get("HttpParameters") != null && !jsonObj.get("HttpParameters").isJsonNull()) {
        TargetHttpParameters.validateJsonElement(jsonObj.get("HttpParameters"));
      }
      // validate the optional field `RedshiftDataParameters`
      if (jsonObj.get("RedshiftDataParameters") != null && !jsonObj.get("RedshiftDataParameters").isJsonNull()) {
        TargetRedshiftDataParameters.validateJsonElement(jsonObj.get("RedshiftDataParameters"));
      }
      // validate the optional field `SageMakerPipelineParameters`
      if (jsonObj.get("SageMakerPipelineParameters") != null && !jsonObj.get("SageMakerPipelineParameters").isJsonNull()) {
        TargetSageMakerPipelineParameters.validateJsonElement(jsonObj.get("SageMakerPipelineParameters"));
      }
      // validate the optional field `DeadLetterConfig`
      if (jsonObj.get("DeadLetterConfig") != null && !jsonObj.get("DeadLetterConfig").isJsonNull()) {
        TargetDeadLetterConfig.validateJsonElement(jsonObj.get("DeadLetterConfig"));
      }
      // validate the optional field `RetryPolicy`
      if (jsonObj.get("RetryPolicy") != null && !jsonObj.get("RetryPolicy").isJsonNull()) {
        TargetRetryPolicy.validateJsonElement(jsonObj.get("RetryPolicy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Target.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Target' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Target> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Target.class));

       return (TypeAdapter<T>) new TypeAdapter<Target>() {
           @Override
           public void write(JsonWriter out, Target value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Target read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Target given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Target
   * @throws IOException if the JSON string is invalid with respect to Target
   */
  public static Target fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Target.class);
  }

  /**
   * Convert an instance of Target to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

