/*
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets EndpointState
 */
@JsonAdapter(EndpointState.Adapter.class)
public enum EndpointState {
  
  ACTIVE("ACTIVE"),
  
  CREATING("CREATING"),
  
  UPDATING("UPDATING"),
  
  DELETING("DELETING"),
  
  CREATE_FAILED("CREATE_FAILED"),
  
  UPDATE_FAILED("UPDATE_FAILED"),
  
  DELETE_FAILED("DELETE_FAILED");

  private String value;

  EndpointState(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static EndpointState fromValue(String value) {
    for (EndpointState b : EndpointState.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<EndpointState> {
    @Override
    public void write(final JsonWriter jsonWriter, final EndpointState enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public EndpointState read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return EndpointState.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    EndpointState.fromValue(value);
  }
}

