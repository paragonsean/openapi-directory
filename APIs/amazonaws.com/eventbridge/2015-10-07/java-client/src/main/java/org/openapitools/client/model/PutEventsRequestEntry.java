/*
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents an event to be submitted.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:59.209962-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutEventsRequestEntry {
  public static final String SERIALIZED_NAME_TIME = "Time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private OffsetDateTime time;

  public static final String SERIALIZED_NAME_SOURCE = "Source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_RESOURCES = "Resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private List resources;

  public static final String SERIALIZED_NAME_DETAIL_TYPE = "DetailType";
  @SerializedName(SERIALIZED_NAME_DETAIL_TYPE)
  private String detailType;

  public static final String SERIALIZED_NAME_DETAIL = "Detail";
  @SerializedName(SERIALIZED_NAME_DETAIL)
  private String detail;

  public static final String SERIALIZED_NAME_EVENT_BUS_NAME = "EventBusName";
  @SerializedName(SERIALIZED_NAME_EVENT_BUS_NAME)
  private String eventBusName;

  public static final String SERIALIZED_NAME_TRACE_HEADER = "TraceHeader";
  @SerializedName(SERIALIZED_NAME_TRACE_HEADER)
  private String traceHeader;

  public PutEventsRequestEntry() {
  }

  public PutEventsRequestEntry time(OffsetDateTime time) {
    this.time = time;
    return this;
  }

  /**
   * Get time
   * @return time
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTime() {
    return time;
  }

  public void setTime(OffsetDateTime time) {
    this.time = time;
  }


  public PutEventsRequestEntry source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public PutEventsRequestEntry resources(List resources) {
    this.resources = resources;
    return this;
  }

  /**
   * Get resources
   * @return resources
   */
  @javax.annotation.Nullable
  public List getResources() {
    return resources;
  }

  public void setResources(List resources) {
    this.resources = resources;
  }


  public PutEventsRequestEntry detailType(String detailType) {
    this.detailType = detailType;
    return this;
  }

  /**
   * Get detailType
   * @return detailType
   */
  @javax.annotation.Nullable
  public String getDetailType() {
    return detailType;
  }

  public void setDetailType(String detailType) {
    this.detailType = detailType;
  }


  public PutEventsRequestEntry detail(String detail) {
    this.detail = detail;
    return this;
  }

  /**
   * Get detail
   * @return detail
   */
  @javax.annotation.Nullable
  public String getDetail() {
    return detail;
  }

  public void setDetail(String detail) {
    this.detail = detail;
  }


  public PutEventsRequestEntry eventBusName(String eventBusName) {
    this.eventBusName = eventBusName;
    return this;
  }

  /**
   * Get eventBusName
   * @return eventBusName
   */
  @javax.annotation.Nullable
  public String getEventBusName() {
    return eventBusName;
  }

  public void setEventBusName(String eventBusName) {
    this.eventBusName = eventBusName;
  }


  public PutEventsRequestEntry traceHeader(String traceHeader) {
    this.traceHeader = traceHeader;
    return this;
  }

  /**
   * Get traceHeader
   * @return traceHeader
   */
  @javax.annotation.Nullable
  public String getTraceHeader() {
    return traceHeader;
  }

  public void setTraceHeader(String traceHeader) {
    this.traceHeader = traceHeader;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutEventsRequestEntry putEventsRequestEntry = (PutEventsRequestEntry) o;
    return Objects.equals(this.time, putEventsRequestEntry.time) &&
        Objects.equals(this.source, putEventsRequestEntry.source) &&
        Objects.equals(this.resources, putEventsRequestEntry.resources) &&
        Objects.equals(this.detailType, putEventsRequestEntry.detailType) &&
        Objects.equals(this.detail, putEventsRequestEntry.detail) &&
        Objects.equals(this.eventBusName, putEventsRequestEntry.eventBusName) &&
        Objects.equals(this.traceHeader, putEventsRequestEntry.traceHeader);
  }

  @Override
  public int hashCode() {
    return Objects.hash(time, source, resources, detailType, detail, eventBusName, traceHeader);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutEventsRequestEntry {\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    detailType: ").append(toIndentedString(detailType)).append("\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    eventBusName: ").append(toIndentedString(eventBusName)).append("\n");
    sb.append("    traceHeader: ").append(toIndentedString(traceHeader)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Time");
    openapiFields.add("Source");
    openapiFields.add("Resources");
    openapiFields.add("DetailType");
    openapiFields.add("Detail");
    openapiFields.add("EventBusName");
    openapiFields.add("TraceHeader");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutEventsRequestEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutEventsRequestEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutEventsRequestEntry is not found in the empty JSON string", PutEventsRequestEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutEventsRequestEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutEventsRequestEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Time`
      if (jsonObj.get("Time") != null && !jsonObj.get("Time").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("Time"));
      }
      // validate the optional field `Source`
      if (jsonObj.get("Source") != null && !jsonObj.get("Source").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Source"));
      }
      // validate the optional field `Resources`
      if (jsonObj.get("Resources") != null && !jsonObj.get("Resources").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Resources"));
      }
      // validate the optional field `DetailType`
      if (jsonObj.get("DetailType") != null && !jsonObj.get("DetailType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DetailType"));
      }
      // validate the optional field `Detail`
      if (jsonObj.get("Detail") != null && !jsonObj.get("Detail").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Detail"));
      }
      // validate the optional field `EventBusName`
      if (jsonObj.get("EventBusName") != null && !jsonObj.get("EventBusName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EventBusName"));
      }
      // validate the optional field `TraceHeader`
      if (jsonObj.get("TraceHeader") != null && !jsonObj.get("TraceHeader").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TraceHeader"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutEventsRequestEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutEventsRequestEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutEventsRequestEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutEventsRequestEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<PutEventsRequestEntry>() {
           @Override
           public void write(JsonWriter out, PutEventsRequestEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutEventsRequestEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutEventsRequestEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutEventsRequestEntry
   * @throws IOException if the JSON string is invalid with respect to PutEventsRequestEntry
   */
  public static PutEventsRequestEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutEventsRequestEntry.class);
  }

  /**
   * Convert an instance of PutEventsRequestEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

