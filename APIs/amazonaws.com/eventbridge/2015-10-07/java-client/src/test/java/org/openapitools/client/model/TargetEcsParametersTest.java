/*
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EcsParametersNetworkConfiguration;
import org.openapitools.client.model.LaunchType;
import org.openapitools.client.model.PropagateTags;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for TargetEcsParameters
 */
public class TargetEcsParametersTest {
    private final TargetEcsParameters model = new TargetEcsParameters();

    /**
     * Model tests for TargetEcsParameters
     */
    @Test
    public void testTargetEcsParameters() {
        // TODO: test TargetEcsParameters
    }

    /**
     * Test the property 'taskDefinitionArn'
     */
    @Test
    public void taskDefinitionArnTest() {
        // TODO: test taskDefinitionArn
    }

    /**
     * Test the property 'taskCount'
     */
    @Test
    public void taskCountTest() {
        // TODO: test taskCount
    }

    /**
     * Test the property 'launchType'
     */
    @Test
    public void launchTypeTest() {
        // TODO: test launchType
    }

    /**
     * Test the property 'networkConfiguration'
     */
    @Test
    public void networkConfigurationTest() {
        // TODO: test networkConfiguration
    }

    /**
     * Test the property 'platformVersion'
     */
    @Test
    public void platformVersionTest() {
        // TODO: test platformVersion
    }

    /**
     * Test the property 'group'
     */
    @Test
    public void groupTest() {
        // TODO: test group
    }

    /**
     * Test the property 'capacityProviderStrategy'
     */
    @Test
    public void capacityProviderStrategyTest() {
        // TODO: test capacityProviderStrategy
    }

    /**
     * Test the property 'enableECSManagedTags'
     */
    @Test
    public void enableECSManagedTagsTest() {
        // TODO: test enableECSManagedTags
    }

    /**
     * Test the property 'enableExecuteCommand'
     */
    @Test
    public void enableExecuteCommandTest() {
        // TODO: test enableExecuteCommand
    }

    /**
     * Test the property 'placementConstraints'
     */
    @Test
    public void placementConstraintsTest() {
        // TODO: test placementConstraints
    }

    /**
     * Test the property 'placementStrategy'
     */
    @Test
    public void placementStrategyTest() {
        // TODO: test placementStrategy
    }

    /**
     * Test the property 'propagateTags'
     */
    @Test
    public void propagateTagsTest() {
        // TODO: test propagateTags
    }

    /**
     * Test the property 'referenceId'
     */
    @Test
    public void referenceIdTest() {
        // TODO: test referenceId
    }

    /**
     * Test the property 'tags'
     */
    @Test
    public void tagsTest() {
        // TODO: test tags
    }

}
