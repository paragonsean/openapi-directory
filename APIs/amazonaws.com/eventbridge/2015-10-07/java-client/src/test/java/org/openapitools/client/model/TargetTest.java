/*
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TargetBatchParameters;
import org.openapitools.client.model.TargetDeadLetterConfig;
import org.openapitools.client.model.TargetEcsParameters;
import org.openapitools.client.model.TargetHttpParameters;
import org.openapitools.client.model.TargetInputTransformer;
import org.openapitools.client.model.TargetKinesisParameters;
import org.openapitools.client.model.TargetRedshiftDataParameters;
import org.openapitools.client.model.TargetRetryPolicy;
import org.openapitools.client.model.TargetRunCommandParameters;
import org.openapitools.client.model.TargetSageMakerPipelineParameters;
import org.openapitools.client.model.TargetSqsParameters;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Target
 */
public class TargetTest {
    private final Target model = new Target();

    /**
     * Model tests for Target
     */
    @Test
    public void testTarget() {
        // TODO: test Target
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'arn'
     */
    @Test
    public void arnTest() {
        // TODO: test arn
    }

    /**
     * Test the property 'roleArn'
     */
    @Test
    public void roleArnTest() {
        // TODO: test roleArn
    }

    /**
     * Test the property 'input'
     */
    @Test
    public void inputTest() {
        // TODO: test input
    }

    /**
     * Test the property 'inputPath'
     */
    @Test
    public void inputPathTest() {
        // TODO: test inputPath
    }

    /**
     * Test the property 'inputTransformer'
     */
    @Test
    public void inputTransformerTest() {
        // TODO: test inputTransformer
    }

    /**
     * Test the property 'kinesisParameters'
     */
    @Test
    public void kinesisParametersTest() {
        // TODO: test kinesisParameters
    }

    /**
     * Test the property 'runCommandParameters'
     */
    @Test
    public void runCommandParametersTest() {
        // TODO: test runCommandParameters
    }

    /**
     * Test the property 'ecsParameters'
     */
    @Test
    public void ecsParametersTest() {
        // TODO: test ecsParameters
    }

    /**
     * Test the property 'batchParameters'
     */
    @Test
    public void batchParametersTest() {
        // TODO: test batchParameters
    }

    /**
     * Test the property 'sqsParameters'
     */
    @Test
    public void sqsParametersTest() {
        // TODO: test sqsParameters
    }

    /**
     * Test the property 'httpParameters'
     */
    @Test
    public void httpParametersTest() {
        // TODO: test httpParameters
    }

    /**
     * Test the property 'redshiftDataParameters'
     */
    @Test
    public void redshiftDataParametersTest() {
        // TODO: test redshiftDataParameters
    }

    /**
     * Test the property 'sageMakerPipelineParameters'
     */
    @Test
    public void sageMakerPipelineParametersTest() {
        // TODO: test sageMakerPipelineParameters
    }

    /**
     * Test the property 'deadLetterConfig'
     */
    @Test
    public void deadLetterConfigTest() {
        // TODO: test deadLetterConfig
    }

    /**
     * Test the property 'retryPolicy'
     */
    @Test
    public void retryPolicyTest() {
        // TODO: test retryPolicy
    }

}
