/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonEventBridge);
  }
}(this, function(expect, AmazonEventBridge) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonEventBridge.Target();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Target', function() {
    it('should create an instance of Target', function() {
      // uncomment below and update the code to test Target
      //var instance = new AmazonEventBridge.Target();
      //expect(instance).to.be.a(AmazonEventBridge.Target);
    });

    it('should have the property id (base name: "Id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new AmazonEventBridge.Target();
      //expect(instance).to.be();
    });

    it('should have the property arn (base name: "Arn")', function() {
      // uncomment below and update the code to test the property arn
      //var instance = new AmazonEventBridge.Target();
      //expect(instance).to.be();
    });

    it('should have the property roleArn (base name: "RoleArn")', function() {
      // uncomment below and update the code to test the property roleArn
      //var instance = new AmazonEventBridge.Target();
      //expect(instance).to.be();
    });

    it('should have the property input (base name: "Input")', function() {
      // uncomment below and update the code to test the property input
      //var instance = new AmazonEventBridge.Target();
      //expect(instance).to.be();
    });

    it('should have the property inputPath (base name: "InputPath")', function() {
      // uncomment below and update the code to test the property inputPath
      //var instance = new AmazonEventBridge.Target();
      //expect(instance).to.be();
    });

    it('should have the property inputTransformer (base name: "InputTransformer")', function() {
      // uncomment below and update the code to test the property inputTransformer
      //var instance = new AmazonEventBridge.Target();
      //expect(instance).to.be();
    });

    it('should have the property kinesisParameters (base name: "KinesisParameters")', function() {
      // uncomment below and update the code to test the property kinesisParameters
      //var instance = new AmazonEventBridge.Target();
      //expect(instance).to.be();
    });

    it('should have the property runCommandParameters (base name: "RunCommandParameters")', function() {
      // uncomment below and update the code to test the property runCommandParameters
      //var instance = new AmazonEventBridge.Target();
      //expect(instance).to.be();
    });

    it('should have the property ecsParameters (base name: "EcsParameters")', function() {
      // uncomment below and update the code to test the property ecsParameters
      //var instance = new AmazonEventBridge.Target();
      //expect(instance).to.be();
    });

    it('should have the property batchParameters (base name: "BatchParameters")', function() {
      // uncomment below and update the code to test the property batchParameters
      //var instance = new AmazonEventBridge.Target();
      //expect(instance).to.be();
    });

    it('should have the property sqsParameters (base name: "SqsParameters")', function() {
      // uncomment below and update the code to test the property sqsParameters
      //var instance = new AmazonEventBridge.Target();
      //expect(instance).to.be();
    });

    it('should have the property httpParameters (base name: "HttpParameters")', function() {
      // uncomment below and update the code to test the property httpParameters
      //var instance = new AmazonEventBridge.Target();
      //expect(instance).to.be();
    });

    it('should have the property redshiftDataParameters (base name: "RedshiftDataParameters")', function() {
      // uncomment below and update the code to test the property redshiftDataParameters
      //var instance = new AmazonEventBridge.Target();
      //expect(instance).to.be();
    });

    it('should have the property sageMakerPipelineParameters (base name: "SageMakerPipelineParameters")', function() {
      // uncomment below and update the code to test the property sageMakerPipelineParameters
      //var instance = new AmazonEventBridge.Target();
      //expect(instance).to.be();
    });

    it('should have the property deadLetterConfig (base name: "DeadLetterConfig")', function() {
      // uncomment below and update the code to test the property deadLetterConfig
      //var instance = new AmazonEventBridge.Target();
      //expect(instance).to.be();
    });

    it('should have the property retryPolicy (base name: "RetryPolicy")', function() {
      // uncomment below and update the code to test the property retryPolicy
      //var instance = new AmazonEventBridge.Target();
      //expect(instance).to.be();
    });

  });

}));
