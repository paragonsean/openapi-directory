/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonEventBridge);
  }
}(this, function(expect, AmazonEventBridge) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonEventBridge.TargetEcsParameters();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TargetEcsParameters', function() {
    it('should create an instance of TargetEcsParameters', function() {
      // uncomment below and update the code to test TargetEcsParameters
      //var instance = new AmazonEventBridge.TargetEcsParameters();
      //expect(instance).to.be.a(AmazonEventBridge.TargetEcsParameters);
    });

    it('should have the property taskDefinitionArn (base name: "TaskDefinitionArn")', function() {
      // uncomment below and update the code to test the property taskDefinitionArn
      //var instance = new AmazonEventBridge.TargetEcsParameters();
      //expect(instance).to.be();
    });

    it('should have the property taskCount (base name: "TaskCount")', function() {
      // uncomment below and update the code to test the property taskCount
      //var instance = new AmazonEventBridge.TargetEcsParameters();
      //expect(instance).to.be();
    });

    it('should have the property launchType (base name: "LaunchType")', function() {
      // uncomment below and update the code to test the property launchType
      //var instance = new AmazonEventBridge.TargetEcsParameters();
      //expect(instance).to.be();
    });

    it('should have the property networkConfiguration (base name: "NetworkConfiguration")', function() {
      // uncomment below and update the code to test the property networkConfiguration
      //var instance = new AmazonEventBridge.TargetEcsParameters();
      //expect(instance).to.be();
    });

    it('should have the property platformVersion (base name: "PlatformVersion")', function() {
      // uncomment below and update the code to test the property platformVersion
      //var instance = new AmazonEventBridge.TargetEcsParameters();
      //expect(instance).to.be();
    });

    it('should have the property group (base name: "Group")', function() {
      // uncomment below and update the code to test the property group
      //var instance = new AmazonEventBridge.TargetEcsParameters();
      //expect(instance).to.be();
    });

    it('should have the property capacityProviderStrategy (base name: "CapacityProviderStrategy")', function() {
      // uncomment below and update the code to test the property capacityProviderStrategy
      //var instance = new AmazonEventBridge.TargetEcsParameters();
      //expect(instance).to.be();
    });

    it('should have the property enableECSManagedTags (base name: "EnableECSManagedTags")', function() {
      // uncomment below and update the code to test the property enableECSManagedTags
      //var instance = new AmazonEventBridge.TargetEcsParameters();
      //expect(instance).to.be();
    });

    it('should have the property enableExecuteCommand (base name: "EnableExecuteCommand")', function() {
      // uncomment below and update the code to test the property enableExecuteCommand
      //var instance = new AmazonEventBridge.TargetEcsParameters();
      //expect(instance).to.be();
    });

    it('should have the property placementConstraints (base name: "PlacementConstraints")', function() {
      // uncomment below and update the code to test the property placementConstraints
      //var instance = new AmazonEventBridge.TargetEcsParameters();
      //expect(instance).to.be();
    });

    it('should have the property placementStrategy (base name: "PlacementStrategy")', function() {
      // uncomment below and update the code to test the property placementStrategy
      //var instance = new AmazonEventBridge.TargetEcsParameters();
      //expect(instance).to.be();
    });

    it('should have the property propagateTags (base name: "PropagateTags")', function() {
      // uncomment below and update the code to test the property propagateTags
      //var instance = new AmazonEventBridge.TargetEcsParameters();
      //expect(instance).to.be();
    });

    it('should have the property referenceId (base name: "ReferenceId")', function() {
      // uncomment below and update the code to test the property referenceId
      //var instance = new AmazonEventBridge.TargetEcsParameters();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "Tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new AmazonEventBridge.TargetEcsParameters();
      //expect(instance).to.be();
    });

  });

}));
