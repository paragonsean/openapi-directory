/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonEventBridge);
  }
}(this, function(expect, AmazonEventBridge) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonEventBridge.CreateConnectionAuthRequestParametersOAuthParameters();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CreateConnectionAuthRequestParametersOAuthParameters', function() {
    it('should create an instance of CreateConnectionAuthRequestParametersOAuthParameters', function() {
      // uncomment below and update the code to test CreateConnectionAuthRequestParametersOAuthParameters
      //var instance = new AmazonEventBridge.CreateConnectionAuthRequestParametersOAuthParameters();
      //expect(instance).to.be.a(AmazonEventBridge.CreateConnectionAuthRequestParametersOAuthParameters);
    });

    it('should have the property clientParameters (base name: "ClientParameters")', function() {
      // uncomment below and update the code to test the property clientParameters
      //var instance = new AmazonEventBridge.CreateConnectionAuthRequestParametersOAuthParameters();
      //expect(instance).to.be();
    });

    it('should have the property authorizationEndpoint (base name: "AuthorizationEndpoint")', function() {
      // uncomment below and update the code to test the property authorizationEndpoint
      //var instance = new AmazonEventBridge.CreateConnectionAuthRequestParametersOAuthParameters();
      //expect(instance).to.be();
    });

    it('should have the property httpMethod (base name: "HttpMethod")', function() {
      // uncomment below and update the code to test the property httpMethod
      //var instance = new AmazonEventBridge.CreateConnectionAuthRequestParametersOAuthParameters();
      //expect(instance).to.be();
    });

    it('should have the property oAuthHttpParameters (base name: "OAuthHttpParameters")', function() {
      // uncomment below and update the code to test the property oAuthHttpParameters
      //var instance = new AmazonEventBridge.CreateConnectionAuthRequestParametersOAuthParameters();
      //expect(instance).to.be();
    });

  });

}));
