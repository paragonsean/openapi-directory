/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonEventBridge);
  }
}(this, function(expect, AmazonEventBridge) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonEventBridge.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('activateEventSource', function() {
      it('should call activateEventSource successfully', function(done) {
        //uncomment below and update the code to test activateEventSource
        //instance.activateEventSource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelReplay', function() {
      it('should call cancelReplay successfully', function(done) {
        //uncomment below and update the code to test cancelReplay
        //instance.cancelReplay(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createApiDestination', function() {
      it('should call createApiDestination successfully', function(done) {
        //uncomment below and update the code to test createApiDestination
        //instance.createApiDestination(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createArchive', function() {
      it('should call createArchive successfully', function(done) {
        //uncomment below and update the code to test createArchive
        //instance.createArchive(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createConnection', function() {
      it('should call createConnection successfully', function(done) {
        //uncomment below and update the code to test createConnection
        //instance.createConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createEndpoint', function() {
      it('should call createEndpoint successfully', function(done) {
        //uncomment below and update the code to test createEndpoint
        //instance.createEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createEventBus', function() {
      it('should call createEventBus successfully', function(done) {
        //uncomment below and update the code to test createEventBus
        //instance.createEventBus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPartnerEventSource', function() {
      it('should call createPartnerEventSource successfully', function(done) {
        //uncomment below and update the code to test createPartnerEventSource
        //instance.createPartnerEventSource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deactivateEventSource', function() {
      it('should call deactivateEventSource successfully', function(done) {
        //uncomment below and update the code to test deactivateEventSource
        //instance.deactivateEventSource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deauthorizeConnection', function() {
      it('should call deauthorizeConnection successfully', function(done) {
        //uncomment below and update the code to test deauthorizeConnection
        //instance.deauthorizeConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteApiDestination', function() {
      it('should call deleteApiDestination successfully', function(done) {
        //uncomment below and update the code to test deleteApiDestination
        //instance.deleteApiDestination(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteArchive', function() {
      it('should call deleteArchive successfully', function(done) {
        //uncomment below and update the code to test deleteArchive
        //instance.deleteArchive(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteConnection', function() {
      it('should call deleteConnection successfully', function(done) {
        //uncomment below and update the code to test deleteConnection
        //instance.deleteConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEndpoint', function() {
      it('should call deleteEndpoint successfully', function(done) {
        //uncomment below and update the code to test deleteEndpoint
        //instance.deleteEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEventBus', function() {
      it('should call deleteEventBus successfully', function(done) {
        //uncomment below and update the code to test deleteEventBus
        //instance.deleteEventBus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePartnerEventSource', function() {
      it('should call deletePartnerEventSource successfully', function(done) {
        //uncomment below and update the code to test deletePartnerEventSource
        //instance.deletePartnerEventSource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRule', function() {
      it('should call deleteRule successfully', function(done) {
        //uncomment below and update the code to test deleteRule
        //instance.deleteRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeApiDestination', function() {
      it('should call describeApiDestination successfully', function(done) {
        //uncomment below and update the code to test describeApiDestination
        //instance.describeApiDestination(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeArchive', function() {
      it('should call describeArchive successfully', function(done) {
        //uncomment below and update the code to test describeArchive
        //instance.describeArchive(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeConnection', function() {
      it('should call describeConnection successfully', function(done) {
        //uncomment below and update the code to test describeConnection
        //instance.describeConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeEndpoint', function() {
      it('should call describeEndpoint successfully', function(done) {
        //uncomment below and update the code to test describeEndpoint
        //instance.describeEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeEventBus', function() {
      it('should call describeEventBus successfully', function(done) {
        //uncomment below and update the code to test describeEventBus
        //instance.describeEventBus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeEventSource', function() {
      it('should call describeEventSource successfully', function(done) {
        //uncomment below and update the code to test describeEventSource
        //instance.describeEventSource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describePartnerEventSource', function() {
      it('should call describePartnerEventSource successfully', function(done) {
        //uncomment below and update the code to test describePartnerEventSource
        //instance.describePartnerEventSource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeReplay', function() {
      it('should call describeReplay successfully', function(done) {
        //uncomment below and update the code to test describeReplay
        //instance.describeReplay(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeRule', function() {
      it('should call describeRule successfully', function(done) {
        //uncomment below and update the code to test describeRule
        //instance.describeRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disableRule', function() {
      it('should call disableRule successfully', function(done) {
        //uncomment below and update the code to test disableRule
        //instance.disableRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('enableRule', function() {
      it('should call enableRule successfully', function(done) {
        //uncomment below and update the code to test enableRule
        //instance.enableRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listApiDestinations', function() {
      it('should call listApiDestinations successfully', function(done) {
        //uncomment below and update the code to test listApiDestinations
        //instance.listApiDestinations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listArchives', function() {
      it('should call listArchives successfully', function(done) {
        //uncomment below and update the code to test listArchives
        //instance.listArchives(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listConnections', function() {
      it('should call listConnections successfully', function(done) {
        //uncomment below and update the code to test listConnections
        //instance.listConnections(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEndpoints', function() {
      it('should call listEndpoints successfully', function(done) {
        //uncomment below and update the code to test listEndpoints
        //instance.listEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEventBuses', function() {
      it('should call listEventBuses successfully', function(done) {
        //uncomment below and update the code to test listEventBuses
        //instance.listEventBuses(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEventSources', function() {
      it('should call listEventSources successfully', function(done) {
        //uncomment below and update the code to test listEventSources
        //instance.listEventSources(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPartnerEventSourceAccounts', function() {
      it('should call listPartnerEventSourceAccounts successfully', function(done) {
        //uncomment below and update the code to test listPartnerEventSourceAccounts
        //instance.listPartnerEventSourceAccounts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPartnerEventSources', function() {
      it('should call listPartnerEventSources successfully', function(done) {
        //uncomment below and update the code to test listPartnerEventSources
        //instance.listPartnerEventSources(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listReplays', function() {
      it('should call listReplays successfully', function(done) {
        //uncomment below and update the code to test listReplays
        //instance.listReplays(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRuleNamesByTarget', function() {
      it('should call listRuleNamesByTarget successfully', function(done) {
        //uncomment below and update the code to test listRuleNamesByTarget
        //instance.listRuleNamesByTarget(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRules', function() {
      it('should call listRules successfully', function(done) {
        //uncomment below and update the code to test listRules
        //instance.listRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTargetsByRule', function() {
      it('should call listTargetsByRule successfully', function(done) {
        //uncomment below and update the code to test listTargetsByRule
        //instance.listTargetsByRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putEvents', function() {
      it('should call putEvents successfully', function(done) {
        //uncomment below and update the code to test putEvents
        //instance.putEvents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putPartnerEvents', function() {
      it('should call putPartnerEvents successfully', function(done) {
        //uncomment below and update the code to test putPartnerEvents
        //instance.putPartnerEvents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putPermission', function() {
      it('should call putPermission successfully', function(done) {
        //uncomment below and update the code to test putPermission
        //instance.putPermission(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putRule', function() {
      it('should call putRule successfully', function(done) {
        //uncomment below and update the code to test putRule
        //instance.putRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putTargets', function() {
      it('should call putTargets successfully', function(done) {
        //uncomment below and update the code to test putTargets
        //instance.putTargets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removePermission', function() {
      it('should call removePermission successfully', function(done) {
        //uncomment below and update the code to test removePermission
        //instance.removePermission(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeTargets', function() {
      it('should call removeTargets successfully', function(done) {
        //uncomment below and update the code to test removeTargets
        //instance.removeTargets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startReplay', function() {
      it('should call startReplay successfully', function(done) {
        //uncomment below and update the code to test startReplay
        //instance.startReplay(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('testEventPattern', function() {
      it('should call testEventPattern successfully', function(done) {
        //uncomment below and update the code to test testEventPattern
        //instance.testEventPattern(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateApiDestination', function() {
      it('should call updateApiDestination successfully', function(done) {
        //uncomment below and update the code to test updateApiDestination
        //instance.updateApiDestination(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateArchive', function() {
      it('should call updateArchive successfully', function(done) {
        //uncomment below and update the code to test updateArchive
        //instance.updateArchive(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateConnection', function() {
      it('should call updateConnection successfully', function(done) {
        //uncomment below and update the code to test updateConnection
        //instance.updateConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateEndpoint', function() {
      it('should call updateEndpoint successfully', function(done) {
        //uncomment below and update the code to test updateEndpoint
        //instance.updateEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
