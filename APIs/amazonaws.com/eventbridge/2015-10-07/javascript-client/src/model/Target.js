/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TargetBatchParameters from './TargetBatchParameters';
import TargetDeadLetterConfig from './TargetDeadLetterConfig';
import TargetEcsParameters from './TargetEcsParameters';
import TargetHttpParameters from './TargetHttpParameters';
import TargetInputTransformer from './TargetInputTransformer';
import TargetKinesisParameters from './TargetKinesisParameters';
import TargetRedshiftDataParameters from './TargetRedshiftDataParameters';
import TargetRetryPolicy from './TargetRetryPolicy';
import TargetRunCommandParameters from './TargetRunCommandParameters';
import TargetSageMakerPipelineParameters from './TargetSageMakerPipelineParameters';
import TargetSqsParameters from './TargetSqsParameters';

/**
 * The Target model module.
 * @module model/Target
 * @version 2015-10-07
 */
class Target {
    /**
     * Constructs a new <code>Target</code>.
     * &lt;p&gt;Targets are the resources to be invoked when a rule is triggered. For a complete list of services and resources that can be set as a target, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutTargets.html\&quot;&gt;PutTargets&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you are setting the event bus of another account as the target, and that account granted permission to your account through an organization instead of directly by the account ID, then you must specify a &lt;code&gt;RoleArn&lt;/code&gt; with proper permissions in the &lt;code&gt;Target&lt;/code&gt; structure. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-cross-account-event-delivery.html\&quot;&gt;Sending and Receiving Events Between Amazon Web Services Accounts&lt;/a&gt; in the &lt;i&gt;Amazon EventBridge User Guide&lt;/i&gt;.&lt;/p&gt;
     * @alias module:model/Target
     * @param id {String} 
     * @param arn {String} 
     */
    constructor(id, arn) { 
        
        Target.initialize(this, id, arn);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, arn) { 
        obj['Id'] = id;
        obj['Arn'] = arn;
    }

    /**
     * Constructs a <code>Target</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Target} obj Optional instance to populate.
     * @return {module:model/Target} The populated <code>Target</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Target();

            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('Arn')) {
                obj['Arn'] = ApiClient.convertToType(data['Arn'], 'String');
            }
            if (data.hasOwnProperty('RoleArn')) {
                obj['RoleArn'] = ApiClient.convertToType(data['RoleArn'], 'String');
            }
            if (data.hasOwnProperty('Input')) {
                obj['Input'] = ApiClient.convertToType(data['Input'], 'String');
            }
            if (data.hasOwnProperty('InputPath')) {
                obj['InputPath'] = ApiClient.convertToType(data['InputPath'], 'String');
            }
            if (data.hasOwnProperty('InputTransformer')) {
                obj['InputTransformer'] = TargetInputTransformer.constructFromObject(data['InputTransformer']);
            }
            if (data.hasOwnProperty('KinesisParameters')) {
                obj['KinesisParameters'] = TargetKinesisParameters.constructFromObject(data['KinesisParameters']);
            }
            if (data.hasOwnProperty('RunCommandParameters')) {
                obj['RunCommandParameters'] = TargetRunCommandParameters.constructFromObject(data['RunCommandParameters']);
            }
            if (data.hasOwnProperty('EcsParameters')) {
                obj['EcsParameters'] = TargetEcsParameters.constructFromObject(data['EcsParameters']);
            }
            if (data.hasOwnProperty('BatchParameters')) {
                obj['BatchParameters'] = TargetBatchParameters.constructFromObject(data['BatchParameters']);
            }
            if (data.hasOwnProperty('SqsParameters')) {
                obj['SqsParameters'] = TargetSqsParameters.constructFromObject(data['SqsParameters']);
            }
            if (data.hasOwnProperty('HttpParameters')) {
                obj['HttpParameters'] = TargetHttpParameters.constructFromObject(data['HttpParameters']);
            }
            if (data.hasOwnProperty('RedshiftDataParameters')) {
                obj['RedshiftDataParameters'] = TargetRedshiftDataParameters.constructFromObject(data['RedshiftDataParameters']);
            }
            if (data.hasOwnProperty('SageMakerPipelineParameters')) {
                obj['SageMakerPipelineParameters'] = TargetSageMakerPipelineParameters.constructFromObject(data['SageMakerPipelineParameters']);
            }
            if (data.hasOwnProperty('DeadLetterConfig')) {
                obj['DeadLetterConfig'] = TargetDeadLetterConfig.constructFromObject(data['DeadLetterConfig']);
            }
            if (data.hasOwnProperty('RetryPolicy')) {
                obj['RetryPolicy'] = TargetRetryPolicy.constructFromObject(data['RetryPolicy']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Target</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Target</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Target.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Id`
        if (data['Id']) { // data not null
          String.validateJSON(data['Id']);
        }
        // validate the optional field `Arn`
        if (data['Arn']) { // data not null
          String.validateJSON(data['Arn']);
        }
        // validate the optional field `RoleArn`
        if (data['RoleArn']) { // data not null
          String.validateJSON(data['RoleArn']);
        }
        // validate the optional field `Input`
        if (data['Input']) { // data not null
          String.validateJSON(data['Input']);
        }
        // validate the optional field `InputPath`
        if (data['InputPath']) { // data not null
          String.validateJSON(data['InputPath']);
        }
        // validate the optional field `InputTransformer`
        if (data['InputTransformer']) { // data not null
          TargetInputTransformer.validateJSON(data['InputTransformer']);
        }
        // validate the optional field `KinesisParameters`
        if (data['KinesisParameters']) { // data not null
          TargetKinesisParameters.validateJSON(data['KinesisParameters']);
        }
        // validate the optional field `RunCommandParameters`
        if (data['RunCommandParameters']) { // data not null
          TargetRunCommandParameters.validateJSON(data['RunCommandParameters']);
        }
        // validate the optional field `EcsParameters`
        if (data['EcsParameters']) { // data not null
          TargetEcsParameters.validateJSON(data['EcsParameters']);
        }
        // validate the optional field `BatchParameters`
        if (data['BatchParameters']) { // data not null
          TargetBatchParameters.validateJSON(data['BatchParameters']);
        }
        // validate the optional field `SqsParameters`
        if (data['SqsParameters']) { // data not null
          TargetSqsParameters.validateJSON(data['SqsParameters']);
        }
        // validate the optional field `HttpParameters`
        if (data['HttpParameters']) { // data not null
          TargetHttpParameters.validateJSON(data['HttpParameters']);
        }
        // validate the optional field `RedshiftDataParameters`
        if (data['RedshiftDataParameters']) { // data not null
          TargetRedshiftDataParameters.validateJSON(data['RedshiftDataParameters']);
        }
        // validate the optional field `SageMakerPipelineParameters`
        if (data['SageMakerPipelineParameters']) { // data not null
          TargetSageMakerPipelineParameters.validateJSON(data['SageMakerPipelineParameters']);
        }
        // validate the optional field `DeadLetterConfig`
        if (data['DeadLetterConfig']) { // data not null
          TargetDeadLetterConfig.validateJSON(data['DeadLetterConfig']);
        }
        // validate the optional field `RetryPolicy`
        if (data['RetryPolicy']) { // data not null
          TargetRetryPolicy.validateJSON(data['RetryPolicy']);
        }

        return true;
    }


}

Target.RequiredProperties = ["Id", "Arn"];

/**
 * @member {String} Id
 */
Target.prototype['Id'] = undefined;

/**
 * @member {String} Arn
 */
Target.prototype['Arn'] = undefined;

/**
 * @member {String} RoleArn
 */
Target.prototype['RoleArn'] = undefined;

/**
 * @member {String} Input
 */
Target.prototype['Input'] = undefined;

/**
 * @member {String} InputPath
 */
Target.prototype['InputPath'] = undefined;

/**
 * @member {module:model/TargetInputTransformer} InputTransformer
 */
Target.prototype['InputTransformer'] = undefined;

/**
 * @member {module:model/TargetKinesisParameters} KinesisParameters
 */
Target.prototype['KinesisParameters'] = undefined;

/**
 * @member {module:model/TargetRunCommandParameters} RunCommandParameters
 */
Target.prototype['RunCommandParameters'] = undefined;

/**
 * @member {module:model/TargetEcsParameters} EcsParameters
 */
Target.prototype['EcsParameters'] = undefined;

/**
 * @member {module:model/TargetBatchParameters} BatchParameters
 */
Target.prototype['BatchParameters'] = undefined;

/**
 * @member {module:model/TargetSqsParameters} SqsParameters
 */
Target.prototype['SqsParameters'] = undefined;

/**
 * @member {module:model/TargetHttpParameters} HttpParameters
 */
Target.prototype['HttpParameters'] = undefined;

/**
 * @member {module:model/TargetRedshiftDataParameters} RedshiftDataParameters
 */
Target.prototype['RedshiftDataParameters'] = undefined;

/**
 * @member {module:model/TargetSageMakerPipelineParameters} SageMakerPipelineParameters
 */
Target.prototype['SageMakerPipelineParameters'] = undefined;

/**
 * @member {module:model/TargetDeadLetterConfig} DeadLetterConfig
 */
Target.prototype['DeadLetterConfig'] = undefined;

/**
 * @member {module:model/TargetRetryPolicy} RetryPolicy
 */
Target.prototype['RetryPolicy'] = undefined;






export default Target;

