/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITarget.h
 *
 * &lt;p&gt;Targets are the resources to be invoked when a rule is triggered. For a complete list of services and resources that can be set as a target, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutTargets.html\&quot;&gt;PutTargets&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you are setting the event bus of another account as the target, and that account granted permission to your account through an organization instead of directly by the account ID, then you must specify a &lt;code&gt;RoleArn&lt;/code&gt; with proper permissions in the &lt;code&gt;Target&lt;/code&gt; structure. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-cross-account-event-delivery.html\&quot;&gt;Sending and Receiving Events Between Amazon Web Services Accounts&lt;/a&gt; in the &lt;i&gt;Amazon EventBridge User Guide&lt;/i&gt;.&lt;/p&gt;
 */

#ifndef OAITarget_H
#define OAITarget_H

#include <QJsonObject>

#include "OAITarget_BatchParameters.h"
#include "OAITarget_DeadLetterConfig.h"
#include "OAITarget_EcsParameters.h"
#include "OAITarget_HttpParameters.h"
#include "OAITarget_InputTransformer.h"
#include "OAITarget_KinesisParameters.h"
#include "OAITarget_RedshiftDataParameters.h"
#include "OAITarget_RetryPolicy.h"
#include "OAITarget_RunCommandParameters.h"
#include "OAITarget_SageMakerPipelineParameters.h"
#include "OAITarget_SqsParameters.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITarget_InputTransformer;
class OAITarget_KinesisParameters;
class OAITarget_RunCommandParameters;
class OAITarget_EcsParameters;
class OAITarget_BatchParameters;
class OAITarget_SqsParameters;
class OAITarget_HttpParameters;
class OAITarget_RedshiftDataParameters;
class OAITarget_SageMakerPipelineParameters;
class OAITarget_DeadLetterConfig;
class OAITarget_RetryPolicy;

class OAITarget : public OAIObject {
public:
    OAITarget();
    OAITarget(QString json);
    ~OAITarget() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QString getRoleArn() const;
    void setRoleArn(const QString &role_arn);
    bool is_role_arn_Set() const;
    bool is_role_arn_Valid() const;

    QString getInput() const;
    void setInput(const QString &input);
    bool is_input_Set() const;
    bool is_input_Valid() const;

    QString getInputPath() const;
    void setInputPath(const QString &input_path);
    bool is_input_path_Set() const;
    bool is_input_path_Valid() const;

    OAITarget_InputTransformer getInputTransformer() const;
    void setInputTransformer(const OAITarget_InputTransformer &input_transformer);
    bool is_input_transformer_Set() const;
    bool is_input_transformer_Valid() const;

    OAITarget_KinesisParameters getKinesisParameters() const;
    void setKinesisParameters(const OAITarget_KinesisParameters &kinesis_parameters);
    bool is_kinesis_parameters_Set() const;
    bool is_kinesis_parameters_Valid() const;

    OAITarget_RunCommandParameters getRunCommandParameters() const;
    void setRunCommandParameters(const OAITarget_RunCommandParameters &run_command_parameters);
    bool is_run_command_parameters_Set() const;
    bool is_run_command_parameters_Valid() const;

    OAITarget_EcsParameters getEcsParameters() const;
    void setEcsParameters(const OAITarget_EcsParameters &ecs_parameters);
    bool is_ecs_parameters_Set() const;
    bool is_ecs_parameters_Valid() const;

    OAITarget_BatchParameters getBatchParameters() const;
    void setBatchParameters(const OAITarget_BatchParameters &batch_parameters);
    bool is_batch_parameters_Set() const;
    bool is_batch_parameters_Valid() const;

    OAITarget_SqsParameters getSqsParameters() const;
    void setSqsParameters(const OAITarget_SqsParameters &sqs_parameters);
    bool is_sqs_parameters_Set() const;
    bool is_sqs_parameters_Valid() const;

    OAITarget_HttpParameters getHttpParameters() const;
    void setHttpParameters(const OAITarget_HttpParameters &http_parameters);
    bool is_http_parameters_Set() const;
    bool is_http_parameters_Valid() const;

    OAITarget_RedshiftDataParameters getRedshiftDataParameters() const;
    void setRedshiftDataParameters(const OAITarget_RedshiftDataParameters &redshift_data_parameters);
    bool is_redshift_data_parameters_Set() const;
    bool is_redshift_data_parameters_Valid() const;

    OAITarget_SageMakerPipelineParameters getSageMakerPipelineParameters() const;
    void setSageMakerPipelineParameters(const OAITarget_SageMakerPipelineParameters &sage_maker_pipeline_parameters);
    bool is_sage_maker_pipeline_parameters_Set() const;
    bool is_sage_maker_pipeline_parameters_Valid() const;

    OAITarget_DeadLetterConfig getDeadLetterConfig() const;
    void setDeadLetterConfig(const OAITarget_DeadLetterConfig &dead_letter_config);
    bool is_dead_letter_config_Set() const;
    bool is_dead_letter_config_Valid() const;

    OAITarget_RetryPolicy getRetryPolicy() const;
    void setRetryPolicy(const OAITarget_RetryPolicy &retry_policy);
    bool is_retry_policy_Set() const;
    bool is_retry_policy_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QString m_role_arn;
    bool m_role_arn_isSet;
    bool m_role_arn_isValid;

    QString m_input;
    bool m_input_isSet;
    bool m_input_isValid;

    QString m_input_path;
    bool m_input_path_isSet;
    bool m_input_path_isValid;

    OAITarget_InputTransformer m_input_transformer;
    bool m_input_transformer_isSet;
    bool m_input_transformer_isValid;

    OAITarget_KinesisParameters m_kinesis_parameters;
    bool m_kinesis_parameters_isSet;
    bool m_kinesis_parameters_isValid;

    OAITarget_RunCommandParameters m_run_command_parameters;
    bool m_run_command_parameters_isSet;
    bool m_run_command_parameters_isValid;

    OAITarget_EcsParameters m_ecs_parameters;
    bool m_ecs_parameters_isSet;
    bool m_ecs_parameters_isValid;

    OAITarget_BatchParameters m_batch_parameters;
    bool m_batch_parameters_isSet;
    bool m_batch_parameters_isValid;

    OAITarget_SqsParameters m_sqs_parameters;
    bool m_sqs_parameters_isSet;
    bool m_sqs_parameters_isValid;

    OAITarget_HttpParameters m_http_parameters;
    bool m_http_parameters_isSet;
    bool m_http_parameters_isValid;

    OAITarget_RedshiftDataParameters m_redshift_data_parameters;
    bool m_redshift_data_parameters_isSet;
    bool m_redshift_data_parameters_isValid;

    OAITarget_SageMakerPipelineParameters m_sage_maker_pipeline_parameters;
    bool m_sage_maker_pipeline_parameters_isSet;
    bool m_sage_maker_pipeline_parameters_isValid;

    OAITarget_DeadLetterConfig m_dead_letter_config;
    bool m_dead_letter_config_isSet;
    bool m_dead_letter_config_isValid;

    OAITarget_RetryPolicy m_retry_policy;
    bool m_retry_policy_isSet;
    bool m_retry_policy_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITarget)

#endif // OAITarget_H
