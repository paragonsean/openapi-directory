/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateConnectionResponse.h
 *
 * 
 */

#ifndef OAIUpdateConnectionResponse_H
#define OAIUpdateConnectionResponse_H

#include <QJsonObject>

#include "OAIConnectionState.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUpdateConnectionResponse : public OAIObject {
public:
    OAIUpdateConnectionResponse();
    OAIUpdateConnectionResponse(QString json);
    ~OAIUpdateConnectionResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getConnectionArn() const;
    void setConnectionArn(const QString &connection_arn);
    bool is_connection_arn_Set() const;
    bool is_connection_arn_Valid() const;

    OAIConnectionState getConnectionState() const;
    void setConnectionState(const OAIConnectionState &connection_state);
    bool is_connection_state_Set() const;
    bool is_connection_state_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    QDateTime getLastModifiedTime() const;
    void setLastModifiedTime(const QDateTime &last_modified_time);
    bool is_last_modified_time_Set() const;
    bool is_last_modified_time_Valid() const;

    QDateTime getLastAuthorizedTime() const;
    void setLastAuthorizedTime(const QDateTime &last_authorized_time);
    bool is_last_authorized_time_Set() const;
    bool is_last_authorized_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_connection_arn;
    bool m_connection_arn_isSet;
    bool m_connection_arn_isValid;

    OAIConnectionState m_connection_state;
    bool m_connection_state_isSet;
    bool m_connection_state_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    QDateTime m_last_modified_time;
    bool m_last_modified_time_isSet;
    bool m_last_modified_time_isValid;

    QDateTime m_last_authorized_time;
    bool m_last_authorized_time_isSet;
    bool m_last_authorized_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateConnectionResponse)

#endif // OAIUpdateConnectionResponse_H
