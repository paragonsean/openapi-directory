/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateEndpointRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateEndpointRequest::OAIUpdateEndpointRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateEndpointRequest::OAIUpdateEndpointRequest() {
    this->initializeModel();
}

OAIUpdateEndpointRequest::~OAIUpdateEndpointRequest() {}

void OAIUpdateEndpointRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_routing_config_isSet = false;
    m_routing_config_isValid = false;

    m_replication_config_isSet = false;
    m_replication_config_isValid = false;

    m_event_buses_isSet = false;
    m_event_buses_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;
}

void OAIUpdateEndpointRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateEndpointRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_routing_config_isValid = ::OpenAPI::fromJsonValue(m_routing_config, json[QString("RoutingConfig")]);
    m_routing_config_isSet = !json[QString("RoutingConfig")].isNull() && m_routing_config_isValid;

    m_replication_config_isValid = ::OpenAPI::fromJsonValue(m_replication_config, json[QString("ReplicationConfig")]);
    m_replication_config_isSet = !json[QString("ReplicationConfig")].isNull() && m_replication_config_isValid;

    m_event_buses_isValid = ::OpenAPI::fromJsonValue(m_event_buses, json[QString("EventBuses")]);
    m_event_buses_isSet = !json[QString("EventBuses")].isNull() && m_event_buses_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;
}

QString OAIUpdateEndpointRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateEndpointRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_routing_config.isSet()) {
        obj.insert(QString("RoutingConfig"), ::OpenAPI::toJsonValue(m_routing_config));
    }
    if (m_replication_config.isSet()) {
        obj.insert(QString("ReplicationConfig"), ::OpenAPI::toJsonValue(m_replication_config));
    }
    if (m_event_buses.isSet()) {
        obj.insert(QString("EventBuses"), ::OpenAPI::toJsonValue(m_event_buses));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    return obj;
}

QString OAIUpdateEndpointRequest::getName() const {
    return m_name;
}
void OAIUpdateEndpointRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateEndpointRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateEndpointRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateEndpointRequest::getDescription() const {
    return m_description;
}
void OAIUpdateEndpointRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateEndpointRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateEndpointRequest::is_description_Valid() const{
    return m_description_isValid;
}

OAIUpdateEndpointRequest_RoutingConfig OAIUpdateEndpointRequest::getRoutingConfig() const {
    return m_routing_config;
}
void OAIUpdateEndpointRequest::setRoutingConfig(const OAIUpdateEndpointRequest_RoutingConfig &routing_config) {
    m_routing_config = routing_config;
    m_routing_config_isSet = true;
}

bool OAIUpdateEndpointRequest::is_routing_config_Set() const{
    return m_routing_config_isSet;
}

bool OAIUpdateEndpointRequest::is_routing_config_Valid() const{
    return m_routing_config_isValid;
}

OAICreateEndpointResponse_ReplicationConfig OAIUpdateEndpointRequest::getReplicationConfig() const {
    return m_replication_config;
}
void OAIUpdateEndpointRequest::setReplicationConfig(const OAICreateEndpointResponse_ReplicationConfig &replication_config) {
    m_replication_config = replication_config;
    m_replication_config_isSet = true;
}

bool OAIUpdateEndpointRequest::is_replication_config_Set() const{
    return m_replication_config_isSet;
}

bool OAIUpdateEndpointRequest::is_replication_config_Valid() const{
    return m_replication_config_isValid;
}

QList OAIUpdateEndpointRequest::getEventBuses() const {
    return m_event_buses;
}
void OAIUpdateEndpointRequest::setEventBuses(const QList &event_buses) {
    m_event_buses = event_buses;
    m_event_buses_isSet = true;
}

bool OAIUpdateEndpointRequest::is_event_buses_Set() const{
    return m_event_buses_isSet;
}

bool OAIUpdateEndpointRequest::is_event_buses_Valid() const{
    return m_event_buses_isValid;
}

QString OAIUpdateEndpointRequest::getRoleArn() const {
    return m_role_arn;
}
void OAIUpdateEndpointRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIUpdateEndpointRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIUpdateEndpointRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

bool OAIUpdateEndpointRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_buses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateEndpointRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
