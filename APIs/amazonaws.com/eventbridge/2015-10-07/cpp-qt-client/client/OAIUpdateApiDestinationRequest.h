/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateApiDestinationRequest.h
 *
 * 
 */

#ifndef OAIUpdateApiDestinationRequest_H
#define OAIUpdateApiDestinationRequest_H

#include <QJsonObject>

#include "OAIApiDestinationHttpMethod.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUpdateApiDestinationRequest : public OAIObject {
public:
    OAIUpdateApiDestinationRequest();
    OAIUpdateApiDestinationRequest(QString json);
    ~OAIUpdateApiDestinationRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getConnectionArn() const;
    void setConnectionArn(const QString &connection_arn);
    bool is_connection_arn_Set() const;
    bool is_connection_arn_Valid() const;

    QString getInvocationEndpoint() const;
    void setInvocationEndpoint(const QString &invocation_endpoint);
    bool is_invocation_endpoint_Set() const;
    bool is_invocation_endpoint_Valid() const;

    OAIApiDestinationHttpMethod getHttpMethod() const;
    void setHttpMethod(const OAIApiDestinationHttpMethod &http_method);
    bool is_http_method_Set() const;
    bool is_http_method_Valid() const;

    qint32 getInvocationRateLimitPerSecond() const;
    void setInvocationRateLimitPerSecond(const qint32 &invocation_rate_limit_per_second);
    bool is_invocation_rate_limit_per_second_Set() const;
    bool is_invocation_rate_limit_per_second_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_connection_arn;
    bool m_connection_arn_isSet;
    bool m_connection_arn_isValid;

    QString m_invocation_endpoint;
    bool m_invocation_endpoint_isSet;
    bool m_invocation_endpoint_isValid;

    OAIApiDestinationHttpMethod m_http_method;
    bool m_http_method_isSet;
    bool m_http_method_isValid;

    qint32 m_invocation_rate_limit_per_second;
    bool m_invocation_rate_limit_per_second_isSet;
    bool m_invocation_rate_limit_per_second_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateApiDestinationRequest)

#endif // OAIUpdateApiDestinationRequest_H
