/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutEventsRequestEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutEventsRequestEntry::OAIPutEventsRequestEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutEventsRequestEntry::OAIPutEventsRequestEntry() {
    this->initializeModel();
}

OAIPutEventsRequestEntry::~OAIPutEventsRequestEntry() {}

void OAIPutEventsRequestEntry::initializeModel() {

    m_time_isSet = false;
    m_time_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_detail_type_isSet = false;
    m_detail_type_isValid = false;

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_event_bus_name_isSet = false;
    m_event_bus_name_isValid = false;

    m_trace_header_isSet = false;
    m_trace_header_isValid = false;
}

void OAIPutEventsRequestEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutEventsRequestEntry::fromJsonObject(QJsonObject json) {

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("Time")]);
    m_time_isSet = !json[QString("Time")].isNull() && m_time_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("Resources")]);
    m_resources_isSet = !json[QString("Resources")].isNull() && m_resources_isValid;

    m_detail_type_isValid = ::OpenAPI::fromJsonValue(m_detail_type, json[QString("DetailType")]);
    m_detail_type_isSet = !json[QString("DetailType")].isNull() && m_detail_type_isValid;

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("Detail")]);
    m_detail_isSet = !json[QString("Detail")].isNull() && m_detail_isValid;

    m_event_bus_name_isValid = ::OpenAPI::fromJsonValue(m_event_bus_name, json[QString("EventBusName")]);
    m_event_bus_name_isSet = !json[QString("EventBusName")].isNull() && m_event_bus_name_isValid;

    m_trace_header_isValid = ::OpenAPI::fromJsonValue(m_trace_header, json[QString("TraceHeader")]);
    m_trace_header_isSet = !json[QString("TraceHeader")].isNull() && m_trace_header_isValid;
}

QString OAIPutEventsRequestEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutEventsRequestEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_time_isSet) {
        obj.insert(QString("Time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_source_isSet) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_resources.isSet()) {
        obj.insert(QString("Resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_detail_type_isSet) {
        obj.insert(QString("DetailType"), ::OpenAPI::toJsonValue(m_detail_type));
    }
    if (m_detail_isSet) {
        obj.insert(QString("Detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_event_bus_name_isSet) {
        obj.insert(QString("EventBusName"), ::OpenAPI::toJsonValue(m_event_bus_name));
    }
    if (m_trace_header_isSet) {
        obj.insert(QString("TraceHeader"), ::OpenAPI::toJsonValue(m_trace_header));
    }
    return obj;
}

QDateTime OAIPutEventsRequestEntry::getTime() const {
    return m_time;
}
void OAIPutEventsRequestEntry::setTime(const QDateTime &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIPutEventsRequestEntry::is_time_Set() const{
    return m_time_isSet;
}

bool OAIPutEventsRequestEntry::is_time_Valid() const{
    return m_time_isValid;
}

QString OAIPutEventsRequestEntry::getSource() const {
    return m_source;
}
void OAIPutEventsRequestEntry::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIPutEventsRequestEntry::is_source_Set() const{
    return m_source_isSet;
}

bool OAIPutEventsRequestEntry::is_source_Valid() const{
    return m_source_isValid;
}

QList OAIPutEventsRequestEntry::getResources() const {
    return m_resources;
}
void OAIPutEventsRequestEntry::setResources(const QList &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIPutEventsRequestEntry::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIPutEventsRequestEntry::is_resources_Valid() const{
    return m_resources_isValid;
}

QString OAIPutEventsRequestEntry::getDetailType() const {
    return m_detail_type;
}
void OAIPutEventsRequestEntry::setDetailType(const QString &detail_type) {
    m_detail_type = detail_type;
    m_detail_type_isSet = true;
}

bool OAIPutEventsRequestEntry::is_detail_type_Set() const{
    return m_detail_type_isSet;
}

bool OAIPutEventsRequestEntry::is_detail_type_Valid() const{
    return m_detail_type_isValid;
}

QString OAIPutEventsRequestEntry::getDetail() const {
    return m_detail;
}
void OAIPutEventsRequestEntry::setDetail(const QString &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIPutEventsRequestEntry::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIPutEventsRequestEntry::is_detail_Valid() const{
    return m_detail_isValid;
}

QString OAIPutEventsRequestEntry::getEventBusName() const {
    return m_event_bus_name;
}
void OAIPutEventsRequestEntry::setEventBusName(const QString &event_bus_name) {
    m_event_bus_name = event_bus_name;
    m_event_bus_name_isSet = true;
}

bool OAIPutEventsRequestEntry::is_event_bus_name_Set() const{
    return m_event_bus_name_isSet;
}

bool OAIPutEventsRequestEntry::is_event_bus_name_Valid() const{
    return m_event_bus_name_isValid;
}

QString OAIPutEventsRequestEntry::getTraceHeader() const {
    return m_trace_header;
}
void OAIPutEventsRequestEntry::setTraceHeader(const QString &trace_header) {
    m_trace_header = trace_header;
    m_trace_header_isSet = true;
}

bool OAIPutEventsRequestEntry::is_trace_header_Set() const{
    return m_trace_header_isSet;
}

bool OAIPutEventsRequestEntry::is_trace_header_Valid() const{
    return m_trace_header_isValid;
}

bool OAIPutEventsRequestEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_bus_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trace_header_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutEventsRequestEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
