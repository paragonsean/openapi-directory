/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITarget_BatchParameters.h
 *
 * 
 */

#ifndef OAITarget_BatchParameters_H
#define OAITarget_BatchParameters_H

#include <QJsonObject>

#include "OAIBatchParameters_ArrayProperties.h"
#include "OAIBatchParameters_RetryStrategy.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBatchParameters_ArrayProperties;
class OAIBatchParameters_RetryStrategy;

class OAITarget_BatchParameters : public OAIObject {
public:
    OAITarget_BatchParameters();
    OAITarget_BatchParameters(QString json);
    ~OAITarget_BatchParameters() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getJobDefinition() const;
    void setJobDefinition(const QString &job_definition);
    bool is_job_definition_Set() const;
    bool is_job_definition_Valid() const;

    QString getJobName() const;
    void setJobName(const QString &job_name);
    bool is_job_name_Set() const;
    bool is_job_name_Valid() const;

    OAIBatchParameters_ArrayProperties getArrayProperties() const;
    void setArrayProperties(const OAIBatchParameters_ArrayProperties &array_properties);
    bool is_array_properties_Set() const;
    bool is_array_properties_Valid() const;

    OAIBatchParameters_RetryStrategy getRetryStrategy() const;
    void setRetryStrategy(const OAIBatchParameters_RetryStrategy &retry_strategy);
    bool is_retry_strategy_Set() const;
    bool is_retry_strategy_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_job_definition;
    bool m_job_definition_isSet;
    bool m_job_definition_isValid;

    QString m_job_name;
    bool m_job_name_isSet;
    bool m_job_name_isValid;

    OAIBatchParameters_ArrayProperties m_array_properties;
    bool m_array_properties_isSet;
    bool m_array_properties_isValid;

    OAIBatchParameters_RetryStrategy m_retry_strategy;
    bool m_retry_strategy_isSet;
    bool m_retry_strategy_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITarget_BatchParameters)

#endif // OAITarget_BatchParameters_H
