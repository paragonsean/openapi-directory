/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutPermissionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutPermissionRequest::OAIPutPermissionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutPermissionRequest::OAIPutPermissionRequest() {
    this->initializeModel();
}

OAIPutPermissionRequest::~OAIPutPermissionRequest() {}

void OAIPutPermissionRequest::initializeModel() {

    m_event_bus_name_isSet = false;
    m_event_bus_name_isValid = false;

    m_action_isSet = false;
    m_action_isValid = false;

    m_principal_isSet = false;
    m_principal_isValid = false;

    m_statement_id_isSet = false;
    m_statement_id_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;
}

void OAIPutPermissionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutPermissionRequest::fromJsonObject(QJsonObject json) {

    m_event_bus_name_isValid = ::OpenAPI::fromJsonValue(m_event_bus_name, json[QString("EventBusName")]);
    m_event_bus_name_isSet = !json[QString("EventBusName")].isNull() && m_event_bus_name_isValid;

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("Action")]);
    m_action_isSet = !json[QString("Action")].isNull() && m_action_isValid;

    m_principal_isValid = ::OpenAPI::fromJsonValue(m_principal, json[QString("Principal")]);
    m_principal_isSet = !json[QString("Principal")].isNull() && m_principal_isValid;

    m_statement_id_isValid = ::OpenAPI::fromJsonValue(m_statement_id, json[QString("StatementId")]);
    m_statement_id_isSet = !json[QString("StatementId")].isNull() && m_statement_id_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("Condition")]);
    m_condition_isSet = !json[QString("Condition")].isNull() && m_condition_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("Policy")]);
    m_policy_isSet = !json[QString("Policy")].isNull() && m_policy_isValid;
}

QString OAIPutPermissionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutPermissionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_event_bus_name_isSet) {
        obj.insert(QString("EventBusName"), ::OpenAPI::toJsonValue(m_event_bus_name));
    }
    if (m_action_isSet) {
        obj.insert(QString("Action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_principal_isSet) {
        obj.insert(QString("Principal"), ::OpenAPI::toJsonValue(m_principal));
    }
    if (m_statement_id_isSet) {
        obj.insert(QString("StatementId"), ::OpenAPI::toJsonValue(m_statement_id));
    }
    if (m_condition.isSet()) {
        obj.insert(QString("Condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_policy_isSet) {
        obj.insert(QString("Policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    return obj;
}

QString OAIPutPermissionRequest::getEventBusName() const {
    return m_event_bus_name;
}
void OAIPutPermissionRequest::setEventBusName(const QString &event_bus_name) {
    m_event_bus_name = event_bus_name;
    m_event_bus_name_isSet = true;
}

bool OAIPutPermissionRequest::is_event_bus_name_Set() const{
    return m_event_bus_name_isSet;
}

bool OAIPutPermissionRequest::is_event_bus_name_Valid() const{
    return m_event_bus_name_isValid;
}

QString OAIPutPermissionRequest::getAction() const {
    return m_action;
}
void OAIPutPermissionRequest::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIPutPermissionRequest::is_action_Set() const{
    return m_action_isSet;
}

bool OAIPutPermissionRequest::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIPutPermissionRequest::getPrincipal() const {
    return m_principal;
}
void OAIPutPermissionRequest::setPrincipal(const QString &principal) {
    m_principal = principal;
    m_principal_isSet = true;
}

bool OAIPutPermissionRequest::is_principal_Set() const{
    return m_principal_isSet;
}

bool OAIPutPermissionRequest::is_principal_Valid() const{
    return m_principal_isValid;
}

QString OAIPutPermissionRequest::getStatementId() const {
    return m_statement_id;
}
void OAIPutPermissionRequest::setStatementId(const QString &statement_id) {
    m_statement_id = statement_id;
    m_statement_id_isSet = true;
}

bool OAIPutPermissionRequest::is_statement_id_Set() const{
    return m_statement_id_isSet;
}

bool OAIPutPermissionRequest::is_statement_id_Valid() const{
    return m_statement_id_isValid;
}

OAIPutPermissionRequest_Condition OAIPutPermissionRequest::getCondition() const {
    return m_condition;
}
void OAIPutPermissionRequest::setCondition(const OAIPutPermissionRequest_Condition &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIPutPermissionRequest::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIPutPermissionRequest::is_condition_Valid() const{
    return m_condition_isValid;
}

QString OAIPutPermissionRequest::getPolicy() const {
    return m_policy;
}
void OAIPutPermissionRequest::setPolicy(const QString &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIPutPermissionRequest::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIPutPermissionRequest::is_policy_Valid() const{
    return m_policy_isValid;
}

bool OAIPutPermissionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_bus_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statement_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutPermissionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
