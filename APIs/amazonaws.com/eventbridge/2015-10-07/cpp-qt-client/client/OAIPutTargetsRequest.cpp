/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutTargetsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutTargetsRequest::OAIPutTargetsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutTargetsRequest::OAIPutTargetsRequest() {
    this->initializeModel();
}

OAIPutTargetsRequest::~OAIPutTargetsRequest() {}

void OAIPutTargetsRequest::initializeModel() {

    m_rule_isSet = false;
    m_rule_isValid = false;

    m_event_bus_name_isSet = false;
    m_event_bus_name_isValid = false;

    m_targets_isSet = false;
    m_targets_isValid = false;
}

void OAIPutTargetsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutTargetsRequest::fromJsonObject(QJsonObject json) {

    m_rule_isValid = ::OpenAPI::fromJsonValue(m_rule, json[QString("Rule")]);
    m_rule_isSet = !json[QString("Rule")].isNull() && m_rule_isValid;

    m_event_bus_name_isValid = ::OpenAPI::fromJsonValue(m_event_bus_name, json[QString("EventBusName")]);
    m_event_bus_name_isSet = !json[QString("EventBusName")].isNull() && m_event_bus_name_isValid;

    m_targets_isValid = ::OpenAPI::fromJsonValue(m_targets, json[QString("Targets")]);
    m_targets_isSet = !json[QString("Targets")].isNull() && m_targets_isValid;
}

QString OAIPutTargetsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutTargetsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_rule_isSet) {
        obj.insert(QString("Rule"), ::OpenAPI::toJsonValue(m_rule));
    }
    if (m_event_bus_name_isSet) {
        obj.insert(QString("EventBusName"), ::OpenAPI::toJsonValue(m_event_bus_name));
    }
    if (m_targets.isSet()) {
        obj.insert(QString("Targets"), ::OpenAPI::toJsonValue(m_targets));
    }
    return obj;
}

QString OAIPutTargetsRequest::getRule() const {
    return m_rule;
}
void OAIPutTargetsRequest::setRule(const QString &rule) {
    m_rule = rule;
    m_rule_isSet = true;
}

bool OAIPutTargetsRequest::is_rule_Set() const{
    return m_rule_isSet;
}

bool OAIPutTargetsRequest::is_rule_Valid() const{
    return m_rule_isValid;
}

QString OAIPutTargetsRequest::getEventBusName() const {
    return m_event_bus_name;
}
void OAIPutTargetsRequest::setEventBusName(const QString &event_bus_name) {
    m_event_bus_name = event_bus_name;
    m_event_bus_name_isSet = true;
}

bool OAIPutTargetsRequest::is_event_bus_name_Set() const{
    return m_event_bus_name_isSet;
}

bool OAIPutTargetsRequest::is_event_bus_name_Valid() const{
    return m_event_bus_name_isValid;
}

QList OAIPutTargetsRequest::getTargets() const {
    return m_targets;
}
void OAIPutTargetsRequest::setTargets(const QList &targets) {
    m_targets = targets;
    m_targets_isSet = true;
}

bool OAIPutTargetsRequest::is_targets_Set() const{
    return m_targets_isSet;
}

bool OAIPutTargetsRequest::is_targets_Valid() const{
    return m_targets_isValid;
}

bool OAIPutTargetsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_bus_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutTargetsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rule_isValid && m_targets_isValid && true;
}

} // namespace OpenAPI
