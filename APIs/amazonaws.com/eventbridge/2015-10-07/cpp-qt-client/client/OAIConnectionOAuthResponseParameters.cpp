/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectionOAuthResponseParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectionOAuthResponseParameters::OAIConnectionOAuthResponseParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectionOAuthResponseParameters::OAIConnectionOAuthResponseParameters() {
    this->initializeModel();
}

OAIConnectionOAuthResponseParameters::~OAIConnectionOAuthResponseParameters() {}

void OAIConnectionOAuthResponseParameters::initializeModel() {

    m_client_parameters_isSet = false;
    m_client_parameters_isValid = false;

    m_authorization_endpoint_isSet = false;
    m_authorization_endpoint_isValid = false;

    m_http_method_isSet = false;
    m_http_method_isValid = false;

    m_o_auth_http_parameters_isSet = false;
    m_o_auth_http_parameters_isValid = false;
}

void OAIConnectionOAuthResponseParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectionOAuthResponseParameters::fromJsonObject(QJsonObject json) {

    m_client_parameters_isValid = ::OpenAPI::fromJsonValue(m_client_parameters, json[QString("ClientParameters")]);
    m_client_parameters_isSet = !json[QString("ClientParameters")].isNull() && m_client_parameters_isValid;

    m_authorization_endpoint_isValid = ::OpenAPI::fromJsonValue(m_authorization_endpoint, json[QString("AuthorizationEndpoint")]);
    m_authorization_endpoint_isSet = !json[QString("AuthorizationEndpoint")].isNull() && m_authorization_endpoint_isValid;

    m_http_method_isValid = ::OpenAPI::fromJsonValue(m_http_method, json[QString("HttpMethod")]);
    m_http_method_isSet = !json[QString("HttpMethod")].isNull() && m_http_method_isValid;

    m_o_auth_http_parameters_isValid = ::OpenAPI::fromJsonValue(m_o_auth_http_parameters, json[QString("OAuthHttpParameters")]);
    m_o_auth_http_parameters_isSet = !json[QString("OAuthHttpParameters")].isNull() && m_o_auth_http_parameters_isValid;
}

QString OAIConnectionOAuthResponseParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectionOAuthResponseParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_client_parameters.isSet()) {
        obj.insert(QString("ClientParameters"), ::OpenAPI::toJsonValue(m_client_parameters));
    }
    if (m_authorization_endpoint_isSet) {
        obj.insert(QString("AuthorizationEndpoint"), ::OpenAPI::toJsonValue(m_authorization_endpoint));
    }
    if (m_http_method.isSet()) {
        obj.insert(QString("HttpMethod"), ::OpenAPI::toJsonValue(m_http_method));
    }
    if (m_o_auth_http_parameters.isSet()) {
        obj.insert(QString("OAuthHttpParameters"), ::OpenAPI::toJsonValue(m_o_auth_http_parameters));
    }
    return obj;
}

OAIConnectionOAuthResponseParameters_ClientParameters OAIConnectionOAuthResponseParameters::getClientParameters() const {
    return m_client_parameters;
}
void OAIConnectionOAuthResponseParameters::setClientParameters(const OAIConnectionOAuthResponseParameters_ClientParameters &client_parameters) {
    m_client_parameters = client_parameters;
    m_client_parameters_isSet = true;
}

bool OAIConnectionOAuthResponseParameters::is_client_parameters_Set() const{
    return m_client_parameters_isSet;
}

bool OAIConnectionOAuthResponseParameters::is_client_parameters_Valid() const{
    return m_client_parameters_isValid;
}

QString OAIConnectionOAuthResponseParameters::getAuthorizationEndpoint() const {
    return m_authorization_endpoint;
}
void OAIConnectionOAuthResponseParameters::setAuthorizationEndpoint(const QString &authorization_endpoint) {
    m_authorization_endpoint = authorization_endpoint;
    m_authorization_endpoint_isSet = true;
}

bool OAIConnectionOAuthResponseParameters::is_authorization_endpoint_Set() const{
    return m_authorization_endpoint_isSet;
}

bool OAIConnectionOAuthResponseParameters::is_authorization_endpoint_Valid() const{
    return m_authorization_endpoint_isValid;
}

OAIConnectionOAuthHttpMethod OAIConnectionOAuthResponseParameters::getHttpMethod() const {
    return m_http_method;
}
void OAIConnectionOAuthResponseParameters::setHttpMethod(const OAIConnectionOAuthHttpMethod &http_method) {
    m_http_method = http_method;
    m_http_method_isSet = true;
}

bool OAIConnectionOAuthResponseParameters::is_http_method_Set() const{
    return m_http_method_isSet;
}

bool OAIConnectionOAuthResponseParameters::is_http_method_Valid() const{
    return m_http_method_isValid;
}

OAIConnectionOAuthResponseParameters_OAuthHttpParameters OAIConnectionOAuthResponseParameters::getOAuthHttpParameters() const {
    return m_o_auth_http_parameters;
}
void OAIConnectionOAuthResponseParameters::setOAuthHttpParameters(const OAIConnectionOAuthResponseParameters_OAuthHttpParameters &o_auth_http_parameters) {
    m_o_auth_http_parameters = o_auth_http_parameters;
    m_o_auth_http_parameters_isSet = true;
}

bool OAIConnectionOAuthResponseParameters::is_o_auth_http_parameters_Set() const{
    return m_o_auth_http_parameters_isSet;
}

bool OAIConnectionOAuthResponseParameters::is_o_auth_http_parameters_Valid() const{
    return m_o_auth_http_parameters_isValid;
}

bool OAIConnectionOAuthResponseParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_o_auth_http_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectionOAuthResponseParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
