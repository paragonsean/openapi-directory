/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeConnectionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeConnectionResponse::OAIDescribeConnectionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeConnectionResponse::OAIDescribeConnectionResponse() {
    this->initializeModel();
}

OAIDescribeConnectionResponse::~OAIDescribeConnectionResponse() {}

void OAIDescribeConnectionResponse::initializeModel() {

    m_connection_arn_isSet = false;
    m_connection_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_connection_state_isSet = false;
    m_connection_state_isValid = false;

    m_state_reason_isSet = false;
    m_state_reason_isValid = false;

    m_authorization_type_isSet = false;
    m_authorization_type_isValid = false;

    m_secret_arn_isSet = false;
    m_secret_arn_isValid = false;

    m_auth_parameters_isSet = false;
    m_auth_parameters_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_last_authorized_time_isSet = false;
    m_last_authorized_time_isValid = false;
}

void OAIDescribeConnectionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeConnectionResponse::fromJsonObject(QJsonObject json) {

    m_connection_arn_isValid = ::OpenAPI::fromJsonValue(m_connection_arn, json[QString("ConnectionArn")]);
    m_connection_arn_isSet = !json[QString("ConnectionArn")].isNull() && m_connection_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_connection_state_isValid = ::OpenAPI::fromJsonValue(m_connection_state, json[QString("ConnectionState")]);
    m_connection_state_isSet = !json[QString("ConnectionState")].isNull() && m_connection_state_isValid;

    m_state_reason_isValid = ::OpenAPI::fromJsonValue(m_state_reason, json[QString("StateReason")]);
    m_state_reason_isSet = !json[QString("StateReason")].isNull() && m_state_reason_isValid;

    m_authorization_type_isValid = ::OpenAPI::fromJsonValue(m_authorization_type, json[QString("AuthorizationType")]);
    m_authorization_type_isSet = !json[QString("AuthorizationType")].isNull() && m_authorization_type_isValid;

    m_secret_arn_isValid = ::OpenAPI::fromJsonValue(m_secret_arn, json[QString("SecretArn")]);
    m_secret_arn_isSet = !json[QString("SecretArn")].isNull() && m_secret_arn_isValid;

    m_auth_parameters_isValid = ::OpenAPI::fromJsonValue(m_auth_parameters, json[QString("AuthParameters")]);
    m_auth_parameters_isSet = !json[QString("AuthParameters")].isNull() && m_auth_parameters_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_last_authorized_time_isValid = ::OpenAPI::fromJsonValue(m_last_authorized_time, json[QString("LastAuthorizedTime")]);
    m_last_authorized_time_isSet = !json[QString("LastAuthorizedTime")].isNull() && m_last_authorized_time_isValid;
}

QString OAIDescribeConnectionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeConnectionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_arn_isSet) {
        obj.insert(QString("ConnectionArn"), ::OpenAPI::toJsonValue(m_connection_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_connection_state.isSet()) {
        obj.insert(QString("ConnectionState"), ::OpenAPI::toJsonValue(m_connection_state));
    }
    if (m_state_reason_isSet) {
        obj.insert(QString("StateReason"), ::OpenAPI::toJsonValue(m_state_reason));
    }
    if (m_authorization_type.isSet()) {
        obj.insert(QString("AuthorizationType"), ::OpenAPI::toJsonValue(m_authorization_type));
    }
    if (m_secret_arn_isSet) {
        obj.insert(QString("SecretArn"), ::OpenAPI::toJsonValue(m_secret_arn));
    }
    if (m_auth_parameters.isSet()) {
        obj.insert(QString("AuthParameters"), ::OpenAPI::toJsonValue(m_auth_parameters));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_last_authorized_time_isSet) {
        obj.insert(QString("LastAuthorizedTime"), ::OpenAPI::toJsonValue(m_last_authorized_time));
    }
    return obj;
}

QString OAIDescribeConnectionResponse::getConnectionArn() const {
    return m_connection_arn;
}
void OAIDescribeConnectionResponse::setConnectionArn(const QString &connection_arn) {
    m_connection_arn = connection_arn;
    m_connection_arn_isSet = true;
}

bool OAIDescribeConnectionResponse::is_connection_arn_Set() const{
    return m_connection_arn_isSet;
}

bool OAIDescribeConnectionResponse::is_connection_arn_Valid() const{
    return m_connection_arn_isValid;
}

QString OAIDescribeConnectionResponse::getName() const {
    return m_name;
}
void OAIDescribeConnectionResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeConnectionResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeConnectionResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDescribeConnectionResponse::getDescription() const {
    return m_description;
}
void OAIDescribeConnectionResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribeConnectionResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribeConnectionResponse::is_description_Valid() const{
    return m_description_isValid;
}

OAIConnectionState OAIDescribeConnectionResponse::getConnectionState() const {
    return m_connection_state;
}
void OAIDescribeConnectionResponse::setConnectionState(const OAIConnectionState &connection_state) {
    m_connection_state = connection_state;
    m_connection_state_isSet = true;
}

bool OAIDescribeConnectionResponse::is_connection_state_Set() const{
    return m_connection_state_isSet;
}

bool OAIDescribeConnectionResponse::is_connection_state_Valid() const{
    return m_connection_state_isValid;
}

QString OAIDescribeConnectionResponse::getStateReason() const {
    return m_state_reason;
}
void OAIDescribeConnectionResponse::setStateReason(const QString &state_reason) {
    m_state_reason = state_reason;
    m_state_reason_isSet = true;
}

bool OAIDescribeConnectionResponse::is_state_reason_Set() const{
    return m_state_reason_isSet;
}

bool OAIDescribeConnectionResponse::is_state_reason_Valid() const{
    return m_state_reason_isValid;
}

OAIConnectionAuthorizationType OAIDescribeConnectionResponse::getAuthorizationType() const {
    return m_authorization_type;
}
void OAIDescribeConnectionResponse::setAuthorizationType(const OAIConnectionAuthorizationType &authorization_type) {
    m_authorization_type = authorization_type;
    m_authorization_type_isSet = true;
}

bool OAIDescribeConnectionResponse::is_authorization_type_Set() const{
    return m_authorization_type_isSet;
}

bool OAIDescribeConnectionResponse::is_authorization_type_Valid() const{
    return m_authorization_type_isValid;
}

QString OAIDescribeConnectionResponse::getSecretArn() const {
    return m_secret_arn;
}
void OAIDescribeConnectionResponse::setSecretArn(const QString &secret_arn) {
    m_secret_arn = secret_arn;
    m_secret_arn_isSet = true;
}

bool OAIDescribeConnectionResponse::is_secret_arn_Set() const{
    return m_secret_arn_isSet;
}

bool OAIDescribeConnectionResponse::is_secret_arn_Valid() const{
    return m_secret_arn_isValid;
}

OAIDescribeConnectionResponse_AuthParameters OAIDescribeConnectionResponse::getAuthParameters() const {
    return m_auth_parameters;
}
void OAIDescribeConnectionResponse::setAuthParameters(const OAIDescribeConnectionResponse_AuthParameters &auth_parameters) {
    m_auth_parameters = auth_parameters;
    m_auth_parameters_isSet = true;
}

bool OAIDescribeConnectionResponse::is_auth_parameters_Set() const{
    return m_auth_parameters_isSet;
}

bool OAIDescribeConnectionResponse::is_auth_parameters_Valid() const{
    return m_auth_parameters_isValid;
}

QDateTime OAIDescribeConnectionResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeConnectionResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeConnectionResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeConnectionResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIDescribeConnectionResponse::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIDescribeConnectionResponse::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIDescribeConnectionResponse::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIDescribeConnectionResponse::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QDateTime OAIDescribeConnectionResponse::getLastAuthorizedTime() const {
    return m_last_authorized_time;
}
void OAIDescribeConnectionResponse::setLastAuthorizedTime(const QDateTime &last_authorized_time) {
    m_last_authorized_time = last_authorized_time;
    m_last_authorized_time_isSet = true;
}

bool OAIDescribeConnectionResponse::is_last_authorized_time_Set() const{
    return m_last_authorized_time_isSet;
}

bool OAIDescribeConnectionResponse::is_last_authorized_time_Valid() const{
    return m_last_authorized_time_isValid;
}

bool OAIDescribeConnectionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_authorized_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeConnectionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
