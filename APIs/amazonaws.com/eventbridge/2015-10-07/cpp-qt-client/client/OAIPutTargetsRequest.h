/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPutTargetsRequest.h
 *
 * 
 */

#ifndef OAIPutTargetsRequest_H
#define OAIPutTargetsRequest_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPutTargetsRequest : public OAIObject {
public:
    OAIPutTargetsRequest();
    OAIPutTargetsRequest(QString json);
    ~OAIPutTargetsRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getRule() const;
    void setRule(const QString &rule);
    bool is_rule_Set() const;
    bool is_rule_Valid() const;

    QString getEventBusName() const;
    void setEventBusName(const QString &event_bus_name);
    bool is_event_bus_name_Set() const;
    bool is_event_bus_name_Valid() const;

    QList getTargets() const;
    void setTargets(const QList &targets);
    bool is_targets_Set() const;
    bool is_targets_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_rule;
    bool m_rule_isSet;
    bool m_rule_isValid;

    QString m_event_bus_name;
    bool m_event_bus_name_isSet;
    bool m_event_bus_name_isValid;

    QList m_targets;
    bool m_targets_isSet;
    bool m_targets_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPutTargetsRequest)

#endif // OAIPutTargetsRequest_H
