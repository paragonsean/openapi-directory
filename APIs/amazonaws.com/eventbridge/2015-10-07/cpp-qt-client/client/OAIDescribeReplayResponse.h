/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeReplayResponse.h
 *
 * 
 */

#ifndef OAIDescribeReplayResponse_H
#define OAIDescribeReplayResponse_H

#include <QJsonObject>

#include "OAIDescribeReplayResponse_Destination.h"
#include "OAIReplayState.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDescribeReplayResponse_Destination;

class OAIDescribeReplayResponse : public OAIObject {
public:
    OAIDescribeReplayResponse();
    OAIDescribeReplayResponse(QString json);
    ~OAIDescribeReplayResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getReplayName() const;
    void setReplayName(const QString &replay_name);
    bool is_replay_name_Set() const;
    bool is_replay_name_Valid() const;

    QString getReplayArn() const;
    void setReplayArn(const QString &replay_arn);
    bool is_replay_arn_Set() const;
    bool is_replay_arn_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIReplayState getState() const;
    void setState(const OAIReplayState &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getStateReason() const;
    void setStateReason(const QString &state_reason);
    bool is_state_reason_Set() const;
    bool is_state_reason_Valid() const;

    QString getEventSourceArn() const;
    void setEventSourceArn(const QString &event_source_arn);
    bool is_event_source_arn_Set() const;
    bool is_event_source_arn_Valid() const;

    OAIDescribeReplayResponse_Destination getDestination() const;
    void setDestination(const OAIDescribeReplayResponse_Destination &destination);
    bool is_destination_Set() const;
    bool is_destination_Valid() const;

    QDateTime getEventStartTime() const;
    void setEventStartTime(const QDateTime &event_start_time);
    bool is_event_start_time_Set() const;
    bool is_event_start_time_Valid() const;

    QDateTime getEventEndTime() const;
    void setEventEndTime(const QDateTime &event_end_time);
    bool is_event_end_time_Set() const;
    bool is_event_end_time_Valid() const;

    QDateTime getEventLastReplayedTime() const;
    void setEventLastReplayedTime(const QDateTime &event_last_replayed_time);
    bool is_event_last_replayed_time_Set() const;
    bool is_event_last_replayed_time_Valid() const;

    QDateTime getReplayStartTime() const;
    void setReplayStartTime(const QDateTime &replay_start_time);
    bool is_replay_start_time_Set() const;
    bool is_replay_start_time_Valid() const;

    QDateTime getReplayEndTime() const;
    void setReplayEndTime(const QDateTime &replay_end_time);
    bool is_replay_end_time_Set() const;
    bool is_replay_end_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_replay_name;
    bool m_replay_name_isSet;
    bool m_replay_name_isValid;

    QString m_replay_arn;
    bool m_replay_arn_isSet;
    bool m_replay_arn_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIReplayState m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_state_reason;
    bool m_state_reason_isSet;
    bool m_state_reason_isValid;

    QString m_event_source_arn;
    bool m_event_source_arn_isSet;
    bool m_event_source_arn_isValid;

    OAIDescribeReplayResponse_Destination m_destination;
    bool m_destination_isSet;
    bool m_destination_isValid;

    QDateTime m_event_start_time;
    bool m_event_start_time_isSet;
    bool m_event_start_time_isValid;

    QDateTime m_event_end_time;
    bool m_event_end_time_isSet;
    bool m_event_end_time_isValid;

    QDateTime m_event_last_replayed_time;
    bool m_event_last_replayed_time_isSet;
    bool m_event_last_replayed_time_isValid;

    QDateTime m_replay_start_time;
    bool m_replay_start_time_isSet;
    bool m_replay_start_time_isValid;

    QDateTime m_replay_end_time;
    bool m_replay_end_time_isSet;
    bool m_replay_end_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeReplayResponse)

#endif // OAIDescribeReplayResponse_H
