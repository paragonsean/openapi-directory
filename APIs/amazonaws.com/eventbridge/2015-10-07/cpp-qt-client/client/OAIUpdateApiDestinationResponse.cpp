/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateApiDestinationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateApiDestinationResponse::OAIUpdateApiDestinationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateApiDestinationResponse::OAIUpdateApiDestinationResponse() {
    this->initializeModel();
}

OAIUpdateApiDestinationResponse::~OAIUpdateApiDestinationResponse() {}

void OAIUpdateApiDestinationResponse::initializeModel() {

    m_api_destination_arn_isSet = false;
    m_api_destination_arn_isValid = false;

    m_api_destination_state_isSet = false;
    m_api_destination_state_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;
}

void OAIUpdateApiDestinationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateApiDestinationResponse::fromJsonObject(QJsonObject json) {

    m_api_destination_arn_isValid = ::OpenAPI::fromJsonValue(m_api_destination_arn, json[QString("ApiDestinationArn")]);
    m_api_destination_arn_isSet = !json[QString("ApiDestinationArn")].isNull() && m_api_destination_arn_isValid;

    m_api_destination_state_isValid = ::OpenAPI::fromJsonValue(m_api_destination_state, json[QString("ApiDestinationState")]);
    m_api_destination_state_isSet = !json[QString("ApiDestinationState")].isNull() && m_api_destination_state_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;
}

QString OAIUpdateApiDestinationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateApiDestinationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_api_destination_arn_isSet) {
        obj.insert(QString("ApiDestinationArn"), ::OpenAPI::toJsonValue(m_api_destination_arn));
    }
    if (m_api_destination_state.isSet()) {
        obj.insert(QString("ApiDestinationState"), ::OpenAPI::toJsonValue(m_api_destination_state));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    return obj;
}

QString OAIUpdateApiDestinationResponse::getApiDestinationArn() const {
    return m_api_destination_arn;
}
void OAIUpdateApiDestinationResponse::setApiDestinationArn(const QString &api_destination_arn) {
    m_api_destination_arn = api_destination_arn;
    m_api_destination_arn_isSet = true;
}

bool OAIUpdateApiDestinationResponse::is_api_destination_arn_Set() const{
    return m_api_destination_arn_isSet;
}

bool OAIUpdateApiDestinationResponse::is_api_destination_arn_Valid() const{
    return m_api_destination_arn_isValid;
}

OAIApiDestinationState OAIUpdateApiDestinationResponse::getApiDestinationState() const {
    return m_api_destination_state;
}
void OAIUpdateApiDestinationResponse::setApiDestinationState(const OAIApiDestinationState &api_destination_state) {
    m_api_destination_state = api_destination_state;
    m_api_destination_state_isSet = true;
}

bool OAIUpdateApiDestinationResponse::is_api_destination_state_Set() const{
    return m_api_destination_state_isSet;
}

bool OAIUpdateApiDestinationResponse::is_api_destination_state_Valid() const{
    return m_api_destination_state_isValid;
}

QDateTime OAIUpdateApiDestinationResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIUpdateApiDestinationResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIUpdateApiDestinationResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIUpdateApiDestinationResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIUpdateApiDestinationResponse::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIUpdateApiDestinationResponse::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIUpdateApiDestinationResponse::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIUpdateApiDestinationResponse::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

bool OAIUpdateApiDestinationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_destination_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_destination_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateApiDestinationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
