/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkConfiguration_awsvpcConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkConfiguration_awsvpcConfiguration::OAINetworkConfiguration_awsvpcConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkConfiguration_awsvpcConfiguration::OAINetworkConfiguration_awsvpcConfiguration() {
    this->initializeModel();
}

OAINetworkConfiguration_awsvpcConfiguration::~OAINetworkConfiguration_awsvpcConfiguration() {}

void OAINetworkConfiguration_awsvpcConfiguration::initializeModel() {

    m_subnets_isSet = false;
    m_subnets_isValid = false;

    m_security_groups_isSet = false;
    m_security_groups_isValid = false;

    m_assign_public_ip_isSet = false;
    m_assign_public_ip_isValid = false;
}

void OAINetworkConfiguration_awsvpcConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkConfiguration_awsvpcConfiguration::fromJsonObject(QJsonObject json) {

    m_subnets_isValid = ::OpenAPI::fromJsonValue(m_subnets, json[QString("Subnets")]);
    m_subnets_isSet = !json[QString("Subnets")].isNull() && m_subnets_isValid;

    m_security_groups_isValid = ::OpenAPI::fromJsonValue(m_security_groups, json[QString("SecurityGroups")]);
    m_security_groups_isSet = !json[QString("SecurityGroups")].isNull() && m_security_groups_isValid;

    m_assign_public_ip_isValid = ::OpenAPI::fromJsonValue(m_assign_public_ip, json[QString("AssignPublicIp")]);
    m_assign_public_ip_isSet = !json[QString("AssignPublicIp")].isNull() && m_assign_public_ip_isValid;
}

QString OAINetworkConfiguration_awsvpcConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkConfiguration_awsvpcConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_subnets.isSet()) {
        obj.insert(QString("Subnets"), ::OpenAPI::toJsonValue(m_subnets));
    }
    if (m_security_groups.isSet()) {
        obj.insert(QString("SecurityGroups"), ::OpenAPI::toJsonValue(m_security_groups));
    }
    if (m_assign_public_ip.isSet()) {
        obj.insert(QString("AssignPublicIp"), ::OpenAPI::toJsonValue(m_assign_public_ip));
    }
    return obj;
}

QList OAINetworkConfiguration_awsvpcConfiguration::getSubnets() const {
    return m_subnets;
}
void OAINetworkConfiguration_awsvpcConfiguration::setSubnets(const QList &subnets) {
    m_subnets = subnets;
    m_subnets_isSet = true;
}

bool OAINetworkConfiguration_awsvpcConfiguration::is_subnets_Set() const{
    return m_subnets_isSet;
}

bool OAINetworkConfiguration_awsvpcConfiguration::is_subnets_Valid() const{
    return m_subnets_isValid;
}

QList OAINetworkConfiguration_awsvpcConfiguration::getSecurityGroups() const {
    return m_security_groups;
}
void OAINetworkConfiguration_awsvpcConfiguration::setSecurityGroups(const QList &security_groups) {
    m_security_groups = security_groups;
    m_security_groups_isSet = true;
}

bool OAINetworkConfiguration_awsvpcConfiguration::is_security_groups_Set() const{
    return m_security_groups_isSet;
}

bool OAINetworkConfiguration_awsvpcConfiguration::is_security_groups_Valid() const{
    return m_security_groups_isValid;
}

OAIAssignPublicIp OAINetworkConfiguration_awsvpcConfiguration::getAssignPublicIp() const {
    return m_assign_public_ip;
}
void OAINetworkConfiguration_awsvpcConfiguration::setAssignPublicIp(const OAIAssignPublicIp &assign_public_ip) {
    m_assign_public_ip = assign_public_ip;
    m_assign_public_ip_isSet = true;
}

bool OAINetworkConfiguration_awsvpcConfiguration::is_assign_public_ip_Set() const{
    return m_assign_public_ip_isSet;
}

bool OAINetworkConfiguration_awsvpcConfiguration::is_assign_public_ip_Valid() const{
    return m_assign_public_ip_isValid;
}

bool OAINetworkConfiguration_awsvpcConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_subnets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_assign_public_ip.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkConfiguration_awsvpcConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_subnets_isValid && true;
}

} // namespace OpenAPI
