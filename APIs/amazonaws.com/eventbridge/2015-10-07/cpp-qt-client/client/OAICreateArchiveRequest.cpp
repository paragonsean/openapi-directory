/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateArchiveRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateArchiveRequest::OAICreateArchiveRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateArchiveRequest::OAICreateArchiveRequest() {
    this->initializeModel();
}

OAICreateArchiveRequest::~OAICreateArchiveRequest() {}

void OAICreateArchiveRequest::initializeModel() {

    m_archive_name_isSet = false;
    m_archive_name_isValid = false;

    m_event_source_arn_isSet = false;
    m_event_source_arn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_event_pattern_isSet = false;
    m_event_pattern_isValid = false;

    m_retention_days_isSet = false;
    m_retention_days_isValid = false;
}

void OAICreateArchiveRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateArchiveRequest::fromJsonObject(QJsonObject json) {

    m_archive_name_isValid = ::OpenAPI::fromJsonValue(m_archive_name, json[QString("ArchiveName")]);
    m_archive_name_isSet = !json[QString("ArchiveName")].isNull() && m_archive_name_isValid;

    m_event_source_arn_isValid = ::OpenAPI::fromJsonValue(m_event_source_arn, json[QString("EventSourceArn")]);
    m_event_source_arn_isSet = !json[QString("EventSourceArn")].isNull() && m_event_source_arn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_event_pattern_isValid = ::OpenAPI::fromJsonValue(m_event_pattern, json[QString("EventPattern")]);
    m_event_pattern_isSet = !json[QString("EventPattern")].isNull() && m_event_pattern_isValid;

    m_retention_days_isValid = ::OpenAPI::fromJsonValue(m_retention_days, json[QString("RetentionDays")]);
    m_retention_days_isSet = !json[QString("RetentionDays")].isNull() && m_retention_days_isValid;
}

QString OAICreateArchiveRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateArchiveRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_archive_name_isSet) {
        obj.insert(QString("ArchiveName"), ::OpenAPI::toJsonValue(m_archive_name));
    }
    if (m_event_source_arn_isSet) {
        obj.insert(QString("EventSourceArn"), ::OpenAPI::toJsonValue(m_event_source_arn));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_event_pattern_isSet) {
        obj.insert(QString("EventPattern"), ::OpenAPI::toJsonValue(m_event_pattern));
    }
    if (m_retention_days_isSet) {
        obj.insert(QString("RetentionDays"), ::OpenAPI::toJsonValue(m_retention_days));
    }
    return obj;
}

QString OAICreateArchiveRequest::getArchiveName() const {
    return m_archive_name;
}
void OAICreateArchiveRequest::setArchiveName(const QString &archive_name) {
    m_archive_name = archive_name;
    m_archive_name_isSet = true;
}

bool OAICreateArchiveRequest::is_archive_name_Set() const{
    return m_archive_name_isSet;
}

bool OAICreateArchiveRequest::is_archive_name_Valid() const{
    return m_archive_name_isValid;
}

QString OAICreateArchiveRequest::getEventSourceArn() const {
    return m_event_source_arn;
}
void OAICreateArchiveRequest::setEventSourceArn(const QString &event_source_arn) {
    m_event_source_arn = event_source_arn;
    m_event_source_arn_isSet = true;
}

bool OAICreateArchiveRequest::is_event_source_arn_Set() const{
    return m_event_source_arn_isSet;
}

bool OAICreateArchiveRequest::is_event_source_arn_Valid() const{
    return m_event_source_arn_isValid;
}

QString OAICreateArchiveRequest::getDescription() const {
    return m_description;
}
void OAICreateArchiveRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateArchiveRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateArchiveRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateArchiveRequest::getEventPattern() const {
    return m_event_pattern;
}
void OAICreateArchiveRequest::setEventPattern(const QString &event_pattern) {
    m_event_pattern = event_pattern;
    m_event_pattern_isSet = true;
}

bool OAICreateArchiveRequest::is_event_pattern_Set() const{
    return m_event_pattern_isSet;
}

bool OAICreateArchiveRequest::is_event_pattern_Valid() const{
    return m_event_pattern_isValid;
}

qint32 OAICreateArchiveRequest::getRetentionDays() const {
    return m_retention_days;
}
void OAICreateArchiveRequest::setRetentionDays(const qint32 &retention_days) {
    m_retention_days = retention_days;
    m_retention_days_isSet = true;
}

bool OAICreateArchiveRequest::is_retention_days_Set() const{
    return m_retention_days_isSet;
}

bool OAICreateArchiveRequest::is_retention_days_Valid() const{
    return m_retention_days_isValid;
}

bool OAICreateArchiveRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archive_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_source_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_days_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateArchiveRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_archive_name_isValid && m_event_source_arn_isValid && true;
}

} // namespace OpenAPI
