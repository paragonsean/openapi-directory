/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRedshiftDataParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRedshiftDataParameters::OAIRedshiftDataParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRedshiftDataParameters::OAIRedshiftDataParameters() {
    this->initializeModel();
}

OAIRedshiftDataParameters::~OAIRedshiftDataParameters() {}

void OAIRedshiftDataParameters::initializeModel() {

    m_secret_manager_arn_isSet = false;
    m_secret_manager_arn_isValid = false;

    m_database_isSet = false;
    m_database_isValid = false;

    m_db_user_isSet = false;
    m_db_user_isValid = false;

    m_sql_isSet = false;
    m_sql_isValid = false;

    m_statement_name_isSet = false;
    m_statement_name_isValid = false;

    m_with_event_isSet = false;
    m_with_event_isValid = false;

    m_sqls_isSet = false;
    m_sqls_isValid = false;
}

void OAIRedshiftDataParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRedshiftDataParameters::fromJsonObject(QJsonObject json) {

    m_secret_manager_arn_isValid = ::OpenAPI::fromJsonValue(m_secret_manager_arn, json[QString("SecretManagerArn")]);
    m_secret_manager_arn_isSet = !json[QString("SecretManagerArn")].isNull() && m_secret_manager_arn_isValid;

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("Database")]);
    m_database_isSet = !json[QString("Database")].isNull() && m_database_isValid;

    m_db_user_isValid = ::OpenAPI::fromJsonValue(m_db_user, json[QString("DbUser")]);
    m_db_user_isSet = !json[QString("DbUser")].isNull() && m_db_user_isValid;

    m_sql_isValid = ::OpenAPI::fromJsonValue(m_sql, json[QString("Sql")]);
    m_sql_isSet = !json[QString("Sql")].isNull() && m_sql_isValid;

    m_statement_name_isValid = ::OpenAPI::fromJsonValue(m_statement_name, json[QString("StatementName")]);
    m_statement_name_isSet = !json[QString("StatementName")].isNull() && m_statement_name_isValid;

    m_with_event_isValid = ::OpenAPI::fromJsonValue(m_with_event, json[QString("WithEvent")]);
    m_with_event_isSet = !json[QString("WithEvent")].isNull() && m_with_event_isValid;

    m_sqls_isValid = ::OpenAPI::fromJsonValue(m_sqls, json[QString("Sqls")]);
    m_sqls_isSet = !json[QString("Sqls")].isNull() && m_sqls_isValid;
}

QString OAIRedshiftDataParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRedshiftDataParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_secret_manager_arn_isSet) {
        obj.insert(QString("SecretManagerArn"), ::OpenAPI::toJsonValue(m_secret_manager_arn));
    }
    if (m_database_isSet) {
        obj.insert(QString("Database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_db_user_isSet) {
        obj.insert(QString("DbUser"), ::OpenAPI::toJsonValue(m_db_user));
    }
    if (m_sql_isSet) {
        obj.insert(QString("Sql"), ::OpenAPI::toJsonValue(m_sql));
    }
    if (m_statement_name_isSet) {
        obj.insert(QString("StatementName"), ::OpenAPI::toJsonValue(m_statement_name));
    }
    if (m_with_event_isSet) {
        obj.insert(QString("WithEvent"), ::OpenAPI::toJsonValue(m_with_event));
    }
    if (m_sqls.size() > 0) {
        obj.insert(QString("Sqls"), ::OpenAPI::toJsonValue(m_sqls));
    }
    return obj;
}

QString OAIRedshiftDataParameters::getSecretManagerArn() const {
    return m_secret_manager_arn;
}
void OAIRedshiftDataParameters::setSecretManagerArn(const QString &secret_manager_arn) {
    m_secret_manager_arn = secret_manager_arn;
    m_secret_manager_arn_isSet = true;
}

bool OAIRedshiftDataParameters::is_secret_manager_arn_Set() const{
    return m_secret_manager_arn_isSet;
}

bool OAIRedshiftDataParameters::is_secret_manager_arn_Valid() const{
    return m_secret_manager_arn_isValid;
}

QString OAIRedshiftDataParameters::getDatabase() const {
    return m_database;
}
void OAIRedshiftDataParameters::setDatabase(const QString &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIRedshiftDataParameters::is_database_Set() const{
    return m_database_isSet;
}

bool OAIRedshiftDataParameters::is_database_Valid() const{
    return m_database_isValid;
}

QString OAIRedshiftDataParameters::getDbUser() const {
    return m_db_user;
}
void OAIRedshiftDataParameters::setDbUser(const QString &db_user) {
    m_db_user = db_user;
    m_db_user_isSet = true;
}

bool OAIRedshiftDataParameters::is_db_user_Set() const{
    return m_db_user_isSet;
}

bool OAIRedshiftDataParameters::is_db_user_Valid() const{
    return m_db_user_isValid;
}

QString OAIRedshiftDataParameters::getSql() const {
    return m_sql;
}
void OAIRedshiftDataParameters::setSql(const QString &sql) {
    m_sql = sql;
    m_sql_isSet = true;
}

bool OAIRedshiftDataParameters::is_sql_Set() const{
    return m_sql_isSet;
}

bool OAIRedshiftDataParameters::is_sql_Valid() const{
    return m_sql_isValid;
}

QString OAIRedshiftDataParameters::getStatementName() const {
    return m_statement_name;
}
void OAIRedshiftDataParameters::setStatementName(const QString &statement_name) {
    m_statement_name = statement_name;
    m_statement_name_isSet = true;
}

bool OAIRedshiftDataParameters::is_statement_name_Set() const{
    return m_statement_name_isSet;
}

bool OAIRedshiftDataParameters::is_statement_name_Valid() const{
    return m_statement_name_isValid;
}

bool OAIRedshiftDataParameters::getWithEvent() const {
    return m_with_event;
}
void OAIRedshiftDataParameters::setWithEvent(const bool &with_event) {
    m_with_event = with_event;
    m_with_event_isSet = true;
}

bool OAIRedshiftDataParameters::is_with_event_Set() const{
    return m_with_event_isSet;
}

bool OAIRedshiftDataParameters::is_with_event_Valid() const{
    return m_with_event_isValid;
}

QList<QString> OAIRedshiftDataParameters::getSqls() const {
    return m_sqls;
}
void OAIRedshiftDataParameters::setSqls(const QList<QString> &sqls) {
    m_sqls = sqls;
    m_sqls_isSet = true;
}

bool OAIRedshiftDataParameters::is_sqls_Set() const{
    return m_sqls_isSet;
}

bool OAIRedshiftDataParameters::is_sqls_Valid() const{
    return m_sqls_isValid;
}

bool OAIRedshiftDataParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_secret_manager_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statement_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_with_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sqls.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRedshiftDataParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_database_isValid && true;
}

} // namespace OpenAPI
