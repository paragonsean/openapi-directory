/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateEndpointResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateEndpointResponse::OAICreateEndpointResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateEndpointResponse::OAICreateEndpointResponse() {
    this->initializeModel();
}

OAICreateEndpointResponse::~OAICreateEndpointResponse() {}

void OAICreateEndpointResponse::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_routing_config_isSet = false;
    m_routing_config_isValid = false;

    m_replication_config_isSet = false;
    m_replication_config_isValid = false;

    m_event_buses_isSet = false;
    m_event_buses_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAICreateEndpointResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateEndpointResponse::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_routing_config_isValid = ::OpenAPI::fromJsonValue(m_routing_config, json[QString("RoutingConfig")]);
    m_routing_config_isSet = !json[QString("RoutingConfig")].isNull() && m_routing_config_isValid;

    m_replication_config_isValid = ::OpenAPI::fromJsonValue(m_replication_config, json[QString("ReplicationConfig")]);
    m_replication_config_isSet = !json[QString("ReplicationConfig")].isNull() && m_replication_config_isValid;

    m_event_buses_isValid = ::OpenAPI::fromJsonValue(m_event_buses, json[QString("EventBuses")]);
    m_event_buses_isSet = !json[QString("EventBuses")].isNull() && m_event_buses_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;
}

QString OAICreateEndpointResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateEndpointResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_routing_config.isSet()) {
        obj.insert(QString("RoutingConfig"), ::OpenAPI::toJsonValue(m_routing_config));
    }
    if (m_replication_config.isSet()) {
        obj.insert(QString("ReplicationConfig"), ::OpenAPI::toJsonValue(m_replication_config));
    }
    if (m_event_buses.isSet()) {
        obj.insert(QString("EventBuses"), ::OpenAPI::toJsonValue(m_event_buses));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAICreateEndpointResponse::getName() const {
    return m_name;
}
void OAICreateEndpointResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateEndpointResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateEndpointResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateEndpointResponse::getArn() const {
    return m_arn;
}
void OAICreateEndpointResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreateEndpointResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreateEndpointResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

OAICreateEndpointResponse_RoutingConfig OAICreateEndpointResponse::getRoutingConfig() const {
    return m_routing_config;
}
void OAICreateEndpointResponse::setRoutingConfig(const OAICreateEndpointResponse_RoutingConfig &routing_config) {
    m_routing_config = routing_config;
    m_routing_config_isSet = true;
}

bool OAICreateEndpointResponse::is_routing_config_Set() const{
    return m_routing_config_isSet;
}

bool OAICreateEndpointResponse::is_routing_config_Valid() const{
    return m_routing_config_isValid;
}

OAICreateEndpointResponse_ReplicationConfig OAICreateEndpointResponse::getReplicationConfig() const {
    return m_replication_config;
}
void OAICreateEndpointResponse::setReplicationConfig(const OAICreateEndpointResponse_ReplicationConfig &replication_config) {
    m_replication_config = replication_config;
    m_replication_config_isSet = true;
}

bool OAICreateEndpointResponse::is_replication_config_Set() const{
    return m_replication_config_isSet;
}

bool OAICreateEndpointResponse::is_replication_config_Valid() const{
    return m_replication_config_isValid;
}

QList OAICreateEndpointResponse::getEventBuses() const {
    return m_event_buses;
}
void OAICreateEndpointResponse::setEventBuses(const QList &event_buses) {
    m_event_buses = event_buses;
    m_event_buses_isSet = true;
}

bool OAICreateEndpointResponse::is_event_buses_Set() const{
    return m_event_buses_isSet;
}

bool OAICreateEndpointResponse::is_event_buses_Valid() const{
    return m_event_buses_isValid;
}

QString OAICreateEndpointResponse::getRoleArn() const {
    return m_role_arn;
}
void OAICreateEndpointResponse::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAICreateEndpointResponse::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAICreateEndpointResponse::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAIEndpointState OAICreateEndpointResponse::getState() const {
    return m_state;
}
void OAICreateEndpointResponse::setState(const OAIEndpointState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICreateEndpointResponse::is_state_Set() const{
    return m_state_isSet;
}

bool OAICreateEndpointResponse::is_state_Valid() const{
    return m_state_isValid;
}

bool OAICreateEndpointResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_buses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateEndpointResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
