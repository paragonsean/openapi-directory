/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArchiveState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArchiveState::OAIArchiveState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArchiveState::OAIArchiveState() {
    this->initializeModel();
}

OAIArchiveState::~OAIArchiveState() {}

void OAIArchiveState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIArchiveState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIArchiveState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ENABLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArchiveState::ENABLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DISABLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArchiveState::DISABLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CREATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArchiveState::CREATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UPDATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArchiveState::UPDATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CREATE_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArchiveState::CREATE_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UPDATE_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArchiveState::UPDATE_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIArchiveState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIArchiveState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIArchiveState::ENABLED:
            val = "ENABLED";
            break;
        case eOAIArchiveState::DISABLED:
            val = "DISABLED";
            break;
        case eOAIArchiveState::CREATING:
            val = "CREATING";
            break;
        case eOAIArchiveState::UPDATING:
            val = "UPDATING";
            break;
        case eOAIArchiveState::CREATE_FAILED:
            val = "CREATE_FAILED";
            break;
        case eOAIArchiveState::UPDATE_FAILED:
            val = "UPDATE_FAILED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIArchiveState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIArchiveState::eOAIArchiveState OAIArchiveState::getValue() const {
    return m_value;
}

void OAIArchiveState::setValue(const OAIArchiveState::eOAIArchiveState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIArchiveState::isSet() const {
    
    return m_value_isSet;
}

bool OAIArchiveState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
