/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHttpParameters.h
 *
 * These are custom parameter to be used when the target is an API Gateway APIs or EventBridge ApiDestinations. In the latter case, these are merged with any InvocationParameters specified on the Connection, with any values from the Connection taking precedence.
 */

#ifndef OAIHttpParameters_H
#define OAIHttpParameters_H

#include <QJsonObject>

#include <QList>
#include <QMap>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIHttpParameters : public OAIObject {
public:
    OAIHttpParameters();
    OAIHttpParameters(QString json);
    ~OAIHttpParameters() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getPathParameterValues() const;
    void setPathParameterValues(const QList &path_parameter_values);
    bool is_path_parameter_values_Set() const;
    bool is_path_parameter_values_Valid() const;

    QMap getHeaderParameters() const;
    void setHeaderParameters(const QMap &header_parameters);
    bool is_header_parameters_Set() const;
    bool is_header_parameters_Valid() const;

    QMap getQueryStringParameters() const;
    void setQueryStringParameters(const QMap &query_string_parameters);
    bool is_query_string_parameters_Set() const;
    bool is_query_string_parameters_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_path_parameter_values;
    bool m_path_parameter_values_isSet;
    bool m_path_parameter_values_isValid;

    QMap m_header_parameters;
    bool m_header_parameters_isSet;
    bool m_header_parameters_isValid;

    QMap m_query_string_parameters;
    bool m_query_string_parameters_isSet;
    bool m_query_string_parameters_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHttpParameters)

#endif // OAIHttpParameters_H
