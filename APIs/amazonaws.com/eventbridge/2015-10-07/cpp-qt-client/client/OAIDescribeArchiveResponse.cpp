/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeArchiveResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeArchiveResponse::OAIDescribeArchiveResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeArchiveResponse::OAIDescribeArchiveResponse() {
    this->initializeModel();
}

OAIDescribeArchiveResponse::~OAIDescribeArchiveResponse() {}

void OAIDescribeArchiveResponse::initializeModel() {

    m_archive_arn_isSet = false;
    m_archive_arn_isValid = false;

    m_archive_name_isSet = false;
    m_archive_name_isValid = false;

    m_event_source_arn_isSet = false;
    m_event_source_arn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_event_pattern_isSet = false;
    m_event_pattern_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_reason_isSet = false;
    m_state_reason_isValid = false;

    m_retention_days_isSet = false;
    m_retention_days_isValid = false;

    m_size_bytes_isSet = false;
    m_size_bytes_isValid = false;

    m_event_count_isSet = false;
    m_event_count_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;
}

void OAIDescribeArchiveResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeArchiveResponse::fromJsonObject(QJsonObject json) {

    m_archive_arn_isValid = ::OpenAPI::fromJsonValue(m_archive_arn, json[QString("ArchiveArn")]);
    m_archive_arn_isSet = !json[QString("ArchiveArn")].isNull() && m_archive_arn_isValid;

    m_archive_name_isValid = ::OpenAPI::fromJsonValue(m_archive_name, json[QString("ArchiveName")]);
    m_archive_name_isSet = !json[QString("ArchiveName")].isNull() && m_archive_name_isValid;

    m_event_source_arn_isValid = ::OpenAPI::fromJsonValue(m_event_source_arn, json[QString("EventSourceArn")]);
    m_event_source_arn_isSet = !json[QString("EventSourceArn")].isNull() && m_event_source_arn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_event_pattern_isValid = ::OpenAPI::fromJsonValue(m_event_pattern, json[QString("EventPattern")]);
    m_event_pattern_isSet = !json[QString("EventPattern")].isNull() && m_event_pattern_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_state_reason_isValid = ::OpenAPI::fromJsonValue(m_state_reason, json[QString("StateReason")]);
    m_state_reason_isSet = !json[QString("StateReason")].isNull() && m_state_reason_isValid;

    m_retention_days_isValid = ::OpenAPI::fromJsonValue(m_retention_days, json[QString("RetentionDays")]);
    m_retention_days_isSet = !json[QString("RetentionDays")].isNull() && m_retention_days_isValid;

    m_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_bytes, json[QString("SizeBytes")]);
    m_size_bytes_isSet = !json[QString("SizeBytes")].isNull() && m_size_bytes_isValid;

    m_event_count_isValid = ::OpenAPI::fromJsonValue(m_event_count, json[QString("EventCount")]);
    m_event_count_isSet = !json[QString("EventCount")].isNull() && m_event_count_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;
}

QString OAIDescribeArchiveResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeArchiveResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_archive_arn_isSet) {
        obj.insert(QString("ArchiveArn"), ::OpenAPI::toJsonValue(m_archive_arn));
    }
    if (m_archive_name_isSet) {
        obj.insert(QString("ArchiveName"), ::OpenAPI::toJsonValue(m_archive_name));
    }
    if (m_event_source_arn_isSet) {
        obj.insert(QString("EventSourceArn"), ::OpenAPI::toJsonValue(m_event_source_arn));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_event_pattern_isSet) {
        obj.insert(QString("EventPattern"), ::OpenAPI::toJsonValue(m_event_pattern));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_reason_isSet) {
        obj.insert(QString("StateReason"), ::OpenAPI::toJsonValue(m_state_reason));
    }
    if (m_retention_days_isSet) {
        obj.insert(QString("RetentionDays"), ::OpenAPI::toJsonValue(m_retention_days));
    }
    if (m_size_bytes_isSet) {
        obj.insert(QString("SizeBytes"), ::OpenAPI::toJsonValue(m_size_bytes));
    }
    if (m_event_count_isSet) {
        obj.insert(QString("EventCount"), ::OpenAPI::toJsonValue(m_event_count));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    return obj;
}

QString OAIDescribeArchiveResponse::getArchiveArn() const {
    return m_archive_arn;
}
void OAIDescribeArchiveResponse::setArchiveArn(const QString &archive_arn) {
    m_archive_arn = archive_arn;
    m_archive_arn_isSet = true;
}

bool OAIDescribeArchiveResponse::is_archive_arn_Set() const{
    return m_archive_arn_isSet;
}

bool OAIDescribeArchiveResponse::is_archive_arn_Valid() const{
    return m_archive_arn_isValid;
}

QString OAIDescribeArchiveResponse::getArchiveName() const {
    return m_archive_name;
}
void OAIDescribeArchiveResponse::setArchiveName(const QString &archive_name) {
    m_archive_name = archive_name;
    m_archive_name_isSet = true;
}

bool OAIDescribeArchiveResponse::is_archive_name_Set() const{
    return m_archive_name_isSet;
}

bool OAIDescribeArchiveResponse::is_archive_name_Valid() const{
    return m_archive_name_isValid;
}

QString OAIDescribeArchiveResponse::getEventSourceArn() const {
    return m_event_source_arn;
}
void OAIDescribeArchiveResponse::setEventSourceArn(const QString &event_source_arn) {
    m_event_source_arn = event_source_arn;
    m_event_source_arn_isSet = true;
}

bool OAIDescribeArchiveResponse::is_event_source_arn_Set() const{
    return m_event_source_arn_isSet;
}

bool OAIDescribeArchiveResponse::is_event_source_arn_Valid() const{
    return m_event_source_arn_isValid;
}

QString OAIDescribeArchiveResponse::getDescription() const {
    return m_description;
}
void OAIDescribeArchiveResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribeArchiveResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribeArchiveResponse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDescribeArchiveResponse::getEventPattern() const {
    return m_event_pattern;
}
void OAIDescribeArchiveResponse::setEventPattern(const QString &event_pattern) {
    m_event_pattern = event_pattern;
    m_event_pattern_isSet = true;
}

bool OAIDescribeArchiveResponse::is_event_pattern_Set() const{
    return m_event_pattern_isSet;
}

bool OAIDescribeArchiveResponse::is_event_pattern_Valid() const{
    return m_event_pattern_isValid;
}

OAIArchiveState OAIDescribeArchiveResponse::getState() const {
    return m_state;
}
void OAIDescribeArchiveResponse::setState(const OAIArchiveState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDescribeArchiveResponse::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDescribeArchiveResponse::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIDescribeArchiveResponse::getStateReason() const {
    return m_state_reason;
}
void OAIDescribeArchiveResponse::setStateReason(const QString &state_reason) {
    m_state_reason = state_reason;
    m_state_reason_isSet = true;
}

bool OAIDescribeArchiveResponse::is_state_reason_Set() const{
    return m_state_reason_isSet;
}

bool OAIDescribeArchiveResponse::is_state_reason_Valid() const{
    return m_state_reason_isValid;
}

qint32 OAIDescribeArchiveResponse::getRetentionDays() const {
    return m_retention_days;
}
void OAIDescribeArchiveResponse::setRetentionDays(const qint32 &retention_days) {
    m_retention_days = retention_days;
    m_retention_days_isSet = true;
}

bool OAIDescribeArchiveResponse::is_retention_days_Set() const{
    return m_retention_days_isSet;
}

bool OAIDescribeArchiveResponse::is_retention_days_Valid() const{
    return m_retention_days_isValid;
}

qint32 OAIDescribeArchiveResponse::getSizeBytes() const {
    return m_size_bytes;
}
void OAIDescribeArchiveResponse::setSizeBytes(const qint32 &size_bytes) {
    m_size_bytes = size_bytes;
    m_size_bytes_isSet = true;
}

bool OAIDescribeArchiveResponse::is_size_bytes_Set() const{
    return m_size_bytes_isSet;
}

bool OAIDescribeArchiveResponse::is_size_bytes_Valid() const{
    return m_size_bytes_isValid;
}

qint32 OAIDescribeArchiveResponse::getEventCount() const {
    return m_event_count;
}
void OAIDescribeArchiveResponse::setEventCount(const qint32 &event_count) {
    m_event_count = event_count;
    m_event_count_isSet = true;
}

bool OAIDescribeArchiveResponse::is_event_count_Set() const{
    return m_event_count_isSet;
}

bool OAIDescribeArchiveResponse::is_event_count_Valid() const{
    return m_event_count_isValid;
}

QDateTime OAIDescribeArchiveResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeArchiveResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeArchiveResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeArchiveResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

bool OAIDescribeArchiveResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archive_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_archive_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_source_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeArchiveResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
