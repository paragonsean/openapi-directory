/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartReplayResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartReplayResponse::OAIStartReplayResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartReplayResponse::OAIStartReplayResponse() {
    this->initializeModel();
}

OAIStartReplayResponse::~OAIStartReplayResponse() {}

void OAIStartReplayResponse::initializeModel() {

    m_replay_arn_isSet = false;
    m_replay_arn_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_reason_isSet = false;
    m_state_reason_isValid = false;

    m_replay_start_time_isSet = false;
    m_replay_start_time_isValid = false;
}

void OAIStartReplayResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartReplayResponse::fromJsonObject(QJsonObject json) {

    m_replay_arn_isValid = ::OpenAPI::fromJsonValue(m_replay_arn, json[QString("ReplayArn")]);
    m_replay_arn_isSet = !json[QString("ReplayArn")].isNull() && m_replay_arn_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_state_reason_isValid = ::OpenAPI::fromJsonValue(m_state_reason, json[QString("StateReason")]);
    m_state_reason_isSet = !json[QString("StateReason")].isNull() && m_state_reason_isValid;

    m_replay_start_time_isValid = ::OpenAPI::fromJsonValue(m_replay_start_time, json[QString("ReplayStartTime")]);
    m_replay_start_time_isSet = !json[QString("ReplayStartTime")].isNull() && m_replay_start_time_isValid;
}

QString OAIStartReplayResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartReplayResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_replay_arn_isSet) {
        obj.insert(QString("ReplayArn"), ::OpenAPI::toJsonValue(m_replay_arn));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_reason_isSet) {
        obj.insert(QString("StateReason"), ::OpenAPI::toJsonValue(m_state_reason));
    }
    if (m_replay_start_time_isSet) {
        obj.insert(QString("ReplayStartTime"), ::OpenAPI::toJsonValue(m_replay_start_time));
    }
    return obj;
}

QString OAIStartReplayResponse::getReplayArn() const {
    return m_replay_arn;
}
void OAIStartReplayResponse::setReplayArn(const QString &replay_arn) {
    m_replay_arn = replay_arn;
    m_replay_arn_isSet = true;
}

bool OAIStartReplayResponse::is_replay_arn_Set() const{
    return m_replay_arn_isSet;
}

bool OAIStartReplayResponse::is_replay_arn_Valid() const{
    return m_replay_arn_isValid;
}

OAIReplayState OAIStartReplayResponse::getState() const {
    return m_state;
}
void OAIStartReplayResponse::setState(const OAIReplayState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIStartReplayResponse::is_state_Set() const{
    return m_state_isSet;
}

bool OAIStartReplayResponse::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIStartReplayResponse::getStateReason() const {
    return m_state_reason;
}
void OAIStartReplayResponse::setStateReason(const QString &state_reason) {
    m_state_reason = state_reason;
    m_state_reason_isSet = true;
}

bool OAIStartReplayResponse::is_state_reason_Set() const{
    return m_state_reason_isSet;
}

bool OAIStartReplayResponse::is_state_reason_Valid() const{
    return m_state_reason_isValid;
}

QDateTime OAIStartReplayResponse::getReplayStartTime() const {
    return m_replay_start_time;
}
void OAIStartReplayResponse::setReplayStartTime(const QDateTime &replay_start_time) {
    m_replay_start_time = replay_start_time;
    m_replay_start_time_isSet = true;
}

bool OAIStartReplayResponse::is_replay_start_time_Set() const{
    return m_replay_start_time_isSet;
}

bool OAIStartReplayResponse::is_replay_start_time_Valid() const{
    return m_replay_start_time_isValid;
}

bool OAIStartReplayResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_replay_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replay_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartReplayResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
