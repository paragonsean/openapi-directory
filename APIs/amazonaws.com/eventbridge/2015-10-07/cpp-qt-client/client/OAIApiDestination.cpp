/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiDestination::OAIApiDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiDestination::OAIApiDestination() {
    this->initializeModel();
}

OAIApiDestination::~OAIApiDestination() {}

void OAIApiDestination::initializeModel() {

    m_api_destination_arn_isSet = false;
    m_api_destination_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_api_destination_state_isSet = false;
    m_api_destination_state_isValid = false;

    m_connection_arn_isSet = false;
    m_connection_arn_isValid = false;

    m_invocation_endpoint_isSet = false;
    m_invocation_endpoint_isValid = false;

    m_http_method_isSet = false;
    m_http_method_isValid = false;

    m_invocation_rate_limit_per_second_isSet = false;
    m_invocation_rate_limit_per_second_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;
}

void OAIApiDestination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiDestination::fromJsonObject(QJsonObject json) {

    m_api_destination_arn_isValid = ::OpenAPI::fromJsonValue(m_api_destination_arn, json[QString("ApiDestinationArn")]);
    m_api_destination_arn_isSet = !json[QString("ApiDestinationArn")].isNull() && m_api_destination_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_api_destination_state_isValid = ::OpenAPI::fromJsonValue(m_api_destination_state, json[QString("ApiDestinationState")]);
    m_api_destination_state_isSet = !json[QString("ApiDestinationState")].isNull() && m_api_destination_state_isValid;

    m_connection_arn_isValid = ::OpenAPI::fromJsonValue(m_connection_arn, json[QString("ConnectionArn")]);
    m_connection_arn_isSet = !json[QString("ConnectionArn")].isNull() && m_connection_arn_isValid;

    m_invocation_endpoint_isValid = ::OpenAPI::fromJsonValue(m_invocation_endpoint, json[QString("InvocationEndpoint")]);
    m_invocation_endpoint_isSet = !json[QString("InvocationEndpoint")].isNull() && m_invocation_endpoint_isValid;

    m_http_method_isValid = ::OpenAPI::fromJsonValue(m_http_method, json[QString("HttpMethod")]);
    m_http_method_isSet = !json[QString("HttpMethod")].isNull() && m_http_method_isValid;

    m_invocation_rate_limit_per_second_isValid = ::OpenAPI::fromJsonValue(m_invocation_rate_limit_per_second, json[QString("InvocationRateLimitPerSecond")]);
    m_invocation_rate_limit_per_second_isSet = !json[QString("InvocationRateLimitPerSecond")].isNull() && m_invocation_rate_limit_per_second_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;
}

QString OAIApiDestination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiDestination::asJsonObject() const {
    QJsonObject obj;
    if (m_api_destination_arn_isSet) {
        obj.insert(QString("ApiDestinationArn"), ::OpenAPI::toJsonValue(m_api_destination_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_api_destination_state.isSet()) {
        obj.insert(QString("ApiDestinationState"), ::OpenAPI::toJsonValue(m_api_destination_state));
    }
    if (m_connection_arn_isSet) {
        obj.insert(QString("ConnectionArn"), ::OpenAPI::toJsonValue(m_connection_arn));
    }
    if (m_invocation_endpoint_isSet) {
        obj.insert(QString("InvocationEndpoint"), ::OpenAPI::toJsonValue(m_invocation_endpoint));
    }
    if (m_http_method.isSet()) {
        obj.insert(QString("HttpMethod"), ::OpenAPI::toJsonValue(m_http_method));
    }
    if (m_invocation_rate_limit_per_second_isSet) {
        obj.insert(QString("InvocationRateLimitPerSecond"), ::OpenAPI::toJsonValue(m_invocation_rate_limit_per_second));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    return obj;
}

QString OAIApiDestination::getApiDestinationArn() const {
    return m_api_destination_arn;
}
void OAIApiDestination::setApiDestinationArn(const QString &api_destination_arn) {
    m_api_destination_arn = api_destination_arn;
    m_api_destination_arn_isSet = true;
}

bool OAIApiDestination::is_api_destination_arn_Set() const{
    return m_api_destination_arn_isSet;
}

bool OAIApiDestination::is_api_destination_arn_Valid() const{
    return m_api_destination_arn_isValid;
}

QString OAIApiDestination::getName() const {
    return m_name;
}
void OAIApiDestination::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApiDestination::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApiDestination::is_name_Valid() const{
    return m_name_isValid;
}

OAIApiDestinationState OAIApiDestination::getApiDestinationState() const {
    return m_api_destination_state;
}
void OAIApiDestination::setApiDestinationState(const OAIApiDestinationState &api_destination_state) {
    m_api_destination_state = api_destination_state;
    m_api_destination_state_isSet = true;
}

bool OAIApiDestination::is_api_destination_state_Set() const{
    return m_api_destination_state_isSet;
}

bool OAIApiDestination::is_api_destination_state_Valid() const{
    return m_api_destination_state_isValid;
}

QString OAIApiDestination::getConnectionArn() const {
    return m_connection_arn;
}
void OAIApiDestination::setConnectionArn(const QString &connection_arn) {
    m_connection_arn = connection_arn;
    m_connection_arn_isSet = true;
}

bool OAIApiDestination::is_connection_arn_Set() const{
    return m_connection_arn_isSet;
}

bool OAIApiDestination::is_connection_arn_Valid() const{
    return m_connection_arn_isValid;
}

QString OAIApiDestination::getInvocationEndpoint() const {
    return m_invocation_endpoint;
}
void OAIApiDestination::setInvocationEndpoint(const QString &invocation_endpoint) {
    m_invocation_endpoint = invocation_endpoint;
    m_invocation_endpoint_isSet = true;
}

bool OAIApiDestination::is_invocation_endpoint_Set() const{
    return m_invocation_endpoint_isSet;
}

bool OAIApiDestination::is_invocation_endpoint_Valid() const{
    return m_invocation_endpoint_isValid;
}

OAIApiDestinationHttpMethod OAIApiDestination::getHttpMethod() const {
    return m_http_method;
}
void OAIApiDestination::setHttpMethod(const OAIApiDestinationHttpMethod &http_method) {
    m_http_method = http_method;
    m_http_method_isSet = true;
}

bool OAIApiDestination::is_http_method_Set() const{
    return m_http_method_isSet;
}

bool OAIApiDestination::is_http_method_Valid() const{
    return m_http_method_isValid;
}

qint32 OAIApiDestination::getInvocationRateLimitPerSecond() const {
    return m_invocation_rate_limit_per_second;
}
void OAIApiDestination::setInvocationRateLimitPerSecond(const qint32 &invocation_rate_limit_per_second) {
    m_invocation_rate_limit_per_second = invocation_rate_limit_per_second;
    m_invocation_rate_limit_per_second_isSet = true;
}

bool OAIApiDestination::is_invocation_rate_limit_per_second_Set() const{
    return m_invocation_rate_limit_per_second_isSet;
}

bool OAIApiDestination::is_invocation_rate_limit_per_second_Valid() const{
    return m_invocation_rate_limit_per_second_isValid;
}

QDateTime OAIApiDestination::getCreationTime() const {
    return m_creation_time;
}
void OAIApiDestination::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIApiDestination::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIApiDestination::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIApiDestination::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIApiDestination::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIApiDestination::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIApiDestination::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

bool OAIApiDestination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_destination_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_destination_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invocation_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invocation_rate_limit_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
