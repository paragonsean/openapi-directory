/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRule.h
 *
 * Contains information about a rule in Amazon EventBridge.
 */

#ifndef OAIRule_H
#define OAIRule_H

#include <QJsonObject>

#include "OAIRuleState.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRule : public OAIObject {
public:
    OAIRule();
    OAIRule(QString json);
    ~OAIRule() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QString getEventPattern() const;
    void setEventPattern(const QString &event_pattern);
    bool is_event_pattern_Set() const;
    bool is_event_pattern_Valid() const;

    OAIRuleState getState() const;
    void setState(const OAIRuleState &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getScheduleExpression() const;
    void setScheduleExpression(const QString &schedule_expression);
    bool is_schedule_expression_Set() const;
    bool is_schedule_expression_Valid() const;

    QString getRoleArn() const;
    void setRoleArn(const QString &role_arn);
    bool is_role_arn_Set() const;
    bool is_role_arn_Valid() const;

    QString getManagedBy() const;
    void setManagedBy(const QString &managed_by);
    bool is_managed_by_Set() const;
    bool is_managed_by_Valid() const;

    QString getEventBusName() const;
    void setEventBusName(const QString &event_bus_name);
    bool is_event_bus_name_Set() const;
    bool is_event_bus_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QString m_event_pattern;
    bool m_event_pattern_isSet;
    bool m_event_pattern_isValid;

    OAIRuleState m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_schedule_expression;
    bool m_schedule_expression_isSet;
    bool m_schedule_expression_isValid;

    QString m_role_arn;
    bool m_role_arn_isSet;
    bool m_role_arn_isValid;

    QString m_managed_by;
    bool m_managed_by_isSet;
    bool m_managed_by_isValid;

    QString m_event_bus_name;
    bool m_event_bus_name_isSet;
    bool m_event_bus_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRule)

#endif // OAIRule_H
