/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITarget_EcsParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITarget_EcsParameters::OAITarget_EcsParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITarget_EcsParameters::OAITarget_EcsParameters() {
    this->initializeModel();
}

OAITarget_EcsParameters::~OAITarget_EcsParameters() {}

void OAITarget_EcsParameters::initializeModel() {

    m_task_definition_arn_isSet = false;
    m_task_definition_arn_isValid = false;

    m_task_count_isSet = false;
    m_task_count_isValid = false;

    m_launch_type_isSet = false;
    m_launch_type_isValid = false;

    m_network_configuration_isSet = false;
    m_network_configuration_isValid = false;

    m_platform_version_isSet = false;
    m_platform_version_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_capacity_provider_strategy_isSet = false;
    m_capacity_provider_strategy_isValid = false;

    m_enable_ecs_managed_tags_isSet = false;
    m_enable_ecs_managed_tags_isValid = false;

    m_enable_execute_command_isSet = false;
    m_enable_execute_command_isValid = false;

    m_placement_constraints_isSet = false;
    m_placement_constraints_isValid = false;

    m_placement_strategy_isSet = false;
    m_placement_strategy_isValid = false;

    m_propagate_tags_isSet = false;
    m_propagate_tags_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAITarget_EcsParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITarget_EcsParameters::fromJsonObject(QJsonObject json) {

    m_task_definition_arn_isValid = ::OpenAPI::fromJsonValue(m_task_definition_arn, json[QString("TaskDefinitionArn")]);
    m_task_definition_arn_isSet = !json[QString("TaskDefinitionArn")].isNull() && m_task_definition_arn_isValid;

    m_task_count_isValid = ::OpenAPI::fromJsonValue(m_task_count, json[QString("TaskCount")]);
    m_task_count_isSet = !json[QString("TaskCount")].isNull() && m_task_count_isValid;

    m_launch_type_isValid = ::OpenAPI::fromJsonValue(m_launch_type, json[QString("LaunchType")]);
    m_launch_type_isSet = !json[QString("LaunchType")].isNull() && m_launch_type_isValid;

    m_network_configuration_isValid = ::OpenAPI::fromJsonValue(m_network_configuration, json[QString("NetworkConfiguration")]);
    m_network_configuration_isSet = !json[QString("NetworkConfiguration")].isNull() && m_network_configuration_isValid;

    m_platform_version_isValid = ::OpenAPI::fromJsonValue(m_platform_version, json[QString("PlatformVersion")]);
    m_platform_version_isSet = !json[QString("PlatformVersion")].isNull() && m_platform_version_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("Group")]);
    m_group_isSet = !json[QString("Group")].isNull() && m_group_isValid;

    m_capacity_provider_strategy_isValid = ::OpenAPI::fromJsonValue(m_capacity_provider_strategy, json[QString("CapacityProviderStrategy")]);
    m_capacity_provider_strategy_isSet = !json[QString("CapacityProviderStrategy")].isNull() && m_capacity_provider_strategy_isValid;

    m_enable_ecs_managed_tags_isValid = ::OpenAPI::fromJsonValue(m_enable_ecs_managed_tags, json[QString("EnableECSManagedTags")]);
    m_enable_ecs_managed_tags_isSet = !json[QString("EnableECSManagedTags")].isNull() && m_enable_ecs_managed_tags_isValid;

    m_enable_execute_command_isValid = ::OpenAPI::fromJsonValue(m_enable_execute_command, json[QString("EnableExecuteCommand")]);
    m_enable_execute_command_isSet = !json[QString("EnableExecuteCommand")].isNull() && m_enable_execute_command_isValid;

    m_placement_constraints_isValid = ::OpenAPI::fromJsonValue(m_placement_constraints, json[QString("PlacementConstraints")]);
    m_placement_constraints_isSet = !json[QString("PlacementConstraints")].isNull() && m_placement_constraints_isValid;

    m_placement_strategy_isValid = ::OpenAPI::fromJsonValue(m_placement_strategy, json[QString("PlacementStrategy")]);
    m_placement_strategy_isSet = !json[QString("PlacementStrategy")].isNull() && m_placement_strategy_isValid;

    m_propagate_tags_isValid = ::OpenAPI::fromJsonValue(m_propagate_tags, json[QString("PropagateTags")]);
    m_propagate_tags_isSet = !json[QString("PropagateTags")].isNull() && m_propagate_tags_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("ReferenceId")]);
    m_reference_id_isSet = !json[QString("ReferenceId")].isNull() && m_reference_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAITarget_EcsParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITarget_EcsParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_task_definition_arn_isSet) {
        obj.insert(QString("TaskDefinitionArn"), ::OpenAPI::toJsonValue(m_task_definition_arn));
    }
    if (m_task_count_isSet) {
        obj.insert(QString("TaskCount"), ::OpenAPI::toJsonValue(m_task_count));
    }
    if (m_launch_type.isSet()) {
        obj.insert(QString("LaunchType"), ::OpenAPI::toJsonValue(m_launch_type));
    }
    if (m_network_configuration.isSet()) {
        obj.insert(QString("NetworkConfiguration"), ::OpenAPI::toJsonValue(m_network_configuration));
    }
    if (m_platform_version_isSet) {
        obj.insert(QString("PlatformVersion"), ::OpenAPI::toJsonValue(m_platform_version));
    }
    if (m_group_isSet) {
        obj.insert(QString("Group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_capacity_provider_strategy.isSet()) {
        obj.insert(QString("CapacityProviderStrategy"), ::OpenAPI::toJsonValue(m_capacity_provider_strategy));
    }
    if (m_enable_ecs_managed_tags_isSet) {
        obj.insert(QString("EnableECSManagedTags"), ::OpenAPI::toJsonValue(m_enable_ecs_managed_tags));
    }
    if (m_enable_execute_command_isSet) {
        obj.insert(QString("EnableExecuteCommand"), ::OpenAPI::toJsonValue(m_enable_execute_command));
    }
    if (m_placement_constraints.isSet()) {
        obj.insert(QString("PlacementConstraints"), ::OpenAPI::toJsonValue(m_placement_constraints));
    }
    if (m_placement_strategy.isSet()) {
        obj.insert(QString("PlacementStrategy"), ::OpenAPI::toJsonValue(m_placement_strategy));
    }
    if (m_propagate_tags.isSet()) {
        obj.insert(QString("PropagateTags"), ::OpenAPI::toJsonValue(m_propagate_tags));
    }
    if (m_reference_id_isSet) {
        obj.insert(QString("ReferenceId"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAITarget_EcsParameters::getTaskDefinitionArn() const {
    return m_task_definition_arn;
}
void OAITarget_EcsParameters::setTaskDefinitionArn(const QString &task_definition_arn) {
    m_task_definition_arn = task_definition_arn;
    m_task_definition_arn_isSet = true;
}

bool OAITarget_EcsParameters::is_task_definition_arn_Set() const{
    return m_task_definition_arn_isSet;
}

bool OAITarget_EcsParameters::is_task_definition_arn_Valid() const{
    return m_task_definition_arn_isValid;
}

qint32 OAITarget_EcsParameters::getTaskCount() const {
    return m_task_count;
}
void OAITarget_EcsParameters::setTaskCount(const qint32 &task_count) {
    m_task_count = task_count;
    m_task_count_isSet = true;
}

bool OAITarget_EcsParameters::is_task_count_Set() const{
    return m_task_count_isSet;
}

bool OAITarget_EcsParameters::is_task_count_Valid() const{
    return m_task_count_isValid;
}

OAILaunchType OAITarget_EcsParameters::getLaunchType() const {
    return m_launch_type;
}
void OAITarget_EcsParameters::setLaunchType(const OAILaunchType &launch_type) {
    m_launch_type = launch_type;
    m_launch_type_isSet = true;
}

bool OAITarget_EcsParameters::is_launch_type_Set() const{
    return m_launch_type_isSet;
}

bool OAITarget_EcsParameters::is_launch_type_Valid() const{
    return m_launch_type_isValid;
}

OAIEcsParameters_NetworkConfiguration OAITarget_EcsParameters::getNetworkConfiguration() const {
    return m_network_configuration;
}
void OAITarget_EcsParameters::setNetworkConfiguration(const OAIEcsParameters_NetworkConfiguration &network_configuration) {
    m_network_configuration = network_configuration;
    m_network_configuration_isSet = true;
}

bool OAITarget_EcsParameters::is_network_configuration_Set() const{
    return m_network_configuration_isSet;
}

bool OAITarget_EcsParameters::is_network_configuration_Valid() const{
    return m_network_configuration_isValid;
}

QString OAITarget_EcsParameters::getPlatformVersion() const {
    return m_platform_version;
}
void OAITarget_EcsParameters::setPlatformVersion(const QString &platform_version) {
    m_platform_version = platform_version;
    m_platform_version_isSet = true;
}

bool OAITarget_EcsParameters::is_platform_version_Set() const{
    return m_platform_version_isSet;
}

bool OAITarget_EcsParameters::is_platform_version_Valid() const{
    return m_platform_version_isValid;
}

QString OAITarget_EcsParameters::getGroup() const {
    return m_group;
}
void OAITarget_EcsParameters::setGroup(const QString &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAITarget_EcsParameters::is_group_Set() const{
    return m_group_isSet;
}

bool OAITarget_EcsParameters::is_group_Valid() const{
    return m_group_isValid;
}

QList OAITarget_EcsParameters::getCapacityProviderStrategy() const {
    return m_capacity_provider_strategy;
}
void OAITarget_EcsParameters::setCapacityProviderStrategy(const QList &capacity_provider_strategy) {
    m_capacity_provider_strategy = capacity_provider_strategy;
    m_capacity_provider_strategy_isSet = true;
}

bool OAITarget_EcsParameters::is_capacity_provider_strategy_Set() const{
    return m_capacity_provider_strategy_isSet;
}

bool OAITarget_EcsParameters::is_capacity_provider_strategy_Valid() const{
    return m_capacity_provider_strategy_isValid;
}

bool OAITarget_EcsParameters::getEnableEcsManagedTags() const {
    return m_enable_ecs_managed_tags;
}
void OAITarget_EcsParameters::setEnableEcsManagedTags(const bool &enable_ecs_managed_tags) {
    m_enable_ecs_managed_tags = enable_ecs_managed_tags;
    m_enable_ecs_managed_tags_isSet = true;
}

bool OAITarget_EcsParameters::is_enable_ecs_managed_tags_Set() const{
    return m_enable_ecs_managed_tags_isSet;
}

bool OAITarget_EcsParameters::is_enable_ecs_managed_tags_Valid() const{
    return m_enable_ecs_managed_tags_isValid;
}

bool OAITarget_EcsParameters::getEnableExecuteCommand() const {
    return m_enable_execute_command;
}
void OAITarget_EcsParameters::setEnableExecuteCommand(const bool &enable_execute_command) {
    m_enable_execute_command = enable_execute_command;
    m_enable_execute_command_isSet = true;
}

bool OAITarget_EcsParameters::is_enable_execute_command_Set() const{
    return m_enable_execute_command_isSet;
}

bool OAITarget_EcsParameters::is_enable_execute_command_Valid() const{
    return m_enable_execute_command_isValid;
}

QList OAITarget_EcsParameters::getPlacementConstraints() const {
    return m_placement_constraints;
}
void OAITarget_EcsParameters::setPlacementConstraints(const QList &placement_constraints) {
    m_placement_constraints = placement_constraints;
    m_placement_constraints_isSet = true;
}

bool OAITarget_EcsParameters::is_placement_constraints_Set() const{
    return m_placement_constraints_isSet;
}

bool OAITarget_EcsParameters::is_placement_constraints_Valid() const{
    return m_placement_constraints_isValid;
}

QList OAITarget_EcsParameters::getPlacementStrategy() const {
    return m_placement_strategy;
}
void OAITarget_EcsParameters::setPlacementStrategy(const QList &placement_strategy) {
    m_placement_strategy = placement_strategy;
    m_placement_strategy_isSet = true;
}

bool OAITarget_EcsParameters::is_placement_strategy_Set() const{
    return m_placement_strategy_isSet;
}

bool OAITarget_EcsParameters::is_placement_strategy_Valid() const{
    return m_placement_strategy_isValid;
}

OAIPropagateTags OAITarget_EcsParameters::getPropagateTags() const {
    return m_propagate_tags;
}
void OAITarget_EcsParameters::setPropagateTags(const OAIPropagateTags &propagate_tags) {
    m_propagate_tags = propagate_tags;
    m_propagate_tags_isSet = true;
}

bool OAITarget_EcsParameters::is_propagate_tags_Set() const{
    return m_propagate_tags_isSet;
}

bool OAITarget_EcsParameters::is_propagate_tags_Valid() const{
    return m_propagate_tags_isValid;
}

QString OAITarget_EcsParameters::getReferenceId() const {
    return m_reference_id;
}
void OAITarget_EcsParameters::setReferenceId(const QString &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAITarget_EcsParameters::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAITarget_EcsParameters::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

QList OAITarget_EcsParameters::getTags() const {
    return m_tags;
}
void OAITarget_EcsParameters::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAITarget_EcsParameters::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAITarget_EcsParameters::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAITarget_EcsParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_task_definition_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_provider_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_ecs_managed_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_execute_command_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_constraints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_propagate_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITarget_EcsParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_task_definition_arn_isValid && true;
}

} // namespace OpenAPI
