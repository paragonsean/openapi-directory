/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateConnectionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateConnectionResponse::OAIUpdateConnectionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateConnectionResponse::OAIUpdateConnectionResponse() {
    this->initializeModel();
}

OAIUpdateConnectionResponse::~OAIUpdateConnectionResponse() {}

void OAIUpdateConnectionResponse::initializeModel() {

    m_connection_arn_isSet = false;
    m_connection_arn_isValid = false;

    m_connection_state_isSet = false;
    m_connection_state_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_last_authorized_time_isSet = false;
    m_last_authorized_time_isValid = false;
}

void OAIUpdateConnectionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateConnectionResponse::fromJsonObject(QJsonObject json) {

    m_connection_arn_isValid = ::OpenAPI::fromJsonValue(m_connection_arn, json[QString("ConnectionArn")]);
    m_connection_arn_isSet = !json[QString("ConnectionArn")].isNull() && m_connection_arn_isValid;

    m_connection_state_isValid = ::OpenAPI::fromJsonValue(m_connection_state, json[QString("ConnectionState")]);
    m_connection_state_isSet = !json[QString("ConnectionState")].isNull() && m_connection_state_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("LastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("LastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_last_authorized_time_isValid = ::OpenAPI::fromJsonValue(m_last_authorized_time, json[QString("LastAuthorizedTime")]);
    m_last_authorized_time_isSet = !json[QString("LastAuthorizedTime")].isNull() && m_last_authorized_time_isValid;
}

QString OAIUpdateConnectionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateConnectionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_arn_isSet) {
        obj.insert(QString("ConnectionArn"), ::OpenAPI::toJsonValue(m_connection_arn));
    }
    if (m_connection_state.isSet()) {
        obj.insert(QString("ConnectionState"), ::OpenAPI::toJsonValue(m_connection_state));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("LastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_last_authorized_time_isSet) {
        obj.insert(QString("LastAuthorizedTime"), ::OpenAPI::toJsonValue(m_last_authorized_time));
    }
    return obj;
}

QString OAIUpdateConnectionResponse::getConnectionArn() const {
    return m_connection_arn;
}
void OAIUpdateConnectionResponse::setConnectionArn(const QString &connection_arn) {
    m_connection_arn = connection_arn;
    m_connection_arn_isSet = true;
}

bool OAIUpdateConnectionResponse::is_connection_arn_Set() const{
    return m_connection_arn_isSet;
}

bool OAIUpdateConnectionResponse::is_connection_arn_Valid() const{
    return m_connection_arn_isValid;
}

OAIConnectionState OAIUpdateConnectionResponse::getConnectionState() const {
    return m_connection_state;
}
void OAIUpdateConnectionResponse::setConnectionState(const OAIConnectionState &connection_state) {
    m_connection_state = connection_state;
    m_connection_state_isSet = true;
}

bool OAIUpdateConnectionResponse::is_connection_state_Set() const{
    return m_connection_state_isSet;
}

bool OAIUpdateConnectionResponse::is_connection_state_Valid() const{
    return m_connection_state_isValid;
}

QDateTime OAIUpdateConnectionResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIUpdateConnectionResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIUpdateConnectionResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIUpdateConnectionResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIUpdateConnectionResponse::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIUpdateConnectionResponse::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIUpdateConnectionResponse::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIUpdateConnectionResponse::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QDateTime OAIUpdateConnectionResponse::getLastAuthorizedTime() const {
    return m_last_authorized_time;
}
void OAIUpdateConnectionResponse::setLastAuthorizedTime(const QDateTime &last_authorized_time) {
    m_last_authorized_time = last_authorized_time;
    m_last_authorized_time_isSet = true;
}

bool OAIUpdateConnectionResponse::is_last_authorized_time_Set() const{
    return m_last_authorized_time_isSet;
}

bool OAIUpdateConnectionResponse::is_last_authorized_time_Valid() const{
    return m_last_authorized_time_isValid;
}

bool OAIUpdateConnectionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_authorized_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateConnectionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
