/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateConnectionRequest_AuthParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateConnectionRequest_AuthParameters::OAIUpdateConnectionRequest_AuthParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateConnectionRequest_AuthParameters::OAIUpdateConnectionRequest_AuthParameters() {
    this->initializeModel();
}

OAIUpdateConnectionRequest_AuthParameters::~OAIUpdateConnectionRequest_AuthParameters() {}

void OAIUpdateConnectionRequest_AuthParameters::initializeModel() {

    m_basic_auth_parameters_isSet = false;
    m_basic_auth_parameters_isValid = false;

    m_o_auth_parameters_isSet = false;
    m_o_auth_parameters_isValid = false;

    m_api_key_auth_parameters_isSet = false;
    m_api_key_auth_parameters_isValid = false;

    m_invocation_http_parameters_isSet = false;
    m_invocation_http_parameters_isValid = false;
}

void OAIUpdateConnectionRequest_AuthParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateConnectionRequest_AuthParameters::fromJsonObject(QJsonObject json) {

    m_basic_auth_parameters_isValid = ::OpenAPI::fromJsonValue(m_basic_auth_parameters, json[QString("BasicAuthParameters")]);
    m_basic_auth_parameters_isSet = !json[QString("BasicAuthParameters")].isNull() && m_basic_auth_parameters_isValid;

    m_o_auth_parameters_isValid = ::OpenAPI::fromJsonValue(m_o_auth_parameters, json[QString("OAuthParameters")]);
    m_o_auth_parameters_isSet = !json[QString("OAuthParameters")].isNull() && m_o_auth_parameters_isValid;

    m_api_key_auth_parameters_isValid = ::OpenAPI::fromJsonValue(m_api_key_auth_parameters, json[QString("ApiKeyAuthParameters")]);
    m_api_key_auth_parameters_isSet = !json[QString("ApiKeyAuthParameters")].isNull() && m_api_key_auth_parameters_isValid;

    m_invocation_http_parameters_isValid = ::OpenAPI::fromJsonValue(m_invocation_http_parameters, json[QString("InvocationHttpParameters")]);
    m_invocation_http_parameters_isSet = !json[QString("InvocationHttpParameters")].isNull() && m_invocation_http_parameters_isValid;
}

QString OAIUpdateConnectionRequest_AuthParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateConnectionRequest_AuthParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_basic_auth_parameters.isSet()) {
        obj.insert(QString("BasicAuthParameters"), ::OpenAPI::toJsonValue(m_basic_auth_parameters));
    }
    if (m_o_auth_parameters.isSet()) {
        obj.insert(QString("OAuthParameters"), ::OpenAPI::toJsonValue(m_o_auth_parameters));
    }
    if (m_api_key_auth_parameters.isSet()) {
        obj.insert(QString("ApiKeyAuthParameters"), ::OpenAPI::toJsonValue(m_api_key_auth_parameters));
    }
    if (m_invocation_http_parameters.isSet()) {
        obj.insert(QString("InvocationHttpParameters"), ::OpenAPI::toJsonValue(m_invocation_http_parameters));
    }
    return obj;
}

OAIUpdateConnectionAuthRequestParameters_BasicAuthParameters OAIUpdateConnectionRequest_AuthParameters::getBasicAuthParameters() const {
    return m_basic_auth_parameters;
}
void OAIUpdateConnectionRequest_AuthParameters::setBasicAuthParameters(const OAIUpdateConnectionAuthRequestParameters_BasicAuthParameters &basic_auth_parameters) {
    m_basic_auth_parameters = basic_auth_parameters;
    m_basic_auth_parameters_isSet = true;
}

bool OAIUpdateConnectionRequest_AuthParameters::is_basic_auth_parameters_Set() const{
    return m_basic_auth_parameters_isSet;
}

bool OAIUpdateConnectionRequest_AuthParameters::is_basic_auth_parameters_Valid() const{
    return m_basic_auth_parameters_isValid;
}

OAIUpdateConnectionAuthRequestParameters_OAuthParameters OAIUpdateConnectionRequest_AuthParameters::getOAuthParameters() const {
    return m_o_auth_parameters;
}
void OAIUpdateConnectionRequest_AuthParameters::setOAuthParameters(const OAIUpdateConnectionAuthRequestParameters_OAuthParameters &o_auth_parameters) {
    m_o_auth_parameters = o_auth_parameters;
    m_o_auth_parameters_isSet = true;
}

bool OAIUpdateConnectionRequest_AuthParameters::is_o_auth_parameters_Set() const{
    return m_o_auth_parameters_isSet;
}

bool OAIUpdateConnectionRequest_AuthParameters::is_o_auth_parameters_Valid() const{
    return m_o_auth_parameters_isValid;
}

OAIUpdateConnectionAuthRequestParameters_ApiKeyAuthParameters OAIUpdateConnectionRequest_AuthParameters::getApiKeyAuthParameters() const {
    return m_api_key_auth_parameters;
}
void OAIUpdateConnectionRequest_AuthParameters::setApiKeyAuthParameters(const OAIUpdateConnectionAuthRequestParameters_ApiKeyAuthParameters &api_key_auth_parameters) {
    m_api_key_auth_parameters = api_key_auth_parameters;
    m_api_key_auth_parameters_isSet = true;
}

bool OAIUpdateConnectionRequest_AuthParameters::is_api_key_auth_parameters_Set() const{
    return m_api_key_auth_parameters_isSet;
}

bool OAIUpdateConnectionRequest_AuthParameters::is_api_key_auth_parameters_Valid() const{
    return m_api_key_auth_parameters_isValid;
}

OAIUpdateConnectionAuthRequestParameters_InvocationHttpParameters OAIUpdateConnectionRequest_AuthParameters::getInvocationHttpParameters() const {
    return m_invocation_http_parameters;
}
void OAIUpdateConnectionRequest_AuthParameters::setInvocationHttpParameters(const OAIUpdateConnectionAuthRequestParameters_InvocationHttpParameters &invocation_http_parameters) {
    m_invocation_http_parameters = invocation_http_parameters;
    m_invocation_http_parameters_isSet = true;
}

bool OAIUpdateConnectionRequest_AuthParameters::is_invocation_http_parameters_Set() const{
    return m_invocation_http_parameters_isSet;
}

bool OAIUpdateConnectionRequest_AuthParameters::is_invocation_http_parameters_Valid() const{
    return m_invocation_http_parameters_isValid;
}

bool OAIUpdateConnectionRequest_AuthParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_basic_auth_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_o_auth_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_key_auth_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invocation_http_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateConnectionRequest_AuthParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
