/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListRuleNamesByTargetRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListRuleNamesByTargetRequest::OAIListRuleNamesByTargetRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListRuleNamesByTargetRequest::OAIListRuleNamesByTargetRequest() {
    this->initializeModel();
}

OAIListRuleNamesByTargetRequest::~OAIListRuleNamesByTargetRequest() {}

void OAIListRuleNamesByTargetRequest::initializeModel() {

    m_target_arn_isSet = false;
    m_target_arn_isValid = false;

    m_event_bus_name_isSet = false;
    m_event_bus_name_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;
}

void OAIListRuleNamesByTargetRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListRuleNamesByTargetRequest::fromJsonObject(QJsonObject json) {

    m_target_arn_isValid = ::OpenAPI::fromJsonValue(m_target_arn, json[QString("TargetArn")]);
    m_target_arn_isSet = !json[QString("TargetArn")].isNull() && m_target_arn_isValid;

    m_event_bus_name_isValid = ::OpenAPI::fromJsonValue(m_event_bus_name, json[QString("EventBusName")]);
    m_event_bus_name_isSet = !json[QString("EventBusName")].isNull() && m_event_bus_name_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("Limit")]);
    m_limit_isSet = !json[QString("Limit")].isNull() && m_limit_isValid;
}

QString OAIListRuleNamesByTargetRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListRuleNamesByTargetRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_target_arn_isSet) {
        obj.insert(QString("TargetArn"), ::OpenAPI::toJsonValue(m_target_arn));
    }
    if (m_event_bus_name_isSet) {
        obj.insert(QString("EventBusName"), ::OpenAPI::toJsonValue(m_event_bus_name));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_limit_isSet) {
        obj.insert(QString("Limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    return obj;
}

QString OAIListRuleNamesByTargetRequest::getTargetArn() const {
    return m_target_arn;
}
void OAIListRuleNamesByTargetRequest::setTargetArn(const QString &target_arn) {
    m_target_arn = target_arn;
    m_target_arn_isSet = true;
}

bool OAIListRuleNamesByTargetRequest::is_target_arn_Set() const{
    return m_target_arn_isSet;
}

bool OAIListRuleNamesByTargetRequest::is_target_arn_Valid() const{
    return m_target_arn_isValid;
}

QString OAIListRuleNamesByTargetRequest::getEventBusName() const {
    return m_event_bus_name;
}
void OAIListRuleNamesByTargetRequest::setEventBusName(const QString &event_bus_name) {
    m_event_bus_name = event_bus_name;
    m_event_bus_name_isSet = true;
}

bool OAIListRuleNamesByTargetRequest::is_event_bus_name_Set() const{
    return m_event_bus_name_isSet;
}

bool OAIListRuleNamesByTargetRequest::is_event_bus_name_Valid() const{
    return m_event_bus_name_isValid;
}

QString OAIListRuleNamesByTargetRequest::getNextToken() const {
    return m_next_token;
}
void OAIListRuleNamesByTargetRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListRuleNamesByTargetRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListRuleNamesByTargetRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListRuleNamesByTargetRequest::getLimit() const {
    return m_limit;
}
void OAIListRuleNamesByTargetRequest::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIListRuleNamesByTargetRequest::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIListRuleNamesByTargetRequest::is_limit_Valid() const{
    return m_limit_isValid;
}

bool OAIListRuleNamesByTargetRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_bus_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListRuleNamesByTargetRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_target_arn_isValid && true;
}

} // namespace OpenAPI
