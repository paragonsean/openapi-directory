/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPutEventsRequestEntry.h
 *
 * Represents an event to be submitted.
 */

#ifndef OAIPutEventsRequestEntry_H
#define OAIPutEventsRequestEntry_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPutEventsRequestEntry : public OAIObject {
public:
    OAIPutEventsRequestEntry();
    OAIPutEventsRequestEntry(QString json);
    ~OAIPutEventsRequestEntry() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getTime() const;
    void setTime(const QDateTime &time);
    bool is_time_Set() const;
    bool is_time_Valid() const;

    QString getSource() const;
    void setSource(const QString &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    QList getResources() const;
    void setResources(const QList &resources);
    bool is_resources_Set() const;
    bool is_resources_Valid() const;

    QString getDetailType() const;
    void setDetailType(const QString &detail_type);
    bool is_detail_type_Set() const;
    bool is_detail_type_Valid() const;

    QString getDetail() const;
    void setDetail(const QString &detail);
    bool is_detail_Set() const;
    bool is_detail_Valid() const;

    QString getEventBusName() const;
    void setEventBusName(const QString &event_bus_name);
    bool is_event_bus_name_Set() const;
    bool is_event_bus_name_Valid() const;

    QString getTraceHeader() const;
    void setTraceHeader(const QString &trace_header);
    bool is_trace_header_Set() const;
    bool is_trace_header_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_time;
    bool m_time_isSet;
    bool m_time_isValid;

    QString m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    QList m_resources;
    bool m_resources_isSet;
    bool m_resources_isValid;

    QString m_detail_type;
    bool m_detail_type_isSet;
    bool m_detail_type_isValid;

    QString m_detail;
    bool m_detail_isSet;
    bool m_detail_isValid;

    QString m_event_bus_name;
    bool m_event_bus_name_isSet;
    bool m_event_bus_name_isValid;

    QString m_trace_header;
    bool m_trace_header_isSet;
    bool m_trace_header_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPutEventsRequestEntry)

#endif // OAIPutEventsRequestEntry_H
