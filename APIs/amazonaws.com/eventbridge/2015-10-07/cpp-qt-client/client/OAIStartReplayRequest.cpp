/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartReplayRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartReplayRequest::OAIStartReplayRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartReplayRequest::OAIStartReplayRequest() {
    this->initializeModel();
}

OAIStartReplayRequest::~OAIStartReplayRequest() {}

void OAIStartReplayRequest::initializeModel() {

    m_replay_name_isSet = false;
    m_replay_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_event_source_arn_isSet = false;
    m_event_source_arn_isValid = false;

    m_event_start_time_isSet = false;
    m_event_start_time_isValid = false;

    m_event_end_time_isSet = false;
    m_event_end_time_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;
}

void OAIStartReplayRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartReplayRequest::fromJsonObject(QJsonObject json) {

    m_replay_name_isValid = ::OpenAPI::fromJsonValue(m_replay_name, json[QString("ReplayName")]);
    m_replay_name_isSet = !json[QString("ReplayName")].isNull() && m_replay_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_event_source_arn_isValid = ::OpenAPI::fromJsonValue(m_event_source_arn, json[QString("EventSourceArn")]);
    m_event_source_arn_isSet = !json[QString("EventSourceArn")].isNull() && m_event_source_arn_isValid;

    m_event_start_time_isValid = ::OpenAPI::fromJsonValue(m_event_start_time, json[QString("EventStartTime")]);
    m_event_start_time_isSet = !json[QString("EventStartTime")].isNull() && m_event_start_time_isValid;

    m_event_end_time_isValid = ::OpenAPI::fromJsonValue(m_event_end_time, json[QString("EventEndTime")]);
    m_event_end_time_isSet = !json[QString("EventEndTime")].isNull() && m_event_end_time_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("Destination")]);
    m_destination_isSet = !json[QString("Destination")].isNull() && m_destination_isValid;
}

QString OAIStartReplayRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartReplayRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_replay_name_isSet) {
        obj.insert(QString("ReplayName"), ::OpenAPI::toJsonValue(m_replay_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_event_source_arn_isSet) {
        obj.insert(QString("EventSourceArn"), ::OpenAPI::toJsonValue(m_event_source_arn));
    }
    if (m_event_start_time_isSet) {
        obj.insert(QString("EventStartTime"), ::OpenAPI::toJsonValue(m_event_start_time));
    }
    if (m_event_end_time_isSet) {
        obj.insert(QString("EventEndTime"), ::OpenAPI::toJsonValue(m_event_end_time));
    }
    if (m_destination.isSet()) {
        obj.insert(QString("Destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    return obj;
}

QString OAIStartReplayRequest::getReplayName() const {
    return m_replay_name;
}
void OAIStartReplayRequest::setReplayName(const QString &replay_name) {
    m_replay_name = replay_name;
    m_replay_name_isSet = true;
}

bool OAIStartReplayRequest::is_replay_name_Set() const{
    return m_replay_name_isSet;
}

bool OAIStartReplayRequest::is_replay_name_Valid() const{
    return m_replay_name_isValid;
}

QString OAIStartReplayRequest::getDescription() const {
    return m_description;
}
void OAIStartReplayRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStartReplayRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStartReplayRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIStartReplayRequest::getEventSourceArn() const {
    return m_event_source_arn;
}
void OAIStartReplayRequest::setEventSourceArn(const QString &event_source_arn) {
    m_event_source_arn = event_source_arn;
    m_event_source_arn_isSet = true;
}

bool OAIStartReplayRequest::is_event_source_arn_Set() const{
    return m_event_source_arn_isSet;
}

bool OAIStartReplayRequest::is_event_source_arn_Valid() const{
    return m_event_source_arn_isValid;
}

QDateTime OAIStartReplayRequest::getEventStartTime() const {
    return m_event_start_time;
}
void OAIStartReplayRequest::setEventStartTime(const QDateTime &event_start_time) {
    m_event_start_time = event_start_time;
    m_event_start_time_isSet = true;
}

bool OAIStartReplayRequest::is_event_start_time_Set() const{
    return m_event_start_time_isSet;
}

bool OAIStartReplayRequest::is_event_start_time_Valid() const{
    return m_event_start_time_isValid;
}

QDateTime OAIStartReplayRequest::getEventEndTime() const {
    return m_event_end_time;
}
void OAIStartReplayRequest::setEventEndTime(const QDateTime &event_end_time) {
    m_event_end_time = event_end_time;
    m_event_end_time_isSet = true;
}

bool OAIStartReplayRequest::is_event_end_time_Set() const{
    return m_event_end_time_isSet;
}

bool OAIStartReplayRequest::is_event_end_time_Valid() const{
    return m_event_end_time_isValid;
}

OAIStartReplayRequest_Destination OAIStartReplayRequest::getDestination() const {
    return m_destination;
}
void OAIStartReplayRequest::setDestination(const OAIStartReplayRequest_Destination &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIStartReplayRequest::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIStartReplayRequest::is_destination_Valid() const{
    return m_destination_isValid;
}

bool OAIStartReplayRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_replay_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_source_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartReplayRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_replay_name_isValid && m_event_source_arn_isValid && m_event_start_time_isValid && m_event_end_time_isValid && m_destination_isValid && true;
}

} // namespace OpenAPI
