/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateApiDestinationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateApiDestinationRequest::OAIUpdateApiDestinationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateApiDestinationRequest::OAIUpdateApiDestinationRequest() {
    this->initializeModel();
}

OAIUpdateApiDestinationRequest::~OAIUpdateApiDestinationRequest() {}

void OAIUpdateApiDestinationRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_connection_arn_isSet = false;
    m_connection_arn_isValid = false;

    m_invocation_endpoint_isSet = false;
    m_invocation_endpoint_isValid = false;

    m_http_method_isSet = false;
    m_http_method_isValid = false;

    m_invocation_rate_limit_per_second_isSet = false;
    m_invocation_rate_limit_per_second_isValid = false;
}

void OAIUpdateApiDestinationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateApiDestinationRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_connection_arn_isValid = ::OpenAPI::fromJsonValue(m_connection_arn, json[QString("ConnectionArn")]);
    m_connection_arn_isSet = !json[QString("ConnectionArn")].isNull() && m_connection_arn_isValid;

    m_invocation_endpoint_isValid = ::OpenAPI::fromJsonValue(m_invocation_endpoint, json[QString("InvocationEndpoint")]);
    m_invocation_endpoint_isSet = !json[QString("InvocationEndpoint")].isNull() && m_invocation_endpoint_isValid;

    m_http_method_isValid = ::OpenAPI::fromJsonValue(m_http_method, json[QString("HttpMethod")]);
    m_http_method_isSet = !json[QString("HttpMethod")].isNull() && m_http_method_isValid;

    m_invocation_rate_limit_per_second_isValid = ::OpenAPI::fromJsonValue(m_invocation_rate_limit_per_second, json[QString("InvocationRateLimitPerSecond")]);
    m_invocation_rate_limit_per_second_isSet = !json[QString("InvocationRateLimitPerSecond")].isNull() && m_invocation_rate_limit_per_second_isValid;
}

QString OAIUpdateApiDestinationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateApiDestinationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_connection_arn_isSet) {
        obj.insert(QString("ConnectionArn"), ::OpenAPI::toJsonValue(m_connection_arn));
    }
    if (m_invocation_endpoint_isSet) {
        obj.insert(QString("InvocationEndpoint"), ::OpenAPI::toJsonValue(m_invocation_endpoint));
    }
    if (m_http_method.isSet()) {
        obj.insert(QString("HttpMethod"), ::OpenAPI::toJsonValue(m_http_method));
    }
    if (m_invocation_rate_limit_per_second_isSet) {
        obj.insert(QString("InvocationRateLimitPerSecond"), ::OpenAPI::toJsonValue(m_invocation_rate_limit_per_second));
    }
    return obj;
}

QString OAIUpdateApiDestinationRequest::getName() const {
    return m_name;
}
void OAIUpdateApiDestinationRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateApiDestinationRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateApiDestinationRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateApiDestinationRequest::getDescription() const {
    return m_description;
}
void OAIUpdateApiDestinationRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateApiDestinationRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateApiDestinationRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUpdateApiDestinationRequest::getConnectionArn() const {
    return m_connection_arn;
}
void OAIUpdateApiDestinationRequest::setConnectionArn(const QString &connection_arn) {
    m_connection_arn = connection_arn;
    m_connection_arn_isSet = true;
}

bool OAIUpdateApiDestinationRequest::is_connection_arn_Set() const{
    return m_connection_arn_isSet;
}

bool OAIUpdateApiDestinationRequest::is_connection_arn_Valid() const{
    return m_connection_arn_isValid;
}

QString OAIUpdateApiDestinationRequest::getInvocationEndpoint() const {
    return m_invocation_endpoint;
}
void OAIUpdateApiDestinationRequest::setInvocationEndpoint(const QString &invocation_endpoint) {
    m_invocation_endpoint = invocation_endpoint;
    m_invocation_endpoint_isSet = true;
}

bool OAIUpdateApiDestinationRequest::is_invocation_endpoint_Set() const{
    return m_invocation_endpoint_isSet;
}

bool OAIUpdateApiDestinationRequest::is_invocation_endpoint_Valid() const{
    return m_invocation_endpoint_isValid;
}

OAIApiDestinationHttpMethod OAIUpdateApiDestinationRequest::getHttpMethod() const {
    return m_http_method;
}
void OAIUpdateApiDestinationRequest::setHttpMethod(const OAIApiDestinationHttpMethod &http_method) {
    m_http_method = http_method;
    m_http_method_isSet = true;
}

bool OAIUpdateApiDestinationRequest::is_http_method_Set() const{
    return m_http_method_isSet;
}

bool OAIUpdateApiDestinationRequest::is_http_method_Valid() const{
    return m_http_method_isValid;
}

qint32 OAIUpdateApiDestinationRequest::getInvocationRateLimitPerSecond() const {
    return m_invocation_rate_limit_per_second;
}
void OAIUpdateApiDestinationRequest::setInvocationRateLimitPerSecond(const qint32 &invocation_rate_limit_per_second) {
    m_invocation_rate_limit_per_second = invocation_rate_limit_per_second;
    m_invocation_rate_limit_per_second_isSet = true;
}

bool OAIUpdateApiDestinationRequest::is_invocation_rate_limit_per_second_Set() const{
    return m_invocation_rate_limit_per_second_isSet;
}

bool OAIUpdateApiDestinationRequest::is_invocation_rate_limit_per_second_Valid() const{
    return m_invocation_rate_limit_per_second_isValid;
}

bool OAIUpdateApiDestinationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invocation_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invocation_rate_limit_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateApiDestinationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
