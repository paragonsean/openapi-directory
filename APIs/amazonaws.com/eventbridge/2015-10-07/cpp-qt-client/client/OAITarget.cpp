/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITarget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITarget::OAITarget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITarget::OAITarget() {
    this->initializeModel();
}

OAITarget::~OAITarget() {}

void OAITarget::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;

    m_input_path_isSet = false;
    m_input_path_isValid = false;

    m_input_transformer_isSet = false;
    m_input_transformer_isValid = false;

    m_kinesis_parameters_isSet = false;
    m_kinesis_parameters_isValid = false;

    m_run_command_parameters_isSet = false;
    m_run_command_parameters_isValid = false;

    m_ecs_parameters_isSet = false;
    m_ecs_parameters_isValid = false;

    m_batch_parameters_isSet = false;
    m_batch_parameters_isValid = false;

    m_sqs_parameters_isSet = false;
    m_sqs_parameters_isValid = false;

    m_http_parameters_isSet = false;
    m_http_parameters_isValid = false;

    m_redshift_data_parameters_isSet = false;
    m_redshift_data_parameters_isValid = false;

    m_sage_maker_pipeline_parameters_isSet = false;
    m_sage_maker_pipeline_parameters_isValid = false;

    m_dead_letter_config_isSet = false;
    m_dead_letter_config_isValid = false;

    m_retry_policy_isSet = false;
    m_retry_policy_isValid = false;
}

void OAITarget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITarget::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("Input")]);
    m_input_isSet = !json[QString("Input")].isNull() && m_input_isValid;

    m_input_path_isValid = ::OpenAPI::fromJsonValue(m_input_path, json[QString("InputPath")]);
    m_input_path_isSet = !json[QString("InputPath")].isNull() && m_input_path_isValid;

    m_input_transformer_isValid = ::OpenAPI::fromJsonValue(m_input_transformer, json[QString("InputTransformer")]);
    m_input_transformer_isSet = !json[QString("InputTransformer")].isNull() && m_input_transformer_isValid;

    m_kinesis_parameters_isValid = ::OpenAPI::fromJsonValue(m_kinesis_parameters, json[QString("KinesisParameters")]);
    m_kinesis_parameters_isSet = !json[QString("KinesisParameters")].isNull() && m_kinesis_parameters_isValid;

    m_run_command_parameters_isValid = ::OpenAPI::fromJsonValue(m_run_command_parameters, json[QString("RunCommandParameters")]);
    m_run_command_parameters_isSet = !json[QString("RunCommandParameters")].isNull() && m_run_command_parameters_isValid;

    m_ecs_parameters_isValid = ::OpenAPI::fromJsonValue(m_ecs_parameters, json[QString("EcsParameters")]);
    m_ecs_parameters_isSet = !json[QString("EcsParameters")].isNull() && m_ecs_parameters_isValid;

    m_batch_parameters_isValid = ::OpenAPI::fromJsonValue(m_batch_parameters, json[QString("BatchParameters")]);
    m_batch_parameters_isSet = !json[QString("BatchParameters")].isNull() && m_batch_parameters_isValid;

    m_sqs_parameters_isValid = ::OpenAPI::fromJsonValue(m_sqs_parameters, json[QString("SqsParameters")]);
    m_sqs_parameters_isSet = !json[QString("SqsParameters")].isNull() && m_sqs_parameters_isValid;

    m_http_parameters_isValid = ::OpenAPI::fromJsonValue(m_http_parameters, json[QString("HttpParameters")]);
    m_http_parameters_isSet = !json[QString("HttpParameters")].isNull() && m_http_parameters_isValid;

    m_redshift_data_parameters_isValid = ::OpenAPI::fromJsonValue(m_redshift_data_parameters, json[QString("RedshiftDataParameters")]);
    m_redshift_data_parameters_isSet = !json[QString("RedshiftDataParameters")].isNull() && m_redshift_data_parameters_isValid;

    m_sage_maker_pipeline_parameters_isValid = ::OpenAPI::fromJsonValue(m_sage_maker_pipeline_parameters, json[QString("SageMakerPipelineParameters")]);
    m_sage_maker_pipeline_parameters_isSet = !json[QString("SageMakerPipelineParameters")].isNull() && m_sage_maker_pipeline_parameters_isValid;

    m_dead_letter_config_isValid = ::OpenAPI::fromJsonValue(m_dead_letter_config, json[QString("DeadLetterConfig")]);
    m_dead_letter_config_isSet = !json[QString("DeadLetterConfig")].isNull() && m_dead_letter_config_isValid;

    m_retry_policy_isValid = ::OpenAPI::fromJsonValue(m_retry_policy, json[QString("RetryPolicy")]);
    m_retry_policy_isSet = !json[QString("RetryPolicy")].isNull() && m_retry_policy_isValid;
}

QString OAITarget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITarget::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_input_isSet) {
        obj.insert(QString("Input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_input_path_isSet) {
        obj.insert(QString("InputPath"), ::OpenAPI::toJsonValue(m_input_path));
    }
    if (m_input_transformer.isSet()) {
        obj.insert(QString("InputTransformer"), ::OpenAPI::toJsonValue(m_input_transformer));
    }
    if (m_kinesis_parameters.isSet()) {
        obj.insert(QString("KinesisParameters"), ::OpenAPI::toJsonValue(m_kinesis_parameters));
    }
    if (m_run_command_parameters.isSet()) {
        obj.insert(QString("RunCommandParameters"), ::OpenAPI::toJsonValue(m_run_command_parameters));
    }
    if (m_ecs_parameters.isSet()) {
        obj.insert(QString("EcsParameters"), ::OpenAPI::toJsonValue(m_ecs_parameters));
    }
    if (m_batch_parameters.isSet()) {
        obj.insert(QString("BatchParameters"), ::OpenAPI::toJsonValue(m_batch_parameters));
    }
    if (m_sqs_parameters.isSet()) {
        obj.insert(QString("SqsParameters"), ::OpenAPI::toJsonValue(m_sqs_parameters));
    }
    if (m_http_parameters.isSet()) {
        obj.insert(QString("HttpParameters"), ::OpenAPI::toJsonValue(m_http_parameters));
    }
    if (m_redshift_data_parameters.isSet()) {
        obj.insert(QString("RedshiftDataParameters"), ::OpenAPI::toJsonValue(m_redshift_data_parameters));
    }
    if (m_sage_maker_pipeline_parameters.isSet()) {
        obj.insert(QString("SageMakerPipelineParameters"), ::OpenAPI::toJsonValue(m_sage_maker_pipeline_parameters));
    }
    if (m_dead_letter_config.isSet()) {
        obj.insert(QString("DeadLetterConfig"), ::OpenAPI::toJsonValue(m_dead_letter_config));
    }
    if (m_retry_policy.isSet()) {
        obj.insert(QString("RetryPolicy"), ::OpenAPI::toJsonValue(m_retry_policy));
    }
    return obj;
}

QString OAITarget::getId() const {
    return m_id;
}
void OAITarget::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITarget::is_id_Set() const{
    return m_id_isSet;
}

bool OAITarget::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITarget::getArn() const {
    return m_arn;
}
void OAITarget::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAITarget::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAITarget::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAITarget::getRoleArn() const {
    return m_role_arn;
}
void OAITarget::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAITarget::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAITarget::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QString OAITarget::getInput() const {
    return m_input;
}
void OAITarget::setInput(const QString &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAITarget::is_input_Set() const{
    return m_input_isSet;
}

bool OAITarget::is_input_Valid() const{
    return m_input_isValid;
}

QString OAITarget::getInputPath() const {
    return m_input_path;
}
void OAITarget::setInputPath(const QString &input_path) {
    m_input_path = input_path;
    m_input_path_isSet = true;
}

bool OAITarget::is_input_path_Set() const{
    return m_input_path_isSet;
}

bool OAITarget::is_input_path_Valid() const{
    return m_input_path_isValid;
}

OAITarget_InputTransformer OAITarget::getInputTransformer() const {
    return m_input_transformer;
}
void OAITarget::setInputTransformer(const OAITarget_InputTransformer &input_transformer) {
    m_input_transformer = input_transformer;
    m_input_transformer_isSet = true;
}

bool OAITarget::is_input_transformer_Set() const{
    return m_input_transformer_isSet;
}

bool OAITarget::is_input_transformer_Valid() const{
    return m_input_transformer_isValid;
}

OAITarget_KinesisParameters OAITarget::getKinesisParameters() const {
    return m_kinesis_parameters;
}
void OAITarget::setKinesisParameters(const OAITarget_KinesisParameters &kinesis_parameters) {
    m_kinesis_parameters = kinesis_parameters;
    m_kinesis_parameters_isSet = true;
}

bool OAITarget::is_kinesis_parameters_Set() const{
    return m_kinesis_parameters_isSet;
}

bool OAITarget::is_kinesis_parameters_Valid() const{
    return m_kinesis_parameters_isValid;
}

OAITarget_RunCommandParameters OAITarget::getRunCommandParameters() const {
    return m_run_command_parameters;
}
void OAITarget::setRunCommandParameters(const OAITarget_RunCommandParameters &run_command_parameters) {
    m_run_command_parameters = run_command_parameters;
    m_run_command_parameters_isSet = true;
}

bool OAITarget::is_run_command_parameters_Set() const{
    return m_run_command_parameters_isSet;
}

bool OAITarget::is_run_command_parameters_Valid() const{
    return m_run_command_parameters_isValid;
}

OAITarget_EcsParameters OAITarget::getEcsParameters() const {
    return m_ecs_parameters;
}
void OAITarget::setEcsParameters(const OAITarget_EcsParameters &ecs_parameters) {
    m_ecs_parameters = ecs_parameters;
    m_ecs_parameters_isSet = true;
}

bool OAITarget::is_ecs_parameters_Set() const{
    return m_ecs_parameters_isSet;
}

bool OAITarget::is_ecs_parameters_Valid() const{
    return m_ecs_parameters_isValid;
}

OAITarget_BatchParameters OAITarget::getBatchParameters() const {
    return m_batch_parameters;
}
void OAITarget::setBatchParameters(const OAITarget_BatchParameters &batch_parameters) {
    m_batch_parameters = batch_parameters;
    m_batch_parameters_isSet = true;
}

bool OAITarget::is_batch_parameters_Set() const{
    return m_batch_parameters_isSet;
}

bool OAITarget::is_batch_parameters_Valid() const{
    return m_batch_parameters_isValid;
}

OAITarget_SqsParameters OAITarget::getSqsParameters() const {
    return m_sqs_parameters;
}
void OAITarget::setSqsParameters(const OAITarget_SqsParameters &sqs_parameters) {
    m_sqs_parameters = sqs_parameters;
    m_sqs_parameters_isSet = true;
}

bool OAITarget::is_sqs_parameters_Set() const{
    return m_sqs_parameters_isSet;
}

bool OAITarget::is_sqs_parameters_Valid() const{
    return m_sqs_parameters_isValid;
}

OAITarget_HttpParameters OAITarget::getHttpParameters() const {
    return m_http_parameters;
}
void OAITarget::setHttpParameters(const OAITarget_HttpParameters &http_parameters) {
    m_http_parameters = http_parameters;
    m_http_parameters_isSet = true;
}

bool OAITarget::is_http_parameters_Set() const{
    return m_http_parameters_isSet;
}

bool OAITarget::is_http_parameters_Valid() const{
    return m_http_parameters_isValid;
}

OAITarget_RedshiftDataParameters OAITarget::getRedshiftDataParameters() const {
    return m_redshift_data_parameters;
}
void OAITarget::setRedshiftDataParameters(const OAITarget_RedshiftDataParameters &redshift_data_parameters) {
    m_redshift_data_parameters = redshift_data_parameters;
    m_redshift_data_parameters_isSet = true;
}

bool OAITarget::is_redshift_data_parameters_Set() const{
    return m_redshift_data_parameters_isSet;
}

bool OAITarget::is_redshift_data_parameters_Valid() const{
    return m_redshift_data_parameters_isValid;
}

OAITarget_SageMakerPipelineParameters OAITarget::getSageMakerPipelineParameters() const {
    return m_sage_maker_pipeline_parameters;
}
void OAITarget::setSageMakerPipelineParameters(const OAITarget_SageMakerPipelineParameters &sage_maker_pipeline_parameters) {
    m_sage_maker_pipeline_parameters = sage_maker_pipeline_parameters;
    m_sage_maker_pipeline_parameters_isSet = true;
}

bool OAITarget::is_sage_maker_pipeline_parameters_Set() const{
    return m_sage_maker_pipeline_parameters_isSet;
}

bool OAITarget::is_sage_maker_pipeline_parameters_Valid() const{
    return m_sage_maker_pipeline_parameters_isValid;
}

OAITarget_DeadLetterConfig OAITarget::getDeadLetterConfig() const {
    return m_dead_letter_config;
}
void OAITarget::setDeadLetterConfig(const OAITarget_DeadLetterConfig &dead_letter_config) {
    m_dead_letter_config = dead_letter_config;
    m_dead_letter_config_isSet = true;
}

bool OAITarget::is_dead_letter_config_Set() const{
    return m_dead_letter_config_isSet;
}

bool OAITarget::is_dead_letter_config_Valid() const{
    return m_dead_letter_config_isValid;
}

OAITarget_RetryPolicy OAITarget::getRetryPolicy() const {
    return m_retry_policy;
}
void OAITarget::setRetryPolicy(const OAITarget_RetryPolicy &retry_policy) {
    m_retry_policy = retry_policy;
    m_retry_policy_isSet = true;
}

bool OAITarget::is_retry_policy_Set() const{
    return m_retry_policy_isSet;
}

bool OAITarget::is_retry_policy_Valid() const{
    return m_retry_policy_isValid;
}

bool OAITarget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_transformer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kinesis_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_command_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ecs_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sqs_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redshift_data_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sage_maker_pipeline_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dead_letter_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITarget::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_arn_isValid && true;
}

} // namespace OpenAPI
