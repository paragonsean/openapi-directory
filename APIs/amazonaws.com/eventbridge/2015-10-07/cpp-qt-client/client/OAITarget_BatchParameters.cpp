/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITarget_BatchParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITarget_BatchParameters::OAITarget_BatchParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITarget_BatchParameters::OAITarget_BatchParameters() {
    this->initializeModel();
}

OAITarget_BatchParameters::~OAITarget_BatchParameters() {}

void OAITarget_BatchParameters::initializeModel() {

    m_job_definition_isSet = false;
    m_job_definition_isValid = false;

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_array_properties_isSet = false;
    m_array_properties_isValid = false;

    m_retry_strategy_isSet = false;
    m_retry_strategy_isValid = false;
}

void OAITarget_BatchParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITarget_BatchParameters::fromJsonObject(QJsonObject json) {

    m_job_definition_isValid = ::OpenAPI::fromJsonValue(m_job_definition, json[QString("JobDefinition")]);
    m_job_definition_isSet = !json[QString("JobDefinition")].isNull() && m_job_definition_isValid;

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("JobName")]);
    m_job_name_isSet = !json[QString("JobName")].isNull() && m_job_name_isValid;

    m_array_properties_isValid = ::OpenAPI::fromJsonValue(m_array_properties, json[QString("ArrayProperties")]);
    m_array_properties_isSet = !json[QString("ArrayProperties")].isNull() && m_array_properties_isValid;

    m_retry_strategy_isValid = ::OpenAPI::fromJsonValue(m_retry_strategy, json[QString("RetryStrategy")]);
    m_retry_strategy_isSet = !json[QString("RetryStrategy")].isNull() && m_retry_strategy_isValid;
}

QString OAITarget_BatchParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITarget_BatchParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_job_definition_isSet) {
        obj.insert(QString("JobDefinition"), ::OpenAPI::toJsonValue(m_job_definition));
    }
    if (m_job_name_isSet) {
        obj.insert(QString("JobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_array_properties.isSet()) {
        obj.insert(QString("ArrayProperties"), ::OpenAPI::toJsonValue(m_array_properties));
    }
    if (m_retry_strategy.isSet()) {
        obj.insert(QString("RetryStrategy"), ::OpenAPI::toJsonValue(m_retry_strategy));
    }
    return obj;
}

QString OAITarget_BatchParameters::getJobDefinition() const {
    return m_job_definition;
}
void OAITarget_BatchParameters::setJobDefinition(const QString &job_definition) {
    m_job_definition = job_definition;
    m_job_definition_isSet = true;
}

bool OAITarget_BatchParameters::is_job_definition_Set() const{
    return m_job_definition_isSet;
}

bool OAITarget_BatchParameters::is_job_definition_Valid() const{
    return m_job_definition_isValid;
}

QString OAITarget_BatchParameters::getJobName() const {
    return m_job_name;
}
void OAITarget_BatchParameters::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAITarget_BatchParameters::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAITarget_BatchParameters::is_job_name_Valid() const{
    return m_job_name_isValid;
}

OAIBatchParameters_ArrayProperties OAITarget_BatchParameters::getArrayProperties() const {
    return m_array_properties;
}
void OAITarget_BatchParameters::setArrayProperties(const OAIBatchParameters_ArrayProperties &array_properties) {
    m_array_properties = array_properties;
    m_array_properties_isSet = true;
}

bool OAITarget_BatchParameters::is_array_properties_Set() const{
    return m_array_properties_isSet;
}

bool OAITarget_BatchParameters::is_array_properties_Valid() const{
    return m_array_properties_isValid;
}

OAIBatchParameters_RetryStrategy OAITarget_BatchParameters::getRetryStrategy() const {
    return m_retry_strategy;
}
void OAITarget_BatchParameters::setRetryStrategy(const OAIBatchParameters_RetryStrategy &retry_strategy) {
    m_retry_strategy = retry_strategy;
    m_retry_strategy_isSet = true;
}

bool OAITarget_BatchParameters::is_retry_strategy_Set() const{
    return m_retry_strategy_isSet;
}

bool OAITarget_BatchParameters::is_retry_strategy_Valid() const{
    return m_retry_strategy_isValid;
}

bool OAITarget_BatchParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_array_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITarget_BatchParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_job_definition_isValid && m_job_name_isValid && true;
}

} // namespace OpenAPI
