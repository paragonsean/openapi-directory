/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRedshiftDataParameters.h
 *
 * These are custom parameters to be used when the target is a Amazon Redshift cluster or Redshift Serverless workgroup to invoke the Amazon Redshift Data API ExecuteStatement based on EventBridge events.
 */

#ifndef OAIRedshiftDataParameters_H
#define OAIRedshiftDataParameters_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRedshiftDataParameters : public OAIObject {
public:
    OAIRedshiftDataParameters();
    OAIRedshiftDataParameters(QString json);
    ~OAIRedshiftDataParameters() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getSecretManagerArn() const;
    void setSecretManagerArn(const QString &secret_manager_arn);
    bool is_secret_manager_arn_Set() const;
    bool is_secret_manager_arn_Valid() const;

    QString getDatabase() const;
    void setDatabase(const QString &database);
    bool is_database_Set() const;
    bool is_database_Valid() const;

    QString getDbUser() const;
    void setDbUser(const QString &db_user);
    bool is_db_user_Set() const;
    bool is_db_user_Valid() const;

    QString getSql() const;
    void setSql(const QString &sql);
    bool is_sql_Set() const;
    bool is_sql_Valid() const;

    QString getStatementName() const;
    void setStatementName(const QString &statement_name);
    bool is_statement_name_Set() const;
    bool is_statement_name_Valid() const;

    bool getWithEvent() const;
    void setWithEvent(const bool &with_event);
    bool is_with_event_Set() const;
    bool is_with_event_Valid() const;

    QList<QString> getSqls() const;
    void setSqls(const QList<QString> &sqls);
    bool is_sqls_Set() const;
    bool is_sqls_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_secret_manager_arn;
    bool m_secret_manager_arn_isSet;
    bool m_secret_manager_arn_isValid;

    QString m_database;
    bool m_database_isSet;
    bool m_database_isValid;

    QString m_db_user;
    bool m_db_user_isSet;
    bool m_db_user_isValid;

    QString m_sql;
    bool m_sql_isSet;
    bool m_sql_isValid;

    QString m_statement_name;
    bool m_statement_name_isSet;
    bool m_statement_name_isValid;

    bool m_with_event;
    bool m_with_event_isSet;
    bool m_with_event_isValid;

    QList<QString> m_sqls;
    bool m_sqls_isSet;
    bool m_sqls_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRedshiftDataParameters)

#endif // OAIRedshiftDataParameters_H
