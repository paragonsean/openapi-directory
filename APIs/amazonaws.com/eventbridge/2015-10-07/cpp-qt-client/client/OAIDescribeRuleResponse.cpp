/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeRuleResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeRuleResponse::OAIDescribeRuleResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeRuleResponse::OAIDescribeRuleResponse() {
    this->initializeModel();
}

OAIDescribeRuleResponse::~OAIDescribeRuleResponse() {}

void OAIDescribeRuleResponse::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_event_pattern_isSet = false;
    m_event_pattern_isValid = false;

    m_schedule_expression_isSet = false;
    m_schedule_expression_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_managed_by_isSet = false;
    m_managed_by_isValid = false;

    m_event_bus_name_isSet = false;
    m_event_bus_name_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;
}

void OAIDescribeRuleResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeRuleResponse::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_event_pattern_isValid = ::OpenAPI::fromJsonValue(m_event_pattern, json[QString("EventPattern")]);
    m_event_pattern_isSet = !json[QString("EventPattern")].isNull() && m_event_pattern_isValid;

    m_schedule_expression_isValid = ::OpenAPI::fromJsonValue(m_schedule_expression, json[QString("ScheduleExpression")]);
    m_schedule_expression_isSet = !json[QString("ScheduleExpression")].isNull() && m_schedule_expression_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_managed_by_isValid = ::OpenAPI::fromJsonValue(m_managed_by, json[QString("ManagedBy")]);
    m_managed_by_isSet = !json[QString("ManagedBy")].isNull() && m_managed_by_isValid;

    m_event_bus_name_isValid = ::OpenAPI::fromJsonValue(m_event_bus_name, json[QString("EventBusName")]);
    m_event_bus_name_isSet = !json[QString("EventBusName")].isNull() && m_event_bus_name_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("CreatedBy")]);
    m_created_by_isSet = !json[QString("CreatedBy")].isNull() && m_created_by_isValid;
}

QString OAIDescribeRuleResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeRuleResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_event_pattern_isSet) {
        obj.insert(QString("EventPattern"), ::OpenAPI::toJsonValue(m_event_pattern));
    }
    if (m_schedule_expression_isSet) {
        obj.insert(QString("ScheduleExpression"), ::OpenAPI::toJsonValue(m_schedule_expression));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_managed_by_isSet) {
        obj.insert(QString("ManagedBy"), ::OpenAPI::toJsonValue(m_managed_by));
    }
    if (m_event_bus_name_isSet) {
        obj.insert(QString("EventBusName"), ::OpenAPI::toJsonValue(m_event_bus_name));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("CreatedBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    return obj;
}

QString OAIDescribeRuleResponse::getName() const {
    return m_name;
}
void OAIDescribeRuleResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeRuleResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeRuleResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDescribeRuleResponse::getArn() const {
    return m_arn;
}
void OAIDescribeRuleResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeRuleResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeRuleResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDescribeRuleResponse::getEventPattern() const {
    return m_event_pattern;
}
void OAIDescribeRuleResponse::setEventPattern(const QString &event_pattern) {
    m_event_pattern = event_pattern;
    m_event_pattern_isSet = true;
}

bool OAIDescribeRuleResponse::is_event_pattern_Set() const{
    return m_event_pattern_isSet;
}

bool OAIDescribeRuleResponse::is_event_pattern_Valid() const{
    return m_event_pattern_isValid;
}

QString OAIDescribeRuleResponse::getScheduleExpression() const {
    return m_schedule_expression;
}
void OAIDescribeRuleResponse::setScheduleExpression(const QString &schedule_expression) {
    m_schedule_expression = schedule_expression;
    m_schedule_expression_isSet = true;
}

bool OAIDescribeRuleResponse::is_schedule_expression_Set() const{
    return m_schedule_expression_isSet;
}

bool OAIDescribeRuleResponse::is_schedule_expression_Valid() const{
    return m_schedule_expression_isValid;
}

OAIRuleState OAIDescribeRuleResponse::getState() const {
    return m_state;
}
void OAIDescribeRuleResponse::setState(const OAIRuleState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDescribeRuleResponse::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDescribeRuleResponse::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIDescribeRuleResponse::getDescription() const {
    return m_description;
}
void OAIDescribeRuleResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribeRuleResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribeRuleResponse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDescribeRuleResponse::getRoleArn() const {
    return m_role_arn;
}
void OAIDescribeRuleResponse::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIDescribeRuleResponse::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIDescribeRuleResponse::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QString OAIDescribeRuleResponse::getManagedBy() const {
    return m_managed_by;
}
void OAIDescribeRuleResponse::setManagedBy(const QString &managed_by) {
    m_managed_by = managed_by;
    m_managed_by_isSet = true;
}

bool OAIDescribeRuleResponse::is_managed_by_Set() const{
    return m_managed_by_isSet;
}

bool OAIDescribeRuleResponse::is_managed_by_Valid() const{
    return m_managed_by_isValid;
}

QString OAIDescribeRuleResponse::getEventBusName() const {
    return m_event_bus_name;
}
void OAIDescribeRuleResponse::setEventBusName(const QString &event_bus_name) {
    m_event_bus_name = event_bus_name;
    m_event_bus_name_isSet = true;
}

bool OAIDescribeRuleResponse::is_event_bus_name_Set() const{
    return m_event_bus_name_isSet;
}

bool OAIDescribeRuleResponse::is_event_bus_name_Valid() const{
    return m_event_bus_name_isValid;
}

QString OAIDescribeRuleResponse::getCreatedBy() const {
    return m_created_by;
}
void OAIDescribeRuleResponse::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIDescribeRuleResponse::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIDescribeRuleResponse::is_created_by_Valid() const{
    return m_created_by_isValid;
}

bool OAIDescribeRuleResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_bus_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeRuleResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
