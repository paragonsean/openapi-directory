/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateArchiveRequest.h
 *
 * 
 */

#ifndef OAICreateArchiveRequest_H
#define OAICreateArchiveRequest_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateArchiveRequest : public OAIObject {
public:
    OAICreateArchiveRequest();
    OAICreateArchiveRequest(QString json);
    ~OAICreateArchiveRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArchiveName() const;
    void setArchiveName(const QString &archive_name);
    bool is_archive_name_Set() const;
    bool is_archive_name_Valid() const;

    QString getEventSourceArn() const;
    void setEventSourceArn(const QString &event_source_arn);
    bool is_event_source_arn_Set() const;
    bool is_event_source_arn_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getEventPattern() const;
    void setEventPattern(const QString &event_pattern);
    bool is_event_pattern_Set() const;
    bool is_event_pattern_Valid() const;

    qint32 getRetentionDays() const;
    void setRetentionDays(const qint32 &retention_days);
    bool is_retention_days_Set() const;
    bool is_retention_days_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_archive_name;
    bool m_archive_name_isSet;
    bool m_archive_name_isValid;

    QString m_event_source_arn;
    bool m_event_source_arn_isSet;
    bool m_event_source_arn_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_event_pattern;
    bool m_event_pattern_isSet;
    bool m_event_pattern_isValid;

    qint32 m_retention_days;
    bool m_retention_days_isSet;
    bool m_retention_days_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateArchiveRequest)

#endif // OAICreateArchiveRequest_H
