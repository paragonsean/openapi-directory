/**
 * Amazon EventBridge
 * <p>Amazon EventBridge helps you to respond to state changes in your Amazon Web Services resources. When your resources change state, they automatically send events to an event stream. You can create rules that match selected events in the stream and route them to targets to take action. You can also use rules to take action on a predetermined schedule. For example, you can configure rules to:</p> <ul> <li> <p>Automatically invoke an Lambda function to update DNS entries when an event notifies you that Amazon EC2 instance enters the running state.</p> </li> <li> <p>Direct specific API records from CloudTrail to an Amazon Kinesis data stream for detailed analysis of potential security or availability risks.</p> </li> <li> <p>Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume.</p> </li> </ul> <p>For more information about the features of Amazon EventBridge, see the <a href=\"https://docs.aws.amazon.com/eventbridge/latest/userguide\">Amazon EventBridge User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2015-10-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListPartnerEventSourcesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListPartnerEventSourcesResponse::OAIListPartnerEventSourcesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListPartnerEventSourcesResponse::OAIListPartnerEventSourcesResponse() {
    this->initializeModel();
}

OAIListPartnerEventSourcesResponse::~OAIListPartnerEventSourcesResponse() {}

void OAIListPartnerEventSourcesResponse::initializeModel() {

    m_partner_event_sources_isSet = false;
    m_partner_event_sources_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListPartnerEventSourcesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListPartnerEventSourcesResponse::fromJsonObject(QJsonObject json) {

    m_partner_event_sources_isValid = ::OpenAPI::fromJsonValue(m_partner_event_sources, json[QString("PartnerEventSources")]);
    m_partner_event_sources_isSet = !json[QString("PartnerEventSources")].isNull() && m_partner_event_sources_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListPartnerEventSourcesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListPartnerEventSourcesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_partner_event_sources.isSet()) {
        obj.insert(QString("PartnerEventSources"), ::OpenAPI::toJsonValue(m_partner_event_sources));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListPartnerEventSourcesResponse::getPartnerEventSources() const {
    return m_partner_event_sources;
}
void OAIListPartnerEventSourcesResponse::setPartnerEventSources(const QList &partner_event_sources) {
    m_partner_event_sources = partner_event_sources;
    m_partner_event_sources_isSet = true;
}

bool OAIListPartnerEventSourcesResponse::is_partner_event_sources_Set() const{
    return m_partner_event_sources_isSet;
}

bool OAIListPartnerEventSourcesResponse::is_partner_event_sources_Valid() const{
    return m_partner_event_sources_isValid;
}

QString OAIListPartnerEventSourcesResponse::getNextToken() const {
    return m_next_token;
}
void OAIListPartnerEventSourcesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListPartnerEventSourcesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListPartnerEventSourcesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListPartnerEventSourcesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_partner_event_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListPartnerEventSourcesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
