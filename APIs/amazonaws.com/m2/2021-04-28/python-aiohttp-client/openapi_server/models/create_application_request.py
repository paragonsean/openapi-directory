# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_application_request_definition import CreateApplicationRequestDefinition
import re
from openapi_server import util


class CreateApplicationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, definition: CreateApplicationRequestDefinition=None, description: str=None, engine_type: str=None, kms_key_id: str=None, name: str=None, role_arn: str=None, tags: Dict[str, str]=None):
        """CreateApplicationRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateApplicationRequest.
        :param definition: The definition of this CreateApplicationRequest.
        :param description: The description of this CreateApplicationRequest.
        :param engine_type: The engine_type of this CreateApplicationRequest.
        :param kms_key_id: The kms_key_id of this CreateApplicationRequest.
        :param name: The name of this CreateApplicationRequest.
        :param role_arn: The role_arn of this CreateApplicationRequest.
        :param tags: The tags of this CreateApplicationRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'definition': CreateApplicationRequestDefinition,
            'description': str,
            'engine_type': str,
            'kms_key_id': str,
            'name': str,
            'role_arn': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'definition': 'definition',
            'description': 'description',
            'engine_type': 'engineType',
            'kms_key_id': 'kmsKeyId',
            'name': 'name',
            'role_arn': 'roleArn',
            'tags': 'tags'
        }

        self._client_token = client_token
        self._definition = definition
        self._description = description
        self._engine_type = engine_type
        self._kms_key_id = kms_key_id
        self._name = name
        self._role_arn = role_arn
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateApplicationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateApplication_request of this CreateApplicationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateApplicationRequest.

        Unique, case-sensitive identifier the service generates to ensure the idempotency of the request to create an application. The service generates the clientToken when the API call is triggered. The token expires after one hour, so if you retry the API within this timeframe with the same clientToken, you will get the same response. The service also handles deleting the clientToken after it expires. 

        :return: The client_token of this CreateApplicationRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateApplicationRequest.

        Unique, case-sensitive identifier the service generates to ensure the idempotency of the request to create an application. The service generates the clientToken when the API call is triggered. The token expires after one hour, so if you retry the API within this timeframe with the same clientToken, you will get the same response. The service also handles deleting the clientToken after it expires. 

        :param client_token: The client_token of this CreateApplicationRequest.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def definition(self):
        """Gets the definition of this CreateApplicationRequest.


        :return: The definition of this CreateApplicationRequest.
        :rtype: CreateApplicationRequestDefinition
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this CreateApplicationRequest.


        :param definition: The definition of this CreateApplicationRequest.
        :type definition: CreateApplicationRequestDefinition
        """
        if definition is None:
            raise ValueError("Invalid value for `definition`, must not be `None`")

        self._definition = definition

    @property
    def description(self):
        """Gets the description of this CreateApplicationRequest.

        The description of the application.

        :return: The description of this CreateApplicationRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateApplicationRequest.

        The description of the application.

        :param description: The description of this CreateApplicationRequest.
        :type description: str
        """
        if description is not None and len(description) > 500:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `500`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def engine_type(self):
        """Gets the engine_type of this CreateApplicationRequest.

        The type of the target platform for this application.

        :return: The engine_type of this CreateApplicationRequest.
        :rtype: str
        """
        return self._engine_type

    @engine_type.setter
    def engine_type(self, engine_type):
        """Sets the engine_type of this CreateApplicationRequest.

        The type of the target platform for this application.

        :param engine_type: The engine_type of this CreateApplicationRequest.
        :type engine_type: str
        """
        allowed_values = ["microfocus", "bluage"]  # noqa: E501
        if engine_type not in allowed_values:
            raise ValueError(
                "Invalid value for `engine_type` ({0}), must be one of {1}"
                .format(engine_type, allowed_values)
            )

        self._engine_type = engine_type

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this CreateApplicationRequest.

        The identifier of a customer managed key.

        :return: The kms_key_id of this CreateApplicationRequest.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this CreateApplicationRequest.

        The identifier of a customer managed key.

        :param kms_key_id: The kms_key_id of this CreateApplicationRequest.
        :type kms_key_id: str
        """

        self._kms_key_id = kms_key_id

    @property
    def name(self):
        """Gets the name of this CreateApplicationRequest.

        The unique identifier of the application.

        :return: The name of this CreateApplicationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateApplicationRequest.

        The unique identifier of the application.

        :param name: The name of this CreateApplicationRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and not re.search(r'^[A-Za-z0-9][A-Za-z0-9_\-]{1,59}$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[A-Za-z0-9][A-Za-z0-9_\-]{1,59}$/`")

        self._name = name

    @property
    def role_arn(self):
        """Gets the role_arn of this CreateApplicationRequest.

        The Amazon Resource Name (ARN) that identifies a role that the application uses to access Amazon Web Services resources that are not part of the application or are in a different Amazon Web Services account.

        :return: The role_arn of this CreateApplicationRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CreateApplicationRequest.

        The Amazon Resource Name (ARN) that identifies a role that the application uses to access Amazon Web Services resources that are not part of the application or are in a different Amazon Web Services account.

        :param role_arn: The role_arn of this CreateApplicationRequest.
        :type role_arn: str
        """
        if role_arn is not None and not re.search(r'^arn:(aws|aws-cn|aws-iso|aws-iso-[a-z]{1}|aws-us-gov):[A-Za-z0-9][A-Za-z0-9_\/.-]{0,62}:([a-z]{2}-((iso[a-z]{0,1}-)|(gov-)){0,1}[a-z]+-[0-9]|):[0-9]{12}:[A-Za-z0-9\/][A-Za-z0-9:_\/+=,@.-]{0,1023}$', role_arn):
            raise ValueError("Invalid value for `role_arn`, must be a follow pattern or equal to `/^arn:(aws|aws-cn|aws-iso|aws-iso-[a-z]{1}|aws-us-gov):[A-Za-z0-9][A-Za-z0-9_\/.-]{0,62}:([a-z]{2}-((iso[a-z]{0,1}-)|(gov-)){0,1}[a-z]+-[0-9]|):[0-9]{12}:[A-Za-z0-9\/][A-Za-z0-9:_\/+=,@.-]{0,1023}$/`")

        self._role_arn = role_arn

    @property
    def tags(self):
        """Gets the tags of this CreateApplicationRequest.

        A list of tags to apply to the application.

        :return: The tags of this CreateApplicationRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateApplicationRequest.

        A list of tags to apply to the application.

        :param tags: The tags of this CreateApplicationRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
