# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_deployment_lifecycle import ApplicationDeploymentLifecycle
from openapi_server.models.application_lifecycle import ApplicationLifecycle
from openapi_server.models.application_version_lifecycle import ApplicationVersionLifecycle
from openapi_server.models.engine_type import EngineType
from openapi_server import util


class ApplicationSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_arn: str=None, application_id: str=None, application_version: int=None, creation_time: datetime=None, deployment_status: ApplicationDeploymentLifecycle=None, description: str=None, engine_type: EngineType=None, environment_id: str=None, last_start_time: datetime=None, name: str=None, role_arn: str=None, status: ApplicationLifecycle=None, version_status: ApplicationVersionLifecycle=None):
        """ApplicationSummary - a model defined in OpenAPI

        :param application_arn: The application_arn of this ApplicationSummary.
        :param application_id: The application_id of this ApplicationSummary.
        :param application_version: The application_version of this ApplicationSummary.
        :param creation_time: The creation_time of this ApplicationSummary.
        :param deployment_status: The deployment_status of this ApplicationSummary.
        :param description: The description of this ApplicationSummary.
        :param engine_type: The engine_type of this ApplicationSummary.
        :param environment_id: The environment_id of this ApplicationSummary.
        :param last_start_time: The last_start_time of this ApplicationSummary.
        :param name: The name of this ApplicationSummary.
        :param role_arn: The role_arn of this ApplicationSummary.
        :param status: The status of this ApplicationSummary.
        :param version_status: The version_status of this ApplicationSummary.
        """
        self.openapi_types = {
            'application_arn': str,
            'application_id': str,
            'application_version': int,
            'creation_time': datetime,
            'deployment_status': ApplicationDeploymentLifecycle,
            'description': str,
            'engine_type': EngineType,
            'environment_id': str,
            'last_start_time': datetime,
            'name': str,
            'role_arn': str,
            'status': ApplicationLifecycle,
            'version_status': ApplicationVersionLifecycle
        }

        self.attribute_map = {
            'application_arn': 'applicationArn',
            'application_id': 'applicationId',
            'application_version': 'applicationVersion',
            'creation_time': 'creationTime',
            'deployment_status': 'deploymentStatus',
            'description': 'description',
            'engine_type': 'engineType',
            'environment_id': 'environmentId',
            'last_start_time': 'lastStartTime',
            'name': 'name',
            'role_arn': 'roleArn',
            'status': 'status',
            'version_status': 'versionStatus'
        }

        self._application_arn = application_arn
        self._application_id = application_id
        self._application_version = application_version
        self._creation_time = creation_time
        self._deployment_status = deployment_status
        self._description = description
        self._engine_type = engine_type
        self._environment_id = environment_id
        self._last_start_time = last_start_time
        self._name = name
        self._role_arn = role_arn
        self._status = status
        self._version_status = version_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationSummary of this ApplicationSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_arn(self):
        """Gets the application_arn of this ApplicationSummary.


        :return: The application_arn of this ApplicationSummary.
        :rtype: str
        """
        return self._application_arn

    @application_arn.setter
    def application_arn(self, application_arn):
        """Sets the application_arn of this ApplicationSummary.


        :param application_arn: The application_arn of this ApplicationSummary.
        :type application_arn: str
        """
        if application_arn is None:
            raise ValueError("Invalid value for `application_arn`, must not be `None`")

        self._application_arn = application_arn

    @property
    def application_id(self):
        """Gets the application_id of this ApplicationSummary.


        :return: The application_id of this ApplicationSummary.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this ApplicationSummary.


        :param application_id: The application_id of this ApplicationSummary.
        :type application_id: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")

        self._application_id = application_id

    @property
    def application_version(self):
        """Gets the application_version of this ApplicationSummary.


        :return: The application_version of this ApplicationSummary.
        :rtype: int
        """
        return self._application_version

    @application_version.setter
    def application_version(self, application_version):
        """Sets the application_version of this ApplicationSummary.


        :param application_version: The application_version of this ApplicationSummary.
        :type application_version: int
        """
        if application_version is None:
            raise ValueError("Invalid value for `application_version`, must not be `None`")

        self._application_version = application_version

    @property
    def creation_time(self):
        """Gets the creation_time of this ApplicationSummary.


        :return: The creation_time of this ApplicationSummary.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this ApplicationSummary.


        :param creation_time: The creation_time of this ApplicationSummary.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def deployment_status(self):
        """Gets the deployment_status of this ApplicationSummary.


        :return: The deployment_status of this ApplicationSummary.
        :rtype: ApplicationDeploymentLifecycle
        """
        return self._deployment_status

    @deployment_status.setter
    def deployment_status(self, deployment_status):
        """Sets the deployment_status of this ApplicationSummary.


        :param deployment_status: The deployment_status of this ApplicationSummary.
        :type deployment_status: ApplicationDeploymentLifecycle
        """

        self._deployment_status = deployment_status

    @property
    def description(self):
        """Gets the description of this ApplicationSummary.


        :return: The description of this ApplicationSummary.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApplicationSummary.


        :param description: The description of this ApplicationSummary.
        :type description: str
        """

        self._description = description

    @property
    def engine_type(self):
        """Gets the engine_type of this ApplicationSummary.


        :return: The engine_type of this ApplicationSummary.
        :rtype: EngineType
        """
        return self._engine_type

    @engine_type.setter
    def engine_type(self, engine_type):
        """Sets the engine_type of this ApplicationSummary.


        :param engine_type: The engine_type of this ApplicationSummary.
        :type engine_type: EngineType
        """
        if engine_type is None:
            raise ValueError("Invalid value for `engine_type`, must not be `None`")

        self._engine_type = engine_type

    @property
    def environment_id(self):
        """Gets the environment_id of this ApplicationSummary.


        :return: The environment_id of this ApplicationSummary.
        :rtype: str
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this ApplicationSummary.


        :param environment_id: The environment_id of this ApplicationSummary.
        :type environment_id: str
        """

        self._environment_id = environment_id

    @property
    def last_start_time(self):
        """Gets the last_start_time of this ApplicationSummary.


        :return: The last_start_time of this ApplicationSummary.
        :rtype: datetime
        """
        return self._last_start_time

    @last_start_time.setter
    def last_start_time(self, last_start_time):
        """Sets the last_start_time of this ApplicationSummary.


        :param last_start_time: The last_start_time of this ApplicationSummary.
        :type last_start_time: datetime
        """

        self._last_start_time = last_start_time

    @property
    def name(self):
        """Gets the name of this ApplicationSummary.


        :return: The name of this ApplicationSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationSummary.


        :param name: The name of this ApplicationSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def role_arn(self):
        """Gets the role_arn of this ApplicationSummary.


        :return: The role_arn of this ApplicationSummary.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this ApplicationSummary.


        :param role_arn: The role_arn of this ApplicationSummary.
        :type role_arn: str
        """

        self._role_arn = role_arn

    @property
    def status(self):
        """Gets the status of this ApplicationSummary.


        :return: The status of this ApplicationSummary.
        :rtype: ApplicationLifecycle
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ApplicationSummary.


        :param status: The status of this ApplicationSummary.
        :type status: ApplicationLifecycle
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def version_status(self):
        """Gets the version_status of this ApplicationSummary.


        :return: The version_status of this ApplicationSummary.
        :rtype: ApplicationVersionLifecycle
        """
        return self._version_status

    @version_status.setter
    def version_status(self, version_status):
        """Sets the version_status of this ApplicationSummary.


        :param version_status: The version_status of this ApplicationSummary.
        :type version_status: ApplicationVersionLifecycle
        """

        self._version_status = version_status
