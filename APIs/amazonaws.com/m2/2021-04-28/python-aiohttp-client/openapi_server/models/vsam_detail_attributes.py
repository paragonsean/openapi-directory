# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vsam_detail_attributes_primary_key import VsamDetailAttributesPrimaryKey
from openapi_server import util


class VsamDetailAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternate_keys: List=None, cache_at_startup: bool=None, compressed: bool=None, encoding: str=None, primary_key: VsamDetailAttributesPrimaryKey=None, record_format: str=None):
        """VsamDetailAttributes - a model defined in OpenAPI

        :param alternate_keys: The alternate_keys of this VsamDetailAttributes.
        :param cache_at_startup: The cache_at_startup of this VsamDetailAttributes.
        :param compressed: The compressed of this VsamDetailAttributes.
        :param encoding: The encoding of this VsamDetailAttributes.
        :param primary_key: The primary_key of this VsamDetailAttributes.
        :param record_format: The record_format of this VsamDetailAttributes.
        """
        self.openapi_types = {
            'alternate_keys': List,
            'cache_at_startup': bool,
            'compressed': bool,
            'encoding': str,
            'primary_key': VsamDetailAttributesPrimaryKey,
            'record_format': str
        }

        self.attribute_map = {
            'alternate_keys': 'alternateKeys',
            'cache_at_startup': 'cacheAtStartup',
            'compressed': 'compressed',
            'encoding': 'encoding',
            'primary_key': 'primaryKey',
            'record_format': 'recordFormat'
        }

        self._alternate_keys = alternate_keys
        self._cache_at_startup = cache_at_startup
        self._compressed = compressed
        self._encoding = encoding
        self._primary_key = primary_key
        self._record_format = record_format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VsamDetailAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VsamDetailAttributes of this VsamDetailAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternate_keys(self):
        """Gets the alternate_keys of this VsamDetailAttributes.


        :return: The alternate_keys of this VsamDetailAttributes.
        :rtype: List
        """
        return self._alternate_keys

    @alternate_keys.setter
    def alternate_keys(self, alternate_keys):
        """Sets the alternate_keys of this VsamDetailAttributes.


        :param alternate_keys: The alternate_keys of this VsamDetailAttributes.
        :type alternate_keys: List
        """

        self._alternate_keys = alternate_keys

    @property
    def cache_at_startup(self):
        """Gets the cache_at_startup of this VsamDetailAttributes.


        :return: The cache_at_startup of this VsamDetailAttributes.
        :rtype: bool
        """
        return self._cache_at_startup

    @cache_at_startup.setter
    def cache_at_startup(self, cache_at_startup):
        """Sets the cache_at_startup of this VsamDetailAttributes.


        :param cache_at_startup: The cache_at_startup of this VsamDetailAttributes.
        :type cache_at_startup: bool
        """

        self._cache_at_startup = cache_at_startup

    @property
    def compressed(self):
        """Gets the compressed of this VsamDetailAttributes.


        :return: The compressed of this VsamDetailAttributes.
        :rtype: bool
        """
        return self._compressed

    @compressed.setter
    def compressed(self, compressed):
        """Sets the compressed of this VsamDetailAttributes.


        :param compressed: The compressed of this VsamDetailAttributes.
        :type compressed: bool
        """

        self._compressed = compressed

    @property
    def encoding(self):
        """Gets the encoding of this VsamDetailAttributes.


        :return: The encoding of this VsamDetailAttributes.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this VsamDetailAttributes.


        :param encoding: The encoding of this VsamDetailAttributes.
        :type encoding: str
        """

        self._encoding = encoding

    @property
    def primary_key(self):
        """Gets the primary_key of this VsamDetailAttributes.


        :return: The primary_key of this VsamDetailAttributes.
        :rtype: VsamDetailAttributesPrimaryKey
        """
        return self._primary_key

    @primary_key.setter
    def primary_key(self, primary_key):
        """Sets the primary_key of this VsamDetailAttributes.


        :param primary_key: The primary_key of this VsamDetailAttributes.
        :type primary_key: VsamDetailAttributesPrimaryKey
        """

        self._primary_key = primary_key

    @property
    def record_format(self):
        """Gets the record_format of this VsamDetailAttributes.


        :return: The record_format of this VsamDetailAttributes.
        :rtype: str
        """
        return self._record_format

    @record_format.setter
    def record_format(self, record_format):
        """Sets the record_format of this VsamDetailAttributes.


        :param record_format: The record_format of this VsamDetailAttributes.
        :type record_format: str
        """

        self._record_format = record_format
