# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_batch_job_request_batch_job_identifier import StartBatchJobRequestBatchJobIdentifier
from openapi_server import util


class StartBatchJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, batch_job_identifier: StartBatchJobRequestBatchJobIdentifier=None, job_params: Dict[str, str]=None):
        """StartBatchJobRequest - a model defined in OpenAPI

        :param batch_job_identifier: The batch_job_identifier of this StartBatchJobRequest.
        :param job_params: The job_params of this StartBatchJobRequest.
        """
        self.openapi_types = {
            'batch_job_identifier': StartBatchJobRequestBatchJobIdentifier,
            'job_params': Dict[str, str]
        }

        self.attribute_map = {
            'batch_job_identifier': 'batchJobIdentifier',
            'job_params': 'jobParams'
        }

        self._batch_job_identifier = batch_job_identifier
        self._job_params = job_params

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartBatchJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartBatchJob_request of this StartBatchJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def batch_job_identifier(self):
        """Gets the batch_job_identifier of this StartBatchJobRequest.


        :return: The batch_job_identifier of this StartBatchJobRequest.
        :rtype: StartBatchJobRequestBatchJobIdentifier
        """
        return self._batch_job_identifier

    @batch_job_identifier.setter
    def batch_job_identifier(self, batch_job_identifier):
        """Sets the batch_job_identifier of this StartBatchJobRequest.


        :param batch_job_identifier: The batch_job_identifier of this StartBatchJobRequest.
        :type batch_job_identifier: StartBatchJobRequestBatchJobIdentifier
        """
        if batch_job_identifier is None:
            raise ValueError("Invalid value for `batch_job_identifier`, must not be `None`")

        self._batch_job_identifier = batch_job_identifier

    @property
    def job_params(self):
        """Gets the job_params of this StartBatchJobRequest.

        Job parameters are optional. Can contain up to 500 entries.

        :return: The job_params of this StartBatchJobRequest.
        :rtype: Dict[str, str]
        """
        return self._job_params

    @job_params.setter
    def job_params(self, job_params):
        """Sets the job_params of this StartBatchJobRequest.

        Job parameters are optional. Can contain up to 500 entries.

        :param job_params: The job_params of this StartBatchJobRequest.
        :type job_params: Dict[str, str]
        """
        if job_params is not None and len(job_params) > 500:
            raise ValueError("Invalid value for `job_params`, number of items must be less than or equal to `500`")
        if job_params is not None and len(job_params) < 0:
            raise ValueError("Invalid value for `job_params`, number of items must be greater than or equal to `0`")

        self._job_params = job_params
