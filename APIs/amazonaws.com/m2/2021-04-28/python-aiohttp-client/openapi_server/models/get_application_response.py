# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_lifecycle import ApplicationLifecycle
from openapi_server.models.engine_type import EngineType
from openapi_server.models.get_application_response_deployed_version import GetApplicationResponseDeployedVersion
from openapi_server.models.get_application_response_latest_version import GetApplicationResponseLatestVersion
from openapi_server import util


class GetApplicationResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_arn: str=None, application_id: str=None, creation_time: datetime=None, deployed_version: GetApplicationResponseDeployedVersion=None, description: str=None, engine_type: EngineType=None, environment_id: str=None, kms_key_id: str=None, last_start_time: datetime=None, latest_version: GetApplicationResponseLatestVersion=None, listener_arns: List=None, listener_ports: List=None, load_balancer_dns_name: str=None, log_groups: List=None, name: str=None, role_arn: str=None, status: ApplicationLifecycle=None, status_reason: str=None, tags: Dict=None, target_group_arns: List=None):
        """GetApplicationResponse - a model defined in OpenAPI

        :param application_arn: The application_arn of this GetApplicationResponse.
        :param application_id: The application_id of this GetApplicationResponse.
        :param creation_time: The creation_time of this GetApplicationResponse.
        :param deployed_version: The deployed_version of this GetApplicationResponse.
        :param description: The description of this GetApplicationResponse.
        :param engine_type: The engine_type of this GetApplicationResponse.
        :param environment_id: The environment_id of this GetApplicationResponse.
        :param kms_key_id: The kms_key_id of this GetApplicationResponse.
        :param last_start_time: The last_start_time of this GetApplicationResponse.
        :param latest_version: The latest_version of this GetApplicationResponse.
        :param listener_arns: The listener_arns of this GetApplicationResponse.
        :param listener_ports: The listener_ports of this GetApplicationResponse.
        :param load_balancer_dns_name: The load_balancer_dns_name of this GetApplicationResponse.
        :param log_groups: The log_groups of this GetApplicationResponse.
        :param name: The name of this GetApplicationResponse.
        :param role_arn: The role_arn of this GetApplicationResponse.
        :param status: The status of this GetApplicationResponse.
        :param status_reason: The status_reason of this GetApplicationResponse.
        :param tags: The tags of this GetApplicationResponse.
        :param target_group_arns: The target_group_arns of this GetApplicationResponse.
        """
        self.openapi_types = {
            'application_arn': str,
            'application_id': str,
            'creation_time': datetime,
            'deployed_version': GetApplicationResponseDeployedVersion,
            'description': str,
            'engine_type': EngineType,
            'environment_id': str,
            'kms_key_id': str,
            'last_start_time': datetime,
            'latest_version': GetApplicationResponseLatestVersion,
            'listener_arns': List,
            'listener_ports': List,
            'load_balancer_dns_name': str,
            'log_groups': List,
            'name': str,
            'role_arn': str,
            'status': ApplicationLifecycle,
            'status_reason': str,
            'tags': Dict,
            'target_group_arns': List
        }

        self.attribute_map = {
            'application_arn': 'applicationArn',
            'application_id': 'applicationId',
            'creation_time': 'creationTime',
            'deployed_version': 'deployedVersion',
            'description': 'description',
            'engine_type': 'engineType',
            'environment_id': 'environmentId',
            'kms_key_id': 'kmsKeyId',
            'last_start_time': 'lastStartTime',
            'latest_version': 'latestVersion',
            'listener_arns': 'listenerArns',
            'listener_ports': 'listenerPorts',
            'load_balancer_dns_name': 'loadBalancerDnsName',
            'log_groups': 'logGroups',
            'name': 'name',
            'role_arn': 'roleArn',
            'status': 'status',
            'status_reason': 'statusReason',
            'tags': 'tags',
            'target_group_arns': 'targetGroupArns'
        }

        self._application_arn = application_arn
        self._application_id = application_id
        self._creation_time = creation_time
        self._deployed_version = deployed_version
        self._description = description
        self._engine_type = engine_type
        self._environment_id = environment_id
        self._kms_key_id = kms_key_id
        self._last_start_time = last_start_time
        self._latest_version = latest_version
        self._listener_arns = listener_arns
        self._listener_ports = listener_ports
        self._load_balancer_dns_name = load_balancer_dns_name
        self._log_groups = log_groups
        self._name = name
        self._role_arn = role_arn
        self._status = status
        self._status_reason = status_reason
        self._tags = tags
        self._target_group_arns = target_group_arns

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetApplicationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetApplicationResponse of this GetApplicationResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_arn(self):
        """Gets the application_arn of this GetApplicationResponse.


        :return: The application_arn of this GetApplicationResponse.
        :rtype: str
        """
        return self._application_arn

    @application_arn.setter
    def application_arn(self, application_arn):
        """Sets the application_arn of this GetApplicationResponse.


        :param application_arn: The application_arn of this GetApplicationResponse.
        :type application_arn: str
        """
        if application_arn is None:
            raise ValueError("Invalid value for `application_arn`, must not be `None`")

        self._application_arn = application_arn

    @property
    def application_id(self):
        """Gets the application_id of this GetApplicationResponse.


        :return: The application_id of this GetApplicationResponse.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this GetApplicationResponse.


        :param application_id: The application_id of this GetApplicationResponse.
        :type application_id: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")

        self._application_id = application_id

    @property
    def creation_time(self):
        """Gets the creation_time of this GetApplicationResponse.


        :return: The creation_time of this GetApplicationResponse.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this GetApplicationResponse.


        :param creation_time: The creation_time of this GetApplicationResponse.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def deployed_version(self):
        """Gets the deployed_version of this GetApplicationResponse.


        :return: The deployed_version of this GetApplicationResponse.
        :rtype: GetApplicationResponseDeployedVersion
        """
        return self._deployed_version

    @deployed_version.setter
    def deployed_version(self, deployed_version):
        """Sets the deployed_version of this GetApplicationResponse.


        :param deployed_version: The deployed_version of this GetApplicationResponse.
        :type deployed_version: GetApplicationResponseDeployedVersion
        """

        self._deployed_version = deployed_version

    @property
    def description(self):
        """Gets the description of this GetApplicationResponse.


        :return: The description of this GetApplicationResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetApplicationResponse.


        :param description: The description of this GetApplicationResponse.
        :type description: str
        """

        self._description = description

    @property
    def engine_type(self):
        """Gets the engine_type of this GetApplicationResponse.


        :return: The engine_type of this GetApplicationResponse.
        :rtype: EngineType
        """
        return self._engine_type

    @engine_type.setter
    def engine_type(self, engine_type):
        """Sets the engine_type of this GetApplicationResponse.


        :param engine_type: The engine_type of this GetApplicationResponse.
        :type engine_type: EngineType
        """
        if engine_type is None:
            raise ValueError("Invalid value for `engine_type`, must not be `None`")

        self._engine_type = engine_type

    @property
    def environment_id(self):
        """Gets the environment_id of this GetApplicationResponse.


        :return: The environment_id of this GetApplicationResponse.
        :rtype: str
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this GetApplicationResponse.


        :param environment_id: The environment_id of this GetApplicationResponse.
        :type environment_id: str
        """

        self._environment_id = environment_id

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this GetApplicationResponse.


        :return: The kms_key_id of this GetApplicationResponse.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this GetApplicationResponse.


        :param kms_key_id: The kms_key_id of this GetApplicationResponse.
        :type kms_key_id: str
        """

        self._kms_key_id = kms_key_id

    @property
    def last_start_time(self):
        """Gets the last_start_time of this GetApplicationResponse.


        :return: The last_start_time of this GetApplicationResponse.
        :rtype: datetime
        """
        return self._last_start_time

    @last_start_time.setter
    def last_start_time(self, last_start_time):
        """Sets the last_start_time of this GetApplicationResponse.


        :param last_start_time: The last_start_time of this GetApplicationResponse.
        :type last_start_time: datetime
        """

        self._last_start_time = last_start_time

    @property
    def latest_version(self):
        """Gets the latest_version of this GetApplicationResponse.


        :return: The latest_version of this GetApplicationResponse.
        :rtype: GetApplicationResponseLatestVersion
        """
        return self._latest_version

    @latest_version.setter
    def latest_version(self, latest_version):
        """Sets the latest_version of this GetApplicationResponse.


        :param latest_version: The latest_version of this GetApplicationResponse.
        :type latest_version: GetApplicationResponseLatestVersion
        """
        if latest_version is None:
            raise ValueError("Invalid value for `latest_version`, must not be `None`")

        self._latest_version = latest_version

    @property
    def listener_arns(self):
        """Gets the listener_arns of this GetApplicationResponse.


        :return: The listener_arns of this GetApplicationResponse.
        :rtype: List
        """
        return self._listener_arns

    @listener_arns.setter
    def listener_arns(self, listener_arns):
        """Sets the listener_arns of this GetApplicationResponse.


        :param listener_arns: The listener_arns of this GetApplicationResponse.
        :type listener_arns: List
        """

        self._listener_arns = listener_arns

    @property
    def listener_ports(self):
        """Gets the listener_ports of this GetApplicationResponse.


        :return: The listener_ports of this GetApplicationResponse.
        :rtype: List
        """
        return self._listener_ports

    @listener_ports.setter
    def listener_ports(self, listener_ports):
        """Sets the listener_ports of this GetApplicationResponse.


        :param listener_ports: The listener_ports of this GetApplicationResponse.
        :type listener_ports: List
        """

        self._listener_ports = listener_ports

    @property
    def load_balancer_dns_name(self):
        """Gets the load_balancer_dns_name of this GetApplicationResponse.


        :return: The load_balancer_dns_name of this GetApplicationResponse.
        :rtype: str
        """
        return self._load_balancer_dns_name

    @load_balancer_dns_name.setter
    def load_balancer_dns_name(self, load_balancer_dns_name):
        """Sets the load_balancer_dns_name of this GetApplicationResponse.


        :param load_balancer_dns_name: The load_balancer_dns_name of this GetApplicationResponse.
        :type load_balancer_dns_name: str
        """

        self._load_balancer_dns_name = load_balancer_dns_name

    @property
    def log_groups(self):
        """Gets the log_groups of this GetApplicationResponse.


        :return: The log_groups of this GetApplicationResponse.
        :rtype: List
        """
        return self._log_groups

    @log_groups.setter
    def log_groups(self, log_groups):
        """Sets the log_groups of this GetApplicationResponse.


        :param log_groups: The log_groups of this GetApplicationResponse.
        :type log_groups: List
        """

        self._log_groups = log_groups

    @property
    def name(self):
        """Gets the name of this GetApplicationResponse.


        :return: The name of this GetApplicationResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetApplicationResponse.


        :param name: The name of this GetApplicationResponse.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def role_arn(self):
        """Gets the role_arn of this GetApplicationResponse.


        :return: The role_arn of this GetApplicationResponse.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this GetApplicationResponse.


        :param role_arn: The role_arn of this GetApplicationResponse.
        :type role_arn: str
        """

        self._role_arn = role_arn

    @property
    def status(self):
        """Gets the status of this GetApplicationResponse.


        :return: The status of this GetApplicationResponse.
        :rtype: ApplicationLifecycle
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetApplicationResponse.


        :param status: The status of this GetApplicationResponse.
        :type status: ApplicationLifecycle
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def status_reason(self):
        """Gets the status_reason of this GetApplicationResponse.


        :return: The status_reason of this GetApplicationResponse.
        :rtype: str
        """
        return self._status_reason

    @status_reason.setter
    def status_reason(self, status_reason):
        """Sets the status_reason of this GetApplicationResponse.


        :param status_reason: The status_reason of this GetApplicationResponse.
        :type status_reason: str
        """

        self._status_reason = status_reason

    @property
    def tags(self):
        """Gets the tags of this GetApplicationResponse.


        :return: The tags of this GetApplicationResponse.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this GetApplicationResponse.


        :param tags: The tags of this GetApplicationResponse.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def target_group_arns(self):
        """Gets the target_group_arns of this GetApplicationResponse.


        :return: The target_group_arns of this GetApplicationResponse.
        :rtype: List
        """
        return self._target_group_arns

    @target_group_arns.setter
    def target_group_arns(self, target_group_arns):
        """Sets the target_group_arns of this GetApplicationResponse.


        :param target_group_arns: The target_group_arns of this GetApplicationResponse.
        :type target_group_arns: List
        """

        self._target_group_arns = target_group_arns
