# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatasetDetailOrgAttributesPo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encoding: str=None, format: str=None):
        """DatasetDetailOrgAttributesPo - a model defined in OpenAPI

        :param encoding: The encoding of this DatasetDetailOrgAttributesPo.
        :param format: The format of this DatasetDetailOrgAttributesPo.
        """
        self.openapi_types = {
            'encoding': str,
            'format': str
        }

        self.attribute_map = {
            'encoding': 'encoding',
            'format': 'format'
        }

        self._encoding = encoding
        self._format = format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatasetDetailOrgAttributesPo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatasetDetailOrgAttributes_po of this DatasetDetailOrgAttributesPo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encoding(self):
        """Gets the encoding of this DatasetDetailOrgAttributesPo.


        :return: The encoding of this DatasetDetailOrgAttributesPo.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this DatasetDetailOrgAttributesPo.


        :param encoding: The encoding of this DatasetDetailOrgAttributesPo.
        :type encoding: str
        """
        if encoding is None:
            raise ValueError("Invalid value for `encoding`, must not be `None`")

        self._encoding = encoding

    @property
    def format(self):
        """Gets the format of this DatasetDetailOrgAttributesPo.


        :return: The format of this DatasetDetailOrgAttributesPo.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this DatasetDetailOrgAttributesPo.


        :param format: The format of this DatasetDetailOrgAttributesPo.
        :type format: str
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")

        self._format = format
