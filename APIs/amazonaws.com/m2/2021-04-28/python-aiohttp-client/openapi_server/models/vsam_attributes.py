# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vsam_detail_attributes_primary_key import VsamDetailAttributesPrimaryKey
from openapi_server import util


class VsamAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternate_keys: List=None, compressed: bool=None, encoding: str=None, format: str=None, primary_key: VsamDetailAttributesPrimaryKey=None):
        """VsamAttributes - a model defined in OpenAPI

        :param alternate_keys: The alternate_keys of this VsamAttributes.
        :param compressed: The compressed of this VsamAttributes.
        :param encoding: The encoding of this VsamAttributes.
        :param format: The format of this VsamAttributes.
        :param primary_key: The primary_key of this VsamAttributes.
        """
        self.openapi_types = {
            'alternate_keys': List,
            'compressed': bool,
            'encoding': str,
            'format': str,
            'primary_key': VsamDetailAttributesPrimaryKey
        }

        self.attribute_map = {
            'alternate_keys': 'alternateKeys',
            'compressed': 'compressed',
            'encoding': 'encoding',
            'format': 'format',
            'primary_key': 'primaryKey'
        }

        self._alternate_keys = alternate_keys
        self._compressed = compressed
        self._encoding = encoding
        self._format = format
        self._primary_key = primary_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VsamAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VsamAttributes of this VsamAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternate_keys(self):
        """Gets the alternate_keys of this VsamAttributes.


        :return: The alternate_keys of this VsamAttributes.
        :rtype: List
        """
        return self._alternate_keys

    @alternate_keys.setter
    def alternate_keys(self, alternate_keys):
        """Sets the alternate_keys of this VsamAttributes.


        :param alternate_keys: The alternate_keys of this VsamAttributes.
        :type alternate_keys: List
        """

        self._alternate_keys = alternate_keys

    @property
    def compressed(self):
        """Gets the compressed of this VsamAttributes.


        :return: The compressed of this VsamAttributes.
        :rtype: bool
        """
        return self._compressed

    @compressed.setter
    def compressed(self, compressed):
        """Sets the compressed of this VsamAttributes.


        :param compressed: The compressed of this VsamAttributes.
        :type compressed: bool
        """

        self._compressed = compressed

    @property
    def encoding(self):
        """Gets the encoding of this VsamAttributes.


        :return: The encoding of this VsamAttributes.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this VsamAttributes.


        :param encoding: The encoding of this VsamAttributes.
        :type encoding: str
        """

        self._encoding = encoding

    @property
    def format(self):
        """Gets the format of this VsamAttributes.


        :return: The format of this VsamAttributes.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this VsamAttributes.


        :param format: The format of this VsamAttributes.
        :type format: str
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")

        self._format = format

    @property
    def primary_key(self):
        """Gets the primary_key of this VsamAttributes.


        :return: The primary_key of this VsamAttributes.
        :rtype: VsamDetailAttributesPrimaryKey
        """
        return self._primary_key

    @primary_key.setter
    def primary_key(self, primary_key):
        """Sets the primary_key of this VsamAttributes.


        :param primary_key: The primary_key of this VsamAttributes.
        :type primary_key: VsamDetailAttributesPrimaryKey
        """

        self._primary_key = primary_key
