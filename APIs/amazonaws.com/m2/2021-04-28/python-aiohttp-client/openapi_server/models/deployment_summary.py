# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deployment_lifecycle import DeploymentLifecycle
from openapi_server import util


class DeploymentSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_id: str=None, application_version: int=None, creation_time: datetime=None, deployment_id: str=None, environment_id: str=None, status: DeploymentLifecycle=None, status_reason: str=None):
        """DeploymentSummary - a model defined in OpenAPI

        :param application_id: The application_id of this DeploymentSummary.
        :param application_version: The application_version of this DeploymentSummary.
        :param creation_time: The creation_time of this DeploymentSummary.
        :param deployment_id: The deployment_id of this DeploymentSummary.
        :param environment_id: The environment_id of this DeploymentSummary.
        :param status: The status of this DeploymentSummary.
        :param status_reason: The status_reason of this DeploymentSummary.
        """
        self.openapi_types = {
            'application_id': str,
            'application_version': int,
            'creation_time': datetime,
            'deployment_id': str,
            'environment_id': str,
            'status': DeploymentLifecycle,
            'status_reason': str
        }

        self.attribute_map = {
            'application_id': 'applicationId',
            'application_version': 'applicationVersion',
            'creation_time': 'creationTime',
            'deployment_id': 'deploymentId',
            'environment_id': 'environmentId',
            'status': 'status',
            'status_reason': 'statusReason'
        }

        self._application_id = application_id
        self._application_version = application_version
        self._creation_time = creation_time
        self._deployment_id = deployment_id
        self._environment_id = environment_id
        self._status = status
        self._status_reason = status_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeploymentSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeploymentSummary of this DeploymentSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_id(self):
        """Gets the application_id of this DeploymentSummary.


        :return: The application_id of this DeploymentSummary.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this DeploymentSummary.


        :param application_id: The application_id of this DeploymentSummary.
        :type application_id: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")

        self._application_id = application_id

    @property
    def application_version(self):
        """Gets the application_version of this DeploymentSummary.


        :return: The application_version of this DeploymentSummary.
        :rtype: int
        """
        return self._application_version

    @application_version.setter
    def application_version(self, application_version):
        """Sets the application_version of this DeploymentSummary.


        :param application_version: The application_version of this DeploymentSummary.
        :type application_version: int
        """
        if application_version is None:
            raise ValueError("Invalid value for `application_version`, must not be `None`")

        self._application_version = application_version

    @property
    def creation_time(self):
        """Gets the creation_time of this DeploymentSummary.


        :return: The creation_time of this DeploymentSummary.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this DeploymentSummary.


        :param creation_time: The creation_time of this DeploymentSummary.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def deployment_id(self):
        """Gets the deployment_id of this DeploymentSummary.


        :return: The deployment_id of this DeploymentSummary.
        :rtype: str
        """
        return self._deployment_id

    @deployment_id.setter
    def deployment_id(self, deployment_id):
        """Sets the deployment_id of this DeploymentSummary.


        :param deployment_id: The deployment_id of this DeploymentSummary.
        :type deployment_id: str
        """
        if deployment_id is None:
            raise ValueError("Invalid value for `deployment_id`, must not be `None`")

        self._deployment_id = deployment_id

    @property
    def environment_id(self):
        """Gets the environment_id of this DeploymentSummary.


        :return: The environment_id of this DeploymentSummary.
        :rtype: str
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this DeploymentSummary.


        :param environment_id: The environment_id of this DeploymentSummary.
        :type environment_id: str
        """
        if environment_id is None:
            raise ValueError("Invalid value for `environment_id`, must not be `None`")

        self._environment_id = environment_id

    @property
    def status(self):
        """Gets the status of this DeploymentSummary.


        :return: The status of this DeploymentSummary.
        :rtype: DeploymentLifecycle
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeploymentSummary.


        :param status: The status of this DeploymentSummary.
        :type status: DeploymentLifecycle
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def status_reason(self):
        """Gets the status_reason of this DeploymentSummary.


        :return: The status_reason of this DeploymentSummary.
        :rtype: str
        """
        return self._status_reason

    @status_reason.setter
    def status_reason(self, status_reason):
        """Sets the status_reason of this DeploymentSummary.


        :param status_reason: The status_reason of this DeploymentSummary.
        :type status_reason: str
        """

        self._status_reason = status_reason
