# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_set_import_item_data_set import DataSetImportItemDataSet
from openapi_server.models.data_set_import_item_external_location import DataSetImportItemExternalLocation
from openapi_server import util


class DataSetImportItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_set: DataSetImportItemDataSet=None, external_location: DataSetImportItemExternalLocation=None):
        """DataSetImportItem - a model defined in OpenAPI

        :param data_set: The data_set of this DataSetImportItem.
        :param external_location: The external_location of this DataSetImportItem.
        """
        self.openapi_types = {
            'data_set': DataSetImportItemDataSet,
            'external_location': DataSetImportItemExternalLocation
        }

        self.attribute_map = {
            'data_set': 'dataSet',
            'external_location': 'externalLocation'
        }

        self._data_set = data_set
        self._external_location = external_location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataSetImportItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataSetImportItem of this DataSetImportItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_set(self):
        """Gets the data_set of this DataSetImportItem.


        :return: The data_set of this DataSetImportItem.
        :rtype: DataSetImportItemDataSet
        """
        return self._data_set

    @data_set.setter
    def data_set(self, data_set):
        """Sets the data_set of this DataSetImportItem.


        :param data_set: The data_set of this DataSetImportItem.
        :type data_set: DataSetImportItemDataSet
        """
        if data_set is None:
            raise ValueError("Invalid value for `data_set`, must not be `None`")

        self._data_set = data_set

    @property
    def external_location(self):
        """Gets the external_location of this DataSetImportItem.


        :return: The external_location of this DataSetImportItem.
        :rtype: DataSetImportItemExternalLocation
        """
        return self._external_location

    @external_location.setter
    def external_location(self, external_location):
        """Sets the external_location of this DataSetImportItem.


        :param external_location: The external_location of this DataSetImportItem.
        :type external_location: DataSetImportItemExternalLocation
        """
        if external_location is None:
            raise ValueError("Invalid value for `external_location`, must not be `None`")

        self._external_location = external_location
