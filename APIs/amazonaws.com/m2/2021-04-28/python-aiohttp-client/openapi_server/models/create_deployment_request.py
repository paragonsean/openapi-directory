# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateDeploymentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_version: int=None, client_token: str=None, environment_id: str=None):
        """CreateDeploymentRequest - a model defined in OpenAPI

        :param application_version: The application_version of this CreateDeploymentRequest.
        :param client_token: The client_token of this CreateDeploymentRequest.
        :param environment_id: The environment_id of this CreateDeploymentRequest.
        """
        self.openapi_types = {
            'application_version': int,
            'client_token': str,
            'environment_id': str
        }

        self.attribute_map = {
            'application_version': 'applicationVersion',
            'client_token': 'clientToken',
            'environment_id': 'environmentId'
        }

        self._application_version = application_version
        self._client_token = client_token
        self._environment_id = environment_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDeploymentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDeployment_request of this CreateDeploymentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_version(self):
        """Gets the application_version of this CreateDeploymentRequest.

        The version of the application to deploy.

        :return: The application_version of this CreateDeploymentRequest.
        :rtype: int
        """
        return self._application_version

    @application_version.setter
    def application_version(self, application_version):
        """Sets the application_version of this CreateDeploymentRequest.

        The version of the application to deploy.

        :param application_version: The application_version of this CreateDeploymentRequest.
        :type application_version: int
        """
        if application_version is None:
            raise ValueError("Invalid value for `application_version`, must not be `None`")
        if application_version is not None and application_version < 1:
            raise ValueError("Invalid value for `application_version`, must be a value greater than or equal to `1`")

        self._application_version = application_version

    @property
    def client_token(self):
        """Gets the client_token of this CreateDeploymentRequest.

        Unique, case-sensitive identifier you provide to ensure the idempotency of the request to create a deployment. The service generates the clientToken when the API call is triggered. The token expires after one hour, so if you retry the API within this timeframe with the same clientToken, you will get the same response. The service also handles deleting the clientToken after it expires. 

        :return: The client_token of this CreateDeploymentRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateDeploymentRequest.

        Unique, case-sensitive identifier you provide to ensure the idempotency of the request to create a deployment. The service generates the clientToken when the API call is triggered. The token expires after one hour, so if you retry the API within this timeframe with the same clientToken, you will get the same response. The service also handles deleting the clientToken after it expires. 

        :param client_token: The client_token of this CreateDeploymentRequest.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def environment_id(self):
        """Gets the environment_id of this CreateDeploymentRequest.

        The identifier of the runtime environment where you want to deploy this application.

        :return: The environment_id of this CreateDeploymentRequest.
        :rtype: str
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this CreateDeploymentRequest.

        The identifier of the runtime environment where you want to deploy this application.

        :param environment_id: The environment_id of this CreateDeploymentRequest.
        :type environment_id: str
        """
        if environment_id is None:
            raise ValueError("Invalid value for `environment_id`, must not be `None`")
        if environment_id is not None and not re.search(r'^\S{1,80}$', environment_id):
            raise ValueError("Invalid value for `environment_id`, must be a follow pattern or equal to `/^\S{1,80}$/`")

        self._environment_id = environment_id
