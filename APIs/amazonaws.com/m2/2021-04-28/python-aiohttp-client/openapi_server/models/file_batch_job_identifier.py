# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FileBatchJobIdentifier(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_name: str=None, folder_path: str=None):
        """FileBatchJobIdentifier - a model defined in OpenAPI

        :param file_name: The file_name of this FileBatchJobIdentifier.
        :param folder_path: The folder_path of this FileBatchJobIdentifier.
        """
        self.openapi_types = {
            'file_name': str,
            'folder_path': str
        }

        self.attribute_map = {
            'file_name': 'fileName',
            'folder_path': 'folderPath'
        }

        self._file_name = file_name
        self._folder_path = folder_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileBatchJobIdentifier':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FileBatchJobIdentifier of this FileBatchJobIdentifier.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_name(self):
        """Gets the file_name of this FileBatchJobIdentifier.


        :return: The file_name of this FileBatchJobIdentifier.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this FileBatchJobIdentifier.


        :param file_name: The file_name of this FileBatchJobIdentifier.
        :type file_name: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")

        self._file_name = file_name

    @property
    def folder_path(self):
        """Gets the folder_path of this FileBatchJobIdentifier.


        :return: The folder_path of this FileBatchJobIdentifier.
        :rtype: str
        """
        return self._folder_path

    @folder_path.setter
    def folder_path(self, folder_path):
        """Sets the folder_path of this FileBatchJobIdentifier.


        :param folder_path: The folder_path of this FileBatchJobIdentifier.
        :type folder_path: str
        """

        self._folder_path = folder_path
