# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScriptBatchJobDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, script_name: str=None):
        """ScriptBatchJobDefinition - a model defined in OpenAPI

        :param script_name: The script_name of this ScriptBatchJobDefinition.
        """
        self.openapi_types = {
            'script_name': str
        }

        self.attribute_map = {
            'script_name': 'scriptName'
        }

        self._script_name = script_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScriptBatchJobDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScriptBatchJobDefinition of this ScriptBatchJobDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def script_name(self):
        """Gets the script_name of this ScriptBatchJobDefinition.


        :return: The script_name of this ScriptBatchJobDefinition.
        :rtype: str
        """
        return self._script_name

    @script_name.setter
    def script_name(self, script_name):
        """Sets the script_name of this ScriptBatchJobDefinition.


        :param script_name: The script_name of this ScriptBatchJobDefinition.
        :type script_name: str
        """
        if script_name is None:
            raise ValueError("Invalid value for `script_name`, must not be `None`")

        self._script_name = script_name
