# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateEnvironmentRequestHighAvailabilityConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, desired_capacity: int=None):
        """CreateEnvironmentRequestHighAvailabilityConfig - a model defined in OpenAPI

        :param desired_capacity: The desired_capacity of this CreateEnvironmentRequestHighAvailabilityConfig.
        """
        self.openapi_types = {
            'desired_capacity': int
        }

        self.attribute_map = {
            'desired_capacity': 'desiredCapacity'
        }

        self._desired_capacity = desired_capacity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateEnvironmentRequestHighAvailabilityConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateEnvironmentRequest_highAvailabilityConfig of this CreateEnvironmentRequestHighAvailabilityConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def desired_capacity(self):
        """Gets the desired_capacity of this CreateEnvironmentRequestHighAvailabilityConfig.


        :return: The desired_capacity of this CreateEnvironmentRequestHighAvailabilityConfig.
        :rtype: int
        """
        return self._desired_capacity

    @desired_capacity.setter
    def desired_capacity(self, desired_capacity):
        """Sets the desired_capacity of this CreateEnvironmentRequestHighAvailabilityConfig.


        :param desired_capacity: The desired_capacity of this CreateEnvironmentRequestHighAvailabilityConfig.
        :type desired_capacity: int
        """
        if desired_capacity is None:
            raise ValueError("Invalid value for `desired_capacity`, must not be `None`")

        self._desired_capacity = desired_capacity
