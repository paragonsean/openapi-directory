# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FsxStorageConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_system_id: str=None, mount_point: str=None):
        """FsxStorageConfiguration - a model defined in OpenAPI

        :param file_system_id: The file_system_id of this FsxStorageConfiguration.
        :param mount_point: The mount_point of this FsxStorageConfiguration.
        """
        self.openapi_types = {
            'file_system_id': str,
            'mount_point': str
        }

        self.attribute_map = {
            'file_system_id': 'fileSystemId',
            'mount_point': 'mountPoint'
        }

        self._file_system_id = file_system_id
        self._mount_point = mount_point

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FsxStorageConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FsxStorageConfiguration of this FsxStorageConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_system_id(self):
        """Gets the file_system_id of this FsxStorageConfiguration.


        :return: The file_system_id of this FsxStorageConfiguration.
        :rtype: str
        """
        return self._file_system_id

    @file_system_id.setter
    def file_system_id(self, file_system_id):
        """Sets the file_system_id of this FsxStorageConfiguration.


        :param file_system_id: The file_system_id of this FsxStorageConfiguration.
        :type file_system_id: str
        """
        if file_system_id is None:
            raise ValueError("Invalid value for `file_system_id`, must not be `None`")

        self._file_system_id = file_system_id

    @property
    def mount_point(self):
        """Gets the mount_point of this FsxStorageConfiguration.


        :return: The mount_point of this FsxStorageConfiguration.
        :rtype: str
        """
        return self._mount_point

    @mount_point.setter
    def mount_point(self, mount_point):
        """Sets the mount_point of this FsxStorageConfiguration.


        :param mount_point: The mount_point of this FsxStorageConfiguration.
        :type mount_point: str
        """
        if mount_point is None:
            raise ValueError("Invalid value for `mount_point`, must not be `None`")

        self._mount_point = mount_point
