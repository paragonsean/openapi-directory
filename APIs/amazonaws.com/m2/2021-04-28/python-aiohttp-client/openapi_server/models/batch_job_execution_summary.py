# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.batch_job_execution_status import BatchJobExecutionStatus
from openapi_server.models.batch_job_type import BatchJobType
from openapi_server.models.get_batch_job_execution_response_batch_job_identifier import GetBatchJobExecutionResponseBatchJobIdentifier
from openapi_server import util


class BatchJobExecutionSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_id: str=None, batch_job_identifier: GetBatchJobExecutionResponseBatchJobIdentifier=None, end_time: datetime=None, execution_id: str=None, job_id: str=None, job_name: str=None, job_type: BatchJobType=None, return_code: str=None, start_time: datetime=None, status: BatchJobExecutionStatus=None):
        """BatchJobExecutionSummary - a model defined in OpenAPI

        :param application_id: The application_id of this BatchJobExecutionSummary.
        :param batch_job_identifier: The batch_job_identifier of this BatchJobExecutionSummary.
        :param end_time: The end_time of this BatchJobExecutionSummary.
        :param execution_id: The execution_id of this BatchJobExecutionSummary.
        :param job_id: The job_id of this BatchJobExecutionSummary.
        :param job_name: The job_name of this BatchJobExecutionSummary.
        :param job_type: The job_type of this BatchJobExecutionSummary.
        :param return_code: The return_code of this BatchJobExecutionSummary.
        :param start_time: The start_time of this BatchJobExecutionSummary.
        :param status: The status of this BatchJobExecutionSummary.
        """
        self.openapi_types = {
            'application_id': str,
            'batch_job_identifier': GetBatchJobExecutionResponseBatchJobIdentifier,
            'end_time': datetime,
            'execution_id': str,
            'job_id': str,
            'job_name': str,
            'job_type': BatchJobType,
            'return_code': str,
            'start_time': datetime,
            'status': BatchJobExecutionStatus
        }

        self.attribute_map = {
            'application_id': 'applicationId',
            'batch_job_identifier': 'batchJobIdentifier',
            'end_time': 'endTime',
            'execution_id': 'executionId',
            'job_id': 'jobId',
            'job_name': 'jobName',
            'job_type': 'jobType',
            'return_code': 'returnCode',
            'start_time': 'startTime',
            'status': 'status'
        }

        self._application_id = application_id
        self._batch_job_identifier = batch_job_identifier
        self._end_time = end_time
        self._execution_id = execution_id
        self._job_id = job_id
        self._job_name = job_name
        self._job_type = job_type
        self._return_code = return_code
        self._start_time = start_time
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchJobExecutionSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchJobExecutionSummary of this BatchJobExecutionSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_id(self):
        """Gets the application_id of this BatchJobExecutionSummary.


        :return: The application_id of this BatchJobExecutionSummary.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this BatchJobExecutionSummary.


        :param application_id: The application_id of this BatchJobExecutionSummary.
        :type application_id: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")

        self._application_id = application_id

    @property
    def batch_job_identifier(self):
        """Gets the batch_job_identifier of this BatchJobExecutionSummary.


        :return: The batch_job_identifier of this BatchJobExecutionSummary.
        :rtype: GetBatchJobExecutionResponseBatchJobIdentifier
        """
        return self._batch_job_identifier

    @batch_job_identifier.setter
    def batch_job_identifier(self, batch_job_identifier):
        """Sets the batch_job_identifier of this BatchJobExecutionSummary.


        :param batch_job_identifier: The batch_job_identifier of this BatchJobExecutionSummary.
        :type batch_job_identifier: GetBatchJobExecutionResponseBatchJobIdentifier
        """

        self._batch_job_identifier = batch_job_identifier

    @property
    def end_time(self):
        """Gets the end_time of this BatchJobExecutionSummary.


        :return: The end_time of this BatchJobExecutionSummary.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this BatchJobExecutionSummary.


        :param end_time: The end_time of this BatchJobExecutionSummary.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def execution_id(self):
        """Gets the execution_id of this BatchJobExecutionSummary.


        :return: The execution_id of this BatchJobExecutionSummary.
        :rtype: str
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this BatchJobExecutionSummary.


        :param execution_id: The execution_id of this BatchJobExecutionSummary.
        :type execution_id: str
        """
        if execution_id is None:
            raise ValueError("Invalid value for `execution_id`, must not be `None`")

        self._execution_id = execution_id

    @property
    def job_id(self):
        """Gets the job_id of this BatchJobExecutionSummary.


        :return: The job_id of this BatchJobExecutionSummary.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this BatchJobExecutionSummary.


        :param job_id: The job_id of this BatchJobExecutionSummary.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def job_name(self):
        """Gets the job_name of this BatchJobExecutionSummary.


        :return: The job_name of this BatchJobExecutionSummary.
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this BatchJobExecutionSummary.


        :param job_name: The job_name of this BatchJobExecutionSummary.
        :type job_name: str
        """

        self._job_name = job_name

    @property
    def job_type(self):
        """Gets the job_type of this BatchJobExecutionSummary.


        :return: The job_type of this BatchJobExecutionSummary.
        :rtype: BatchJobType
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this BatchJobExecutionSummary.


        :param job_type: The job_type of this BatchJobExecutionSummary.
        :type job_type: BatchJobType
        """

        self._job_type = job_type

    @property
    def return_code(self):
        """Gets the return_code of this BatchJobExecutionSummary.


        :return: The return_code of this BatchJobExecutionSummary.
        :rtype: str
        """
        return self._return_code

    @return_code.setter
    def return_code(self, return_code):
        """Sets the return_code of this BatchJobExecutionSummary.


        :param return_code: The return_code of this BatchJobExecutionSummary.
        :type return_code: str
        """

        self._return_code = return_code

    @property
    def start_time(self):
        """Gets the start_time of this BatchJobExecutionSummary.


        :return: The start_time of this BatchJobExecutionSummary.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this BatchJobExecutionSummary.


        :param start_time: The start_time of this BatchJobExecutionSummary.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this BatchJobExecutionSummary.


        :return: The status of this BatchJobExecutionSummary.
        :rtype: BatchJobExecutionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BatchJobExecutionSummary.


        :param status: The status of this BatchJobExecutionSummary.
        :type status: BatchJobExecutionStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
