# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetDataSetImportTaskResponseSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failed: int=None, in_progress: int=None, pending: int=None, succeeded: int=None, total: int=None):
        """GetDataSetImportTaskResponseSummary - a model defined in OpenAPI

        :param failed: The failed of this GetDataSetImportTaskResponseSummary.
        :param in_progress: The in_progress of this GetDataSetImportTaskResponseSummary.
        :param pending: The pending of this GetDataSetImportTaskResponseSummary.
        :param succeeded: The succeeded of this GetDataSetImportTaskResponseSummary.
        :param total: The total of this GetDataSetImportTaskResponseSummary.
        """
        self.openapi_types = {
            'failed': int,
            'in_progress': int,
            'pending': int,
            'succeeded': int,
            'total': int
        }

        self.attribute_map = {
            'failed': 'failed',
            'in_progress': 'inProgress',
            'pending': 'pending',
            'succeeded': 'succeeded',
            'total': 'total'
        }

        self._failed = failed
        self._in_progress = in_progress
        self._pending = pending
        self._succeeded = succeeded
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetDataSetImportTaskResponseSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetDataSetImportTaskResponse_summary of this GetDataSetImportTaskResponseSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failed(self):
        """Gets the failed of this GetDataSetImportTaskResponseSummary.


        :return: The failed of this GetDataSetImportTaskResponseSummary.
        :rtype: int
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this GetDataSetImportTaskResponseSummary.


        :param failed: The failed of this GetDataSetImportTaskResponseSummary.
        :type failed: int
        """
        if failed is None:
            raise ValueError("Invalid value for `failed`, must not be `None`")

        self._failed = failed

    @property
    def in_progress(self):
        """Gets the in_progress of this GetDataSetImportTaskResponseSummary.


        :return: The in_progress of this GetDataSetImportTaskResponseSummary.
        :rtype: int
        """
        return self._in_progress

    @in_progress.setter
    def in_progress(self, in_progress):
        """Sets the in_progress of this GetDataSetImportTaskResponseSummary.


        :param in_progress: The in_progress of this GetDataSetImportTaskResponseSummary.
        :type in_progress: int
        """
        if in_progress is None:
            raise ValueError("Invalid value for `in_progress`, must not be `None`")

        self._in_progress = in_progress

    @property
    def pending(self):
        """Gets the pending of this GetDataSetImportTaskResponseSummary.


        :return: The pending of this GetDataSetImportTaskResponseSummary.
        :rtype: int
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this GetDataSetImportTaskResponseSummary.


        :param pending: The pending of this GetDataSetImportTaskResponseSummary.
        :type pending: int
        """
        if pending is None:
            raise ValueError("Invalid value for `pending`, must not be `None`")

        self._pending = pending

    @property
    def succeeded(self):
        """Gets the succeeded of this GetDataSetImportTaskResponseSummary.


        :return: The succeeded of this GetDataSetImportTaskResponseSummary.
        :rtype: int
        """
        return self._succeeded

    @succeeded.setter
    def succeeded(self, succeeded):
        """Sets the succeeded of this GetDataSetImportTaskResponseSummary.


        :param succeeded: The succeeded of this GetDataSetImportTaskResponseSummary.
        :type succeeded: int
        """
        if succeeded is None:
            raise ValueError("Invalid value for `succeeded`, must not be `None`")

        self._succeeded = succeeded

    @property
    def total(self):
        """Gets the total of this GetDataSetImportTaskResponseSummary.


        :return: The total of this GetDataSetImportTaskResponseSummary.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this GetDataSetImportTaskResponseSummary.


        :param total: The total of this GetDataSetImportTaskResponseSummary.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total
