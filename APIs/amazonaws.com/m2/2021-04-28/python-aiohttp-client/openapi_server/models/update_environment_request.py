# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateEnvironmentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apply_during_maintenance_window: bool=None, desired_capacity: int=None, engine_version: str=None, instance_type: str=None, preferred_maintenance_window: str=None):
        """UpdateEnvironmentRequest - a model defined in OpenAPI

        :param apply_during_maintenance_window: The apply_during_maintenance_window of this UpdateEnvironmentRequest.
        :param desired_capacity: The desired_capacity of this UpdateEnvironmentRequest.
        :param engine_version: The engine_version of this UpdateEnvironmentRequest.
        :param instance_type: The instance_type of this UpdateEnvironmentRequest.
        :param preferred_maintenance_window: The preferred_maintenance_window of this UpdateEnvironmentRequest.
        """
        self.openapi_types = {
            'apply_during_maintenance_window': bool,
            'desired_capacity': int,
            'engine_version': str,
            'instance_type': str,
            'preferred_maintenance_window': str
        }

        self.attribute_map = {
            'apply_during_maintenance_window': 'applyDuringMaintenanceWindow',
            'desired_capacity': 'desiredCapacity',
            'engine_version': 'engineVersion',
            'instance_type': 'instanceType',
            'preferred_maintenance_window': 'preferredMaintenanceWindow'
        }

        self._apply_during_maintenance_window = apply_during_maintenance_window
        self._desired_capacity = desired_capacity
        self._engine_version = engine_version
        self._instance_type = instance_type
        self._preferred_maintenance_window = preferred_maintenance_window

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateEnvironmentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateEnvironment_request of this UpdateEnvironmentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apply_during_maintenance_window(self):
        """Gets the apply_during_maintenance_window of this UpdateEnvironmentRequest.

        Indicates whether to update the runtime environment during the maintenance window. The default is false. Currently, Amazon Web Services Mainframe Modernization accepts the <code>engineVersion</code> parameter only if <code>applyDuringMaintenanceWindow</code> is true. If any parameter other than <code>engineVersion</code> is provided in <code>UpdateEnvironmentRequest</code>, it will fail if <code>applyDuringMaintenanceWindow</code> is set to true.

        :return: The apply_during_maintenance_window of this UpdateEnvironmentRequest.
        :rtype: bool
        """
        return self._apply_during_maintenance_window

    @apply_during_maintenance_window.setter
    def apply_during_maintenance_window(self, apply_during_maintenance_window):
        """Sets the apply_during_maintenance_window of this UpdateEnvironmentRequest.

        Indicates whether to update the runtime environment during the maintenance window. The default is false. Currently, Amazon Web Services Mainframe Modernization accepts the <code>engineVersion</code> parameter only if <code>applyDuringMaintenanceWindow</code> is true. If any parameter other than <code>engineVersion</code> is provided in <code>UpdateEnvironmentRequest</code>, it will fail if <code>applyDuringMaintenanceWindow</code> is set to true.

        :param apply_during_maintenance_window: The apply_during_maintenance_window of this UpdateEnvironmentRequest.
        :type apply_during_maintenance_window: bool
        """

        self._apply_during_maintenance_window = apply_during_maintenance_window

    @property
    def desired_capacity(self):
        """Gets the desired_capacity of this UpdateEnvironmentRequest.

        The desired capacity for the runtime environment to update. The minimum possible value is 0 and the maximum is 100.

        :return: The desired_capacity of this UpdateEnvironmentRequest.
        :rtype: int
        """
        return self._desired_capacity

    @desired_capacity.setter
    def desired_capacity(self, desired_capacity):
        """Sets the desired_capacity of this UpdateEnvironmentRequest.

        The desired capacity for the runtime environment to update. The minimum possible value is 0 and the maximum is 100.

        :param desired_capacity: The desired_capacity of this UpdateEnvironmentRequest.
        :type desired_capacity: int
        """

        self._desired_capacity = desired_capacity

    @property
    def engine_version(self):
        """Gets the engine_version of this UpdateEnvironmentRequest.

        The version of the runtime engine for the runtime environment.

        :return: The engine_version of this UpdateEnvironmentRequest.
        :rtype: str
        """
        return self._engine_version

    @engine_version.setter
    def engine_version(self, engine_version):
        """Sets the engine_version of this UpdateEnvironmentRequest.

        The version of the runtime engine for the runtime environment.

        :param engine_version: The engine_version of this UpdateEnvironmentRequest.
        :type engine_version: str
        """
        if engine_version is not None and not re.search(r'^\S{1,10}$', engine_version):
            raise ValueError("Invalid value for `engine_version`, must be a follow pattern or equal to `/^\S{1,10}$/`")

        self._engine_version = engine_version

    @property
    def instance_type(self):
        """Gets the instance_type of this UpdateEnvironmentRequest.

        The instance type for the runtime environment to update.

        :return: The instance_type of this UpdateEnvironmentRequest.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this UpdateEnvironmentRequest.

        The instance type for the runtime environment to update.

        :param instance_type: The instance_type of this UpdateEnvironmentRequest.
        :type instance_type: str
        """
        if instance_type is not None and not re.search(r'^\S{1,20}$', instance_type):
            raise ValueError("Invalid value for `instance_type`, must be a follow pattern or equal to `/^\S{1,20}$/`")

        self._instance_type = instance_type

    @property
    def preferred_maintenance_window(self):
        """Gets the preferred_maintenance_window of this UpdateEnvironmentRequest.

        Configures the maintenance window you want for the runtime environment. If you do not provide a value, a random system-generated value will be assigned.

        :return: The preferred_maintenance_window of this UpdateEnvironmentRequest.
        :rtype: str
        """
        return self._preferred_maintenance_window

    @preferred_maintenance_window.setter
    def preferred_maintenance_window(self, preferred_maintenance_window):
        """Sets the preferred_maintenance_window of this UpdateEnvironmentRequest.

        Configures the maintenance window you want for the runtime environment. If you do not provide a value, a random system-generated value will be assigned.

        :param preferred_maintenance_window: The preferred_maintenance_window of this UpdateEnvironmentRequest.
        :type preferred_maintenance_window: str
        """

        self._preferred_maintenance_window = preferred_maintenance_window
