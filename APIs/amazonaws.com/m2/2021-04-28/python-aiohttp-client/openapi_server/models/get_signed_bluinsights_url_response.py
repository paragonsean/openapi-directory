# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetSignedBluinsightsUrlResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, signed_bi_url: str=None):
        """GetSignedBluinsightsUrlResponse - a model defined in OpenAPI

        :param signed_bi_url: The signed_bi_url of this GetSignedBluinsightsUrlResponse.
        """
        self.openapi_types = {
            'signed_bi_url': str
        }

        self.attribute_map = {
            'signed_bi_url': 'signedBiUrl'
        }

        self._signed_bi_url = signed_bi_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetSignedBluinsightsUrlResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetSignedBluinsightsUrlResponse of this GetSignedBluinsightsUrlResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def signed_bi_url(self):
        """Gets the signed_bi_url of this GetSignedBluinsightsUrlResponse.


        :return: The signed_bi_url of this GetSignedBluinsightsUrlResponse.
        :rtype: str
        """
        return self._signed_bi_url

    @signed_bi_url.setter
    def signed_bi_url(self, signed_bi_url):
        """Sets the signed_bi_url of this GetSignedBluinsightsUrlResponse.


        :param signed_bi_url: The signed_bi_url of this GetSignedBluinsightsUrlResponse.
        :type signed_bi_url: str
        """
        if signed_bi_url is None:
            raise ValueError("Invalid value for `signed_bi_url`, must not be `None`")

        self._signed_bi_url = signed_bi_url
