# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_set_task_lifecycle import DataSetTaskLifecycle
from openapi_server.models.get_data_set_import_task_response_summary import GetDataSetImportTaskResponseSummary
from openapi_server import util


class GetDataSetImportTaskResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: DataSetTaskLifecycle=None, summary: GetDataSetImportTaskResponseSummary=None, task_id: str=None):
        """GetDataSetImportTaskResponse - a model defined in OpenAPI

        :param status: The status of this GetDataSetImportTaskResponse.
        :param summary: The summary of this GetDataSetImportTaskResponse.
        :param task_id: The task_id of this GetDataSetImportTaskResponse.
        """
        self.openapi_types = {
            'status': DataSetTaskLifecycle,
            'summary': GetDataSetImportTaskResponseSummary,
            'task_id': str
        }

        self.attribute_map = {
            'status': 'status',
            'summary': 'summary',
            'task_id': 'taskId'
        }

        self._status = status
        self._summary = summary
        self._task_id = task_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetDataSetImportTaskResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetDataSetImportTaskResponse of this GetDataSetImportTaskResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this GetDataSetImportTaskResponse.


        :return: The status of this GetDataSetImportTaskResponse.
        :rtype: DataSetTaskLifecycle
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetDataSetImportTaskResponse.


        :param status: The status of this GetDataSetImportTaskResponse.
        :type status: DataSetTaskLifecycle
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def summary(self):
        """Gets the summary of this GetDataSetImportTaskResponse.


        :return: The summary of this GetDataSetImportTaskResponse.
        :rtype: GetDataSetImportTaskResponseSummary
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this GetDataSetImportTaskResponse.


        :param summary: The summary of this GetDataSetImportTaskResponse.
        :type summary: GetDataSetImportTaskResponseSummary
        """

        self._summary = summary

    @property
    def task_id(self):
        """Gets the task_id of this GetDataSetImportTaskResponse.


        :return: The task_id of this GetDataSetImportTaskResponse.
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this GetDataSetImportTaskResponse.


        :param task_id: The task_id of this GetDataSetImportTaskResponse.
        :type task_id: str
        """
        if task_id is None:
            raise ValueError("Invalid value for `task_id`, must not be `None`")

        self._task_id = task_id
