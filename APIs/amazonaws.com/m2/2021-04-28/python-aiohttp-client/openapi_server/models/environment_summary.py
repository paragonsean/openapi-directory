# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.engine_type import EngineType
from openapi_server.models.environment_lifecycle import EnvironmentLifecycle
from openapi_server import util


class EnvironmentSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_time: datetime=None, engine_type: EngineType=None, engine_version: str=None, environment_arn: str=None, environment_id: str=None, instance_type: str=None, name: str=None, status: EnvironmentLifecycle=None):
        """EnvironmentSummary - a model defined in OpenAPI

        :param creation_time: The creation_time of this EnvironmentSummary.
        :param engine_type: The engine_type of this EnvironmentSummary.
        :param engine_version: The engine_version of this EnvironmentSummary.
        :param environment_arn: The environment_arn of this EnvironmentSummary.
        :param environment_id: The environment_id of this EnvironmentSummary.
        :param instance_type: The instance_type of this EnvironmentSummary.
        :param name: The name of this EnvironmentSummary.
        :param status: The status of this EnvironmentSummary.
        """
        self.openapi_types = {
            'creation_time': datetime,
            'engine_type': EngineType,
            'engine_version': str,
            'environment_arn': str,
            'environment_id': str,
            'instance_type': str,
            'name': str,
            'status': EnvironmentLifecycle
        }

        self.attribute_map = {
            'creation_time': 'creationTime',
            'engine_type': 'engineType',
            'engine_version': 'engineVersion',
            'environment_arn': 'environmentArn',
            'environment_id': 'environmentId',
            'instance_type': 'instanceType',
            'name': 'name',
            'status': 'status'
        }

        self._creation_time = creation_time
        self._engine_type = engine_type
        self._engine_version = engine_version
        self._environment_arn = environment_arn
        self._environment_id = environment_id
        self._instance_type = instance_type
        self._name = name
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnvironmentSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnvironmentSummary of this EnvironmentSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_time(self):
        """Gets the creation_time of this EnvironmentSummary.


        :return: The creation_time of this EnvironmentSummary.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this EnvironmentSummary.


        :param creation_time: The creation_time of this EnvironmentSummary.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def engine_type(self):
        """Gets the engine_type of this EnvironmentSummary.


        :return: The engine_type of this EnvironmentSummary.
        :rtype: EngineType
        """
        return self._engine_type

    @engine_type.setter
    def engine_type(self, engine_type):
        """Sets the engine_type of this EnvironmentSummary.


        :param engine_type: The engine_type of this EnvironmentSummary.
        :type engine_type: EngineType
        """
        if engine_type is None:
            raise ValueError("Invalid value for `engine_type`, must not be `None`")

        self._engine_type = engine_type

    @property
    def engine_version(self):
        """Gets the engine_version of this EnvironmentSummary.


        :return: The engine_version of this EnvironmentSummary.
        :rtype: str
        """
        return self._engine_version

    @engine_version.setter
    def engine_version(self, engine_version):
        """Sets the engine_version of this EnvironmentSummary.


        :param engine_version: The engine_version of this EnvironmentSummary.
        :type engine_version: str
        """
        if engine_version is None:
            raise ValueError("Invalid value for `engine_version`, must not be `None`")

        self._engine_version = engine_version

    @property
    def environment_arn(self):
        """Gets the environment_arn of this EnvironmentSummary.


        :return: The environment_arn of this EnvironmentSummary.
        :rtype: str
        """
        return self._environment_arn

    @environment_arn.setter
    def environment_arn(self, environment_arn):
        """Sets the environment_arn of this EnvironmentSummary.


        :param environment_arn: The environment_arn of this EnvironmentSummary.
        :type environment_arn: str
        """
        if environment_arn is None:
            raise ValueError("Invalid value for `environment_arn`, must not be `None`")

        self._environment_arn = environment_arn

    @property
    def environment_id(self):
        """Gets the environment_id of this EnvironmentSummary.


        :return: The environment_id of this EnvironmentSummary.
        :rtype: str
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this EnvironmentSummary.


        :param environment_id: The environment_id of this EnvironmentSummary.
        :type environment_id: str
        """
        if environment_id is None:
            raise ValueError("Invalid value for `environment_id`, must not be `None`")

        self._environment_id = environment_id

    @property
    def instance_type(self):
        """Gets the instance_type of this EnvironmentSummary.


        :return: The instance_type of this EnvironmentSummary.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this EnvironmentSummary.


        :param instance_type: The instance_type of this EnvironmentSummary.
        :type instance_type: str
        """
        if instance_type is None:
            raise ValueError("Invalid value for `instance_type`, must not be `None`")

        self._instance_type = instance_type

    @property
    def name(self):
        """Gets the name of this EnvironmentSummary.


        :return: The name of this EnvironmentSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EnvironmentSummary.


        :param name: The name of this EnvironmentSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def status(self):
        """Gets the status of this EnvironmentSummary.


        :return: The status of this EnvironmentSummary.
        :rtype: EnvironmentLifecycle
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EnvironmentSummary.


        :param status: The status of this EnvironmentSummary.
        :type status: EnvironmentLifecycle
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
