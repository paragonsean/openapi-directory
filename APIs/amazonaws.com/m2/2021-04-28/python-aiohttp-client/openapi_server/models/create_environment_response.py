# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateEnvironmentResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, environment_id: str=None):
        """CreateEnvironmentResponse - a model defined in OpenAPI

        :param environment_id: The environment_id of this CreateEnvironmentResponse.
        """
        self.openapi_types = {
            'environment_id': str
        }

        self.attribute_map = {
            'environment_id': 'environmentId'
        }

        self._environment_id = environment_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateEnvironmentResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateEnvironmentResponse of this CreateEnvironmentResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def environment_id(self):
        """Gets the environment_id of this CreateEnvironmentResponse.


        :return: The environment_id of this CreateEnvironmentResponse.
        :rtype: str
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this CreateEnvironmentResponse.


        :param environment_id: The environment_id of this CreateEnvironmentResponse.
        :type environment_id: str
        """
        if environment_id is None:
            raise ValueError("Invalid value for `environment_id`, must not be `None`")

        self._environment_id = environment_id
