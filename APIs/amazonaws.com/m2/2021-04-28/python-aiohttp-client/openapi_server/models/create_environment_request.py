# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_environment_request_high_availability_config import CreateEnvironmentRequestHighAvailabilityConfig
from openapi_server.models.storage_configuration import StorageConfiguration
import re
from openapi_server import util


class CreateEnvironmentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, description: str=None, engine_type: str=None, engine_version: str=None, high_availability_config: CreateEnvironmentRequestHighAvailabilityConfig=None, instance_type: str=None, kms_key_id: str=None, name: str=None, preferred_maintenance_window: str=None, publicly_accessible: bool=None, security_group_ids: List[str]=None, storage_configurations: List[StorageConfiguration]=None, subnet_ids: List[str]=None, tags: Dict[str, str]=None):
        """CreateEnvironmentRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateEnvironmentRequest.
        :param description: The description of this CreateEnvironmentRequest.
        :param engine_type: The engine_type of this CreateEnvironmentRequest.
        :param engine_version: The engine_version of this CreateEnvironmentRequest.
        :param high_availability_config: The high_availability_config of this CreateEnvironmentRequest.
        :param instance_type: The instance_type of this CreateEnvironmentRequest.
        :param kms_key_id: The kms_key_id of this CreateEnvironmentRequest.
        :param name: The name of this CreateEnvironmentRequest.
        :param preferred_maintenance_window: The preferred_maintenance_window of this CreateEnvironmentRequest.
        :param publicly_accessible: The publicly_accessible of this CreateEnvironmentRequest.
        :param security_group_ids: The security_group_ids of this CreateEnvironmentRequest.
        :param storage_configurations: The storage_configurations of this CreateEnvironmentRequest.
        :param subnet_ids: The subnet_ids of this CreateEnvironmentRequest.
        :param tags: The tags of this CreateEnvironmentRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'description': str,
            'engine_type': str,
            'engine_version': str,
            'high_availability_config': CreateEnvironmentRequestHighAvailabilityConfig,
            'instance_type': str,
            'kms_key_id': str,
            'name': str,
            'preferred_maintenance_window': str,
            'publicly_accessible': bool,
            'security_group_ids': List[str],
            'storage_configurations': List[StorageConfiguration],
            'subnet_ids': List[str],
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'description': 'description',
            'engine_type': 'engineType',
            'engine_version': 'engineVersion',
            'high_availability_config': 'highAvailabilityConfig',
            'instance_type': 'instanceType',
            'kms_key_id': 'kmsKeyId',
            'name': 'name',
            'preferred_maintenance_window': 'preferredMaintenanceWindow',
            'publicly_accessible': 'publiclyAccessible',
            'security_group_ids': 'securityGroupIds',
            'storage_configurations': 'storageConfigurations',
            'subnet_ids': 'subnetIds',
            'tags': 'tags'
        }

        self._client_token = client_token
        self._description = description
        self._engine_type = engine_type
        self._engine_version = engine_version
        self._high_availability_config = high_availability_config
        self._instance_type = instance_type
        self._kms_key_id = kms_key_id
        self._name = name
        self._preferred_maintenance_window = preferred_maintenance_window
        self._publicly_accessible = publicly_accessible
        self._security_group_ids = security_group_ids
        self._storage_configurations = storage_configurations
        self._subnet_ids = subnet_ids
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateEnvironmentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateEnvironment_request of this CreateEnvironmentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateEnvironmentRequest.

        Unique, case-sensitive identifier you provide to ensure the idempotency of the request to create an environment. The service generates the clientToken when the API call is triggered. The token expires after one hour, so if you retry the API within this timeframe with the same clientToken, you will get the same response. The service also handles deleting the clientToken after it expires. 

        :return: The client_token of this CreateEnvironmentRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateEnvironmentRequest.

        Unique, case-sensitive identifier you provide to ensure the idempotency of the request to create an environment. The service generates the clientToken when the API call is triggered. The token expires after one hour, so if you retry the API within this timeframe with the same clientToken, you will get the same response. The service also handles deleting the clientToken after it expires. 

        :param client_token: The client_token of this CreateEnvironmentRequest.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def description(self):
        """Gets the description of this CreateEnvironmentRequest.

        The description of the runtime environment.

        :return: The description of this CreateEnvironmentRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateEnvironmentRequest.

        The description of the runtime environment.

        :param description: The description of this CreateEnvironmentRequest.
        :type description: str
        """
        if description is not None and len(description) > 500:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `500`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def engine_type(self):
        """Gets the engine_type of this CreateEnvironmentRequest.

        The engine type for the runtime environment.

        :return: The engine_type of this CreateEnvironmentRequest.
        :rtype: str
        """
        return self._engine_type

    @engine_type.setter
    def engine_type(self, engine_type):
        """Sets the engine_type of this CreateEnvironmentRequest.

        The engine type for the runtime environment.

        :param engine_type: The engine_type of this CreateEnvironmentRequest.
        :type engine_type: str
        """
        allowed_values = ["microfocus", "bluage"]  # noqa: E501
        if engine_type not in allowed_values:
            raise ValueError(
                "Invalid value for `engine_type` ({0}), must be one of {1}"
                .format(engine_type, allowed_values)
            )

        self._engine_type = engine_type

    @property
    def engine_version(self):
        """Gets the engine_version of this CreateEnvironmentRequest.

        The version of the engine type for the runtime environment.

        :return: The engine_version of this CreateEnvironmentRequest.
        :rtype: str
        """
        return self._engine_version

    @engine_version.setter
    def engine_version(self, engine_version):
        """Sets the engine_version of this CreateEnvironmentRequest.

        The version of the engine type for the runtime environment.

        :param engine_version: The engine_version of this CreateEnvironmentRequest.
        :type engine_version: str
        """
        if engine_version is not None and not re.search(r'^\S{1,10}$', engine_version):
            raise ValueError("Invalid value for `engine_version`, must be a follow pattern or equal to `/^\S{1,10}$/`")

        self._engine_version = engine_version

    @property
    def high_availability_config(self):
        """Gets the high_availability_config of this CreateEnvironmentRequest.


        :return: The high_availability_config of this CreateEnvironmentRequest.
        :rtype: CreateEnvironmentRequestHighAvailabilityConfig
        """
        return self._high_availability_config

    @high_availability_config.setter
    def high_availability_config(self, high_availability_config):
        """Sets the high_availability_config of this CreateEnvironmentRequest.


        :param high_availability_config: The high_availability_config of this CreateEnvironmentRequest.
        :type high_availability_config: CreateEnvironmentRequestHighAvailabilityConfig
        """

        self._high_availability_config = high_availability_config

    @property
    def instance_type(self):
        """Gets the instance_type of this CreateEnvironmentRequest.

        The type of instance for the runtime environment.

        :return: The instance_type of this CreateEnvironmentRequest.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this CreateEnvironmentRequest.

        The type of instance for the runtime environment.

        :param instance_type: The instance_type of this CreateEnvironmentRequest.
        :type instance_type: str
        """
        if instance_type is None:
            raise ValueError("Invalid value for `instance_type`, must not be `None`")
        if instance_type is not None and not re.search(r'^\S{1,20}$', instance_type):
            raise ValueError("Invalid value for `instance_type`, must be a follow pattern or equal to `/^\S{1,20}$/`")

        self._instance_type = instance_type

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this CreateEnvironmentRequest.

        The identifier of a customer managed key.

        :return: The kms_key_id of this CreateEnvironmentRequest.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this CreateEnvironmentRequest.

        The identifier of a customer managed key.

        :param kms_key_id: The kms_key_id of this CreateEnvironmentRequest.
        :type kms_key_id: str
        """

        self._kms_key_id = kms_key_id

    @property
    def name(self):
        """Gets the name of this CreateEnvironmentRequest.

        The name of the runtime environment. Must be unique within the account.

        :return: The name of this CreateEnvironmentRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateEnvironmentRequest.

        The name of the runtime environment. Must be unique within the account.

        :param name: The name of this CreateEnvironmentRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and not re.search(r'^[A-Za-z0-9][A-Za-z0-9_\-]{1,59}$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[A-Za-z0-9][A-Za-z0-9_\-]{1,59}$/`")

        self._name = name

    @property
    def preferred_maintenance_window(self):
        """Gets the preferred_maintenance_window of this CreateEnvironmentRequest.

        Configures the maintenance window you want for the runtime environment. If you do not provide a value, a random system-generated value will be assigned.

        :return: The preferred_maintenance_window of this CreateEnvironmentRequest.
        :rtype: str
        """
        return self._preferred_maintenance_window

    @preferred_maintenance_window.setter
    def preferred_maintenance_window(self, preferred_maintenance_window):
        """Sets the preferred_maintenance_window of this CreateEnvironmentRequest.

        Configures the maintenance window you want for the runtime environment. If you do not provide a value, a random system-generated value will be assigned.

        :param preferred_maintenance_window: The preferred_maintenance_window of this CreateEnvironmentRequest.
        :type preferred_maintenance_window: str
        """
        if preferred_maintenance_window is not None and not re.search(r'^\S{1,50}$', preferred_maintenance_window):
            raise ValueError("Invalid value for `preferred_maintenance_window`, must be a follow pattern or equal to `/^\S{1,50}$/`")

        self._preferred_maintenance_window = preferred_maintenance_window

    @property
    def publicly_accessible(self):
        """Gets the publicly_accessible of this CreateEnvironmentRequest.

        Specifies whether the runtime environment is publicly accessible.

        :return: The publicly_accessible of this CreateEnvironmentRequest.
        :rtype: bool
        """
        return self._publicly_accessible

    @publicly_accessible.setter
    def publicly_accessible(self, publicly_accessible):
        """Sets the publicly_accessible of this CreateEnvironmentRequest.

        Specifies whether the runtime environment is publicly accessible.

        :param publicly_accessible: The publicly_accessible of this CreateEnvironmentRequest.
        :type publicly_accessible: bool
        """

        self._publicly_accessible = publicly_accessible

    @property
    def security_group_ids(self):
        """Gets the security_group_ids of this CreateEnvironmentRequest.

        The list of security groups for the VPC associated with this runtime environment.

        :return: The security_group_ids of this CreateEnvironmentRequest.
        :rtype: List[str]
        """
        return self._security_group_ids

    @security_group_ids.setter
    def security_group_ids(self, security_group_ids):
        """Sets the security_group_ids of this CreateEnvironmentRequest.

        The list of security groups for the VPC associated with this runtime environment.

        :param security_group_ids: The security_group_ids of this CreateEnvironmentRequest.
        :type security_group_ids: List[str]
        """

        self._security_group_ids = security_group_ids

    @property
    def storage_configurations(self):
        """Gets the storage_configurations of this CreateEnvironmentRequest.

        Optional. The storage configurations for this runtime environment.

        :return: The storage_configurations of this CreateEnvironmentRequest.
        :rtype: List[StorageConfiguration]
        """
        return self._storage_configurations

    @storage_configurations.setter
    def storage_configurations(self, storage_configurations):
        """Sets the storage_configurations of this CreateEnvironmentRequest.

        Optional. The storage configurations for this runtime environment.

        :param storage_configurations: The storage_configurations of this CreateEnvironmentRequest.
        :type storage_configurations: List[StorageConfiguration]
        """

        self._storage_configurations = storage_configurations

    @property
    def subnet_ids(self):
        """Gets the subnet_ids of this CreateEnvironmentRequest.

        The list of subnets associated with the VPC for this runtime environment.

        :return: The subnet_ids of this CreateEnvironmentRequest.
        :rtype: List[str]
        """
        return self._subnet_ids

    @subnet_ids.setter
    def subnet_ids(self, subnet_ids):
        """Sets the subnet_ids of this CreateEnvironmentRequest.

        The list of subnets associated with the VPC for this runtime environment.

        :param subnet_ids: The subnet_ids of this CreateEnvironmentRequest.
        :type subnet_ids: List[str]
        """

        self._subnet_ids = subnet_ids

    @property
    def tags(self):
        """Gets the tags of this CreateEnvironmentRequest.

        The tags for the runtime environment.

        :return: The tags of this CreateEnvironmentRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateEnvironmentRequest.

        The tags for the runtime environment.

        :param tags: The tags of this CreateEnvironmentRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
