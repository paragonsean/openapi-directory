# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.engine_type import EngineType
from openapi_server.models.environment_lifecycle import EnvironmentLifecycle
from openapi_server.models.get_environment_response_high_availability_config import GetEnvironmentResponseHighAvailabilityConfig
from openapi_server.models.get_environment_response_pending_maintenance import GetEnvironmentResponsePendingMaintenance
from openapi_server import util


class GetEnvironmentResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actual_capacity: int=None, creation_time: datetime=None, description: str=None, engine_type: EngineType=None, engine_version: str=None, environment_arn: str=None, environment_id: str=None, high_availability_config: GetEnvironmentResponseHighAvailabilityConfig=None, instance_type: str=None, kms_key_id: str=None, load_balancer_arn: str=None, name: str=None, pending_maintenance: GetEnvironmentResponsePendingMaintenance=None, preferred_maintenance_window: str=None, publicly_accessible: bool=None, security_group_ids: List=None, status: EnvironmentLifecycle=None, status_reason: str=None, storage_configurations: List=None, subnet_ids: List=None, tags: Dict=None, vpc_id: str=None):
        """GetEnvironmentResponse - a model defined in OpenAPI

        :param actual_capacity: The actual_capacity of this GetEnvironmentResponse.
        :param creation_time: The creation_time of this GetEnvironmentResponse.
        :param description: The description of this GetEnvironmentResponse.
        :param engine_type: The engine_type of this GetEnvironmentResponse.
        :param engine_version: The engine_version of this GetEnvironmentResponse.
        :param environment_arn: The environment_arn of this GetEnvironmentResponse.
        :param environment_id: The environment_id of this GetEnvironmentResponse.
        :param high_availability_config: The high_availability_config of this GetEnvironmentResponse.
        :param instance_type: The instance_type of this GetEnvironmentResponse.
        :param kms_key_id: The kms_key_id of this GetEnvironmentResponse.
        :param load_balancer_arn: The load_balancer_arn of this GetEnvironmentResponse.
        :param name: The name of this GetEnvironmentResponse.
        :param pending_maintenance: The pending_maintenance of this GetEnvironmentResponse.
        :param preferred_maintenance_window: The preferred_maintenance_window of this GetEnvironmentResponse.
        :param publicly_accessible: The publicly_accessible of this GetEnvironmentResponse.
        :param security_group_ids: The security_group_ids of this GetEnvironmentResponse.
        :param status: The status of this GetEnvironmentResponse.
        :param status_reason: The status_reason of this GetEnvironmentResponse.
        :param storage_configurations: The storage_configurations of this GetEnvironmentResponse.
        :param subnet_ids: The subnet_ids of this GetEnvironmentResponse.
        :param tags: The tags of this GetEnvironmentResponse.
        :param vpc_id: The vpc_id of this GetEnvironmentResponse.
        """
        self.openapi_types = {
            'actual_capacity': int,
            'creation_time': datetime,
            'description': str,
            'engine_type': EngineType,
            'engine_version': str,
            'environment_arn': str,
            'environment_id': str,
            'high_availability_config': GetEnvironmentResponseHighAvailabilityConfig,
            'instance_type': str,
            'kms_key_id': str,
            'load_balancer_arn': str,
            'name': str,
            'pending_maintenance': GetEnvironmentResponsePendingMaintenance,
            'preferred_maintenance_window': str,
            'publicly_accessible': bool,
            'security_group_ids': List,
            'status': EnvironmentLifecycle,
            'status_reason': str,
            'storage_configurations': List,
            'subnet_ids': List,
            'tags': Dict,
            'vpc_id': str
        }

        self.attribute_map = {
            'actual_capacity': 'actualCapacity',
            'creation_time': 'creationTime',
            'description': 'description',
            'engine_type': 'engineType',
            'engine_version': 'engineVersion',
            'environment_arn': 'environmentArn',
            'environment_id': 'environmentId',
            'high_availability_config': 'highAvailabilityConfig',
            'instance_type': 'instanceType',
            'kms_key_id': 'kmsKeyId',
            'load_balancer_arn': 'loadBalancerArn',
            'name': 'name',
            'pending_maintenance': 'pendingMaintenance',
            'preferred_maintenance_window': 'preferredMaintenanceWindow',
            'publicly_accessible': 'publiclyAccessible',
            'security_group_ids': 'securityGroupIds',
            'status': 'status',
            'status_reason': 'statusReason',
            'storage_configurations': 'storageConfigurations',
            'subnet_ids': 'subnetIds',
            'tags': 'tags',
            'vpc_id': 'vpcId'
        }

        self._actual_capacity = actual_capacity
        self._creation_time = creation_time
        self._description = description
        self._engine_type = engine_type
        self._engine_version = engine_version
        self._environment_arn = environment_arn
        self._environment_id = environment_id
        self._high_availability_config = high_availability_config
        self._instance_type = instance_type
        self._kms_key_id = kms_key_id
        self._load_balancer_arn = load_balancer_arn
        self._name = name
        self._pending_maintenance = pending_maintenance
        self._preferred_maintenance_window = preferred_maintenance_window
        self._publicly_accessible = publicly_accessible
        self._security_group_ids = security_group_ids
        self._status = status
        self._status_reason = status_reason
        self._storage_configurations = storage_configurations
        self._subnet_ids = subnet_ids
        self._tags = tags
        self._vpc_id = vpc_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetEnvironmentResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetEnvironmentResponse of this GetEnvironmentResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actual_capacity(self):
        """Gets the actual_capacity of this GetEnvironmentResponse.


        :return: The actual_capacity of this GetEnvironmentResponse.
        :rtype: int
        """
        return self._actual_capacity

    @actual_capacity.setter
    def actual_capacity(self, actual_capacity):
        """Sets the actual_capacity of this GetEnvironmentResponse.


        :param actual_capacity: The actual_capacity of this GetEnvironmentResponse.
        :type actual_capacity: int
        """

        self._actual_capacity = actual_capacity

    @property
    def creation_time(self):
        """Gets the creation_time of this GetEnvironmentResponse.


        :return: The creation_time of this GetEnvironmentResponse.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this GetEnvironmentResponse.


        :param creation_time: The creation_time of this GetEnvironmentResponse.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def description(self):
        """Gets the description of this GetEnvironmentResponse.


        :return: The description of this GetEnvironmentResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetEnvironmentResponse.


        :param description: The description of this GetEnvironmentResponse.
        :type description: str
        """

        self._description = description

    @property
    def engine_type(self):
        """Gets the engine_type of this GetEnvironmentResponse.


        :return: The engine_type of this GetEnvironmentResponse.
        :rtype: EngineType
        """
        return self._engine_type

    @engine_type.setter
    def engine_type(self, engine_type):
        """Sets the engine_type of this GetEnvironmentResponse.


        :param engine_type: The engine_type of this GetEnvironmentResponse.
        :type engine_type: EngineType
        """
        if engine_type is None:
            raise ValueError("Invalid value for `engine_type`, must not be `None`")

        self._engine_type = engine_type

    @property
    def engine_version(self):
        """Gets the engine_version of this GetEnvironmentResponse.


        :return: The engine_version of this GetEnvironmentResponse.
        :rtype: str
        """
        return self._engine_version

    @engine_version.setter
    def engine_version(self, engine_version):
        """Sets the engine_version of this GetEnvironmentResponse.


        :param engine_version: The engine_version of this GetEnvironmentResponse.
        :type engine_version: str
        """
        if engine_version is None:
            raise ValueError("Invalid value for `engine_version`, must not be `None`")

        self._engine_version = engine_version

    @property
    def environment_arn(self):
        """Gets the environment_arn of this GetEnvironmentResponse.


        :return: The environment_arn of this GetEnvironmentResponse.
        :rtype: str
        """
        return self._environment_arn

    @environment_arn.setter
    def environment_arn(self, environment_arn):
        """Sets the environment_arn of this GetEnvironmentResponse.


        :param environment_arn: The environment_arn of this GetEnvironmentResponse.
        :type environment_arn: str
        """
        if environment_arn is None:
            raise ValueError("Invalid value for `environment_arn`, must not be `None`")

        self._environment_arn = environment_arn

    @property
    def environment_id(self):
        """Gets the environment_id of this GetEnvironmentResponse.


        :return: The environment_id of this GetEnvironmentResponse.
        :rtype: str
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this GetEnvironmentResponse.


        :param environment_id: The environment_id of this GetEnvironmentResponse.
        :type environment_id: str
        """
        if environment_id is None:
            raise ValueError("Invalid value for `environment_id`, must not be `None`")

        self._environment_id = environment_id

    @property
    def high_availability_config(self):
        """Gets the high_availability_config of this GetEnvironmentResponse.


        :return: The high_availability_config of this GetEnvironmentResponse.
        :rtype: GetEnvironmentResponseHighAvailabilityConfig
        """
        return self._high_availability_config

    @high_availability_config.setter
    def high_availability_config(self, high_availability_config):
        """Sets the high_availability_config of this GetEnvironmentResponse.


        :param high_availability_config: The high_availability_config of this GetEnvironmentResponse.
        :type high_availability_config: GetEnvironmentResponseHighAvailabilityConfig
        """

        self._high_availability_config = high_availability_config

    @property
    def instance_type(self):
        """Gets the instance_type of this GetEnvironmentResponse.


        :return: The instance_type of this GetEnvironmentResponse.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this GetEnvironmentResponse.


        :param instance_type: The instance_type of this GetEnvironmentResponse.
        :type instance_type: str
        """
        if instance_type is None:
            raise ValueError("Invalid value for `instance_type`, must not be `None`")

        self._instance_type = instance_type

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this GetEnvironmentResponse.


        :return: The kms_key_id of this GetEnvironmentResponse.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this GetEnvironmentResponse.


        :param kms_key_id: The kms_key_id of this GetEnvironmentResponse.
        :type kms_key_id: str
        """

        self._kms_key_id = kms_key_id

    @property
    def load_balancer_arn(self):
        """Gets the load_balancer_arn of this GetEnvironmentResponse.


        :return: The load_balancer_arn of this GetEnvironmentResponse.
        :rtype: str
        """
        return self._load_balancer_arn

    @load_balancer_arn.setter
    def load_balancer_arn(self, load_balancer_arn):
        """Sets the load_balancer_arn of this GetEnvironmentResponse.


        :param load_balancer_arn: The load_balancer_arn of this GetEnvironmentResponse.
        :type load_balancer_arn: str
        """

        self._load_balancer_arn = load_balancer_arn

    @property
    def name(self):
        """Gets the name of this GetEnvironmentResponse.


        :return: The name of this GetEnvironmentResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetEnvironmentResponse.


        :param name: The name of this GetEnvironmentResponse.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def pending_maintenance(self):
        """Gets the pending_maintenance of this GetEnvironmentResponse.


        :return: The pending_maintenance of this GetEnvironmentResponse.
        :rtype: GetEnvironmentResponsePendingMaintenance
        """
        return self._pending_maintenance

    @pending_maintenance.setter
    def pending_maintenance(self, pending_maintenance):
        """Sets the pending_maintenance of this GetEnvironmentResponse.


        :param pending_maintenance: The pending_maintenance of this GetEnvironmentResponse.
        :type pending_maintenance: GetEnvironmentResponsePendingMaintenance
        """

        self._pending_maintenance = pending_maintenance

    @property
    def preferred_maintenance_window(self):
        """Gets the preferred_maintenance_window of this GetEnvironmentResponse.


        :return: The preferred_maintenance_window of this GetEnvironmentResponse.
        :rtype: str
        """
        return self._preferred_maintenance_window

    @preferred_maintenance_window.setter
    def preferred_maintenance_window(self, preferred_maintenance_window):
        """Sets the preferred_maintenance_window of this GetEnvironmentResponse.


        :param preferred_maintenance_window: The preferred_maintenance_window of this GetEnvironmentResponse.
        :type preferred_maintenance_window: str
        """

        self._preferred_maintenance_window = preferred_maintenance_window

    @property
    def publicly_accessible(self):
        """Gets the publicly_accessible of this GetEnvironmentResponse.


        :return: The publicly_accessible of this GetEnvironmentResponse.
        :rtype: bool
        """
        return self._publicly_accessible

    @publicly_accessible.setter
    def publicly_accessible(self, publicly_accessible):
        """Sets the publicly_accessible of this GetEnvironmentResponse.


        :param publicly_accessible: The publicly_accessible of this GetEnvironmentResponse.
        :type publicly_accessible: bool
        """

        self._publicly_accessible = publicly_accessible

    @property
    def security_group_ids(self):
        """Gets the security_group_ids of this GetEnvironmentResponse.


        :return: The security_group_ids of this GetEnvironmentResponse.
        :rtype: List
        """
        return self._security_group_ids

    @security_group_ids.setter
    def security_group_ids(self, security_group_ids):
        """Sets the security_group_ids of this GetEnvironmentResponse.


        :param security_group_ids: The security_group_ids of this GetEnvironmentResponse.
        :type security_group_ids: List
        """
        if security_group_ids is None:
            raise ValueError("Invalid value for `security_group_ids`, must not be `None`")

        self._security_group_ids = security_group_ids

    @property
    def status(self):
        """Gets the status of this GetEnvironmentResponse.


        :return: The status of this GetEnvironmentResponse.
        :rtype: EnvironmentLifecycle
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetEnvironmentResponse.


        :param status: The status of this GetEnvironmentResponse.
        :type status: EnvironmentLifecycle
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def status_reason(self):
        """Gets the status_reason of this GetEnvironmentResponse.


        :return: The status_reason of this GetEnvironmentResponse.
        :rtype: str
        """
        return self._status_reason

    @status_reason.setter
    def status_reason(self, status_reason):
        """Sets the status_reason of this GetEnvironmentResponse.


        :param status_reason: The status_reason of this GetEnvironmentResponse.
        :type status_reason: str
        """

        self._status_reason = status_reason

    @property
    def storage_configurations(self):
        """Gets the storage_configurations of this GetEnvironmentResponse.


        :return: The storage_configurations of this GetEnvironmentResponse.
        :rtype: List
        """
        return self._storage_configurations

    @storage_configurations.setter
    def storage_configurations(self, storage_configurations):
        """Sets the storage_configurations of this GetEnvironmentResponse.


        :param storage_configurations: The storage_configurations of this GetEnvironmentResponse.
        :type storage_configurations: List
        """

        self._storage_configurations = storage_configurations

    @property
    def subnet_ids(self):
        """Gets the subnet_ids of this GetEnvironmentResponse.


        :return: The subnet_ids of this GetEnvironmentResponse.
        :rtype: List
        """
        return self._subnet_ids

    @subnet_ids.setter
    def subnet_ids(self, subnet_ids):
        """Sets the subnet_ids of this GetEnvironmentResponse.


        :param subnet_ids: The subnet_ids of this GetEnvironmentResponse.
        :type subnet_ids: List
        """
        if subnet_ids is None:
            raise ValueError("Invalid value for `subnet_ids`, must not be `None`")

        self._subnet_ids = subnet_ids

    @property
    def tags(self):
        """Gets the tags of this GetEnvironmentResponse.


        :return: The tags of this GetEnvironmentResponse.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this GetEnvironmentResponse.


        :param tags: The tags of this GetEnvironmentResponse.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def vpc_id(self):
        """Gets the vpc_id of this GetEnvironmentResponse.


        :return: The vpc_id of this GetEnvironmentResponse.
        :rtype: str
        """
        return self._vpc_id

    @vpc_id.setter
    def vpc_id(self, vpc_id):
        """Sets the vpc_id of this GetEnvironmentResponse.


        :param vpc_id: The vpc_id of this GetEnvironmentResponse.
        :type vpc_id: str
        """
        if vpc_id is None:
            raise ValueError("Invalid value for `vpc_id`, must not be `None`")

        self._vpc_id = vpc_id
