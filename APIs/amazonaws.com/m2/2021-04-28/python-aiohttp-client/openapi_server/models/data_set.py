# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_set_dataset_org import DataSetDatasetOrg
from openapi_server.models.data_set_record_length import DataSetRecordLength
from openapi_server import util


class DataSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset_name: str=None, dataset_org: DataSetDatasetOrg=None, record_length: DataSetRecordLength=None, relative_path: str=None, storage_type: str=None):
        """DataSet - a model defined in OpenAPI

        :param dataset_name: The dataset_name of this DataSet.
        :param dataset_org: The dataset_org of this DataSet.
        :param record_length: The record_length of this DataSet.
        :param relative_path: The relative_path of this DataSet.
        :param storage_type: The storage_type of this DataSet.
        """
        self.openapi_types = {
            'dataset_name': str,
            'dataset_org': DataSetDatasetOrg,
            'record_length': DataSetRecordLength,
            'relative_path': str,
            'storage_type': str
        }

        self.attribute_map = {
            'dataset_name': 'datasetName',
            'dataset_org': 'datasetOrg',
            'record_length': 'recordLength',
            'relative_path': 'relativePath',
            'storage_type': 'storageType'
        }

        self._dataset_name = dataset_name
        self._dataset_org = dataset_org
        self._record_length = record_length
        self._relative_path = relative_path
        self._storage_type = storage_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataSet of this DataSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset_name(self):
        """Gets the dataset_name of this DataSet.


        :return: The dataset_name of this DataSet.
        :rtype: str
        """
        return self._dataset_name

    @dataset_name.setter
    def dataset_name(self, dataset_name):
        """Sets the dataset_name of this DataSet.


        :param dataset_name: The dataset_name of this DataSet.
        :type dataset_name: str
        """
        if dataset_name is None:
            raise ValueError("Invalid value for `dataset_name`, must not be `None`")

        self._dataset_name = dataset_name

    @property
    def dataset_org(self):
        """Gets the dataset_org of this DataSet.


        :return: The dataset_org of this DataSet.
        :rtype: DataSetDatasetOrg
        """
        return self._dataset_org

    @dataset_org.setter
    def dataset_org(self, dataset_org):
        """Sets the dataset_org of this DataSet.


        :param dataset_org: The dataset_org of this DataSet.
        :type dataset_org: DataSetDatasetOrg
        """
        if dataset_org is None:
            raise ValueError("Invalid value for `dataset_org`, must not be `None`")

        self._dataset_org = dataset_org

    @property
    def record_length(self):
        """Gets the record_length of this DataSet.


        :return: The record_length of this DataSet.
        :rtype: DataSetRecordLength
        """
        return self._record_length

    @record_length.setter
    def record_length(self, record_length):
        """Sets the record_length of this DataSet.


        :param record_length: The record_length of this DataSet.
        :type record_length: DataSetRecordLength
        """
        if record_length is None:
            raise ValueError("Invalid value for `record_length`, must not be `None`")

        self._record_length = record_length

    @property
    def relative_path(self):
        """Gets the relative_path of this DataSet.


        :return: The relative_path of this DataSet.
        :rtype: str
        """
        return self._relative_path

    @relative_path.setter
    def relative_path(self, relative_path):
        """Sets the relative_path of this DataSet.


        :param relative_path: The relative_path of this DataSet.
        :type relative_path: str
        """

        self._relative_path = relative_path

    @property
    def storage_type(self):
        """Gets the storage_type of this DataSet.


        :return: The storage_type of this DataSet.
        :rtype: str
        """
        return self._storage_type

    @storage_type.setter
    def storage_type(self, storage_type):
        """Sets the storage_type of this DataSet.


        :param storage_type: The storage_type of this DataSet.
        :type storage_type: str
        """

        self._storage_type = storage_type
