/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEngineType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEngineType::OAIEngineType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEngineType::OAIEngineType() {
    this->initializeModel();
}

OAIEngineType::~OAIEngineType() {}

void OAIEngineType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEngineType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEngineType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("microfocus", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEngineType::MICROFOCUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("bluage", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEngineType::BLUAGE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEngineType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEngineType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEngineType::MICROFOCUS:
            val = "microfocus";
            break;
        case eOAIEngineType::BLUAGE:
            val = "bluage";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEngineType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEngineType::eOAIEngineType OAIEngineType::getValue() const {
    return m_value;
}

void OAIEngineType::setValue(const OAIEngineType::eOAIEngineType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEngineType::isSet() const {
    
    return m_value_isSet;
}

bool OAIEngineType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
