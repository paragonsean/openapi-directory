/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetApplicationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetApplicationResponse::OAIGetApplicationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetApplicationResponse::OAIGetApplicationResponse() {
    this->initializeModel();
}

OAIGetApplicationResponse::~OAIGetApplicationResponse() {}

void OAIGetApplicationResponse::initializeModel() {

    m_application_arn_isSet = false;
    m_application_arn_isValid = false;

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_deployed_version_isSet = false;
    m_deployed_version_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_engine_type_isSet = false;
    m_engine_type_isValid = false;

    m_environment_id_isSet = false;
    m_environment_id_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_last_start_time_isSet = false;
    m_last_start_time_isValid = false;

    m_latest_version_isSet = false;
    m_latest_version_isValid = false;

    m_listener_arns_isSet = false;
    m_listener_arns_isValid = false;

    m_listener_ports_isSet = false;
    m_listener_ports_isValid = false;

    m_load_balancer_dns_name_isSet = false;
    m_load_balancer_dns_name_isValid = false;

    m_log_groups_isSet = false;
    m_log_groups_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_target_group_arns_isSet = false;
    m_target_group_arns_isValid = false;
}

void OAIGetApplicationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetApplicationResponse::fromJsonObject(QJsonObject json) {

    m_application_arn_isValid = ::OpenAPI::fromJsonValue(m_application_arn, json[QString("applicationArn")]);
    m_application_arn_isSet = !json[QString("applicationArn")].isNull() && m_application_arn_isValid;

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("applicationId")]);
    m_application_id_isSet = !json[QString("applicationId")].isNull() && m_application_id_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_deployed_version_isValid = ::OpenAPI::fromJsonValue(m_deployed_version, json[QString("deployedVersion")]);
    m_deployed_version_isSet = !json[QString("deployedVersion")].isNull() && m_deployed_version_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_engine_type_isValid = ::OpenAPI::fromJsonValue(m_engine_type, json[QString("engineType")]);
    m_engine_type_isSet = !json[QString("engineType")].isNull() && m_engine_type_isValid;

    m_environment_id_isValid = ::OpenAPI::fromJsonValue(m_environment_id, json[QString("environmentId")]);
    m_environment_id_isSet = !json[QString("environmentId")].isNull() && m_environment_id_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("kmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("kmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_last_start_time_isValid = ::OpenAPI::fromJsonValue(m_last_start_time, json[QString("lastStartTime")]);
    m_last_start_time_isSet = !json[QString("lastStartTime")].isNull() && m_last_start_time_isValid;

    m_latest_version_isValid = ::OpenAPI::fromJsonValue(m_latest_version, json[QString("latestVersion")]);
    m_latest_version_isSet = !json[QString("latestVersion")].isNull() && m_latest_version_isValid;

    m_listener_arns_isValid = ::OpenAPI::fromJsonValue(m_listener_arns, json[QString("listenerArns")]);
    m_listener_arns_isSet = !json[QString("listenerArns")].isNull() && m_listener_arns_isValid;

    m_listener_ports_isValid = ::OpenAPI::fromJsonValue(m_listener_ports, json[QString("listenerPorts")]);
    m_listener_ports_isSet = !json[QString("listenerPorts")].isNull() && m_listener_ports_isValid;

    m_load_balancer_dns_name_isValid = ::OpenAPI::fromJsonValue(m_load_balancer_dns_name, json[QString("loadBalancerDnsName")]);
    m_load_balancer_dns_name_isSet = !json[QString("loadBalancerDnsName")].isNull() && m_load_balancer_dns_name_isValid;

    m_log_groups_isValid = ::OpenAPI::fromJsonValue(m_log_groups, json[QString("logGroups")]);
    m_log_groups_isSet = !json[QString("logGroups")].isNull() && m_log_groups_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("statusReason")]);
    m_status_reason_isSet = !json[QString("statusReason")].isNull() && m_status_reason_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_target_group_arns_isValid = ::OpenAPI::fromJsonValue(m_target_group_arns, json[QString("targetGroupArns")]);
    m_target_group_arns_isSet = !json[QString("targetGroupArns")].isNull() && m_target_group_arns_isValid;
}

QString OAIGetApplicationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetApplicationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_application_arn_isSet) {
        obj.insert(QString("applicationArn"), ::OpenAPI::toJsonValue(m_application_arn));
    }
    if (m_application_id_isSet) {
        obj.insert(QString("applicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_deployed_version.isSet()) {
        obj.insert(QString("deployedVersion"), ::OpenAPI::toJsonValue(m_deployed_version));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_engine_type.isSet()) {
        obj.insert(QString("engineType"), ::OpenAPI::toJsonValue(m_engine_type));
    }
    if (m_environment_id_isSet) {
        obj.insert(QString("environmentId"), ::OpenAPI::toJsonValue(m_environment_id));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("kmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_last_start_time_isSet) {
        obj.insert(QString("lastStartTime"), ::OpenAPI::toJsonValue(m_last_start_time));
    }
    if (m_latest_version.isSet()) {
        obj.insert(QString("latestVersion"), ::OpenAPI::toJsonValue(m_latest_version));
    }
    if (m_listener_arns.isSet()) {
        obj.insert(QString("listenerArns"), ::OpenAPI::toJsonValue(m_listener_arns));
    }
    if (m_listener_ports.isSet()) {
        obj.insert(QString("listenerPorts"), ::OpenAPI::toJsonValue(m_listener_ports));
    }
    if (m_load_balancer_dns_name_isSet) {
        obj.insert(QString("loadBalancerDnsName"), ::OpenAPI::toJsonValue(m_load_balancer_dns_name));
    }
    if (m_log_groups.isSet()) {
        obj.insert(QString("logGroups"), ::OpenAPI::toJsonValue(m_log_groups));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_reason_isSet) {
        obj.insert(QString("statusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_target_group_arns.isSet()) {
        obj.insert(QString("targetGroupArns"), ::OpenAPI::toJsonValue(m_target_group_arns));
    }
    return obj;
}

QString OAIGetApplicationResponse::getApplicationArn() const {
    return m_application_arn;
}
void OAIGetApplicationResponse::setApplicationArn(const QString &application_arn) {
    m_application_arn = application_arn;
    m_application_arn_isSet = true;
}

bool OAIGetApplicationResponse::is_application_arn_Set() const{
    return m_application_arn_isSet;
}

bool OAIGetApplicationResponse::is_application_arn_Valid() const{
    return m_application_arn_isValid;
}

QString OAIGetApplicationResponse::getApplicationId() const {
    return m_application_id;
}
void OAIGetApplicationResponse::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIGetApplicationResponse::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIGetApplicationResponse::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QDateTime OAIGetApplicationResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIGetApplicationResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIGetApplicationResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIGetApplicationResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAIGetApplicationResponse_deployedVersion OAIGetApplicationResponse::getDeployedVersion() const {
    return m_deployed_version;
}
void OAIGetApplicationResponse::setDeployedVersion(const OAIGetApplicationResponse_deployedVersion &deployed_version) {
    m_deployed_version = deployed_version;
    m_deployed_version_isSet = true;
}

bool OAIGetApplicationResponse::is_deployed_version_Set() const{
    return m_deployed_version_isSet;
}

bool OAIGetApplicationResponse::is_deployed_version_Valid() const{
    return m_deployed_version_isValid;
}

QString OAIGetApplicationResponse::getDescription() const {
    return m_description;
}
void OAIGetApplicationResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGetApplicationResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGetApplicationResponse::is_description_Valid() const{
    return m_description_isValid;
}

OAIEngineType OAIGetApplicationResponse::getEngineType() const {
    return m_engine_type;
}
void OAIGetApplicationResponse::setEngineType(const OAIEngineType &engine_type) {
    m_engine_type = engine_type;
    m_engine_type_isSet = true;
}

bool OAIGetApplicationResponse::is_engine_type_Set() const{
    return m_engine_type_isSet;
}

bool OAIGetApplicationResponse::is_engine_type_Valid() const{
    return m_engine_type_isValid;
}

QString OAIGetApplicationResponse::getEnvironmentId() const {
    return m_environment_id;
}
void OAIGetApplicationResponse::setEnvironmentId(const QString &environment_id) {
    m_environment_id = environment_id;
    m_environment_id_isSet = true;
}

bool OAIGetApplicationResponse::is_environment_id_Set() const{
    return m_environment_id_isSet;
}

bool OAIGetApplicationResponse::is_environment_id_Valid() const{
    return m_environment_id_isValid;
}

QString OAIGetApplicationResponse::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIGetApplicationResponse::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIGetApplicationResponse::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIGetApplicationResponse::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

QDateTime OAIGetApplicationResponse::getLastStartTime() const {
    return m_last_start_time;
}
void OAIGetApplicationResponse::setLastStartTime(const QDateTime &last_start_time) {
    m_last_start_time = last_start_time;
    m_last_start_time_isSet = true;
}

bool OAIGetApplicationResponse::is_last_start_time_Set() const{
    return m_last_start_time_isSet;
}

bool OAIGetApplicationResponse::is_last_start_time_Valid() const{
    return m_last_start_time_isValid;
}

OAIGetApplicationResponse_latestVersion OAIGetApplicationResponse::getLatestVersion() const {
    return m_latest_version;
}
void OAIGetApplicationResponse::setLatestVersion(const OAIGetApplicationResponse_latestVersion &latest_version) {
    m_latest_version = latest_version;
    m_latest_version_isSet = true;
}

bool OAIGetApplicationResponse::is_latest_version_Set() const{
    return m_latest_version_isSet;
}

bool OAIGetApplicationResponse::is_latest_version_Valid() const{
    return m_latest_version_isValid;
}

QList OAIGetApplicationResponse::getListenerArns() const {
    return m_listener_arns;
}
void OAIGetApplicationResponse::setListenerArns(const QList &listener_arns) {
    m_listener_arns = listener_arns;
    m_listener_arns_isSet = true;
}

bool OAIGetApplicationResponse::is_listener_arns_Set() const{
    return m_listener_arns_isSet;
}

bool OAIGetApplicationResponse::is_listener_arns_Valid() const{
    return m_listener_arns_isValid;
}

QList OAIGetApplicationResponse::getListenerPorts() const {
    return m_listener_ports;
}
void OAIGetApplicationResponse::setListenerPorts(const QList &listener_ports) {
    m_listener_ports = listener_ports;
    m_listener_ports_isSet = true;
}

bool OAIGetApplicationResponse::is_listener_ports_Set() const{
    return m_listener_ports_isSet;
}

bool OAIGetApplicationResponse::is_listener_ports_Valid() const{
    return m_listener_ports_isValid;
}

QString OAIGetApplicationResponse::getLoadBalancerDnsName() const {
    return m_load_balancer_dns_name;
}
void OAIGetApplicationResponse::setLoadBalancerDnsName(const QString &load_balancer_dns_name) {
    m_load_balancer_dns_name = load_balancer_dns_name;
    m_load_balancer_dns_name_isSet = true;
}

bool OAIGetApplicationResponse::is_load_balancer_dns_name_Set() const{
    return m_load_balancer_dns_name_isSet;
}

bool OAIGetApplicationResponse::is_load_balancer_dns_name_Valid() const{
    return m_load_balancer_dns_name_isValid;
}

QList OAIGetApplicationResponse::getLogGroups() const {
    return m_log_groups;
}
void OAIGetApplicationResponse::setLogGroups(const QList &log_groups) {
    m_log_groups = log_groups;
    m_log_groups_isSet = true;
}

bool OAIGetApplicationResponse::is_log_groups_Set() const{
    return m_log_groups_isSet;
}

bool OAIGetApplicationResponse::is_log_groups_Valid() const{
    return m_log_groups_isValid;
}

QString OAIGetApplicationResponse::getName() const {
    return m_name;
}
void OAIGetApplicationResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetApplicationResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetApplicationResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetApplicationResponse::getRoleArn() const {
    return m_role_arn;
}
void OAIGetApplicationResponse::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIGetApplicationResponse::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIGetApplicationResponse::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAIApplicationLifecycle OAIGetApplicationResponse::getStatus() const {
    return m_status;
}
void OAIGetApplicationResponse::setStatus(const OAIApplicationLifecycle &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetApplicationResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetApplicationResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetApplicationResponse::getStatusReason() const {
    return m_status_reason;
}
void OAIGetApplicationResponse::setStatusReason(const QString &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAIGetApplicationResponse::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAIGetApplicationResponse::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

QMap OAIGetApplicationResponse::getTags() const {
    return m_tags;
}
void OAIGetApplicationResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetApplicationResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetApplicationResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

QList OAIGetApplicationResponse::getTargetGroupArns() const {
    return m_target_group_arns;
}
void OAIGetApplicationResponse::setTargetGroupArns(const QList &target_group_arns) {
    m_target_group_arns = target_group_arns;
    m_target_group_arns_isSet = true;
}

bool OAIGetApplicationResponse::is_target_group_arns_Set() const{
    return m_target_group_arns_isSet;
}

bool OAIGetApplicationResponse::is_target_group_arns_Valid() const{
    return m_target_group_arns_isValid;
}

bool OAIGetApplicationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployed_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_listener_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_listener_ports.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancer_dns_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_group_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetApplicationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_arn_isValid && m_application_id_isValid && m_creation_time_isValid && m_engine_type_isValid && m_latest_version_isValid && m_name_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
