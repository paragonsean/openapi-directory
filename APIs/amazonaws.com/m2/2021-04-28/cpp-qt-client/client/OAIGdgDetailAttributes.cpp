/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGdgDetailAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGdgDetailAttributes::OAIGdgDetailAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGdgDetailAttributes::OAIGdgDetailAttributes() {
    this->initializeModel();
}

OAIGdgDetailAttributes::~OAIGdgDetailAttributes() {}

void OAIGdgDetailAttributes::initializeModel() {

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_roll_disposition_isSet = false;
    m_roll_disposition_isValid = false;
}

void OAIGdgDetailAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGdgDetailAttributes::fromJsonObject(QJsonObject json) {

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_roll_disposition_isValid = ::OpenAPI::fromJsonValue(m_roll_disposition, json[QString("rollDisposition")]);
    m_roll_disposition_isSet = !json[QString("rollDisposition")].isNull() && m_roll_disposition_isValid;
}

QString OAIGdgDetailAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGdgDetailAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_roll_disposition_isSet) {
        obj.insert(QString("rollDisposition"), ::OpenAPI::toJsonValue(m_roll_disposition));
    }
    return obj;
}

qint32 OAIGdgDetailAttributes::getLimit() const {
    return m_limit;
}
void OAIGdgDetailAttributes::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIGdgDetailAttributes::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIGdgDetailAttributes::is_limit_Valid() const{
    return m_limit_isValid;
}

QString OAIGdgDetailAttributes::getRollDisposition() const {
    return m_roll_disposition;
}
void OAIGdgDetailAttributes::setRollDisposition(const QString &roll_disposition) {
    m_roll_disposition = roll_disposition;
    m_roll_disposition_isSet = true;
}

bool OAIGdgDetailAttributes::is_roll_disposition_Set() const{
    return m_roll_disposition_isSet;
}

bool OAIGdgDetailAttributes::is_roll_disposition_Valid() const{
    return m_roll_disposition_isValid;
}

bool OAIGdgDetailAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roll_disposition_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGdgDetailAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
