/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateApplication_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateApplication_request::OAICreateApplication_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateApplication_request::OAICreateApplication_request() {
    this->initializeModel();
}

OAICreateApplication_request::~OAICreateApplication_request() {}

void OAICreateApplication_request::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_engine_type_isSet = false;
    m_engine_type_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateApplication_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateApplication_request::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("definition")]);
    m_definition_isSet = !json[QString("definition")].isNull() && m_definition_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_engine_type_isValid = ::OpenAPI::fromJsonValue(m_engine_type, json[QString("engineType")]);
    m_engine_type_isSet = !json[QString("engineType")].isNull() && m_engine_type_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("kmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("kmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateApplication_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateApplication_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_definition.isSet()) {
        obj.insert(QString("definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_engine_type_isSet) {
        obj.insert(QString("engineType"), ::OpenAPI::toJsonValue(m_engine_type));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("kmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateApplication_request::getClientToken() const {
    return m_client_token;
}
void OAICreateApplication_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateApplication_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateApplication_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAICreateApplication_request_definition OAICreateApplication_request::getDefinition() const {
    return m_definition;
}
void OAICreateApplication_request::setDefinition(const OAICreateApplication_request_definition &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAICreateApplication_request::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAICreateApplication_request::is_definition_Valid() const{
    return m_definition_isValid;
}

QString OAICreateApplication_request::getDescription() const {
    return m_description;
}
void OAICreateApplication_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateApplication_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateApplication_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateApplication_request::getEngineType() const {
    return m_engine_type;
}
void OAICreateApplication_request::setEngineType(const QString &engine_type) {
    m_engine_type = engine_type;
    m_engine_type_isSet = true;
}

bool OAICreateApplication_request::is_engine_type_Set() const{
    return m_engine_type_isSet;
}

bool OAICreateApplication_request::is_engine_type_Valid() const{
    return m_engine_type_isValid;
}

QString OAICreateApplication_request::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAICreateApplication_request::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAICreateApplication_request::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAICreateApplication_request::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

QString OAICreateApplication_request::getName() const {
    return m_name;
}
void OAICreateApplication_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateApplication_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateApplication_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateApplication_request::getRoleArn() const {
    return m_role_arn;
}
void OAICreateApplication_request::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAICreateApplication_request::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAICreateApplication_request::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QMap<QString, QString> OAICreateApplication_request::getTags() const {
    return m_tags;
}
void OAICreateApplication_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateApplication_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateApplication_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateApplication_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateApplication_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_definition_isValid && m_engine_type_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
