/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateDataSetImportTask_request_importConfig.h
 *
 * Identifies one or more data sets you want to import with the &lt;a&gt;CreateDataSetImportTask&lt;/a&gt; operation.
 */

#ifndef OAICreateDataSetImportTask_request_importConfig_H
#define OAICreateDataSetImportTask_request_importConfig_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateDataSetImportTask_request_importConfig : public OAIObject {
public:
    OAICreateDataSetImportTask_request_importConfig();
    OAICreateDataSetImportTask_request_importConfig(QString json);
    ~OAICreateDataSetImportTask_request_importConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getDataSets() const;
    void setDataSets(const QList &data_sets);
    bool is_data_sets_Set() const;
    bool is_data_sets_Valid() const;

    QString getS3Location() const;
    void setS3Location(const QString &s3_location);
    bool is_s3_location_Set() const;
    bool is_s3_location_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_data_sets;
    bool m_data_sets_isSet;
    bool m_data_sets_isValid;

    QString m_s3_location;
    bool m_s3_location_isSet;
    bool m_s3_location_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateDataSetImportTask_request_importConfig)

#endif // OAICreateDataSetImportTask_request_importConfig_H
