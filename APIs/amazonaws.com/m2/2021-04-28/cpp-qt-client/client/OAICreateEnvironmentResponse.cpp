/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateEnvironmentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateEnvironmentResponse::OAICreateEnvironmentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateEnvironmentResponse::OAICreateEnvironmentResponse() {
    this->initializeModel();
}

OAICreateEnvironmentResponse::~OAICreateEnvironmentResponse() {}

void OAICreateEnvironmentResponse::initializeModel() {

    m_environment_id_isSet = false;
    m_environment_id_isValid = false;
}

void OAICreateEnvironmentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateEnvironmentResponse::fromJsonObject(QJsonObject json) {

    m_environment_id_isValid = ::OpenAPI::fromJsonValue(m_environment_id, json[QString("environmentId")]);
    m_environment_id_isSet = !json[QString("environmentId")].isNull() && m_environment_id_isValid;
}

QString OAICreateEnvironmentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateEnvironmentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_environment_id_isSet) {
        obj.insert(QString("environmentId"), ::OpenAPI::toJsonValue(m_environment_id));
    }
    return obj;
}

QString OAICreateEnvironmentResponse::getEnvironmentId() const {
    return m_environment_id;
}
void OAICreateEnvironmentResponse::setEnvironmentId(const QString &environment_id) {
    m_environment_id = environment_id;
    m_environment_id_isSet = true;
}

bool OAICreateEnvironmentResponse::is_environment_id_Set() const{
    return m_environment_id_isSet;
}

bool OAICreateEnvironmentResponse::is_environment_id_Valid() const{
    return m_environment_id_isValid;
}

bool OAICreateEnvironmentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateEnvironmentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_environment_id_isValid && true;
}

} // namespace OpenAPI
