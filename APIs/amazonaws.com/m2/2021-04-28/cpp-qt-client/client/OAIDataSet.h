/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDataSet.h
 *
 * Defines a data set.
 */

#ifndef OAIDataSet_H
#define OAIDataSet_H

#include <QJsonObject>

#include "OAIDataSet_datasetOrg.h"
#include "OAIDataSet_recordLength.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDataSet_datasetOrg;
class OAIDataSet_recordLength;

class OAIDataSet : public OAIObject {
public:
    OAIDataSet();
    OAIDataSet(QString json);
    ~OAIDataSet() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDatasetName() const;
    void setDatasetName(const QString &dataset_name);
    bool is_dataset_name_Set() const;
    bool is_dataset_name_Valid() const;

    OAIDataSet_datasetOrg getDatasetOrg() const;
    void setDatasetOrg(const OAIDataSet_datasetOrg &dataset_org);
    bool is_dataset_org_Set() const;
    bool is_dataset_org_Valid() const;

    OAIDataSet_recordLength getRecordLength() const;
    void setRecordLength(const OAIDataSet_recordLength &record_length);
    bool is_record_length_Set() const;
    bool is_record_length_Valid() const;

    QString getRelativePath() const;
    void setRelativePath(const QString &relative_path);
    bool is_relative_path_Set() const;
    bool is_relative_path_Valid() const;

    QString getStorageType() const;
    void setStorageType(const QString &storage_type);
    bool is_storage_type_Set() const;
    bool is_storage_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_dataset_name;
    bool m_dataset_name_isSet;
    bool m_dataset_name_isValid;

    OAIDataSet_datasetOrg m_dataset_org;
    bool m_dataset_org_isSet;
    bool m_dataset_org_isValid;

    OAIDataSet_recordLength m_record_length;
    bool m_record_length_isSet;
    bool m_record_length_isValid;

    QString m_relative_path;
    bool m_relative_path_isSet;
    bool m_relative_path_isValid;

    QString m_storage_type;
    bool m_storage_type_isSet;
    bool m_storage_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDataSet)

#endif // OAIDataSet_H
