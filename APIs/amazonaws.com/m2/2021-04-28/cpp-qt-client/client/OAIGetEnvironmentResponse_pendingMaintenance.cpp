/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetEnvironmentResponse_pendingMaintenance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetEnvironmentResponse_pendingMaintenance::OAIGetEnvironmentResponse_pendingMaintenance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetEnvironmentResponse_pendingMaintenance::OAIGetEnvironmentResponse_pendingMaintenance() {
    this->initializeModel();
}

OAIGetEnvironmentResponse_pendingMaintenance::~OAIGetEnvironmentResponse_pendingMaintenance() {}

void OAIGetEnvironmentResponse_pendingMaintenance::initializeModel() {

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;
}

void OAIGetEnvironmentResponse_pendingMaintenance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetEnvironmentResponse_pendingMaintenance::fromJsonObject(QJsonObject json) {

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("engineVersion")]);
    m_engine_version_isSet = !json[QString("engineVersion")].isNull() && m_engine_version_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("schedule")]);
    m_schedule_isSet = !json[QString("schedule")].isNull() && m_schedule_isValid;
}

QString OAIGetEnvironmentResponse_pendingMaintenance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetEnvironmentResponse_pendingMaintenance::asJsonObject() const {
    QJsonObject obj;
    if (m_engine_version_isSet) {
        obj.insert(QString("engineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_schedule.isSet()) {
        obj.insert(QString("schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    return obj;
}

QString OAIGetEnvironmentResponse_pendingMaintenance::getEngineVersion() const {
    return m_engine_version;
}
void OAIGetEnvironmentResponse_pendingMaintenance::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIGetEnvironmentResponse_pendingMaintenance::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIGetEnvironmentResponse_pendingMaintenance::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

OAIPendingMaintenance_schedule OAIGetEnvironmentResponse_pendingMaintenance::getSchedule() const {
    return m_schedule;
}
void OAIGetEnvironmentResponse_pendingMaintenance::setSchedule(const OAIPendingMaintenance_schedule &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIGetEnvironmentResponse_pendingMaintenance::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIGetEnvironmentResponse_pendingMaintenance::is_schedule_Valid() const{
    return m_schedule_isValid;
}

bool OAIGetEnvironmentResponse_pendingMaintenance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetEnvironmentResponse_pendingMaintenance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
