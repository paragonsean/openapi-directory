/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDataSetImportTaskResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDataSetImportTaskResponse::OAICreateDataSetImportTaskResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDataSetImportTaskResponse::OAICreateDataSetImportTaskResponse() {
    this->initializeModel();
}

OAICreateDataSetImportTaskResponse::~OAICreateDataSetImportTaskResponse() {}

void OAICreateDataSetImportTaskResponse::initializeModel() {

    m_task_id_isSet = false;
    m_task_id_isValid = false;
}

void OAICreateDataSetImportTaskResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDataSetImportTaskResponse::fromJsonObject(QJsonObject json) {

    m_task_id_isValid = ::OpenAPI::fromJsonValue(m_task_id, json[QString("taskId")]);
    m_task_id_isSet = !json[QString("taskId")].isNull() && m_task_id_isValid;
}

QString OAICreateDataSetImportTaskResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDataSetImportTaskResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_task_id_isSet) {
        obj.insert(QString("taskId"), ::OpenAPI::toJsonValue(m_task_id));
    }
    return obj;
}

QString OAICreateDataSetImportTaskResponse::getTaskId() const {
    return m_task_id;
}
void OAICreateDataSetImportTaskResponse::setTaskId(const QString &task_id) {
    m_task_id = task_id;
    m_task_id_isSet = true;
}

bool OAICreateDataSetImportTaskResponse::is_task_id_Set() const{
    return m_task_id_isSet;
}

bool OAICreateDataSetImportTaskResponse::is_task_id_Valid() const{
    return m_task_id_isValid;
}

bool OAICreateDataSetImportTaskResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDataSetImportTaskResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_task_id_isValid && true;
}

} // namespace OpenAPI
