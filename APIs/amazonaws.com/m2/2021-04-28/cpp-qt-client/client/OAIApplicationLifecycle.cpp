/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationLifecycle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationLifecycle::OAIApplicationLifecycle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationLifecycle::OAIApplicationLifecycle() {
    this->initializeModel();
}

OAIApplicationLifecycle::~OAIApplicationLifecycle() {}

void OAIApplicationLifecycle::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIApplicationLifecycle::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIApplicationLifecycle::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Creating", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationLifecycle::CREATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Created", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationLifecycle::CREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Available", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationLifecycle::AVAILABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Ready", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationLifecycle::READY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Starting", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationLifecycle::STARTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Running", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationLifecycle::RUNNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Stopping", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationLifecycle::STOPPING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Stopped", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationLifecycle::STOPPED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationLifecycle::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Deleting", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationLifecycle::DELETING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Deleting From Environment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationLifecycle::DELETING_FROM_ENVIRONMENT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIApplicationLifecycle::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIApplicationLifecycle::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIApplicationLifecycle::CREATING:
            val = "Creating";
            break;
        case eOAIApplicationLifecycle::CREATED:
            val = "Created";
            break;
        case eOAIApplicationLifecycle::AVAILABLE:
            val = "Available";
            break;
        case eOAIApplicationLifecycle::READY:
            val = "Ready";
            break;
        case eOAIApplicationLifecycle::STARTING:
            val = "Starting";
            break;
        case eOAIApplicationLifecycle::RUNNING:
            val = "Running";
            break;
        case eOAIApplicationLifecycle::STOPPING:
            val = "Stopping";
            break;
        case eOAIApplicationLifecycle::STOPPED:
            val = "Stopped";
            break;
        case eOAIApplicationLifecycle::FAILED:
            val = "Failed";
            break;
        case eOAIApplicationLifecycle::DELETING:
            val = "Deleting";
            break;
        case eOAIApplicationLifecycle::DELETING_FROM_ENVIRONMENT:
            val = "Deleting From Environment";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIApplicationLifecycle::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIApplicationLifecycle::eOAIApplicationLifecycle OAIApplicationLifecycle::getValue() const {
    return m_value;
}

void OAIApplicationLifecycle::setValue(const OAIApplicationLifecycle::eOAIApplicationLifecycle& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIApplicationLifecycle::isSet() const {
    
    return m_value_isSet;
}

bool OAIApplicationLifecycle::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
