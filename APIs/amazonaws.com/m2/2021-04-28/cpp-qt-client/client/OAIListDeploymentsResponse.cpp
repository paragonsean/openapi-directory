/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListDeploymentsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListDeploymentsResponse::OAIListDeploymentsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListDeploymentsResponse::OAIListDeploymentsResponse() {
    this->initializeModel();
}

OAIListDeploymentsResponse::~OAIListDeploymentsResponse() {}

void OAIListDeploymentsResponse::initializeModel() {

    m_deployments_isSet = false;
    m_deployments_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListDeploymentsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListDeploymentsResponse::fromJsonObject(QJsonObject json) {

    m_deployments_isValid = ::OpenAPI::fromJsonValue(m_deployments, json[QString("deployments")]);
    m_deployments_isSet = !json[QString("deployments")].isNull() && m_deployments_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListDeploymentsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListDeploymentsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_deployments.isSet()) {
        obj.insert(QString("deployments"), ::OpenAPI::toJsonValue(m_deployments));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListDeploymentsResponse::getDeployments() const {
    return m_deployments;
}
void OAIListDeploymentsResponse::setDeployments(const QList &deployments) {
    m_deployments = deployments;
    m_deployments_isSet = true;
}

bool OAIListDeploymentsResponse::is_deployments_Set() const{
    return m_deployments_isSet;
}

bool OAIListDeploymentsResponse::is_deployments_Valid() const{
    return m_deployments_isValid;
}

QString OAIListDeploymentsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListDeploymentsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListDeploymentsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListDeploymentsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListDeploymentsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deployments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListDeploymentsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_deployments_isValid && true;
}

} // namespace OpenAPI
