/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSetSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSetSummary::OAIDataSetSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSetSummary::OAIDataSetSummary() {
    this->initializeModel();
}

OAIDataSetSummary::~OAIDataSetSummary() {}

void OAIDataSetSummary::initializeModel() {

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_data_set_name_isSet = false;
    m_data_set_name_isValid = false;

    m_data_set_org_isSet = false;
    m_data_set_org_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_last_referenced_time_isSet = false;
    m_last_referenced_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;
}

void OAIDataSetSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSetSummary::fromJsonObject(QJsonObject json) {

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_data_set_name_isValid = ::OpenAPI::fromJsonValue(m_data_set_name, json[QString("dataSetName")]);
    m_data_set_name_isSet = !json[QString("dataSetName")].isNull() && m_data_set_name_isValid;

    m_data_set_org_isValid = ::OpenAPI::fromJsonValue(m_data_set_org, json[QString("dataSetOrg")]);
    m_data_set_org_isSet = !json[QString("dataSetOrg")].isNull() && m_data_set_org_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_last_referenced_time_isValid = ::OpenAPI::fromJsonValue(m_last_referenced_time, json[QString("lastReferencedTime")]);
    m_last_referenced_time_isSet = !json[QString("lastReferencedTime")].isNull() && m_last_referenced_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("lastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("lastUpdatedTime")].isNull() && m_last_updated_time_isValid;
}

QString OAIDataSetSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSetSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_data_set_name_isSet) {
        obj.insert(QString("dataSetName"), ::OpenAPI::toJsonValue(m_data_set_name));
    }
    if (m_data_set_org_isSet) {
        obj.insert(QString("dataSetOrg"), ::OpenAPI::toJsonValue(m_data_set_org));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_last_referenced_time_isSet) {
        obj.insert(QString("lastReferencedTime"), ::OpenAPI::toJsonValue(m_last_referenced_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("lastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    return obj;
}

QDateTime OAIDataSetSummary::getCreationTime() const {
    return m_creation_time;
}
void OAIDataSetSummary::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDataSetSummary::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDataSetSummary::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIDataSetSummary::getDataSetName() const {
    return m_data_set_name;
}
void OAIDataSetSummary::setDataSetName(const QString &data_set_name) {
    m_data_set_name = data_set_name;
    m_data_set_name_isSet = true;
}

bool OAIDataSetSummary::is_data_set_name_Set() const{
    return m_data_set_name_isSet;
}

bool OAIDataSetSummary::is_data_set_name_Valid() const{
    return m_data_set_name_isValid;
}

QString OAIDataSetSummary::getDataSetOrg() const {
    return m_data_set_org;
}
void OAIDataSetSummary::setDataSetOrg(const QString &data_set_org) {
    m_data_set_org = data_set_org;
    m_data_set_org_isSet = true;
}

bool OAIDataSetSummary::is_data_set_org_Set() const{
    return m_data_set_org_isSet;
}

bool OAIDataSetSummary::is_data_set_org_Valid() const{
    return m_data_set_org_isValid;
}

QString OAIDataSetSummary::getFormat() const {
    return m_format;
}
void OAIDataSetSummary::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIDataSetSummary::is_format_Set() const{
    return m_format_isSet;
}

bool OAIDataSetSummary::is_format_Valid() const{
    return m_format_isValid;
}

QDateTime OAIDataSetSummary::getLastReferencedTime() const {
    return m_last_referenced_time;
}
void OAIDataSetSummary::setLastReferencedTime(const QDateTime &last_referenced_time) {
    m_last_referenced_time = last_referenced_time;
    m_last_referenced_time_isSet = true;
}

bool OAIDataSetSummary::is_last_referenced_time_Set() const{
    return m_last_referenced_time_isSet;
}

bool OAIDataSetSummary::is_last_referenced_time_Valid() const{
    return m_last_referenced_time_isValid;
}

QDateTime OAIDataSetSummary::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIDataSetSummary::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIDataSetSummary::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIDataSetSummary::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

bool OAIDataSetSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_org_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_referenced_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSetSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_set_name_isValid && true;
}

} // namespace OpenAPI
