/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListDataSetImportHistoryResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListDataSetImportHistoryResponse::OAIListDataSetImportHistoryResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListDataSetImportHistoryResponse::OAIListDataSetImportHistoryResponse() {
    this->initializeModel();
}

OAIListDataSetImportHistoryResponse::~OAIListDataSetImportHistoryResponse() {}

void OAIListDataSetImportHistoryResponse::initializeModel() {

    m_data_set_import_tasks_isSet = false;
    m_data_set_import_tasks_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListDataSetImportHistoryResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListDataSetImportHistoryResponse::fromJsonObject(QJsonObject json) {

    m_data_set_import_tasks_isValid = ::OpenAPI::fromJsonValue(m_data_set_import_tasks, json[QString("dataSetImportTasks")]);
    m_data_set_import_tasks_isSet = !json[QString("dataSetImportTasks")].isNull() && m_data_set_import_tasks_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListDataSetImportHistoryResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListDataSetImportHistoryResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_data_set_import_tasks.isSet()) {
        obj.insert(QString("dataSetImportTasks"), ::OpenAPI::toJsonValue(m_data_set_import_tasks));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListDataSetImportHistoryResponse::getDataSetImportTasks() const {
    return m_data_set_import_tasks;
}
void OAIListDataSetImportHistoryResponse::setDataSetImportTasks(const QList &data_set_import_tasks) {
    m_data_set_import_tasks = data_set_import_tasks;
    m_data_set_import_tasks_isSet = true;
}

bool OAIListDataSetImportHistoryResponse::is_data_set_import_tasks_Set() const{
    return m_data_set_import_tasks_isSet;
}

bool OAIListDataSetImportHistoryResponse::is_data_set_import_tasks_Valid() const{
    return m_data_set_import_tasks_isValid;
}

QString OAIListDataSetImportHistoryResponse::getNextToken() const {
    return m_next_token;
}
void OAIListDataSetImportHistoryResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListDataSetImportHistoryResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListDataSetImportHistoryResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListDataSetImportHistoryResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_set_import_tasks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListDataSetImportHistoryResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_set_import_tasks_isValid && true;
}

} // namespace OpenAPI
