/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEngineVersionsSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEngineVersionsSummary::OAIEngineVersionsSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEngineVersionsSummary::OAIEngineVersionsSummary() {
    this->initializeModel();
}

OAIEngineVersionsSummary::~OAIEngineVersionsSummary() {}

void OAIEngineVersionsSummary::initializeModel() {

    m_engine_type_isSet = false;
    m_engine_type_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;
}

void OAIEngineVersionsSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEngineVersionsSummary::fromJsonObject(QJsonObject json) {

    m_engine_type_isValid = ::OpenAPI::fromJsonValue(m_engine_type, json[QString("engineType")]);
    m_engine_type_isSet = !json[QString("engineType")].isNull() && m_engine_type_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("engineVersion")]);
    m_engine_version_isSet = !json[QString("engineVersion")].isNull() && m_engine_version_isValid;
}

QString OAIEngineVersionsSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEngineVersionsSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_engine_type_isSet) {
        obj.insert(QString("engineType"), ::OpenAPI::toJsonValue(m_engine_type));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("engineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    return obj;
}

QString OAIEngineVersionsSummary::getEngineType() const {
    return m_engine_type;
}
void OAIEngineVersionsSummary::setEngineType(const QString &engine_type) {
    m_engine_type = engine_type;
    m_engine_type_isSet = true;
}

bool OAIEngineVersionsSummary::is_engine_type_Set() const{
    return m_engine_type_isSet;
}

bool OAIEngineVersionsSummary::is_engine_type_Valid() const{
    return m_engine_type_isValid;
}

QString OAIEngineVersionsSummary::getEngineVersion() const {
    return m_engine_version;
}
void OAIEngineVersionsSummary::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIEngineVersionsSummary::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIEngineVersionsSummary::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

bool OAIEngineVersionsSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_engine_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEngineVersionsSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_engine_type_isValid && m_engine_version_isValid && true;
}

} // namespace OpenAPI
