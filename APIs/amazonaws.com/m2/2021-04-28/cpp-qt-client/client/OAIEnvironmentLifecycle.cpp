/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvironmentLifecycle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvironmentLifecycle::OAIEnvironmentLifecycle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvironmentLifecycle::OAIEnvironmentLifecycle() {
    this->initializeModel();
}

OAIEnvironmentLifecycle::~OAIEnvironmentLifecycle() {}

void OAIEnvironmentLifecycle::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEnvironmentLifecycle::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEnvironmentLifecycle::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Creating", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnvironmentLifecycle::CREATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Available", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnvironmentLifecycle::AVAILABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Updating", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnvironmentLifecycle::UPDATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Deleting", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnvironmentLifecycle::DELETING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnvironmentLifecycle::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEnvironmentLifecycle::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEnvironmentLifecycle::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEnvironmentLifecycle::CREATING:
            val = "Creating";
            break;
        case eOAIEnvironmentLifecycle::AVAILABLE:
            val = "Available";
            break;
        case eOAIEnvironmentLifecycle::UPDATING:
            val = "Updating";
            break;
        case eOAIEnvironmentLifecycle::DELETING:
            val = "Deleting";
            break;
        case eOAIEnvironmentLifecycle::FAILED:
            val = "Failed";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEnvironmentLifecycle::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEnvironmentLifecycle::eOAIEnvironmentLifecycle OAIEnvironmentLifecycle::getValue() const {
    return m_value;
}

void OAIEnvironmentLifecycle::setValue(const OAIEnvironmentLifecycle::eOAIEnvironmentLifecycle& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEnvironmentLifecycle::isSet() const {
    
    return m_value_isSet;
}

bool OAIEnvironmentLifecycle::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
