/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDeployment_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDeployment_request::OAICreateDeployment_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDeployment_request::OAICreateDeployment_request() {
    this->initializeModel();
}

OAICreateDeployment_request::~OAICreateDeployment_request() {}

void OAICreateDeployment_request::initializeModel() {

    m_application_version_isSet = false;
    m_application_version_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_environment_id_isSet = false;
    m_environment_id_isValid = false;
}

void OAICreateDeployment_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDeployment_request::fromJsonObject(QJsonObject json) {

    m_application_version_isValid = ::OpenAPI::fromJsonValue(m_application_version, json[QString("applicationVersion")]);
    m_application_version_isSet = !json[QString("applicationVersion")].isNull() && m_application_version_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_environment_id_isValid = ::OpenAPI::fromJsonValue(m_environment_id, json[QString("environmentId")]);
    m_environment_id_isSet = !json[QString("environmentId")].isNull() && m_environment_id_isValid;
}

QString OAICreateDeployment_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDeployment_request::asJsonObject() const {
    QJsonObject obj;
    if (m_application_version_isSet) {
        obj.insert(QString("applicationVersion"), ::OpenAPI::toJsonValue(m_application_version));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_environment_id_isSet) {
        obj.insert(QString("environmentId"), ::OpenAPI::toJsonValue(m_environment_id));
    }
    return obj;
}

qint32 OAICreateDeployment_request::getApplicationVersion() const {
    return m_application_version;
}
void OAICreateDeployment_request::setApplicationVersion(const qint32 &application_version) {
    m_application_version = application_version;
    m_application_version_isSet = true;
}

bool OAICreateDeployment_request::is_application_version_Set() const{
    return m_application_version_isSet;
}

bool OAICreateDeployment_request::is_application_version_Valid() const{
    return m_application_version_isValid;
}

QString OAICreateDeployment_request::getClientToken() const {
    return m_client_token;
}
void OAICreateDeployment_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateDeployment_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateDeployment_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateDeployment_request::getEnvironmentId() const {
    return m_environment_id;
}
void OAICreateDeployment_request::setEnvironmentId(const QString &environment_id) {
    m_environment_id = environment_id;
    m_environment_id_isSet = true;
}

bool OAICreateDeployment_request::is_environment_id_Set() const{
    return m_environment_id_isSet;
}

bool OAICreateDeployment_request::is_environment_id_Valid() const{
    return m_environment_id_isValid;
}

bool OAICreateDeployment_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDeployment_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_version_isValid && m_environment_id_isValid && true;
}

} // namespace OpenAPI
