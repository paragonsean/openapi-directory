/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartBatchJob_request_batchJobIdentifier_scriptBatchJobIdentifier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartBatchJob_request_batchJobIdentifier_scriptBatchJobIdentifier::OAIStartBatchJob_request_batchJobIdentifier_scriptBatchJobIdentifier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartBatchJob_request_batchJobIdentifier_scriptBatchJobIdentifier::OAIStartBatchJob_request_batchJobIdentifier_scriptBatchJobIdentifier() {
    this->initializeModel();
}

OAIStartBatchJob_request_batchJobIdentifier_scriptBatchJobIdentifier::~OAIStartBatchJob_request_batchJobIdentifier_scriptBatchJobIdentifier() {}

void OAIStartBatchJob_request_batchJobIdentifier_scriptBatchJobIdentifier::initializeModel() {

    m_script_name_isSet = false;
    m_script_name_isValid = false;
}

void OAIStartBatchJob_request_batchJobIdentifier_scriptBatchJobIdentifier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartBatchJob_request_batchJobIdentifier_scriptBatchJobIdentifier::fromJsonObject(QJsonObject json) {

    m_script_name_isValid = ::OpenAPI::fromJsonValue(m_script_name, json[QString("scriptName")]);
    m_script_name_isSet = !json[QString("scriptName")].isNull() && m_script_name_isValid;
}

QString OAIStartBatchJob_request_batchJobIdentifier_scriptBatchJobIdentifier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartBatchJob_request_batchJobIdentifier_scriptBatchJobIdentifier::asJsonObject() const {
    QJsonObject obj;
    if (m_script_name_isSet) {
        obj.insert(QString("scriptName"), ::OpenAPI::toJsonValue(m_script_name));
    }
    return obj;
}

QString OAIStartBatchJob_request_batchJobIdentifier_scriptBatchJobIdentifier::getScriptName() const {
    return m_script_name;
}
void OAIStartBatchJob_request_batchJobIdentifier_scriptBatchJobIdentifier::setScriptName(const QString &script_name) {
    m_script_name = script_name;
    m_script_name_isSet = true;
}

bool OAIStartBatchJob_request_batchJobIdentifier_scriptBatchJobIdentifier::is_script_name_Set() const{
    return m_script_name_isSet;
}

bool OAIStartBatchJob_request_batchJobIdentifier_scriptBatchJobIdentifier::is_script_name_Valid() const{
    return m_script_name_isValid;
}

bool OAIStartBatchJob_request_batchJobIdentifier_scriptBatchJobIdentifier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_script_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartBatchJob_request_batchJobIdentifier_scriptBatchJobIdentifier::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_script_name_isValid && true;
}

} // namespace OpenAPI
