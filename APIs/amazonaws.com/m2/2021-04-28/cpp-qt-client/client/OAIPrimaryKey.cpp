/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrimaryKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrimaryKey::OAIPrimaryKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrimaryKey::OAIPrimaryKey() {
    this->initializeModel();
}

OAIPrimaryKey::~OAIPrimaryKey() {}

void OAIPrimaryKey::initializeModel() {

    m_length_isSet = false;
    m_length_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;
}

void OAIPrimaryKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrimaryKey::fromJsonObject(QJsonObject json) {

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;
}

QString OAIPrimaryKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrimaryKey::asJsonObject() const {
    QJsonObject obj;
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    return obj;
}

qint32 OAIPrimaryKey::getLength() const {
    return m_length;
}
void OAIPrimaryKey::setLength(const qint32 &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIPrimaryKey::is_length_Set() const{
    return m_length_isSet;
}

bool OAIPrimaryKey::is_length_Valid() const{
    return m_length_isValid;
}

QString OAIPrimaryKey::getName() const {
    return m_name;
}
void OAIPrimaryKey::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPrimaryKey::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPrimaryKey::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIPrimaryKey::getOffset() const {
    return m_offset;
}
void OAIPrimaryKey::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIPrimaryKey::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIPrimaryKey::is_offset_Valid() const{
    return m_offset_isValid;
}

bool OAIPrimaryKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrimaryKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_length_isValid && m_offset_isValid && true;
}

} // namespace OpenAPI
