/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPoDetailAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPoDetailAttributes::OAIPoDetailAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPoDetailAttributes::OAIPoDetailAttributes() {
    this->initializeModel();
}

OAIPoDetailAttributes::~OAIPoDetailAttributes() {}

void OAIPoDetailAttributes::initializeModel() {

    m_encoding_isSet = false;
    m_encoding_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;
}

void OAIPoDetailAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPoDetailAttributes::fromJsonObject(QJsonObject json) {

    m_encoding_isValid = ::OpenAPI::fromJsonValue(m_encoding, json[QString("encoding")]);
    m_encoding_isSet = !json[QString("encoding")].isNull() && m_encoding_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;
}

QString OAIPoDetailAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPoDetailAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_encoding_isSet) {
        obj.insert(QString("encoding"), ::OpenAPI::toJsonValue(m_encoding));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    return obj;
}

QString OAIPoDetailAttributes::getEncoding() const {
    return m_encoding;
}
void OAIPoDetailAttributes::setEncoding(const QString &encoding) {
    m_encoding = encoding;
    m_encoding_isSet = true;
}

bool OAIPoDetailAttributes::is_encoding_Set() const{
    return m_encoding_isSet;
}

bool OAIPoDetailAttributes::is_encoding_Valid() const{
    return m_encoding_isValid;
}

QString OAIPoDetailAttributes::getFormat() const {
    return m_format;
}
void OAIPoDetailAttributes::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIPoDetailAttributes::is_format_Set() const{
    return m_format_isSet;
}

bool OAIPoDetailAttributes::is_format_Valid() const{
    return m_format_isValid;
}

bool OAIPoDetailAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPoDetailAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_encoding_isValid && m_format_isValid && true;
}

} // namespace OpenAPI
