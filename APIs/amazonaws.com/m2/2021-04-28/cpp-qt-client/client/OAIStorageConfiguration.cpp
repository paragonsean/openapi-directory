/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageConfiguration::OAIStorageConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageConfiguration::OAIStorageConfiguration() {
    this->initializeModel();
}

OAIStorageConfiguration::~OAIStorageConfiguration() {}

void OAIStorageConfiguration::initializeModel() {

    m_efs_isSet = false;
    m_efs_isValid = false;

    m_fsx_isSet = false;
    m_fsx_isValid = false;
}

void OAIStorageConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageConfiguration::fromJsonObject(QJsonObject json) {

    m_efs_isValid = ::OpenAPI::fromJsonValue(m_efs, json[QString("efs")]);
    m_efs_isSet = !json[QString("efs")].isNull() && m_efs_isValid;

    m_fsx_isValid = ::OpenAPI::fromJsonValue(m_fsx, json[QString("fsx")]);
    m_fsx_isSet = !json[QString("fsx")].isNull() && m_fsx_isValid;
}

QString OAIStorageConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_efs.isSet()) {
        obj.insert(QString("efs"), ::OpenAPI::toJsonValue(m_efs));
    }
    if (m_fsx.isSet()) {
        obj.insert(QString("fsx"), ::OpenAPI::toJsonValue(m_fsx));
    }
    return obj;
}

OAIStorageConfiguration_efs OAIStorageConfiguration::getEfs() const {
    return m_efs;
}
void OAIStorageConfiguration::setEfs(const OAIStorageConfiguration_efs &efs) {
    m_efs = efs;
    m_efs_isSet = true;
}

bool OAIStorageConfiguration::is_efs_Set() const{
    return m_efs_isSet;
}

bool OAIStorageConfiguration::is_efs_Valid() const{
    return m_efs_isValid;
}

OAIStorageConfiguration_fsx OAIStorageConfiguration::getFsx() const {
    return m_fsx;
}
void OAIStorageConfiguration::setFsx(const OAIStorageConfiguration_fsx &fsx) {
    m_fsx = fsx;
    m_fsx_isSet = true;
}

bool OAIStorageConfiguration::is_fsx_Set() const{
    return m_fsx_isSet;
}

bool OAIStorageConfiguration::is_fsx_Valid() const{
    return m_fsx_isValid;
}

bool OAIStorageConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_efs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fsx.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
