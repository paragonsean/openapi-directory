/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEfsStorageConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEfsStorageConfiguration::OAIEfsStorageConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEfsStorageConfiguration::OAIEfsStorageConfiguration() {
    this->initializeModel();
}

OAIEfsStorageConfiguration::~OAIEfsStorageConfiguration() {}

void OAIEfsStorageConfiguration::initializeModel() {

    m_file_system_id_isSet = false;
    m_file_system_id_isValid = false;

    m_mount_point_isSet = false;
    m_mount_point_isValid = false;
}

void OAIEfsStorageConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEfsStorageConfiguration::fromJsonObject(QJsonObject json) {

    m_file_system_id_isValid = ::OpenAPI::fromJsonValue(m_file_system_id, json[QString("fileSystemId")]);
    m_file_system_id_isSet = !json[QString("fileSystemId")].isNull() && m_file_system_id_isValid;

    m_mount_point_isValid = ::OpenAPI::fromJsonValue(m_mount_point, json[QString("mountPoint")]);
    m_mount_point_isSet = !json[QString("mountPoint")].isNull() && m_mount_point_isValid;
}

QString OAIEfsStorageConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEfsStorageConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_file_system_id_isSet) {
        obj.insert(QString("fileSystemId"), ::OpenAPI::toJsonValue(m_file_system_id));
    }
    if (m_mount_point_isSet) {
        obj.insert(QString("mountPoint"), ::OpenAPI::toJsonValue(m_mount_point));
    }
    return obj;
}

QString OAIEfsStorageConfiguration::getFileSystemId() const {
    return m_file_system_id;
}
void OAIEfsStorageConfiguration::setFileSystemId(const QString &file_system_id) {
    m_file_system_id = file_system_id;
    m_file_system_id_isSet = true;
}

bool OAIEfsStorageConfiguration::is_file_system_id_Set() const{
    return m_file_system_id_isSet;
}

bool OAIEfsStorageConfiguration::is_file_system_id_Valid() const{
    return m_file_system_id_isValid;
}

QString OAIEfsStorageConfiguration::getMountPoint() const {
    return m_mount_point;
}
void OAIEfsStorageConfiguration::setMountPoint(const QString &mount_point) {
    m_mount_point = mount_point;
    m_mount_point_isSet = true;
}

bool OAIEfsStorageConfiguration::is_mount_point_Set() const{
    return m_mount_point_isSet;
}

bool OAIEfsStorageConfiguration::is_mount_point_Valid() const{
    return m_mount_point_isValid;
}

bool OAIEfsStorageConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mount_point_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEfsStorageConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_system_id_isValid && m_mount_point_isValid && true;
}

} // namespace OpenAPI
