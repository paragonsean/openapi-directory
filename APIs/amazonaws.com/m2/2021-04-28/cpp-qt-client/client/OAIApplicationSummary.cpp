/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationSummary::OAIApplicationSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationSummary::OAIApplicationSummary() {
    this->initializeModel();
}

OAIApplicationSummary::~OAIApplicationSummary() {}

void OAIApplicationSummary::initializeModel() {

    m_application_arn_isSet = false;
    m_application_arn_isValid = false;

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_application_version_isSet = false;
    m_application_version_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_deployment_status_isSet = false;
    m_deployment_status_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_engine_type_isSet = false;
    m_engine_type_isValid = false;

    m_environment_id_isSet = false;
    m_environment_id_isValid = false;

    m_last_start_time_isSet = false;
    m_last_start_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_version_status_isSet = false;
    m_version_status_isValid = false;
}

void OAIApplicationSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationSummary::fromJsonObject(QJsonObject json) {

    m_application_arn_isValid = ::OpenAPI::fromJsonValue(m_application_arn, json[QString("applicationArn")]);
    m_application_arn_isSet = !json[QString("applicationArn")].isNull() && m_application_arn_isValid;

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("applicationId")]);
    m_application_id_isSet = !json[QString("applicationId")].isNull() && m_application_id_isValid;

    m_application_version_isValid = ::OpenAPI::fromJsonValue(m_application_version, json[QString("applicationVersion")]);
    m_application_version_isSet = !json[QString("applicationVersion")].isNull() && m_application_version_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_deployment_status_isValid = ::OpenAPI::fromJsonValue(m_deployment_status, json[QString("deploymentStatus")]);
    m_deployment_status_isSet = !json[QString("deploymentStatus")].isNull() && m_deployment_status_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_engine_type_isValid = ::OpenAPI::fromJsonValue(m_engine_type, json[QString("engineType")]);
    m_engine_type_isSet = !json[QString("engineType")].isNull() && m_engine_type_isValid;

    m_environment_id_isValid = ::OpenAPI::fromJsonValue(m_environment_id, json[QString("environmentId")]);
    m_environment_id_isSet = !json[QString("environmentId")].isNull() && m_environment_id_isValid;

    m_last_start_time_isValid = ::OpenAPI::fromJsonValue(m_last_start_time, json[QString("lastStartTime")]);
    m_last_start_time_isSet = !json[QString("lastStartTime")].isNull() && m_last_start_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_version_status_isValid = ::OpenAPI::fromJsonValue(m_version_status, json[QString("versionStatus")]);
    m_version_status_isSet = !json[QString("versionStatus")].isNull() && m_version_status_isValid;
}

QString OAIApplicationSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_application_arn_isSet) {
        obj.insert(QString("applicationArn"), ::OpenAPI::toJsonValue(m_application_arn));
    }
    if (m_application_id_isSet) {
        obj.insert(QString("applicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_application_version_isSet) {
        obj.insert(QString("applicationVersion"), ::OpenAPI::toJsonValue(m_application_version));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_deployment_status.isSet()) {
        obj.insert(QString("deploymentStatus"), ::OpenAPI::toJsonValue(m_deployment_status));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_engine_type.isSet()) {
        obj.insert(QString("engineType"), ::OpenAPI::toJsonValue(m_engine_type));
    }
    if (m_environment_id_isSet) {
        obj.insert(QString("environmentId"), ::OpenAPI::toJsonValue(m_environment_id));
    }
    if (m_last_start_time_isSet) {
        obj.insert(QString("lastStartTime"), ::OpenAPI::toJsonValue(m_last_start_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_version_status.isSet()) {
        obj.insert(QString("versionStatus"), ::OpenAPI::toJsonValue(m_version_status));
    }
    return obj;
}

QString OAIApplicationSummary::getApplicationArn() const {
    return m_application_arn;
}
void OAIApplicationSummary::setApplicationArn(const QString &application_arn) {
    m_application_arn = application_arn;
    m_application_arn_isSet = true;
}

bool OAIApplicationSummary::is_application_arn_Set() const{
    return m_application_arn_isSet;
}

bool OAIApplicationSummary::is_application_arn_Valid() const{
    return m_application_arn_isValid;
}

QString OAIApplicationSummary::getApplicationId() const {
    return m_application_id;
}
void OAIApplicationSummary::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIApplicationSummary::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIApplicationSummary::is_application_id_Valid() const{
    return m_application_id_isValid;
}

qint32 OAIApplicationSummary::getApplicationVersion() const {
    return m_application_version;
}
void OAIApplicationSummary::setApplicationVersion(const qint32 &application_version) {
    m_application_version = application_version;
    m_application_version_isSet = true;
}

bool OAIApplicationSummary::is_application_version_Set() const{
    return m_application_version_isSet;
}

bool OAIApplicationSummary::is_application_version_Valid() const{
    return m_application_version_isValid;
}

QDateTime OAIApplicationSummary::getCreationTime() const {
    return m_creation_time;
}
void OAIApplicationSummary::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIApplicationSummary::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIApplicationSummary::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAIApplicationDeploymentLifecycle OAIApplicationSummary::getDeploymentStatus() const {
    return m_deployment_status;
}
void OAIApplicationSummary::setDeploymentStatus(const OAIApplicationDeploymentLifecycle &deployment_status) {
    m_deployment_status = deployment_status;
    m_deployment_status_isSet = true;
}

bool OAIApplicationSummary::is_deployment_status_Set() const{
    return m_deployment_status_isSet;
}

bool OAIApplicationSummary::is_deployment_status_Valid() const{
    return m_deployment_status_isValid;
}

QString OAIApplicationSummary::getDescription() const {
    return m_description;
}
void OAIApplicationSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApplicationSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApplicationSummary::is_description_Valid() const{
    return m_description_isValid;
}

OAIEngineType OAIApplicationSummary::getEngineType() const {
    return m_engine_type;
}
void OAIApplicationSummary::setEngineType(const OAIEngineType &engine_type) {
    m_engine_type = engine_type;
    m_engine_type_isSet = true;
}

bool OAIApplicationSummary::is_engine_type_Set() const{
    return m_engine_type_isSet;
}

bool OAIApplicationSummary::is_engine_type_Valid() const{
    return m_engine_type_isValid;
}

QString OAIApplicationSummary::getEnvironmentId() const {
    return m_environment_id;
}
void OAIApplicationSummary::setEnvironmentId(const QString &environment_id) {
    m_environment_id = environment_id;
    m_environment_id_isSet = true;
}

bool OAIApplicationSummary::is_environment_id_Set() const{
    return m_environment_id_isSet;
}

bool OAIApplicationSummary::is_environment_id_Valid() const{
    return m_environment_id_isValid;
}

QDateTime OAIApplicationSummary::getLastStartTime() const {
    return m_last_start_time;
}
void OAIApplicationSummary::setLastStartTime(const QDateTime &last_start_time) {
    m_last_start_time = last_start_time;
    m_last_start_time_isSet = true;
}

bool OAIApplicationSummary::is_last_start_time_Set() const{
    return m_last_start_time_isSet;
}

bool OAIApplicationSummary::is_last_start_time_Valid() const{
    return m_last_start_time_isValid;
}

QString OAIApplicationSummary::getName() const {
    return m_name;
}
void OAIApplicationSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApplicationSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApplicationSummary::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIApplicationSummary::getRoleArn() const {
    return m_role_arn;
}
void OAIApplicationSummary::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIApplicationSummary::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIApplicationSummary::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAIApplicationLifecycle OAIApplicationSummary::getStatus() const {
    return m_status;
}
void OAIApplicationSummary::setStatus(const OAIApplicationLifecycle &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIApplicationSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIApplicationSummary::is_status_Valid() const{
    return m_status_isValid;
}

OAIApplicationVersionLifecycle OAIApplicationSummary::getVersionStatus() const {
    return m_version_status;
}
void OAIApplicationSummary::setVersionStatus(const OAIApplicationVersionLifecycle &version_status) {
    m_version_status = version_status;
    m_version_status_isSet = true;
}

bool OAIApplicationSummary::is_version_status_Set() const{
    return m_version_status_isSet;
}

bool OAIApplicationSummary::is_version_status_Valid() const{
    return m_version_status_isValid;
}

bool OAIApplicationSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_arn_isValid && m_application_id_isValid && m_application_version_isValid && m_creation_time_isValid && m_engine_type_isValid && m_name_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
