/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDataSetImportTaskRequest_importConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDataSetImportTaskRequest_importConfig::OAICreateDataSetImportTaskRequest_importConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDataSetImportTaskRequest_importConfig::OAICreateDataSetImportTaskRequest_importConfig() {
    this->initializeModel();
}

OAICreateDataSetImportTaskRequest_importConfig::~OAICreateDataSetImportTaskRequest_importConfig() {}

void OAICreateDataSetImportTaskRequest_importConfig::initializeModel() {

    m_data_sets_isSet = false;
    m_data_sets_isValid = false;

    m_s3_location_isSet = false;
    m_s3_location_isValid = false;
}

void OAICreateDataSetImportTaskRequest_importConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDataSetImportTaskRequest_importConfig::fromJsonObject(QJsonObject json) {

    m_data_sets_isValid = ::OpenAPI::fromJsonValue(m_data_sets, json[QString("dataSets")]);
    m_data_sets_isSet = !json[QString("dataSets")].isNull() && m_data_sets_isValid;

    m_s3_location_isValid = ::OpenAPI::fromJsonValue(m_s3_location, json[QString("s3Location")]);
    m_s3_location_isSet = !json[QString("s3Location")].isNull() && m_s3_location_isValid;
}

QString OAICreateDataSetImportTaskRequest_importConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDataSetImportTaskRequest_importConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_data_sets.isSet()) {
        obj.insert(QString("dataSets"), ::OpenAPI::toJsonValue(m_data_sets));
    }
    if (m_s3_location_isSet) {
        obj.insert(QString("s3Location"), ::OpenAPI::toJsonValue(m_s3_location));
    }
    return obj;
}

QList OAICreateDataSetImportTaskRequest_importConfig::getDataSets() const {
    return m_data_sets;
}
void OAICreateDataSetImportTaskRequest_importConfig::setDataSets(const QList &data_sets) {
    m_data_sets = data_sets;
    m_data_sets_isSet = true;
}

bool OAICreateDataSetImportTaskRequest_importConfig::is_data_sets_Set() const{
    return m_data_sets_isSet;
}

bool OAICreateDataSetImportTaskRequest_importConfig::is_data_sets_Valid() const{
    return m_data_sets_isValid;
}

QString OAICreateDataSetImportTaskRequest_importConfig::getS3Location() const {
    return m_s3_location;
}
void OAICreateDataSetImportTaskRequest_importConfig::setS3Location(const QString &s3_location) {
    m_s3_location = s3_location;
    m_s3_location_isSet = true;
}

bool OAICreateDataSetImportTaskRequest_importConfig::is_s3_location_Set() const{
    return m_s3_location_isSet;
}

bool OAICreateDataSetImportTaskRequest_importConfig::is_s3_location_Valid() const{
    return m_s3_location_isValid;
}

bool OAICreateDataSetImportTaskRequest_importConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_sets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_location_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDataSetImportTaskRequest_importConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
