/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateApplicationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateApplicationResponse::OAICreateApplicationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateApplicationResponse::OAICreateApplicationResponse() {
    this->initializeModel();
}

OAICreateApplicationResponse::~OAICreateApplicationResponse() {}

void OAICreateApplicationResponse::initializeModel() {

    m_application_arn_isSet = false;
    m_application_arn_isValid = false;

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_application_version_isSet = false;
    m_application_version_isValid = false;
}

void OAICreateApplicationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateApplicationResponse::fromJsonObject(QJsonObject json) {

    m_application_arn_isValid = ::OpenAPI::fromJsonValue(m_application_arn, json[QString("applicationArn")]);
    m_application_arn_isSet = !json[QString("applicationArn")].isNull() && m_application_arn_isValid;

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("applicationId")]);
    m_application_id_isSet = !json[QString("applicationId")].isNull() && m_application_id_isValid;

    m_application_version_isValid = ::OpenAPI::fromJsonValue(m_application_version, json[QString("applicationVersion")]);
    m_application_version_isSet = !json[QString("applicationVersion")].isNull() && m_application_version_isValid;
}

QString OAICreateApplicationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateApplicationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_application_arn_isSet) {
        obj.insert(QString("applicationArn"), ::OpenAPI::toJsonValue(m_application_arn));
    }
    if (m_application_id_isSet) {
        obj.insert(QString("applicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_application_version_isSet) {
        obj.insert(QString("applicationVersion"), ::OpenAPI::toJsonValue(m_application_version));
    }
    return obj;
}

QString OAICreateApplicationResponse::getApplicationArn() const {
    return m_application_arn;
}
void OAICreateApplicationResponse::setApplicationArn(const QString &application_arn) {
    m_application_arn = application_arn;
    m_application_arn_isSet = true;
}

bool OAICreateApplicationResponse::is_application_arn_Set() const{
    return m_application_arn_isSet;
}

bool OAICreateApplicationResponse::is_application_arn_Valid() const{
    return m_application_arn_isValid;
}

QString OAICreateApplicationResponse::getApplicationId() const {
    return m_application_id;
}
void OAICreateApplicationResponse::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAICreateApplicationResponse::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAICreateApplicationResponse::is_application_id_Valid() const{
    return m_application_id_isValid;
}

qint32 OAICreateApplicationResponse::getApplicationVersion() const {
    return m_application_version;
}
void OAICreateApplicationResponse::setApplicationVersion(const qint32 &application_version) {
    m_application_version = application_version;
    m_application_version_isSet = true;
}

bool OAICreateApplicationResponse::is_application_version_Set() const{
    return m_application_version_isSet;
}

bool OAICreateApplicationResponse::is_application_version_Valid() const{
    return m_application_version_isValid;
}

bool OAICreateApplicationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateApplicationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_arn_isValid && m_application_id_isValid && m_application_version_isValid && true;
}

} // namespace OpenAPI
