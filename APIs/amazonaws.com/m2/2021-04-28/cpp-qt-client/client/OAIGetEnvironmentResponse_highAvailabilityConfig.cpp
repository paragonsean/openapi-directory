/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetEnvironmentResponse_highAvailabilityConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetEnvironmentResponse_highAvailabilityConfig::OAIGetEnvironmentResponse_highAvailabilityConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetEnvironmentResponse_highAvailabilityConfig::OAIGetEnvironmentResponse_highAvailabilityConfig() {
    this->initializeModel();
}

OAIGetEnvironmentResponse_highAvailabilityConfig::~OAIGetEnvironmentResponse_highAvailabilityConfig() {}

void OAIGetEnvironmentResponse_highAvailabilityConfig::initializeModel() {

    m_desired_capacity_isSet = false;
    m_desired_capacity_isValid = false;
}

void OAIGetEnvironmentResponse_highAvailabilityConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetEnvironmentResponse_highAvailabilityConfig::fromJsonObject(QJsonObject json) {

    m_desired_capacity_isValid = ::OpenAPI::fromJsonValue(m_desired_capacity, json[QString("desiredCapacity")]);
    m_desired_capacity_isSet = !json[QString("desiredCapacity")].isNull() && m_desired_capacity_isValid;
}

QString OAIGetEnvironmentResponse_highAvailabilityConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetEnvironmentResponse_highAvailabilityConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_desired_capacity_isSet) {
        obj.insert(QString("desiredCapacity"), ::OpenAPI::toJsonValue(m_desired_capacity));
    }
    return obj;
}

qint32 OAIGetEnvironmentResponse_highAvailabilityConfig::getDesiredCapacity() const {
    return m_desired_capacity;
}
void OAIGetEnvironmentResponse_highAvailabilityConfig::setDesiredCapacity(const qint32 &desired_capacity) {
    m_desired_capacity = desired_capacity;
    m_desired_capacity_isSet = true;
}

bool OAIGetEnvironmentResponse_highAvailabilityConfig::is_desired_capacity_Set() const{
    return m_desired_capacity_isSet;
}

bool OAIGetEnvironmentResponse_highAvailabilityConfig::is_desired_capacity_Valid() const{
    return m_desired_capacity_isValid;
}

bool OAIGetEnvironmentResponse_highAvailabilityConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_desired_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetEnvironmentResponse_highAvailabilityConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_desired_capacity_isValid && true;
}

} // namespace OpenAPI
