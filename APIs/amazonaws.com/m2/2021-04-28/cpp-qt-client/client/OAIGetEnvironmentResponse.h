/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetEnvironmentResponse.h
 *
 * 
 */

#ifndef OAIGetEnvironmentResponse_H
#define OAIGetEnvironmentResponse_H

#include <QJsonObject>

#include "OAIEngineType.h"
#include "OAIEnvironmentLifecycle.h"
#include "OAIGetEnvironmentResponse_highAvailabilityConfig.h"
#include "OAIGetEnvironmentResponse_pendingMaintenance.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetEnvironmentResponse_highAvailabilityConfig;
class OAIGetEnvironmentResponse_pendingMaintenance;

class OAIGetEnvironmentResponse : public OAIObject {
public:
    OAIGetEnvironmentResponse();
    OAIGetEnvironmentResponse(QString json);
    ~OAIGetEnvironmentResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getActualCapacity() const;
    void setActualCapacity(const qint32 &actual_capacity);
    bool is_actual_capacity_Set() const;
    bool is_actual_capacity_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIEngineType getEngineType() const;
    void setEngineType(const OAIEngineType &engine_type);
    bool is_engine_type_Set() const;
    bool is_engine_type_Valid() const;

    QString getEngineVersion() const;
    void setEngineVersion(const QString &engine_version);
    bool is_engine_version_Set() const;
    bool is_engine_version_Valid() const;

    QString getEnvironmentArn() const;
    void setEnvironmentArn(const QString &environment_arn);
    bool is_environment_arn_Set() const;
    bool is_environment_arn_Valid() const;

    QString getEnvironmentId() const;
    void setEnvironmentId(const QString &environment_id);
    bool is_environment_id_Set() const;
    bool is_environment_id_Valid() const;

    OAIGetEnvironmentResponse_highAvailabilityConfig getHighAvailabilityConfig() const;
    void setHighAvailabilityConfig(const OAIGetEnvironmentResponse_highAvailabilityConfig &high_availability_config);
    bool is_high_availability_config_Set() const;
    bool is_high_availability_config_Valid() const;

    QString getInstanceType() const;
    void setInstanceType(const QString &instance_type);
    bool is_instance_type_Set() const;
    bool is_instance_type_Valid() const;

    QString getKmsKeyId() const;
    void setKmsKeyId(const QString &kms_key_id);
    bool is_kms_key_id_Set() const;
    bool is_kms_key_id_Valid() const;

    QString getLoadBalancerArn() const;
    void setLoadBalancerArn(const QString &load_balancer_arn);
    bool is_load_balancer_arn_Set() const;
    bool is_load_balancer_arn_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIGetEnvironmentResponse_pendingMaintenance getPendingMaintenance() const;
    void setPendingMaintenance(const OAIGetEnvironmentResponse_pendingMaintenance &pending_maintenance);
    bool is_pending_maintenance_Set() const;
    bool is_pending_maintenance_Valid() const;

    QString getPreferredMaintenanceWindow() const;
    void setPreferredMaintenanceWindow(const QString &preferred_maintenance_window);
    bool is_preferred_maintenance_window_Set() const;
    bool is_preferred_maintenance_window_Valid() const;

    bool getPubliclyAccessible() const;
    void setPubliclyAccessible(const bool &publicly_accessible);
    bool is_publicly_accessible_Set() const;
    bool is_publicly_accessible_Valid() const;

    QList getSecurityGroupIds() const;
    void setSecurityGroupIds(const QList &security_group_ids);
    bool is_security_group_ids_Set() const;
    bool is_security_group_ids_Valid() const;

    OAIEnvironmentLifecycle getStatus() const;
    void setStatus(const OAIEnvironmentLifecycle &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getStatusReason() const;
    void setStatusReason(const QString &status_reason);
    bool is_status_reason_Set() const;
    bool is_status_reason_Valid() const;

    QList getStorageConfigurations() const;
    void setStorageConfigurations(const QList &storage_configurations);
    bool is_storage_configurations_Set() const;
    bool is_storage_configurations_Valid() const;

    QList getSubnetIds() const;
    void setSubnetIds(const QList &subnet_ids);
    bool is_subnet_ids_Set() const;
    bool is_subnet_ids_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getVpcId() const;
    void setVpcId(const QString &vpc_id);
    bool is_vpc_id_Set() const;
    bool is_vpc_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_actual_capacity;
    bool m_actual_capacity_isSet;
    bool m_actual_capacity_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIEngineType m_engine_type;
    bool m_engine_type_isSet;
    bool m_engine_type_isValid;

    QString m_engine_version;
    bool m_engine_version_isSet;
    bool m_engine_version_isValid;

    QString m_environment_arn;
    bool m_environment_arn_isSet;
    bool m_environment_arn_isValid;

    QString m_environment_id;
    bool m_environment_id_isSet;
    bool m_environment_id_isValid;

    OAIGetEnvironmentResponse_highAvailabilityConfig m_high_availability_config;
    bool m_high_availability_config_isSet;
    bool m_high_availability_config_isValid;

    QString m_instance_type;
    bool m_instance_type_isSet;
    bool m_instance_type_isValid;

    QString m_kms_key_id;
    bool m_kms_key_id_isSet;
    bool m_kms_key_id_isValid;

    QString m_load_balancer_arn;
    bool m_load_balancer_arn_isSet;
    bool m_load_balancer_arn_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIGetEnvironmentResponse_pendingMaintenance m_pending_maintenance;
    bool m_pending_maintenance_isSet;
    bool m_pending_maintenance_isValid;

    QString m_preferred_maintenance_window;
    bool m_preferred_maintenance_window_isSet;
    bool m_preferred_maintenance_window_isValid;

    bool m_publicly_accessible;
    bool m_publicly_accessible_isSet;
    bool m_publicly_accessible_isValid;

    QList m_security_group_ids;
    bool m_security_group_ids_isSet;
    bool m_security_group_ids_isValid;

    OAIEnvironmentLifecycle m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_status_reason;
    bool m_status_reason_isSet;
    bool m_status_reason_isValid;

    QList m_storage_configurations;
    bool m_storage_configurations_isSet;
    bool m_storage_configurations_isValid;

    QList m_subnet_ids;
    bool m_subnet_ids_isSet;
    bool m_subnet_ids_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_vpc_id;
    bool m_vpc_id_isSet;
    bool m_vpc_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetEnvironmentResponse)

#endif // OAIGetEnvironmentResponse_H
