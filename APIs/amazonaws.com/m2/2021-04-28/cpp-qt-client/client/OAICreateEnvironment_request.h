/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateEnvironment_request.h
 *
 * 
 */

#ifndef OAICreateEnvironment_request_H
#define OAICreateEnvironment_request_H

#include <QJsonObject>

#include "OAICreateEnvironment_request_highAvailabilityConfig.h"
#include "OAIStorageConfiguration.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateEnvironment_request_highAvailabilityConfig;
class OAIStorageConfiguration;

class OAICreateEnvironment_request : public OAIObject {
public:
    OAICreateEnvironment_request();
    OAICreateEnvironment_request(QString json);
    ~OAICreateEnvironment_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClientToken() const;
    void setClientToken(const QString &client_token);
    bool is_client_token_Set() const;
    bool is_client_token_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getEngineType() const;
    void setEngineType(const QString &engine_type);
    bool is_engine_type_Set() const;
    bool is_engine_type_Valid() const;

    QString getEngineVersion() const;
    void setEngineVersion(const QString &engine_version);
    bool is_engine_version_Set() const;
    bool is_engine_version_Valid() const;

    OAICreateEnvironment_request_highAvailabilityConfig getHighAvailabilityConfig() const;
    void setHighAvailabilityConfig(const OAICreateEnvironment_request_highAvailabilityConfig &high_availability_config);
    bool is_high_availability_config_Set() const;
    bool is_high_availability_config_Valid() const;

    QString getInstanceType() const;
    void setInstanceType(const QString &instance_type);
    bool is_instance_type_Set() const;
    bool is_instance_type_Valid() const;

    QString getKmsKeyId() const;
    void setKmsKeyId(const QString &kms_key_id);
    bool is_kms_key_id_Set() const;
    bool is_kms_key_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPreferredMaintenanceWindow() const;
    void setPreferredMaintenanceWindow(const QString &preferred_maintenance_window);
    bool is_preferred_maintenance_window_Set() const;
    bool is_preferred_maintenance_window_Valid() const;

    bool isPubliclyAccessible() const;
    void setPubliclyAccessible(const bool &publicly_accessible);
    bool is_publicly_accessible_Set() const;
    bool is_publicly_accessible_Valid() const;

    QList<QString> getSecurityGroupIds() const;
    void setSecurityGroupIds(const QList<QString> &security_group_ids);
    bool is_security_group_ids_Set() const;
    bool is_security_group_ids_Valid() const;

    QList<OAIStorageConfiguration> getStorageConfigurations() const;
    void setStorageConfigurations(const QList<OAIStorageConfiguration> &storage_configurations);
    bool is_storage_configurations_Set() const;
    bool is_storage_configurations_Valid() const;

    QList<QString> getSubnetIds() const;
    void setSubnetIds(const QList<QString> &subnet_ids);
    bool is_subnet_ids_Set() const;
    bool is_subnet_ids_Valid() const;

    QMap<QString, QString> getTags() const;
    void setTags(const QMap<QString, QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_client_token;
    bool m_client_token_isSet;
    bool m_client_token_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_engine_type;
    bool m_engine_type_isSet;
    bool m_engine_type_isValid;

    QString m_engine_version;
    bool m_engine_version_isSet;
    bool m_engine_version_isValid;

    OAICreateEnvironment_request_highAvailabilityConfig m_high_availability_config;
    bool m_high_availability_config_isSet;
    bool m_high_availability_config_isValid;

    QString m_instance_type;
    bool m_instance_type_isSet;
    bool m_instance_type_isValid;

    QString m_kms_key_id;
    bool m_kms_key_id_isSet;
    bool m_kms_key_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_preferred_maintenance_window;
    bool m_preferred_maintenance_window_isSet;
    bool m_preferred_maintenance_window_isValid;

    bool m_publicly_accessible;
    bool m_publicly_accessible_isSet;
    bool m_publicly_accessible_isValid;

    QList<QString> m_security_group_ids;
    bool m_security_group_ids_isSet;
    bool m_security_group_ids_isValid;

    QList<OAIStorageConfiguration> m_storage_configurations;
    bool m_storage_configurations_isSet;
    bool m_storage_configurations_isValid;

    QList<QString> m_subnet_ids;
    bool m_subnet_ids_isSet;
    bool m_subnet_ids_isValid;

    QMap<QString, QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateEnvironment_request)

#endif // OAICreateEnvironment_request_H
