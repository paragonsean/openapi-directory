/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatasetOrgAttributes_gdg.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatasetOrgAttributes_gdg::OAIDatasetOrgAttributes_gdg(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatasetOrgAttributes_gdg::OAIDatasetOrgAttributes_gdg() {
    this->initializeModel();
}

OAIDatasetOrgAttributes_gdg::~OAIDatasetOrgAttributes_gdg() {}

void OAIDatasetOrgAttributes_gdg::initializeModel() {

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_roll_disposition_isSet = false;
    m_roll_disposition_isValid = false;
}

void OAIDatasetOrgAttributes_gdg::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatasetOrgAttributes_gdg::fromJsonObject(QJsonObject json) {

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_roll_disposition_isValid = ::OpenAPI::fromJsonValue(m_roll_disposition, json[QString("rollDisposition")]);
    m_roll_disposition_isSet = !json[QString("rollDisposition")].isNull() && m_roll_disposition_isValid;
}

QString OAIDatasetOrgAttributes_gdg::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatasetOrgAttributes_gdg::asJsonObject() const {
    QJsonObject obj;
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_roll_disposition_isSet) {
        obj.insert(QString("rollDisposition"), ::OpenAPI::toJsonValue(m_roll_disposition));
    }
    return obj;
}

qint32 OAIDatasetOrgAttributes_gdg::getLimit() const {
    return m_limit;
}
void OAIDatasetOrgAttributes_gdg::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIDatasetOrgAttributes_gdg::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIDatasetOrgAttributes_gdg::is_limit_Valid() const{
    return m_limit_isValid;
}

QString OAIDatasetOrgAttributes_gdg::getRollDisposition() const {
    return m_roll_disposition;
}
void OAIDatasetOrgAttributes_gdg::setRollDisposition(const QString &roll_disposition) {
    m_roll_disposition = roll_disposition;
    m_roll_disposition_isSet = true;
}

bool OAIDatasetOrgAttributes_gdg::is_roll_disposition_Set() const{
    return m_roll_disposition_isSet;
}

bool OAIDatasetOrgAttributes_gdg::is_roll_disposition_Valid() const{
    return m_roll_disposition_isValid;
}

bool OAIDatasetOrgAttributes_gdg::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roll_disposition_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatasetOrgAttributes_gdg::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
