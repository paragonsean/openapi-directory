/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetEnvironmentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetEnvironmentResponse::OAIGetEnvironmentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetEnvironmentResponse::OAIGetEnvironmentResponse() {
    this->initializeModel();
}

OAIGetEnvironmentResponse::~OAIGetEnvironmentResponse() {}

void OAIGetEnvironmentResponse::initializeModel() {

    m_actual_capacity_isSet = false;
    m_actual_capacity_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_engine_type_isSet = false;
    m_engine_type_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_environment_arn_isSet = false;
    m_environment_arn_isValid = false;

    m_environment_id_isSet = false;
    m_environment_id_isValid = false;

    m_high_availability_config_isSet = false;
    m_high_availability_config_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_load_balancer_arn_isSet = false;
    m_load_balancer_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pending_maintenance_isSet = false;
    m_pending_maintenance_isValid = false;

    m_preferred_maintenance_window_isSet = false;
    m_preferred_maintenance_window_isValid = false;

    m_publicly_accessible_isSet = false;
    m_publicly_accessible_isValid = false;

    m_security_group_ids_isSet = false;
    m_security_group_ids_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;

    m_storage_configurations_isSet = false;
    m_storage_configurations_isValid = false;

    m_subnet_ids_isSet = false;
    m_subnet_ids_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;
}

void OAIGetEnvironmentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetEnvironmentResponse::fromJsonObject(QJsonObject json) {

    m_actual_capacity_isValid = ::OpenAPI::fromJsonValue(m_actual_capacity, json[QString("actualCapacity")]);
    m_actual_capacity_isSet = !json[QString("actualCapacity")].isNull() && m_actual_capacity_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_engine_type_isValid = ::OpenAPI::fromJsonValue(m_engine_type, json[QString("engineType")]);
    m_engine_type_isSet = !json[QString("engineType")].isNull() && m_engine_type_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("engineVersion")]);
    m_engine_version_isSet = !json[QString("engineVersion")].isNull() && m_engine_version_isValid;

    m_environment_arn_isValid = ::OpenAPI::fromJsonValue(m_environment_arn, json[QString("environmentArn")]);
    m_environment_arn_isSet = !json[QString("environmentArn")].isNull() && m_environment_arn_isValid;

    m_environment_id_isValid = ::OpenAPI::fromJsonValue(m_environment_id, json[QString("environmentId")]);
    m_environment_id_isSet = !json[QString("environmentId")].isNull() && m_environment_id_isValid;

    m_high_availability_config_isValid = ::OpenAPI::fromJsonValue(m_high_availability_config, json[QString("highAvailabilityConfig")]);
    m_high_availability_config_isSet = !json[QString("highAvailabilityConfig")].isNull() && m_high_availability_config_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("kmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("kmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_load_balancer_arn_isValid = ::OpenAPI::fromJsonValue(m_load_balancer_arn, json[QString("loadBalancerArn")]);
    m_load_balancer_arn_isSet = !json[QString("loadBalancerArn")].isNull() && m_load_balancer_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pending_maintenance_isValid = ::OpenAPI::fromJsonValue(m_pending_maintenance, json[QString("pendingMaintenance")]);
    m_pending_maintenance_isSet = !json[QString("pendingMaintenance")].isNull() && m_pending_maintenance_isValid;

    m_preferred_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_preferred_maintenance_window, json[QString("preferredMaintenanceWindow")]);
    m_preferred_maintenance_window_isSet = !json[QString("preferredMaintenanceWindow")].isNull() && m_preferred_maintenance_window_isValid;

    m_publicly_accessible_isValid = ::OpenAPI::fromJsonValue(m_publicly_accessible, json[QString("publiclyAccessible")]);
    m_publicly_accessible_isSet = !json[QString("publiclyAccessible")].isNull() && m_publicly_accessible_isValid;

    m_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_security_group_ids, json[QString("securityGroupIds")]);
    m_security_group_ids_isSet = !json[QString("securityGroupIds")].isNull() && m_security_group_ids_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("statusReason")]);
    m_status_reason_isSet = !json[QString("statusReason")].isNull() && m_status_reason_isValid;

    m_storage_configurations_isValid = ::OpenAPI::fromJsonValue(m_storage_configurations, json[QString("storageConfigurations")]);
    m_storage_configurations_isSet = !json[QString("storageConfigurations")].isNull() && m_storage_configurations_isValid;

    m_subnet_ids_isValid = ::OpenAPI::fromJsonValue(m_subnet_ids, json[QString("subnetIds")]);
    m_subnet_ids_isSet = !json[QString("subnetIds")].isNull() && m_subnet_ids_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("vpcId")]);
    m_vpc_id_isSet = !json[QString("vpcId")].isNull() && m_vpc_id_isValid;
}

QString OAIGetEnvironmentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetEnvironmentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_actual_capacity_isSet) {
        obj.insert(QString("actualCapacity"), ::OpenAPI::toJsonValue(m_actual_capacity));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_engine_type.isSet()) {
        obj.insert(QString("engineType"), ::OpenAPI::toJsonValue(m_engine_type));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("engineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_environment_arn_isSet) {
        obj.insert(QString("environmentArn"), ::OpenAPI::toJsonValue(m_environment_arn));
    }
    if (m_environment_id_isSet) {
        obj.insert(QString("environmentId"), ::OpenAPI::toJsonValue(m_environment_id));
    }
    if (m_high_availability_config.isSet()) {
        obj.insert(QString("highAvailabilityConfig"), ::OpenAPI::toJsonValue(m_high_availability_config));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("kmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_load_balancer_arn_isSet) {
        obj.insert(QString("loadBalancerArn"), ::OpenAPI::toJsonValue(m_load_balancer_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pending_maintenance.isSet()) {
        obj.insert(QString("pendingMaintenance"), ::OpenAPI::toJsonValue(m_pending_maintenance));
    }
    if (m_preferred_maintenance_window_isSet) {
        obj.insert(QString("preferredMaintenanceWindow"), ::OpenAPI::toJsonValue(m_preferred_maintenance_window));
    }
    if (m_publicly_accessible_isSet) {
        obj.insert(QString("publiclyAccessible"), ::OpenAPI::toJsonValue(m_publicly_accessible));
    }
    if (m_security_group_ids.isSet()) {
        obj.insert(QString("securityGroupIds"), ::OpenAPI::toJsonValue(m_security_group_ids));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_reason_isSet) {
        obj.insert(QString("statusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    if (m_storage_configurations.isSet()) {
        obj.insert(QString("storageConfigurations"), ::OpenAPI::toJsonValue(m_storage_configurations));
    }
    if (m_subnet_ids.isSet()) {
        obj.insert(QString("subnetIds"), ::OpenAPI::toJsonValue(m_subnet_ids));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("vpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    return obj;
}

qint32 OAIGetEnvironmentResponse::getActualCapacity() const {
    return m_actual_capacity;
}
void OAIGetEnvironmentResponse::setActualCapacity(const qint32 &actual_capacity) {
    m_actual_capacity = actual_capacity;
    m_actual_capacity_isSet = true;
}

bool OAIGetEnvironmentResponse::is_actual_capacity_Set() const{
    return m_actual_capacity_isSet;
}

bool OAIGetEnvironmentResponse::is_actual_capacity_Valid() const{
    return m_actual_capacity_isValid;
}

QDateTime OAIGetEnvironmentResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIGetEnvironmentResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIGetEnvironmentResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIGetEnvironmentResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIGetEnvironmentResponse::getDescription() const {
    return m_description;
}
void OAIGetEnvironmentResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGetEnvironmentResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGetEnvironmentResponse::is_description_Valid() const{
    return m_description_isValid;
}

OAIEngineType OAIGetEnvironmentResponse::getEngineType() const {
    return m_engine_type;
}
void OAIGetEnvironmentResponse::setEngineType(const OAIEngineType &engine_type) {
    m_engine_type = engine_type;
    m_engine_type_isSet = true;
}

bool OAIGetEnvironmentResponse::is_engine_type_Set() const{
    return m_engine_type_isSet;
}

bool OAIGetEnvironmentResponse::is_engine_type_Valid() const{
    return m_engine_type_isValid;
}

QString OAIGetEnvironmentResponse::getEngineVersion() const {
    return m_engine_version;
}
void OAIGetEnvironmentResponse::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIGetEnvironmentResponse::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIGetEnvironmentResponse::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

QString OAIGetEnvironmentResponse::getEnvironmentArn() const {
    return m_environment_arn;
}
void OAIGetEnvironmentResponse::setEnvironmentArn(const QString &environment_arn) {
    m_environment_arn = environment_arn;
    m_environment_arn_isSet = true;
}

bool OAIGetEnvironmentResponse::is_environment_arn_Set() const{
    return m_environment_arn_isSet;
}

bool OAIGetEnvironmentResponse::is_environment_arn_Valid() const{
    return m_environment_arn_isValid;
}

QString OAIGetEnvironmentResponse::getEnvironmentId() const {
    return m_environment_id;
}
void OAIGetEnvironmentResponse::setEnvironmentId(const QString &environment_id) {
    m_environment_id = environment_id;
    m_environment_id_isSet = true;
}

bool OAIGetEnvironmentResponse::is_environment_id_Set() const{
    return m_environment_id_isSet;
}

bool OAIGetEnvironmentResponse::is_environment_id_Valid() const{
    return m_environment_id_isValid;
}

OAIGetEnvironmentResponse_highAvailabilityConfig OAIGetEnvironmentResponse::getHighAvailabilityConfig() const {
    return m_high_availability_config;
}
void OAIGetEnvironmentResponse::setHighAvailabilityConfig(const OAIGetEnvironmentResponse_highAvailabilityConfig &high_availability_config) {
    m_high_availability_config = high_availability_config;
    m_high_availability_config_isSet = true;
}

bool OAIGetEnvironmentResponse::is_high_availability_config_Set() const{
    return m_high_availability_config_isSet;
}

bool OAIGetEnvironmentResponse::is_high_availability_config_Valid() const{
    return m_high_availability_config_isValid;
}

QString OAIGetEnvironmentResponse::getInstanceType() const {
    return m_instance_type;
}
void OAIGetEnvironmentResponse::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIGetEnvironmentResponse::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIGetEnvironmentResponse::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QString OAIGetEnvironmentResponse::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIGetEnvironmentResponse::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIGetEnvironmentResponse::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIGetEnvironmentResponse::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

QString OAIGetEnvironmentResponse::getLoadBalancerArn() const {
    return m_load_balancer_arn;
}
void OAIGetEnvironmentResponse::setLoadBalancerArn(const QString &load_balancer_arn) {
    m_load_balancer_arn = load_balancer_arn;
    m_load_balancer_arn_isSet = true;
}

bool OAIGetEnvironmentResponse::is_load_balancer_arn_Set() const{
    return m_load_balancer_arn_isSet;
}

bool OAIGetEnvironmentResponse::is_load_balancer_arn_Valid() const{
    return m_load_balancer_arn_isValid;
}

QString OAIGetEnvironmentResponse::getName() const {
    return m_name;
}
void OAIGetEnvironmentResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetEnvironmentResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetEnvironmentResponse::is_name_Valid() const{
    return m_name_isValid;
}

OAIGetEnvironmentResponse_pendingMaintenance OAIGetEnvironmentResponse::getPendingMaintenance() const {
    return m_pending_maintenance;
}
void OAIGetEnvironmentResponse::setPendingMaintenance(const OAIGetEnvironmentResponse_pendingMaintenance &pending_maintenance) {
    m_pending_maintenance = pending_maintenance;
    m_pending_maintenance_isSet = true;
}

bool OAIGetEnvironmentResponse::is_pending_maintenance_Set() const{
    return m_pending_maintenance_isSet;
}

bool OAIGetEnvironmentResponse::is_pending_maintenance_Valid() const{
    return m_pending_maintenance_isValid;
}

QString OAIGetEnvironmentResponse::getPreferredMaintenanceWindow() const {
    return m_preferred_maintenance_window;
}
void OAIGetEnvironmentResponse::setPreferredMaintenanceWindow(const QString &preferred_maintenance_window) {
    m_preferred_maintenance_window = preferred_maintenance_window;
    m_preferred_maintenance_window_isSet = true;
}

bool OAIGetEnvironmentResponse::is_preferred_maintenance_window_Set() const{
    return m_preferred_maintenance_window_isSet;
}

bool OAIGetEnvironmentResponse::is_preferred_maintenance_window_Valid() const{
    return m_preferred_maintenance_window_isValid;
}

bool OAIGetEnvironmentResponse::getPubliclyAccessible() const {
    return m_publicly_accessible;
}
void OAIGetEnvironmentResponse::setPubliclyAccessible(const bool &publicly_accessible) {
    m_publicly_accessible = publicly_accessible;
    m_publicly_accessible_isSet = true;
}

bool OAIGetEnvironmentResponse::is_publicly_accessible_Set() const{
    return m_publicly_accessible_isSet;
}

bool OAIGetEnvironmentResponse::is_publicly_accessible_Valid() const{
    return m_publicly_accessible_isValid;
}

QList OAIGetEnvironmentResponse::getSecurityGroupIds() const {
    return m_security_group_ids;
}
void OAIGetEnvironmentResponse::setSecurityGroupIds(const QList &security_group_ids) {
    m_security_group_ids = security_group_ids;
    m_security_group_ids_isSet = true;
}

bool OAIGetEnvironmentResponse::is_security_group_ids_Set() const{
    return m_security_group_ids_isSet;
}

bool OAIGetEnvironmentResponse::is_security_group_ids_Valid() const{
    return m_security_group_ids_isValid;
}

OAIEnvironmentLifecycle OAIGetEnvironmentResponse::getStatus() const {
    return m_status;
}
void OAIGetEnvironmentResponse::setStatus(const OAIEnvironmentLifecycle &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetEnvironmentResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetEnvironmentResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetEnvironmentResponse::getStatusReason() const {
    return m_status_reason;
}
void OAIGetEnvironmentResponse::setStatusReason(const QString &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAIGetEnvironmentResponse::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAIGetEnvironmentResponse::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

QList OAIGetEnvironmentResponse::getStorageConfigurations() const {
    return m_storage_configurations;
}
void OAIGetEnvironmentResponse::setStorageConfigurations(const QList &storage_configurations) {
    m_storage_configurations = storage_configurations;
    m_storage_configurations_isSet = true;
}

bool OAIGetEnvironmentResponse::is_storage_configurations_Set() const{
    return m_storage_configurations_isSet;
}

bool OAIGetEnvironmentResponse::is_storage_configurations_Valid() const{
    return m_storage_configurations_isValid;
}

QList OAIGetEnvironmentResponse::getSubnetIds() const {
    return m_subnet_ids;
}
void OAIGetEnvironmentResponse::setSubnetIds(const QList &subnet_ids) {
    m_subnet_ids = subnet_ids;
    m_subnet_ids_isSet = true;
}

bool OAIGetEnvironmentResponse::is_subnet_ids_Set() const{
    return m_subnet_ids_isSet;
}

bool OAIGetEnvironmentResponse::is_subnet_ids_Valid() const{
    return m_subnet_ids_isValid;
}

QMap OAIGetEnvironmentResponse::getTags() const {
    return m_tags;
}
void OAIGetEnvironmentResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetEnvironmentResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetEnvironmentResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIGetEnvironmentResponse::getVpcId() const {
    return m_vpc_id;
}
void OAIGetEnvironmentResponse::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAIGetEnvironmentResponse::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAIGetEnvironmentResponse::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

bool OAIGetEnvironmentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actual_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_availability_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancer_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_maintenance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_maintenance_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publicly_accessible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetEnvironmentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_creation_time_isValid && m_engine_type_isValid && m_engine_version_isValid && m_environment_arn_isValid && m_environment_id_isValid && m_instance_type_isValid && m_name_isValid && m_security_group_ids_isValid && m_status_isValid && m_subnet_ids_isValid && m_vpc_id_isValid && true;
}

} // namespace OpenAPI
