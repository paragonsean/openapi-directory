/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchJobExecutionStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchJobExecutionStatus::OAIBatchJobExecutionStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchJobExecutionStatus::OAIBatchJobExecutionStatus() {
    this->initializeModel();
}

OAIBatchJobExecutionStatus::~OAIBatchJobExecutionStatus() {}

void OAIBatchJobExecutionStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIBatchJobExecutionStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIBatchJobExecutionStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Submitting", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBatchJobExecutionStatus::SUBMITTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Holding", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBatchJobExecutionStatus::HOLDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Dispatching", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBatchJobExecutionStatus::DISPATCHING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Running", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBatchJobExecutionStatus::RUNNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Cancelling", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBatchJobExecutionStatus::CANCELLING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Cancelled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBatchJobExecutionStatus::CANCELLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Succeeded", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBatchJobExecutionStatus::SUCCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBatchJobExecutionStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Succeeded With Warning", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBatchJobExecutionStatus::SUCCEEDED_WITH_WARNING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIBatchJobExecutionStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIBatchJobExecutionStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIBatchJobExecutionStatus::SUBMITTING:
            val = "Submitting";
            break;
        case eOAIBatchJobExecutionStatus::HOLDING:
            val = "Holding";
            break;
        case eOAIBatchJobExecutionStatus::DISPATCHING:
            val = "Dispatching";
            break;
        case eOAIBatchJobExecutionStatus::RUNNING:
            val = "Running";
            break;
        case eOAIBatchJobExecutionStatus::CANCELLING:
            val = "Cancelling";
            break;
        case eOAIBatchJobExecutionStatus::CANCELLED:
            val = "Cancelled";
            break;
        case eOAIBatchJobExecutionStatus::SUCCEEDED:
            val = "Succeeded";
            break;
        case eOAIBatchJobExecutionStatus::FAILED:
            val = "Failed";
            break;
        case eOAIBatchJobExecutionStatus::SUCCEEDED_WITH_WARNING:
            val = "Succeeded With Warning";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIBatchJobExecutionStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIBatchJobExecutionStatus::eOAIBatchJobExecutionStatus OAIBatchJobExecutionStatus::getValue() const {
    return m_value;
}

void OAIBatchJobExecutionStatus::setValue(const OAIBatchJobExecutionStatus::eOAIBatchJobExecutionStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIBatchJobExecutionStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIBatchJobExecutionStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
