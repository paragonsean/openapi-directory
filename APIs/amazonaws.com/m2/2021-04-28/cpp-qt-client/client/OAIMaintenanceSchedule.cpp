/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMaintenanceSchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMaintenanceSchedule::OAIMaintenanceSchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMaintenanceSchedule::OAIMaintenanceSchedule() {
    this->initializeModel();
}

OAIMaintenanceSchedule::~OAIMaintenanceSchedule() {}

void OAIMaintenanceSchedule::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIMaintenanceSchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMaintenanceSchedule::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIMaintenanceSchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMaintenanceSchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QDateTime OAIMaintenanceSchedule::getEndTime() const {
    return m_end_time;
}
void OAIMaintenanceSchedule::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIMaintenanceSchedule::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIMaintenanceSchedule::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QDateTime OAIMaintenanceSchedule::getStartTime() const {
    return m_start_time;
}
void OAIMaintenanceSchedule::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIMaintenanceSchedule::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIMaintenanceSchedule::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIMaintenanceSchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMaintenanceSchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
