/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSetImportTask_summary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSetImportTask_summary::OAIDataSetImportTask_summary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSetImportTask_summary::OAIDataSetImportTask_summary() {
    this->initializeModel();
}

OAIDataSetImportTask_summary::~OAIDataSetImportTask_summary() {}

void OAIDataSetImportTask_summary::initializeModel() {

    m_failed_isSet = false;
    m_failed_isValid = false;

    m_in_progress_isSet = false;
    m_in_progress_isValid = false;

    m_pending_isSet = false;
    m_pending_isValid = false;

    m_succeeded_isSet = false;
    m_succeeded_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIDataSetImportTask_summary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSetImportTask_summary::fromJsonObject(QJsonObject json) {

    m_failed_isValid = ::OpenAPI::fromJsonValue(m_failed, json[QString("failed")]);
    m_failed_isSet = !json[QString("failed")].isNull() && m_failed_isValid;

    m_in_progress_isValid = ::OpenAPI::fromJsonValue(m_in_progress, json[QString("inProgress")]);
    m_in_progress_isSet = !json[QString("inProgress")].isNull() && m_in_progress_isValid;

    m_pending_isValid = ::OpenAPI::fromJsonValue(m_pending, json[QString("pending")]);
    m_pending_isSet = !json[QString("pending")].isNull() && m_pending_isValid;

    m_succeeded_isValid = ::OpenAPI::fromJsonValue(m_succeeded, json[QString("succeeded")]);
    m_succeeded_isSet = !json[QString("succeeded")].isNull() && m_succeeded_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIDataSetImportTask_summary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSetImportTask_summary::asJsonObject() const {
    QJsonObject obj;
    if (m_failed_isSet) {
        obj.insert(QString("failed"), ::OpenAPI::toJsonValue(m_failed));
    }
    if (m_in_progress_isSet) {
        obj.insert(QString("inProgress"), ::OpenAPI::toJsonValue(m_in_progress));
    }
    if (m_pending_isSet) {
        obj.insert(QString("pending"), ::OpenAPI::toJsonValue(m_pending));
    }
    if (m_succeeded_isSet) {
        obj.insert(QString("succeeded"), ::OpenAPI::toJsonValue(m_succeeded));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

qint32 OAIDataSetImportTask_summary::getFailed() const {
    return m_failed;
}
void OAIDataSetImportTask_summary::setFailed(const qint32 &failed) {
    m_failed = failed;
    m_failed_isSet = true;
}

bool OAIDataSetImportTask_summary::is_failed_Set() const{
    return m_failed_isSet;
}

bool OAIDataSetImportTask_summary::is_failed_Valid() const{
    return m_failed_isValid;
}

qint32 OAIDataSetImportTask_summary::getInProgress() const {
    return m_in_progress;
}
void OAIDataSetImportTask_summary::setInProgress(const qint32 &in_progress) {
    m_in_progress = in_progress;
    m_in_progress_isSet = true;
}

bool OAIDataSetImportTask_summary::is_in_progress_Set() const{
    return m_in_progress_isSet;
}

bool OAIDataSetImportTask_summary::is_in_progress_Valid() const{
    return m_in_progress_isValid;
}

qint32 OAIDataSetImportTask_summary::getPending() const {
    return m_pending;
}
void OAIDataSetImportTask_summary::setPending(const qint32 &pending) {
    m_pending = pending;
    m_pending_isSet = true;
}

bool OAIDataSetImportTask_summary::is_pending_Set() const{
    return m_pending_isSet;
}

bool OAIDataSetImportTask_summary::is_pending_Valid() const{
    return m_pending_isValid;
}

qint32 OAIDataSetImportTask_summary::getSucceeded() const {
    return m_succeeded;
}
void OAIDataSetImportTask_summary::setSucceeded(const qint32 &succeeded) {
    m_succeeded = succeeded;
    m_succeeded_isSet = true;
}

bool OAIDataSetImportTask_summary::is_succeeded_Set() const{
    return m_succeeded_isSet;
}

bool OAIDataSetImportTask_summary::is_succeeded_Valid() const{
    return m_succeeded_isValid;
}

qint32 OAIDataSetImportTask_summary::getTotal() const {
    return m_total;
}
void OAIDataSetImportTask_summary::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIDataSetImportTask_summary::is_total_Set() const{
    return m_total_isSet;
}

bool OAIDataSetImportTask_summary::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIDataSetImportTask_summary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_succeeded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSetImportTask_summary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_failed_isValid && m_in_progress_isValid && m_pending_isValid && m_succeeded_isValid && m_total_isValid && true;
}

} // namespace OpenAPI
