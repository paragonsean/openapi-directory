/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatasetDetailOrgAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatasetDetailOrgAttributes::OAIDatasetDetailOrgAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatasetDetailOrgAttributes::OAIDatasetDetailOrgAttributes() {
    this->initializeModel();
}

OAIDatasetDetailOrgAttributes::~OAIDatasetDetailOrgAttributes() {}

void OAIDatasetDetailOrgAttributes::initializeModel() {

    m_gdg_isSet = false;
    m_gdg_isValid = false;

    m_po_isSet = false;
    m_po_isValid = false;

    m_ps_isSet = false;
    m_ps_isValid = false;

    m_vsam_isSet = false;
    m_vsam_isValid = false;
}

void OAIDatasetDetailOrgAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatasetDetailOrgAttributes::fromJsonObject(QJsonObject json) {

    m_gdg_isValid = ::OpenAPI::fromJsonValue(m_gdg, json[QString("gdg")]);
    m_gdg_isSet = !json[QString("gdg")].isNull() && m_gdg_isValid;

    m_po_isValid = ::OpenAPI::fromJsonValue(m_po, json[QString("po")]);
    m_po_isSet = !json[QString("po")].isNull() && m_po_isValid;

    m_ps_isValid = ::OpenAPI::fromJsonValue(m_ps, json[QString("ps")]);
    m_ps_isSet = !json[QString("ps")].isNull() && m_ps_isValid;

    m_vsam_isValid = ::OpenAPI::fromJsonValue(m_vsam, json[QString("vsam")]);
    m_vsam_isSet = !json[QString("vsam")].isNull() && m_vsam_isValid;
}

QString OAIDatasetDetailOrgAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatasetDetailOrgAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_gdg.isSet()) {
        obj.insert(QString("gdg"), ::OpenAPI::toJsonValue(m_gdg));
    }
    if (m_po.isSet()) {
        obj.insert(QString("po"), ::OpenAPI::toJsonValue(m_po));
    }
    if (m_ps.isSet()) {
        obj.insert(QString("ps"), ::OpenAPI::toJsonValue(m_ps));
    }
    if (m_vsam.isSet()) {
        obj.insert(QString("vsam"), ::OpenAPI::toJsonValue(m_vsam));
    }
    return obj;
}

OAIDatasetDetailOrgAttributes_gdg OAIDatasetDetailOrgAttributes::getGdg() const {
    return m_gdg;
}
void OAIDatasetDetailOrgAttributes::setGdg(const OAIDatasetDetailOrgAttributes_gdg &gdg) {
    m_gdg = gdg;
    m_gdg_isSet = true;
}

bool OAIDatasetDetailOrgAttributes::is_gdg_Set() const{
    return m_gdg_isSet;
}

bool OAIDatasetDetailOrgAttributes::is_gdg_Valid() const{
    return m_gdg_isValid;
}

OAIDatasetDetailOrgAttributes_po OAIDatasetDetailOrgAttributes::getPo() const {
    return m_po;
}
void OAIDatasetDetailOrgAttributes::setPo(const OAIDatasetDetailOrgAttributes_po &po) {
    m_po = po;
    m_po_isSet = true;
}

bool OAIDatasetDetailOrgAttributes::is_po_Set() const{
    return m_po_isSet;
}

bool OAIDatasetDetailOrgAttributes::is_po_Valid() const{
    return m_po_isValid;
}

OAIDatasetDetailOrgAttributes_ps OAIDatasetDetailOrgAttributes::getPs() const {
    return m_ps;
}
void OAIDatasetDetailOrgAttributes::setPs(const OAIDatasetDetailOrgAttributes_ps &ps) {
    m_ps = ps;
    m_ps_isSet = true;
}

bool OAIDatasetDetailOrgAttributes::is_ps_Set() const{
    return m_ps_isSet;
}

bool OAIDatasetDetailOrgAttributes::is_ps_Valid() const{
    return m_ps_isValid;
}

OAIDatasetDetailOrgAttributes_vsam OAIDatasetDetailOrgAttributes::getVsam() const {
    return m_vsam;
}
void OAIDatasetDetailOrgAttributes::setVsam(const OAIDatasetDetailOrgAttributes_vsam &vsam) {
    m_vsam = vsam;
    m_vsam_isSet = true;
}

bool OAIDatasetDetailOrgAttributes::is_vsam_Set() const{
    return m_vsam_isSet;
}

bool OAIDatasetDetailOrgAttributes::is_vsam_Valid() const{
    return m_vsam_isValid;
}

bool OAIDatasetDetailOrgAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gdg.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_po.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ps.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vsam.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatasetDetailOrgAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
