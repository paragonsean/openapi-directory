/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecordLength.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecordLength::OAIRecordLength(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecordLength::OAIRecordLength() {
    this->initializeModel();
}

OAIRecordLength::~OAIRecordLength() {}

void OAIRecordLength::initializeModel() {

    m_max_isSet = false;
    m_max_isValid = false;

    m_min_isSet = false;
    m_min_isValid = false;
}

void OAIRecordLength::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecordLength::fromJsonObject(QJsonObject json) {

    m_max_isValid = ::OpenAPI::fromJsonValue(m_max, json[QString("max")]);
    m_max_isSet = !json[QString("max")].isNull() && m_max_isValid;

    m_min_isValid = ::OpenAPI::fromJsonValue(m_min, json[QString("min")]);
    m_min_isSet = !json[QString("min")].isNull() && m_min_isValid;
}

QString OAIRecordLength::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecordLength::asJsonObject() const {
    QJsonObject obj;
    if (m_max_isSet) {
        obj.insert(QString("max"), ::OpenAPI::toJsonValue(m_max));
    }
    if (m_min_isSet) {
        obj.insert(QString("min"), ::OpenAPI::toJsonValue(m_min));
    }
    return obj;
}

qint32 OAIRecordLength::getMax() const {
    return m_max;
}
void OAIRecordLength::setMax(const qint32 &max) {
    m_max = max;
    m_max_isSet = true;
}

bool OAIRecordLength::is_max_Set() const{
    return m_max_isSet;
}

bool OAIRecordLength::is_max_Valid() const{
    return m_max_isValid;
}

qint32 OAIRecordLength::getMin() const {
    return m_min;
}
void OAIRecordLength::setMin(const qint32 &min) {
    m_min = min;
    m_min_isSet = true;
}

bool OAIRecordLength::is_min_Set() const{
    return m_min_isSet;
}

bool OAIRecordLength::is_min_Valid() const{
    return m_min_isValid;
}

bool OAIRecordLength::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecordLength::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_max_isValid && m_min_isValid && true;
}

} // namespace OpenAPI
