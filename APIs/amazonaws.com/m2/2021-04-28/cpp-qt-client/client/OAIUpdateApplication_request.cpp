/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateApplication_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateApplication_request::OAIUpdateApplication_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateApplication_request::OAIUpdateApplication_request() {
    this->initializeModel();
}

OAIUpdateApplication_request::~OAIUpdateApplication_request() {}

void OAIUpdateApplication_request::initializeModel() {

    m_current_application_version_isSet = false;
    m_current_application_version_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;
}

void OAIUpdateApplication_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateApplication_request::fromJsonObject(QJsonObject json) {

    m_current_application_version_isValid = ::OpenAPI::fromJsonValue(m_current_application_version, json[QString("currentApplicationVersion")]);
    m_current_application_version_isSet = !json[QString("currentApplicationVersion")].isNull() && m_current_application_version_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("definition")]);
    m_definition_isSet = !json[QString("definition")].isNull() && m_definition_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;
}

QString OAIUpdateApplication_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateApplication_request::asJsonObject() const {
    QJsonObject obj;
    if (m_current_application_version_isSet) {
        obj.insert(QString("currentApplicationVersion"), ::OpenAPI::toJsonValue(m_current_application_version));
    }
    if (m_definition.isSet()) {
        obj.insert(QString("definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    return obj;
}

qint32 OAIUpdateApplication_request::getCurrentApplicationVersion() const {
    return m_current_application_version;
}
void OAIUpdateApplication_request::setCurrentApplicationVersion(const qint32 &current_application_version) {
    m_current_application_version = current_application_version;
    m_current_application_version_isSet = true;
}

bool OAIUpdateApplication_request::is_current_application_version_Set() const{
    return m_current_application_version_isSet;
}

bool OAIUpdateApplication_request::is_current_application_version_Valid() const{
    return m_current_application_version_isValid;
}

OAICreateApplication_request_definition OAIUpdateApplication_request::getDefinition() const {
    return m_definition;
}
void OAIUpdateApplication_request::setDefinition(const OAICreateApplication_request_definition &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAIUpdateApplication_request::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAIUpdateApplication_request::is_definition_Valid() const{
    return m_definition_isValid;
}

QString OAIUpdateApplication_request::getDescription() const {
    return m_description;
}
void OAIUpdateApplication_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateApplication_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateApplication_request::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIUpdateApplication_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_application_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateApplication_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_current_application_version_isValid && true;
}

} // namespace OpenAPI
