/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateEnvironmentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateEnvironmentRequest::OAIUpdateEnvironmentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateEnvironmentRequest::OAIUpdateEnvironmentRequest() {
    this->initializeModel();
}

OAIUpdateEnvironmentRequest::~OAIUpdateEnvironmentRequest() {}

void OAIUpdateEnvironmentRequest::initializeModel() {

    m_apply_during_maintenance_window_isSet = false;
    m_apply_during_maintenance_window_isValid = false;

    m_desired_capacity_isSet = false;
    m_desired_capacity_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_preferred_maintenance_window_isSet = false;
    m_preferred_maintenance_window_isValid = false;
}

void OAIUpdateEnvironmentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateEnvironmentRequest::fromJsonObject(QJsonObject json) {

    m_apply_during_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_apply_during_maintenance_window, json[QString("applyDuringMaintenanceWindow")]);
    m_apply_during_maintenance_window_isSet = !json[QString("applyDuringMaintenanceWindow")].isNull() && m_apply_during_maintenance_window_isValid;

    m_desired_capacity_isValid = ::OpenAPI::fromJsonValue(m_desired_capacity, json[QString("desiredCapacity")]);
    m_desired_capacity_isSet = !json[QString("desiredCapacity")].isNull() && m_desired_capacity_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("engineVersion")]);
    m_engine_version_isSet = !json[QString("engineVersion")].isNull() && m_engine_version_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;

    m_preferred_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_preferred_maintenance_window, json[QString("preferredMaintenanceWindow")]);
    m_preferred_maintenance_window_isSet = !json[QString("preferredMaintenanceWindow")].isNull() && m_preferred_maintenance_window_isValid;
}

QString OAIUpdateEnvironmentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateEnvironmentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_apply_during_maintenance_window_isSet) {
        obj.insert(QString("applyDuringMaintenanceWindow"), ::OpenAPI::toJsonValue(m_apply_during_maintenance_window));
    }
    if (m_desired_capacity_isSet) {
        obj.insert(QString("desiredCapacity"), ::OpenAPI::toJsonValue(m_desired_capacity));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("engineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_preferred_maintenance_window_isSet) {
        obj.insert(QString("preferredMaintenanceWindow"), ::OpenAPI::toJsonValue(m_preferred_maintenance_window));
    }
    return obj;
}

bool OAIUpdateEnvironmentRequest::getApplyDuringMaintenanceWindow() const {
    return m_apply_during_maintenance_window;
}
void OAIUpdateEnvironmentRequest::setApplyDuringMaintenanceWindow(const bool &apply_during_maintenance_window) {
    m_apply_during_maintenance_window = apply_during_maintenance_window;
    m_apply_during_maintenance_window_isSet = true;
}

bool OAIUpdateEnvironmentRequest::is_apply_during_maintenance_window_Set() const{
    return m_apply_during_maintenance_window_isSet;
}

bool OAIUpdateEnvironmentRequest::is_apply_during_maintenance_window_Valid() const{
    return m_apply_during_maintenance_window_isValid;
}

qint32 OAIUpdateEnvironmentRequest::getDesiredCapacity() const {
    return m_desired_capacity;
}
void OAIUpdateEnvironmentRequest::setDesiredCapacity(const qint32 &desired_capacity) {
    m_desired_capacity = desired_capacity;
    m_desired_capacity_isSet = true;
}

bool OAIUpdateEnvironmentRequest::is_desired_capacity_Set() const{
    return m_desired_capacity_isSet;
}

bool OAIUpdateEnvironmentRequest::is_desired_capacity_Valid() const{
    return m_desired_capacity_isValid;
}

QString OAIUpdateEnvironmentRequest::getEngineVersion() const {
    return m_engine_version;
}
void OAIUpdateEnvironmentRequest::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIUpdateEnvironmentRequest::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIUpdateEnvironmentRequest::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

QString OAIUpdateEnvironmentRequest::getInstanceType() const {
    return m_instance_type;
}
void OAIUpdateEnvironmentRequest::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIUpdateEnvironmentRequest::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIUpdateEnvironmentRequest::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QString OAIUpdateEnvironmentRequest::getPreferredMaintenanceWindow() const {
    return m_preferred_maintenance_window;
}
void OAIUpdateEnvironmentRequest::setPreferredMaintenanceWindow(const QString &preferred_maintenance_window) {
    m_preferred_maintenance_window = preferred_maintenance_window;
    m_preferred_maintenance_window_isSet = true;
}

bool OAIUpdateEnvironmentRequest::is_preferred_maintenance_window_Set() const{
    return m_preferred_maintenance_window_isSet;
}

bool OAIUpdateEnvironmentRequest::is_preferred_maintenance_window_Valid() const{
    return m_preferred_maintenance_window_isValid;
}

bool OAIUpdateEnvironmentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apply_during_maintenance_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_maintenance_window_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateEnvironmentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
