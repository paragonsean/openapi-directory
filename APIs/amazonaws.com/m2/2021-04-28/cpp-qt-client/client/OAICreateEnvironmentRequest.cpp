/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateEnvironmentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateEnvironmentRequest::OAICreateEnvironmentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateEnvironmentRequest::OAICreateEnvironmentRequest() {
    this->initializeModel();
}

OAICreateEnvironmentRequest::~OAICreateEnvironmentRequest() {}

void OAICreateEnvironmentRequest::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_engine_type_isSet = false;
    m_engine_type_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_high_availability_config_isSet = false;
    m_high_availability_config_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_preferred_maintenance_window_isSet = false;
    m_preferred_maintenance_window_isValid = false;

    m_publicly_accessible_isSet = false;
    m_publicly_accessible_isValid = false;

    m_security_group_ids_isSet = false;
    m_security_group_ids_isValid = false;

    m_storage_configurations_isSet = false;
    m_storage_configurations_isValid = false;

    m_subnet_ids_isSet = false;
    m_subnet_ids_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateEnvironmentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateEnvironmentRequest::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_engine_type_isValid = ::OpenAPI::fromJsonValue(m_engine_type, json[QString("engineType")]);
    m_engine_type_isSet = !json[QString("engineType")].isNull() && m_engine_type_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("engineVersion")]);
    m_engine_version_isSet = !json[QString("engineVersion")].isNull() && m_engine_version_isValid;

    m_high_availability_config_isValid = ::OpenAPI::fromJsonValue(m_high_availability_config, json[QString("highAvailabilityConfig")]);
    m_high_availability_config_isSet = !json[QString("highAvailabilityConfig")].isNull() && m_high_availability_config_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("kmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("kmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_preferred_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_preferred_maintenance_window, json[QString("preferredMaintenanceWindow")]);
    m_preferred_maintenance_window_isSet = !json[QString("preferredMaintenanceWindow")].isNull() && m_preferred_maintenance_window_isValid;

    m_publicly_accessible_isValid = ::OpenAPI::fromJsonValue(m_publicly_accessible, json[QString("publiclyAccessible")]);
    m_publicly_accessible_isSet = !json[QString("publiclyAccessible")].isNull() && m_publicly_accessible_isValid;

    m_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_security_group_ids, json[QString("securityGroupIds")]);
    m_security_group_ids_isSet = !json[QString("securityGroupIds")].isNull() && m_security_group_ids_isValid;

    m_storage_configurations_isValid = ::OpenAPI::fromJsonValue(m_storage_configurations, json[QString("storageConfigurations")]);
    m_storage_configurations_isSet = !json[QString("storageConfigurations")].isNull() && m_storage_configurations_isValid;

    m_subnet_ids_isValid = ::OpenAPI::fromJsonValue(m_subnet_ids, json[QString("subnetIds")]);
    m_subnet_ids_isSet = !json[QString("subnetIds")].isNull() && m_subnet_ids_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateEnvironmentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateEnvironmentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_engine_type.isSet()) {
        obj.insert(QString("engineType"), ::OpenAPI::toJsonValue(m_engine_type));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("engineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_high_availability_config.isSet()) {
        obj.insert(QString("highAvailabilityConfig"), ::OpenAPI::toJsonValue(m_high_availability_config));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("kmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_preferred_maintenance_window_isSet) {
        obj.insert(QString("preferredMaintenanceWindow"), ::OpenAPI::toJsonValue(m_preferred_maintenance_window));
    }
    if (m_publicly_accessible_isSet) {
        obj.insert(QString("publiclyAccessible"), ::OpenAPI::toJsonValue(m_publicly_accessible));
    }
    if (m_security_group_ids.isSet()) {
        obj.insert(QString("securityGroupIds"), ::OpenAPI::toJsonValue(m_security_group_ids));
    }
    if (m_storage_configurations.isSet()) {
        obj.insert(QString("storageConfigurations"), ::OpenAPI::toJsonValue(m_storage_configurations));
    }
    if (m_subnet_ids.isSet()) {
        obj.insert(QString("subnetIds"), ::OpenAPI::toJsonValue(m_subnet_ids));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateEnvironmentRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateEnvironmentRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateEnvironmentRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateEnvironmentRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateEnvironmentRequest::getDescription() const {
    return m_description;
}
void OAICreateEnvironmentRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateEnvironmentRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateEnvironmentRequest::is_description_Valid() const{
    return m_description_isValid;
}

OAIEngineType OAICreateEnvironmentRequest::getEngineType() const {
    return m_engine_type;
}
void OAICreateEnvironmentRequest::setEngineType(const OAIEngineType &engine_type) {
    m_engine_type = engine_type;
    m_engine_type_isSet = true;
}

bool OAICreateEnvironmentRequest::is_engine_type_Set() const{
    return m_engine_type_isSet;
}

bool OAICreateEnvironmentRequest::is_engine_type_Valid() const{
    return m_engine_type_isValid;
}

QString OAICreateEnvironmentRequest::getEngineVersion() const {
    return m_engine_version;
}
void OAICreateEnvironmentRequest::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAICreateEnvironmentRequest::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAICreateEnvironmentRequest::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

OAICreateEnvironmentRequest_highAvailabilityConfig OAICreateEnvironmentRequest::getHighAvailabilityConfig() const {
    return m_high_availability_config;
}
void OAICreateEnvironmentRequest::setHighAvailabilityConfig(const OAICreateEnvironmentRequest_highAvailabilityConfig &high_availability_config) {
    m_high_availability_config = high_availability_config;
    m_high_availability_config_isSet = true;
}

bool OAICreateEnvironmentRequest::is_high_availability_config_Set() const{
    return m_high_availability_config_isSet;
}

bool OAICreateEnvironmentRequest::is_high_availability_config_Valid() const{
    return m_high_availability_config_isValid;
}

QString OAICreateEnvironmentRequest::getInstanceType() const {
    return m_instance_type;
}
void OAICreateEnvironmentRequest::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAICreateEnvironmentRequest::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAICreateEnvironmentRequest::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QString OAICreateEnvironmentRequest::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAICreateEnvironmentRequest::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAICreateEnvironmentRequest::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAICreateEnvironmentRequest::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

QString OAICreateEnvironmentRequest::getName() const {
    return m_name;
}
void OAICreateEnvironmentRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateEnvironmentRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateEnvironmentRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateEnvironmentRequest::getPreferredMaintenanceWindow() const {
    return m_preferred_maintenance_window;
}
void OAICreateEnvironmentRequest::setPreferredMaintenanceWindow(const QString &preferred_maintenance_window) {
    m_preferred_maintenance_window = preferred_maintenance_window;
    m_preferred_maintenance_window_isSet = true;
}

bool OAICreateEnvironmentRequest::is_preferred_maintenance_window_Set() const{
    return m_preferred_maintenance_window_isSet;
}

bool OAICreateEnvironmentRequest::is_preferred_maintenance_window_Valid() const{
    return m_preferred_maintenance_window_isValid;
}

bool OAICreateEnvironmentRequest::getPubliclyAccessible() const {
    return m_publicly_accessible;
}
void OAICreateEnvironmentRequest::setPubliclyAccessible(const bool &publicly_accessible) {
    m_publicly_accessible = publicly_accessible;
    m_publicly_accessible_isSet = true;
}

bool OAICreateEnvironmentRequest::is_publicly_accessible_Set() const{
    return m_publicly_accessible_isSet;
}

bool OAICreateEnvironmentRequest::is_publicly_accessible_Valid() const{
    return m_publicly_accessible_isValid;
}

QList OAICreateEnvironmentRequest::getSecurityGroupIds() const {
    return m_security_group_ids;
}
void OAICreateEnvironmentRequest::setSecurityGroupIds(const QList &security_group_ids) {
    m_security_group_ids = security_group_ids;
    m_security_group_ids_isSet = true;
}

bool OAICreateEnvironmentRequest::is_security_group_ids_Set() const{
    return m_security_group_ids_isSet;
}

bool OAICreateEnvironmentRequest::is_security_group_ids_Valid() const{
    return m_security_group_ids_isValid;
}

QList OAICreateEnvironmentRequest::getStorageConfigurations() const {
    return m_storage_configurations;
}
void OAICreateEnvironmentRequest::setStorageConfigurations(const QList &storage_configurations) {
    m_storage_configurations = storage_configurations;
    m_storage_configurations_isSet = true;
}

bool OAICreateEnvironmentRequest::is_storage_configurations_Set() const{
    return m_storage_configurations_isSet;
}

bool OAICreateEnvironmentRequest::is_storage_configurations_Valid() const{
    return m_storage_configurations_isValid;
}

QList OAICreateEnvironmentRequest::getSubnetIds() const {
    return m_subnet_ids;
}
void OAICreateEnvironmentRequest::setSubnetIds(const QList &subnet_ids) {
    m_subnet_ids = subnet_ids;
    m_subnet_ids_isSet = true;
}

bool OAICreateEnvironmentRequest::is_subnet_ids_Set() const{
    return m_subnet_ids_isSet;
}

bool OAICreateEnvironmentRequest::is_subnet_ids_Valid() const{
    return m_subnet_ids_isValid;
}

QMap OAICreateEnvironmentRequest::getTags() const {
    return m_tags;
}
void OAICreateEnvironmentRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateEnvironmentRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateEnvironmentRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateEnvironmentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_availability_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_maintenance_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publicly_accessible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateEnvironmentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_engine_type_isValid && m_instance_type_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
