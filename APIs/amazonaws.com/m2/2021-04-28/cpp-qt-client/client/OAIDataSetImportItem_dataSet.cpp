/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSetImportItem_dataSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSetImportItem_dataSet::OAIDataSetImportItem_dataSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSetImportItem_dataSet::OAIDataSetImportItem_dataSet() {
    this->initializeModel();
}

OAIDataSetImportItem_dataSet::~OAIDataSetImportItem_dataSet() {}

void OAIDataSetImportItem_dataSet::initializeModel() {

    m_dataset_name_isSet = false;
    m_dataset_name_isValid = false;

    m_dataset_org_isSet = false;
    m_dataset_org_isValid = false;

    m_record_length_isSet = false;
    m_record_length_isValid = false;

    m_relative_path_isSet = false;
    m_relative_path_isValid = false;

    m_storage_type_isSet = false;
    m_storage_type_isValid = false;
}

void OAIDataSetImportItem_dataSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSetImportItem_dataSet::fromJsonObject(QJsonObject json) {

    m_dataset_name_isValid = ::OpenAPI::fromJsonValue(m_dataset_name, json[QString("datasetName")]);
    m_dataset_name_isSet = !json[QString("datasetName")].isNull() && m_dataset_name_isValid;

    m_dataset_org_isValid = ::OpenAPI::fromJsonValue(m_dataset_org, json[QString("datasetOrg")]);
    m_dataset_org_isSet = !json[QString("datasetOrg")].isNull() && m_dataset_org_isValid;

    m_record_length_isValid = ::OpenAPI::fromJsonValue(m_record_length, json[QString("recordLength")]);
    m_record_length_isSet = !json[QString("recordLength")].isNull() && m_record_length_isValid;

    m_relative_path_isValid = ::OpenAPI::fromJsonValue(m_relative_path, json[QString("relativePath")]);
    m_relative_path_isSet = !json[QString("relativePath")].isNull() && m_relative_path_isValid;

    m_storage_type_isValid = ::OpenAPI::fromJsonValue(m_storage_type, json[QString("storageType")]);
    m_storage_type_isSet = !json[QString("storageType")].isNull() && m_storage_type_isValid;
}

QString OAIDataSetImportItem_dataSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSetImportItem_dataSet::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset_name_isSet) {
        obj.insert(QString("datasetName"), ::OpenAPI::toJsonValue(m_dataset_name));
    }
    if (m_dataset_org.isSet()) {
        obj.insert(QString("datasetOrg"), ::OpenAPI::toJsonValue(m_dataset_org));
    }
    if (m_record_length.isSet()) {
        obj.insert(QString("recordLength"), ::OpenAPI::toJsonValue(m_record_length));
    }
    if (m_relative_path_isSet) {
        obj.insert(QString("relativePath"), ::OpenAPI::toJsonValue(m_relative_path));
    }
    if (m_storage_type_isSet) {
        obj.insert(QString("storageType"), ::OpenAPI::toJsonValue(m_storage_type));
    }
    return obj;
}

QString OAIDataSetImportItem_dataSet::getDatasetName() const {
    return m_dataset_name;
}
void OAIDataSetImportItem_dataSet::setDatasetName(const QString &dataset_name) {
    m_dataset_name = dataset_name;
    m_dataset_name_isSet = true;
}

bool OAIDataSetImportItem_dataSet::is_dataset_name_Set() const{
    return m_dataset_name_isSet;
}

bool OAIDataSetImportItem_dataSet::is_dataset_name_Valid() const{
    return m_dataset_name_isValid;
}

OAIDataSet_datasetOrg OAIDataSetImportItem_dataSet::getDatasetOrg() const {
    return m_dataset_org;
}
void OAIDataSetImportItem_dataSet::setDatasetOrg(const OAIDataSet_datasetOrg &dataset_org) {
    m_dataset_org = dataset_org;
    m_dataset_org_isSet = true;
}

bool OAIDataSetImportItem_dataSet::is_dataset_org_Set() const{
    return m_dataset_org_isSet;
}

bool OAIDataSetImportItem_dataSet::is_dataset_org_Valid() const{
    return m_dataset_org_isValid;
}

OAIDataSet_recordLength OAIDataSetImportItem_dataSet::getRecordLength() const {
    return m_record_length;
}
void OAIDataSetImportItem_dataSet::setRecordLength(const OAIDataSet_recordLength &record_length) {
    m_record_length = record_length;
    m_record_length_isSet = true;
}

bool OAIDataSetImportItem_dataSet::is_record_length_Set() const{
    return m_record_length_isSet;
}

bool OAIDataSetImportItem_dataSet::is_record_length_Valid() const{
    return m_record_length_isValid;
}

QString OAIDataSetImportItem_dataSet::getRelativePath() const {
    return m_relative_path;
}
void OAIDataSetImportItem_dataSet::setRelativePath(const QString &relative_path) {
    m_relative_path = relative_path;
    m_relative_path_isSet = true;
}

bool OAIDataSetImportItem_dataSet::is_relative_path_Set() const{
    return m_relative_path_isSet;
}

bool OAIDataSetImportItem_dataSet::is_relative_path_Valid() const{
    return m_relative_path_isValid;
}

QString OAIDataSetImportItem_dataSet::getStorageType() const {
    return m_storage_type;
}
void OAIDataSetImportItem_dataSet::setStorageType(const QString &storage_type) {
    m_storage_type = storage_type;
    m_storage_type_isSet = true;
}

bool OAIDataSetImportItem_dataSet::is_storage_type_Set() const{
    return m_storage_type_isSet;
}

bool OAIDataSetImportItem_dataSet::is_storage_type_Valid() const{
    return m_storage_type_isValid;
}

bool OAIDataSetImportItem_dataSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_org.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_length.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSetImportItem_dataSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dataset_name_isValid && m_dataset_org_isValid && m_record_length_isValid && true;
}

} // namespace OpenAPI
