/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileBatchJobDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileBatchJobDefinition::OAIFileBatchJobDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileBatchJobDefinition::OAIFileBatchJobDefinition() {
    this->initializeModel();
}

OAIFileBatchJobDefinition::~OAIFileBatchJobDefinition() {}

void OAIFileBatchJobDefinition::initializeModel() {

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_folder_path_isSet = false;
    m_folder_path_isValid = false;
}

void OAIFileBatchJobDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileBatchJobDefinition::fromJsonObject(QJsonObject json) {

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("fileName")]);
    m_file_name_isSet = !json[QString("fileName")].isNull() && m_file_name_isValid;

    m_folder_path_isValid = ::OpenAPI::fromJsonValue(m_folder_path, json[QString("folderPath")]);
    m_folder_path_isSet = !json[QString("folderPath")].isNull() && m_folder_path_isValid;
}

QString OAIFileBatchJobDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileBatchJobDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_file_name_isSet) {
        obj.insert(QString("fileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_folder_path_isSet) {
        obj.insert(QString("folderPath"), ::OpenAPI::toJsonValue(m_folder_path));
    }
    return obj;
}

QString OAIFileBatchJobDefinition::getFileName() const {
    return m_file_name;
}
void OAIFileBatchJobDefinition::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIFileBatchJobDefinition::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIFileBatchJobDefinition::is_file_name_Valid() const{
    return m_file_name_isValid;
}

QString OAIFileBatchJobDefinition::getFolderPath() const {
    return m_folder_path;
}
void OAIFileBatchJobDefinition::setFolderPath(const QString &folder_path) {
    m_folder_path = folder_path;
    m_folder_path_isSet = true;
}

bool OAIFileBatchJobDefinition::is_folder_path_Set() const{
    return m_folder_path_isSet;
}

bool OAIFileBatchJobDefinition::is_folder_path_Valid() const{
    return m_folder_path_isValid;
}

bool OAIFileBatchJobDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileBatchJobDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_name_isValid && true;
}

} // namespace OpenAPI
