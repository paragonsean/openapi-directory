/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDataSetImportTaskRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDataSetImportTaskRequest::OAICreateDataSetImportTaskRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDataSetImportTaskRequest::OAICreateDataSetImportTaskRequest() {
    this->initializeModel();
}

OAICreateDataSetImportTaskRequest::~OAICreateDataSetImportTaskRequest() {}

void OAICreateDataSetImportTaskRequest::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_import_config_isSet = false;
    m_import_config_isValid = false;
}

void OAICreateDataSetImportTaskRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDataSetImportTaskRequest::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_import_config_isValid = ::OpenAPI::fromJsonValue(m_import_config, json[QString("importConfig")]);
    m_import_config_isSet = !json[QString("importConfig")].isNull() && m_import_config_isValid;
}

QString OAICreateDataSetImportTaskRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDataSetImportTaskRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_import_config.isSet()) {
        obj.insert(QString("importConfig"), ::OpenAPI::toJsonValue(m_import_config));
    }
    return obj;
}

QString OAICreateDataSetImportTaskRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateDataSetImportTaskRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateDataSetImportTaskRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateDataSetImportTaskRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAICreateDataSetImportTaskRequest_importConfig OAICreateDataSetImportTaskRequest::getImportConfig() const {
    return m_import_config;
}
void OAICreateDataSetImportTaskRequest::setImportConfig(const OAICreateDataSetImportTaskRequest_importConfig &import_config) {
    m_import_config = import_config;
    m_import_config_isSet = true;
}

bool OAICreateDataSetImportTaskRequest::is_import_config_Set() const{
    return m_import_config_isSet;
}

bool OAICreateDataSetImportTaskRequest::is_import_config_Valid() const{
    return m_import_config_isValid;
}

bool OAICreateDataSetImportTaskRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDataSetImportTaskRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_import_config_isValid && true;
}

} // namespace OpenAPI
