/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateEnvironment_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateEnvironment_request::OAICreateEnvironment_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateEnvironment_request::OAICreateEnvironment_request() {
    this->initializeModel();
}

OAICreateEnvironment_request::~OAICreateEnvironment_request() {}

void OAICreateEnvironment_request::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_engine_type_isSet = false;
    m_engine_type_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_high_availability_config_isSet = false;
    m_high_availability_config_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_preferred_maintenance_window_isSet = false;
    m_preferred_maintenance_window_isValid = false;

    m_publicly_accessible_isSet = false;
    m_publicly_accessible_isValid = false;

    m_security_group_ids_isSet = false;
    m_security_group_ids_isValid = false;

    m_storage_configurations_isSet = false;
    m_storage_configurations_isValid = false;

    m_subnet_ids_isSet = false;
    m_subnet_ids_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateEnvironment_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateEnvironment_request::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_engine_type_isValid = ::OpenAPI::fromJsonValue(m_engine_type, json[QString("engineType")]);
    m_engine_type_isSet = !json[QString("engineType")].isNull() && m_engine_type_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("engineVersion")]);
    m_engine_version_isSet = !json[QString("engineVersion")].isNull() && m_engine_version_isValid;

    m_high_availability_config_isValid = ::OpenAPI::fromJsonValue(m_high_availability_config, json[QString("highAvailabilityConfig")]);
    m_high_availability_config_isSet = !json[QString("highAvailabilityConfig")].isNull() && m_high_availability_config_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("kmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("kmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_preferred_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_preferred_maintenance_window, json[QString("preferredMaintenanceWindow")]);
    m_preferred_maintenance_window_isSet = !json[QString("preferredMaintenanceWindow")].isNull() && m_preferred_maintenance_window_isValid;

    m_publicly_accessible_isValid = ::OpenAPI::fromJsonValue(m_publicly_accessible, json[QString("publiclyAccessible")]);
    m_publicly_accessible_isSet = !json[QString("publiclyAccessible")].isNull() && m_publicly_accessible_isValid;

    m_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_security_group_ids, json[QString("securityGroupIds")]);
    m_security_group_ids_isSet = !json[QString("securityGroupIds")].isNull() && m_security_group_ids_isValid;

    m_storage_configurations_isValid = ::OpenAPI::fromJsonValue(m_storage_configurations, json[QString("storageConfigurations")]);
    m_storage_configurations_isSet = !json[QString("storageConfigurations")].isNull() && m_storage_configurations_isValid;

    m_subnet_ids_isValid = ::OpenAPI::fromJsonValue(m_subnet_ids, json[QString("subnetIds")]);
    m_subnet_ids_isSet = !json[QString("subnetIds")].isNull() && m_subnet_ids_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateEnvironment_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateEnvironment_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_engine_type_isSet) {
        obj.insert(QString("engineType"), ::OpenAPI::toJsonValue(m_engine_type));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("engineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_high_availability_config.isSet()) {
        obj.insert(QString("highAvailabilityConfig"), ::OpenAPI::toJsonValue(m_high_availability_config));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("kmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_preferred_maintenance_window_isSet) {
        obj.insert(QString("preferredMaintenanceWindow"), ::OpenAPI::toJsonValue(m_preferred_maintenance_window));
    }
    if (m_publicly_accessible_isSet) {
        obj.insert(QString("publiclyAccessible"), ::OpenAPI::toJsonValue(m_publicly_accessible));
    }
    if (m_security_group_ids.size() > 0) {
        obj.insert(QString("securityGroupIds"), ::OpenAPI::toJsonValue(m_security_group_ids));
    }
    if (m_storage_configurations.size() > 0) {
        obj.insert(QString("storageConfigurations"), ::OpenAPI::toJsonValue(m_storage_configurations));
    }
    if (m_subnet_ids.size() > 0) {
        obj.insert(QString("subnetIds"), ::OpenAPI::toJsonValue(m_subnet_ids));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateEnvironment_request::getClientToken() const {
    return m_client_token;
}
void OAICreateEnvironment_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateEnvironment_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateEnvironment_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateEnvironment_request::getDescription() const {
    return m_description;
}
void OAICreateEnvironment_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateEnvironment_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateEnvironment_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateEnvironment_request::getEngineType() const {
    return m_engine_type;
}
void OAICreateEnvironment_request::setEngineType(const QString &engine_type) {
    m_engine_type = engine_type;
    m_engine_type_isSet = true;
}

bool OAICreateEnvironment_request::is_engine_type_Set() const{
    return m_engine_type_isSet;
}

bool OAICreateEnvironment_request::is_engine_type_Valid() const{
    return m_engine_type_isValid;
}

QString OAICreateEnvironment_request::getEngineVersion() const {
    return m_engine_version;
}
void OAICreateEnvironment_request::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAICreateEnvironment_request::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAICreateEnvironment_request::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

OAICreateEnvironment_request_highAvailabilityConfig OAICreateEnvironment_request::getHighAvailabilityConfig() const {
    return m_high_availability_config;
}
void OAICreateEnvironment_request::setHighAvailabilityConfig(const OAICreateEnvironment_request_highAvailabilityConfig &high_availability_config) {
    m_high_availability_config = high_availability_config;
    m_high_availability_config_isSet = true;
}

bool OAICreateEnvironment_request::is_high_availability_config_Set() const{
    return m_high_availability_config_isSet;
}

bool OAICreateEnvironment_request::is_high_availability_config_Valid() const{
    return m_high_availability_config_isValid;
}

QString OAICreateEnvironment_request::getInstanceType() const {
    return m_instance_type;
}
void OAICreateEnvironment_request::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAICreateEnvironment_request::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAICreateEnvironment_request::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QString OAICreateEnvironment_request::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAICreateEnvironment_request::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAICreateEnvironment_request::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAICreateEnvironment_request::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

QString OAICreateEnvironment_request::getName() const {
    return m_name;
}
void OAICreateEnvironment_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateEnvironment_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateEnvironment_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateEnvironment_request::getPreferredMaintenanceWindow() const {
    return m_preferred_maintenance_window;
}
void OAICreateEnvironment_request::setPreferredMaintenanceWindow(const QString &preferred_maintenance_window) {
    m_preferred_maintenance_window = preferred_maintenance_window;
    m_preferred_maintenance_window_isSet = true;
}

bool OAICreateEnvironment_request::is_preferred_maintenance_window_Set() const{
    return m_preferred_maintenance_window_isSet;
}

bool OAICreateEnvironment_request::is_preferred_maintenance_window_Valid() const{
    return m_preferred_maintenance_window_isValid;
}

bool OAICreateEnvironment_request::isPubliclyAccessible() const {
    return m_publicly_accessible;
}
void OAICreateEnvironment_request::setPubliclyAccessible(const bool &publicly_accessible) {
    m_publicly_accessible = publicly_accessible;
    m_publicly_accessible_isSet = true;
}

bool OAICreateEnvironment_request::is_publicly_accessible_Set() const{
    return m_publicly_accessible_isSet;
}

bool OAICreateEnvironment_request::is_publicly_accessible_Valid() const{
    return m_publicly_accessible_isValid;
}

QList<QString> OAICreateEnvironment_request::getSecurityGroupIds() const {
    return m_security_group_ids;
}
void OAICreateEnvironment_request::setSecurityGroupIds(const QList<QString> &security_group_ids) {
    m_security_group_ids = security_group_ids;
    m_security_group_ids_isSet = true;
}

bool OAICreateEnvironment_request::is_security_group_ids_Set() const{
    return m_security_group_ids_isSet;
}

bool OAICreateEnvironment_request::is_security_group_ids_Valid() const{
    return m_security_group_ids_isValid;
}

QList<OAIStorageConfiguration> OAICreateEnvironment_request::getStorageConfigurations() const {
    return m_storage_configurations;
}
void OAICreateEnvironment_request::setStorageConfigurations(const QList<OAIStorageConfiguration> &storage_configurations) {
    m_storage_configurations = storage_configurations;
    m_storage_configurations_isSet = true;
}

bool OAICreateEnvironment_request::is_storage_configurations_Set() const{
    return m_storage_configurations_isSet;
}

bool OAICreateEnvironment_request::is_storage_configurations_Valid() const{
    return m_storage_configurations_isValid;
}

QList<QString> OAICreateEnvironment_request::getSubnetIds() const {
    return m_subnet_ids;
}
void OAICreateEnvironment_request::setSubnetIds(const QList<QString> &subnet_ids) {
    m_subnet_ids = subnet_ids;
    m_subnet_ids_isSet = true;
}

bool OAICreateEnvironment_request::is_subnet_ids_Set() const{
    return m_subnet_ids_isSet;
}

bool OAICreateEnvironment_request::is_subnet_ids_Valid() const{
    return m_subnet_ids_isValid;
}

QMap<QString, QString> OAICreateEnvironment_request::getTags() const {
    return m_tags;
}
void OAICreateEnvironment_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateEnvironment_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateEnvironment_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateEnvironment_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_availability_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_maintenance_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publicly_accessible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateEnvironment_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_engine_type_isValid && m_instance_type_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
