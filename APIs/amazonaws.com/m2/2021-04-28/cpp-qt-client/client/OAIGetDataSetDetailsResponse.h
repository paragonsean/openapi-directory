/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetDataSetDetailsResponse.h
 *
 * 
 */

#ifndef OAIGetDataSetDetailsResponse_H
#define OAIGetDataSetDetailsResponse_H

#include <QJsonObject>

#include "OAIGetDataSetDetailsResponse_dataSetOrg.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetDataSetDetailsResponse_dataSetOrg;

class OAIGetDataSetDetailsResponse : public OAIObject {
public:
    OAIGetDataSetDetailsResponse();
    OAIGetDataSetDetailsResponse(QString json);
    ~OAIGetDataSetDetailsResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBlocksize() const;
    void setBlocksize(const qint32 &blocksize);
    bool is_blocksize_Set() const;
    bool is_blocksize_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    QString getDataSetName() const;
    void setDataSetName(const QString &data_set_name);
    bool is_data_set_name_Set() const;
    bool is_data_set_name_Valid() const;

    OAIGetDataSetDetailsResponse_dataSetOrg getDataSetOrg() const;
    void setDataSetOrg(const OAIGetDataSetDetailsResponse_dataSetOrg &data_set_org);
    bool is_data_set_org_Set() const;
    bool is_data_set_org_Valid() const;

    QDateTime getLastReferencedTime() const;
    void setLastReferencedTime(const QDateTime &last_referenced_time);
    bool is_last_referenced_time_Set() const;
    bool is_last_referenced_time_Valid() const;

    QDateTime getLastUpdatedTime() const;
    void setLastUpdatedTime(const QDateTime &last_updated_time);
    bool is_last_updated_time_Set() const;
    bool is_last_updated_time_Valid() const;

    QString getLocation() const;
    void setLocation(const QString &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    qint32 getRecordLength() const;
    void setRecordLength(const qint32 &record_length);
    bool is_record_length_Set() const;
    bool is_record_length_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_blocksize;
    bool m_blocksize_isSet;
    bool m_blocksize_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    QString m_data_set_name;
    bool m_data_set_name_isSet;
    bool m_data_set_name_isValid;

    OAIGetDataSetDetailsResponse_dataSetOrg m_data_set_org;
    bool m_data_set_org_isSet;
    bool m_data_set_org_isValid;

    QDateTime m_last_referenced_time;
    bool m_last_referenced_time_isSet;
    bool m_last_referenced_time_isValid;

    QDateTime m_last_updated_time;
    bool m_last_updated_time_isSet;
    bool m_last_updated_time_isValid;

    QString m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    qint32 m_record_length;
    bool m_record_length_isSet;
    bool m_record_length_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetDataSetDetailsResponse)

#endif // OAIGetDataSetDetailsResponse_H
