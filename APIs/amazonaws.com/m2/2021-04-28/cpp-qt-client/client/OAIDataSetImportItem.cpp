/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSetImportItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSetImportItem::OAIDataSetImportItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSetImportItem::OAIDataSetImportItem() {
    this->initializeModel();
}

OAIDataSetImportItem::~OAIDataSetImportItem() {}

void OAIDataSetImportItem::initializeModel() {

    m_data_set_isSet = false;
    m_data_set_isValid = false;

    m_external_location_isSet = false;
    m_external_location_isValid = false;
}

void OAIDataSetImportItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSetImportItem::fromJsonObject(QJsonObject json) {

    m_data_set_isValid = ::OpenAPI::fromJsonValue(m_data_set, json[QString("dataSet")]);
    m_data_set_isSet = !json[QString("dataSet")].isNull() && m_data_set_isValid;

    m_external_location_isValid = ::OpenAPI::fromJsonValue(m_external_location, json[QString("externalLocation")]);
    m_external_location_isSet = !json[QString("externalLocation")].isNull() && m_external_location_isValid;
}

QString OAIDataSetImportItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSetImportItem::asJsonObject() const {
    QJsonObject obj;
    if (m_data_set.isSet()) {
        obj.insert(QString("dataSet"), ::OpenAPI::toJsonValue(m_data_set));
    }
    if (m_external_location.isSet()) {
        obj.insert(QString("externalLocation"), ::OpenAPI::toJsonValue(m_external_location));
    }
    return obj;
}

OAIDataSetImportItem_dataSet OAIDataSetImportItem::getDataSet() const {
    return m_data_set;
}
void OAIDataSetImportItem::setDataSet(const OAIDataSetImportItem_dataSet &data_set) {
    m_data_set = data_set;
    m_data_set_isSet = true;
}

bool OAIDataSetImportItem::is_data_set_Set() const{
    return m_data_set_isSet;
}

bool OAIDataSetImportItem::is_data_set_Valid() const{
    return m_data_set_isValid;
}

OAIDataSetImportItem_externalLocation OAIDataSetImportItem::getExternalLocation() const {
    return m_external_location;
}
void OAIDataSetImportItem::setExternalLocation(const OAIDataSetImportItem_externalLocation &external_location) {
    m_external_location = external_location;
    m_external_location_isSet = true;
}

bool OAIDataSetImportItem::is_external_location_Set() const{
    return m_external_location_isSet;
}

bool OAIDataSetImportItem::is_external_location_Valid() const{
    return m_external_location_isValid;
}

bool OAIDataSetImportItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_location.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSetImportItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_set_isValid && m_external_location_isValid && true;
}

} // namespace OpenAPI
