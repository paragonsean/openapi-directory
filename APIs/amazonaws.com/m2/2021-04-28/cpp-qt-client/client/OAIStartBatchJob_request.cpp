/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartBatchJob_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartBatchJob_request::OAIStartBatchJob_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartBatchJob_request::OAIStartBatchJob_request() {
    this->initializeModel();
}

OAIStartBatchJob_request::~OAIStartBatchJob_request() {}

void OAIStartBatchJob_request::initializeModel() {

    m_batch_job_identifier_isSet = false;
    m_batch_job_identifier_isValid = false;

    m_job_params_isSet = false;
    m_job_params_isValid = false;
}

void OAIStartBatchJob_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartBatchJob_request::fromJsonObject(QJsonObject json) {

    m_batch_job_identifier_isValid = ::OpenAPI::fromJsonValue(m_batch_job_identifier, json[QString("batchJobIdentifier")]);
    m_batch_job_identifier_isSet = !json[QString("batchJobIdentifier")].isNull() && m_batch_job_identifier_isValid;

    m_job_params_isValid = ::OpenAPI::fromJsonValue(m_job_params, json[QString("jobParams")]);
    m_job_params_isSet = !json[QString("jobParams")].isNull() && m_job_params_isValid;
}

QString OAIStartBatchJob_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartBatchJob_request::asJsonObject() const {
    QJsonObject obj;
    if (m_batch_job_identifier.isSet()) {
        obj.insert(QString("batchJobIdentifier"), ::OpenAPI::toJsonValue(m_batch_job_identifier));
    }
    if (m_job_params.size() > 0) {
        obj.insert(QString("jobParams"), ::OpenAPI::toJsonValue(m_job_params));
    }
    return obj;
}

OAIStartBatchJob_request_batchJobIdentifier OAIStartBatchJob_request::getBatchJobIdentifier() const {
    return m_batch_job_identifier;
}
void OAIStartBatchJob_request::setBatchJobIdentifier(const OAIStartBatchJob_request_batchJobIdentifier &batch_job_identifier) {
    m_batch_job_identifier = batch_job_identifier;
    m_batch_job_identifier_isSet = true;
}

bool OAIStartBatchJob_request::is_batch_job_identifier_Set() const{
    return m_batch_job_identifier_isSet;
}

bool OAIStartBatchJob_request::is_batch_job_identifier_Valid() const{
    return m_batch_job_identifier_isValid;
}

QMap<QString, QString> OAIStartBatchJob_request::getJobParams() const {
    return m_job_params;
}
void OAIStartBatchJob_request::setJobParams(const QMap<QString, QString> &job_params) {
    m_job_params = job_params;
    m_job_params_isSet = true;
}

bool OAIStartBatchJob_request::is_job_params_Set() const{
    return m_job_params_isSet;
}

bool OAIStartBatchJob_request::is_job_params_Valid() const{
    return m_job_params_isValid;
}

bool OAIStartBatchJob_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_batch_job_identifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartBatchJob_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_batch_job_identifier_isValid && true;
}

} // namespace OpenAPI
