/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetBatchJobExecutionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetBatchJobExecutionResponse::OAIGetBatchJobExecutionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetBatchJobExecutionResponse::OAIGetBatchJobExecutionResponse() {
    this->initializeModel();
}

OAIGetBatchJobExecutionResponse::~OAIGetBatchJobExecutionResponse() {}

void OAIGetBatchJobExecutionResponse::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_batch_job_identifier_isSet = false;
    m_batch_job_identifier_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_execution_id_isSet = false;
    m_execution_id_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_job_type_isSet = false;
    m_job_type_isValid = false;

    m_job_user_isSet = false;
    m_job_user_isValid = false;

    m_return_code_isSet = false;
    m_return_code_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;
}

void OAIGetBatchJobExecutionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetBatchJobExecutionResponse::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("applicationId")]);
    m_application_id_isSet = !json[QString("applicationId")].isNull() && m_application_id_isValid;

    m_batch_job_identifier_isValid = ::OpenAPI::fromJsonValue(m_batch_job_identifier, json[QString("batchJobIdentifier")]);
    m_batch_job_identifier_isSet = !json[QString("batchJobIdentifier")].isNull() && m_batch_job_identifier_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_execution_id_isValid = ::OpenAPI::fromJsonValue(m_execution_id, json[QString("executionId")]);
    m_execution_id_isSet = !json[QString("executionId")].isNull() && m_execution_id_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("jobName")]);
    m_job_name_isSet = !json[QString("jobName")].isNull() && m_job_name_isValid;

    m_job_type_isValid = ::OpenAPI::fromJsonValue(m_job_type, json[QString("jobType")]);
    m_job_type_isSet = !json[QString("jobType")].isNull() && m_job_type_isValid;

    m_job_user_isValid = ::OpenAPI::fromJsonValue(m_job_user, json[QString("jobUser")]);
    m_job_user_isSet = !json[QString("jobUser")].isNull() && m_job_user_isValid;

    m_return_code_isValid = ::OpenAPI::fromJsonValue(m_return_code, json[QString("returnCode")]);
    m_return_code_isSet = !json[QString("returnCode")].isNull() && m_return_code_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("statusReason")]);
    m_status_reason_isSet = !json[QString("statusReason")].isNull() && m_status_reason_isValid;
}

QString OAIGetBatchJobExecutionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetBatchJobExecutionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("applicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_batch_job_identifier.isSet()) {
        obj.insert(QString("batchJobIdentifier"), ::OpenAPI::toJsonValue(m_batch_job_identifier));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_execution_id_isSet) {
        obj.insert(QString("executionId"), ::OpenAPI::toJsonValue(m_execution_id));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_job_name_isSet) {
        obj.insert(QString("jobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_job_type.isSet()) {
        obj.insert(QString("jobType"), ::OpenAPI::toJsonValue(m_job_type));
    }
    if (m_job_user_isSet) {
        obj.insert(QString("jobUser"), ::OpenAPI::toJsonValue(m_job_user));
    }
    if (m_return_code_isSet) {
        obj.insert(QString("returnCode"), ::OpenAPI::toJsonValue(m_return_code));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_reason_isSet) {
        obj.insert(QString("statusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    return obj;
}

QString OAIGetBatchJobExecutionResponse::getApplicationId() const {
    return m_application_id;
}
void OAIGetBatchJobExecutionResponse::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIGetBatchJobExecutionResponse::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIGetBatchJobExecutionResponse::is_application_id_Valid() const{
    return m_application_id_isValid;
}

OAIGetBatchJobExecutionResponse_batchJobIdentifier OAIGetBatchJobExecutionResponse::getBatchJobIdentifier() const {
    return m_batch_job_identifier;
}
void OAIGetBatchJobExecutionResponse::setBatchJobIdentifier(const OAIGetBatchJobExecutionResponse_batchJobIdentifier &batch_job_identifier) {
    m_batch_job_identifier = batch_job_identifier;
    m_batch_job_identifier_isSet = true;
}

bool OAIGetBatchJobExecutionResponse::is_batch_job_identifier_Set() const{
    return m_batch_job_identifier_isSet;
}

bool OAIGetBatchJobExecutionResponse::is_batch_job_identifier_Valid() const{
    return m_batch_job_identifier_isValid;
}

QDateTime OAIGetBatchJobExecutionResponse::getEndTime() const {
    return m_end_time;
}
void OAIGetBatchJobExecutionResponse::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIGetBatchJobExecutionResponse::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIGetBatchJobExecutionResponse::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIGetBatchJobExecutionResponse::getExecutionId() const {
    return m_execution_id;
}
void OAIGetBatchJobExecutionResponse::setExecutionId(const QString &execution_id) {
    m_execution_id = execution_id;
    m_execution_id_isSet = true;
}

bool OAIGetBatchJobExecutionResponse::is_execution_id_Set() const{
    return m_execution_id_isSet;
}

bool OAIGetBatchJobExecutionResponse::is_execution_id_Valid() const{
    return m_execution_id_isValid;
}

QString OAIGetBatchJobExecutionResponse::getJobId() const {
    return m_job_id;
}
void OAIGetBatchJobExecutionResponse::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIGetBatchJobExecutionResponse::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIGetBatchJobExecutionResponse::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIGetBatchJobExecutionResponse::getJobName() const {
    return m_job_name;
}
void OAIGetBatchJobExecutionResponse::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAIGetBatchJobExecutionResponse::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAIGetBatchJobExecutionResponse::is_job_name_Valid() const{
    return m_job_name_isValid;
}

OAIBatchJobType OAIGetBatchJobExecutionResponse::getJobType() const {
    return m_job_type;
}
void OAIGetBatchJobExecutionResponse::setJobType(const OAIBatchJobType &job_type) {
    m_job_type = job_type;
    m_job_type_isSet = true;
}

bool OAIGetBatchJobExecutionResponse::is_job_type_Set() const{
    return m_job_type_isSet;
}

bool OAIGetBatchJobExecutionResponse::is_job_type_Valid() const{
    return m_job_type_isValid;
}

QString OAIGetBatchJobExecutionResponse::getJobUser() const {
    return m_job_user;
}
void OAIGetBatchJobExecutionResponse::setJobUser(const QString &job_user) {
    m_job_user = job_user;
    m_job_user_isSet = true;
}

bool OAIGetBatchJobExecutionResponse::is_job_user_Set() const{
    return m_job_user_isSet;
}

bool OAIGetBatchJobExecutionResponse::is_job_user_Valid() const{
    return m_job_user_isValid;
}

QString OAIGetBatchJobExecutionResponse::getReturnCode() const {
    return m_return_code;
}
void OAIGetBatchJobExecutionResponse::setReturnCode(const QString &return_code) {
    m_return_code = return_code;
    m_return_code_isSet = true;
}

bool OAIGetBatchJobExecutionResponse::is_return_code_Set() const{
    return m_return_code_isSet;
}

bool OAIGetBatchJobExecutionResponse::is_return_code_Valid() const{
    return m_return_code_isValid;
}

QDateTime OAIGetBatchJobExecutionResponse::getStartTime() const {
    return m_start_time;
}
void OAIGetBatchJobExecutionResponse::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGetBatchJobExecutionResponse::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGetBatchJobExecutionResponse::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAIBatchJobExecutionStatus OAIGetBatchJobExecutionResponse::getStatus() const {
    return m_status;
}
void OAIGetBatchJobExecutionResponse::setStatus(const OAIBatchJobExecutionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetBatchJobExecutionResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetBatchJobExecutionResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetBatchJobExecutionResponse::getStatusReason() const {
    return m_status_reason;
}
void OAIGetBatchJobExecutionResponse::setStatusReason(const QString &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAIGetBatchJobExecutionResponse::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAIGetBatchJobExecutionResponse::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

bool OAIGetBatchJobExecutionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_job_identifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetBatchJobExecutionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_id_isValid && m_execution_id_isValid && m_start_time_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
