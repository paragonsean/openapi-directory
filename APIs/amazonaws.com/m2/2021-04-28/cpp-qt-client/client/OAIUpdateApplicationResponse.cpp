/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateApplicationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateApplicationResponse::OAIUpdateApplicationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateApplicationResponse::OAIUpdateApplicationResponse() {
    this->initializeModel();
}

OAIUpdateApplicationResponse::~OAIUpdateApplicationResponse() {}

void OAIUpdateApplicationResponse::initializeModel() {

    m_application_version_isSet = false;
    m_application_version_isValid = false;
}

void OAIUpdateApplicationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateApplicationResponse::fromJsonObject(QJsonObject json) {

    m_application_version_isValid = ::OpenAPI::fromJsonValue(m_application_version, json[QString("applicationVersion")]);
    m_application_version_isSet = !json[QString("applicationVersion")].isNull() && m_application_version_isValid;
}

QString OAIUpdateApplicationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateApplicationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_application_version_isSet) {
        obj.insert(QString("applicationVersion"), ::OpenAPI::toJsonValue(m_application_version));
    }
    return obj;
}

qint32 OAIUpdateApplicationResponse::getApplicationVersion() const {
    return m_application_version;
}
void OAIUpdateApplicationResponse::setApplicationVersion(const qint32 &application_version) {
    m_application_version = application_version;
    m_application_version_isSet = true;
}

bool OAIUpdateApplicationResponse::is_application_version_Set() const{
    return m_application_version_isSet;
}

bool OAIUpdateApplicationResponse::is_application_version_Valid() const{
    return m_application_version_isValid;
}

bool OAIUpdateApplicationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateApplicationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_version_isValid && true;
}

} // namespace OpenAPI
