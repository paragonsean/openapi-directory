/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListApplicationVersionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListApplicationVersionsResponse::OAIListApplicationVersionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListApplicationVersionsResponse::OAIListApplicationVersionsResponse() {
    this->initializeModel();
}

OAIListApplicationVersionsResponse::~OAIListApplicationVersionsResponse() {}

void OAIListApplicationVersionsResponse::initializeModel() {

    m_application_versions_isSet = false;
    m_application_versions_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListApplicationVersionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListApplicationVersionsResponse::fromJsonObject(QJsonObject json) {

    m_application_versions_isValid = ::OpenAPI::fromJsonValue(m_application_versions, json[QString("applicationVersions")]);
    m_application_versions_isSet = !json[QString("applicationVersions")].isNull() && m_application_versions_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListApplicationVersionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListApplicationVersionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_application_versions.isSet()) {
        obj.insert(QString("applicationVersions"), ::OpenAPI::toJsonValue(m_application_versions));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListApplicationVersionsResponse::getApplicationVersions() const {
    return m_application_versions;
}
void OAIListApplicationVersionsResponse::setApplicationVersions(const QList &application_versions) {
    m_application_versions = application_versions;
    m_application_versions_isSet = true;
}

bool OAIListApplicationVersionsResponse::is_application_versions_Set() const{
    return m_application_versions_isSet;
}

bool OAIListApplicationVersionsResponse::is_application_versions_Valid() const{
    return m_application_versions_isValid;
}

QString OAIListApplicationVersionsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListApplicationVersionsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListApplicationVersionsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListApplicationVersionsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListApplicationVersionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_versions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListApplicationVersionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_versions_isValid && true;
}

} // namespace OpenAPI
