/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatasetOrgAttributes_ps.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatasetOrgAttributes_ps::OAIDatasetOrgAttributes_ps(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatasetOrgAttributes_ps::OAIDatasetOrgAttributes_ps() {
    this->initializeModel();
}

OAIDatasetOrgAttributes_ps::~OAIDatasetOrgAttributes_ps() {}

void OAIDatasetOrgAttributes_ps::initializeModel() {

    m_encoding_isSet = false;
    m_encoding_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;
}

void OAIDatasetOrgAttributes_ps::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatasetOrgAttributes_ps::fromJsonObject(QJsonObject json) {

    m_encoding_isValid = ::OpenAPI::fromJsonValue(m_encoding, json[QString("encoding")]);
    m_encoding_isSet = !json[QString("encoding")].isNull() && m_encoding_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;
}

QString OAIDatasetOrgAttributes_ps::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatasetOrgAttributes_ps::asJsonObject() const {
    QJsonObject obj;
    if (m_encoding_isSet) {
        obj.insert(QString("encoding"), ::OpenAPI::toJsonValue(m_encoding));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    return obj;
}

QString OAIDatasetOrgAttributes_ps::getEncoding() const {
    return m_encoding;
}
void OAIDatasetOrgAttributes_ps::setEncoding(const QString &encoding) {
    m_encoding = encoding;
    m_encoding_isSet = true;
}

bool OAIDatasetOrgAttributes_ps::is_encoding_Set() const{
    return m_encoding_isSet;
}

bool OAIDatasetOrgAttributes_ps::is_encoding_Valid() const{
    return m_encoding_isValid;
}

QString OAIDatasetOrgAttributes_ps::getFormat() const {
    return m_format;
}
void OAIDatasetOrgAttributes_ps::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIDatasetOrgAttributes_ps::is_format_Set() const{
    return m_format_isSet;
}

bool OAIDatasetOrgAttributes_ps::is_format_Valid() const{
    return m_format_isValid;
}

bool OAIDatasetOrgAttributes_ps::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatasetOrgAttributes_ps::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_format_isValid && true;
}

} // namespace OpenAPI
