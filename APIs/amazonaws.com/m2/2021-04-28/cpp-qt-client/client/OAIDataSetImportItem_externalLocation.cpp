/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSetImportItem_externalLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSetImportItem_externalLocation::OAIDataSetImportItem_externalLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSetImportItem_externalLocation::OAIDataSetImportItem_externalLocation() {
    this->initializeModel();
}

OAIDataSetImportItem_externalLocation::~OAIDataSetImportItem_externalLocation() {}

void OAIDataSetImportItem_externalLocation::initializeModel() {

    m_s3_location_isSet = false;
    m_s3_location_isValid = false;
}

void OAIDataSetImportItem_externalLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSetImportItem_externalLocation::fromJsonObject(QJsonObject json) {

    m_s3_location_isValid = ::OpenAPI::fromJsonValue(m_s3_location, json[QString("s3Location")]);
    m_s3_location_isSet = !json[QString("s3Location")].isNull() && m_s3_location_isValid;
}

QString OAIDataSetImportItem_externalLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSetImportItem_externalLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_location_isSet) {
        obj.insert(QString("s3Location"), ::OpenAPI::toJsonValue(m_s3_location));
    }
    return obj;
}

QString OAIDataSetImportItem_externalLocation::getS3Location() const {
    return m_s3_location;
}
void OAIDataSetImportItem_externalLocation::setS3Location(const QString &s3_location) {
    m_s3_location = s3_location;
    m_s3_location_isSet = true;
}

bool OAIDataSetImportItem_externalLocation::is_s3_location_Set() const{
    return m_s3_location_isSet;
}

bool OAIDataSetImportItem_externalLocation::is_s3_location_Valid() const{
    return m_s3_location_isValid;
}

bool OAIDataSetImportItem_externalLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_location_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSetImportItem_externalLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
