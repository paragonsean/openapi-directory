/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSignedBluinsightsUrlResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSignedBluinsightsUrlResponse::OAIGetSignedBluinsightsUrlResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSignedBluinsightsUrlResponse::OAIGetSignedBluinsightsUrlResponse() {
    this->initializeModel();
}

OAIGetSignedBluinsightsUrlResponse::~OAIGetSignedBluinsightsUrlResponse() {}

void OAIGetSignedBluinsightsUrlResponse::initializeModel() {

    m_signed_bi_url_isSet = false;
    m_signed_bi_url_isValid = false;
}

void OAIGetSignedBluinsightsUrlResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSignedBluinsightsUrlResponse::fromJsonObject(QJsonObject json) {

    m_signed_bi_url_isValid = ::OpenAPI::fromJsonValue(m_signed_bi_url, json[QString("signedBiUrl")]);
    m_signed_bi_url_isSet = !json[QString("signedBiUrl")].isNull() && m_signed_bi_url_isValid;
}

QString OAIGetSignedBluinsightsUrlResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSignedBluinsightsUrlResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_signed_bi_url_isSet) {
        obj.insert(QString("signedBiUrl"), ::OpenAPI::toJsonValue(m_signed_bi_url));
    }
    return obj;
}

QString OAIGetSignedBluinsightsUrlResponse::getSignedBiUrl() const {
    return m_signed_bi_url;
}
void OAIGetSignedBluinsightsUrlResponse::setSignedBiUrl(const QString &signed_bi_url) {
    m_signed_bi_url = signed_bi_url;
    m_signed_bi_url_isSet = true;
}

bool OAIGetSignedBluinsightsUrlResponse::is_signed_bi_url_Set() const{
    return m_signed_bi_url_isSet;
}

bool OAIGetSignedBluinsightsUrlResponse::is_signed_bi_url_Valid() const{
    return m_signed_bi_url_isValid;
}

bool OAIGetSignedBluinsightsUrlResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_signed_bi_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSignedBluinsightsUrlResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_signed_bi_url_isValid && true;
}

} // namespace OpenAPI
