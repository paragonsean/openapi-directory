/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPendingMaintenance_schedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPendingMaintenance_schedule::OAIPendingMaintenance_schedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPendingMaintenance_schedule::OAIPendingMaintenance_schedule() {
    this->initializeModel();
}

OAIPendingMaintenance_schedule::~OAIPendingMaintenance_schedule() {}

void OAIPendingMaintenance_schedule::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIPendingMaintenance_schedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPendingMaintenance_schedule::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIPendingMaintenance_schedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPendingMaintenance_schedule::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QDateTime OAIPendingMaintenance_schedule::getEndTime() const {
    return m_end_time;
}
void OAIPendingMaintenance_schedule::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIPendingMaintenance_schedule::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIPendingMaintenance_schedule::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QDateTime OAIPendingMaintenance_schedule::getStartTime() const {
    return m_start_time;
}
void OAIPendingMaintenance_schedule::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIPendingMaintenance_schedule::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIPendingMaintenance_schedule::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIPendingMaintenance_schedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPendingMaintenance_schedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
