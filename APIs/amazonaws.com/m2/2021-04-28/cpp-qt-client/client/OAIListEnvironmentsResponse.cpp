/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListEnvironmentsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListEnvironmentsResponse::OAIListEnvironmentsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListEnvironmentsResponse::OAIListEnvironmentsResponse() {
    this->initializeModel();
}

OAIListEnvironmentsResponse::~OAIListEnvironmentsResponse() {}

void OAIListEnvironmentsResponse::initializeModel() {

    m_environments_isSet = false;
    m_environments_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListEnvironmentsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListEnvironmentsResponse::fromJsonObject(QJsonObject json) {

    m_environments_isValid = ::OpenAPI::fromJsonValue(m_environments, json[QString("environments")]);
    m_environments_isSet = !json[QString("environments")].isNull() && m_environments_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListEnvironmentsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListEnvironmentsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_environments.isSet()) {
        obj.insert(QString("environments"), ::OpenAPI::toJsonValue(m_environments));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListEnvironmentsResponse::getEnvironments() const {
    return m_environments;
}
void OAIListEnvironmentsResponse::setEnvironments(const QList &environments) {
    m_environments = environments;
    m_environments_isSet = true;
}

bool OAIListEnvironmentsResponse::is_environments_Set() const{
    return m_environments_isSet;
}

bool OAIListEnvironmentsResponse::is_environments_Valid() const{
    return m_environments_isValid;
}

QString OAIListEnvironmentsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListEnvironmentsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListEnvironmentsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListEnvironmentsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListEnvironmentsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_environments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListEnvironmentsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_environments_isValid && true;
}

} // namespace OpenAPI
