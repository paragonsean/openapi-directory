/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDataSetImportTaskResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDataSetImportTaskResponse::OAIGetDataSetImportTaskResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDataSetImportTaskResponse::OAIGetDataSetImportTaskResponse() {
    this->initializeModel();
}

OAIGetDataSetImportTaskResponse::~OAIGetDataSetImportTaskResponse() {}

void OAIGetDataSetImportTaskResponse::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_task_id_isSet = false;
    m_task_id_isValid = false;
}

void OAIGetDataSetImportTaskResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDataSetImportTaskResponse::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_task_id_isValid = ::OpenAPI::fromJsonValue(m_task_id, json[QString("taskId")]);
    m_task_id_isSet = !json[QString("taskId")].isNull() && m_task_id_isValid;
}

QString OAIGetDataSetImportTaskResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDataSetImportTaskResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_summary.isSet()) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_task_id_isSet) {
        obj.insert(QString("taskId"), ::OpenAPI::toJsonValue(m_task_id));
    }
    return obj;
}

OAIDataSetTaskLifecycle OAIGetDataSetImportTaskResponse::getStatus() const {
    return m_status;
}
void OAIGetDataSetImportTaskResponse::setStatus(const OAIDataSetTaskLifecycle &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetDataSetImportTaskResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetDataSetImportTaskResponse::is_status_Valid() const{
    return m_status_isValid;
}

OAIGetDataSetImportTaskResponse_summary OAIGetDataSetImportTaskResponse::getSummary() const {
    return m_summary;
}
void OAIGetDataSetImportTaskResponse::setSummary(const OAIGetDataSetImportTaskResponse_summary &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIGetDataSetImportTaskResponse::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIGetDataSetImportTaskResponse::is_summary_Valid() const{
    return m_summary_isValid;
}

QString OAIGetDataSetImportTaskResponse::getTaskId() const {
    return m_task_id;
}
void OAIGetDataSetImportTaskResponse::setTaskId(const QString &task_id) {
    m_task_id = task_id;
    m_task_id_isSet = true;
}

bool OAIGetDataSetImportTaskResponse::is_task_id_Set() const{
    return m_task_id_isSet;
}

bool OAIGetDataSetImportTaskResponse::is_task_id_Valid() const{
    return m_task_id_isValid;
}

bool OAIGetDataSetImportTaskResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDataSetImportTaskResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && m_task_id_isValid && true;
}

} // namespace OpenAPI
