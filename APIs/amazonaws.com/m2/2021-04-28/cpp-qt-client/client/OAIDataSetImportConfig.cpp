/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSetImportConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSetImportConfig::OAIDataSetImportConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSetImportConfig::OAIDataSetImportConfig() {
    this->initializeModel();
}

OAIDataSetImportConfig::~OAIDataSetImportConfig() {}

void OAIDataSetImportConfig::initializeModel() {

    m_data_sets_isSet = false;
    m_data_sets_isValid = false;

    m_s3_location_isSet = false;
    m_s3_location_isValid = false;
}

void OAIDataSetImportConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSetImportConfig::fromJsonObject(QJsonObject json) {

    m_data_sets_isValid = ::OpenAPI::fromJsonValue(m_data_sets, json[QString("dataSets")]);
    m_data_sets_isSet = !json[QString("dataSets")].isNull() && m_data_sets_isValid;

    m_s3_location_isValid = ::OpenAPI::fromJsonValue(m_s3_location, json[QString("s3Location")]);
    m_s3_location_isSet = !json[QString("s3Location")].isNull() && m_s3_location_isValid;
}

QString OAIDataSetImportConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSetImportConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_data_sets.isSet()) {
        obj.insert(QString("dataSets"), ::OpenAPI::toJsonValue(m_data_sets));
    }
    if (m_s3_location_isSet) {
        obj.insert(QString("s3Location"), ::OpenAPI::toJsonValue(m_s3_location));
    }
    return obj;
}

QList OAIDataSetImportConfig::getDataSets() const {
    return m_data_sets;
}
void OAIDataSetImportConfig::setDataSets(const QList &data_sets) {
    m_data_sets = data_sets;
    m_data_sets_isSet = true;
}

bool OAIDataSetImportConfig::is_data_sets_Set() const{
    return m_data_sets_isSet;
}

bool OAIDataSetImportConfig::is_data_sets_Valid() const{
    return m_data_sets_isValid;
}

QString OAIDataSetImportConfig::getS3Location() const {
    return m_s3_location;
}
void OAIDataSetImportConfig::setS3Location(const QString &s3_location) {
    m_s3_location = s3_location;
    m_s3_location_isSet = true;
}

bool OAIDataSetImportConfig::is_s3_location_Set() const{
    return m_s3_location_isSet;
}

bool OAIDataSetImportConfig::is_s3_location_Valid() const{
    return m_s3_location_isValid;
}

bool OAIDataSetImportConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_sets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_location_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSetImportConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
