/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartBatchJobRequest_batchJobIdentifier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartBatchJobRequest_batchJobIdentifier::OAIStartBatchJobRequest_batchJobIdentifier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartBatchJobRequest_batchJobIdentifier::OAIStartBatchJobRequest_batchJobIdentifier() {
    this->initializeModel();
}

OAIStartBatchJobRequest_batchJobIdentifier::~OAIStartBatchJobRequest_batchJobIdentifier() {}

void OAIStartBatchJobRequest_batchJobIdentifier::initializeModel() {

    m_file_batch_job_identifier_isSet = false;
    m_file_batch_job_identifier_isValid = false;

    m_script_batch_job_identifier_isSet = false;
    m_script_batch_job_identifier_isValid = false;
}

void OAIStartBatchJobRequest_batchJobIdentifier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartBatchJobRequest_batchJobIdentifier::fromJsonObject(QJsonObject json) {

    m_file_batch_job_identifier_isValid = ::OpenAPI::fromJsonValue(m_file_batch_job_identifier, json[QString("fileBatchJobIdentifier")]);
    m_file_batch_job_identifier_isSet = !json[QString("fileBatchJobIdentifier")].isNull() && m_file_batch_job_identifier_isValid;

    m_script_batch_job_identifier_isValid = ::OpenAPI::fromJsonValue(m_script_batch_job_identifier, json[QString("scriptBatchJobIdentifier")]);
    m_script_batch_job_identifier_isSet = !json[QString("scriptBatchJobIdentifier")].isNull() && m_script_batch_job_identifier_isValid;
}

QString OAIStartBatchJobRequest_batchJobIdentifier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartBatchJobRequest_batchJobIdentifier::asJsonObject() const {
    QJsonObject obj;
    if (m_file_batch_job_identifier.isSet()) {
        obj.insert(QString("fileBatchJobIdentifier"), ::OpenAPI::toJsonValue(m_file_batch_job_identifier));
    }
    if (m_script_batch_job_identifier.isSet()) {
        obj.insert(QString("scriptBatchJobIdentifier"), ::OpenAPI::toJsonValue(m_script_batch_job_identifier));
    }
    return obj;
}

OAIStartBatchJob_request_batchJobIdentifier_fileBatchJobIdentifier OAIStartBatchJobRequest_batchJobIdentifier::getFileBatchJobIdentifier() const {
    return m_file_batch_job_identifier;
}
void OAIStartBatchJobRequest_batchJobIdentifier::setFileBatchJobIdentifier(const OAIStartBatchJob_request_batchJobIdentifier_fileBatchJobIdentifier &file_batch_job_identifier) {
    m_file_batch_job_identifier = file_batch_job_identifier;
    m_file_batch_job_identifier_isSet = true;
}

bool OAIStartBatchJobRequest_batchJobIdentifier::is_file_batch_job_identifier_Set() const{
    return m_file_batch_job_identifier_isSet;
}

bool OAIStartBatchJobRequest_batchJobIdentifier::is_file_batch_job_identifier_Valid() const{
    return m_file_batch_job_identifier_isValid;
}

OAIStartBatchJob_request_batchJobIdentifier_scriptBatchJobIdentifier OAIStartBatchJobRequest_batchJobIdentifier::getScriptBatchJobIdentifier() const {
    return m_script_batch_job_identifier;
}
void OAIStartBatchJobRequest_batchJobIdentifier::setScriptBatchJobIdentifier(const OAIStartBatchJob_request_batchJobIdentifier_scriptBatchJobIdentifier &script_batch_job_identifier) {
    m_script_batch_job_identifier = script_batch_job_identifier;
    m_script_batch_job_identifier_isSet = true;
}

bool OAIStartBatchJobRequest_batchJobIdentifier::is_script_batch_job_identifier_Set() const{
    return m_script_batch_job_identifier_isSet;
}

bool OAIStartBatchJobRequest_batchJobIdentifier::is_script_batch_job_identifier_Valid() const{
    return m_script_batch_job_identifier_isValid;
}

bool OAIStartBatchJobRequest_batchJobIdentifier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_batch_job_identifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_batch_job_identifier.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartBatchJobRequest_batchJobIdentifier::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
