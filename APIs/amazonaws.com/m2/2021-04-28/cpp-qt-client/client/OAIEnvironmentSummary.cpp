/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvironmentSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvironmentSummary::OAIEnvironmentSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvironmentSummary::OAIEnvironmentSummary() {
    this->initializeModel();
}

OAIEnvironmentSummary::~OAIEnvironmentSummary() {}

void OAIEnvironmentSummary::initializeModel() {

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_engine_type_isSet = false;
    m_engine_type_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_environment_arn_isSet = false;
    m_environment_arn_isValid = false;

    m_environment_id_isSet = false;
    m_environment_id_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIEnvironmentSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvironmentSummary::fromJsonObject(QJsonObject json) {

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_engine_type_isValid = ::OpenAPI::fromJsonValue(m_engine_type, json[QString("engineType")]);
    m_engine_type_isSet = !json[QString("engineType")].isNull() && m_engine_type_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("engineVersion")]);
    m_engine_version_isSet = !json[QString("engineVersion")].isNull() && m_engine_version_isValid;

    m_environment_arn_isValid = ::OpenAPI::fromJsonValue(m_environment_arn, json[QString("environmentArn")]);
    m_environment_arn_isSet = !json[QString("environmentArn")].isNull() && m_environment_arn_isValid;

    m_environment_id_isValid = ::OpenAPI::fromJsonValue(m_environment_id, json[QString("environmentId")]);
    m_environment_id_isSet = !json[QString("environmentId")].isNull() && m_environment_id_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIEnvironmentSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvironmentSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_engine_type.isSet()) {
        obj.insert(QString("engineType"), ::OpenAPI::toJsonValue(m_engine_type));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("engineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_environment_arn_isSet) {
        obj.insert(QString("environmentArn"), ::OpenAPI::toJsonValue(m_environment_arn));
    }
    if (m_environment_id_isSet) {
        obj.insert(QString("environmentId"), ::OpenAPI::toJsonValue(m_environment_id));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QDateTime OAIEnvironmentSummary::getCreationTime() const {
    return m_creation_time;
}
void OAIEnvironmentSummary::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIEnvironmentSummary::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIEnvironmentSummary::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAIEngineType OAIEnvironmentSummary::getEngineType() const {
    return m_engine_type;
}
void OAIEnvironmentSummary::setEngineType(const OAIEngineType &engine_type) {
    m_engine_type = engine_type;
    m_engine_type_isSet = true;
}

bool OAIEnvironmentSummary::is_engine_type_Set() const{
    return m_engine_type_isSet;
}

bool OAIEnvironmentSummary::is_engine_type_Valid() const{
    return m_engine_type_isValid;
}

QString OAIEnvironmentSummary::getEngineVersion() const {
    return m_engine_version;
}
void OAIEnvironmentSummary::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIEnvironmentSummary::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIEnvironmentSummary::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

QString OAIEnvironmentSummary::getEnvironmentArn() const {
    return m_environment_arn;
}
void OAIEnvironmentSummary::setEnvironmentArn(const QString &environment_arn) {
    m_environment_arn = environment_arn;
    m_environment_arn_isSet = true;
}

bool OAIEnvironmentSummary::is_environment_arn_Set() const{
    return m_environment_arn_isSet;
}

bool OAIEnvironmentSummary::is_environment_arn_Valid() const{
    return m_environment_arn_isValid;
}

QString OAIEnvironmentSummary::getEnvironmentId() const {
    return m_environment_id;
}
void OAIEnvironmentSummary::setEnvironmentId(const QString &environment_id) {
    m_environment_id = environment_id;
    m_environment_id_isSet = true;
}

bool OAIEnvironmentSummary::is_environment_id_Set() const{
    return m_environment_id_isSet;
}

bool OAIEnvironmentSummary::is_environment_id_Valid() const{
    return m_environment_id_isValid;
}

QString OAIEnvironmentSummary::getInstanceType() const {
    return m_instance_type;
}
void OAIEnvironmentSummary::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIEnvironmentSummary::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIEnvironmentSummary::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QString OAIEnvironmentSummary::getName() const {
    return m_name;
}
void OAIEnvironmentSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEnvironmentSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEnvironmentSummary::is_name_Valid() const{
    return m_name_isValid;
}

OAIEnvironmentLifecycle OAIEnvironmentSummary::getStatus() const {
    return m_status;
}
void OAIEnvironmentSummary::setStatus(const OAIEnvironmentLifecycle &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEnvironmentSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEnvironmentSummary::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIEnvironmentSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvironmentSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_creation_time_isValid && m_engine_type_isValid && m_engine_version_isValid && m_environment_arn_isValid && m_environment_id_isValid && m_instance_type_isValid && m_name_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
