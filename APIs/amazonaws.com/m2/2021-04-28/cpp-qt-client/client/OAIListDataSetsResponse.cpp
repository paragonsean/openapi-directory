/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListDataSetsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListDataSetsResponse::OAIListDataSetsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListDataSetsResponse::OAIListDataSetsResponse() {
    this->initializeModel();
}

OAIListDataSetsResponse::~OAIListDataSetsResponse() {}

void OAIListDataSetsResponse::initializeModel() {

    m_data_sets_isSet = false;
    m_data_sets_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListDataSetsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListDataSetsResponse::fromJsonObject(QJsonObject json) {

    m_data_sets_isValid = ::OpenAPI::fromJsonValue(m_data_sets, json[QString("dataSets")]);
    m_data_sets_isSet = !json[QString("dataSets")].isNull() && m_data_sets_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListDataSetsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListDataSetsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_data_sets.isSet()) {
        obj.insert(QString("dataSets"), ::OpenAPI::toJsonValue(m_data_sets));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListDataSetsResponse::getDataSets() const {
    return m_data_sets;
}
void OAIListDataSetsResponse::setDataSets(const QList &data_sets) {
    m_data_sets = data_sets;
    m_data_sets_isSet = true;
}

bool OAIListDataSetsResponse::is_data_sets_Set() const{
    return m_data_sets_isSet;
}

bool OAIListDataSetsResponse::is_data_sets_Valid() const{
    return m_data_sets_isValid;
}

QString OAIListDataSetsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListDataSetsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListDataSetsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListDataSetsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListDataSetsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_sets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListDataSetsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_sets_isValid && true;
}

} // namespace OpenAPI
