/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSetImportSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSetImportSummary::OAIDataSetImportSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSetImportSummary::OAIDataSetImportSummary() {
    this->initializeModel();
}

OAIDataSetImportSummary::~OAIDataSetImportSummary() {}

void OAIDataSetImportSummary::initializeModel() {

    m_failed_isSet = false;
    m_failed_isValid = false;

    m_in_progress_isSet = false;
    m_in_progress_isValid = false;

    m_pending_isSet = false;
    m_pending_isValid = false;

    m_succeeded_isSet = false;
    m_succeeded_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIDataSetImportSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSetImportSummary::fromJsonObject(QJsonObject json) {

    m_failed_isValid = ::OpenAPI::fromJsonValue(m_failed, json[QString("failed")]);
    m_failed_isSet = !json[QString("failed")].isNull() && m_failed_isValid;

    m_in_progress_isValid = ::OpenAPI::fromJsonValue(m_in_progress, json[QString("inProgress")]);
    m_in_progress_isSet = !json[QString("inProgress")].isNull() && m_in_progress_isValid;

    m_pending_isValid = ::OpenAPI::fromJsonValue(m_pending, json[QString("pending")]);
    m_pending_isSet = !json[QString("pending")].isNull() && m_pending_isValid;

    m_succeeded_isValid = ::OpenAPI::fromJsonValue(m_succeeded, json[QString("succeeded")]);
    m_succeeded_isSet = !json[QString("succeeded")].isNull() && m_succeeded_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIDataSetImportSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSetImportSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_failed_isSet) {
        obj.insert(QString("failed"), ::OpenAPI::toJsonValue(m_failed));
    }
    if (m_in_progress_isSet) {
        obj.insert(QString("inProgress"), ::OpenAPI::toJsonValue(m_in_progress));
    }
    if (m_pending_isSet) {
        obj.insert(QString("pending"), ::OpenAPI::toJsonValue(m_pending));
    }
    if (m_succeeded_isSet) {
        obj.insert(QString("succeeded"), ::OpenAPI::toJsonValue(m_succeeded));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

qint32 OAIDataSetImportSummary::getFailed() const {
    return m_failed;
}
void OAIDataSetImportSummary::setFailed(const qint32 &failed) {
    m_failed = failed;
    m_failed_isSet = true;
}

bool OAIDataSetImportSummary::is_failed_Set() const{
    return m_failed_isSet;
}

bool OAIDataSetImportSummary::is_failed_Valid() const{
    return m_failed_isValid;
}

qint32 OAIDataSetImportSummary::getInProgress() const {
    return m_in_progress;
}
void OAIDataSetImportSummary::setInProgress(const qint32 &in_progress) {
    m_in_progress = in_progress;
    m_in_progress_isSet = true;
}

bool OAIDataSetImportSummary::is_in_progress_Set() const{
    return m_in_progress_isSet;
}

bool OAIDataSetImportSummary::is_in_progress_Valid() const{
    return m_in_progress_isValid;
}

qint32 OAIDataSetImportSummary::getPending() const {
    return m_pending;
}
void OAIDataSetImportSummary::setPending(const qint32 &pending) {
    m_pending = pending;
    m_pending_isSet = true;
}

bool OAIDataSetImportSummary::is_pending_Set() const{
    return m_pending_isSet;
}

bool OAIDataSetImportSummary::is_pending_Valid() const{
    return m_pending_isValid;
}

qint32 OAIDataSetImportSummary::getSucceeded() const {
    return m_succeeded;
}
void OAIDataSetImportSummary::setSucceeded(const qint32 &succeeded) {
    m_succeeded = succeeded;
    m_succeeded_isSet = true;
}

bool OAIDataSetImportSummary::is_succeeded_Set() const{
    return m_succeeded_isSet;
}

bool OAIDataSetImportSummary::is_succeeded_Valid() const{
    return m_succeeded_isValid;
}

qint32 OAIDataSetImportSummary::getTotal() const {
    return m_total;
}
void OAIDataSetImportSummary::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIDataSetImportSummary::is_total_Set() const{
    return m_total_isSet;
}

bool OAIDataSetImportSummary::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIDataSetImportSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_succeeded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSetImportSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_failed_isValid && m_in_progress_isValid && m_pending_isValid && m_succeeded_isValid && m_total_isValid && true;
}

} // namespace OpenAPI
