/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSet::OAIDataSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSet::OAIDataSet() {
    this->initializeModel();
}

OAIDataSet::~OAIDataSet() {}

void OAIDataSet::initializeModel() {

    m_dataset_name_isSet = false;
    m_dataset_name_isValid = false;

    m_dataset_org_isSet = false;
    m_dataset_org_isValid = false;

    m_record_length_isSet = false;
    m_record_length_isValid = false;

    m_relative_path_isSet = false;
    m_relative_path_isValid = false;

    m_storage_type_isSet = false;
    m_storage_type_isValid = false;
}

void OAIDataSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSet::fromJsonObject(QJsonObject json) {

    m_dataset_name_isValid = ::OpenAPI::fromJsonValue(m_dataset_name, json[QString("datasetName")]);
    m_dataset_name_isSet = !json[QString("datasetName")].isNull() && m_dataset_name_isValid;

    m_dataset_org_isValid = ::OpenAPI::fromJsonValue(m_dataset_org, json[QString("datasetOrg")]);
    m_dataset_org_isSet = !json[QString("datasetOrg")].isNull() && m_dataset_org_isValid;

    m_record_length_isValid = ::OpenAPI::fromJsonValue(m_record_length, json[QString("recordLength")]);
    m_record_length_isSet = !json[QString("recordLength")].isNull() && m_record_length_isValid;

    m_relative_path_isValid = ::OpenAPI::fromJsonValue(m_relative_path, json[QString("relativePath")]);
    m_relative_path_isSet = !json[QString("relativePath")].isNull() && m_relative_path_isValid;

    m_storage_type_isValid = ::OpenAPI::fromJsonValue(m_storage_type, json[QString("storageType")]);
    m_storage_type_isSet = !json[QString("storageType")].isNull() && m_storage_type_isValid;
}

QString OAIDataSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSet::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset_name_isSet) {
        obj.insert(QString("datasetName"), ::OpenAPI::toJsonValue(m_dataset_name));
    }
    if (m_dataset_org.isSet()) {
        obj.insert(QString("datasetOrg"), ::OpenAPI::toJsonValue(m_dataset_org));
    }
    if (m_record_length.isSet()) {
        obj.insert(QString("recordLength"), ::OpenAPI::toJsonValue(m_record_length));
    }
    if (m_relative_path_isSet) {
        obj.insert(QString("relativePath"), ::OpenAPI::toJsonValue(m_relative_path));
    }
    if (m_storage_type_isSet) {
        obj.insert(QString("storageType"), ::OpenAPI::toJsonValue(m_storage_type));
    }
    return obj;
}

QString OAIDataSet::getDatasetName() const {
    return m_dataset_name;
}
void OAIDataSet::setDatasetName(const QString &dataset_name) {
    m_dataset_name = dataset_name;
    m_dataset_name_isSet = true;
}

bool OAIDataSet::is_dataset_name_Set() const{
    return m_dataset_name_isSet;
}

bool OAIDataSet::is_dataset_name_Valid() const{
    return m_dataset_name_isValid;
}

OAIDataSet_datasetOrg OAIDataSet::getDatasetOrg() const {
    return m_dataset_org;
}
void OAIDataSet::setDatasetOrg(const OAIDataSet_datasetOrg &dataset_org) {
    m_dataset_org = dataset_org;
    m_dataset_org_isSet = true;
}

bool OAIDataSet::is_dataset_org_Set() const{
    return m_dataset_org_isSet;
}

bool OAIDataSet::is_dataset_org_Valid() const{
    return m_dataset_org_isValid;
}

OAIDataSet_recordLength OAIDataSet::getRecordLength() const {
    return m_record_length;
}
void OAIDataSet::setRecordLength(const OAIDataSet_recordLength &record_length) {
    m_record_length = record_length;
    m_record_length_isSet = true;
}

bool OAIDataSet::is_record_length_Set() const{
    return m_record_length_isSet;
}

bool OAIDataSet::is_record_length_Valid() const{
    return m_record_length_isValid;
}

QString OAIDataSet::getRelativePath() const {
    return m_relative_path;
}
void OAIDataSet::setRelativePath(const QString &relative_path) {
    m_relative_path = relative_path;
    m_relative_path_isSet = true;
}

bool OAIDataSet::is_relative_path_Set() const{
    return m_relative_path_isSet;
}

bool OAIDataSet::is_relative_path_Valid() const{
    return m_relative_path_isValid;
}

QString OAIDataSet::getStorageType() const {
    return m_storage_type;
}
void OAIDataSet::setStorageType(const QString &storage_type) {
    m_storage_type = storage_type;
    m_storage_type_isSet = true;
}

bool OAIDataSet::is_storage_type_Set() const{
    return m_storage_type_isSet;
}

bool OAIDataSet::is_storage_type_Valid() const{
    return m_storage_type_isValid;
}

bool OAIDataSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_org.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_length.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dataset_name_isValid && m_dataset_org_isValid && m_record_length_isValid && true;
}

} // namespace OpenAPI
