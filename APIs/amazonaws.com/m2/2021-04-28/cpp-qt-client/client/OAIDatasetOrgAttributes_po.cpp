/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatasetOrgAttributes_po.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatasetOrgAttributes_po::OAIDatasetOrgAttributes_po(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatasetOrgAttributes_po::OAIDatasetOrgAttributes_po() {
    this->initializeModel();
}

OAIDatasetOrgAttributes_po::~OAIDatasetOrgAttributes_po() {}

void OAIDatasetOrgAttributes_po::initializeModel() {

    m_encoding_isSet = false;
    m_encoding_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_member_file_extensions_isSet = false;
    m_member_file_extensions_isValid = false;
}

void OAIDatasetOrgAttributes_po::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatasetOrgAttributes_po::fromJsonObject(QJsonObject json) {

    m_encoding_isValid = ::OpenAPI::fromJsonValue(m_encoding, json[QString("encoding")]);
    m_encoding_isSet = !json[QString("encoding")].isNull() && m_encoding_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_member_file_extensions_isValid = ::OpenAPI::fromJsonValue(m_member_file_extensions, json[QString("memberFileExtensions")]);
    m_member_file_extensions_isSet = !json[QString("memberFileExtensions")].isNull() && m_member_file_extensions_isValid;
}

QString OAIDatasetOrgAttributes_po::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatasetOrgAttributes_po::asJsonObject() const {
    QJsonObject obj;
    if (m_encoding_isSet) {
        obj.insert(QString("encoding"), ::OpenAPI::toJsonValue(m_encoding));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_member_file_extensions.isSet()) {
        obj.insert(QString("memberFileExtensions"), ::OpenAPI::toJsonValue(m_member_file_extensions));
    }
    return obj;
}

QString OAIDatasetOrgAttributes_po::getEncoding() const {
    return m_encoding;
}
void OAIDatasetOrgAttributes_po::setEncoding(const QString &encoding) {
    m_encoding = encoding;
    m_encoding_isSet = true;
}

bool OAIDatasetOrgAttributes_po::is_encoding_Set() const{
    return m_encoding_isSet;
}

bool OAIDatasetOrgAttributes_po::is_encoding_Valid() const{
    return m_encoding_isValid;
}

QString OAIDatasetOrgAttributes_po::getFormat() const {
    return m_format;
}
void OAIDatasetOrgAttributes_po::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIDatasetOrgAttributes_po::is_format_Set() const{
    return m_format_isSet;
}

bool OAIDatasetOrgAttributes_po::is_format_Valid() const{
    return m_format_isValid;
}

QList OAIDatasetOrgAttributes_po::getMemberFileExtensions() const {
    return m_member_file_extensions;
}
void OAIDatasetOrgAttributes_po::setMemberFileExtensions(const QList &member_file_extensions) {
    m_member_file_extensions = member_file_extensions;
    m_member_file_extensions_isSet = true;
}

bool OAIDatasetOrgAttributes_po::is_member_file_extensions_Set() const{
    return m_member_file_extensions_isSet;
}

bool OAIDatasetOrgAttributes_po::is_member_file_extensions_Valid() const{
    return m_member_file_extensions_isValid;
}

bool OAIDatasetOrgAttributes_po::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_file_extensions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatasetOrgAttributes_po::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_format_isValid && m_member_file_extensions_isValid && true;
}

} // namespace OpenAPI
