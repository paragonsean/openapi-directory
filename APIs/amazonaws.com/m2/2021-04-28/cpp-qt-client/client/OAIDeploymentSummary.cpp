/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploymentSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploymentSummary::OAIDeploymentSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploymentSummary::OAIDeploymentSummary() {
    this->initializeModel();
}

OAIDeploymentSummary::~OAIDeploymentSummary() {}

void OAIDeploymentSummary::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_application_version_isSet = false;
    m_application_version_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_deployment_id_isSet = false;
    m_deployment_id_isValid = false;

    m_environment_id_isSet = false;
    m_environment_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;
}

void OAIDeploymentSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeploymentSummary::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("applicationId")]);
    m_application_id_isSet = !json[QString("applicationId")].isNull() && m_application_id_isValid;

    m_application_version_isValid = ::OpenAPI::fromJsonValue(m_application_version, json[QString("applicationVersion")]);
    m_application_version_isSet = !json[QString("applicationVersion")].isNull() && m_application_version_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_deployment_id_isValid = ::OpenAPI::fromJsonValue(m_deployment_id, json[QString("deploymentId")]);
    m_deployment_id_isSet = !json[QString("deploymentId")].isNull() && m_deployment_id_isValid;

    m_environment_id_isValid = ::OpenAPI::fromJsonValue(m_environment_id, json[QString("environmentId")]);
    m_environment_id_isSet = !json[QString("environmentId")].isNull() && m_environment_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("statusReason")]);
    m_status_reason_isSet = !json[QString("statusReason")].isNull() && m_status_reason_isValid;
}

QString OAIDeploymentSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeploymentSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("applicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_application_version_isSet) {
        obj.insert(QString("applicationVersion"), ::OpenAPI::toJsonValue(m_application_version));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_deployment_id_isSet) {
        obj.insert(QString("deploymentId"), ::OpenAPI::toJsonValue(m_deployment_id));
    }
    if (m_environment_id_isSet) {
        obj.insert(QString("environmentId"), ::OpenAPI::toJsonValue(m_environment_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_reason_isSet) {
        obj.insert(QString("statusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    return obj;
}

QString OAIDeploymentSummary::getApplicationId() const {
    return m_application_id;
}
void OAIDeploymentSummary::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIDeploymentSummary::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIDeploymentSummary::is_application_id_Valid() const{
    return m_application_id_isValid;
}

qint32 OAIDeploymentSummary::getApplicationVersion() const {
    return m_application_version;
}
void OAIDeploymentSummary::setApplicationVersion(const qint32 &application_version) {
    m_application_version = application_version;
    m_application_version_isSet = true;
}

bool OAIDeploymentSummary::is_application_version_Set() const{
    return m_application_version_isSet;
}

bool OAIDeploymentSummary::is_application_version_Valid() const{
    return m_application_version_isValid;
}

QDateTime OAIDeploymentSummary::getCreationTime() const {
    return m_creation_time;
}
void OAIDeploymentSummary::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDeploymentSummary::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDeploymentSummary::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIDeploymentSummary::getDeploymentId() const {
    return m_deployment_id;
}
void OAIDeploymentSummary::setDeploymentId(const QString &deployment_id) {
    m_deployment_id = deployment_id;
    m_deployment_id_isSet = true;
}

bool OAIDeploymentSummary::is_deployment_id_Set() const{
    return m_deployment_id_isSet;
}

bool OAIDeploymentSummary::is_deployment_id_Valid() const{
    return m_deployment_id_isValid;
}

QString OAIDeploymentSummary::getEnvironmentId() const {
    return m_environment_id;
}
void OAIDeploymentSummary::setEnvironmentId(const QString &environment_id) {
    m_environment_id = environment_id;
    m_environment_id_isSet = true;
}

bool OAIDeploymentSummary::is_environment_id_Set() const{
    return m_environment_id_isSet;
}

bool OAIDeploymentSummary::is_environment_id_Valid() const{
    return m_environment_id_isValid;
}

OAIDeploymentLifecycle OAIDeploymentSummary::getStatus() const {
    return m_status;
}
void OAIDeploymentSummary::setStatus(const OAIDeploymentLifecycle &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDeploymentSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDeploymentSummary::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDeploymentSummary::getStatusReason() const {
    return m_status_reason;
}
void OAIDeploymentSummary::setStatusReason(const QString &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAIDeploymentSummary::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAIDeploymentSummary::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

bool OAIDeploymentSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeploymentSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_id_isValid && m_application_version_isValid && m_creation_time_isValid && m_deployment_id_isValid && m_environment_id_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
