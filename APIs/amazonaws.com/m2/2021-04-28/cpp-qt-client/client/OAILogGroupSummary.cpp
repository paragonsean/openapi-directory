/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogGroupSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogGroupSummary::OAILogGroupSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogGroupSummary::OAILogGroupSummary() {
    this->initializeModel();
}

OAILogGroupSummary::~OAILogGroupSummary() {}

void OAILogGroupSummary::initializeModel() {

    m_log_group_name_isSet = false;
    m_log_group_name_isValid = false;

    m_log_type_isSet = false;
    m_log_type_isValid = false;
}

void OAILogGroupSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogGroupSummary::fromJsonObject(QJsonObject json) {

    m_log_group_name_isValid = ::OpenAPI::fromJsonValue(m_log_group_name, json[QString("logGroupName")]);
    m_log_group_name_isSet = !json[QString("logGroupName")].isNull() && m_log_group_name_isValid;

    m_log_type_isValid = ::OpenAPI::fromJsonValue(m_log_type, json[QString("logType")]);
    m_log_type_isSet = !json[QString("logType")].isNull() && m_log_type_isValid;
}

QString OAILogGroupSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogGroupSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_log_group_name_isSet) {
        obj.insert(QString("logGroupName"), ::OpenAPI::toJsonValue(m_log_group_name));
    }
    if (m_log_type_isSet) {
        obj.insert(QString("logType"), ::OpenAPI::toJsonValue(m_log_type));
    }
    return obj;
}

QString OAILogGroupSummary::getLogGroupName() const {
    return m_log_group_name;
}
void OAILogGroupSummary::setLogGroupName(const QString &log_group_name) {
    m_log_group_name = log_group_name;
    m_log_group_name_isSet = true;
}

bool OAILogGroupSummary::is_log_group_name_Set() const{
    return m_log_group_name_isSet;
}

bool OAILogGroupSummary::is_log_group_name_Valid() const{
    return m_log_group_name_isValid;
}

QString OAILogGroupSummary::getLogType() const {
    return m_log_type;
}
void OAILogGroupSummary::setLogType(const QString &log_type) {
    m_log_type = log_type;
    m_log_type_isSet = true;
}

bool OAILogGroupSummary::is_log_type_Set() const{
    return m_log_type_isSet;
}

bool OAILogGroupSummary::is_log_type_Valid() const{
    return m_log_type_isValid;
}

bool OAILogGroupSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_log_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogGroupSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_log_group_name_isValid && m_log_type_isValid && true;
}

} // namespace OpenAPI
