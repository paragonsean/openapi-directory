/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDeploymentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDeploymentResponse::OAICreateDeploymentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDeploymentResponse::OAICreateDeploymentResponse() {
    this->initializeModel();
}

OAICreateDeploymentResponse::~OAICreateDeploymentResponse() {}

void OAICreateDeploymentResponse::initializeModel() {

    m_deployment_id_isSet = false;
    m_deployment_id_isValid = false;
}

void OAICreateDeploymentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDeploymentResponse::fromJsonObject(QJsonObject json) {

    m_deployment_id_isValid = ::OpenAPI::fromJsonValue(m_deployment_id, json[QString("deploymentId")]);
    m_deployment_id_isSet = !json[QString("deploymentId")].isNull() && m_deployment_id_isValid;
}

QString OAICreateDeploymentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDeploymentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_deployment_id_isSet) {
        obj.insert(QString("deploymentId"), ::OpenAPI::toJsonValue(m_deployment_id));
    }
    return obj;
}

QString OAICreateDeploymentResponse::getDeploymentId() const {
    return m_deployment_id;
}
void OAICreateDeploymentResponse::setDeploymentId(const QString &deployment_id) {
    m_deployment_id = deployment_id;
    m_deployment_id_isSet = true;
}

bool OAICreateDeploymentResponse::is_deployment_id_Set() const{
    return m_deployment_id_isSet;
}

bool OAICreateDeploymentResponse::is_deployment_id_Valid() const{
    return m_deployment_id_isValid;
}

bool OAICreateDeploymentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deployment_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDeploymentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_deployment_id_isValid && true;
}

} // namespace OpenAPI
