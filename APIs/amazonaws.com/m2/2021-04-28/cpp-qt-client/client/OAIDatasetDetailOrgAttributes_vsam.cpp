/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatasetDetailOrgAttributes_vsam.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatasetDetailOrgAttributes_vsam::OAIDatasetDetailOrgAttributes_vsam(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatasetDetailOrgAttributes_vsam::OAIDatasetDetailOrgAttributes_vsam() {
    this->initializeModel();
}

OAIDatasetDetailOrgAttributes_vsam::~OAIDatasetDetailOrgAttributes_vsam() {}

void OAIDatasetDetailOrgAttributes_vsam::initializeModel() {

    m_alternate_keys_isSet = false;
    m_alternate_keys_isValid = false;

    m_cache_at_startup_isSet = false;
    m_cache_at_startup_isValid = false;

    m_compressed_isSet = false;
    m_compressed_isValid = false;

    m_encoding_isSet = false;
    m_encoding_isValid = false;

    m_primary_key_isSet = false;
    m_primary_key_isValid = false;

    m_record_format_isSet = false;
    m_record_format_isValid = false;
}

void OAIDatasetDetailOrgAttributes_vsam::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatasetDetailOrgAttributes_vsam::fromJsonObject(QJsonObject json) {

    m_alternate_keys_isValid = ::OpenAPI::fromJsonValue(m_alternate_keys, json[QString("alternateKeys")]);
    m_alternate_keys_isSet = !json[QString("alternateKeys")].isNull() && m_alternate_keys_isValid;

    m_cache_at_startup_isValid = ::OpenAPI::fromJsonValue(m_cache_at_startup, json[QString("cacheAtStartup")]);
    m_cache_at_startup_isSet = !json[QString("cacheAtStartup")].isNull() && m_cache_at_startup_isValid;

    m_compressed_isValid = ::OpenAPI::fromJsonValue(m_compressed, json[QString("compressed")]);
    m_compressed_isSet = !json[QString("compressed")].isNull() && m_compressed_isValid;

    m_encoding_isValid = ::OpenAPI::fromJsonValue(m_encoding, json[QString("encoding")]);
    m_encoding_isSet = !json[QString("encoding")].isNull() && m_encoding_isValid;

    m_primary_key_isValid = ::OpenAPI::fromJsonValue(m_primary_key, json[QString("primaryKey")]);
    m_primary_key_isSet = !json[QString("primaryKey")].isNull() && m_primary_key_isValid;

    m_record_format_isValid = ::OpenAPI::fromJsonValue(m_record_format, json[QString("recordFormat")]);
    m_record_format_isSet = !json[QString("recordFormat")].isNull() && m_record_format_isValid;
}

QString OAIDatasetDetailOrgAttributes_vsam::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatasetDetailOrgAttributes_vsam::asJsonObject() const {
    QJsonObject obj;
    if (m_alternate_keys.isSet()) {
        obj.insert(QString("alternateKeys"), ::OpenAPI::toJsonValue(m_alternate_keys));
    }
    if (m_cache_at_startup_isSet) {
        obj.insert(QString("cacheAtStartup"), ::OpenAPI::toJsonValue(m_cache_at_startup));
    }
    if (m_compressed_isSet) {
        obj.insert(QString("compressed"), ::OpenAPI::toJsonValue(m_compressed));
    }
    if (m_encoding_isSet) {
        obj.insert(QString("encoding"), ::OpenAPI::toJsonValue(m_encoding));
    }
    if (m_primary_key.isSet()) {
        obj.insert(QString("primaryKey"), ::OpenAPI::toJsonValue(m_primary_key));
    }
    if (m_record_format_isSet) {
        obj.insert(QString("recordFormat"), ::OpenAPI::toJsonValue(m_record_format));
    }
    return obj;
}

QList OAIDatasetDetailOrgAttributes_vsam::getAlternateKeys() const {
    return m_alternate_keys;
}
void OAIDatasetDetailOrgAttributes_vsam::setAlternateKeys(const QList &alternate_keys) {
    m_alternate_keys = alternate_keys;
    m_alternate_keys_isSet = true;
}

bool OAIDatasetDetailOrgAttributes_vsam::is_alternate_keys_Set() const{
    return m_alternate_keys_isSet;
}

bool OAIDatasetDetailOrgAttributes_vsam::is_alternate_keys_Valid() const{
    return m_alternate_keys_isValid;
}

bool OAIDatasetDetailOrgAttributes_vsam::getCacheAtStartup() const {
    return m_cache_at_startup;
}
void OAIDatasetDetailOrgAttributes_vsam::setCacheAtStartup(const bool &cache_at_startup) {
    m_cache_at_startup = cache_at_startup;
    m_cache_at_startup_isSet = true;
}

bool OAIDatasetDetailOrgAttributes_vsam::is_cache_at_startup_Set() const{
    return m_cache_at_startup_isSet;
}

bool OAIDatasetDetailOrgAttributes_vsam::is_cache_at_startup_Valid() const{
    return m_cache_at_startup_isValid;
}

bool OAIDatasetDetailOrgAttributes_vsam::getCompressed() const {
    return m_compressed;
}
void OAIDatasetDetailOrgAttributes_vsam::setCompressed(const bool &compressed) {
    m_compressed = compressed;
    m_compressed_isSet = true;
}

bool OAIDatasetDetailOrgAttributes_vsam::is_compressed_Set() const{
    return m_compressed_isSet;
}

bool OAIDatasetDetailOrgAttributes_vsam::is_compressed_Valid() const{
    return m_compressed_isValid;
}

QString OAIDatasetDetailOrgAttributes_vsam::getEncoding() const {
    return m_encoding;
}
void OAIDatasetDetailOrgAttributes_vsam::setEncoding(const QString &encoding) {
    m_encoding = encoding;
    m_encoding_isSet = true;
}

bool OAIDatasetDetailOrgAttributes_vsam::is_encoding_Set() const{
    return m_encoding_isSet;
}

bool OAIDatasetDetailOrgAttributes_vsam::is_encoding_Valid() const{
    return m_encoding_isValid;
}

OAIVsamDetailAttributes_primaryKey OAIDatasetDetailOrgAttributes_vsam::getPrimaryKey() const {
    return m_primary_key;
}
void OAIDatasetDetailOrgAttributes_vsam::setPrimaryKey(const OAIVsamDetailAttributes_primaryKey &primary_key) {
    m_primary_key = primary_key;
    m_primary_key_isSet = true;
}

bool OAIDatasetDetailOrgAttributes_vsam::is_primary_key_Set() const{
    return m_primary_key_isSet;
}

bool OAIDatasetDetailOrgAttributes_vsam::is_primary_key_Valid() const{
    return m_primary_key_isValid;
}

QString OAIDatasetDetailOrgAttributes_vsam::getRecordFormat() const {
    return m_record_format;
}
void OAIDatasetDetailOrgAttributes_vsam::setRecordFormat(const QString &record_format) {
    m_record_format = record_format;
    m_record_format_isSet = true;
}

bool OAIDatasetDetailOrgAttributes_vsam::is_record_format_Set() const{
    return m_record_format_isSet;
}

bool OAIDatasetDetailOrgAttributes_vsam::is_record_format_Valid() const{
    return m_record_format_isValid;
}

bool OAIDatasetDetailOrgAttributes_vsam::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alternate_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_at_startup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compressed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_format_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatasetDetailOrgAttributes_vsam::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
