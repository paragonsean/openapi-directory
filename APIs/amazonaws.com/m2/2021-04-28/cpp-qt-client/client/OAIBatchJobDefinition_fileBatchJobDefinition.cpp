/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchJobDefinition_fileBatchJobDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchJobDefinition_fileBatchJobDefinition::OAIBatchJobDefinition_fileBatchJobDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchJobDefinition_fileBatchJobDefinition::OAIBatchJobDefinition_fileBatchJobDefinition() {
    this->initializeModel();
}

OAIBatchJobDefinition_fileBatchJobDefinition::~OAIBatchJobDefinition_fileBatchJobDefinition() {}

void OAIBatchJobDefinition_fileBatchJobDefinition::initializeModel() {

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_folder_path_isSet = false;
    m_folder_path_isValid = false;
}

void OAIBatchJobDefinition_fileBatchJobDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchJobDefinition_fileBatchJobDefinition::fromJsonObject(QJsonObject json) {

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("fileName")]);
    m_file_name_isSet = !json[QString("fileName")].isNull() && m_file_name_isValid;

    m_folder_path_isValid = ::OpenAPI::fromJsonValue(m_folder_path, json[QString("folderPath")]);
    m_folder_path_isSet = !json[QString("folderPath")].isNull() && m_folder_path_isValid;
}

QString OAIBatchJobDefinition_fileBatchJobDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchJobDefinition_fileBatchJobDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_file_name_isSet) {
        obj.insert(QString("fileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_folder_path_isSet) {
        obj.insert(QString("folderPath"), ::OpenAPI::toJsonValue(m_folder_path));
    }
    return obj;
}

QString OAIBatchJobDefinition_fileBatchJobDefinition::getFileName() const {
    return m_file_name;
}
void OAIBatchJobDefinition_fileBatchJobDefinition::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIBatchJobDefinition_fileBatchJobDefinition::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIBatchJobDefinition_fileBatchJobDefinition::is_file_name_Valid() const{
    return m_file_name_isValid;
}

QString OAIBatchJobDefinition_fileBatchJobDefinition::getFolderPath() const {
    return m_folder_path;
}
void OAIBatchJobDefinition_fileBatchJobDefinition::setFolderPath(const QString &folder_path) {
    m_folder_path = folder_path;
    m_folder_path_isSet = true;
}

bool OAIBatchJobDefinition_fileBatchJobDefinition::is_folder_path_Set() const{
    return m_folder_path_isSet;
}

bool OAIBatchJobDefinition_fileBatchJobDefinition::is_folder_path_Valid() const{
    return m_folder_path_isValid;
}

bool OAIBatchJobDefinition_fileBatchJobDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchJobDefinition_fileBatchJobDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_name_isValid && true;
}

} // namespace OpenAPI
