/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchJobExecutionSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchJobExecutionSummary::OAIBatchJobExecutionSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchJobExecutionSummary::OAIBatchJobExecutionSummary() {
    this->initializeModel();
}

OAIBatchJobExecutionSummary::~OAIBatchJobExecutionSummary() {}

void OAIBatchJobExecutionSummary::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_batch_job_identifier_isSet = false;
    m_batch_job_identifier_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_execution_id_isSet = false;
    m_execution_id_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_job_type_isSet = false;
    m_job_type_isValid = false;

    m_return_code_isSet = false;
    m_return_code_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIBatchJobExecutionSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchJobExecutionSummary::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("applicationId")]);
    m_application_id_isSet = !json[QString("applicationId")].isNull() && m_application_id_isValid;

    m_batch_job_identifier_isValid = ::OpenAPI::fromJsonValue(m_batch_job_identifier, json[QString("batchJobIdentifier")]);
    m_batch_job_identifier_isSet = !json[QString("batchJobIdentifier")].isNull() && m_batch_job_identifier_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_execution_id_isValid = ::OpenAPI::fromJsonValue(m_execution_id, json[QString("executionId")]);
    m_execution_id_isSet = !json[QString("executionId")].isNull() && m_execution_id_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("jobName")]);
    m_job_name_isSet = !json[QString("jobName")].isNull() && m_job_name_isValid;

    m_job_type_isValid = ::OpenAPI::fromJsonValue(m_job_type, json[QString("jobType")]);
    m_job_type_isSet = !json[QString("jobType")].isNull() && m_job_type_isValid;

    m_return_code_isValid = ::OpenAPI::fromJsonValue(m_return_code, json[QString("returnCode")]);
    m_return_code_isSet = !json[QString("returnCode")].isNull() && m_return_code_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIBatchJobExecutionSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchJobExecutionSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("applicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_batch_job_identifier.isSet()) {
        obj.insert(QString("batchJobIdentifier"), ::OpenAPI::toJsonValue(m_batch_job_identifier));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_execution_id_isSet) {
        obj.insert(QString("executionId"), ::OpenAPI::toJsonValue(m_execution_id));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_job_name_isSet) {
        obj.insert(QString("jobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_job_type.isSet()) {
        obj.insert(QString("jobType"), ::OpenAPI::toJsonValue(m_job_type));
    }
    if (m_return_code_isSet) {
        obj.insert(QString("returnCode"), ::OpenAPI::toJsonValue(m_return_code));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIBatchJobExecutionSummary::getApplicationId() const {
    return m_application_id;
}
void OAIBatchJobExecutionSummary::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIBatchJobExecutionSummary::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIBatchJobExecutionSummary::is_application_id_Valid() const{
    return m_application_id_isValid;
}

OAIGetBatchJobExecutionResponse_batchJobIdentifier OAIBatchJobExecutionSummary::getBatchJobIdentifier() const {
    return m_batch_job_identifier;
}
void OAIBatchJobExecutionSummary::setBatchJobIdentifier(const OAIGetBatchJobExecutionResponse_batchJobIdentifier &batch_job_identifier) {
    m_batch_job_identifier = batch_job_identifier;
    m_batch_job_identifier_isSet = true;
}

bool OAIBatchJobExecutionSummary::is_batch_job_identifier_Set() const{
    return m_batch_job_identifier_isSet;
}

bool OAIBatchJobExecutionSummary::is_batch_job_identifier_Valid() const{
    return m_batch_job_identifier_isValid;
}

QDateTime OAIBatchJobExecutionSummary::getEndTime() const {
    return m_end_time;
}
void OAIBatchJobExecutionSummary::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIBatchJobExecutionSummary::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIBatchJobExecutionSummary::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIBatchJobExecutionSummary::getExecutionId() const {
    return m_execution_id;
}
void OAIBatchJobExecutionSummary::setExecutionId(const QString &execution_id) {
    m_execution_id = execution_id;
    m_execution_id_isSet = true;
}

bool OAIBatchJobExecutionSummary::is_execution_id_Set() const{
    return m_execution_id_isSet;
}

bool OAIBatchJobExecutionSummary::is_execution_id_Valid() const{
    return m_execution_id_isValid;
}

QString OAIBatchJobExecutionSummary::getJobId() const {
    return m_job_id;
}
void OAIBatchJobExecutionSummary::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIBatchJobExecutionSummary::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIBatchJobExecutionSummary::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIBatchJobExecutionSummary::getJobName() const {
    return m_job_name;
}
void OAIBatchJobExecutionSummary::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAIBatchJobExecutionSummary::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAIBatchJobExecutionSummary::is_job_name_Valid() const{
    return m_job_name_isValid;
}

OAIBatchJobType OAIBatchJobExecutionSummary::getJobType() const {
    return m_job_type;
}
void OAIBatchJobExecutionSummary::setJobType(const OAIBatchJobType &job_type) {
    m_job_type = job_type;
    m_job_type_isSet = true;
}

bool OAIBatchJobExecutionSummary::is_job_type_Set() const{
    return m_job_type_isSet;
}

bool OAIBatchJobExecutionSummary::is_job_type_Valid() const{
    return m_job_type_isValid;
}

QString OAIBatchJobExecutionSummary::getReturnCode() const {
    return m_return_code;
}
void OAIBatchJobExecutionSummary::setReturnCode(const QString &return_code) {
    m_return_code = return_code;
    m_return_code_isSet = true;
}

bool OAIBatchJobExecutionSummary::is_return_code_Set() const{
    return m_return_code_isSet;
}

bool OAIBatchJobExecutionSummary::is_return_code_Valid() const{
    return m_return_code_isValid;
}

QDateTime OAIBatchJobExecutionSummary::getStartTime() const {
    return m_start_time;
}
void OAIBatchJobExecutionSummary::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIBatchJobExecutionSummary::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIBatchJobExecutionSummary::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAIBatchJobExecutionStatus OAIBatchJobExecutionSummary::getStatus() const {
    return m_status;
}
void OAIBatchJobExecutionSummary::setStatus(const OAIBatchJobExecutionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBatchJobExecutionSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBatchJobExecutionSummary::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIBatchJobExecutionSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_job_identifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchJobExecutionSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_id_isValid && m_execution_id_isValid && m_start_time_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
