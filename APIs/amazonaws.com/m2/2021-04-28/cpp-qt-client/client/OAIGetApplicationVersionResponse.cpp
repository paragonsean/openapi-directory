/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetApplicationVersionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetApplicationVersionResponse::OAIGetApplicationVersionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetApplicationVersionResponse::OAIGetApplicationVersionResponse() {
    this->initializeModel();
}

OAIGetApplicationVersionResponse::~OAIGetApplicationVersionResponse() {}

void OAIGetApplicationVersionResponse::initializeModel() {

    m_application_version_isSet = false;
    m_application_version_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_definition_content_isSet = false;
    m_definition_content_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;
}

void OAIGetApplicationVersionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetApplicationVersionResponse::fromJsonObject(QJsonObject json) {

    m_application_version_isValid = ::OpenAPI::fromJsonValue(m_application_version, json[QString("applicationVersion")]);
    m_application_version_isSet = !json[QString("applicationVersion")].isNull() && m_application_version_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_definition_content_isValid = ::OpenAPI::fromJsonValue(m_definition_content, json[QString("definitionContent")]);
    m_definition_content_isSet = !json[QString("definitionContent")].isNull() && m_definition_content_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("statusReason")]);
    m_status_reason_isSet = !json[QString("statusReason")].isNull() && m_status_reason_isValid;
}

QString OAIGetApplicationVersionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetApplicationVersionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_application_version_isSet) {
        obj.insert(QString("applicationVersion"), ::OpenAPI::toJsonValue(m_application_version));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_definition_content_isSet) {
        obj.insert(QString("definitionContent"), ::OpenAPI::toJsonValue(m_definition_content));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_reason_isSet) {
        obj.insert(QString("statusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    return obj;
}

qint32 OAIGetApplicationVersionResponse::getApplicationVersion() const {
    return m_application_version;
}
void OAIGetApplicationVersionResponse::setApplicationVersion(const qint32 &application_version) {
    m_application_version = application_version;
    m_application_version_isSet = true;
}

bool OAIGetApplicationVersionResponse::is_application_version_Set() const{
    return m_application_version_isSet;
}

bool OAIGetApplicationVersionResponse::is_application_version_Valid() const{
    return m_application_version_isValid;
}

QDateTime OAIGetApplicationVersionResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIGetApplicationVersionResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIGetApplicationVersionResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIGetApplicationVersionResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIGetApplicationVersionResponse::getDefinitionContent() const {
    return m_definition_content;
}
void OAIGetApplicationVersionResponse::setDefinitionContent(const QString &definition_content) {
    m_definition_content = definition_content;
    m_definition_content_isSet = true;
}

bool OAIGetApplicationVersionResponse::is_definition_content_Set() const{
    return m_definition_content_isSet;
}

bool OAIGetApplicationVersionResponse::is_definition_content_Valid() const{
    return m_definition_content_isValid;
}

QString OAIGetApplicationVersionResponse::getDescription() const {
    return m_description;
}
void OAIGetApplicationVersionResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGetApplicationVersionResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGetApplicationVersionResponse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGetApplicationVersionResponse::getName() const {
    return m_name;
}
void OAIGetApplicationVersionResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetApplicationVersionResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetApplicationVersionResponse::is_name_Valid() const{
    return m_name_isValid;
}

OAIApplicationVersionLifecycle OAIGetApplicationVersionResponse::getStatus() const {
    return m_status;
}
void OAIGetApplicationVersionResponse::setStatus(const OAIApplicationVersionLifecycle &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetApplicationVersionResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetApplicationVersionResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetApplicationVersionResponse::getStatusReason() const {
    return m_status_reason;
}
void OAIGetApplicationVersionResponse::setStatusReason(const QString &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAIGetApplicationVersionResponse::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAIGetApplicationVersionResponse::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

bool OAIGetApplicationVersionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetApplicationVersionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_version_isValid && m_creation_time_isValid && m_definition_content_isValid && m_name_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
