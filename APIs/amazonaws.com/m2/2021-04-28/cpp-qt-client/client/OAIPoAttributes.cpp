/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPoAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPoAttributes::OAIPoAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPoAttributes::OAIPoAttributes() {
    this->initializeModel();
}

OAIPoAttributes::~OAIPoAttributes() {}

void OAIPoAttributes::initializeModel() {

    m_encoding_isSet = false;
    m_encoding_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_member_file_extensions_isSet = false;
    m_member_file_extensions_isValid = false;
}

void OAIPoAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPoAttributes::fromJsonObject(QJsonObject json) {

    m_encoding_isValid = ::OpenAPI::fromJsonValue(m_encoding, json[QString("encoding")]);
    m_encoding_isSet = !json[QString("encoding")].isNull() && m_encoding_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_member_file_extensions_isValid = ::OpenAPI::fromJsonValue(m_member_file_extensions, json[QString("memberFileExtensions")]);
    m_member_file_extensions_isSet = !json[QString("memberFileExtensions")].isNull() && m_member_file_extensions_isValid;
}

QString OAIPoAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPoAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_encoding_isSet) {
        obj.insert(QString("encoding"), ::OpenAPI::toJsonValue(m_encoding));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_member_file_extensions.isSet()) {
        obj.insert(QString("memberFileExtensions"), ::OpenAPI::toJsonValue(m_member_file_extensions));
    }
    return obj;
}

QString OAIPoAttributes::getEncoding() const {
    return m_encoding;
}
void OAIPoAttributes::setEncoding(const QString &encoding) {
    m_encoding = encoding;
    m_encoding_isSet = true;
}

bool OAIPoAttributes::is_encoding_Set() const{
    return m_encoding_isSet;
}

bool OAIPoAttributes::is_encoding_Valid() const{
    return m_encoding_isValid;
}

QString OAIPoAttributes::getFormat() const {
    return m_format;
}
void OAIPoAttributes::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIPoAttributes::is_format_Set() const{
    return m_format_isSet;
}

bool OAIPoAttributes::is_format_Valid() const{
    return m_format_isValid;
}

QList OAIPoAttributes::getMemberFileExtensions() const {
    return m_member_file_extensions;
}
void OAIPoAttributes::setMemberFileExtensions(const QList &member_file_extensions) {
    m_member_file_extensions = member_file_extensions;
    m_member_file_extensions_isSet = true;
}

bool OAIPoAttributes::is_member_file_extensions_Set() const{
    return m_member_file_extensions_isSet;
}

bool OAIPoAttributes::is_member_file_extensions_Valid() const{
    return m_member_file_extensions_isValid;
}

bool OAIPoAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_file_extensions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPoAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_format_isValid && m_member_file_extensions_isValid && true;
}

} // namespace OpenAPI
