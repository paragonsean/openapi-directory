/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPendingMaintenance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPendingMaintenance::OAIPendingMaintenance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPendingMaintenance::OAIPendingMaintenance() {
    this->initializeModel();
}

OAIPendingMaintenance::~OAIPendingMaintenance() {}

void OAIPendingMaintenance::initializeModel() {

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;
}

void OAIPendingMaintenance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPendingMaintenance::fromJsonObject(QJsonObject json) {

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("engineVersion")]);
    m_engine_version_isSet = !json[QString("engineVersion")].isNull() && m_engine_version_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("schedule")]);
    m_schedule_isSet = !json[QString("schedule")].isNull() && m_schedule_isValid;
}

QString OAIPendingMaintenance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPendingMaintenance::asJsonObject() const {
    QJsonObject obj;
    if (m_engine_version_isSet) {
        obj.insert(QString("engineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_schedule.isSet()) {
        obj.insert(QString("schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    return obj;
}

QString OAIPendingMaintenance::getEngineVersion() const {
    return m_engine_version;
}
void OAIPendingMaintenance::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIPendingMaintenance::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIPendingMaintenance::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

OAIPendingMaintenance_schedule OAIPendingMaintenance::getSchedule() const {
    return m_schedule;
}
void OAIPendingMaintenance::setSchedule(const OAIPendingMaintenance_schedule &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIPendingMaintenance::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIPendingMaintenance::is_schedule_Valid() const{
    return m_schedule_isValid;
}

bool OAIPendingMaintenance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPendingMaintenance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
