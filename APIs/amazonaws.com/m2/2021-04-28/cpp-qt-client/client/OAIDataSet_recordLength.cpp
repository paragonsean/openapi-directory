/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSet_recordLength.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSet_recordLength::OAIDataSet_recordLength(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSet_recordLength::OAIDataSet_recordLength() {
    this->initializeModel();
}

OAIDataSet_recordLength::~OAIDataSet_recordLength() {}

void OAIDataSet_recordLength::initializeModel() {

    m_max_isSet = false;
    m_max_isValid = false;

    m_min_isSet = false;
    m_min_isValid = false;
}

void OAIDataSet_recordLength::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSet_recordLength::fromJsonObject(QJsonObject json) {

    m_max_isValid = ::OpenAPI::fromJsonValue(m_max, json[QString("max")]);
    m_max_isSet = !json[QString("max")].isNull() && m_max_isValid;

    m_min_isValid = ::OpenAPI::fromJsonValue(m_min, json[QString("min")]);
    m_min_isSet = !json[QString("min")].isNull() && m_min_isValid;
}

QString OAIDataSet_recordLength::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSet_recordLength::asJsonObject() const {
    QJsonObject obj;
    if (m_max_isSet) {
        obj.insert(QString("max"), ::OpenAPI::toJsonValue(m_max));
    }
    if (m_min_isSet) {
        obj.insert(QString("min"), ::OpenAPI::toJsonValue(m_min));
    }
    return obj;
}

qint32 OAIDataSet_recordLength::getMax() const {
    return m_max;
}
void OAIDataSet_recordLength::setMax(const qint32 &max) {
    m_max = max;
    m_max_isSet = true;
}

bool OAIDataSet_recordLength::is_max_Set() const{
    return m_max_isSet;
}

bool OAIDataSet_recordLength::is_max_Valid() const{
    return m_max_isValid;
}

qint32 OAIDataSet_recordLength::getMin() const {
    return m_min;
}
void OAIDataSet_recordLength::setMin(const qint32 &min) {
    m_min = min;
    m_min_isSet = true;
}

bool OAIDataSet_recordLength::is_min_Set() const{
    return m_min_isSet;
}

bool OAIDataSet_recordLength::is_min_Valid() const{
    return m_min_isValid;
}

bool OAIDataSet_recordLength::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSet_recordLength::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_max_isValid && m_min_isValid && true;
}

} // namespace OpenAPI
