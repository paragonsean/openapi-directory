/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVsamAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVsamAttributes::OAIVsamAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVsamAttributes::OAIVsamAttributes() {
    this->initializeModel();
}

OAIVsamAttributes::~OAIVsamAttributes() {}

void OAIVsamAttributes::initializeModel() {

    m_alternate_keys_isSet = false;
    m_alternate_keys_isValid = false;

    m_compressed_isSet = false;
    m_compressed_isValid = false;

    m_encoding_isSet = false;
    m_encoding_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_primary_key_isSet = false;
    m_primary_key_isValid = false;
}

void OAIVsamAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVsamAttributes::fromJsonObject(QJsonObject json) {

    m_alternate_keys_isValid = ::OpenAPI::fromJsonValue(m_alternate_keys, json[QString("alternateKeys")]);
    m_alternate_keys_isSet = !json[QString("alternateKeys")].isNull() && m_alternate_keys_isValid;

    m_compressed_isValid = ::OpenAPI::fromJsonValue(m_compressed, json[QString("compressed")]);
    m_compressed_isSet = !json[QString("compressed")].isNull() && m_compressed_isValid;

    m_encoding_isValid = ::OpenAPI::fromJsonValue(m_encoding, json[QString("encoding")]);
    m_encoding_isSet = !json[QString("encoding")].isNull() && m_encoding_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_primary_key_isValid = ::OpenAPI::fromJsonValue(m_primary_key, json[QString("primaryKey")]);
    m_primary_key_isSet = !json[QString("primaryKey")].isNull() && m_primary_key_isValid;
}

QString OAIVsamAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVsamAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_alternate_keys.isSet()) {
        obj.insert(QString("alternateKeys"), ::OpenAPI::toJsonValue(m_alternate_keys));
    }
    if (m_compressed_isSet) {
        obj.insert(QString("compressed"), ::OpenAPI::toJsonValue(m_compressed));
    }
    if (m_encoding_isSet) {
        obj.insert(QString("encoding"), ::OpenAPI::toJsonValue(m_encoding));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_primary_key.isSet()) {
        obj.insert(QString("primaryKey"), ::OpenAPI::toJsonValue(m_primary_key));
    }
    return obj;
}

QList OAIVsamAttributes::getAlternateKeys() const {
    return m_alternate_keys;
}
void OAIVsamAttributes::setAlternateKeys(const QList &alternate_keys) {
    m_alternate_keys = alternate_keys;
    m_alternate_keys_isSet = true;
}

bool OAIVsamAttributes::is_alternate_keys_Set() const{
    return m_alternate_keys_isSet;
}

bool OAIVsamAttributes::is_alternate_keys_Valid() const{
    return m_alternate_keys_isValid;
}

bool OAIVsamAttributes::getCompressed() const {
    return m_compressed;
}
void OAIVsamAttributes::setCompressed(const bool &compressed) {
    m_compressed = compressed;
    m_compressed_isSet = true;
}

bool OAIVsamAttributes::is_compressed_Set() const{
    return m_compressed_isSet;
}

bool OAIVsamAttributes::is_compressed_Valid() const{
    return m_compressed_isValid;
}

QString OAIVsamAttributes::getEncoding() const {
    return m_encoding;
}
void OAIVsamAttributes::setEncoding(const QString &encoding) {
    m_encoding = encoding;
    m_encoding_isSet = true;
}

bool OAIVsamAttributes::is_encoding_Set() const{
    return m_encoding_isSet;
}

bool OAIVsamAttributes::is_encoding_Valid() const{
    return m_encoding_isValid;
}

QString OAIVsamAttributes::getFormat() const {
    return m_format;
}
void OAIVsamAttributes::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIVsamAttributes::is_format_Set() const{
    return m_format_isSet;
}

bool OAIVsamAttributes::is_format_Valid() const{
    return m_format_isValid;
}

OAIVsamDetailAttributes_primaryKey OAIVsamAttributes::getPrimaryKey() const {
    return m_primary_key;
}
void OAIVsamAttributes::setPrimaryKey(const OAIVsamDetailAttributes_primaryKey &primary_key) {
    m_primary_key = primary_key;
    m_primary_key_isSet = true;
}

bool OAIVsamAttributes::is_primary_key_Set() const{
    return m_primary_key_isSet;
}

bool OAIVsamAttributes::is_primary_key_Valid() const{
    return m_primary_key_isValid;
}

bool OAIVsamAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alternate_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compressed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_key.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVsamAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_format_isValid && true;
}

} // namespace OpenAPI
