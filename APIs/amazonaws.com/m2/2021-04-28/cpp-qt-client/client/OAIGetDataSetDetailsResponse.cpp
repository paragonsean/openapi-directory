/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDataSetDetailsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDataSetDetailsResponse::OAIGetDataSetDetailsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDataSetDetailsResponse::OAIGetDataSetDetailsResponse() {
    this->initializeModel();
}

OAIGetDataSetDetailsResponse::~OAIGetDataSetDetailsResponse() {}

void OAIGetDataSetDetailsResponse::initializeModel() {

    m_blocksize_isSet = false;
    m_blocksize_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_data_set_name_isSet = false;
    m_data_set_name_isValid = false;

    m_data_set_org_isSet = false;
    m_data_set_org_isValid = false;

    m_last_referenced_time_isSet = false;
    m_last_referenced_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_record_length_isSet = false;
    m_record_length_isValid = false;
}

void OAIGetDataSetDetailsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDataSetDetailsResponse::fromJsonObject(QJsonObject json) {

    m_blocksize_isValid = ::OpenAPI::fromJsonValue(m_blocksize, json[QString("blocksize")]);
    m_blocksize_isSet = !json[QString("blocksize")].isNull() && m_blocksize_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_data_set_name_isValid = ::OpenAPI::fromJsonValue(m_data_set_name, json[QString("dataSetName")]);
    m_data_set_name_isSet = !json[QString("dataSetName")].isNull() && m_data_set_name_isValid;

    m_data_set_org_isValid = ::OpenAPI::fromJsonValue(m_data_set_org, json[QString("dataSetOrg")]);
    m_data_set_org_isSet = !json[QString("dataSetOrg")].isNull() && m_data_set_org_isValid;

    m_last_referenced_time_isValid = ::OpenAPI::fromJsonValue(m_last_referenced_time, json[QString("lastReferencedTime")]);
    m_last_referenced_time_isSet = !json[QString("lastReferencedTime")].isNull() && m_last_referenced_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("lastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("lastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_record_length_isValid = ::OpenAPI::fromJsonValue(m_record_length, json[QString("recordLength")]);
    m_record_length_isSet = !json[QString("recordLength")].isNull() && m_record_length_isValid;
}

QString OAIGetDataSetDetailsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDataSetDetailsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_blocksize_isSet) {
        obj.insert(QString("blocksize"), ::OpenAPI::toJsonValue(m_blocksize));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_data_set_name_isSet) {
        obj.insert(QString("dataSetName"), ::OpenAPI::toJsonValue(m_data_set_name));
    }
    if (m_data_set_org.isSet()) {
        obj.insert(QString("dataSetOrg"), ::OpenAPI::toJsonValue(m_data_set_org));
    }
    if (m_last_referenced_time_isSet) {
        obj.insert(QString("lastReferencedTime"), ::OpenAPI::toJsonValue(m_last_referenced_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("lastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_record_length_isSet) {
        obj.insert(QString("recordLength"), ::OpenAPI::toJsonValue(m_record_length));
    }
    return obj;
}

qint32 OAIGetDataSetDetailsResponse::getBlocksize() const {
    return m_blocksize;
}
void OAIGetDataSetDetailsResponse::setBlocksize(const qint32 &blocksize) {
    m_blocksize = blocksize;
    m_blocksize_isSet = true;
}

bool OAIGetDataSetDetailsResponse::is_blocksize_Set() const{
    return m_blocksize_isSet;
}

bool OAIGetDataSetDetailsResponse::is_blocksize_Valid() const{
    return m_blocksize_isValid;
}

QDateTime OAIGetDataSetDetailsResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIGetDataSetDetailsResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIGetDataSetDetailsResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIGetDataSetDetailsResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIGetDataSetDetailsResponse::getDataSetName() const {
    return m_data_set_name;
}
void OAIGetDataSetDetailsResponse::setDataSetName(const QString &data_set_name) {
    m_data_set_name = data_set_name;
    m_data_set_name_isSet = true;
}

bool OAIGetDataSetDetailsResponse::is_data_set_name_Set() const{
    return m_data_set_name_isSet;
}

bool OAIGetDataSetDetailsResponse::is_data_set_name_Valid() const{
    return m_data_set_name_isValid;
}

OAIGetDataSetDetailsResponse_dataSetOrg OAIGetDataSetDetailsResponse::getDataSetOrg() const {
    return m_data_set_org;
}
void OAIGetDataSetDetailsResponse::setDataSetOrg(const OAIGetDataSetDetailsResponse_dataSetOrg &data_set_org) {
    m_data_set_org = data_set_org;
    m_data_set_org_isSet = true;
}

bool OAIGetDataSetDetailsResponse::is_data_set_org_Set() const{
    return m_data_set_org_isSet;
}

bool OAIGetDataSetDetailsResponse::is_data_set_org_Valid() const{
    return m_data_set_org_isValid;
}

QDateTime OAIGetDataSetDetailsResponse::getLastReferencedTime() const {
    return m_last_referenced_time;
}
void OAIGetDataSetDetailsResponse::setLastReferencedTime(const QDateTime &last_referenced_time) {
    m_last_referenced_time = last_referenced_time;
    m_last_referenced_time_isSet = true;
}

bool OAIGetDataSetDetailsResponse::is_last_referenced_time_Set() const{
    return m_last_referenced_time_isSet;
}

bool OAIGetDataSetDetailsResponse::is_last_referenced_time_Valid() const{
    return m_last_referenced_time_isValid;
}

QDateTime OAIGetDataSetDetailsResponse::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIGetDataSetDetailsResponse::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIGetDataSetDetailsResponse::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIGetDataSetDetailsResponse::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QString OAIGetDataSetDetailsResponse::getLocation() const {
    return m_location;
}
void OAIGetDataSetDetailsResponse::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIGetDataSetDetailsResponse::is_location_Set() const{
    return m_location_isSet;
}

bool OAIGetDataSetDetailsResponse::is_location_Valid() const{
    return m_location_isValid;
}

qint32 OAIGetDataSetDetailsResponse::getRecordLength() const {
    return m_record_length;
}
void OAIGetDataSetDetailsResponse::setRecordLength(const qint32 &record_length) {
    m_record_length = record_length;
    m_record_length_isSet = true;
}

bool OAIGetDataSetDetailsResponse::is_record_length_Set() const{
    return m_record_length_isSet;
}

bool OAIGetDataSetDetailsResponse::is_record_length_Valid() const{
    return m_record_length_isValid;
}

bool OAIGetDataSetDetailsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blocksize_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_org.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_referenced_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_length_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDataSetDetailsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_set_name_isValid && true;
}

} // namespace OpenAPI
