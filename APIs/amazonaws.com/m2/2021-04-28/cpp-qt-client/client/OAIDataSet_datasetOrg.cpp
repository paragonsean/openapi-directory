/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSet_datasetOrg.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSet_datasetOrg::OAIDataSet_datasetOrg(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSet_datasetOrg::OAIDataSet_datasetOrg() {
    this->initializeModel();
}

OAIDataSet_datasetOrg::~OAIDataSet_datasetOrg() {}

void OAIDataSet_datasetOrg::initializeModel() {

    m_gdg_isSet = false;
    m_gdg_isValid = false;

    m_po_isSet = false;
    m_po_isValid = false;

    m_ps_isSet = false;
    m_ps_isValid = false;

    m_vsam_isSet = false;
    m_vsam_isValid = false;
}

void OAIDataSet_datasetOrg::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSet_datasetOrg::fromJsonObject(QJsonObject json) {

    m_gdg_isValid = ::OpenAPI::fromJsonValue(m_gdg, json[QString("gdg")]);
    m_gdg_isSet = !json[QString("gdg")].isNull() && m_gdg_isValid;

    m_po_isValid = ::OpenAPI::fromJsonValue(m_po, json[QString("po")]);
    m_po_isSet = !json[QString("po")].isNull() && m_po_isValid;

    m_ps_isValid = ::OpenAPI::fromJsonValue(m_ps, json[QString("ps")]);
    m_ps_isSet = !json[QString("ps")].isNull() && m_ps_isValid;

    m_vsam_isValid = ::OpenAPI::fromJsonValue(m_vsam, json[QString("vsam")]);
    m_vsam_isSet = !json[QString("vsam")].isNull() && m_vsam_isValid;
}

QString OAIDataSet_datasetOrg::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSet_datasetOrg::asJsonObject() const {
    QJsonObject obj;
    if (m_gdg.isSet()) {
        obj.insert(QString("gdg"), ::OpenAPI::toJsonValue(m_gdg));
    }
    if (m_po.isSet()) {
        obj.insert(QString("po"), ::OpenAPI::toJsonValue(m_po));
    }
    if (m_ps.isSet()) {
        obj.insert(QString("ps"), ::OpenAPI::toJsonValue(m_ps));
    }
    if (m_vsam.isSet()) {
        obj.insert(QString("vsam"), ::OpenAPI::toJsonValue(m_vsam));
    }
    return obj;
}

OAIDatasetOrgAttributes_gdg OAIDataSet_datasetOrg::getGdg() const {
    return m_gdg;
}
void OAIDataSet_datasetOrg::setGdg(const OAIDatasetOrgAttributes_gdg &gdg) {
    m_gdg = gdg;
    m_gdg_isSet = true;
}

bool OAIDataSet_datasetOrg::is_gdg_Set() const{
    return m_gdg_isSet;
}

bool OAIDataSet_datasetOrg::is_gdg_Valid() const{
    return m_gdg_isValid;
}

OAIDatasetOrgAttributes_po OAIDataSet_datasetOrg::getPo() const {
    return m_po;
}
void OAIDataSet_datasetOrg::setPo(const OAIDatasetOrgAttributes_po &po) {
    m_po = po;
    m_po_isSet = true;
}

bool OAIDataSet_datasetOrg::is_po_Set() const{
    return m_po_isSet;
}

bool OAIDataSet_datasetOrg::is_po_Valid() const{
    return m_po_isValid;
}

OAIDatasetOrgAttributes_ps OAIDataSet_datasetOrg::getPs() const {
    return m_ps;
}
void OAIDataSet_datasetOrg::setPs(const OAIDatasetOrgAttributes_ps &ps) {
    m_ps = ps;
    m_ps_isSet = true;
}

bool OAIDataSet_datasetOrg::is_ps_Set() const{
    return m_ps_isSet;
}

bool OAIDataSet_datasetOrg::is_ps_Valid() const{
    return m_ps_isValid;
}

OAIDatasetOrgAttributes_vsam OAIDataSet_datasetOrg::getVsam() const {
    return m_vsam;
}
void OAIDataSet_datasetOrg::setVsam(const OAIDatasetOrgAttributes_vsam &vsam) {
    m_vsam = vsam;
    m_vsam_isSet = true;
}

bool OAIDataSet_datasetOrg::is_vsam_Set() const{
    return m_vsam_isSet;
}

bool OAIDataSet_datasetOrg::is_vsam_Valid() const{
    return m_vsam_isValid;
}

bool OAIDataSet_datasetOrg::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gdg.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_po.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ps.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vsam.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSet_datasetOrg::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
