/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListEngineVersionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListEngineVersionsResponse::OAIListEngineVersionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListEngineVersionsResponse::OAIListEngineVersionsResponse() {
    this->initializeModel();
}

OAIListEngineVersionsResponse::~OAIListEngineVersionsResponse() {}

void OAIListEngineVersionsResponse::initializeModel() {

    m_engine_versions_isSet = false;
    m_engine_versions_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListEngineVersionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListEngineVersionsResponse::fromJsonObject(QJsonObject json) {

    m_engine_versions_isValid = ::OpenAPI::fromJsonValue(m_engine_versions, json[QString("engineVersions")]);
    m_engine_versions_isSet = !json[QString("engineVersions")].isNull() && m_engine_versions_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListEngineVersionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListEngineVersionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_engine_versions.isSet()) {
        obj.insert(QString("engineVersions"), ::OpenAPI::toJsonValue(m_engine_versions));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListEngineVersionsResponse::getEngineVersions() const {
    return m_engine_versions;
}
void OAIListEngineVersionsResponse::setEngineVersions(const QList &engine_versions) {
    m_engine_versions = engine_versions;
    m_engine_versions_isSet = true;
}

bool OAIListEngineVersionsResponse::is_engine_versions_Set() const{
    return m_engine_versions_isSet;
}

bool OAIListEngineVersionsResponse::is_engine_versions_Valid() const{
    return m_engine_versions_isValid;
}

QString OAIListEngineVersionsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListEngineVersionsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListEngineVersionsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListEngineVersionsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListEngineVersionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_engine_versions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListEngineVersionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_engine_versions_isValid && true;
}

} // namespace OpenAPI
