/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetApplicationResponse_latestVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetApplicationResponse_latestVersion::OAIGetApplicationResponse_latestVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetApplicationResponse_latestVersion::OAIGetApplicationResponse_latestVersion() {
    this->initializeModel();
}

OAIGetApplicationResponse_latestVersion::~OAIGetApplicationResponse_latestVersion() {}

void OAIGetApplicationResponse_latestVersion::initializeModel() {

    m_application_version_isSet = false;
    m_application_version_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;
}

void OAIGetApplicationResponse_latestVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetApplicationResponse_latestVersion::fromJsonObject(QJsonObject json) {

    m_application_version_isValid = ::OpenAPI::fromJsonValue(m_application_version, json[QString("applicationVersion")]);
    m_application_version_isSet = !json[QString("applicationVersion")].isNull() && m_application_version_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("statusReason")]);
    m_status_reason_isSet = !json[QString("statusReason")].isNull() && m_status_reason_isValid;
}

QString OAIGetApplicationResponse_latestVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetApplicationResponse_latestVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_application_version_isSet) {
        obj.insert(QString("applicationVersion"), ::OpenAPI::toJsonValue(m_application_version));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_reason_isSet) {
        obj.insert(QString("statusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    return obj;
}

qint32 OAIGetApplicationResponse_latestVersion::getApplicationVersion() const {
    return m_application_version;
}
void OAIGetApplicationResponse_latestVersion::setApplicationVersion(const qint32 &application_version) {
    m_application_version = application_version;
    m_application_version_isSet = true;
}

bool OAIGetApplicationResponse_latestVersion::is_application_version_Set() const{
    return m_application_version_isSet;
}

bool OAIGetApplicationResponse_latestVersion::is_application_version_Valid() const{
    return m_application_version_isValid;
}

QDateTime OAIGetApplicationResponse_latestVersion::getCreationTime() const {
    return m_creation_time;
}
void OAIGetApplicationResponse_latestVersion::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIGetApplicationResponse_latestVersion::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIGetApplicationResponse_latestVersion::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAIApplicationVersionLifecycle OAIGetApplicationResponse_latestVersion::getStatus() const {
    return m_status;
}
void OAIGetApplicationResponse_latestVersion::setStatus(const OAIApplicationVersionLifecycle &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetApplicationResponse_latestVersion::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetApplicationResponse_latestVersion::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetApplicationResponse_latestVersion::getStatusReason() const {
    return m_status_reason;
}
void OAIGetApplicationResponse_latestVersion::setStatusReason(const QString &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAIGetApplicationResponse_latestVersion::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAIGetApplicationResponse_latestVersion::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

bool OAIGetApplicationResponse_latestVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetApplicationResponse_latestVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_version_isValid && m_creation_time_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
