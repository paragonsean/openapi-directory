/*
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CreateEnvironmentRequestHighAvailabilityConfig;
import org.openapitools.client.model.StorageConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateEnvironmentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:48.998910-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateEnvironmentRequest {
  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * The engine type for the runtime environment.
   */
  @JsonAdapter(EngineTypeEnum.Adapter.class)
  public enum EngineTypeEnum {
    MICROFOCUS("microfocus"),
    
    BLUAGE("bluage");

    private String value;

    EngineTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EngineTypeEnum fromValue(String value) {
      for (EngineTypeEnum b : EngineTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EngineTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EngineTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EngineTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EngineTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EngineTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENGINE_TYPE = "engineType";
  @SerializedName(SERIALIZED_NAME_ENGINE_TYPE)
  private EngineTypeEnum engineType;

  public static final String SERIALIZED_NAME_ENGINE_VERSION = "engineVersion";
  @SerializedName(SERIALIZED_NAME_ENGINE_VERSION)
  private String engineVersion;

  public static final String SERIALIZED_NAME_HIGH_AVAILABILITY_CONFIG = "highAvailabilityConfig";
  @SerializedName(SERIALIZED_NAME_HIGH_AVAILABILITY_CONFIG)
  private CreateEnvironmentRequestHighAvailabilityConfig highAvailabilityConfig;

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "instanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private String instanceType;

  public static final String SERIALIZED_NAME_KMS_KEY_ID = "kmsKeyId";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_ID)
  private String kmsKeyId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PREFERRED_MAINTENANCE_WINDOW = "preferredMaintenanceWindow";
  @SerializedName(SERIALIZED_NAME_PREFERRED_MAINTENANCE_WINDOW)
  private String preferredMaintenanceWindow;

  public static final String SERIALIZED_NAME_PUBLICLY_ACCESSIBLE = "publiclyAccessible";
  @SerializedName(SERIALIZED_NAME_PUBLICLY_ACCESSIBLE)
  private Boolean publiclyAccessible;

  public static final String SERIALIZED_NAME_SECURITY_GROUP_IDS = "securityGroupIds";
  @SerializedName(SERIALIZED_NAME_SECURITY_GROUP_IDS)
  private List<String> securityGroupIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_STORAGE_CONFIGURATIONS = "storageConfigurations";
  @SerializedName(SERIALIZED_NAME_STORAGE_CONFIGURATIONS)
  private List<StorageConfiguration> storageConfigurations = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBNET_IDS = "subnetIds";
  @SerializedName(SERIALIZED_NAME_SUBNET_IDS)
  private List<String> subnetIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateEnvironmentRequest() {
  }

  public CreateEnvironmentRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Unique, case-sensitive identifier you provide to ensure the idempotency of the request to create an environment. The service generates the clientToken when the API call is triggered. The token expires after one hour, so if you retry the API within this timeframe with the same clientToken, you will get the same response. The service also handles deleting the clientToken after it expires. 
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public CreateEnvironmentRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the runtime environment.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateEnvironmentRequest engineType(EngineTypeEnum engineType) {
    this.engineType = engineType;
    return this;
  }

  /**
   * The engine type for the runtime environment.
   * @return engineType
   */
  @javax.annotation.Nonnull
  public EngineTypeEnum getEngineType() {
    return engineType;
  }

  public void setEngineType(EngineTypeEnum engineType) {
    this.engineType = engineType;
  }


  public CreateEnvironmentRequest engineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
    return this;
  }

  /**
   * The version of the engine type for the runtime environment.
   * @return engineVersion
   */
  @javax.annotation.Nullable
  public String getEngineVersion() {
    return engineVersion;
  }

  public void setEngineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
  }


  public CreateEnvironmentRequest highAvailabilityConfig(CreateEnvironmentRequestHighAvailabilityConfig highAvailabilityConfig) {
    this.highAvailabilityConfig = highAvailabilityConfig;
    return this;
  }

  /**
   * Get highAvailabilityConfig
   * @return highAvailabilityConfig
   */
  @javax.annotation.Nullable
  public CreateEnvironmentRequestHighAvailabilityConfig getHighAvailabilityConfig() {
    return highAvailabilityConfig;
  }

  public void setHighAvailabilityConfig(CreateEnvironmentRequestHighAvailabilityConfig highAvailabilityConfig) {
    this.highAvailabilityConfig = highAvailabilityConfig;
  }


  public CreateEnvironmentRequest instanceType(String instanceType) {
    this.instanceType = instanceType;
    return this;
  }

  /**
   * The type of instance for the runtime environment.
   * @return instanceType
   */
  @javax.annotation.Nonnull
  public String getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(String instanceType) {
    this.instanceType = instanceType;
  }


  public CreateEnvironmentRequest kmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
    return this;
  }

  /**
   * The identifier of a customer managed key.
   * @return kmsKeyId
   */
  @javax.annotation.Nullable
  public String getKmsKeyId() {
    return kmsKeyId;
  }

  public void setKmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
  }


  public CreateEnvironmentRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the runtime environment. Must be unique within the account.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateEnvironmentRequest preferredMaintenanceWindow(String preferredMaintenanceWindow) {
    this.preferredMaintenanceWindow = preferredMaintenanceWindow;
    return this;
  }

  /**
   * Configures the maintenance window you want for the runtime environment. If you do not provide a value, a random system-generated value will be assigned.
   * @return preferredMaintenanceWindow
   */
  @javax.annotation.Nullable
  public String getPreferredMaintenanceWindow() {
    return preferredMaintenanceWindow;
  }

  public void setPreferredMaintenanceWindow(String preferredMaintenanceWindow) {
    this.preferredMaintenanceWindow = preferredMaintenanceWindow;
  }


  public CreateEnvironmentRequest publiclyAccessible(Boolean publiclyAccessible) {
    this.publiclyAccessible = publiclyAccessible;
    return this;
  }

  /**
   * Specifies whether the runtime environment is publicly accessible.
   * @return publiclyAccessible
   */
  @javax.annotation.Nullable
  public Boolean getPubliclyAccessible() {
    return publiclyAccessible;
  }

  public void setPubliclyAccessible(Boolean publiclyAccessible) {
    this.publiclyAccessible = publiclyAccessible;
  }


  public CreateEnvironmentRequest securityGroupIds(List<String> securityGroupIds) {
    this.securityGroupIds = securityGroupIds;
    return this;
  }

  public CreateEnvironmentRequest addSecurityGroupIdsItem(String securityGroupIdsItem) {
    if (this.securityGroupIds == null) {
      this.securityGroupIds = new ArrayList<>();
    }
    this.securityGroupIds.add(securityGroupIdsItem);
    return this;
  }

  /**
   * The list of security groups for the VPC associated with this runtime environment.
   * @return securityGroupIds
   */
  @javax.annotation.Nullable
  public List<String> getSecurityGroupIds() {
    return securityGroupIds;
  }

  public void setSecurityGroupIds(List<String> securityGroupIds) {
    this.securityGroupIds = securityGroupIds;
  }


  public CreateEnvironmentRequest storageConfigurations(List<StorageConfiguration> storageConfigurations) {
    this.storageConfigurations = storageConfigurations;
    return this;
  }

  public CreateEnvironmentRequest addStorageConfigurationsItem(StorageConfiguration storageConfigurationsItem) {
    if (this.storageConfigurations == null) {
      this.storageConfigurations = new ArrayList<>();
    }
    this.storageConfigurations.add(storageConfigurationsItem);
    return this;
  }

  /**
   * Optional. The storage configurations for this runtime environment.
   * @return storageConfigurations
   */
  @javax.annotation.Nullable
  public List<StorageConfiguration> getStorageConfigurations() {
    return storageConfigurations;
  }

  public void setStorageConfigurations(List<StorageConfiguration> storageConfigurations) {
    this.storageConfigurations = storageConfigurations;
  }


  public CreateEnvironmentRequest subnetIds(List<String> subnetIds) {
    this.subnetIds = subnetIds;
    return this;
  }

  public CreateEnvironmentRequest addSubnetIdsItem(String subnetIdsItem) {
    if (this.subnetIds == null) {
      this.subnetIds = new ArrayList<>();
    }
    this.subnetIds.add(subnetIdsItem);
    return this;
  }

  /**
   * The list of subnets associated with the VPC for this runtime environment.
   * @return subnetIds
   */
  @javax.annotation.Nullable
  public List<String> getSubnetIds() {
    return subnetIds;
  }

  public void setSubnetIds(List<String> subnetIds) {
    this.subnetIds = subnetIds;
  }


  public CreateEnvironmentRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateEnvironmentRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The tags for the runtime environment.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateEnvironmentRequest createEnvironmentRequest = (CreateEnvironmentRequest) o;
    return Objects.equals(this.clientToken, createEnvironmentRequest.clientToken) &&
        Objects.equals(this.description, createEnvironmentRequest.description) &&
        Objects.equals(this.engineType, createEnvironmentRequest.engineType) &&
        Objects.equals(this.engineVersion, createEnvironmentRequest.engineVersion) &&
        Objects.equals(this.highAvailabilityConfig, createEnvironmentRequest.highAvailabilityConfig) &&
        Objects.equals(this.instanceType, createEnvironmentRequest.instanceType) &&
        Objects.equals(this.kmsKeyId, createEnvironmentRequest.kmsKeyId) &&
        Objects.equals(this.name, createEnvironmentRequest.name) &&
        Objects.equals(this.preferredMaintenanceWindow, createEnvironmentRequest.preferredMaintenanceWindow) &&
        Objects.equals(this.publiclyAccessible, createEnvironmentRequest.publiclyAccessible) &&
        Objects.equals(this.securityGroupIds, createEnvironmentRequest.securityGroupIds) &&
        Objects.equals(this.storageConfigurations, createEnvironmentRequest.storageConfigurations) &&
        Objects.equals(this.subnetIds, createEnvironmentRequest.subnetIds) &&
        Objects.equals(this.tags, createEnvironmentRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientToken, description, engineType, engineVersion, highAvailabilityConfig, instanceType, kmsKeyId, name, preferredMaintenanceWindow, publiclyAccessible, securityGroupIds, storageConfigurations, subnetIds, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateEnvironmentRequest {\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    engineType: ").append(toIndentedString(engineType)).append("\n");
    sb.append("    engineVersion: ").append(toIndentedString(engineVersion)).append("\n");
    sb.append("    highAvailabilityConfig: ").append(toIndentedString(highAvailabilityConfig)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    kmsKeyId: ").append(toIndentedString(kmsKeyId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    preferredMaintenanceWindow: ").append(toIndentedString(preferredMaintenanceWindow)).append("\n");
    sb.append("    publiclyAccessible: ").append(toIndentedString(publiclyAccessible)).append("\n");
    sb.append("    securityGroupIds: ").append(toIndentedString(securityGroupIds)).append("\n");
    sb.append("    storageConfigurations: ").append(toIndentedString(storageConfigurations)).append("\n");
    sb.append("    subnetIds: ").append(toIndentedString(subnetIds)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientToken");
    openapiFields.add("description");
    openapiFields.add("engineType");
    openapiFields.add("engineVersion");
    openapiFields.add("highAvailabilityConfig");
    openapiFields.add("instanceType");
    openapiFields.add("kmsKeyId");
    openapiFields.add("name");
    openapiFields.add("preferredMaintenanceWindow");
    openapiFields.add("publiclyAccessible");
    openapiFields.add("securityGroupIds");
    openapiFields.add("storageConfigurations");
    openapiFields.add("subnetIds");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("engineType");
    openapiRequiredFields.add("instanceType");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateEnvironmentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateEnvironmentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateEnvironmentRequest is not found in the empty JSON string", CreateEnvironmentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateEnvironmentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateEnvironmentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateEnvironmentRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) && !jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("engineType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engineType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engineType").toString()));
      }
      // validate the required field `engineType`
      EngineTypeEnum.validateJsonElement(jsonObj.get("engineType"));
      if ((jsonObj.get("engineVersion") != null && !jsonObj.get("engineVersion").isJsonNull()) && !jsonObj.get("engineVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engineVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engineVersion").toString()));
      }
      // validate the optional field `highAvailabilityConfig`
      if (jsonObj.get("highAvailabilityConfig") != null && !jsonObj.get("highAvailabilityConfig").isJsonNull()) {
        CreateEnvironmentRequestHighAvailabilityConfig.validateJsonElement(jsonObj.get("highAvailabilityConfig"));
      }
      if (!jsonObj.get("instanceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceType").toString()));
      }
      if ((jsonObj.get("kmsKeyId") != null && !jsonObj.get("kmsKeyId").isJsonNull()) && !jsonObj.get("kmsKeyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kmsKeyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kmsKeyId").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("preferredMaintenanceWindow") != null && !jsonObj.get("preferredMaintenanceWindow").isJsonNull()) && !jsonObj.get("preferredMaintenanceWindow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredMaintenanceWindow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredMaintenanceWindow").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("securityGroupIds") != null && !jsonObj.get("securityGroupIds").isJsonNull() && !jsonObj.get("securityGroupIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `securityGroupIds` to be an array in the JSON string but got `%s`", jsonObj.get("securityGroupIds").toString()));
      }
      if (jsonObj.get("storageConfigurations") != null && !jsonObj.get("storageConfigurations").isJsonNull()) {
        JsonArray jsonArraystorageConfigurations = jsonObj.getAsJsonArray("storageConfigurations");
        if (jsonArraystorageConfigurations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("storageConfigurations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `storageConfigurations` to be an array in the JSON string but got `%s`", jsonObj.get("storageConfigurations").toString()));
          }

          // validate the optional field `storageConfigurations` (array)
          for (int i = 0; i < jsonArraystorageConfigurations.size(); i++) {
            StorageConfiguration.validateJsonElement(jsonArraystorageConfigurations.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subnetIds") != null && !jsonObj.get("subnetIds").isJsonNull() && !jsonObj.get("subnetIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subnetIds` to be an array in the JSON string but got `%s`", jsonObj.get("subnetIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateEnvironmentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateEnvironmentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateEnvironmentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateEnvironmentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateEnvironmentRequest>() {
           @Override
           public void write(JsonWriter out, CreateEnvironmentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateEnvironmentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateEnvironmentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateEnvironmentRequest
   * @throws IOException if the JSON string is invalid with respect to CreateEnvironmentRequest
   */
  public static CreateEnvironmentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateEnvironmentRequest.class);
  }

  /**
   * Convert an instance of CreateEnvironmentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

