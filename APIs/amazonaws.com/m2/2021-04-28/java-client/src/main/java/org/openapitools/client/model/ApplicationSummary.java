/*
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ApplicationDeploymentLifecycle;
import org.openapitools.client.model.ApplicationLifecycle;
import org.openapitools.client.model.ApplicationVersionLifecycle;
import org.openapitools.client.model.EngineType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A subset of the possible application attributes. Used in the application list.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:48.998910-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationSummary {
  public static final String SERIALIZED_NAME_APPLICATION_ARN = "applicationArn";
  @SerializedName(SERIALIZED_NAME_APPLICATION_ARN)
  private String applicationArn;

  public static final String SERIALIZED_NAME_APPLICATION_ID = "applicationId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_ID)
  private String applicationId;

  public static final String SERIALIZED_NAME_APPLICATION_VERSION = "applicationVersion";
  @SerializedName(SERIALIZED_NAME_APPLICATION_VERSION)
  private Integer applicationVersion;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_DEPLOYMENT_STATUS = "deploymentStatus";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_STATUS)
  private ApplicationDeploymentLifecycle deploymentStatus;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENGINE_TYPE = "engineType";
  @SerializedName(SERIALIZED_NAME_ENGINE_TYPE)
  private EngineType engineType;

  public static final String SERIALIZED_NAME_ENVIRONMENT_ID = "environmentId";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_ID)
  private String environmentId;

  public static final String SERIALIZED_NAME_LAST_START_TIME = "lastStartTime";
  @SerializedName(SERIALIZED_NAME_LAST_START_TIME)
  private OffsetDateTime lastStartTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ROLE_ARN = "roleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ApplicationLifecycle status;

  public static final String SERIALIZED_NAME_VERSION_STATUS = "versionStatus";
  @SerializedName(SERIALIZED_NAME_VERSION_STATUS)
  private ApplicationVersionLifecycle versionStatus;

  public ApplicationSummary() {
  }

  public ApplicationSummary applicationArn(String applicationArn) {
    this.applicationArn = applicationArn;
    return this;
  }

  /**
   * Get applicationArn
   * @return applicationArn
   */
  @javax.annotation.Nonnull
  public String getApplicationArn() {
    return applicationArn;
  }

  public void setApplicationArn(String applicationArn) {
    this.applicationArn = applicationArn;
  }


  public ApplicationSummary applicationId(String applicationId) {
    this.applicationId = applicationId;
    return this;
  }

  /**
   * Get applicationId
   * @return applicationId
   */
  @javax.annotation.Nonnull
  public String getApplicationId() {
    return applicationId;
  }

  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }


  public ApplicationSummary applicationVersion(Integer applicationVersion) {
    this.applicationVersion = applicationVersion;
    return this;
  }

  /**
   * Get applicationVersion
   * @return applicationVersion
   */
  @javax.annotation.Nonnull
  public Integer getApplicationVersion() {
    return applicationVersion;
  }

  public void setApplicationVersion(Integer applicationVersion) {
    this.applicationVersion = applicationVersion;
  }


  public ApplicationSummary creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public ApplicationSummary deploymentStatus(ApplicationDeploymentLifecycle deploymentStatus) {
    this.deploymentStatus = deploymentStatus;
    return this;
  }

  /**
   * Get deploymentStatus
   * @return deploymentStatus
   */
  @javax.annotation.Nullable
  public ApplicationDeploymentLifecycle getDeploymentStatus() {
    return deploymentStatus;
  }

  public void setDeploymentStatus(ApplicationDeploymentLifecycle deploymentStatus) {
    this.deploymentStatus = deploymentStatus;
  }


  public ApplicationSummary description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ApplicationSummary engineType(EngineType engineType) {
    this.engineType = engineType;
    return this;
  }

  /**
   * Get engineType
   * @return engineType
   */
  @javax.annotation.Nonnull
  public EngineType getEngineType() {
    return engineType;
  }

  public void setEngineType(EngineType engineType) {
    this.engineType = engineType;
  }


  public ApplicationSummary environmentId(String environmentId) {
    this.environmentId = environmentId;
    return this;
  }

  /**
   * Get environmentId
   * @return environmentId
   */
  @javax.annotation.Nullable
  public String getEnvironmentId() {
    return environmentId;
  }

  public void setEnvironmentId(String environmentId) {
    this.environmentId = environmentId;
  }


  public ApplicationSummary lastStartTime(OffsetDateTime lastStartTime) {
    this.lastStartTime = lastStartTime;
    return this;
  }

  /**
   * Get lastStartTime
   * @return lastStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastStartTime() {
    return lastStartTime;
  }

  public void setLastStartTime(OffsetDateTime lastStartTime) {
    this.lastStartTime = lastStartTime;
  }


  public ApplicationSummary name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ApplicationSummary roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Get roleArn
   * @return roleArn
   */
  @javax.annotation.Nullable
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public ApplicationSummary status(ApplicationLifecycle status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public ApplicationLifecycle getStatus() {
    return status;
  }

  public void setStatus(ApplicationLifecycle status) {
    this.status = status;
  }


  public ApplicationSummary versionStatus(ApplicationVersionLifecycle versionStatus) {
    this.versionStatus = versionStatus;
    return this;
  }

  /**
   * Get versionStatus
   * @return versionStatus
   */
  @javax.annotation.Nullable
  public ApplicationVersionLifecycle getVersionStatus() {
    return versionStatus;
  }

  public void setVersionStatus(ApplicationVersionLifecycle versionStatus) {
    this.versionStatus = versionStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationSummary applicationSummary = (ApplicationSummary) o;
    return Objects.equals(this.applicationArn, applicationSummary.applicationArn) &&
        Objects.equals(this.applicationId, applicationSummary.applicationId) &&
        Objects.equals(this.applicationVersion, applicationSummary.applicationVersion) &&
        Objects.equals(this.creationTime, applicationSummary.creationTime) &&
        Objects.equals(this.deploymentStatus, applicationSummary.deploymentStatus) &&
        Objects.equals(this.description, applicationSummary.description) &&
        Objects.equals(this.engineType, applicationSummary.engineType) &&
        Objects.equals(this.environmentId, applicationSummary.environmentId) &&
        Objects.equals(this.lastStartTime, applicationSummary.lastStartTime) &&
        Objects.equals(this.name, applicationSummary.name) &&
        Objects.equals(this.roleArn, applicationSummary.roleArn) &&
        Objects.equals(this.status, applicationSummary.status) &&
        Objects.equals(this.versionStatus, applicationSummary.versionStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationArn, applicationId, applicationVersion, creationTime, deploymentStatus, description, engineType, environmentId, lastStartTime, name, roleArn, status, versionStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationSummary {\n");
    sb.append("    applicationArn: ").append(toIndentedString(applicationArn)).append("\n");
    sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    sb.append("    applicationVersion: ").append(toIndentedString(applicationVersion)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    deploymentStatus: ").append(toIndentedString(deploymentStatus)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    engineType: ").append(toIndentedString(engineType)).append("\n");
    sb.append("    environmentId: ").append(toIndentedString(environmentId)).append("\n");
    sb.append("    lastStartTime: ").append(toIndentedString(lastStartTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    versionStatus: ").append(toIndentedString(versionStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicationArn");
    openapiFields.add("applicationId");
    openapiFields.add("applicationVersion");
    openapiFields.add("creationTime");
    openapiFields.add("deploymentStatus");
    openapiFields.add("description");
    openapiFields.add("engineType");
    openapiFields.add("environmentId");
    openapiFields.add("lastStartTime");
    openapiFields.add("name");
    openapiFields.add("roleArn");
    openapiFields.add("status");
    openapiFields.add("versionStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("applicationArn");
    openapiRequiredFields.add("applicationId");
    openapiRequiredFields.add("applicationVersion");
    openapiRequiredFields.add("creationTime");
    openapiRequiredFields.add("engineType");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationSummary is not found in the empty JSON string", ApplicationSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApplicationSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `applicationArn`
      String.validateJsonElement(jsonObj.get("applicationArn"));
      // validate the required field `applicationId`
      String.validateJsonElement(jsonObj.get("applicationId"));
      // validate the required field `applicationVersion`
      Integer.validateJsonElement(jsonObj.get("applicationVersion"));
      // validate the required field `creationTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("creationTime"));
      // validate the optional field `deploymentStatus`
      if (jsonObj.get("deploymentStatus") != null && !jsonObj.get("deploymentStatus").isJsonNull()) {
        ApplicationDeploymentLifecycle.validateJsonElement(jsonObj.get("deploymentStatus"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the required field `engineType`
      EngineType.validateJsonElement(jsonObj.get("engineType"));
      // validate the optional field `environmentId`
      if (jsonObj.get("environmentId") != null && !jsonObj.get("environmentId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("environmentId"));
      }
      // validate the optional field `lastStartTime`
      if (jsonObj.get("lastStartTime") != null && !jsonObj.get("lastStartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastStartTime"));
      }
      // validate the required field `name`
      String.validateJsonElement(jsonObj.get("name"));
      // validate the optional field `roleArn`
      if (jsonObj.get("roleArn") != null && !jsonObj.get("roleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("roleArn"));
      }
      // validate the required field `status`
      ApplicationLifecycle.validateJsonElement(jsonObj.get("status"));
      // validate the optional field `versionStatus`
      if (jsonObj.get("versionStatus") != null && !jsonObj.get("versionStatus").isJsonNull()) {
        ApplicationVersionLifecycle.validateJsonElement(jsonObj.get("versionStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationSummary>() {
           @Override
           public void write(JsonWriter out, ApplicationSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationSummary
   * @throws IOException if the JSON string is invalid with respect to ApplicationSummary
   */
  public static ApplicationSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationSummary.class);
  }

  /**
   * Convert an instance of ApplicationSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

