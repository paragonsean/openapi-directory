/*
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.BatchJobExecutionStatus;
import org.openapitools.client.model.BatchJobType;
import org.openapitools.client.model.GetBatchJobExecutionResponseBatchJobIdentifier;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A subset of the possible batch job attributes. Used in the batch job list.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:48.998910-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchJobExecutionSummary {
  public static final String SERIALIZED_NAME_APPLICATION_ID = "applicationId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_ID)
  private String applicationId;

  public static final String SERIALIZED_NAME_BATCH_JOB_IDENTIFIER = "batchJobIdentifier";
  @SerializedName(SERIALIZED_NAME_BATCH_JOB_IDENTIFIER)
  private GetBatchJobExecutionResponseBatchJobIdentifier batchJobIdentifier;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_EXECUTION_ID = "executionId";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ID)
  private String executionId;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_JOB_NAME = "jobName";
  @SerializedName(SERIALIZED_NAME_JOB_NAME)
  private String jobName;

  public static final String SERIALIZED_NAME_JOB_TYPE = "jobType";
  @SerializedName(SERIALIZED_NAME_JOB_TYPE)
  private BatchJobType jobType;

  public static final String SERIALIZED_NAME_RETURN_CODE = "returnCode";
  @SerializedName(SERIALIZED_NAME_RETURN_CODE)
  private String returnCode;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private BatchJobExecutionStatus status;

  public BatchJobExecutionSummary() {
  }

  public BatchJobExecutionSummary applicationId(String applicationId) {
    this.applicationId = applicationId;
    return this;
  }

  /**
   * Get applicationId
   * @return applicationId
   */
  @javax.annotation.Nonnull
  public String getApplicationId() {
    return applicationId;
  }

  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }


  public BatchJobExecutionSummary batchJobIdentifier(GetBatchJobExecutionResponseBatchJobIdentifier batchJobIdentifier) {
    this.batchJobIdentifier = batchJobIdentifier;
    return this;
  }

  /**
   * Get batchJobIdentifier
   * @return batchJobIdentifier
   */
  @javax.annotation.Nullable
  public GetBatchJobExecutionResponseBatchJobIdentifier getBatchJobIdentifier() {
    return batchJobIdentifier;
  }

  public void setBatchJobIdentifier(GetBatchJobExecutionResponseBatchJobIdentifier batchJobIdentifier) {
    this.batchJobIdentifier = batchJobIdentifier;
  }


  public BatchJobExecutionSummary endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public BatchJobExecutionSummary executionId(String executionId) {
    this.executionId = executionId;
    return this;
  }

  /**
   * Get executionId
   * @return executionId
   */
  @javax.annotation.Nonnull
  public String getExecutionId() {
    return executionId;
  }

  public void setExecutionId(String executionId) {
    this.executionId = executionId;
  }


  public BatchJobExecutionSummary jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * Get jobId
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public BatchJobExecutionSummary jobName(String jobName) {
    this.jobName = jobName;
    return this;
  }

  /**
   * Get jobName
   * @return jobName
   */
  @javax.annotation.Nullable
  public String getJobName() {
    return jobName;
  }

  public void setJobName(String jobName) {
    this.jobName = jobName;
  }


  public BatchJobExecutionSummary jobType(BatchJobType jobType) {
    this.jobType = jobType;
    return this;
  }

  /**
   * Get jobType
   * @return jobType
   */
  @javax.annotation.Nullable
  public BatchJobType getJobType() {
    return jobType;
  }

  public void setJobType(BatchJobType jobType) {
    this.jobType = jobType;
  }


  public BatchJobExecutionSummary returnCode(String returnCode) {
    this.returnCode = returnCode;
    return this;
  }

  /**
   * Get returnCode
   * @return returnCode
   */
  @javax.annotation.Nullable
  public String getReturnCode() {
    return returnCode;
  }

  public void setReturnCode(String returnCode) {
    this.returnCode = returnCode;
  }


  public BatchJobExecutionSummary startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public BatchJobExecutionSummary status(BatchJobExecutionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public BatchJobExecutionStatus getStatus() {
    return status;
  }

  public void setStatus(BatchJobExecutionStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchJobExecutionSummary batchJobExecutionSummary = (BatchJobExecutionSummary) o;
    return Objects.equals(this.applicationId, batchJobExecutionSummary.applicationId) &&
        Objects.equals(this.batchJobIdentifier, batchJobExecutionSummary.batchJobIdentifier) &&
        Objects.equals(this.endTime, batchJobExecutionSummary.endTime) &&
        Objects.equals(this.executionId, batchJobExecutionSummary.executionId) &&
        Objects.equals(this.jobId, batchJobExecutionSummary.jobId) &&
        Objects.equals(this.jobName, batchJobExecutionSummary.jobName) &&
        Objects.equals(this.jobType, batchJobExecutionSummary.jobType) &&
        Objects.equals(this.returnCode, batchJobExecutionSummary.returnCode) &&
        Objects.equals(this.startTime, batchJobExecutionSummary.startTime) &&
        Objects.equals(this.status, batchJobExecutionSummary.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationId, batchJobIdentifier, endTime, executionId, jobId, jobName, jobType, returnCode, startTime, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchJobExecutionSummary {\n");
    sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    sb.append("    batchJobIdentifier: ").append(toIndentedString(batchJobIdentifier)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    executionId: ").append(toIndentedString(executionId)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    jobName: ").append(toIndentedString(jobName)).append("\n");
    sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
    sb.append("    returnCode: ").append(toIndentedString(returnCode)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicationId");
    openapiFields.add("batchJobIdentifier");
    openapiFields.add("endTime");
    openapiFields.add("executionId");
    openapiFields.add("jobId");
    openapiFields.add("jobName");
    openapiFields.add("jobType");
    openapiFields.add("returnCode");
    openapiFields.add("startTime");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("applicationId");
    openapiRequiredFields.add("executionId");
    openapiRequiredFields.add("startTime");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchJobExecutionSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchJobExecutionSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchJobExecutionSummary is not found in the empty JSON string", BatchJobExecutionSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchJobExecutionSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchJobExecutionSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BatchJobExecutionSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `applicationId`
      String.validateJsonElement(jsonObj.get("applicationId"));
      // validate the optional field `batchJobIdentifier`
      if (jsonObj.get("batchJobIdentifier") != null && !jsonObj.get("batchJobIdentifier").isJsonNull()) {
        GetBatchJobExecutionResponseBatchJobIdentifier.validateJsonElement(jsonObj.get("batchJobIdentifier"));
      }
      // validate the optional field `endTime`
      if (jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("endTime"));
      }
      // validate the required field `executionId`
      String.validateJsonElement(jsonObj.get("executionId"));
      // validate the optional field `jobId`
      if (jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("jobId"));
      }
      // validate the optional field `jobName`
      if (jsonObj.get("jobName") != null && !jsonObj.get("jobName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("jobName"));
      }
      // validate the optional field `jobType`
      if (jsonObj.get("jobType") != null && !jsonObj.get("jobType").isJsonNull()) {
        BatchJobType.validateJsonElement(jsonObj.get("jobType"));
      }
      // validate the optional field `returnCode`
      if (jsonObj.get("returnCode") != null && !jsonObj.get("returnCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("returnCode"));
      }
      // validate the required field `startTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("startTime"));
      // validate the required field `status`
      BatchJobExecutionStatus.validateJsonElement(jsonObj.get("status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchJobExecutionSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchJobExecutionSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchJobExecutionSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchJobExecutionSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchJobExecutionSummary>() {
           @Override
           public void write(JsonWriter out, BatchJobExecutionSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchJobExecutionSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchJobExecutionSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchJobExecutionSummary
   * @throws IOException if the JSON string is invalid with respect to BatchJobExecutionSummary
   */
  public static BatchJobExecutionSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchJobExecutionSummary.class);
  }

  /**
   * Convert an instance of BatchJobExecutionSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

