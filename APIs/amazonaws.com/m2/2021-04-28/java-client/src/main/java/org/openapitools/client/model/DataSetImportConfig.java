/*
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Identifies one or more data sets you want to import with the &lt;a&gt;CreateDataSetImportTask&lt;/a&gt; operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:48.998910-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataSetImportConfig {
  public static final String SERIALIZED_NAME_DATA_SETS = "dataSets";
  @SerializedName(SERIALIZED_NAME_DATA_SETS)
  private List dataSets;

  public static final String SERIALIZED_NAME_S3_LOCATION = "s3Location";
  @SerializedName(SERIALIZED_NAME_S3_LOCATION)
  private String s3Location;

  public DataSetImportConfig() {
  }

  public DataSetImportConfig dataSets(List dataSets) {
    this.dataSets = dataSets;
    return this;
  }

  /**
   * Get dataSets
   * @return dataSets
   */
  @javax.annotation.Nullable
  public List getDataSets() {
    return dataSets;
  }

  public void setDataSets(List dataSets) {
    this.dataSets = dataSets;
  }


  public DataSetImportConfig s3Location(String s3Location) {
    this.s3Location = s3Location;
    return this;
  }

  /**
   * Get s3Location
   * @return s3Location
   */
  @javax.annotation.Nullable
  public String getS3Location() {
    return s3Location;
  }

  public void setS3Location(String s3Location) {
    this.s3Location = s3Location;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataSetImportConfig dataSetImportConfig = (DataSetImportConfig) o;
    return Objects.equals(this.dataSets, dataSetImportConfig.dataSets) &&
        Objects.equals(this.s3Location, dataSetImportConfig.s3Location);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSets, s3Location);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataSetImportConfig {\n");
    sb.append("    dataSets: ").append(toIndentedString(dataSets)).append("\n");
    sb.append("    s3Location: ").append(toIndentedString(s3Location)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataSets");
    openapiFields.add("s3Location");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataSetImportConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataSetImportConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataSetImportConfig is not found in the empty JSON string", DataSetImportConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataSetImportConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataSetImportConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dataSets`
      if (jsonObj.get("dataSets") != null && !jsonObj.get("dataSets").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("dataSets"));
      }
      // validate the optional field `s3Location`
      if (jsonObj.get("s3Location") != null && !jsonObj.get("s3Location").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("s3Location"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataSetImportConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataSetImportConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataSetImportConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataSetImportConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<DataSetImportConfig>() {
           @Override
           public void write(JsonWriter out, DataSetImportConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataSetImportConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataSetImportConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataSetImportConfig
   * @throws IOException if the JSON string is invalid with respect to DataSetImportConfig
   */
  public static DataSetImportConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataSetImportConfig.class);
  }

  /**
   * Convert an instance of DataSetImportConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

