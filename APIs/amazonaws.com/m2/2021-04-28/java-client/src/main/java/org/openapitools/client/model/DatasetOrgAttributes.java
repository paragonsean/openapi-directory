/*
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DatasetOrgAttributesGdg;
import org.openapitools.client.model.DatasetOrgAttributesPo;
import org.openapitools.client.model.DatasetOrgAttributesPs;
import org.openapitools.client.model.DatasetOrgAttributesVsam;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Additional details about the data set. Different attributes correspond to different data set organizations. The values are populated based on datasetOrg, storageType and backend (Blu Age or Micro Focus).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:48.998910-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatasetOrgAttributes {
  public static final String SERIALIZED_NAME_GDG = "gdg";
  @SerializedName(SERIALIZED_NAME_GDG)
  private DatasetOrgAttributesGdg gdg;

  public static final String SERIALIZED_NAME_PO = "po";
  @SerializedName(SERIALIZED_NAME_PO)
  private DatasetOrgAttributesPo po;

  public static final String SERIALIZED_NAME_PS = "ps";
  @SerializedName(SERIALIZED_NAME_PS)
  private DatasetOrgAttributesPs ps;

  public static final String SERIALIZED_NAME_VSAM = "vsam";
  @SerializedName(SERIALIZED_NAME_VSAM)
  private DatasetOrgAttributesVsam vsam;

  public DatasetOrgAttributes() {
  }

  public DatasetOrgAttributes gdg(DatasetOrgAttributesGdg gdg) {
    this.gdg = gdg;
    return this;
  }

  /**
   * Get gdg
   * @return gdg
   */
  @javax.annotation.Nullable
  public DatasetOrgAttributesGdg getGdg() {
    return gdg;
  }

  public void setGdg(DatasetOrgAttributesGdg gdg) {
    this.gdg = gdg;
  }


  public DatasetOrgAttributes po(DatasetOrgAttributesPo po) {
    this.po = po;
    return this;
  }

  /**
   * Get po
   * @return po
   */
  @javax.annotation.Nullable
  public DatasetOrgAttributesPo getPo() {
    return po;
  }

  public void setPo(DatasetOrgAttributesPo po) {
    this.po = po;
  }


  public DatasetOrgAttributes ps(DatasetOrgAttributesPs ps) {
    this.ps = ps;
    return this;
  }

  /**
   * Get ps
   * @return ps
   */
  @javax.annotation.Nullable
  public DatasetOrgAttributesPs getPs() {
    return ps;
  }

  public void setPs(DatasetOrgAttributesPs ps) {
    this.ps = ps;
  }


  public DatasetOrgAttributes vsam(DatasetOrgAttributesVsam vsam) {
    this.vsam = vsam;
    return this;
  }

  /**
   * Get vsam
   * @return vsam
   */
  @javax.annotation.Nullable
  public DatasetOrgAttributesVsam getVsam() {
    return vsam;
  }

  public void setVsam(DatasetOrgAttributesVsam vsam) {
    this.vsam = vsam;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatasetOrgAttributes datasetOrgAttributes = (DatasetOrgAttributes) o;
    return Objects.equals(this.gdg, datasetOrgAttributes.gdg) &&
        Objects.equals(this.po, datasetOrgAttributes.po) &&
        Objects.equals(this.ps, datasetOrgAttributes.ps) &&
        Objects.equals(this.vsam, datasetOrgAttributes.vsam);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gdg, po, ps, vsam);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatasetOrgAttributes {\n");
    sb.append("    gdg: ").append(toIndentedString(gdg)).append("\n");
    sb.append("    po: ").append(toIndentedString(po)).append("\n");
    sb.append("    ps: ").append(toIndentedString(ps)).append("\n");
    sb.append("    vsam: ").append(toIndentedString(vsam)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gdg");
    openapiFields.add("po");
    openapiFields.add("ps");
    openapiFields.add("vsam");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatasetOrgAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatasetOrgAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatasetOrgAttributes is not found in the empty JSON string", DatasetOrgAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatasetOrgAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatasetOrgAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `gdg`
      if (jsonObj.get("gdg") != null && !jsonObj.get("gdg").isJsonNull()) {
        DatasetOrgAttributesGdg.validateJsonElement(jsonObj.get("gdg"));
      }
      // validate the optional field `po`
      if (jsonObj.get("po") != null && !jsonObj.get("po").isJsonNull()) {
        DatasetOrgAttributesPo.validateJsonElement(jsonObj.get("po"));
      }
      // validate the optional field `ps`
      if (jsonObj.get("ps") != null && !jsonObj.get("ps").isJsonNull()) {
        DatasetOrgAttributesPs.validateJsonElement(jsonObj.get("ps"));
      }
      // validate the optional field `vsam`
      if (jsonObj.get("vsam") != null && !jsonObj.get("vsam").isJsonNull()) {
        DatasetOrgAttributesVsam.validateJsonElement(jsonObj.get("vsam"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatasetOrgAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatasetOrgAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatasetOrgAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatasetOrgAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<DatasetOrgAttributes>() {
           @Override
           public void write(JsonWriter out, DatasetOrgAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatasetOrgAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatasetOrgAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatasetOrgAttributes
   * @throws IOException if the JSON string is invalid with respect to DatasetOrgAttributes
   */
  public static DatasetOrgAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatasetOrgAttributes.class);
  }

  /**
   * Convert an instance of DatasetOrgAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

