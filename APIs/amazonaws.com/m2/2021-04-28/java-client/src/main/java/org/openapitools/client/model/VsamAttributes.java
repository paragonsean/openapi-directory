/*
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.VsamDetailAttributesPrimaryKey;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The attributes of a VSAM type data set.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:48.998910-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VsamAttributes {
  public static final String SERIALIZED_NAME_ALTERNATE_KEYS = "alternateKeys";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_KEYS)
  private List alternateKeys;

  public static final String SERIALIZED_NAME_COMPRESSED = "compressed";
  @SerializedName(SERIALIZED_NAME_COMPRESSED)
  private Boolean compressed;

  public static final String SERIALIZED_NAME_ENCODING = "encoding";
  @SerializedName(SERIALIZED_NAME_ENCODING)
  private String encoding;

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private String format;

  public static final String SERIALIZED_NAME_PRIMARY_KEY = "primaryKey";
  @SerializedName(SERIALIZED_NAME_PRIMARY_KEY)
  private VsamDetailAttributesPrimaryKey primaryKey;

  public VsamAttributes() {
  }

  public VsamAttributes alternateKeys(List alternateKeys) {
    this.alternateKeys = alternateKeys;
    return this;
  }

  /**
   * Get alternateKeys
   * @return alternateKeys
   */
  @javax.annotation.Nullable
  public List getAlternateKeys() {
    return alternateKeys;
  }

  public void setAlternateKeys(List alternateKeys) {
    this.alternateKeys = alternateKeys;
  }


  public VsamAttributes compressed(Boolean compressed) {
    this.compressed = compressed;
    return this;
  }

  /**
   * Get compressed
   * @return compressed
   */
  @javax.annotation.Nullable
  public Boolean getCompressed() {
    return compressed;
  }

  public void setCompressed(Boolean compressed) {
    this.compressed = compressed;
  }


  public VsamAttributes encoding(String encoding) {
    this.encoding = encoding;
    return this;
  }

  /**
   * Get encoding
   * @return encoding
   */
  @javax.annotation.Nullable
  public String getEncoding() {
    return encoding;
  }

  public void setEncoding(String encoding) {
    this.encoding = encoding;
  }


  public VsamAttributes format(String format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nonnull
  public String getFormat() {
    return format;
  }

  public void setFormat(String format) {
    this.format = format;
  }


  public VsamAttributes primaryKey(VsamDetailAttributesPrimaryKey primaryKey) {
    this.primaryKey = primaryKey;
    return this;
  }

  /**
   * Get primaryKey
   * @return primaryKey
   */
  @javax.annotation.Nullable
  public VsamDetailAttributesPrimaryKey getPrimaryKey() {
    return primaryKey;
  }

  public void setPrimaryKey(VsamDetailAttributesPrimaryKey primaryKey) {
    this.primaryKey = primaryKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VsamAttributes vsamAttributes = (VsamAttributes) o;
    return Objects.equals(this.alternateKeys, vsamAttributes.alternateKeys) &&
        Objects.equals(this.compressed, vsamAttributes.compressed) &&
        Objects.equals(this.encoding, vsamAttributes.encoding) &&
        Objects.equals(this.format, vsamAttributes.format) &&
        Objects.equals(this.primaryKey, vsamAttributes.primaryKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alternateKeys, compressed, encoding, format, primaryKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VsamAttributes {\n");
    sb.append("    alternateKeys: ").append(toIndentedString(alternateKeys)).append("\n");
    sb.append("    compressed: ").append(toIndentedString(compressed)).append("\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    primaryKey: ").append(toIndentedString(primaryKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alternateKeys");
    openapiFields.add("compressed");
    openapiFields.add("encoding");
    openapiFields.add("format");
    openapiFields.add("primaryKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("format");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VsamAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VsamAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VsamAttributes is not found in the empty JSON string", VsamAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VsamAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VsamAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VsamAttributes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `alternateKeys`
      if (jsonObj.get("alternateKeys") != null && !jsonObj.get("alternateKeys").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("alternateKeys"));
      }
      // validate the optional field `compressed`
      if (jsonObj.get("compressed") != null && !jsonObj.get("compressed").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("compressed"));
      }
      // validate the optional field `encoding`
      if (jsonObj.get("encoding") != null && !jsonObj.get("encoding").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("encoding"));
      }
      // validate the required field `format`
      String.validateJsonElement(jsonObj.get("format"));
      // validate the optional field `primaryKey`
      if (jsonObj.get("primaryKey") != null && !jsonObj.get("primaryKey").isJsonNull()) {
        VsamDetailAttributesPrimaryKey.validateJsonElement(jsonObj.get("primaryKey"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VsamAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VsamAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VsamAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VsamAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<VsamAttributes>() {
           @Override
           public void write(JsonWriter out, VsamAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VsamAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VsamAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VsamAttributes
   * @throws IOException if the JSON string is invalid with respect to VsamAttributes
   */
  public static VsamAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VsamAttributes.class);
  }

  /**
   * Convert an instance of VsamAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

