/*
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateEnvironmentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:48.998910-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateEnvironmentRequest {
  public static final String SERIALIZED_NAME_APPLY_DURING_MAINTENANCE_WINDOW = "applyDuringMaintenanceWindow";
  @SerializedName(SERIALIZED_NAME_APPLY_DURING_MAINTENANCE_WINDOW)
  private Boolean applyDuringMaintenanceWindow;

  public static final String SERIALIZED_NAME_DESIRED_CAPACITY = "desiredCapacity";
  @SerializedName(SERIALIZED_NAME_DESIRED_CAPACITY)
  private Integer desiredCapacity;

  public static final String SERIALIZED_NAME_ENGINE_VERSION = "engineVersion";
  @SerializedName(SERIALIZED_NAME_ENGINE_VERSION)
  private String engineVersion;

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "instanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private String instanceType;

  public static final String SERIALIZED_NAME_PREFERRED_MAINTENANCE_WINDOW = "preferredMaintenanceWindow";
  @SerializedName(SERIALIZED_NAME_PREFERRED_MAINTENANCE_WINDOW)
  private String preferredMaintenanceWindow;

  public UpdateEnvironmentRequest() {
  }

  public UpdateEnvironmentRequest applyDuringMaintenanceWindow(Boolean applyDuringMaintenanceWindow) {
    this.applyDuringMaintenanceWindow = applyDuringMaintenanceWindow;
    return this;
  }

  /**
   * Indicates whether to update the runtime environment during the maintenance window. The default is false. Currently, Amazon Web Services Mainframe Modernization accepts the &lt;code&gt;engineVersion&lt;/code&gt; parameter only if &lt;code&gt;applyDuringMaintenanceWindow&lt;/code&gt; is true. If any parameter other than &lt;code&gt;engineVersion&lt;/code&gt; is provided in &lt;code&gt;UpdateEnvironmentRequest&lt;/code&gt;, it will fail if &lt;code&gt;applyDuringMaintenanceWindow&lt;/code&gt; is set to true.
   * @return applyDuringMaintenanceWindow
   */
  @javax.annotation.Nullable
  public Boolean getApplyDuringMaintenanceWindow() {
    return applyDuringMaintenanceWindow;
  }

  public void setApplyDuringMaintenanceWindow(Boolean applyDuringMaintenanceWindow) {
    this.applyDuringMaintenanceWindow = applyDuringMaintenanceWindow;
  }


  public UpdateEnvironmentRequest desiredCapacity(Integer desiredCapacity) {
    this.desiredCapacity = desiredCapacity;
    return this;
  }

  /**
   * The desired capacity for the runtime environment to update. The minimum possible value is 0 and the maximum is 100.
   * @return desiredCapacity
   */
  @javax.annotation.Nullable
  public Integer getDesiredCapacity() {
    return desiredCapacity;
  }

  public void setDesiredCapacity(Integer desiredCapacity) {
    this.desiredCapacity = desiredCapacity;
  }


  public UpdateEnvironmentRequest engineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
    return this;
  }

  /**
   * The version of the runtime engine for the runtime environment.
   * @return engineVersion
   */
  @javax.annotation.Nullable
  public String getEngineVersion() {
    return engineVersion;
  }

  public void setEngineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
  }


  public UpdateEnvironmentRequest instanceType(String instanceType) {
    this.instanceType = instanceType;
    return this;
  }

  /**
   * The instance type for the runtime environment to update.
   * @return instanceType
   */
  @javax.annotation.Nullable
  public String getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(String instanceType) {
    this.instanceType = instanceType;
  }


  public UpdateEnvironmentRequest preferredMaintenanceWindow(String preferredMaintenanceWindow) {
    this.preferredMaintenanceWindow = preferredMaintenanceWindow;
    return this;
  }

  /**
   * Configures the maintenance window you want for the runtime environment. If you do not provide a value, a random system-generated value will be assigned.
   * @return preferredMaintenanceWindow
   */
  @javax.annotation.Nullable
  public String getPreferredMaintenanceWindow() {
    return preferredMaintenanceWindow;
  }

  public void setPreferredMaintenanceWindow(String preferredMaintenanceWindow) {
    this.preferredMaintenanceWindow = preferredMaintenanceWindow;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateEnvironmentRequest updateEnvironmentRequest = (UpdateEnvironmentRequest) o;
    return Objects.equals(this.applyDuringMaintenanceWindow, updateEnvironmentRequest.applyDuringMaintenanceWindow) &&
        Objects.equals(this.desiredCapacity, updateEnvironmentRequest.desiredCapacity) &&
        Objects.equals(this.engineVersion, updateEnvironmentRequest.engineVersion) &&
        Objects.equals(this.instanceType, updateEnvironmentRequest.instanceType) &&
        Objects.equals(this.preferredMaintenanceWindow, updateEnvironmentRequest.preferredMaintenanceWindow);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applyDuringMaintenanceWindow, desiredCapacity, engineVersion, instanceType, preferredMaintenanceWindow);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateEnvironmentRequest {\n");
    sb.append("    applyDuringMaintenanceWindow: ").append(toIndentedString(applyDuringMaintenanceWindow)).append("\n");
    sb.append("    desiredCapacity: ").append(toIndentedString(desiredCapacity)).append("\n");
    sb.append("    engineVersion: ").append(toIndentedString(engineVersion)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    preferredMaintenanceWindow: ").append(toIndentedString(preferredMaintenanceWindow)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applyDuringMaintenanceWindow");
    openapiFields.add("desiredCapacity");
    openapiFields.add("engineVersion");
    openapiFields.add("instanceType");
    openapiFields.add("preferredMaintenanceWindow");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateEnvironmentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateEnvironmentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateEnvironmentRequest is not found in the empty JSON string", UpdateEnvironmentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateEnvironmentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateEnvironmentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("engineVersion") != null && !jsonObj.get("engineVersion").isJsonNull()) && !jsonObj.get("engineVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engineVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engineVersion").toString()));
      }
      if ((jsonObj.get("instanceType") != null && !jsonObj.get("instanceType").isJsonNull()) && !jsonObj.get("instanceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceType").toString()));
      }
      if ((jsonObj.get("preferredMaintenanceWindow") != null && !jsonObj.get("preferredMaintenanceWindow").isJsonNull()) && !jsonObj.get("preferredMaintenanceWindow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredMaintenanceWindow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredMaintenanceWindow").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateEnvironmentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateEnvironmentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateEnvironmentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateEnvironmentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateEnvironmentRequest>() {
           @Override
           public void write(JsonWriter out, UpdateEnvironmentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateEnvironmentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateEnvironmentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateEnvironmentRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateEnvironmentRequest
   */
  public static UpdateEnvironmentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateEnvironmentRequest.class);
  }

  /**
   * Convert an instance of UpdateEnvironmentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

