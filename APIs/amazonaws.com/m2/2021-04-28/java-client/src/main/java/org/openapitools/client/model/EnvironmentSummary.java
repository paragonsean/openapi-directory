/*
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.EngineType;
import org.openapitools.client.model.EnvironmentLifecycle;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains a subset of the possible runtime environment attributes. Used in the environment list.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:48.998910-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnvironmentSummary {
  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_ENGINE_TYPE = "engineType";
  @SerializedName(SERIALIZED_NAME_ENGINE_TYPE)
  private EngineType engineType;

  public static final String SERIALIZED_NAME_ENGINE_VERSION = "engineVersion";
  @SerializedName(SERIALIZED_NAME_ENGINE_VERSION)
  private String engineVersion;

  public static final String SERIALIZED_NAME_ENVIRONMENT_ARN = "environmentArn";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_ARN)
  private String environmentArn;

  public static final String SERIALIZED_NAME_ENVIRONMENT_ID = "environmentId";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_ID)
  private String environmentId;

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "instanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private String instanceType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EnvironmentLifecycle status;

  public EnvironmentSummary() {
  }

  public EnvironmentSummary creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public EnvironmentSummary engineType(EngineType engineType) {
    this.engineType = engineType;
    return this;
  }

  /**
   * Get engineType
   * @return engineType
   */
  @javax.annotation.Nonnull
  public EngineType getEngineType() {
    return engineType;
  }

  public void setEngineType(EngineType engineType) {
    this.engineType = engineType;
  }


  public EnvironmentSummary engineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
    return this;
  }

  /**
   * Get engineVersion
   * @return engineVersion
   */
  @javax.annotation.Nonnull
  public String getEngineVersion() {
    return engineVersion;
  }

  public void setEngineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
  }


  public EnvironmentSummary environmentArn(String environmentArn) {
    this.environmentArn = environmentArn;
    return this;
  }

  /**
   * Get environmentArn
   * @return environmentArn
   */
  @javax.annotation.Nonnull
  public String getEnvironmentArn() {
    return environmentArn;
  }

  public void setEnvironmentArn(String environmentArn) {
    this.environmentArn = environmentArn;
  }


  public EnvironmentSummary environmentId(String environmentId) {
    this.environmentId = environmentId;
    return this;
  }

  /**
   * Get environmentId
   * @return environmentId
   */
  @javax.annotation.Nonnull
  public String getEnvironmentId() {
    return environmentId;
  }

  public void setEnvironmentId(String environmentId) {
    this.environmentId = environmentId;
  }


  public EnvironmentSummary instanceType(String instanceType) {
    this.instanceType = instanceType;
    return this;
  }

  /**
   * Get instanceType
   * @return instanceType
   */
  @javax.annotation.Nonnull
  public String getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(String instanceType) {
    this.instanceType = instanceType;
  }


  public EnvironmentSummary name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EnvironmentSummary status(EnvironmentLifecycle status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public EnvironmentLifecycle getStatus() {
    return status;
  }

  public void setStatus(EnvironmentLifecycle status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnvironmentSummary environmentSummary = (EnvironmentSummary) o;
    return Objects.equals(this.creationTime, environmentSummary.creationTime) &&
        Objects.equals(this.engineType, environmentSummary.engineType) &&
        Objects.equals(this.engineVersion, environmentSummary.engineVersion) &&
        Objects.equals(this.environmentArn, environmentSummary.environmentArn) &&
        Objects.equals(this.environmentId, environmentSummary.environmentId) &&
        Objects.equals(this.instanceType, environmentSummary.instanceType) &&
        Objects.equals(this.name, environmentSummary.name) &&
        Objects.equals(this.status, environmentSummary.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, engineType, engineVersion, environmentArn, environmentId, instanceType, name, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnvironmentSummary {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    engineType: ").append(toIndentedString(engineType)).append("\n");
    sb.append("    engineVersion: ").append(toIndentedString(engineVersion)).append("\n");
    sb.append("    environmentArn: ").append(toIndentedString(environmentArn)).append("\n");
    sb.append("    environmentId: ").append(toIndentedString(environmentId)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationTime");
    openapiFields.add("engineType");
    openapiFields.add("engineVersion");
    openapiFields.add("environmentArn");
    openapiFields.add("environmentId");
    openapiFields.add("instanceType");
    openapiFields.add("name");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("creationTime");
    openapiRequiredFields.add("engineType");
    openapiRequiredFields.add("engineVersion");
    openapiRequiredFields.add("environmentArn");
    openapiRequiredFields.add("environmentId");
    openapiRequiredFields.add("instanceType");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnvironmentSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnvironmentSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnvironmentSummary is not found in the empty JSON string", EnvironmentSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnvironmentSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnvironmentSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EnvironmentSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `creationTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("creationTime"));
      // validate the required field `engineType`
      EngineType.validateJsonElement(jsonObj.get("engineType"));
      // validate the required field `engineVersion`
      String.validateJsonElement(jsonObj.get("engineVersion"));
      // validate the required field `environmentArn`
      String.validateJsonElement(jsonObj.get("environmentArn"));
      // validate the required field `environmentId`
      String.validateJsonElement(jsonObj.get("environmentId"));
      // validate the required field `instanceType`
      String.validateJsonElement(jsonObj.get("instanceType"));
      // validate the required field `name`
      String.validateJsonElement(jsonObj.get("name"));
      // validate the required field `status`
      EnvironmentLifecycle.validateJsonElement(jsonObj.get("status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnvironmentSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnvironmentSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnvironmentSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnvironmentSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<EnvironmentSummary>() {
           @Override
           public void write(JsonWriter out, EnvironmentSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnvironmentSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnvironmentSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnvironmentSummary
   * @throws IOException if the JSON string is invalid with respect to EnvironmentSummary
   */
  public static EnvironmentSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnvironmentSummary.class);
  }

  /**
   * Convert an instance of EnvironmentSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

