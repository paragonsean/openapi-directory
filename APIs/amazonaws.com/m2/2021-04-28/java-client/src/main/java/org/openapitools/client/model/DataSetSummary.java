/*
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A subset of the possible data set attributes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:48.998910-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataSetSummary {
  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_DATA_SET_NAME = "dataSetName";
  @SerializedName(SERIALIZED_NAME_DATA_SET_NAME)
  private String dataSetName;

  public static final String SERIALIZED_NAME_DATA_SET_ORG = "dataSetOrg";
  @SerializedName(SERIALIZED_NAME_DATA_SET_ORG)
  private String dataSetOrg;

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private String format;

  public static final String SERIALIZED_NAME_LAST_REFERENCED_TIME = "lastReferencedTime";
  @SerializedName(SERIALIZED_NAME_LAST_REFERENCED_TIME)
  private OffsetDateTime lastReferencedTime;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME = "lastUpdatedTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME)
  private OffsetDateTime lastUpdatedTime;

  public DataSetSummary() {
  }

  public DataSetSummary creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public DataSetSummary dataSetName(String dataSetName) {
    this.dataSetName = dataSetName;
    return this;
  }

  /**
   * Get dataSetName
   * @return dataSetName
   */
  @javax.annotation.Nonnull
  public String getDataSetName() {
    return dataSetName;
  }

  public void setDataSetName(String dataSetName) {
    this.dataSetName = dataSetName;
  }


  public DataSetSummary dataSetOrg(String dataSetOrg) {
    this.dataSetOrg = dataSetOrg;
    return this;
  }

  /**
   * Get dataSetOrg
   * @return dataSetOrg
   */
  @javax.annotation.Nullable
  public String getDataSetOrg() {
    return dataSetOrg;
  }

  public void setDataSetOrg(String dataSetOrg) {
    this.dataSetOrg = dataSetOrg;
  }


  public DataSetSummary format(String format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nullable
  public String getFormat() {
    return format;
  }

  public void setFormat(String format) {
    this.format = format;
  }


  public DataSetSummary lastReferencedTime(OffsetDateTime lastReferencedTime) {
    this.lastReferencedTime = lastReferencedTime;
    return this;
  }

  /**
   * Get lastReferencedTime
   * @return lastReferencedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastReferencedTime() {
    return lastReferencedTime;
  }

  public void setLastReferencedTime(OffsetDateTime lastReferencedTime) {
    this.lastReferencedTime = lastReferencedTime;
  }


  public DataSetSummary lastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
    return this;
  }

  /**
   * Get lastUpdatedTime
   * @return lastUpdatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedTime() {
    return lastUpdatedTime;
  }

  public void setLastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataSetSummary dataSetSummary = (DataSetSummary) o;
    return Objects.equals(this.creationTime, dataSetSummary.creationTime) &&
        Objects.equals(this.dataSetName, dataSetSummary.dataSetName) &&
        Objects.equals(this.dataSetOrg, dataSetSummary.dataSetOrg) &&
        Objects.equals(this.format, dataSetSummary.format) &&
        Objects.equals(this.lastReferencedTime, dataSetSummary.lastReferencedTime) &&
        Objects.equals(this.lastUpdatedTime, dataSetSummary.lastUpdatedTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, dataSetName, dataSetOrg, format, lastReferencedTime, lastUpdatedTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataSetSummary {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    dataSetName: ").append(toIndentedString(dataSetName)).append("\n");
    sb.append("    dataSetOrg: ").append(toIndentedString(dataSetOrg)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    lastReferencedTime: ").append(toIndentedString(lastReferencedTime)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationTime");
    openapiFields.add("dataSetName");
    openapiFields.add("dataSetOrg");
    openapiFields.add("format");
    openapiFields.add("lastReferencedTime");
    openapiFields.add("lastUpdatedTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dataSetName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataSetSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataSetSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataSetSummary is not found in the empty JSON string", DataSetSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataSetSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataSetSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DataSetSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `creationTime`
      if (jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("creationTime"));
      }
      // validate the required field `dataSetName`
      String.validateJsonElement(jsonObj.get("dataSetName"));
      // validate the optional field `dataSetOrg`
      if (jsonObj.get("dataSetOrg") != null && !jsonObj.get("dataSetOrg").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("dataSetOrg"));
      }
      // validate the optional field `format`
      if (jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("format"));
      }
      // validate the optional field `lastReferencedTime`
      if (jsonObj.get("lastReferencedTime") != null && !jsonObj.get("lastReferencedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastReferencedTime"));
      }
      // validate the optional field `lastUpdatedTime`
      if (jsonObj.get("lastUpdatedTime") != null && !jsonObj.get("lastUpdatedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastUpdatedTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataSetSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataSetSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataSetSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataSetSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<DataSetSummary>() {
           @Override
           public void write(JsonWriter out, DataSetSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataSetSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataSetSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataSetSummary
   * @throws IOException if the JSON string is invalid with respect to DataSetSummary
   */
  public static DataSetSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataSetSummary.class);
  }

  /**
   * Convert an instance of DataSetSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

