/*
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.VsamDetailAttributesPrimaryKey;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DatasetDetailOrgAttributesVsam
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:48.998910-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatasetDetailOrgAttributesVsam {
  public static final String SERIALIZED_NAME_ALTERNATE_KEYS = "alternateKeys";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_KEYS)
  private List alternateKeys;

  public static final String SERIALIZED_NAME_CACHE_AT_STARTUP = "cacheAtStartup";
  @SerializedName(SERIALIZED_NAME_CACHE_AT_STARTUP)
  private Boolean cacheAtStartup;

  public static final String SERIALIZED_NAME_COMPRESSED = "compressed";
  @SerializedName(SERIALIZED_NAME_COMPRESSED)
  private Boolean compressed;

  public static final String SERIALIZED_NAME_ENCODING = "encoding";
  @SerializedName(SERIALIZED_NAME_ENCODING)
  private String encoding;

  public static final String SERIALIZED_NAME_PRIMARY_KEY = "primaryKey";
  @SerializedName(SERIALIZED_NAME_PRIMARY_KEY)
  private VsamDetailAttributesPrimaryKey primaryKey;

  public static final String SERIALIZED_NAME_RECORD_FORMAT = "recordFormat";
  @SerializedName(SERIALIZED_NAME_RECORD_FORMAT)
  private String recordFormat;

  public DatasetDetailOrgAttributesVsam() {
  }

  public DatasetDetailOrgAttributesVsam alternateKeys(List alternateKeys) {
    this.alternateKeys = alternateKeys;
    return this;
  }

  /**
   * Get alternateKeys
   * @return alternateKeys
   */
  @javax.annotation.Nullable
  public List getAlternateKeys() {
    return alternateKeys;
  }

  public void setAlternateKeys(List alternateKeys) {
    this.alternateKeys = alternateKeys;
  }


  public DatasetDetailOrgAttributesVsam cacheAtStartup(Boolean cacheAtStartup) {
    this.cacheAtStartup = cacheAtStartup;
    return this;
  }

  /**
   * Get cacheAtStartup
   * @return cacheAtStartup
   */
  @javax.annotation.Nullable
  public Boolean getCacheAtStartup() {
    return cacheAtStartup;
  }

  public void setCacheAtStartup(Boolean cacheAtStartup) {
    this.cacheAtStartup = cacheAtStartup;
  }


  public DatasetDetailOrgAttributesVsam compressed(Boolean compressed) {
    this.compressed = compressed;
    return this;
  }

  /**
   * Get compressed
   * @return compressed
   */
  @javax.annotation.Nullable
  public Boolean getCompressed() {
    return compressed;
  }

  public void setCompressed(Boolean compressed) {
    this.compressed = compressed;
  }


  public DatasetDetailOrgAttributesVsam encoding(String encoding) {
    this.encoding = encoding;
    return this;
  }

  /**
   * Get encoding
   * @return encoding
   */
  @javax.annotation.Nullable
  public String getEncoding() {
    return encoding;
  }

  public void setEncoding(String encoding) {
    this.encoding = encoding;
  }


  public DatasetDetailOrgAttributesVsam primaryKey(VsamDetailAttributesPrimaryKey primaryKey) {
    this.primaryKey = primaryKey;
    return this;
  }

  /**
   * Get primaryKey
   * @return primaryKey
   */
  @javax.annotation.Nullable
  public VsamDetailAttributesPrimaryKey getPrimaryKey() {
    return primaryKey;
  }

  public void setPrimaryKey(VsamDetailAttributesPrimaryKey primaryKey) {
    this.primaryKey = primaryKey;
  }


  public DatasetDetailOrgAttributesVsam recordFormat(String recordFormat) {
    this.recordFormat = recordFormat;
    return this;
  }

  /**
   * Get recordFormat
   * @return recordFormat
   */
  @javax.annotation.Nullable
  public String getRecordFormat() {
    return recordFormat;
  }

  public void setRecordFormat(String recordFormat) {
    this.recordFormat = recordFormat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatasetDetailOrgAttributesVsam datasetDetailOrgAttributesVsam = (DatasetDetailOrgAttributesVsam) o;
    return Objects.equals(this.alternateKeys, datasetDetailOrgAttributesVsam.alternateKeys) &&
        Objects.equals(this.cacheAtStartup, datasetDetailOrgAttributesVsam.cacheAtStartup) &&
        Objects.equals(this.compressed, datasetDetailOrgAttributesVsam.compressed) &&
        Objects.equals(this.encoding, datasetDetailOrgAttributesVsam.encoding) &&
        Objects.equals(this.primaryKey, datasetDetailOrgAttributesVsam.primaryKey) &&
        Objects.equals(this.recordFormat, datasetDetailOrgAttributesVsam.recordFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alternateKeys, cacheAtStartup, compressed, encoding, primaryKey, recordFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatasetDetailOrgAttributesVsam {\n");
    sb.append("    alternateKeys: ").append(toIndentedString(alternateKeys)).append("\n");
    sb.append("    cacheAtStartup: ").append(toIndentedString(cacheAtStartup)).append("\n");
    sb.append("    compressed: ").append(toIndentedString(compressed)).append("\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("    primaryKey: ").append(toIndentedString(primaryKey)).append("\n");
    sb.append("    recordFormat: ").append(toIndentedString(recordFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alternateKeys");
    openapiFields.add("cacheAtStartup");
    openapiFields.add("compressed");
    openapiFields.add("encoding");
    openapiFields.add("primaryKey");
    openapiFields.add("recordFormat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatasetDetailOrgAttributesVsam
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatasetDetailOrgAttributesVsam.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatasetDetailOrgAttributesVsam is not found in the empty JSON string", DatasetDetailOrgAttributesVsam.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatasetDetailOrgAttributesVsam.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatasetDetailOrgAttributesVsam` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `alternateKeys`
      if (jsonObj.get("alternateKeys") != null && !jsonObj.get("alternateKeys").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("alternateKeys"));
      }
      // validate the optional field `cacheAtStartup`
      if (jsonObj.get("cacheAtStartup") != null && !jsonObj.get("cacheAtStartup").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("cacheAtStartup"));
      }
      // validate the optional field `compressed`
      if (jsonObj.get("compressed") != null && !jsonObj.get("compressed").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("compressed"));
      }
      // validate the optional field `encoding`
      if (jsonObj.get("encoding") != null && !jsonObj.get("encoding").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("encoding"));
      }
      // validate the optional field `primaryKey`
      if (jsonObj.get("primaryKey") != null && !jsonObj.get("primaryKey").isJsonNull()) {
        VsamDetailAttributesPrimaryKey.validateJsonElement(jsonObj.get("primaryKey"));
      }
      // validate the optional field `recordFormat`
      if (jsonObj.get("recordFormat") != null && !jsonObj.get("recordFormat").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("recordFormat"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatasetDetailOrgAttributesVsam.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatasetDetailOrgAttributesVsam' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatasetDetailOrgAttributesVsam> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatasetDetailOrgAttributesVsam.class));

       return (TypeAdapter<T>) new TypeAdapter<DatasetDetailOrgAttributesVsam>() {
           @Override
           public void write(JsonWriter out, DatasetDetailOrgAttributesVsam value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatasetDetailOrgAttributesVsam read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatasetDetailOrgAttributesVsam given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatasetDetailOrgAttributesVsam
   * @throws IOException if the JSON string is invalid with respect to DatasetDetailOrgAttributesVsam
   */
  public static DatasetDetailOrgAttributesVsam fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatasetDetailOrgAttributesVsam.class);
  }

  /**
   * Convert an instance of DatasetDetailOrgAttributesVsam to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

