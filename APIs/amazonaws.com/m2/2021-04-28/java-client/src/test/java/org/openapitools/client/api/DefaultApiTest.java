/*
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateApplicationRequest;
import org.openapitools.client.model.CreateApplicationResponse;
import org.openapitools.client.model.CreateDataSetImportTaskRequest;
import org.openapitools.client.model.CreateDataSetImportTaskResponse;
import org.openapitools.client.model.CreateDeploymentRequest;
import org.openapitools.client.model.CreateDeploymentResponse;
import org.openapitools.client.model.CreateEnvironmentRequest;
import org.openapitools.client.model.CreateEnvironmentResponse;
import org.openapitools.client.model.GetApplicationResponse;
import org.openapitools.client.model.GetApplicationVersionResponse;
import org.openapitools.client.model.GetBatchJobExecutionResponse;
import org.openapitools.client.model.GetDataSetDetailsResponse;
import org.openapitools.client.model.GetDataSetImportTaskResponse;
import org.openapitools.client.model.GetDeploymentResponse;
import org.openapitools.client.model.GetEnvironmentResponse;
import org.openapitools.client.model.GetSignedBluinsightsUrlResponse;
import org.openapitools.client.model.ListApplicationVersionsResponse;
import org.openapitools.client.model.ListApplicationsResponse;
import org.openapitools.client.model.ListBatchJobDefinitionsResponse;
import org.openapitools.client.model.ListBatchJobExecutionsResponse;
import org.openapitools.client.model.ListDataSetImportHistoryResponse;
import org.openapitools.client.model.ListDataSetsResponse;
import org.openapitools.client.model.ListDeploymentsResponse;
import org.openapitools.client.model.ListEngineVersionsResponse;
import org.openapitools.client.model.ListEnvironmentsResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.StartBatchJobRequest;
import org.openapitools.client.model.StartBatchJobResponse;
import org.openapitools.client.model.StopApplicationRequest;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateApplicationRequest;
import org.openapitools.client.model.UpdateApplicationResponse;
import org.openapitools.client.model.UpdateEnvironmentRequest;
import org.openapitools.client.model.UpdateEnvironmentResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Cancels the running of a specific batch job execution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelBatchJobExecutionTest() throws ApiException {
        String applicationId = null;
        String executionId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.cancelBatchJobExecution(applicationId, executionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new application with given parameters. Requires an existing runtime environment and application definition file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createApplicationTest() throws ApiException {
        CreateApplicationRequest createApplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateApplicationResponse response = api.createApplication(createApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts a data set import task for a specific application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDataSetImportTaskTest() throws ApiException {
        String applicationId = null;
        CreateDataSetImportTaskRequest createDataSetImportTaskRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDataSetImportTaskResponse response = api.createDataSetImportTask(applicationId, createDataSetImportTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates and starts a deployment to deploy an application into a runtime environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDeploymentTest() throws ApiException {
        String applicationId = null;
        CreateDeploymentRequest createDeploymentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDeploymentResponse response = api.createDeployment(applicationId, createDeploymentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a runtime environment for a given runtime engine.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEnvironmentTest() throws ApiException {
        CreateEnvironmentRequest createEnvironmentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateEnvironmentResponse response = api.createEnvironment(createEnvironmentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a specific application. You cannot delete a running application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApplicationTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteApplication(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a specific application from the specific runtime environment where it was previously deployed. You cannot delete a runtime environment using DeleteEnvironment if any application has ever been deployed to it. This API removes the association of the application with the runtime environment so you can delete the environment smoothly.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApplicationFromEnvironmentTest() throws ApiException {
        String applicationId = null;
        String environmentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteApplicationFromEnvironment(applicationId, environmentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a specific runtime environment. The environment cannot contain deployed applications. If it does, you must delete those applications before you delete the environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEnvironmentTest() throws ApiException {
        String environmentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteEnvironment(environmentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the details of a specific application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetApplicationResponse response = api.getApplication(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns details about a specific version of a specific application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationVersionTest() throws ApiException {
        String applicationId = null;
        Integer applicationVersion = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetApplicationVersionResponse response = api.getApplicationVersion(applicationId, applicationVersion, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the details of a specific batch job execution for a specific application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBatchJobExecutionTest() throws ApiException {
        String applicationId = null;
        String executionId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetBatchJobExecutionResponse response = api.getBatchJobExecution(applicationId, executionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the details of a specific data set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataSetDetailsTest() throws ApiException {
        String applicationId = null;
        String dataSetName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDataSetDetailsResponse response = api.getDataSetDetails(applicationId, dataSetName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the status of a data set import task initiated with the &lt;a&gt;CreateDataSetImportTask&lt;/a&gt; operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataSetImportTaskTest() throws ApiException {
        String applicationId = null;
        String taskId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDataSetImportTaskResponse response = api.getDataSetImportTask(applicationId, taskId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets details of a specific deployment with a given deployment identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeploymentTest() throws ApiException {
        String applicationId = null;
        String deploymentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDeploymentResponse response = api.getDeployment(applicationId, deploymentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes a specific runtime environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEnvironmentTest() throws ApiException {
        String environmentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetEnvironmentResponse response = api.getEnvironment(environmentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a single sign-on URL that can be used to connect to AWS Blu Insights.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSignedBluinsightsUrlTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSignedBluinsightsUrlResponse response = api.getSignedBluinsightsUrl(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of the application versions for a specific application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listApplicationVersionsTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListApplicationVersionsResponse response = api.listApplicationVersions(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the applications associated with a specific Amazon Web Services account. You can provide the unique identifier of a specific runtime environment in a query parameter to see all applications associated with that environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listApplicationsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String environmentId = null;
        Integer maxResults = null;
        List<String> names = null;
        String nextToken = null;
        ListApplicationsResponse response = api.listApplications(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, environmentId, maxResults, names, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all the available batch job definitions based on the batch job resources uploaded during the application creation. You can use the batch job definitions in the list to start a batch job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBatchJobDefinitionsTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String prefix = null;
        ListBatchJobDefinitionsResponse response = api.listBatchJobDefinitions(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, prefix);
        // TODO: test validations
    }

    /**
     * Lists historical, current, and scheduled batch job executions for a specific application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBatchJobExecutionsTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> executionIds = null;
        String jobName = null;
        Integer maxResults = null;
        String nextToken = null;
        OffsetDateTime startedAfter = null;
        OffsetDateTime startedBefore = null;
        String status = null;
        ListBatchJobExecutionsResponse response = api.listBatchJobExecutions(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, executionIds, jobName, maxResults, nextToken, startedAfter, startedBefore, status);
        // TODO: test validations
    }

    /**
     * Lists the data set imports for the specified application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDataSetImportHistoryTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListDataSetImportHistoryResponse response = api.listDataSetImportHistory(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the data sets imported for a specific application. In Amazon Web Services Mainframe Modernization, data sets are associated with applications deployed on runtime environments. This is known as importing data sets. Currently, Amazon Web Services Mainframe Modernization can import data sets into catalogs using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/m2/latest/APIReference/API_CreateDataSetImportTask.html\&quot;&gt;CreateDataSetImportTask&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDataSetsTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String prefix = null;
        ListDataSetsResponse response = api.listDataSets(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, prefix);
        // TODO: test validations
    }

    /**
     * Returns a list of all deployments of a specific application. A deployment is a combination of a specific application and a specific version of that application. Each deployment is mapped to a particular application version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDeploymentsTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListDeploymentsResponse response = api.listDeployments(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the available engine versions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEngineVersionsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String engineType = null;
        Integer maxResults = null;
        String nextToken = null;
        ListEngineVersionsResponse response = api.listEngineVersions(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engineType, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the runtime environments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEnvironmentsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String engineType = null;
        Integer maxResults = null;
        List<String> names = null;
        String nextToken = null;
        ListEnvironmentsResponse response = api.listEnvironments(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engineType, maxResults, names, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the tags for the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts an application that is currently stopped.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startApplicationTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.startApplication(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts a batch job and returns the unique identifier of this execution of the batch job. The associated application must be running in order to start the batch job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startBatchJobTest() throws ApiException {
        String applicationId = null;
        StartBatchJobRequest startBatchJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartBatchJobResponse response = api.startBatchJob(applicationId, startBatchJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops a running application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopApplicationTest() throws ApiException {
        String applicationId = null;
        StopApplicationRequest stopApplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.stopApplication(applicationId, stopApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds one or more tags to the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes one or more tags from the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an application and creates a new version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApplicationTest() throws ApiException {
        String applicationId = null;
        UpdateApplicationRequest updateApplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateApplicationResponse response = api.updateApplication(applicationId, updateApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the configuration details for a specific runtime environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEnvironmentTest() throws ApiException {
        String environmentId = null;
        UpdateEnvironmentRequest updateEnvironmentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateEnvironmentResponse response = api.updateEnvironment(environmentId, updateEnvironmentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
