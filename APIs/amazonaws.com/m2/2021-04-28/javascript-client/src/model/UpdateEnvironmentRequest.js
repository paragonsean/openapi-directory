/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateEnvironmentRequest model module.
 * @module model/UpdateEnvironmentRequest
 * @version 2021-04-28
 */
class UpdateEnvironmentRequest {
    /**
     * Constructs a new <code>UpdateEnvironmentRequest</code>.
     * @alias module:model/UpdateEnvironmentRequest
     */
    constructor() { 
        
        UpdateEnvironmentRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateEnvironmentRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateEnvironmentRequest} obj Optional instance to populate.
     * @return {module:model/UpdateEnvironmentRequest} The populated <code>UpdateEnvironmentRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateEnvironmentRequest();

            if (data.hasOwnProperty('applyDuringMaintenanceWindow')) {
                obj['applyDuringMaintenanceWindow'] = ApiClient.convertToType(data['applyDuringMaintenanceWindow'], 'Boolean');
            }
            if (data.hasOwnProperty('desiredCapacity')) {
                obj['desiredCapacity'] = ApiClient.convertToType(data['desiredCapacity'], 'Number');
            }
            if (data.hasOwnProperty('engineVersion')) {
                obj['engineVersion'] = ApiClient.convertToType(data['engineVersion'], 'String');
            }
            if (data.hasOwnProperty('instanceType')) {
                obj['instanceType'] = ApiClient.convertToType(data['instanceType'], 'String');
            }
            if (data.hasOwnProperty('preferredMaintenanceWindow')) {
                obj['preferredMaintenanceWindow'] = ApiClient.convertToType(data['preferredMaintenanceWindow'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateEnvironmentRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateEnvironmentRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['engineVersion'] && !(typeof data['engineVersion'] === 'string' || data['engineVersion'] instanceof String)) {
            throw new Error("Expected the field `engineVersion` to be a primitive type in the JSON string but got " + data['engineVersion']);
        }
        // ensure the json data is a string
        if (data['instanceType'] && !(typeof data['instanceType'] === 'string' || data['instanceType'] instanceof String)) {
            throw new Error("Expected the field `instanceType` to be a primitive type in the JSON string but got " + data['instanceType']);
        }
        // ensure the json data is a string
        if (data['preferredMaintenanceWindow'] && !(typeof data['preferredMaintenanceWindow'] === 'string' || data['preferredMaintenanceWindow'] instanceof String)) {
            throw new Error("Expected the field `preferredMaintenanceWindow` to be a primitive type in the JSON string but got " + data['preferredMaintenanceWindow']);
        }

        return true;
    }


}



/**
 * Indicates whether to update the runtime environment during the maintenance window. The default is false. Currently, Amazon Web Services Mainframe Modernization accepts the <code>engineVersion</code> parameter only if <code>applyDuringMaintenanceWindow</code> is true. If any parameter other than <code>engineVersion</code> is provided in <code>UpdateEnvironmentRequest</code>, it will fail if <code>applyDuringMaintenanceWindow</code> is set to true.
 * @member {Boolean} applyDuringMaintenanceWindow
 */
UpdateEnvironmentRequest.prototype['applyDuringMaintenanceWindow'] = undefined;

/**
 * The desired capacity for the runtime environment to update. The minimum possible value is 0 and the maximum is 100.
 * @member {Number} desiredCapacity
 */
UpdateEnvironmentRequest.prototype['desiredCapacity'] = undefined;

/**
 * The version of the runtime engine for the runtime environment.
 * @member {String} engineVersion
 */
UpdateEnvironmentRequest.prototype['engineVersion'] = undefined;

/**
 * The instance type for the runtime environment to update.
 * @member {String} instanceType
 */
UpdateEnvironmentRequest.prototype['instanceType'] = undefined;

/**
 * Configures the maintenance window you want for the runtime environment. If you do not provide a value, a random system-generated value will be assigned.
 * @member {String} preferredMaintenanceWindow
 */
UpdateEnvironmentRequest.prototype['preferredMaintenanceWindow'] = undefined;






export default UpdateEnvironmentRequest;

