/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateEnvironmentRequestHighAvailabilityConfig from './CreateEnvironmentRequestHighAvailabilityConfig';
import StorageConfiguration from './StorageConfiguration';

/**
 * The CreateEnvironmentRequest model module.
 * @module model/CreateEnvironmentRequest
 * @version 2021-04-28
 */
class CreateEnvironmentRequest {
    /**
     * Constructs a new <code>CreateEnvironmentRequest</code>.
     * @alias module:model/CreateEnvironmentRequest
     * @param engineType {module:model/CreateEnvironmentRequest.EngineTypeEnum} The engine type for the runtime environment.
     * @param instanceType {String} The type of instance for the runtime environment.
     * @param name {String} The name of the runtime environment. Must be unique within the account.
     */
    constructor(engineType, instanceType, name) { 
        
        CreateEnvironmentRequest.initialize(this, engineType, instanceType, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, engineType, instanceType, name) { 
        obj['engineType'] = engineType;
        obj['instanceType'] = instanceType;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>CreateEnvironmentRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateEnvironmentRequest} obj Optional instance to populate.
     * @return {module:model/CreateEnvironmentRequest} The populated <code>CreateEnvironmentRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateEnvironmentRequest();

            if (data.hasOwnProperty('clientToken')) {
                obj['clientToken'] = ApiClient.convertToType(data['clientToken'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('engineType')) {
                obj['engineType'] = ApiClient.convertToType(data['engineType'], 'String');
            }
            if (data.hasOwnProperty('engineVersion')) {
                obj['engineVersion'] = ApiClient.convertToType(data['engineVersion'], 'String');
            }
            if (data.hasOwnProperty('highAvailabilityConfig')) {
                obj['highAvailabilityConfig'] = CreateEnvironmentRequestHighAvailabilityConfig.constructFromObject(data['highAvailabilityConfig']);
            }
            if (data.hasOwnProperty('instanceType')) {
                obj['instanceType'] = ApiClient.convertToType(data['instanceType'], 'String');
            }
            if (data.hasOwnProperty('kmsKeyId')) {
                obj['kmsKeyId'] = ApiClient.convertToType(data['kmsKeyId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('preferredMaintenanceWindow')) {
                obj['preferredMaintenanceWindow'] = ApiClient.convertToType(data['preferredMaintenanceWindow'], 'String');
            }
            if (data.hasOwnProperty('publiclyAccessible')) {
                obj['publiclyAccessible'] = ApiClient.convertToType(data['publiclyAccessible'], 'Boolean');
            }
            if (data.hasOwnProperty('securityGroupIds')) {
                obj['securityGroupIds'] = ApiClient.convertToType(data['securityGroupIds'], ['String']);
            }
            if (data.hasOwnProperty('storageConfigurations')) {
                obj['storageConfigurations'] = ApiClient.convertToType(data['storageConfigurations'], [StorageConfiguration]);
            }
            if (data.hasOwnProperty('subnetIds')) {
                obj['subnetIds'] = ApiClient.convertToType(data['subnetIds'], ['String']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateEnvironmentRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateEnvironmentRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateEnvironmentRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['clientToken'] && !(typeof data['clientToken'] === 'string' || data['clientToken'] instanceof String)) {
            throw new Error("Expected the field `clientToken` to be a primitive type in the JSON string but got " + data['clientToken']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['engineType'] && !(typeof data['engineType'] === 'string' || data['engineType'] instanceof String)) {
            throw new Error("Expected the field `engineType` to be a primitive type in the JSON string but got " + data['engineType']);
        }
        // ensure the json data is a string
        if (data['engineVersion'] && !(typeof data['engineVersion'] === 'string' || data['engineVersion'] instanceof String)) {
            throw new Error("Expected the field `engineVersion` to be a primitive type in the JSON string but got " + data['engineVersion']);
        }
        // validate the optional field `highAvailabilityConfig`
        if (data['highAvailabilityConfig']) { // data not null
          CreateEnvironmentRequestHighAvailabilityConfig.validateJSON(data['highAvailabilityConfig']);
        }
        // ensure the json data is a string
        if (data['instanceType'] && !(typeof data['instanceType'] === 'string' || data['instanceType'] instanceof String)) {
            throw new Error("Expected the field `instanceType` to be a primitive type in the JSON string but got " + data['instanceType']);
        }
        // ensure the json data is a string
        if (data['kmsKeyId'] && !(typeof data['kmsKeyId'] === 'string' || data['kmsKeyId'] instanceof String)) {
            throw new Error("Expected the field `kmsKeyId` to be a primitive type in the JSON string but got " + data['kmsKeyId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['preferredMaintenanceWindow'] && !(typeof data['preferredMaintenanceWindow'] === 'string' || data['preferredMaintenanceWindow'] instanceof String)) {
            throw new Error("Expected the field `preferredMaintenanceWindow` to be a primitive type in the JSON string but got " + data['preferredMaintenanceWindow']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['securityGroupIds'])) {
            throw new Error("Expected the field `securityGroupIds` to be an array in the JSON data but got " + data['securityGroupIds']);
        }
        if (data['storageConfigurations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['storageConfigurations'])) {
                throw new Error("Expected the field `storageConfigurations` to be an array in the JSON data but got " + data['storageConfigurations']);
            }
            // validate the optional field `storageConfigurations` (array)
            for (const item of data['storageConfigurations']) {
                StorageConfiguration.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['subnetIds'])) {
            throw new Error("Expected the field `subnetIds` to be an array in the JSON data but got " + data['subnetIds']);
        }

        return true;
    }


}

CreateEnvironmentRequest.RequiredProperties = ["engineType", "instanceType", "name"];

/**
 * Unique, case-sensitive identifier you provide to ensure the idempotency of the request to create an environment. The service generates the clientToken when the API call is triggered. The token expires after one hour, so if you retry the API within this timeframe with the same clientToken, you will get the same response. The service also handles deleting the clientToken after it expires. 
 * @member {String} clientToken
 */
CreateEnvironmentRequest.prototype['clientToken'] = undefined;

/**
 * The description of the runtime environment.
 * @member {String} description
 */
CreateEnvironmentRequest.prototype['description'] = undefined;

/**
 * The engine type for the runtime environment.
 * @member {module:model/CreateEnvironmentRequest.EngineTypeEnum} engineType
 */
CreateEnvironmentRequest.prototype['engineType'] = undefined;

/**
 * The version of the engine type for the runtime environment.
 * @member {String} engineVersion
 */
CreateEnvironmentRequest.prototype['engineVersion'] = undefined;

/**
 * @member {module:model/CreateEnvironmentRequestHighAvailabilityConfig} highAvailabilityConfig
 */
CreateEnvironmentRequest.prototype['highAvailabilityConfig'] = undefined;

/**
 * The type of instance for the runtime environment.
 * @member {String} instanceType
 */
CreateEnvironmentRequest.prototype['instanceType'] = undefined;

/**
 * The identifier of a customer managed key.
 * @member {String} kmsKeyId
 */
CreateEnvironmentRequest.prototype['kmsKeyId'] = undefined;

/**
 * The name of the runtime environment. Must be unique within the account.
 * @member {String} name
 */
CreateEnvironmentRequest.prototype['name'] = undefined;

/**
 * Configures the maintenance window you want for the runtime environment. If you do not provide a value, a random system-generated value will be assigned.
 * @member {String} preferredMaintenanceWindow
 */
CreateEnvironmentRequest.prototype['preferredMaintenanceWindow'] = undefined;

/**
 * Specifies whether the runtime environment is publicly accessible.
 * @member {Boolean} publiclyAccessible
 */
CreateEnvironmentRequest.prototype['publiclyAccessible'] = undefined;

/**
 * The list of security groups for the VPC associated with this runtime environment.
 * @member {Array.<String>} securityGroupIds
 */
CreateEnvironmentRequest.prototype['securityGroupIds'] = undefined;

/**
 * Optional. The storage configurations for this runtime environment.
 * @member {Array.<module:model/StorageConfiguration>} storageConfigurations
 */
CreateEnvironmentRequest.prototype['storageConfigurations'] = undefined;

/**
 * The list of subnets associated with the VPC for this runtime environment.
 * @member {Array.<String>} subnetIds
 */
CreateEnvironmentRequest.prototype['subnetIds'] = undefined;

/**
 * The tags for the runtime environment.
 * @member {Object.<String, String>} tags
 */
CreateEnvironmentRequest.prototype['tags'] = undefined;





/**
 * Allowed values for the <code>engineType</code> property.
 * @enum {String}
 * @readonly
 */
CreateEnvironmentRequest['EngineTypeEnum'] = {

    /**
     * value: "microfocus"
     * @const
     */
    "microfocus": "microfocus",

    /**
     * value: "bluage"
     * @const
     */
    "bluage": "bluage"
};



export default CreateEnvironmentRequest;

