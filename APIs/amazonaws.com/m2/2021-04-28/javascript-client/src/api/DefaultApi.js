/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateApplicationRequest from '../model/CreateApplicationRequest';
import CreateApplicationResponse from '../model/CreateApplicationResponse';
import CreateDataSetImportTaskRequest from '../model/CreateDataSetImportTaskRequest';
import CreateDataSetImportTaskResponse from '../model/CreateDataSetImportTaskResponse';
import CreateDeploymentRequest from '../model/CreateDeploymentRequest';
import CreateDeploymentResponse from '../model/CreateDeploymentResponse';
import CreateEnvironmentRequest from '../model/CreateEnvironmentRequest';
import CreateEnvironmentResponse from '../model/CreateEnvironmentResponse';
import GetApplicationResponse from '../model/GetApplicationResponse';
import GetApplicationVersionResponse from '../model/GetApplicationVersionResponse';
import GetBatchJobExecutionResponse from '../model/GetBatchJobExecutionResponse';
import GetDataSetDetailsResponse from '../model/GetDataSetDetailsResponse';
import GetDataSetImportTaskResponse from '../model/GetDataSetImportTaskResponse';
import GetDeploymentResponse from '../model/GetDeploymentResponse';
import GetEnvironmentResponse from '../model/GetEnvironmentResponse';
import GetSignedBluinsightsUrlResponse from '../model/GetSignedBluinsightsUrlResponse';
import ListApplicationVersionsResponse from '../model/ListApplicationVersionsResponse';
import ListApplicationsResponse from '../model/ListApplicationsResponse';
import ListBatchJobDefinitionsResponse from '../model/ListBatchJobDefinitionsResponse';
import ListBatchJobExecutionsResponse from '../model/ListBatchJobExecutionsResponse';
import ListDataSetImportHistoryResponse from '../model/ListDataSetImportHistoryResponse';
import ListDataSetsResponse from '../model/ListDataSetsResponse';
import ListDeploymentsResponse from '../model/ListDeploymentsResponse';
import ListEngineVersionsResponse from '../model/ListEngineVersionsResponse';
import ListEnvironmentsResponse from '../model/ListEnvironmentsResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import StartBatchJobRequest from '../model/StartBatchJobRequest';
import StartBatchJobResponse from '../model/StartBatchJobResponse';
import StopApplicationRequest from '../model/StopApplicationRequest';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateApplicationRequest from '../model/UpdateApplicationRequest';
import UpdateApplicationResponse from '../model/UpdateApplicationResponse';
import UpdateEnvironmentRequest from '../model/UpdateEnvironmentRequest';
import UpdateEnvironmentResponse from '../model/UpdateEnvironmentResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2021-04-28
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelBatchJobExecution operation.
     * @callback module:api/DefaultApi~cancelBatchJobExecutionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels the running of a specific batch job execution.
     * @param {String} applicationId The unique identifier of the application.
     * @param {String} executionId The unique identifier of the batch job execution.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~cancelBatchJobExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cancelBatchJobExecution(applicationId, executionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling cancelBatchJobExecution");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling cancelBatchJobExecution");
      }

      let pathParams = {
        'applicationId': applicationId,
        'executionId': executionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/applications/{applicationId}/batch-job-executions/{executionId}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createApplication operation.
     * @callback module:api/DefaultApi~createApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateApplicationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new application with given parameters. Requires an existing runtime environment and application definition file.
     * @param {module:model/CreateApplicationRequest} createApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateApplicationResponse}
     */
    createApplication(createApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createApplicationRequest;
      // verify the required parameter 'createApplicationRequest' is set
      if (createApplicationRequest === undefined || createApplicationRequest === null) {
        throw new Error("Missing the required parameter 'createApplicationRequest' when calling createApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateApplicationResponse;
      return this.apiClient.callApi(
        '/applications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDataSetImportTask operation.
     * @callback module:api/DefaultApi~createDataSetImportTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDataSetImportTaskResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a data set import task for a specific application.
     * @param {String} applicationId The unique identifier of the application for which you want to import data sets.
     * @param {module:model/CreateDataSetImportTaskRequest} createDataSetImportTaskRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDataSetImportTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDataSetImportTaskResponse}
     */
    createDataSetImportTask(applicationId, createDataSetImportTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDataSetImportTaskRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling createDataSetImportTask");
      }
      // verify the required parameter 'createDataSetImportTaskRequest' is set
      if (createDataSetImportTaskRequest === undefined || createDataSetImportTaskRequest === null) {
        throw new Error("Missing the required parameter 'createDataSetImportTaskRequest' when calling createDataSetImportTask");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDataSetImportTaskResponse;
      return this.apiClient.callApi(
        '/applications/{applicationId}/dataset-import-task', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDeployment operation.
     * @callback module:api/DefaultApi~createDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDeploymentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates and starts a deployment to deploy an application into a runtime environment.
     * @param {String} applicationId The application identifier.
     * @param {module:model/CreateDeploymentRequest} createDeploymentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDeploymentResponse}
     */
    createDeployment(applicationId, createDeploymentRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDeploymentRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling createDeployment");
      }
      // verify the required parameter 'createDeploymentRequest' is set
      if (createDeploymentRequest === undefined || createDeploymentRequest === null) {
        throw new Error("Missing the required parameter 'createDeploymentRequest' when calling createDeployment");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDeploymentResponse;
      return this.apiClient.callApi(
        '/applications/{applicationId}/deployments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEnvironment operation.
     * @callback module:api/DefaultApi~createEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateEnvironmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a runtime environment for a given runtime engine.
     * @param {module:model/CreateEnvironmentRequest} createEnvironmentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateEnvironmentResponse}
     */
    createEnvironment(createEnvironmentRequest, opts, callback) {
      opts = opts || {};
      let postBody = createEnvironmentRequest;
      // verify the required parameter 'createEnvironmentRequest' is set
      if (createEnvironmentRequest === undefined || createEnvironmentRequest === null) {
        throw new Error("Missing the required parameter 'createEnvironmentRequest' when calling createEnvironment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateEnvironmentResponse;
      return this.apiClient.callApi(
        '/environments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApplication operation.
     * @callback module:api/DefaultApi~deleteApplicationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a specific application. You cannot delete a running application.
     * @param {String} applicationId The unique identifier of the application you want to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteApplication(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteApplication");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/applications/{applicationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApplicationFromEnvironment operation.
     * @callback module:api/DefaultApi~deleteApplicationFromEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a specific application from the specific runtime environment where it was previously deployed. You cannot delete a runtime environment using DeleteEnvironment if any application has ever been deployed to it. This API removes the association of the application with the runtime environment so you can delete the environment smoothly.
     * @param {String} applicationId The unique identifier of the application you want to delete.
     * @param {String} environmentId The unique identifier of the runtime environment where the application was previously deployed.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteApplicationFromEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteApplicationFromEnvironment(applicationId, environmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteApplicationFromEnvironment");
      }
      // verify the required parameter 'environmentId' is set
      if (environmentId === undefined || environmentId === null) {
        throw new Error("Missing the required parameter 'environmentId' when calling deleteApplicationFromEnvironment");
      }

      let pathParams = {
        'applicationId': applicationId,
        'environmentId': environmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/applications/{applicationId}/environment/{environmentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEnvironment operation.
     * @callback module:api/DefaultApi~deleteEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a specific runtime environment. The environment cannot contain deployed applications. If it does, you must delete those applications before you delete the environment.
     * @param {String} environmentId The unique identifier of the runtime environment you want to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteEnvironment(environmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'environmentId' is set
      if (environmentId === undefined || environmentId === null) {
        throw new Error("Missing the required parameter 'environmentId' when calling deleteEnvironment");
      }

      let pathParams = {
        'environmentId': environmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/environments/{environmentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApplication operation.
     * @callback module:api/DefaultApi~getApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetApplicationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the details of a specific application.
     * @param {String} applicationId The identifier of the application.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetApplicationResponse}
     */
    getApplication(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getApplication");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetApplicationResponse;
      return this.apiClient.callApi(
        '/applications/{applicationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApplicationVersion operation.
     * @callback module:api/DefaultApi~getApplicationVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetApplicationVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns details about a specific version of a specific application.
     * @param {String} applicationId The unique identifier of the application.
     * @param {Number} applicationVersion The specific version of the application.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getApplicationVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetApplicationVersionResponse}
     */
    getApplicationVersion(applicationId, applicationVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getApplicationVersion");
      }
      // verify the required parameter 'applicationVersion' is set
      if (applicationVersion === undefined || applicationVersion === null) {
        throw new Error("Missing the required parameter 'applicationVersion' when calling getApplicationVersion");
      }

      let pathParams = {
        'applicationId': applicationId,
        'applicationVersion': applicationVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetApplicationVersionResponse;
      return this.apiClient.callApi(
        '/applications/{applicationId}/versions/{applicationVersion}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBatchJobExecution operation.
     * @callback module:api/DefaultApi~getBatchJobExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBatchJobExecutionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the details of a specific batch job execution for a specific application.
     * @param {String} applicationId The identifier of the application.
     * @param {String} executionId The unique identifier of the batch job execution.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getBatchJobExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBatchJobExecutionResponse}
     */
    getBatchJobExecution(applicationId, executionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getBatchJobExecution");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling getBatchJobExecution");
      }

      let pathParams = {
        'applicationId': applicationId,
        'executionId': executionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBatchJobExecutionResponse;
      return this.apiClient.callApi(
        '/applications/{applicationId}/batch-job-executions/{executionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataSetDetails operation.
     * @callback module:api/DefaultApi~getDataSetDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDataSetDetailsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the details of a specific data set.
     * @param {String} applicationId The unique identifier of the application that this data set is associated with.
     * @param {String} dataSetName The name of the data set.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDataSetDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDataSetDetailsResponse}
     */
    getDataSetDetails(applicationId, dataSetName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getDataSetDetails");
      }
      // verify the required parameter 'dataSetName' is set
      if (dataSetName === undefined || dataSetName === null) {
        throw new Error("Missing the required parameter 'dataSetName' when calling getDataSetDetails");
      }

      let pathParams = {
        'applicationId': applicationId,
        'dataSetName': dataSetName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDataSetDetailsResponse;
      return this.apiClient.callApi(
        '/applications/{applicationId}/datasets/{dataSetName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataSetImportTask operation.
     * @callback module:api/DefaultApi~getDataSetImportTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDataSetImportTaskResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the status of a data set import task initiated with the <a>CreateDataSetImportTask</a> operation.
     * @param {String} applicationId The application identifier.
     * @param {String} taskId The task identifier returned by the <a>CreateDataSetImportTask</a> operation. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDataSetImportTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDataSetImportTaskResponse}
     */
    getDataSetImportTask(applicationId, taskId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getDataSetImportTask");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling getDataSetImportTask");
      }

      let pathParams = {
        'applicationId': applicationId,
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDataSetImportTaskResponse;
      return this.apiClient.callApi(
        '/applications/{applicationId}/dataset-import-tasks/{taskId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeployment operation.
     * @callback module:api/DefaultApi~getDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeploymentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets details of a specific deployment with a given deployment identifier.
     * @param {String} applicationId The unique identifier of the application.
     * @param {String} deploymentId The unique identifier for the deployment.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeploymentResponse}
     */
    getDeployment(applicationId, deploymentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getDeployment");
      }
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling getDeployment");
      }

      let pathParams = {
        'applicationId': applicationId,
        'deploymentId': deploymentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDeploymentResponse;
      return this.apiClient.callApi(
        '/applications/{applicationId}/deployments/{deploymentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEnvironment operation.
     * @callback module:api/DefaultApi~getEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEnvironmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes a specific runtime environment.
     * @param {String} environmentId The unique identifier of the runtime environment.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEnvironmentResponse}
     */
    getEnvironment(environmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'environmentId' is set
      if (environmentId === undefined || environmentId === null) {
        throw new Error("Missing the required parameter 'environmentId' when calling getEnvironment");
      }

      let pathParams = {
        'environmentId': environmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetEnvironmentResponse;
      return this.apiClient.callApi(
        '/environments/{environmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSignedBluinsightsUrl operation.
     * @callback module:api/DefaultApi~getSignedBluinsightsUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSignedBluinsightsUrlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a single sign-on URL that can be used to connect to AWS Blu Insights.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSignedBluinsightsUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSignedBluinsightsUrlResponse}
     */
    getSignedBluinsightsUrl(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSignedBluinsightsUrlResponse;
      return this.apiClient.callApi(
        '/signed-bi-url', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listApplicationVersions operation.
     * @callback module:api/DefaultApi~listApplicationVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListApplicationVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of the application versions for a specific application.
     * @param {String} applicationId The unique identifier of the application.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of application versions to return.
     * @param {String} [nextToken] A pagination token returned from a previous call to this operation. This specifies the next item to return. To return to the beginning of the list, exclude this parameter.
     * @param {module:api/DefaultApi~listApplicationVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListApplicationVersionsResponse}
     */
    listApplicationVersions(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling listApplicationVersions");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListApplicationVersionsResponse;
      return this.apiClient.callApi(
        '/applications/{applicationId}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listApplications operation.
     * @callback module:api/DefaultApi~listApplicationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListApplicationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the applications associated with a specific Amazon Web Services account. You can provide the unique identifier of a specific runtime environment in a query parameter to see all applications associated with that environment.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [environmentId] The unique identifier of the runtime environment where the applications are deployed.
     * @param {Number} [maxResults] The maximum number of applications to return.
     * @param {Array.<String>} [names] The names of the applications.
     * @param {String} [nextToken] A pagination token to control the number of applications displayed in the list.
     * @param {module:api/DefaultApi~listApplicationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListApplicationsResponse}
     */
    listApplications(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'environmentId': opts['environmentId'],
        'maxResults': opts['maxResults'],
        'names': this.apiClient.buildCollectionParam(opts['names'], 'multi'),
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListApplicationsResponse;
      return this.apiClient.callApi(
        '/applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBatchJobDefinitions operation.
     * @callback module:api/DefaultApi~listBatchJobDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBatchJobDefinitionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the available batch job definitions based on the batch job resources uploaded during the application creation. You can use the batch job definitions in the list to start a batch job.
     * @param {String} applicationId The identifier of the application.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of batch job definitions to return.
     * @param {String} [nextToken] A pagination token returned from a previous call to this operation. This specifies the next item to return. To return to the beginning of the list, exclude this parameter.
     * @param {String} [prefix] If the batch job definition is a FileBatchJobDefinition, the prefix allows you to search on the file names of FileBatchJobDefinitions.
     * @param {module:api/DefaultApi~listBatchJobDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBatchJobDefinitionsResponse}
     */
    listBatchJobDefinitions(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling listBatchJobDefinitions");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'prefix': opts['prefix']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListBatchJobDefinitionsResponse;
      return this.apiClient.callApi(
        '/applications/{applicationId}/batch-job-definitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBatchJobExecutions operation.
     * @callback module:api/DefaultApi~listBatchJobExecutionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBatchJobExecutionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists historical, current, and scheduled batch job executions for a specific application.
     * @param {String} applicationId The unique identifier of the application.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<String>} [executionIds] The unique identifier of each batch job execution.
     * @param {String} [jobName] The name of each batch job execution.
     * @param {Number} [maxResults] The maximum number of batch job executions to return.
     * @param {String} [nextToken] A pagination token to control the number of batch job executions displayed in the list.
     * @param {Date} [startedAfter] The time after which the batch job executions started.
     * @param {Date} [startedBefore] The time before the batch job executions started.
     * @param {module:model/String} [status] The status of the batch job executions.
     * @param {module:api/DefaultApi~listBatchJobExecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBatchJobExecutionsResponse}
     */
    listBatchJobExecutions(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling listBatchJobExecutions");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
        'executionIds': this.apiClient.buildCollectionParam(opts['executionIds'], 'multi'),
        'jobName': opts['jobName'],
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'startedAfter': opts['startedAfter'],
        'startedBefore': opts['startedBefore'],
        'status': opts['status']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListBatchJobExecutionsResponse;
      return this.apiClient.callApi(
        '/applications/{applicationId}/batch-job-executions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDataSetImportHistory operation.
     * @callback module:api/DefaultApi~listDataSetImportHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDataSetImportHistoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the data set imports for the specified application.
     * @param {String} applicationId The unique identifier of the application.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of objects to return.
     * @param {String} [nextToken] A pagination token returned from a previous call to this operation. This specifies the next item to return. To return to the beginning of the list, exclude this parameter.
     * @param {module:api/DefaultApi~listDataSetImportHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDataSetImportHistoryResponse}
     */
    listDataSetImportHistory(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling listDataSetImportHistory");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDataSetImportHistoryResponse;
      return this.apiClient.callApi(
        '/applications/{applicationId}/dataset-import-tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDataSets operation.
     * @callback module:api/DefaultApi~listDataSetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDataSetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the data sets imported for a specific application. In Amazon Web Services Mainframe Modernization, data sets are associated with applications deployed on runtime environments. This is known as importing data sets. Currently, Amazon Web Services Mainframe Modernization can import data sets into catalogs using <a href=\"https://docs.aws.amazon.com/m2/latest/APIReference/API_CreateDataSetImportTask.html\">CreateDataSetImportTask</a>.
     * @param {String} applicationId The unique identifier of the application for which you want to list the associated data sets.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of objects to return.
     * @param {String} [nextToken] A pagination token returned from a previous call to this operation. This specifies the next item to return. To return to the beginning of the list, exclude this parameter.
     * @param {String} [prefix] The prefix of the data set name, which you can use to filter the list of data sets.
     * @param {module:api/DefaultApi~listDataSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDataSetsResponse}
     */
    listDataSets(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling listDataSets");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'prefix': opts['prefix']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDataSetsResponse;
      return this.apiClient.callApi(
        '/applications/{applicationId}/datasets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDeployments operation.
     * @callback module:api/DefaultApi~listDeploymentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDeploymentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all deployments of a specific application. A deployment is a combination of a specific application and a specific version of that application. Each deployment is mapped to a particular application version.
     * @param {String} applicationId The application identifier.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of objects to return.
     * @param {String} [nextToken] A pagination token returned from a previous call to this operation. This specifies the next item to return. To return to the beginning of the list, exclude this parameter.
     * @param {module:api/DefaultApi~listDeploymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDeploymentsResponse}
     */
    listDeployments(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling listDeployments");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDeploymentsResponse;
      return this.apiClient.callApi(
        '/applications/{applicationId}/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEngineVersions operation.
     * @callback module:api/DefaultApi~listEngineVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEngineVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the available engine versions.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [engineType] The type of target platform.
     * @param {Number} [maxResults] The maximum number of objects to return.
     * @param {String} [nextToken] A pagination token returned from a previous call to this operation. This specifies the next item to return. To return to the beginning of the list, exclude this parameter.
     * @param {module:api/DefaultApi~listEngineVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEngineVersionsResponse}
     */
    listEngineVersions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'engineType': opts['engineType'],
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListEngineVersionsResponse;
      return this.apiClient.callApi(
        '/engine-versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEnvironments operation.
     * @callback module:api/DefaultApi~listEnvironmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEnvironmentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the runtime environments.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [engineType] The engine type for the runtime environment.
     * @param {Number} [maxResults] The maximum number of runtime environments to return.
     * @param {Array.<String>} [names] The names of the runtime environments. Must be unique within the account.
     * @param {String} [nextToken] A pagination token to control the number of runtime environments displayed in the list.
     * @param {module:api/DefaultApi~listEnvironmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEnvironmentsResponse}
     */
    listEnvironments(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'engineType': opts['engineType'],
        'maxResults': opts['maxResults'],
        'names': this.apiClient.buildCollectionParam(opts['names'], 'multi'),
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListEnvironmentsResponse;
      return this.apiClient.callApi(
        '/environments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the tags for the specified resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startApplication operation.
     * @callback module:api/DefaultApi~startApplicationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts an application that is currently stopped.
     * @param {String} applicationId The unique identifier of the application you want to start.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    startApplication(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling startApplication");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/applications/{applicationId}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startBatchJob operation.
     * @callback module:api/DefaultApi~startBatchJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartBatchJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a batch job and returns the unique identifier of this execution of the batch job. The associated application must be running in order to start the batch job.
     * @param {String} applicationId The unique identifier of the application associated with this batch job.
     * @param {module:model/StartBatchJobRequest} startBatchJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startBatchJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartBatchJobResponse}
     */
    startBatchJob(applicationId, startBatchJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = startBatchJobRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling startBatchJob");
      }
      // verify the required parameter 'startBatchJobRequest' is set
      if (startBatchJobRequest === undefined || startBatchJobRequest === null) {
        throw new Error("Missing the required parameter 'startBatchJobRequest' when calling startBatchJob");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartBatchJobResponse;
      return this.apiClient.callApi(
        '/applications/{applicationId}/batch-job', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopApplication operation.
     * @callback module:api/DefaultApi~stopApplicationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops a running application.
     * @param {String} applicationId The unique identifier of the application you want to stop.
     * @param {module:model/StopApplicationRequest} stopApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    stopApplication(applicationId, stopApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopApplicationRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling stopApplication");
      }
      // verify the required parameter 'stopApplicationRequest' is set
      if (stopApplicationRequest === undefined || stopApplicationRequest === null) {
        throw new Error("Missing the required parameter 'stopApplicationRequest' when calling stopApplication");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/applications/{applicationId}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds one or more tags to the specified resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes one or more tags from the specified resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource.
     * @param {Array.<String>} tagKeys The keys of the tags to remove.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApplication operation.
     * @callback module:api/DefaultApi~updateApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateApplicationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an application and creates a new version.
     * @param {String} applicationId The unique identifier of the application you want to update.
     * @param {module:model/UpdateApplicationRequest} updateApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateApplicationResponse}
     */
    updateApplication(applicationId, updateApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApplicationRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling updateApplication");
      }
      // verify the required parameter 'updateApplicationRequest' is set
      if (updateApplicationRequest === undefined || updateApplicationRequest === null) {
        throw new Error("Missing the required parameter 'updateApplicationRequest' when calling updateApplication");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateApplicationResponse;
      return this.apiClient.callApi(
        '/applications/{applicationId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEnvironment operation.
     * @callback module:api/DefaultApi~updateEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateEnvironmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the configuration details for a specific runtime environment.
     * @param {String} environmentId The unique identifier of the runtime environment that you want to update.
     * @param {module:model/UpdateEnvironmentRequest} updateEnvironmentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateEnvironmentResponse}
     */
    updateEnvironment(environmentId, updateEnvironmentRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateEnvironmentRequest;
      // verify the required parameter 'environmentId' is set
      if (environmentId === undefined || environmentId === null) {
        throw new Error("Missing the required parameter 'environmentId' when calling updateEnvironment");
      }
      // verify the required parameter 'updateEnvironmentRequest' is set
      if (updateEnvironmentRequest === undefined || updateEnvironmentRequest === null) {
        throw new Error("Missing the required parameter 'updateEnvironmentRequest' when calling updateEnvironment");
      }

      let pathParams = {
        'environmentId': environmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateEnvironmentResponse;
      return this.apiClient.callApi(
        '/environments/{environmentId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
