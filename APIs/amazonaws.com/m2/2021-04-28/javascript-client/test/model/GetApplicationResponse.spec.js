/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsMainframeModernization);
  }
}(this, function(expect, AwsMainframeModernization) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsMainframeModernization.GetApplicationResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetApplicationResponse', function() {
    it('should create an instance of GetApplicationResponse', function() {
      // uncomment below and update the code to test GetApplicationResponse
      //var instance = new AwsMainframeModernization.GetApplicationResponse();
      //expect(instance).to.be.a(AwsMainframeModernization.GetApplicationResponse);
    });

    it('should have the property applicationArn (base name: "applicationArn")', function() {
      // uncomment below and update the code to test the property applicationArn
      //var instance = new AwsMainframeModernization.GetApplicationResponse();
      //expect(instance).to.be();
    });

    it('should have the property applicationId (base name: "applicationId")', function() {
      // uncomment below and update the code to test the property applicationId
      //var instance = new AwsMainframeModernization.GetApplicationResponse();
      //expect(instance).to.be();
    });

    it('should have the property creationTime (base name: "creationTime")', function() {
      // uncomment below and update the code to test the property creationTime
      //var instance = new AwsMainframeModernization.GetApplicationResponse();
      //expect(instance).to.be();
    });

    it('should have the property deployedVersion (base name: "deployedVersion")', function() {
      // uncomment below and update the code to test the property deployedVersion
      //var instance = new AwsMainframeModernization.GetApplicationResponse();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new AwsMainframeModernization.GetApplicationResponse();
      //expect(instance).to.be();
    });

    it('should have the property engineType (base name: "engineType")', function() {
      // uncomment below and update the code to test the property engineType
      //var instance = new AwsMainframeModernization.GetApplicationResponse();
      //expect(instance).to.be();
    });

    it('should have the property environmentId (base name: "environmentId")', function() {
      // uncomment below and update the code to test the property environmentId
      //var instance = new AwsMainframeModernization.GetApplicationResponse();
      //expect(instance).to.be();
    });

    it('should have the property kmsKeyId (base name: "kmsKeyId")', function() {
      // uncomment below and update the code to test the property kmsKeyId
      //var instance = new AwsMainframeModernization.GetApplicationResponse();
      //expect(instance).to.be();
    });

    it('should have the property lastStartTime (base name: "lastStartTime")', function() {
      // uncomment below and update the code to test the property lastStartTime
      //var instance = new AwsMainframeModernization.GetApplicationResponse();
      //expect(instance).to.be();
    });

    it('should have the property latestVersion (base name: "latestVersion")', function() {
      // uncomment below and update the code to test the property latestVersion
      //var instance = new AwsMainframeModernization.GetApplicationResponse();
      //expect(instance).to.be();
    });

    it('should have the property listenerArns (base name: "listenerArns")', function() {
      // uncomment below and update the code to test the property listenerArns
      //var instance = new AwsMainframeModernization.GetApplicationResponse();
      //expect(instance).to.be();
    });

    it('should have the property listenerPorts (base name: "listenerPorts")', function() {
      // uncomment below and update the code to test the property listenerPorts
      //var instance = new AwsMainframeModernization.GetApplicationResponse();
      //expect(instance).to.be();
    });

    it('should have the property loadBalancerDnsName (base name: "loadBalancerDnsName")', function() {
      // uncomment below and update the code to test the property loadBalancerDnsName
      //var instance = new AwsMainframeModernization.GetApplicationResponse();
      //expect(instance).to.be();
    });

    it('should have the property logGroups (base name: "logGroups")', function() {
      // uncomment below and update the code to test the property logGroups
      //var instance = new AwsMainframeModernization.GetApplicationResponse();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new AwsMainframeModernization.GetApplicationResponse();
      //expect(instance).to.be();
    });

    it('should have the property roleArn (base name: "roleArn")', function() {
      // uncomment below and update the code to test the property roleArn
      //var instance = new AwsMainframeModernization.GetApplicationResponse();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new AwsMainframeModernization.GetApplicationResponse();
      //expect(instance).to.be();
    });

    it('should have the property statusReason (base name: "statusReason")', function() {
      // uncomment below and update the code to test the property statusReason
      //var instance = new AwsMainframeModernization.GetApplicationResponse();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new AwsMainframeModernization.GetApplicationResponse();
      //expect(instance).to.be();
    });

    it('should have the property targetGroupArns (base name: "targetGroupArns")', function() {
      // uncomment below and update the code to test the property targetGroupArns
      //var instance = new AwsMainframeModernization.GetApplicationResponse();
      //expect(instance).to.be();
    });

  });

}));
