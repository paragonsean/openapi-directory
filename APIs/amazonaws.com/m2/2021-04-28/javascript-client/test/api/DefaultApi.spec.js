/**
 * AWSMainframeModernization
 * Amazon Web Services Mainframe Modernization provides tools and resources to help you plan and implement migration and modernization from mainframes to Amazon Web Services managed runtime environments. It provides tools for analyzing existing mainframe applications, developing or updating mainframe applications using COBOL or PL/I, and implementing an automated pipeline for continuous integration and continuous delivery (CI/CD) of the applications.
 *
 * The version of the OpenAPI document: 2021-04-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsMainframeModernization);
  }
}(this, function(expect, AwsMainframeModernization) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsMainframeModernization.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('cancelBatchJobExecution', function() {
      it('should call cancelBatchJobExecution successfully', function(done) {
        //uncomment below and update the code to test cancelBatchJobExecution
        //instance.cancelBatchJobExecution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createApplication', function() {
      it('should call createApplication successfully', function(done) {
        //uncomment below and update the code to test createApplication
        //instance.createApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createDataSetImportTask', function() {
      it('should call createDataSetImportTask successfully', function(done) {
        //uncomment below and update the code to test createDataSetImportTask
        //instance.createDataSetImportTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createDeployment', function() {
      it('should call createDeployment successfully', function(done) {
        //uncomment below and update the code to test createDeployment
        //instance.createDeployment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createEnvironment', function() {
      it('should call createEnvironment successfully', function(done) {
        //uncomment below and update the code to test createEnvironment
        //instance.createEnvironment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteApplication', function() {
      it('should call deleteApplication successfully', function(done) {
        //uncomment below and update the code to test deleteApplication
        //instance.deleteApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteApplicationFromEnvironment', function() {
      it('should call deleteApplicationFromEnvironment successfully', function(done) {
        //uncomment below and update the code to test deleteApplicationFromEnvironment
        //instance.deleteApplicationFromEnvironment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEnvironment', function() {
      it('should call deleteEnvironment successfully', function(done) {
        //uncomment below and update the code to test deleteEnvironment
        //instance.deleteEnvironment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getApplication', function() {
      it('should call getApplication successfully', function(done) {
        //uncomment below and update the code to test getApplication
        //instance.getApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getApplicationVersion', function() {
      it('should call getApplicationVersion successfully', function(done) {
        //uncomment below and update the code to test getApplicationVersion
        //instance.getApplicationVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBatchJobExecution', function() {
      it('should call getBatchJobExecution successfully', function(done) {
        //uncomment below and update the code to test getBatchJobExecution
        //instance.getBatchJobExecution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDataSetDetails', function() {
      it('should call getDataSetDetails successfully', function(done) {
        //uncomment below and update the code to test getDataSetDetails
        //instance.getDataSetDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDataSetImportTask', function() {
      it('should call getDataSetImportTask successfully', function(done) {
        //uncomment below and update the code to test getDataSetImportTask
        //instance.getDataSetImportTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDeployment', function() {
      it('should call getDeployment successfully', function(done) {
        //uncomment below and update the code to test getDeployment
        //instance.getDeployment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEnvironment', function() {
      it('should call getEnvironment successfully', function(done) {
        //uncomment below and update the code to test getEnvironment
        //instance.getEnvironment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSignedBluinsightsUrl', function() {
      it('should call getSignedBluinsightsUrl successfully', function(done) {
        //uncomment below and update the code to test getSignedBluinsightsUrl
        //instance.getSignedBluinsightsUrl(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listApplicationVersions', function() {
      it('should call listApplicationVersions successfully', function(done) {
        //uncomment below and update the code to test listApplicationVersions
        //instance.listApplicationVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listApplications', function() {
      it('should call listApplications successfully', function(done) {
        //uncomment below and update the code to test listApplications
        //instance.listApplications(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBatchJobDefinitions', function() {
      it('should call listBatchJobDefinitions successfully', function(done) {
        //uncomment below and update the code to test listBatchJobDefinitions
        //instance.listBatchJobDefinitions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBatchJobExecutions', function() {
      it('should call listBatchJobExecutions successfully', function(done) {
        //uncomment below and update the code to test listBatchJobExecutions
        //instance.listBatchJobExecutions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDataSetImportHistory', function() {
      it('should call listDataSetImportHistory successfully', function(done) {
        //uncomment below and update the code to test listDataSetImportHistory
        //instance.listDataSetImportHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDataSets', function() {
      it('should call listDataSets successfully', function(done) {
        //uncomment below and update the code to test listDataSets
        //instance.listDataSets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDeployments', function() {
      it('should call listDeployments successfully', function(done) {
        //uncomment below and update the code to test listDeployments
        //instance.listDeployments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEngineVersions', function() {
      it('should call listEngineVersions successfully', function(done) {
        //uncomment below and update the code to test listEngineVersions
        //instance.listEngineVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEnvironments', function() {
      it('should call listEnvironments successfully', function(done) {
        //uncomment below and update the code to test listEnvironments
        //instance.listEnvironments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startApplication', function() {
      it('should call startApplication successfully', function(done) {
        //uncomment below and update the code to test startApplication
        //instance.startApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startBatchJob', function() {
      it('should call startBatchJob successfully', function(done) {
        //uncomment below and update the code to test startBatchJob
        //instance.startBatchJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopApplication', function() {
      it('should call stopApplication successfully', function(done) {
        //uncomment below and update the code to test stopApplication
        //instance.stopApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateApplication', function() {
      it('should call updateApplication successfully', function(done) {
        //uncomment below and update the code to test updateApplication
        //instance.updateApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateEnvironment', function() {
      it('should call updateEnvironment successfully', function(done) {
        //uncomment below and update the code to test updateEnvironment
        //instance.updateEnvironment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
