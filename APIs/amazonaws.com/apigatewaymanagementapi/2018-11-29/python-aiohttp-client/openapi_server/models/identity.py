# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Identity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source_ip: str=None, user_agent: str=None):
        """Identity - a model defined in OpenAPI

        :param source_ip: The source_ip of this Identity.
        :param user_agent: The user_agent of this Identity.
        """
        self.openapi_types = {
            'source_ip': str,
            'user_agent': str
        }

        self.attribute_map = {
            'source_ip': 'SourceIp',
            'user_agent': 'UserAgent'
        }

        self._source_ip = source_ip
        self._user_agent = user_agent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Identity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Identity of this Identity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_ip(self):
        """Gets the source_ip of this Identity.


        :return: The source_ip of this Identity.
        :rtype: str
        """
        return self._source_ip

    @source_ip.setter
    def source_ip(self, source_ip):
        """Sets the source_ip of this Identity.


        :param source_ip: The source_ip of this Identity.
        :type source_ip: str
        """
        if source_ip is None:
            raise ValueError("Invalid value for `source_ip`, must not be `None`")

        self._source_ip = source_ip

    @property
    def user_agent(self):
        """Gets the user_agent of this Identity.


        :return: The user_agent of this Identity.
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this Identity.


        :param user_agent: The user_agent of this Identity.
        :type user_agent: str
        """
        if user_agent is None:
            raise ValueError("Invalid value for `user_agent`, must not be `None`")

        self._user_agent = user_agent
