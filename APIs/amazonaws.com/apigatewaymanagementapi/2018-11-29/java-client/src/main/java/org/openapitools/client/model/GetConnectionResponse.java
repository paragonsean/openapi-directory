/*
 * AmazonApiGatewayManagementApi
 * The Amazon API Gateway Management API allows you to directly manage runtime aspects of your deployed APIs. To use it, you must explicitly set the SDK's endpoint to point to the endpoint of your deployed API. The endpoint will be of the form https://{api-id}.execute-api.{region}.amazonaws.com/{stage}, or will be the endpoint corresponding to your API's custom domain and base path, if applicable.
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.GetConnectionResponseIdentity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetConnectionResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:33.577019-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetConnectionResponse {
  public static final String SERIALIZED_NAME_CONNECTED_AT = "ConnectedAt";
  @SerializedName(SERIALIZED_NAME_CONNECTED_AT)
  private OffsetDateTime connectedAt;

  public static final String SERIALIZED_NAME_IDENTITY = "Identity";
  @SerializedName(SERIALIZED_NAME_IDENTITY)
  private GetConnectionResponseIdentity identity;

  public static final String SERIALIZED_NAME_LAST_ACTIVE_AT = "LastActiveAt";
  @SerializedName(SERIALIZED_NAME_LAST_ACTIVE_AT)
  private OffsetDateTime lastActiveAt;

  public GetConnectionResponse() {
  }

  public GetConnectionResponse connectedAt(OffsetDateTime connectedAt) {
    this.connectedAt = connectedAt;
    return this;
  }

  /**
   * Get connectedAt
   * @return connectedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getConnectedAt() {
    return connectedAt;
  }

  public void setConnectedAt(OffsetDateTime connectedAt) {
    this.connectedAt = connectedAt;
  }


  public GetConnectionResponse identity(GetConnectionResponseIdentity identity) {
    this.identity = identity;
    return this;
  }

  /**
   * Get identity
   * @return identity
   */
  @javax.annotation.Nullable
  public GetConnectionResponseIdentity getIdentity() {
    return identity;
  }

  public void setIdentity(GetConnectionResponseIdentity identity) {
    this.identity = identity;
  }


  public GetConnectionResponse lastActiveAt(OffsetDateTime lastActiveAt) {
    this.lastActiveAt = lastActiveAt;
    return this;
  }

  /**
   * Get lastActiveAt
   * @return lastActiveAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastActiveAt() {
    return lastActiveAt;
  }

  public void setLastActiveAt(OffsetDateTime lastActiveAt) {
    this.lastActiveAt = lastActiveAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetConnectionResponse getConnectionResponse = (GetConnectionResponse) o;
    return Objects.equals(this.connectedAt, getConnectionResponse.connectedAt) &&
        Objects.equals(this.identity, getConnectionResponse.identity) &&
        Objects.equals(this.lastActiveAt, getConnectionResponse.lastActiveAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectedAt, identity, lastActiveAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetConnectionResponse {\n");
    sb.append("    connectedAt: ").append(toIndentedString(connectedAt)).append("\n");
    sb.append("    identity: ").append(toIndentedString(identity)).append("\n");
    sb.append("    lastActiveAt: ").append(toIndentedString(lastActiveAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ConnectedAt");
    openapiFields.add("Identity");
    openapiFields.add("LastActiveAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetConnectionResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetConnectionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetConnectionResponse is not found in the empty JSON string", GetConnectionResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetConnectionResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetConnectionResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ConnectedAt`
      if (jsonObj.get("ConnectedAt") != null && !jsonObj.get("ConnectedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ConnectedAt"));
      }
      // validate the optional field `Identity`
      if (jsonObj.get("Identity") != null && !jsonObj.get("Identity").isJsonNull()) {
        GetConnectionResponseIdentity.validateJsonElement(jsonObj.get("Identity"));
      }
      // validate the optional field `LastActiveAt`
      if (jsonObj.get("LastActiveAt") != null && !jsonObj.get("LastActiveAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastActiveAt"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetConnectionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetConnectionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetConnectionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetConnectionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetConnectionResponse>() {
           @Override
           public void write(JsonWriter out, GetConnectionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetConnectionResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetConnectionResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetConnectionResponse
   * @throws IOException if the JSON string is invalid with respect to GetConnectionResponse
   */
  public static GetConnectionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetConnectionResponse.class);
  }

  /**
   * Convert an instance of GetConnectionResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

