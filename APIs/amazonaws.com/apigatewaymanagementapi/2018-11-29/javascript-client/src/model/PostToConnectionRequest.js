/**
 * AmazonApiGatewayManagementApi
 * The Amazon API Gateway Management API allows you to directly manage runtime aspects of your deployed APIs. To use it, you must explicitly set the SDK's endpoint to point to the endpoint of your deployed API. The endpoint will be of the form https://{api-id}.execute-api.{region}.amazonaws.com/{stage}, or will be the endpoint corresponding to your API's custom domain and base path, if applicable.
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PostToConnectionRequest model module.
 * @module model/PostToConnectionRequest
 * @version 2018-11-29
 */
class PostToConnectionRequest {
    /**
     * Constructs a new <code>PostToConnectionRequest</code>.
     * @alias module:model/PostToConnectionRequest
     * @param data {String} The data to be sent to the client specified by its connection id.
     */
    constructor(data) { 
        
        PostToConnectionRequest.initialize(this, data);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, data) { 
        obj['Data'] = data;
    }

    /**
     * Constructs a <code>PostToConnectionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostToConnectionRequest} obj Optional instance to populate.
     * @return {module:model/PostToConnectionRequest} The populated <code>PostToConnectionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostToConnectionRequest();

            if (data.hasOwnProperty('Data')) {
                obj['Data'] = ApiClient.convertToType(data['Data'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PostToConnectionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PostToConnectionRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PostToConnectionRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Data'] && !(typeof data['Data'] === 'string' || data['Data'] instanceof String)) {
            throw new Error("Expected the field `Data` to be a primitive type in the JSON string but got " + data['Data']);
        }

        return true;
    }


}

PostToConnectionRequest.RequiredProperties = ["Data"];

/**
 * The data to be sent to the client specified by its connection id.
 * @member {String} Data
 */
PostToConnectionRequest.prototype['Data'] = undefined;






export default PostToConnectionRequest;

