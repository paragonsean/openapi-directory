/**
 * AmazonApiGatewayManagementApi
 * The Amazon API Gateway Management API allows you to directly manage runtime aspects of your deployed APIs. To use it, you must explicitly set the SDK's endpoint to point to the endpoint of your deployed API. The endpoint will be of the form https://{api-id}.execute-api.{region}.amazonaws.com/{stage}, or will be the endpoint corresponding to your API's custom domain and base path, if applicable.
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostToConnectionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostToConnectionRequest::OAIPostToConnectionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostToConnectionRequest::OAIPostToConnectionRequest() {
    this->initializeModel();
}

OAIPostToConnectionRequest::~OAIPostToConnectionRequest() {}

void OAIPostToConnectionRequest::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;
}

void OAIPostToConnectionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostToConnectionRequest::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("Data")]);
    m_data_isSet = !json[QString("Data")].isNull() && m_data_isValid;
}

QString OAIPostToConnectionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostToConnectionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_data_isSet) {
        obj.insert(QString("Data"), ::OpenAPI::toJsonValue(m_data));
    }
    return obj;
}

QString OAIPostToConnectionRequest::getData() const {
    return m_data;
}
void OAIPostToConnectionRequest::setData(const QString &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIPostToConnectionRequest::is_data_Set() const{
    return m_data_isSet;
}

bool OAIPostToConnectionRequest::is_data_Valid() const{
    return m_data_isValid;
}

bool OAIPostToConnectionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostToConnectionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_isValid && true;
}

} // namespace OpenAPI
