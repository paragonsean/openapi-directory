/**
 * AmazonApiGatewayManagementApi
 * The Amazon API Gateway Management API allows you to directly manage runtime aspects of your deployed APIs. To use it, you must explicitly set the SDK's endpoint to point to the endpoint of your deployed API. The endpoint will be of the form https://{api-id}.execute-api.{region}.amazonaws.com/{stage}, or will be the endpoint corresponding to your API's custom domain and base path, if applicable.
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetConnectionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetConnectionResponse::OAIGetConnectionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetConnectionResponse::OAIGetConnectionResponse() {
    this->initializeModel();
}

OAIGetConnectionResponse::~OAIGetConnectionResponse() {}

void OAIGetConnectionResponse::initializeModel() {

    m_connected_at_isSet = false;
    m_connected_at_isValid = false;

    m_identity_isSet = false;
    m_identity_isValid = false;

    m_last_active_at_isSet = false;
    m_last_active_at_isValid = false;
}

void OAIGetConnectionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetConnectionResponse::fromJsonObject(QJsonObject json) {

    m_connected_at_isValid = ::OpenAPI::fromJsonValue(m_connected_at, json[QString("ConnectedAt")]);
    m_connected_at_isSet = !json[QString("ConnectedAt")].isNull() && m_connected_at_isValid;

    m_identity_isValid = ::OpenAPI::fromJsonValue(m_identity, json[QString("Identity")]);
    m_identity_isSet = !json[QString("Identity")].isNull() && m_identity_isValid;

    m_last_active_at_isValid = ::OpenAPI::fromJsonValue(m_last_active_at, json[QString("LastActiveAt")]);
    m_last_active_at_isSet = !json[QString("LastActiveAt")].isNull() && m_last_active_at_isValid;
}

QString OAIGetConnectionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetConnectionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_connected_at_isSet) {
        obj.insert(QString("ConnectedAt"), ::OpenAPI::toJsonValue(m_connected_at));
    }
    if (m_identity.isSet()) {
        obj.insert(QString("Identity"), ::OpenAPI::toJsonValue(m_identity));
    }
    if (m_last_active_at_isSet) {
        obj.insert(QString("LastActiveAt"), ::OpenAPI::toJsonValue(m_last_active_at));
    }
    return obj;
}

QDateTime OAIGetConnectionResponse::getConnectedAt() const {
    return m_connected_at;
}
void OAIGetConnectionResponse::setConnectedAt(const QDateTime &connected_at) {
    m_connected_at = connected_at;
    m_connected_at_isSet = true;
}

bool OAIGetConnectionResponse::is_connected_at_Set() const{
    return m_connected_at_isSet;
}

bool OAIGetConnectionResponse::is_connected_at_Valid() const{
    return m_connected_at_isValid;
}

OAIGetConnectionResponse_Identity OAIGetConnectionResponse::getIdentity() const {
    return m_identity;
}
void OAIGetConnectionResponse::setIdentity(const OAIGetConnectionResponse_Identity &identity) {
    m_identity = identity;
    m_identity_isSet = true;
}

bool OAIGetConnectionResponse::is_identity_Set() const{
    return m_identity_isSet;
}

bool OAIGetConnectionResponse::is_identity_Valid() const{
    return m_identity_isValid;
}

QDateTime OAIGetConnectionResponse::getLastActiveAt() const {
    return m_last_active_at;
}
void OAIGetConnectionResponse::setLastActiveAt(const QDateTime &last_active_at) {
    m_last_active_at = last_active_at;
    m_last_active_at_isSet = true;
}

bool OAIGetConnectionResponse::is_last_active_at_Set() const{
    return m_last_active_at_isSet;
}

bool OAIGetConnectionResponse::is_last_active_at_Valid() const{
    return m_last_active_at_isValid;
}

bool OAIGetConnectionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connected_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_active_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetConnectionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
