/**
 * AmazonApiGatewayManagementApi
 * The Amazon API Gateway Management API allows you to directly manage runtime aspects of your deployed APIs. To use it, you must explicitly set the SDK's endpoint to point to the endpoint of your deployed API. The endpoint will be of the form https://{api-id}.execute-api.{region}.amazonaws.com/{stage}, or will be the endpoint corresponding to your API's custom domain and base path, if applicable.
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostToConnection_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostToConnection_request::OAIPostToConnection_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostToConnection_request::OAIPostToConnection_request() {
    this->initializeModel();
}

OAIPostToConnection_request::~OAIPostToConnection_request() {}

void OAIPostToConnection_request::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;
}

void OAIPostToConnection_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostToConnection_request::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("Data")]);
    m_data_isSet = !json[QString("Data")].isNull() && m_data_isValid;
}

QString OAIPostToConnection_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostToConnection_request::asJsonObject() const {
    QJsonObject obj;
    if (m_data_isSet) {
        obj.insert(QString("Data"), ::OpenAPI::toJsonValue(m_data));
    }
    return obj;
}

QString OAIPostToConnection_request::getData() const {
    return m_data;
}
void OAIPostToConnection_request::setData(const QString &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIPostToConnection_request::is_data_Set() const{
    return m_data_isSet;
}

bool OAIPostToConnection_request::is_data_Valid() const{
    return m_data_isValid;
}

bool OAIPostToConnection_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostToConnection_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_isValid && true;
}

} // namespace OpenAPI
