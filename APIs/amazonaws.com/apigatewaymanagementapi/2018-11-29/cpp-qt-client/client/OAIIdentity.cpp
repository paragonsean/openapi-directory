/**
 * AmazonApiGatewayManagementApi
 * The Amazon API Gateway Management API allows you to directly manage runtime aspects of your deployed APIs. To use it, you must explicitly set the SDK's endpoint to point to the endpoint of your deployed API. The endpoint will be of the form https://{api-id}.execute-api.{region}.amazonaws.com/{stage}, or will be the endpoint corresponding to your API's custom domain and base path, if applicable.
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentity::OAIIdentity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentity::OAIIdentity() {
    this->initializeModel();
}

OAIIdentity::~OAIIdentity() {}

void OAIIdentity::initializeModel() {

    m_source_ip_isSet = false;
    m_source_ip_isValid = false;

    m_user_agent_isSet = false;
    m_user_agent_isValid = false;
}

void OAIIdentity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentity::fromJsonObject(QJsonObject json) {

    m_source_ip_isValid = ::OpenAPI::fromJsonValue(m_source_ip, json[QString("SourceIp")]);
    m_source_ip_isSet = !json[QString("SourceIp")].isNull() && m_source_ip_isValid;

    m_user_agent_isValid = ::OpenAPI::fromJsonValue(m_user_agent, json[QString("UserAgent")]);
    m_user_agent_isSet = !json[QString("UserAgent")].isNull() && m_user_agent_isValid;
}

QString OAIIdentity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentity::asJsonObject() const {
    QJsonObject obj;
    if (m_source_ip_isSet) {
        obj.insert(QString("SourceIp"), ::OpenAPI::toJsonValue(m_source_ip));
    }
    if (m_user_agent_isSet) {
        obj.insert(QString("UserAgent"), ::OpenAPI::toJsonValue(m_user_agent));
    }
    return obj;
}

QString OAIIdentity::getSourceIp() const {
    return m_source_ip;
}
void OAIIdentity::setSourceIp(const QString &source_ip) {
    m_source_ip = source_ip;
    m_source_ip_isSet = true;
}

bool OAIIdentity::is_source_ip_Set() const{
    return m_source_ip_isSet;
}

bool OAIIdentity::is_source_ip_Valid() const{
    return m_source_ip_isValid;
}

QString OAIIdentity::getUserAgent() const {
    return m_user_agent;
}
void OAIIdentity::setUserAgent(const QString &user_agent) {
    m_user_agent = user_agent;
    m_user_agent_isSet = true;
}

bool OAIIdentity::is_user_agent_Set() const{
    return m_user_agent_isSet;
}

bool OAIIdentity::is_user_agent_Valid() const{
    return m_user_agent_isValid;
}

bool OAIIdentity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_ip_isValid && m_user_agent_isValid && true;
}

} // namespace OpenAPI
