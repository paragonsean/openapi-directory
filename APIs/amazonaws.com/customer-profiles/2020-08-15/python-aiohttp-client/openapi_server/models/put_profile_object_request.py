# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PutProfileObjectRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, object_type_name: str=None, object: str=None):
        """PutProfileObjectRequest - a model defined in OpenAPI

        :param object_type_name: The object_type_name of this PutProfileObjectRequest.
        :param object: The object of this PutProfileObjectRequest.
        """
        self.openapi_types = {
            'object_type_name': str,
            'object': str
        }

        self.attribute_map = {
            'object_type_name': 'ObjectTypeName',
            'object': 'Object'
        }

        self._object_type_name = object_type_name
        self._object = object

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutProfileObjectRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutProfileObject_request of this PutProfileObjectRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def object_type_name(self):
        """Gets the object_type_name of this PutProfileObjectRequest.

        The name of the profile object type.

        :return: The object_type_name of this PutProfileObjectRequest.
        :rtype: str
        """
        return self._object_type_name

    @object_type_name.setter
    def object_type_name(self, object_type_name):
        """Sets the object_type_name of this PutProfileObjectRequest.

        The name of the profile object type.

        :param object_type_name: The object_type_name of this PutProfileObjectRequest.
        :type object_type_name: str
        """
        if object_type_name is None:
            raise ValueError("Invalid value for `object_type_name`, must not be `None`")
        if object_type_name is not None and len(object_type_name) > 255:
            raise ValueError("Invalid value for `object_type_name`, length must be less than or equal to `255`")
        if object_type_name is not None and len(object_type_name) < 1:
            raise ValueError("Invalid value for `object_type_name`, length must be greater than or equal to `1`")
        if object_type_name is not None and not re.search(r'^[a-zA-Z_][a-zA-Z_0-9-]*$', object_type_name):
            raise ValueError("Invalid value for `object_type_name`, must be a follow pattern or equal to `/^[a-zA-Z_][a-zA-Z_0-9-]*$/`")

        self._object_type_name = object_type_name

    @property
    def object(self):
        """Gets the object of this PutProfileObjectRequest.

        A string that is serialized from a JSON object.

        :return: The object of this PutProfileObjectRequest.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this PutProfileObjectRequest.

        A string that is serialized from a JSON object.

        :param object: The object of this PutProfileObjectRequest.
        :type object: str
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")
        if object is not None and len(object) > 256000:
            raise ValueError("Invalid value for `object`, length must be less than or equal to `256000`")
        if object is not None and len(object) < 1:
            raise ValueError("Invalid value for `object`, length must be greater than or equal to `1`")

        self._object = object
