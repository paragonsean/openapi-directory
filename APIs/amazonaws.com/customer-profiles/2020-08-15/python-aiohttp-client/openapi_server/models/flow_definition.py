# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.put_integration_request_flow_definition_source_flow_config import PutIntegrationRequestFlowDefinitionSourceFlowConfig
from openapi_server.models.put_integration_request_flow_definition_trigger_config import PutIntegrationRequestFlowDefinitionTriggerConfig
from openapi_server import util


class FlowDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, flow_name: str=None, kms_arn: str=None, source_flow_config: PutIntegrationRequestFlowDefinitionSourceFlowConfig=None, tasks: List=None, trigger_config: PutIntegrationRequestFlowDefinitionTriggerConfig=None):
        """FlowDefinition - a model defined in OpenAPI

        :param description: The description of this FlowDefinition.
        :param flow_name: The flow_name of this FlowDefinition.
        :param kms_arn: The kms_arn of this FlowDefinition.
        :param source_flow_config: The source_flow_config of this FlowDefinition.
        :param tasks: The tasks of this FlowDefinition.
        :param trigger_config: The trigger_config of this FlowDefinition.
        """
        self.openapi_types = {
            'description': str,
            'flow_name': str,
            'kms_arn': str,
            'source_flow_config': PutIntegrationRequestFlowDefinitionSourceFlowConfig,
            'tasks': List,
            'trigger_config': PutIntegrationRequestFlowDefinitionTriggerConfig
        }

        self.attribute_map = {
            'description': 'Description',
            'flow_name': 'FlowName',
            'kms_arn': 'KmsArn',
            'source_flow_config': 'SourceFlowConfig',
            'tasks': 'Tasks',
            'trigger_config': 'TriggerConfig'
        }

        self._description = description
        self._flow_name = flow_name
        self._kms_arn = kms_arn
        self._source_flow_config = source_flow_config
        self._tasks = tasks
        self._trigger_config = trigger_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FlowDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FlowDefinition of this FlowDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this FlowDefinition.


        :return: The description of this FlowDefinition.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FlowDefinition.


        :param description: The description of this FlowDefinition.
        :type description: str
        """

        self._description = description

    @property
    def flow_name(self):
        """Gets the flow_name of this FlowDefinition.


        :return: The flow_name of this FlowDefinition.
        :rtype: str
        """
        return self._flow_name

    @flow_name.setter
    def flow_name(self, flow_name):
        """Sets the flow_name of this FlowDefinition.


        :param flow_name: The flow_name of this FlowDefinition.
        :type flow_name: str
        """
        if flow_name is None:
            raise ValueError("Invalid value for `flow_name`, must not be `None`")

        self._flow_name = flow_name

    @property
    def kms_arn(self):
        """Gets the kms_arn of this FlowDefinition.


        :return: The kms_arn of this FlowDefinition.
        :rtype: str
        """
        return self._kms_arn

    @kms_arn.setter
    def kms_arn(self, kms_arn):
        """Sets the kms_arn of this FlowDefinition.


        :param kms_arn: The kms_arn of this FlowDefinition.
        :type kms_arn: str
        """
        if kms_arn is None:
            raise ValueError("Invalid value for `kms_arn`, must not be `None`")

        self._kms_arn = kms_arn

    @property
    def source_flow_config(self):
        """Gets the source_flow_config of this FlowDefinition.


        :return: The source_flow_config of this FlowDefinition.
        :rtype: PutIntegrationRequestFlowDefinitionSourceFlowConfig
        """
        return self._source_flow_config

    @source_flow_config.setter
    def source_flow_config(self, source_flow_config):
        """Sets the source_flow_config of this FlowDefinition.


        :param source_flow_config: The source_flow_config of this FlowDefinition.
        :type source_flow_config: PutIntegrationRequestFlowDefinitionSourceFlowConfig
        """
        if source_flow_config is None:
            raise ValueError("Invalid value for `source_flow_config`, must not be `None`")

        self._source_flow_config = source_flow_config

    @property
    def tasks(self):
        """Gets the tasks of this FlowDefinition.


        :return: The tasks of this FlowDefinition.
        :rtype: List
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this FlowDefinition.


        :param tasks: The tasks of this FlowDefinition.
        :type tasks: List
        """
        if tasks is None:
            raise ValueError("Invalid value for `tasks`, must not be `None`")

        self._tasks = tasks

    @property
    def trigger_config(self):
        """Gets the trigger_config of this FlowDefinition.


        :return: The trigger_config of this FlowDefinition.
        :rtype: PutIntegrationRequestFlowDefinitionTriggerConfig
        """
        return self._trigger_config

    @trigger_config.setter
    def trigger_config(self, trigger_config):
        """Sets the trigger_config of this FlowDefinition.


        :param trigger_config: The trigger_config of this FlowDefinition.
        :type trigger_config: PutIntegrationRequestFlowDefinitionTriggerConfig
        """
        if trigger_config is None:
            raise ValueError("Invalid value for `trigger_config`, must not be `None`")

        self._trigger_config = trigger_config
