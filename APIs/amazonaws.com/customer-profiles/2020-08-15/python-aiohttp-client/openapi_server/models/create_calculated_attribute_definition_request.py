# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_calculated_attribute_definition_request_attribute_details import CreateCalculatedAttributeDefinitionRequestAttributeDetails
from openapi_server.models.update_calculated_attribute_definition_request_conditions import UpdateCalculatedAttributeDefinitionRequestConditions
import re
from openapi_server import util


class CreateCalculatedAttributeDefinitionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, description: str=None, attribute_details: CreateCalculatedAttributeDefinitionRequestAttributeDetails=None, conditions: UpdateCalculatedAttributeDefinitionRequestConditions=None, statistic: str=None, tags: Dict[str, str]=None):
        """CreateCalculatedAttributeDefinitionRequest - a model defined in OpenAPI

        :param display_name: The display_name of this CreateCalculatedAttributeDefinitionRequest.
        :param description: The description of this CreateCalculatedAttributeDefinitionRequest.
        :param attribute_details: The attribute_details of this CreateCalculatedAttributeDefinitionRequest.
        :param conditions: The conditions of this CreateCalculatedAttributeDefinitionRequest.
        :param statistic: The statistic of this CreateCalculatedAttributeDefinitionRequest.
        :param tags: The tags of this CreateCalculatedAttributeDefinitionRequest.
        """
        self.openapi_types = {
            'display_name': str,
            'description': str,
            'attribute_details': CreateCalculatedAttributeDefinitionRequestAttributeDetails,
            'conditions': UpdateCalculatedAttributeDefinitionRequestConditions,
            'statistic': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'display_name': 'DisplayName',
            'description': 'Description',
            'attribute_details': 'AttributeDetails',
            'conditions': 'Conditions',
            'statistic': 'Statistic',
            'tags': 'Tags'
        }

        self._display_name = display_name
        self._description = description
        self._attribute_details = attribute_details
        self._conditions = conditions
        self._statistic = statistic
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCalculatedAttributeDefinitionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCalculatedAttributeDefinition_request of this CreateCalculatedAttributeDefinitionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this CreateCalculatedAttributeDefinitionRequest.

        The display name of the calculated attribute.

        :return: The display_name of this CreateCalculatedAttributeDefinitionRequest.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CreateCalculatedAttributeDefinitionRequest.

        The display name of the calculated attribute.

        :param display_name: The display_name of this CreateCalculatedAttributeDefinitionRequest.
        :type display_name: str
        """
        if display_name is not None and len(display_name) > 255:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `255`")
        if display_name is not None and len(display_name) < 1:
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `1`")
        if display_name is not None and not re.search(r'^[a-zA-Z_][a-zA-Z_0-9-\s]*$', display_name):
            raise ValueError("Invalid value for `display_name`, must be a follow pattern or equal to `/^[a-zA-Z_][a-zA-Z_0-9-\s]*$/`")

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this CreateCalculatedAttributeDefinitionRequest.

        The description of the calculated attribute.

        :return: The description of this CreateCalculatedAttributeDefinitionRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateCalculatedAttributeDefinitionRequest.

        The description of the calculated attribute.

        :param description: The description of this CreateCalculatedAttributeDefinitionRequest.
        :type description: str
        """
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def attribute_details(self):
        """Gets the attribute_details of this CreateCalculatedAttributeDefinitionRequest.


        :return: The attribute_details of this CreateCalculatedAttributeDefinitionRequest.
        :rtype: CreateCalculatedAttributeDefinitionRequestAttributeDetails
        """
        return self._attribute_details

    @attribute_details.setter
    def attribute_details(self, attribute_details):
        """Sets the attribute_details of this CreateCalculatedAttributeDefinitionRequest.


        :param attribute_details: The attribute_details of this CreateCalculatedAttributeDefinitionRequest.
        :type attribute_details: CreateCalculatedAttributeDefinitionRequestAttributeDetails
        """
        if attribute_details is None:
            raise ValueError("Invalid value for `attribute_details`, must not be `None`")

        self._attribute_details = attribute_details

    @property
    def conditions(self):
        """Gets the conditions of this CreateCalculatedAttributeDefinitionRequest.


        :return: The conditions of this CreateCalculatedAttributeDefinitionRequest.
        :rtype: UpdateCalculatedAttributeDefinitionRequestConditions
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this CreateCalculatedAttributeDefinitionRequest.


        :param conditions: The conditions of this CreateCalculatedAttributeDefinitionRequest.
        :type conditions: UpdateCalculatedAttributeDefinitionRequestConditions
        """

        self._conditions = conditions

    @property
    def statistic(self):
        """Gets the statistic of this CreateCalculatedAttributeDefinitionRequest.

        The aggregation operation to perform for the calculated attribute.

        :return: The statistic of this CreateCalculatedAttributeDefinitionRequest.
        :rtype: str
        """
        return self._statistic

    @statistic.setter
    def statistic(self, statistic):
        """Sets the statistic of this CreateCalculatedAttributeDefinitionRequest.

        The aggregation operation to perform for the calculated attribute.

        :param statistic: The statistic of this CreateCalculatedAttributeDefinitionRequest.
        :type statistic: str
        """
        allowed_values = ["FIRST_OCCURRENCE", "LAST_OCCURRENCE", "COUNT", "SUM", "MINIMUM", "MAXIMUM", "AVERAGE", "MAX_OCCURRENCE"]  # noqa: E501
        if statistic not in allowed_values:
            raise ValueError(
                "Invalid value for `statistic` ({0}), must be one of {1}"
                .format(statistic, allowed_values)
            )

        self._statistic = statistic

    @property
    def tags(self):
        """Gets the tags of this CreateCalculatedAttributeDefinitionRequest.

        The tags used to organize, track, or control access for this resource.

        :return: The tags of this CreateCalculatedAttributeDefinitionRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateCalculatedAttributeDefinitionRequest.

        The tags used to organize, track, or control access for this resource.

        :param tags: The tags of this CreateCalculatedAttributeDefinitionRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
