# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_domain_response_matching import CreateDomainResponseMatching
from openapi_server.models.create_domain_response_rule_based_matching import CreateDomainResponseRuleBasedMatching
from openapi_server import util


class CreateDomainResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_name: str=None, default_expiration_days: int=None, default_encryption_key: str=None, dead_letter_queue_url: str=None, matching: CreateDomainResponseMatching=None, rule_based_matching: CreateDomainResponseRuleBasedMatching=None, created_at: datetime=None, last_updated_at: datetime=None, tags: Dict=None):
        """CreateDomainResponse - a model defined in OpenAPI

        :param domain_name: The domain_name of this CreateDomainResponse.
        :param default_expiration_days: The default_expiration_days of this CreateDomainResponse.
        :param default_encryption_key: The default_encryption_key of this CreateDomainResponse.
        :param dead_letter_queue_url: The dead_letter_queue_url of this CreateDomainResponse.
        :param matching: The matching of this CreateDomainResponse.
        :param rule_based_matching: The rule_based_matching of this CreateDomainResponse.
        :param created_at: The created_at of this CreateDomainResponse.
        :param last_updated_at: The last_updated_at of this CreateDomainResponse.
        :param tags: The tags of this CreateDomainResponse.
        """
        self.openapi_types = {
            'domain_name': str,
            'default_expiration_days': int,
            'default_encryption_key': str,
            'dead_letter_queue_url': str,
            'matching': CreateDomainResponseMatching,
            'rule_based_matching': CreateDomainResponseRuleBasedMatching,
            'created_at': datetime,
            'last_updated_at': datetime,
            'tags': Dict
        }

        self.attribute_map = {
            'domain_name': 'DomainName',
            'default_expiration_days': 'DefaultExpirationDays',
            'default_encryption_key': 'DefaultEncryptionKey',
            'dead_letter_queue_url': 'DeadLetterQueueUrl',
            'matching': 'Matching',
            'rule_based_matching': 'RuleBasedMatching',
            'created_at': 'CreatedAt',
            'last_updated_at': 'LastUpdatedAt',
            'tags': 'Tags'
        }

        self._domain_name = domain_name
        self._default_expiration_days = default_expiration_days
        self._default_encryption_key = default_encryption_key
        self._dead_letter_queue_url = dead_letter_queue_url
        self._matching = matching
        self._rule_based_matching = rule_based_matching
        self._created_at = created_at
        self._last_updated_at = last_updated_at
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDomainResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDomainResponse of this CreateDomainResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_name(self):
        """Gets the domain_name of this CreateDomainResponse.


        :return: The domain_name of this CreateDomainResponse.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this CreateDomainResponse.


        :param domain_name: The domain_name of this CreateDomainResponse.
        :type domain_name: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")

        self._domain_name = domain_name

    @property
    def default_expiration_days(self):
        """Gets the default_expiration_days of this CreateDomainResponse.


        :return: The default_expiration_days of this CreateDomainResponse.
        :rtype: int
        """
        return self._default_expiration_days

    @default_expiration_days.setter
    def default_expiration_days(self, default_expiration_days):
        """Sets the default_expiration_days of this CreateDomainResponse.


        :param default_expiration_days: The default_expiration_days of this CreateDomainResponse.
        :type default_expiration_days: int
        """
        if default_expiration_days is None:
            raise ValueError("Invalid value for `default_expiration_days`, must not be `None`")

        self._default_expiration_days = default_expiration_days

    @property
    def default_encryption_key(self):
        """Gets the default_encryption_key of this CreateDomainResponse.


        :return: The default_encryption_key of this CreateDomainResponse.
        :rtype: str
        """
        return self._default_encryption_key

    @default_encryption_key.setter
    def default_encryption_key(self, default_encryption_key):
        """Sets the default_encryption_key of this CreateDomainResponse.


        :param default_encryption_key: The default_encryption_key of this CreateDomainResponse.
        :type default_encryption_key: str
        """

        self._default_encryption_key = default_encryption_key

    @property
    def dead_letter_queue_url(self):
        """Gets the dead_letter_queue_url of this CreateDomainResponse.


        :return: The dead_letter_queue_url of this CreateDomainResponse.
        :rtype: str
        """
        return self._dead_letter_queue_url

    @dead_letter_queue_url.setter
    def dead_letter_queue_url(self, dead_letter_queue_url):
        """Sets the dead_letter_queue_url of this CreateDomainResponse.


        :param dead_letter_queue_url: The dead_letter_queue_url of this CreateDomainResponse.
        :type dead_letter_queue_url: str
        """

        self._dead_letter_queue_url = dead_letter_queue_url

    @property
    def matching(self):
        """Gets the matching of this CreateDomainResponse.


        :return: The matching of this CreateDomainResponse.
        :rtype: CreateDomainResponseMatching
        """
        return self._matching

    @matching.setter
    def matching(self, matching):
        """Sets the matching of this CreateDomainResponse.


        :param matching: The matching of this CreateDomainResponse.
        :type matching: CreateDomainResponseMatching
        """

        self._matching = matching

    @property
    def rule_based_matching(self):
        """Gets the rule_based_matching of this CreateDomainResponse.


        :return: The rule_based_matching of this CreateDomainResponse.
        :rtype: CreateDomainResponseRuleBasedMatching
        """
        return self._rule_based_matching

    @rule_based_matching.setter
    def rule_based_matching(self, rule_based_matching):
        """Sets the rule_based_matching of this CreateDomainResponse.


        :param rule_based_matching: The rule_based_matching of this CreateDomainResponse.
        :type rule_based_matching: CreateDomainResponseRuleBasedMatching
        """

        self._rule_based_matching = rule_based_matching

    @property
    def created_at(self):
        """Gets the created_at of this CreateDomainResponse.


        :return: The created_at of this CreateDomainResponse.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CreateDomainResponse.


        :param created_at: The created_at of this CreateDomainResponse.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def last_updated_at(self):
        """Gets the last_updated_at of this CreateDomainResponse.


        :return: The last_updated_at of this CreateDomainResponse.
        :rtype: datetime
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """Sets the last_updated_at of this CreateDomainResponse.


        :param last_updated_at: The last_updated_at of this CreateDomainResponse.
        :type last_updated_at: datetime
        """
        if last_updated_at is None:
            raise ValueError("Invalid value for `last_updated_at`, must not be `None`")

        self._last_updated_at = last_updated_at

    @property
    def tags(self):
        """Gets the tags of this CreateDomainResponse.


        :return: The tags of this CreateDomainResponse.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateDomainResponse.


        :param tags: The tags of this CreateDomainResponse.
        :type tags: Dict
        """

        self._tags = tags
