# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status import Status
from openapi_server.models.workflow_type import WorkflowType
from openapi_server import util


class ListWorkflowsItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, workflow_type: WorkflowType=None, workflow_id: str=None, status: Status=None, status_description: str=None, created_at: datetime=None, last_updated_at: datetime=None):
        """ListWorkflowsItem - a model defined in OpenAPI

        :param workflow_type: The workflow_type of this ListWorkflowsItem.
        :param workflow_id: The workflow_id of this ListWorkflowsItem.
        :param status: The status of this ListWorkflowsItem.
        :param status_description: The status_description of this ListWorkflowsItem.
        :param created_at: The created_at of this ListWorkflowsItem.
        :param last_updated_at: The last_updated_at of this ListWorkflowsItem.
        """
        self.openapi_types = {
            'workflow_type': WorkflowType,
            'workflow_id': str,
            'status': Status,
            'status_description': str,
            'created_at': datetime,
            'last_updated_at': datetime
        }

        self.attribute_map = {
            'workflow_type': 'WorkflowType',
            'workflow_id': 'WorkflowId',
            'status': 'Status',
            'status_description': 'StatusDescription',
            'created_at': 'CreatedAt',
            'last_updated_at': 'LastUpdatedAt'
        }

        self._workflow_type = workflow_type
        self._workflow_id = workflow_id
        self._status = status
        self._status_description = status_description
        self._created_at = created_at
        self._last_updated_at = last_updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListWorkflowsItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListWorkflowsItem of this ListWorkflowsItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def workflow_type(self):
        """Gets the workflow_type of this ListWorkflowsItem.


        :return: The workflow_type of this ListWorkflowsItem.
        :rtype: WorkflowType
        """
        return self._workflow_type

    @workflow_type.setter
    def workflow_type(self, workflow_type):
        """Sets the workflow_type of this ListWorkflowsItem.


        :param workflow_type: The workflow_type of this ListWorkflowsItem.
        :type workflow_type: WorkflowType
        """
        if workflow_type is None:
            raise ValueError("Invalid value for `workflow_type`, must not be `None`")

        self._workflow_type = workflow_type

    @property
    def workflow_id(self):
        """Gets the workflow_id of this ListWorkflowsItem.


        :return: The workflow_id of this ListWorkflowsItem.
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this ListWorkflowsItem.


        :param workflow_id: The workflow_id of this ListWorkflowsItem.
        :type workflow_id: str
        """
        if workflow_id is None:
            raise ValueError("Invalid value for `workflow_id`, must not be `None`")

        self._workflow_id = workflow_id

    @property
    def status(self):
        """Gets the status of this ListWorkflowsItem.


        :return: The status of this ListWorkflowsItem.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ListWorkflowsItem.


        :param status: The status of this ListWorkflowsItem.
        :type status: Status
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def status_description(self):
        """Gets the status_description of this ListWorkflowsItem.


        :return: The status_description of this ListWorkflowsItem.
        :rtype: str
        """
        return self._status_description

    @status_description.setter
    def status_description(self, status_description):
        """Sets the status_description of this ListWorkflowsItem.


        :param status_description: The status_description of this ListWorkflowsItem.
        :type status_description: str
        """
        if status_description is None:
            raise ValueError("Invalid value for `status_description`, must not be `None`")

        self._status_description = status_description

    @property
    def created_at(self):
        """Gets the created_at of this ListWorkflowsItem.


        :return: The created_at of this ListWorkflowsItem.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ListWorkflowsItem.


        :param created_at: The created_at of this ListWorkflowsItem.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def last_updated_at(self):
        """Gets the last_updated_at of this ListWorkflowsItem.


        :return: The last_updated_at of this ListWorkflowsItem.
        :rtype: datetime
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """Sets the last_updated_at of this ListWorkflowsItem.


        :param last_updated_at: The last_updated_at of this ListWorkflowsItem.
        :type last_updated_at: datetime
        """
        if last_updated_at is None:
            raise ValueError("Invalid value for `last_updated_at`, must not be `None`")

        self._last_updated_at = last_updated_at
