# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_schedule_day_of_the_week import JobScheduleDayOfTheWeek
from openapi_server import util


class UpdateDomainRequestMatchingJobSchedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, day_of_the_week: JobScheduleDayOfTheWeek=None, time: str=None):
        """UpdateDomainRequestMatchingJobSchedule - a model defined in OpenAPI

        :param day_of_the_week: The day_of_the_week of this UpdateDomainRequestMatchingJobSchedule.
        :param time: The time of this UpdateDomainRequestMatchingJobSchedule.
        """
        self.openapi_types = {
            'day_of_the_week': JobScheduleDayOfTheWeek,
            'time': str
        }

        self.attribute_map = {
            'day_of_the_week': 'DayOfTheWeek',
            'time': 'Time'
        }

        self._day_of_the_week = day_of_the_week
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDomainRequestMatchingJobSchedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateDomain_request_Matching_JobSchedule of this UpdateDomainRequestMatchingJobSchedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def day_of_the_week(self):
        """Gets the day_of_the_week of this UpdateDomainRequestMatchingJobSchedule.


        :return: The day_of_the_week of this UpdateDomainRequestMatchingJobSchedule.
        :rtype: JobScheduleDayOfTheWeek
        """
        return self._day_of_the_week

    @day_of_the_week.setter
    def day_of_the_week(self, day_of_the_week):
        """Sets the day_of_the_week of this UpdateDomainRequestMatchingJobSchedule.


        :param day_of_the_week: The day_of_the_week of this UpdateDomainRequestMatchingJobSchedule.
        :type day_of_the_week: JobScheduleDayOfTheWeek
        """
        if day_of_the_week is None:
            raise ValueError("Invalid value for `day_of_the_week`, must not be `None`")

        self._day_of_the_week = day_of_the_week

    @property
    def time(self):
        """Gets the time of this UpdateDomainRequestMatchingJobSchedule.


        :return: The time of this UpdateDomainRequestMatchingJobSchedule.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this UpdateDomainRequestMatchingJobSchedule.


        :param time: The time of this UpdateDomainRequestMatchingJobSchedule.
        :type time: str
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")

        self._time = time
