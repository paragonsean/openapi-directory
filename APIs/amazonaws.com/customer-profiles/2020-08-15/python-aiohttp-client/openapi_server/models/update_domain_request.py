# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_domain_request_matching import UpdateDomainRequestMatching
from openapi_server.models.update_domain_request_rule_based_matching import UpdateDomainRequestRuleBasedMatching
from openapi_server import util


class UpdateDomainRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_expiration_days: int=None, default_encryption_key: str=None, dead_letter_queue_url: str=None, matching: UpdateDomainRequestMatching=None, rule_based_matching: UpdateDomainRequestRuleBasedMatching=None, tags: Dict[str, str]=None):
        """UpdateDomainRequest - a model defined in OpenAPI

        :param default_expiration_days: The default_expiration_days of this UpdateDomainRequest.
        :param default_encryption_key: The default_encryption_key of this UpdateDomainRequest.
        :param dead_letter_queue_url: The dead_letter_queue_url of this UpdateDomainRequest.
        :param matching: The matching of this UpdateDomainRequest.
        :param rule_based_matching: The rule_based_matching of this UpdateDomainRequest.
        :param tags: The tags of this UpdateDomainRequest.
        """
        self.openapi_types = {
            'default_expiration_days': int,
            'default_encryption_key': str,
            'dead_letter_queue_url': str,
            'matching': UpdateDomainRequestMatching,
            'rule_based_matching': UpdateDomainRequestRuleBasedMatching,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'default_expiration_days': 'DefaultExpirationDays',
            'default_encryption_key': 'DefaultEncryptionKey',
            'dead_letter_queue_url': 'DeadLetterQueueUrl',
            'matching': 'Matching',
            'rule_based_matching': 'RuleBasedMatching',
            'tags': 'Tags'
        }

        self._default_expiration_days = default_expiration_days
        self._default_encryption_key = default_encryption_key
        self._dead_letter_queue_url = dead_letter_queue_url
        self._matching = matching
        self._rule_based_matching = rule_based_matching
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDomainRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateDomain_request of this UpdateDomainRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_expiration_days(self):
        """Gets the default_expiration_days of this UpdateDomainRequest.

        The default number of days until the data within the domain expires.

        :return: The default_expiration_days of this UpdateDomainRequest.
        :rtype: int
        """
        return self._default_expiration_days

    @default_expiration_days.setter
    def default_expiration_days(self, default_expiration_days):
        """Sets the default_expiration_days of this UpdateDomainRequest.

        The default number of days until the data within the domain expires.

        :param default_expiration_days: The default_expiration_days of this UpdateDomainRequest.
        :type default_expiration_days: int
        """
        if default_expiration_days is not None and default_expiration_days > 1098:
            raise ValueError("Invalid value for `default_expiration_days`, must be a value less than or equal to `1098`")
        if default_expiration_days is not None and default_expiration_days < 1:
            raise ValueError("Invalid value for `default_expiration_days`, must be a value greater than or equal to `1`")

        self._default_expiration_days = default_expiration_days

    @property
    def default_encryption_key(self):
        """Gets the default_encryption_key of this UpdateDomainRequest.

        The default encryption key, which is an AWS managed key, is used when no specific type of encryption key is specified. It is used to encrypt all data before it is placed in permanent or semi-permanent storage. If specified as an empty string, it will clear any existing value.

        :return: The default_encryption_key of this UpdateDomainRequest.
        :rtype: str
        """
        return self._default_encryption_key

    @default_encryption_key.setter
    def default_encryption_key(self, default_encryption_key):
        """Sets the default_encryption_key of this UpdateDomainRequest.

        The default encryption key, which is an AWS managed key, is used when no specific type of encryption key is specified. It is used to encrypt all data before it is placed in permanent or semi-permanent storage. If specified as an empty string, it will clear any existing value.

        :param default_encryption_key: The default_encryption_key of this UpdateDomainRequest.
        :type default_encryption_key: str
        """
        if default_encryption_key is not None and len(default_encryption_key) > 255:
            raise ValueError("Invalid value for `default_encryption_key`, length must be less than or equal to `255`")
        if default_encryption_key is not None and len(default_encryption_key) < 0:
            raise ValueError("Invalid value for `default_encryption_key`, length must be greater than or equal to `0`")

        self._default_encryption_key = default_encryption_key

    @property
    def dead_letter_queue_url(self):
        """Gets the dead_letter_queue_url of this UpdateDomainRequest.

        The URL of the SQS dead letter queue, which is used for reporting errors associated with ingesting data from third party applications. If specified as an empty string, it will clear any existing value. You must set up a policy on the DeadLetterQueue for the SendMessage operation to enable Amazon Connect Customer Profiles to send messages to the DeadLetterQueue.

        :return: The dead_letter_queue_url of this UpdateDomainRequest.
        :rtype: str
        """
        return self._dead_letter_queue_url

    @dead_letter_queue_url.setter
    def dead_letter_queue_url(self, dead_letter_queue_url):
        """Sets the dead_letter_queue_url of this UpdateDomainRequest.

        The URL of the SQS dead letter queue, which is used for reporting errors associated with ingesting data from third party applications. If specified as an empty string, it will clear any existing value. You must set up a policy on the DeadLetterQueue for the SendMessage operation to enable Amazon Connect Customer Profiles to send messages to the DeadLetterQueue.

        :param dead_letter_queue_url: The dead_letter_queue_url of this UpdateDomainRequest.
        :type dead_letter_queue_url: str
        """
        if dead_letter_queue_url is not None and len(dead_letter_queue_url) > 255:
            raise ValueError("Invalid value for `dead_letter_queue_url`, length must be less than or equal to `255`")
        if dead_letter_queue_url is not None and len(dead_letter_queue_url) < 0:
            raise ValueError("Invalid value for `dead_letter_queue_url`, length must be greater than or equal to `0`")

        self._dead_letter_queue_url = dead_letter_queue_url

    @property
    def matching(self):
        """Gets the matching of this UpdateDomainRequest.


        :return: The matching of this UpdateDomainRequest.
        :rtype: UpdateDomainRequestMatching
        """
        return self._matching

    @matching.setter
    def matching(self, matching):
        """Sets the matching of this UpdateDomainRequest.


        :param matching: The matching of this UpdateDomainRequest.
        :type matching: UpdateDomainRequestMatching
        """

        self._matching = matching

    @property
    def rule_based_matching(self):
        """Gets the rule_based_matching of this UpdateDomainRequest.


        :return: The rule_based_matching of this UpdateDomainRequest.
        :rtype: UpdateDomainRequestRuleBasedMatching
        """
        return self._rule_based_matching

    @rule_based_matching.setter
    def rule_based_matching(self, rule_based_matching):
        """Sets the rule_based_matching of this UpdateDomainRequest.


        :param rule_based_matching: The rule_based_matching of this UpdateDomainRequest.
        :type rule_based_matching: UpdateDomainRequestRuleBasedMatching
        """

        self._rule_based_matching = rule_based_matching

    @property
    def tags(self):
        """Gets the tags of this UpdateDomainRequest.

        The tags used to organize, track, or control access for this resource.

        :return: The tags of this UpdateDomainRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this UpdateDomainRequest.

        The tags used to organize, track, or control access for this resource.

        :param tags: The tags of this UpdateDomainRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
