# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateCalculatedAttributeDefinitionResponseAttributeDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: List=None, expression: str=None):
        """CreateCalculatedAttributeDefinitionResponseAttributeDetails - a model defined in OpenAPI

        :param attributes: The attributes of this CreateCalculatedAttributeDefinitionResponseAttributeDetails.
        :param expression: The expression of this CreateCalculatedAttributeDefinitionResponseAttributeDetails.
        """
        self.openapi_types = {
            'attributes': List,
            'expression': str
        }

        self.attribute_map = {
            'attributes': 'Attributes',
            'expression': 'Expression'
        }

        self._attributes = attributes
        self._expression = expression

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCalculatedAttributeDefinitionResponseAttributeDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCalculatedAttributeDefinitionResponse_AttributeDetails of this CreateCalculatedAttributeDefinitionResponseAttributeDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this CreateCalculatedAttributeDefinitionResponseAttributeDetails.


        :return: The attributes of this CreateCalculatedAttributeDefinitionResponseAttributeDetails.
        :rtype: List
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this CreateCalculatedAttributeDefinitionResponseAttributeDetails.


        :param attributes: The attributes of this CreateCalculatedAttributeDefinitionResponseAttributeDetails.
        :type attributes: List
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")

        self._attributes = attributes

    @property
    def expression(self):
        """Gets the expression of this CreateCalculatedAttributeDefinitionResponseAttributeDetails.


        :return: The expression of this CreateCalculatedAttributeDefinitionResponseAttributeDetails.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this CreateCalculatedAttributeDefinitionResponseAttributeDetails.


        :param expression: The expression of this CreateCalculatedAttributeDefinitionResponseAttributeDetails.
        :type expression: str
        """
        if expression is None:
            raise ValueError("Invalid value for `expression`, must not be `None`")

        self._expression = expression
