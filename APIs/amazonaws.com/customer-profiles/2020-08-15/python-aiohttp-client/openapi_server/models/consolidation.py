# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Consolidation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, matching_attributes_list: List=None):
        """Consolidation - a model defined in OpenAPI

        :param matching_attributes_list: The matching_attributes_list of this Consolidation.
        """
        self.openapi_types = {
            'matching_attributes_list': List
        }

        self.attribute_map = {
            'matching_attributes_list': 'MatchingAttributesList'
        }

        self._matching_attributes_list = matching_attributes_list

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Consolidation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Consolidation of this Consolidation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def matching_attributes_list(self):
        """Gets the matching_attributes_list of this Consolidation.


        :return: The matching_attributes_list of this Consolidation.
        :rtype: List
        """
        return self._matching_attributes_list

    @matching_attributes_list.setter
    def matching_attributes_list(self, matching_attributes_list):
        """Sets the matching_attributes_list of this Consolidation.


        :param matching_attributes_list: The matching_attributes_list of this Consolidation.
        :type matching_attributes_list: List
        """
        if matching_attributes_list is None:
            raise ValueError("Invalid value for `matching_attributes_list`, must not be `None`")

        self._matching_attributes_list = matching_attributes_list
