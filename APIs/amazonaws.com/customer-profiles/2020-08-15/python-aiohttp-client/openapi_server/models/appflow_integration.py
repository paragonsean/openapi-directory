# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.flow_definition import FlowDefinition
from openapi_server import util


class AppflowIntegration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flow_definition: FlowDefinition=None, batches: List=None):
        """AppflowIntegration - a model defined in OpenAPI

        :param flow_definition: The flow_definition of this AppflowIntegration.
        :param batches: The batches of this AppflowIntegration.
        """
        self.openapi_types = {
            'flow_definition': FlowDefinition,
            'batches': List
        }

        self.attribute_map = {
            'flow_definition': 'FlowDefinition',
            'batches': 'Batches'
        }

        self._flow_definition = flow_definition
        self._batches = batches

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppflowIntegration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppflowIntegration of this AppflowIntegration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flow_definition(self):
        """Gets the flow_definition of this AppflowIntegration.


        :return: The flow_definition of this AppflowIntegration.
        :rtype: FlowDefinition
        """
        return self._flow_definition

    @flow_definition.setter
    def flow_definition(self, flow_definition):
        """Sets the flow_definition of this AppflowIntegration.


        :param flow_definition: The flow_definition of this AppflowIntegration.
        :type flow_definition: FlowDefinition
        """
        if flow_definition is None:
            raise ValueError("Invalid value for `flow_definition`, must not be `None`")

        self._flow_definition = flow_definition

    @property
    def batches(self):
        """Gets the batches of this AppflowIntegration.


        :return: The batches of this AppflowIntegration.
        :rtype: List
        """
        return self._batches

    @batches.setter
    def batches(self, batches):
        """Sets the batches of this AppflowIntegration.


        :param batches: The batches of this AppflowIntegration.
        :type batches: List
        """

        self._batches = batches
