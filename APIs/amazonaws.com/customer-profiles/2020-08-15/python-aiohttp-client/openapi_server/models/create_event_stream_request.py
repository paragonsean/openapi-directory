# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateEventStreamRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, uri: str=None, tags: Dict[str, str]=None):
        """CreateEventStreamRequest - a model defined in OpenAPI

        :param uri: The uri of this CreateEventStreamRequest.
        :param tags: The tags of this CreateEventStreamRequest.
        """
        self.openapi_types = {
            'uri': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'uri': 'Uri',
            'tags': 'Tags'
        }

        self._uri = uri
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateEventStreamRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateEventStream_request of this CreateEventStreamRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uri(self):
        """Gets the uri of this CreateEventStreamRequest.

        The StreamARN of the destination to deliver profile events to. For example, arn:aws:kinesis:region:account-id:stream/stream-name

        :return: The uri of this CreateEventStreamRequest.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this CreateEventStreamRequest.

        The StreamARN of the destination to deliver profile events to. For example, arn:aws:kinesis:region:account-id:stream/stream-name

        :param uri: The uri of this CreateEventStreamRequest.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")
        if uri is not None and len(uri) > 255:
            raise ValueError("Invalid value for `uri`, length must be less than or equal to `255`")
        if uri is not None and len(uri) < 1:
            raise ValueError("Invalid value for `uri`, length must be greater than or equal to `1`")

        self._uri = uri

    @property
    def tags(self):
        """Gets the tags of this CreateEventStreamRequest.

        The tags used to organize, track, or control access for this resource.

        :return: The tags of this CreateEventStreamRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateEventStreamRequest.

        The tags used to organize, track, or control access for this resource.

        :param tags: The tags of this CreateEventStreamRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
