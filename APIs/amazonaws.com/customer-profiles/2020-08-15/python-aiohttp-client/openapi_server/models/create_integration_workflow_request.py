# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_integration_workflow_request_integration_config import CreateIntegrationWorkflowRequestIntegrationConfig
import re
from openapi_server import util


class CreateIntegrationWorkflowRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, workflow_type: str=None, integration_config: CreateIntegrationWorkflowRequestIntegrationConfig=None, object_type_name: str=None, role_arn: str=None, tags: Dict[str, str]=None):
        """CreateIntegrationWorkflowRequest - a model defined in OpenAPI

        :param workflow_type: The workflow_type of this CreateIntegrationWorkflowRequest.
        :param integration_config: The integration_config of this CreateIntegrationWorkflowRequest.
        :param object_type_name: The object_type_name of this CreateIntegrationWorkflowRequest.
        :param role_arn: The role_arn of this CreateIntegrationWorkflowRequest.
        :param tags: The tags of this CreateIntegrationWorkflowRequest.
        """
        self.openapi_types = {
            'workflow_type': str,
            'integration_config': CreateIntegrationWorkflowRequestIntegrationConfig,
            'object_type_name': str,
            'role_arn': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'workflow_type': 'WorkflowType',
            'integration_config': 'IntegrationConfig',
            'object_type_name': 'ObjectTypeName',
            'role_arn': 'RoleArn',
            'tags': 'Tags'
        }

        self._workflow_type = workflow_type
        self._integration_config = integration_config
        self._object_type_name = object_type_name
        self._role_arn = role_arn
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateIntegrationWorkflowRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateIntegrationWorkflow_request of this CreateIntegrationWorkflowRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def workflow_type(self):
        """Gets the workflow_type of this CreateIntegrationWorkflowRequest.

        The type of workflow. The only supported value is APPFLOW_INTEGRATION.

        :return: The workflow_type of this CreateIntegrationWorkflowRequest.
        :rtype: str
        """
        return self._workflow_type

    @workflow_type.setter
    def workflow_type(self, workflow_type):
        """Sets the workflow_type of this CreateIntegrationWorkflowRequest.

        The type of workflow. The only supported value is APPFLOW_INTEGRATION.

        :param workflow_type: The workflow_type of this CreateIntegrationWorkflowRequest.
        :type workflow_type: str
        """
        allowed_values = ["APPFLOW_INTEGRATION"]  # noqa: E501
        if workflow_type not in allowed_values:
            raise ValueError(
                "Invalid value for `workflow_type` ({0}), must be one of {1}"
                .format(workflow_type, allowed_values)
            )

        self._workflow_type = workflow_type

    @property
    def integration_config(self):
        """Gets the integration_config of this CreateIntegrationWorkflowRequest.


        :return: The integration_config of this CreateIntegrationWorkflowRequest.
        :rtype: CreateIntegrationWorkflowRequestIntegrationConfig
        """
        return self._integration_config

    @integration_config.setter
    def integration_config(self, integration_config):
        """Sets the integration_config of this CreateIntegrationWorkflowRequest.


        :param integration_config: The integration_config of this CreateIntegrationWorkflowRequest.
        :type integration_config: CreateIntegrationWorkflowRequestIntegrationConfig
        """
        if integration_config is None:
            raise ValueError("Invalid value for `integration_config`, must not be `None`")

        self._integration_config = integration_config

    @property
    def object_type_name(self):
        """Gets the object_type_name of this CreateIntegrationWorkflowRequest.

        The name of the profile object type.

        :return: The object_type_name of this CreateIntegrationWorkflowRequest.
        :rtype: str
        """
        return self._object_type_name

    @object_type_name.setter
    def object_type_name(self, object_type_name):
        """Sets the object_type_name of this CreateIntegrationWorkflowRequest.

        The name of the profile object type.

        :param object_type_name: The object_type_name of this CreateIntegrationWorkflowRequest.
        :type object_type_name: str
        """
        if object_type_name is None:
            raise ValueError("Invalid value for `object_type_name`, must not be `None`")
        if object_type_name is not None and len(object_type_name) > 255:
            raise ValueError("Invalid value for `object_type_name`, length must be less than or equal to `255`")
        if object_type_name is not None and len(object_type_name) < 1:
            raise ValueError("Invalid value for `object_type_name`, length must be greater than or equal to `1`")
        if object_type_name is not None and not re.search(r'^[a-zA-Z_][a-zA-Z_0-9-]*$', object_type_name):
            raise ValueError("Invalid value for `object_type_name`, must be a follow pattern or equal to `/^[a-zA-Z_][a-zA-Z_0-9-]*$/`")

        self._object_type_name = object_type_name

    @property
    def role_arn(self):
        """Gets the role_arn of this CreateIntegrationWorkflowRequest.

        The Amazon Resource Name (ARN) of the IAM role. Customer Profiles assumes this role to create resources on your behalf as part of workflow execution.

        :return: The role_arn of this CreateIntegrationWorkflowRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CreateIntegrationWorkflowRequest.

        The Amazon Resource Name (ARN) of the IAM role. Customer Profiles assumes this role to create resources on your behalf as part of workflow execution.

        :param role_arn: The role_arn of this CreateIntegrationWorkflowRequest.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")
        if role_arn is not None and len(role_arn) > 512:
            raise ValueError("Invalid value for `role_arn`, length must be less than or equal to `512`")
        if role_arn is not None and not re.search(r'arn:aws:iam:.*:[0-9]+:.*', role_arn):
            raise ValueError("Invalid value for `role_arn`, must be a follow pattern or equal to `/arn:aws:iam:.*:[0-9]+:.*/`")

        self._role_arn = role_arn

    @property
    def tags(self):
        """Gets the tags of this CreateIntegrationWorkflowRequest.

        The tags used to organize, track, or control access for this resource.

        :return: The tags of this CreateIntegrationWorkflowRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateIntegrationWorkflowRequest.

        The tags used to organize, track, or control access for this resource.

        :param tags: The tags of this CreateIntegrationWorkflowRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
