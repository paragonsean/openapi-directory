# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conflict_resolving_model import ConflictResolvingModel
from openapi_server import util


class ConflictResolution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conflict_resolving_model: ConflictResolvingModel=None, source_name: str=None):
        """ConflictResolution - a model defined in OpenAPI

        :param conflict_resolving_model: The conflict_resolving_model of this ConflictResolution.
        :param source_name: The source_name of this ConflictResolution.
        """
        self.openapi_types = {
            'conflict_resolving_model': ConflictResolvingModel,
            'source_name': str
        }

        self.attribute_map = {
            'conflict_resolving_model': 'ConflictResolvingModel',
            'source_name': 'SourceName'
        }

        self._conflict_resolving_model = conflict_resolving_model
        self._source_name = source_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConflictResolution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConflictResolution of this ConflictResolution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conflict_resolving_model(self):
        """Gets the conflict_resolving_model of this ConflictResolution.


        :return: The conflict_resolving_model of this ConflictResolution.
        :rtype: ConflictResolvingModel
        """
        return self._conflict_resolving_model

    @conflict_resolving_model.setter
    def conflict_resolving_model(self, conflict_resolving_model):
        """Sets the conflict_resolving_model of this ConflictResolution.


        :param conflict_resolving_model: The conflict_resolving_model of this ConflictResolution.
        :type conflict_resolving_model: ConflictResolvingModel
        """
        if conflict_resolving_model is None:
            raise ValueError("Invalid value for `conflict_resolving_model`, must not be `None`")

        self._conflict_resolving_model = conflict_resolving_model

    @property
    def source_name(self):
        """Gets the source_name of this ConflictResolution.


        :return: The source_name of this ConflictResolution.
        :rtype: str
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """Sets the source_name of this ConflictResolution.


        :param source_name: The source_name of this ConflictResolution.
        :type source_name: str
        """

        self._source_name = source_name
