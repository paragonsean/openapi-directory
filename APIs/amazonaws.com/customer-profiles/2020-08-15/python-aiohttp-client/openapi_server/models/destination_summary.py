# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_stream_destination_status import EventStreamDestinationStatus
from openapi_server import util


class DestinationSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, uri: str=None, status: EventStreamDestinationStatus=None, unhealthy_since: datetime=None):
        """DestinationSummary - a model defined in OpenAPI

        :param uri: The uri of this DestinationSummary.
        :param status: The status of this DestinationSummary.
        :param unhealthy_since: The unhealthy_since of this DestinationSummary.
        """
        self.openapi_types = {
            'uri': str,
            'status': EventStreamDestinationStatus,
            'unhealthy_since': datetime
        }

        self.attribute_map = {
            'uri': 'Uri',
            'status': 'Status',
            'unhealthy_since': 'UnhealthySince'
        }

        self._uri = uri
        self._status = status
        self._unhealthy_since = unhealthy_since

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinationSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DestinationSummary of this DestinationSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uri(self):
        """Gets the uri of this DestinationSummary.


        :return: The uri of this DestinationSummary.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this DestinationSummary.


        :param uri: The uri of this DestinationSummary.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri

    @property
    def status(self):
        """Gets the status of this DestinationSummary.


        :return: The status of this DestinationSummary.
        :rtype: EventStreamDestinationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DestinationSummary.


        :param status: The status of this DestinationSummary.
        :type status: EventStreamDestinationStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def unhealthy_since(self):
        """Gets the unhealthy_since of this DestinationSummary.


        :return: The unhealthy_since of this DestinationSummary.
        :rtype: datetime
        """
        return self._unhealthy_since

    @unhealthy_since.setter
    def unhealthy_since(self, unhealthy_since):
        """Sets the unhealthy_since of this DestinationSummary.


        :param unhealthy_since: The unhealthy_since of this DestinationSummary.
        :type unhealthy_since: datetime
        """

        self._unhealthy_since = unhealthy_since
