# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.additional_search_key import AdditionalSearchKey
import re
from openapi_server import util


class SearchProfilesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_name: str=None, values: List[str]=None, additional_search_keys: List[AdditionalSearchKey]=None, logical_operator: str=None):
        """SearchProfilesRequest - a model defined in OpenAPI

        :param key_name: The key_name of this SearchProfilesRequest.
        :param values: The values of this SearchProfilesRequest.
        :param additional_search_keys: The additional_search_keys of this SearchProfilesRequest.
        :param logical_operator: The logical_operator of this SearchProfilesRequest.
        """
        self.openapi_types = {
            'key_name': str,
            'values': List[str],
            'additional_search_keys': List[AdditionalSearchKey],
            'logical_operator': str
        }

        self.attribute_map = {
            'key_name': 'KeyName',
            'values': 'Values',
            'additional_search_keys': 'AdditionalSearchKeys',
            'logical_operator': 'LogicalOperator'
        }

        self._key_name = key_name
        self._values = values
        self._additional_search_keys = additional_search_keys
        self._logical_operator = logical_operator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchProfilesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchProfiles_request of this SearchProfilesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_name(self):
        """Gets the key_name of this SearchProfilesRequest.

        A searchable identifier of a customer profile. The predefined keys you can use to search include: _account, _profileId, _assetId, _caseId, _orderId, _fullName, _phone, _email, _ctrContactId, _marketoLeadId, _salesforceAccountId, _salesforceContactId, _salesforceAssetId, _zendeskUserId, _zendeskExternalId, _zendeskTicketId, _serviceNowSystemId, _serviceNowIncidentId, _segmentUserId, _shopifyCustomerId, _shopifyOrderId.

        :return: The key_name of this SearchProfilesRequest.
        :rtype: str
        """
        return self._key_name

    @key_name.setter
    def key_name(self, key_name):
        """Sets the key_name of this SearchProfilesRequest.

        A searchable identifier of a customer profile. The predefined keys you can use to search include: _account, _profileId, _assetId, _caseId, _orderId, _fullName, _phone, _email, _ctrContactId, _marketoLeadId, _salesforceAccountId, _salesforceContactId, _salesforceAssetId, _zendeskUserId, _zendeskExternalId, _zendeskTicketId, _serviceNowSystemId, _serviceNowIncidentId, _segmentUserId, _shopifyCustomerId, _shopifyOrderId.

        :param key_name: The key_name of this SearchProfilesRequest.
        :type key_name: str
        """
        if key_name is None:
            raise ValueError("Invalid value for `key_name`, must not be `None`")
        if key_name is not None and len(key_name) > 64:
            raise ValueError("Invalid value for `key_name`, length must be less than or equal to `64`")
        if key_name is not None and len(key_name) < 1:
            raise ValueError("Invalid value for `key_name`, length must be greater than or equal to `1`")
        if key_name is not None and not re.search(r'^[a-zA-Z0-9_-]+$', key_name):
            raise ValueError("Invalid value for `key_name`, must be a follow pattern or equal to `/^[a-zA-Z0-9_-]+$/`")

        self._key_name = key_name

    @property
    def values(self):
        """Gets the values of this SearchProfilesRequest.

        A list of key values.

        :return: The values of this SearchProfilesRequest.
        :rtype: List[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this SearchProfilesRequest.

        A list of key values.

        :param values: The values of this SearchProfilesRequest.
        :type values: List[str]
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")

        self._values = values

    @property
    def additional_search_keys(self):
        """Gets the additional_search_keys of this SearchProfilesRequest.

        A list of <code>AdditionalSearchKey</code> objects that are each searchable identifiers of a profile. Each <code>AdditionalSearchKey</code> object contains a <code>KeyName</code> and a list of <code>Values</code> associated with that specific key (i.e., a key-value(s) pair). These additional search keys will be used in conjunction with the <code>LogicalOperator</code> and the required <code>KeyName</code> and <code>Values</code> parameters to search for profiles that satisfy the search criteria. 

        :return: The additional_search_keys of this SearchProfilesRequest.
        :rtype: List[AdditionalSearchKey]
        """
        return self._additional_search_keys

    @additional_search_keys.setter
    def additional_search_keys(self, additional_search_keys):
        """Sets the additional_search_keys of this SearchProfilesRequest.

        A list of <code>AdditionalSearchKey</code> objects that are each searchable identifiers of a profile. Each <code>AdditionalSearchKey</code> object contains a <code>KeyName</code> and a list of <code>Values</code> associated with that specific key (i.e., a key-value(s) pair). These additional search keys will be used in conjunction with the <code>LogicalOperator</code> and the required <code>KeyName</code> and <code>Values</code> parameters to search for profiles that satisfy the search criteria. 

        :param additional_search_keys: The additional_search_keys of this SearchProfilesRequest.
        :type additional_search_keys: List[AdditionalSearchKey]
        """
        if additional_search_keys is not None and len(additional_search_keys) > 4:
            raise ValueError("Invalid value for `additional_search_keys`, number of items must be less than or equal to `4`")
        if additional_search_keys is not None and len(additional_search_keys) < 1:
            raise ValueError("Invalid value for `additional_search_keys`, number of items must be greater than or equal to `1`")

        self._additional_search_keys = additional_search_keys

    @property
    def logical_operator(self):
        """Gets the logical_operator of this SearchProfilesRequest.

        <p>Relationship between all specified search keys that will be used to search for profiles. This includes the required <code>KeyName</code> and <code>Values</code> parameters as well as any key-value(s) pairs specified in the <code>AdditionalSearchKeys</code> list.</p> <p>This parameter influences which profiles will be returned in the response in the following manner:</p> <ul> <li> <p> <code>AND</code> - The response only includes profiles that match all of the search keys.</p> </li> <li> <p> <code>OR</code> - The response includes profiles that match at least one of the search keys.</p> </li> </ul> <p>The <code>OR</code> relationship is the default behavior if this parameter is not included in the request.</p>

        :return: The logical_operator of this SearchProfilesRequest.
        :rtype: str
        """
        return self._logical_operator

    @logical_operator.setter
    def logical_operator(self, logical_operator):
        """Sets the logical_operator of this SearchProfilesRequest.

        <p>Relationship between all specified search keys that will be used to search for profiles. This includes the required <code>KeyName</code> and <code>Values</code> parameters as well as any key-value(s) pairs specified in the <code>AdditionalSearchKeys</code> list.</p> <p>This parameter influences which profiles will be returned in the response in the following manner:</p> <ul> <li> <p> <code>AND</code> - The response only includes profiles that match all of the search keys.</p> </li> <li> <p> <code>OR</code> - The response includes profiles that match at least one of the search keys.</p> </li> </ul> <p>The <code>OR</code> relationship is the default behavior if this parameter is not included in the request.</p>

        :param logical_operator: The logical_operator of this SearchProfilesRequest.
        :type logical_operator: str
        """
        allowed_values = ["AND", "OR"]  # noqa: E501
        if logical_operator not in allowed_values:
            raise ValueError(
                "Invalid value for `logical_operator` ({0}), must be one of {1}"
                .format(logical_operator, allowed_values)
            )

        self._logical_operator = logical_operator
