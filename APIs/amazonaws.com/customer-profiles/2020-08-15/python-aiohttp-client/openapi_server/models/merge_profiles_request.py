# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.merge_profiles_request_field_source_profile_ids import MergeProfilesRequestFieldSourceProfileIds
import re
from openapi_server import util


class MergeProfilesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, main_profile_id: str=None, profile_ids_to_be_merged: List[str]=None, field_source_profile_ids: MergeProfilesRequestFieldSourceProfileIds=None):
        """MergeProfilesRequest - a model defined in OpenAPI

        :param main_profile_id: The main_profile_id of this MergeProfilesRequest.
        :param profile_ids_to_be_merged: The profile_ids_to_be_merged of this MergeProfilesRequest.
        :param field_source_profile_ids: The field_source_profile_ids of this MergeProfilesRequest.
        """
        self.openapi_types = {
            'main_profile_id': str,
            'profile_ids_to_be_merged': List[str],
            'field_source_profile_ids': MergeProfilesRequestFieldSourceProfileIds
        }

        self.attribute_map = {
            'main_profile_id': 'MainProfileId',
            'profile_ids_to_be_merged': 'ProfileIdsToBeMerged',
            'field_source_profile_ids': 'FieldSourceProfileIds'
        }

        self._main_profile_id = main_profile_id
        self._profile_ids_to_be_merged = profile_ids_to_be_merged
        self._field_source_profile_ids = field_source_profile_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MergeProfilesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MergeProfiles_request of this MergeProfilesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def main_profile_id(self):
        """Gets the main_profile_id of this MergeProfilesRequest.

        The identifier of the profile to be taken.

        :return: The main_profile_id of this MergeProfilesRequest.
        :rtype: str
        """
        return self._main_profile_id

    @main_profile_id.setter
    def main_profile_id(self, main_profile_id):
        """Sets the main_profile_id of this MergeProfilesRequest.

        The identifier of the profile to be taken.

        :param main_profile_id: The main_profile_id of this MergeProfilesRequest.
        :type main_profile_id: str
        """
        if main_profile_id is None:
            raise ValueError("Invalid value for `main_profile_id`, must not be `None`")
        if main_profile_id is not None and not re.search(r'[a-f0-9]{32}', main_profile_id):
            raise ValueError("Invalid value for `main_profile_id`, must be a follow pattern or equal to `/[a-f0-9]{32}/`")

        self._main_profile_id = main_profile_id

    @property
    def profile_ids_to_be_merged(self):
        """Gets the profile_ids_to_be_merged of this MergeProfilesRequest.

        The identifier of the profile to be merged into MainProfileId.

        :return: The profile_ids_to_be_merged of this MergeProfilesRequest.
        :rtype: List[str]
        """
        return self._profile_ids_to_be_merged

    @profile_ids_to_be_merged.setter
    def profile_ids_to_be_merged(self, profile_ids_to_be_merged):
        """Sets the profile_ids_to_be_merged of this MergeProfilesRequest.

        The identifier of the profile to be merged into MainProfileId.

        :param profile_ids_to_be_merged: The profile_ids_to_be_merged of this MergeProfilesRequest.
        :type profile_ids_to_be_merged: List[str]
        """
        if profile_ids_to_be_merged is None:
            raise ValueError("Invalid value for `profile_ids_to_be_merged`, must not be `None`")
        if profile_ids_to_be_merged is not None and len(profile_ids_to_be_merged) > 20:
            raise ValueError("Invalid value for `profile_ids_to_be_merged`, number of items must be less than or equal to `20`")
        if profile_ids_to_be_merged is not None and len(profile_ids_to_be_merged) < 1:
            raise ValueError("Invalid value for `profile_ids_to_be_merged`, number of items must be greater than or equal to `1`")

        self._profile_ids_to_be_merged = profile_ids_to_be_merged

    @property
    def field_source_profile_ids(self):
        """Gets the field_source_profile_ids of this MergeProfilesRequest.


        :return: The field_source_profile_ids of this MergeProfilesRequest.
        :rtype: MergeProfilesRequestFieldSourceProfileIds
        """
        return self._field_source_profile_ids

    @field_source_profile_ids.setter
    def field_source_profile_ids(self, field_source_profile_ids):
        """Sets the field_source_profile_ids of this MergeProfilesRequest.


        :param field_source_profile_ids: The field_source_profile_ids of this MergeProfilesRequest.
        :type field_source_profile_ids: MergeProfilesRequestFieldSourceProfileIds
        """

        self._field_source_profile_ids = field_source_profile_ids
