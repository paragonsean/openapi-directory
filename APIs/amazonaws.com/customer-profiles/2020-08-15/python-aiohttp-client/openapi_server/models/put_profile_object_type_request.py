# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.object_type_field import ObjectTypeField
from openapi_server.models.object_type_key import ObjectTypeKey
import re
from openapi_server import util


class PutProfileObjectTypeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, template_id: str=None, expiration_days: int=None, encryption_key: str=None, allow_profile_creation: bool=None, source_last_updated_timestamp_format: str=None, fields: Dict[str, ObjectTypeField]=None, keys: Dict[str, List[ObjectTypeKey]]=None, tags: Dict[str, str]=None):
        """PutProfileObjectTypeRequest - a model defined in OpenAPI

        :param description: The description of this PutProfileObjectTypeRequest.
        :param template_id: The template_id of this PutProfileObjectTypeRequest.
        :param expiration_days: The expiration_days of this PutProfileObjectTypeRequest.
        :param encryption_key: The encryption_key of this PutProfileObjectTypeRequest.
        :param allow_profile_creation: The allow_profile_creation of this PutProfileObjectTypeRequest.
        :param source_last_updated_timestamp_format: The source_last_updated_timestamp_format of this PutProfileObjectTypeRequest.
        :param fields: The fields of this PutProfileObjectTypeRequest.
        :param keys: The keys of this PutProfileObjectTypeRequest.
        :param tags: The tags of this PutProfileObjectTypeRequest.
        """
        self.openapi_types = {
            'description': str,
            'template_id': str,
            'expiration_days': int,
            'encryption_key': str,
            'allow_profile_creation': bool,
            'source_last_updated_timestamp_format': str,
            'fields': Dict[str, ObjectTypeField],
            'keys': Dict[str, List[ObjectTypeKey]],
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'description': 'Description',
            'template_id': 'TemplateId',
            'expiration_days': 'ExpirationDays',
            'encryption_key': 'EncryptionKey',
            'allow_profile_creation': 'AllowProfileCreation',
            'source_last_updated_timestamp_format': 'SourceLastUpdatedTimestampFormat',
            'fields': 'Fields',
            'keys': 'Keys',
            'tags': 'Tags'
        }

        self._description = description
        self._template_id = template_id
        self._expiration_days = expiration_days
        self._encryption_key = encryption_key
        self._allow_profile_creation = allow_profile_creation
        self._source_last_updated_timestamp_format = source_last_updated_timestamp_format
        self._fields = fields
        self._keys = keys
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutProfileObjectTypeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutProfileObjectType_request of this PutProfileObjectTypeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this PutProfileObjectTypeRequest.

        Description of the profile object type.

        :return: The description of this PutProfileObjectTypeRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PutProfileObjectTypeRequest.

        Description of the profile object type.

        :param description: The description of this PutProfileObjectTypeRequest.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def template_id(self):
        """Gets the template_id of this PutProfileObjectTypeRequest.

        A unique identifier for the object template. For some attributes in the request, the service will use the default value from the object template when TemplateId is present. If these attributes are present in the request, the service may return a <code>BadRequestException</code>. These attributes include: AllowProfileCreation, SourceLastUpdatedTimestampFormat, Fields, and Keys. For example, if AllowProfileCreation is set to true when TemplateId is set, the service may return a <code>BadRequestException</code>.

        :return: The template_id of this PutProfileObjectTypeRequest.
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this PutProfileObjectTypeRequest.

        A unique identifier for the object template. For some attributes in the request, the service will use the default value from the object template when TemplateId is present. If these attributes are present in the request, the service may return a <code>BadRequestException</code>. These attributes include: AllowProfileCreation, SourceLastUpdatedTimestampFormat, Fields, and Keys. For example, if AllowProfileCreation is set to true when TemplateId is set, the service may return a <code>BadRequestException</code>.

        :param template_id: The template_id of this PutProfileObjectTypeRequest.
        :type template_id: str
        """
        if template_id is not None and len(template_id) > 64:
            raise ValueError("Invalid value for `template_id`, length must be less than or equal to `64`")
        if template_id is not None and len(template_id) < 1:
            raise ValueError("Invalid value for `template_id`, length must be greater than or equal to `1`")
        if template_id is not None and not re.search(r'^[a-zA-Z0-9_-]+$', template_id):
            raise ValueError("Invalid value for `template_id`, must be a follow pattern or equal to `/^[a-zA-Z0-9_-]+$/`")

        self._template_id = template_id

    @property
    def expiration_days(self):
        """Gets the expiration_days of this PutProfileObjectTypeRequest.

        The number of days until the data in the object expires.

        :return: The expiration_days of this PutProfileObjectTypeRequest.
        :rtype: int
        """
        return self._expiration_days

    @expiration_days.setter
    def expiration_days(self, expiration_days):
        """Sets the expiration_days of this PutProfileObjectTypeRequest.

        The number of days until the data in the object expires.

        :param expiration_days: The expiration_days of this PutProfileObjectTypeRequest.
        :type expiration_days: int
        """
        if expiration_days is not None and expiration_days > 1098:
            raise ValueError("Invalid value for `expiration_days`, must be a value less than or equal to `1098`")
        if expiration_days is not None and expiration_days < 1:
            raise ValueError("Invalid value for `expiration_days`, must be a value greater than or equal to `1`")

        self._expiration_days = expiration_days

    @property
    def encryption_key(self):
        """Gets the encryption_key of this PutProfileObjectTypeRequest.

        The customer-provided key to encrypt the profile object that will be created in this profile object type.

        :return: The encryption_key of this PutProfileObjectTypeRequest.
        :rtype: str
        """
        return self._encryption_key

    @encryption_key.setter
    def encryption_key(self, encryption_key):
        """Sets the encryption_key of this PutProfileObjectTypeRequest.

        The customer-provided key to encrypt the profile object that will be created in this profile object type.

        :param encryption_key: The encryption_key of this PutProfileObjectTypeRequest.
        :type encryption_key: str
        """
        if encryption_key is not None and len(encryption_key) > 255:
            raise ValueError("Invalid value for `encryption_key`, length must be less than or equal to `255`")
        if encryption_key is not None and len(encryption_key) < 0:
            raise ValueError("Invalid value for `encryption_key`, length must be greater than or equal to `0`")

        self._encryption_key = encryption_key

    @property
    def allow_profile_creation(self):
        """Gets the allow_profile_creation of this PutProfileObjectTypeRequest.

        Indicates whether a profile should be created when data is received if one doesn’t exist for an object of this type. The default is <code>FALSE</code>. If the AllowProfileCreation flag is set to <code>FALSE</code>, then the service tries to fetch a standard profile and associate this object with the profile. If it is set to <code>TRUE</code>, and if no match is found, then the service creates a new standard profile.

        :return: The allow_profile_creation of this PutProfileObjectTypeRequest.
        :rtype: bool
        """
        return self._allow_profile_creation

    @allow_profile_creation.setter
    def allow_profile_creation(self, allow_profile_creation):
        """Sets the allow_profile_creation of this PutProfileObjectTypeRequest.

        Indicates whether a profile should be created when data is received if one doesn’t exist for an object of this type. The default is <code>FALSE</code>. If the AllowProfileCreation flag is set to <code>FALSE</code>, then the service tries to fetch a standard profile and associate this object with the profile. If it is set to <code>TRUE</code>, and if no match is found, then the service creates a new standard profile.

        :param allow_profile_creation: The allow_profile_creation of this PutProfileObjectTypeRequest.
        :type allow_profile_creation: bool
        """

        self._allow_profile_creation = allow_profile_creation

    @property
    def source_last_updated_timestamp_format(self):
        """Gets the source_last_updated_timestamp_format of this PutProfileObjectTypeRequest.

        The format of your <code>sourceLastUpdatedTimestamp</code> that was previously set up. 

        :return: The source_last_updated_timestamp_format of this PutProfileObjectTypeRequest.
        :rtype: str
        """
        return self._source_last_updated_timestamp_format

    @source_last_updated_timestamp_format.setter
    def source_last_updated_timestamp_format(self, source_last_updated_timestamp_format):
        """Sets the source_last_updated_timestamp_format of this PutProfileObjectTypeRequest.

        The format of your <code>sourceLastUpdatedTimestamp</code> that was previously set up. 

        :param source_last_updated_timestamp_format: The source_last_updated_timestamp_format of this PutProfileObjectTypeRequest.
        :type source_last_updated_timestamp_format: str
        """
        if source_last_updated_timestamp_format is not None and len(source_last_updated_timestamp_format) > 255:
            raise ValueError("Invalid value for `source_last_updated_timestamp_format`, length must be less than or equal to `255`")
        if source_last_updated_timestamp_format is not None and len(source_last_updated_timestamp_format) < 1:
            raise ValueError("Invalid value for `source_last_updated_timestamp_format`, length must be greater than or equal to `1`")

        self._source_last_updated_timestamp_format = source_last_updated_timestamp_format

    @property
    def fields(self):
        """Gets the fields of this PutProfileObjectTypeRequest.

        A map of the name and ObjectType field.

        :return: The fields of this PutProfileObjectTypeRequest.
        :rtype: Dict[str, ObjectTypeField]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this PutProfileObjectTypeRequest.

        A map of the name and ObjectType field.

        :param fields: The fields of this PutProfileObjectTypeRequest.
        :type fields: Dict[str, ObjectTypeField]
        """

        self._fields = fields

    @property
    def keys(self):
        """Gets the keys of this PutProfileObjectTypeRequest.

        A list of unique keys that can be used to map data to the profile.

        :return: The keys of this PutProfileObjectTypeRequest.
        :rtype: Dict[str, List[ObjectTypeKey]]
        """
        return self._keys

    @keys.setter
    def keys(self, keys):
        """Sets the keys of this PutProfileObjectTypeRequest.

        A list of unique keys that can be used to map data to the profile.

        :param keys: The keys of this PutProfileObjectTypeRequest.
        :type keys: Dict[str, List[ObjectTypeKey]]
        """

        self._keys = keys

    @property
    def tags(self):
        """Gets the tags of this PutProfileObjectTypeRequest.

        The tags used to organize, track, or control access for this resource.

        :return: The tags of this PutProfileObjectTypeRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PutProfileObjectTypeRequest.

        The tags used to organize, track, or control access for this resource.

        :param tags: The tags of this PutProfileObjectTypeRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
