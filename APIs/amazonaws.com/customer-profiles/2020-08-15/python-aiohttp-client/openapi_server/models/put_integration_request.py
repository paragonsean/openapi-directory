# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.put_integration_request_flow_definition import PutIntegrationRequestFlowDefinition
import re
from openapi_server import util


class PutIntegrationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, uri: str=None, object_type_name: str=None, tags: Dict[str, str]=None, flow_definition: PutIntegrationRequestFlowDefinition=None, object_type_names: Dict[str, str]=None):
        """PutIntegrationRequest - a model defined in OpenAPI

        :param uri: The uri of this PutIntegrationRequest.
        :param object_type_name: The object_type_name of this PutIntegrationRequest.
        :param tags: The tags of this PutIntegrationRequest.
        :param flow_definition: The flow_definition of this PutIntegrationRequest.
        :param object_type_names: The object_type_names of this PutIntegrationRequest.
        """
        self.openapi_types = {
            'uri': str,
            'object_type_name': str,
            'tags': Dict[str, str],
            'flow_definition': PutIntegrationRequestFlowDefinition,
            'object_type_names': Dict[str, str]
        }

        self.attribute_map = {
            'uri': 'Uri',
            'object_type_name': 'ObjectTypeName',
            'tags': 'Tags',
            'flow_definition': 'FlowDefinition',
            'object_type_names': 'ObjectTypeNames'
        }

        self._uri = uri
        self._object_type_name = object_type_name
        self._tags = tags
        self._flow_definition = flow_definition
        self._object_type_names = object_type_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutIntegrationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutIntegration_request of this PutIntegrationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uri(self):
        """Gets the uri of this PutIntegrationRequest.

        The URI of the S3 bucket or any other type of data source.

        :return: The uri of this PutIntegrationRequest.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this PutIntegrationRequest.

        The URI of the S3 bucket or any other type of data source.

        :param uri: The uri of this PutIntegrationRequest.
        :type uri: str
        """
        if uri is not None and len(uri) > 255:
            raise ValueError("Invalid value for `uri`, length must be less than or equal to `255`")
        if uri is not None and len(uri) < 1:
            raise ValueError("Invalid value for `uri`, length must be greater than or equal to `1`")

        self._uri = uri

    @property
    def object_type_name(self):
        """Gets the object_type_name of this PutIntegrationRequest.

        The name of the profile object type.

        :return: The object_type_name of this PutIntegrationRequest.
        :rtype: str
        """
        return self._object_type_name

    @object_type_name.setter
    def object_type_name(self, object_type_name):
        """Sets the object_type_name of this PutIntegrationRequest.

        The name of the profile object type.

        :param object_type_name: The object_type_name of this PutIntegrationRequest.
        :type object_type_name: str
        """
        if object_type_name is not None and len(object_type_name) > 255:
            raise ValueError("Invalid value for `object_type_name`, length must be less than or equal to `255`")
        if object_type_name is not None and len(object_type_name) < 1:
            raise ValueError("Invalid value for `object_type_name`, length must be greater than or equal to `1`")
        if object_type_name is not None and not re.search(r'^[a-zA-Z_][a-zA-Z_0-9-]*$', object_type_name):
            raise ValueError("Invalid value for `object_type_name`, must be a follow pattern or equal to `/^[a-zA-Z_][a-zA-Z_0-9-]*$/`")

        self._object_type_name = object_type_name

    @property
    def tags(self):
        """Gets the tags of this PutIntegrationRequest.

        The tags used to organize, track, or control access for this resource.

        :return: The tags of this PutIntegrationRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PutIntegrationRequest.

        The tags used to organize, track, or control access for this resource.

        :param tags: The tags of this PutIntegrationRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags

    @property
    def flow_definition(self):
        """Gets the flow_definition of this PutIntegrationRequest.


        :return: The flow_definition of this PutIntegrationRequest.
        :rtype: PutIntegrationRequestFlowDefinition
        """
        return self._flow_definition

    @flow_definition.setter
    def flow_definition(self, flow_definition):
        """Sets the flow_definition of this PutIntegrationRequest.


        :param flow_definition: The flow_definition of this PutIntegrationRequest.
        :type flow_definition: PutIntegrationRequestFlowDefinition
        """

        self._flow_definition = flow_definition

    @property
    def object_type_names(self):
        """Gets the object_type_names of this PutIntegrationRequest.

        A map in which each key is an event type from an external application such as Segment or Shopify, and each value is an <code>ObjectTypeName</code> (template) used to ingest the event. It supports the following event types: <code>SegmentIdentify</code>, <code>ShopifyCreateCustomers</code>, <code>ShopifyUpdateCustomers</code>, <code>ShopifyCreateDraftOrders</code>, <code>ShopifyUpdateDraftOrders</code>, <code>ShopifyCreateOrders</code>, and <code>ShopifyUpdatedOrders</code>.

        :return: The object_type_names of this PutIntegrationRequest.
        :rtype: Dict[str, str]
        """
        return self._object_type_names

    @object_type_names.setter
    def object_type_names(self, object_type_names):
        """Sets the object_type_names of this PutIntegrationRequest.

        A map in which each key is an event type from an external application such as Segment or Shopify, and each value is an <code>ObjectTypeName</code> (template) used to ingest the event. It supports the following event types: <code>SegmentIdentify</code>, <code>ShopifyCreateCustomers</code>, <code>ShopifyUpdateCustomers</code>, <code>ShopifyCreateDraftOrders</code>, <code>ShopifyUpdateDraftOrders</code>, <code>ShopifyCreateOrders</code>, and <code>ShopifyUpdatedOrders</code>.

        :param object_type_names: The object_type_names of this PutIntegrationRequest.
        :type object_type_names: Dict[str, str]
        """

        self._object_type_names = object_type_names
