# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_stream_state import EventStreamState
from openapi_server.models.event_stream_summary_destination_summary import EventStreamSummaryDestinationSummary
from openapi_server import util


class EventStreamSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_name: str=None, event_stream_name: str=None, event_stream_arn: str=None, state: EventStreamState=None, stopped_since: datetime=None, destination_summary: EventStreamSummaryDestinationSummary=None, tags: Dict=None):
        """EventStreamSummary - a model defined in OpenAPI

        :param domain_name: The domain_name of this EventStreamSummary.
        :param event_stream_name: The event_stream_name of this EventStreamSummary.
        :param event_stream_arn: The event_stream_arn of this EventStreamSummary.
        :param state: The state of this EventStreamSummary.
        :param stopped_since: The stopped_since of this EventStreamSummary.
        :param destination_summary: The destination_summary of this EventStreamSummary.
        :param tags: The tags of this EventStreamSummary.
        """
        self.openapi_types = {
            'domain_name': str,
            'event_stream_name': str,
            'event_stream_arn': str,
            'state': EventStreamState,
            'stopped_since': datetime,
            'destination_summary': EventStreamSummaryDestinationSummary,
            'tags': Dict
        }

        self.attribute_map = {
            'domain_name': 'DomainName',
            'event_stream_name': 'EventStreamName',
            'event_stream_arn': 'EventStreamArn',
            'state': 'State',
            'stopped_since': 'StoppedSince',
            'destination_summary': 'DestinationSummary',
            'tags': 'Tags'
        }

        self._domain_name = domain_name
        self._event_stream_name = event_stream_name
        self._event_stream_arn = event_stream_arn
        self._state = state
        self._stopped_since = stopped_since
        self._destination_summary = destination_summary
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventStreamSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventStreamSummary of this EventStreamSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_name(self):
        """Gets the domain_name of this EventStreamSummary.


        :return: The domain_name of this EventStreamSummary.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this EventStreamSummary.


        :param domain_name: The domain_name of this EventStreamSummary.
        :type domain_name: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")

        self._domain_name = domain_name

    @property
    def event_stream_name(self):
        """Gets the event_stream_name of this EventStreamSummary.


        :return: The event_stream_name of this EventStreamSummary.
        :rtype: str
        """
        return self._event_stream_name

    @event_stream_name.setter
    def event_stream_name(self, event_stream_name):
        """Sets the event_stream_name of this EventStreamSummary.


        :param event_stream_name: The event_stream_name of this EventStreamSummary.
        :type event_stream_name: str
        """
        if event_stream_name is None:
            raise ValueError("Invalid value for `event_stream_name`, must not be `None`")

        self._event_stream_name = event_stream_name

    @property
    def event_stream_arn(self):
        """Gets the event_stream_arn of this EventStreamSummary.


        :return: The event_stream_arn of this EventStreamSummary.
        :rtype: str
        """
        return self._event_stream_arn

    @event_stream_arn.setter
    def event_stream_arn(self, event_stream_arn):
        """Sets the event_stream_arn of this EventStreamSummary.


        :param event_stream_arn: The event_stream_arn of this EventStreamSummary.
        :type event_stream_arn: str
        """
        if event_stream_arn is None:
            raise ValueError("Invalid value for `event_stream_arn`, must not be `None`")

        self._event_stream_arn = event_stream_arn

    @property
    def state(self):
        """Gets the state of this EventStreamSummary.


        :return: The state of this EventStreamSummary.
        :rtype: EventStreamState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this EventStreamSummary.


        :param state: The state of this EventStreamSummary.
        :type state: EventStreamState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def stopped_since(self):
        """Gets the stopped_since of this EventStreamSummary.


        :return: The stopped_since of this EventStreamSummary.
        :rtype: datetime
        """
        return self._stopped_since

    @stopped_since.setter
    def stopped_since(self, stopped_since):
        """Sets the stopped_since of this EventStreamSummary.


        :param stopped_since: The stopped_since of this EventStreamSummary.
        :type stopped_since: datetime
        """

        self._stopped_since = stopped_since

    @property
    def destination_summary(self):
        """Gets the destination_summary of this EventStreamSummary.


        :return: The destination_summary of this EventStreamSummary.
        :rtype: EventStreamSummaryDestinationSummary
        """
        return self._destination_summary

    @destination_summary.setter
    def destination_summary(self, destination_summary):
        """Sets the destination_summary of this EventStreamSummary.


        :param destination_summary: The destination_summary of this EventStreamSummary.
        :type destination_summary: EventStreamSummaryDestinationSummary
        """

        self._destination_summary = destination_summary

    @property
    def tags(self):
        """Gets the tags of this EventStreamSummary.


        :return: The tags of this EventStreamSummary.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this EventStreamSummary.


        :param tags: The tags of this EventStreamSummary.
        :type tags: Dict
        """

        self._tags = tags
