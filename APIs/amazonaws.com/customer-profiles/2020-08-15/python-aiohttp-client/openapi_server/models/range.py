# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.unit import Unit
from openapi_server import util


class Range(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, value: int=None, unit: Unit=None):
        """Range - a model defined in OpenAPI

        :param value: The value of this Range.
        :param unit: The unit of this Range.
        """
        self.openapi_types = {
            'value': int,
            'unit': Unit
        }

        self.attribute_map = {
            'value': 'Value',
            'unit': 'Unit'
        }

        self._value = value
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Range':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Range of this Range.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def value(self):
        """Gets the value of this Range.


        :return: The value of this Range.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Range.


        :param value: The value of this Range.
        :type value: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value

    @property
    def unit(self):
        """Gets the unit of this Range.


        :return: The unit of this Range.
        :rtype: Unit
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this Range.


        :param unit: The unit of this Range.
        :type unit: Unit
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")

        self._unit = unit
