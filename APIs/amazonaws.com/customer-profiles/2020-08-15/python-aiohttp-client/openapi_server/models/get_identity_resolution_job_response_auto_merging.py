# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auto_merging_conflict_resolution import AutoMergingConflictResolution
from openapi_server.models.auto_merging_consolidation import AutoMergingConsolidation
from openapi_server import util


class GetIdentityResolutionJobResponseAutoMerging(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, consolidation: AutoMergingConsolidation=None, conflict_resolution: AutoMergingConflictResolution=None, min_allowed_confidence_score_for_merging: float=None):
        """GetIdentityResolutionJobResponseAutoMerging - a model defined in OpenAPI

        :param enabled: The enabled of this GetIdentityResolutionJobResponseAutoMerging.
        :param consolidation: The consolidation of this GetIdentityResolutionJobResponseAutoMerging.
        :param conflict_resolution: The conflict_resolution of this GetIdentityResolutionJobResponseAutoMerging.
        :param min_allowed_confidence_score_for_merging: The min_allowed_confidence_score_for_merging of this GetIdentityResolutionJobResponseAutoMerging.
        """
        self.openapi_types = {
            'enabled': bool,
            'consolidation': AutoMergingConsolidation,
            'conflict_resolution': AutoMergingConflictResolution,
            'min_allowed_confidence_score_for_merging': float
        }

        self.attribute_map = {
            'enabled': 'Enabled',
            'consolidation': 'Consolidation',
            'conflict_resolution': 'ConflictResolution',
            'min_allowed_confidence_score_for_merging': 'MinAllowedConfidenceScoreForMerging'
        }

        self._enabled = enabled
        self._consolidation = consolidation
        self._conflict_resolution = conflict_resolution
        self._min_allowed_confidence_score_for_merging = min_allowed_confidence_score_for_merging

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetIdentityResolutionJobResponseAutoMerging':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetIdentityResolutionJobResponse_AutoMerging of this GetIdentityResolutionJobResponseAutoMerging.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this GetIdentityResolutionJobResponseAutoMerging.


        :return: The enabled of this GetIdentityResolutionJobResponseAutoMerging.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this GetIdentityResolutionJobResponseAutoMerging.


        :param enabled: The enabled of this GetIdentityResolutionJobResponseAutoMerging.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def consolidation(self):
        """Gets the consolidation of this GetIdentityResolutionJobResponseAutoMerging.


        :return: The consolidation of this GetIdentityResolutionJobResponseAutoMerging.
        :rtype: AutoMergingConsolidation
        """
        return self._consolidation

    @consolidation.setter
    def consolidation(self, consolidation):
        """Sets the consolidation of this GetIdentityResolutionJobResponseAutoMerging.


        :param consolidation: The consolidation of this GetIdentityResolutionJobResponseAutoMerging.
        :type consolidation: AutoMergingConsolidation
        """

        self._consolidation = consolidation

    @property
    def conflict_resolution(self):
        """Gets the conflict_resolution of this GetIdentityResolutionJobResponseAutoMerging.


        :return: The conflict_resolution of this GetIdentityResolutionJobResponseAutoMerging.
        :rtype: AutoMergingConflictResolution
        """
        return self._conflict_resolution

    @conflict_resolution.setter
    def conflict_resolution(self, conflict_resolution):
        """Sets the conflict_resolution of this GetIdentityResolutionJobResponseAutoMerging.


        :param conflict_resolution: The conflict_resolution of this GetIdentityResolutionJobResponseAutoMerging.
        :type conflict_resolution: AutoMergingConflictResolution
        """

        self._conflict_resolution = conflict_resolution

    @property
    def min_allowed_confidence_score_for_merging(self):
        """Gets the min_allowed_confidence_score_for_merging of this GetIdentityResolutionJobResponseAutoMerging.


        :return: The min_allowed_confidence_score_for_merging of this GetIdentityResolutionJobResponseAutoMerging.
        :rtype: float
        """
        return self._min_allowed_confidence_score_for_merging

    @min_allowed_confidence_score_for_merging.setter
    def min_allowed_confidence_score_for_merging(self, min_allowed_confidence_score_for_merging):
        """Sets the min_allowed_confidence_score_for_merging of this GetIdentityResolutionJobResponseAutoMerging.


        :param min_allowed_confidence_score_for_merging: The min_allowed_confidence_score_for_merging of this GetIdentityResolutionJobResponseAutoMerging.
        :type min_allowed_confidence_score_for_merging: float
        """

        self._min_allowed_confidence_score_for_merging = min_allowed_confidence_score_for_merging
