# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.task_connector_operator import TaskConnectorOperator
from openapi_server.models.task_type import TaskType
from openapi_server import util


class Task(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector_operator: TaskConnectorOperator=None, destination_field: str=None, source_fields: List=None, task_properties: Dict=None, task_type: TaskType=None):
        """Task - a model defined in OpenAPI

        :param connector_operator: The connector_operator of this Task.
        :param destination_field: The destination_field of this Task.
        :param source_fields: The source_fields of this Task.
        :param task_properties: The task_properties of this Task.
        :param task_type: The task_type of this Task.
        """
        self.openapi_types = {
            'connector_operator': TaskConnectorOperator,
            'destination_field': str,
            'source_fields': List,
            'task_properties': Dict,
            'task_type': TaskType
        }

        self.attribute_map = {
            'connector_operator': 'ConnectorOperator',
            'destination_field': 'DestinationField',
            'source_fields': 'SourceFields',
            'task_properties': 'TaskProperties',
            'task_type': 'TaskType'
        }

        self._connector_operator = connector_operator
        self._destination_field = destination_field
        self._source_fields = source_fields
        self._task_properties = task_properties
        self._task_type = task_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Task':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Task of this Task.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector_operator(self):
        """Gets the connector_operator of this Task.


        :return: The connector_operator of this Task.
        :rtype: TaskConnectorOperator
        """
        return self._connector_operator

    @connector_operator.setter
    def connector_operator(self, connector_operator):
        """Sets the connector_operator of this Task.


        :param connector_operator: The connector_operator of this Task.
        :type connector_operator: TaskConnectorOperator
        """

        self._connector_operator = connector_operator

    @property
    def destination_field(self):
        """Gets the destination_field of this Task.


        :return: The destination_field of this Task.
        :rtype: str
        """
        return self._destination_field

    @destination_field.setter
    def destination_field(self, destination_field):
        """Sets the destination_field of this Task.


        :param destination_field: The destination_field of this Task.
        :type destination_field: str
        """

        self._destination_field = destination_field

    @property
    def source_fields(self):
        """Gets the source_fields of this Task.


        :return: The source_fields of this Task.
        :rtype: List
        """
        return self._source_fields

    @source_fields.setter
    def source_fields(self, source_fields):
        """Sets the source_fields of this Task.


        :param source_fields: The source_fields of this Task.
        :type source_fields: List
        """
        if source_fields is None:
            raise ValueError("Invalid value for `source_fields`, must not be `None`")

        self._source_fields = source_fields

    @property
    def task_properties(self):
        """Gets the task_properties of this Task.


        :return: The task_properties of this Task.
        :rtype: Dict
        """
        return self._task_properties

    @task_properties.setter
    def task_properties(self, task_properties):
        """Sets the task_properties of this Task.


        :param task_properties: The task_properties of this Task.
        :type task_properties: Dict
        """

        self._task_properties = task_properties

    @property
    def task_type(self):
        """Gets the task_type of this Task.


        :return: The task_type of this Task.
        :rtype: TaskType
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this Task.


        :param task_type: The task_type of this Task.
        :type task_type: TaskType
        """
        if task_type is None:
            raise ValueError("Invalid value for `task_type`, must not be `None`")

        self._task_type = task_type
