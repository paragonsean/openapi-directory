# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListDomainItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_name: str=None, created_at: datetime=None, last_updated_at: datetime=None, tags: Dict=None):
        """ListDomainItem - a model defined in OpenAPI

        :param domain_name: The domain_name of this ListDomainItem.
        :param created_at: The created_at of this ListDomainItem.
        :param last_updated_at: The last_updated_at of this ListDomainItem.
        :param tags: The tags of this ListDomainItem.
        """
        self.openapi_types = {
            'domain_name': str,
            'created_at': datetime,
            'last_updated_at': datetime,
            'tags': Dict
        }

        self.attribute_map = {
            'domain_name': 'DomainName',
            'created_at': 'CreatedAt',
            'last_updated_at': 'LastUpdatedAt',
            'tags': 'Tags'
        }

        self._domain_name = domain_name
        self._created_at = created_at
        self._last_updated_at = last_updated_at
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListDomainItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListDomainItem of this ListDomainItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_name(self):
        """Gets the domain_name of this ListDomainItem.


        :return: The domain_name of this ListDomainItem.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this ListDomainItem.


        :param domain_name: The domain_name of this ListDomainItem.
        :type domain_name: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")

        self._domain_name = domain_name

    @property
    def created_at(self):
        """Gets the created_at of this ListDomainItem.


        :return: The created_at of this ListDomainItem.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ListDomainItem.


        :param created_at: The created_at of this ListDomainItem.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def last_updated_at(self):
        """Gets the last_updated_at of this ListDomainItem.


        :return: The last_updated_at of this ListDomainItem.
        :rtype: datetime
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """Sets the last_updated_at of this ListDomainItem.


        :param last_updated_at: The last_updated_at of this ListDomainItem.
        :type last_updated_at: datetime
        """
        if last_updated_at is None:
            raise ValueError("Invalid value for `last_updated_at`, must not be `None`")

        self._last_updated_at = last_updated_at

    @property
    def tags(self):
        """Gets the tags of this ListDomainItem.


        :return: The tags of this ListDomainItem.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ListDomainItem.


        :param tags: The tags of this ListDomainItem.
        :type tags: Dict
        """

        self._tags = tags
