# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WorkflowMetricsAppflowIntegration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, records_processed: int=None, steps_completed: int=None, total_steps: int=None):
        """WorkflowMetricsAppflowIntegration - a model defined in OpenAPI

        :param records_processed: The records_processed of this WorkflowMetricsAppflowIntegration.
        :param steps_completed: The steps_completed of this WorkflowMetricsAppflowIntegration.
        :param total_steps: The total_steps of this WorkflowMetricsAppflowIntegration.
        """
        self.openapi_types = {
            'records_processed': int,
            'steps_completed': int,
            'total_steps': int
        }

        self.attribute_map = {
            'records_processed': 'RecordsProcessed',
            'steps_completed': 'StepsCompleted',
            'total_steps': 'TotalSteps'
        }

        self._records_processed = records_processed
        self._steps_completed = steps_completed
        self._total_steps = total_steps

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkflowMetricsAppflowIntegration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkflowMetrics_AppflowIntegration of this WorkflowMetricsAppflowIntegration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def records_processed(self):
        """Gets the records_processed of this WorkflowMetricsAppflowIntegration.


        :return: The records_processed of this WorkflowMetricsAppflowIntegration.
        :rtype: int
        """
        return self._records_processed

    @records_processed.setter
    def records_processed(self, records_processed):
        """Sets the records_processed of this WorkflowMetricsAppflowIntegration.


        :param records_processed: The records_processed of this WorkflowMetricsAppflowIntegration.
        :type records_processed: int
        """
        if records_processed is None:
            raise ValueError("Invalid value for `records_processed`, must not be `None`")

        self._records_processed = records_processed

    @property
    def steps_completed(self):
        """Gets the steps_completed of this WorkflowMetricsAppflowIntegration.


        :return: The steps_completed of this WorkflowMetricsAppflowIntegration.
        :rtype: int
        """
        return self._steps_completed

    @steps_completed.setter
    def steps_completed(self, steps_completed):
        """Sets the steps_completed of this WorkflowMetricsAppflowIntegration.


        :param steps_completed: The steps_completed of this WorkflowMetricsAppflowIntegration.
        :type steps_completed: int
        """
        if steps_completed is None:
            raise ValueError("Invalid value for `steps_completed`, must not be `None`")

        self._steps_completed = steps_completed

    @property
    def total_steps(self):
        """Gets the total_steps of this WorkflowMetricsAppflowIntegration.


        :return: The total_steps of this WorkflowMetricsAppflowIntegration.
        :rtype: int
        """
        return self._total_steps

    @total_steps.setter
    def total_steps(self, total_steps):
        """Sets the total_steps of this WorkflowMetricsAppflowIntegration.


        :param total_steps: The total_steps of this WorkflowMetricsAppflowIntegration.
        :type total_steps: int
        """
        if total_steps is None:
            raise ValueError("Invalid value for `total_steps`, must not be `None`")

        self._total_steps = total_steps
