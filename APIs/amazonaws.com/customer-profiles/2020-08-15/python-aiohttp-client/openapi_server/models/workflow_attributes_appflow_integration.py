# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.source_connector_type import SourceConnectorType
from openapi_server import util


class WorkflowAttributesAppflowIntegration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source_connector_type: SourceConnectorType=None, connector_profile_name: str=None, role_arn: str=None):
        """WorkflowAttributesAppflowIntegration - a model defined in OpenAPI

        :param source_connector_type: The source_connector_type of this WorkflowAttributesAppflowIntegration.
        :param connector_profile_name: The connector_profile_name of this WorkflowAttributesAppflowIntegration.
        :param role_arn: The role_arn of this WorkflowAttributesAppflowIntegration.
        """
        self.openapi_types = {
            'source_connector_type': SourceConnectorType,
            'connector_profile_name': str,
            'role_arn': str
        }

        self.attribute_map = {
            'source_connector_type': 'SourceConnectorType',
            'connector_profile_name': 'ConnectorProfileName',
            'role_arn': 'RoleArn'
        }

        self._source_connector_type = source_connector_type
        self._connector_profile_name = connector_profile_name
        self._role_arn = role_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkflowAttributesAppflowIntegration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkflowAttributes_AppflowIntegration of this WorkflowAttributesAppflowIntegration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_connector_type(self):
        """Gets the source_connector_type of this WorkflowAttributesAppflowIntegration.


        :return: The source_connector_type of this WorkflowAttributesAppflowIntegration.
        :rtype: SourceConnectorType
        """
        return self._source_connector_type

    @source_connector_type.setter
    def source_connector_type(self, source_connector_type):
        """Sets the source_connector_type of this WorkflowAttributesAppflowIntegration.


        :param source_connector_type: The source_connector_type of this WorkflowAttributesAppflowIntegration.
        :type source_connector_type: SourceConnectorType
        """
        if source_connector_type is None:
            raise ValueError("Invalid value for `source_connector_type`, must not be `None`")

        self._source_connector_type = source_connector_type

    @property
    def connector_profile_name(self):
        """Gets the connector_profile_name of this WorkflowAttributesAppflowIntegration.


        :return: The connector_profile_name of this WorkflowAttributesAppflowIntegration.
        :rtype: str
        """
        return self._connector_profile_name

    @connector_profile_name.setter
    def connector_profile_name(self, connector_profile_name):
        """Sets the connector_profile_name of this WorkflowAttributesAppflowIntegration.


        :param connector_profile_name: The connector_profile_name of this WorkflowAttributesAppflowIntegration.
        :type connector_profile_name: str
        """
        if connector_profile_name is None:
            raise ValueError("Invalid value for `connector_profile_name`, must not be `None`")

        self._connector_profile_name = connector_profile_name

    @property
    def role_arn(self):
        """Gets the role_arn of this WorkflowAttributesAppflowIntegration.


        :return: The role_arn of this WorkflowAttributesAppflowIntegration.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this WorkflowAttributesAppflowIntegration.


        :param role_arn: The role_arn of this WorkflowAttributesAppflowIntegration.
        :type role_arn: str
        """

        self._role_arn = role_arn
