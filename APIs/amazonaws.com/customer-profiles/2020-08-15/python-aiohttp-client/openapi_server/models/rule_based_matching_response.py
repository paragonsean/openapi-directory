# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conflict_resolution import ConflictResolution
from openapi_server.models.exporting_config import ExportingConfig
from openapi_server.models.rule_based_matching_status import RuleBasedMatchingStatus
from openapi_server.models.update_domain_request_rule_based_matching_attribute_types_selector import UpdateDomainRequestRuleBasedMatchingAttributeTypesSelector
from openapi_server import util


class RuleBasedMatchingResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, matching_rules: List=None, status: RuleBasedMatchingStatus=None, max_allowed_rule_level_for_merging: int=None, max_allowed_rule_level_for_matching: int=None, attribute_types_selector: UpdateDomainRequestRuleBasedMatchingAttributeTypesSelector=None, conflict_resolution: ConflictResolution=None, exporting_config: ExportingConfig=None):
        """RuleBasedMatchingResponse - a model defined in OpenAPI

        :param enabled: The enabled of this RuleBasedMatchingResponse.
        :param matching_rules: The matching_rules of this RuleBasedMatchingResponse.
        :param status: The status of this RuleBasedMatchingResponse.
        :param max_allowed_rule_level_for_merging: The max_allowed_rule_level_for_merging of this RuleBasedMatchingResponse.
        :param max_allowed_rule_level_for_matching: The max_allowed_rule_level_for_matching of this RuleBasedMatchingResponse.
        :param attribute_types_selector: The attribute_types_selector of this RuleBasedMatchingResponse.
        :param conflict_resolution: The conflict_resolution of this RuleBasedMatchingResponse.
        :param exporting_config: The exporting_config of this RuleBasedMatchingResponse.
        """
        self.openapi_types = {
            'enabled': bool,
            'matching_rules': List,
            'status': RuleBasedMatchingStatus,
            'max_allowed_rule_level_for_merging': int,
            'max_allowed_rule_level_for_matching': int,
            'attribute_types_selector': UpdateDomainRequestRuleBasedMatchingAttributeTypesSelector,
            'conflict_resolution': ConflictResolution,
            'exporting_config': ExportingConfig
        }

        self.attribute_map = {
            'enabled': 'Enabled',
            'matching_rules': 'MatchingRules',
            'status': 'Status',
            'max_allowed_rule_level_for_merging': 'MaxAllowedRuleLevelForMerging',
            'max_allowed_rule_level_for_matching': 'MaxAllowedRuleLevelForMatching',
            'attribute_types_selector': 'AttributeTypesSelector',
            'conflict_resolution': 'ConflictResolution',
            'exporting_config': 'ExportingConfig'
        }

        self._enabled = enabled
        self._matching_rules = matching_rules
        self._status = status
        self._max_allowed_rule_level_for_merging = max_allowed_rule_level_for_merging
        self._max_allowed_rule_level_for_matching = max_allowed_rule_level_for_matching
        self._attribute_types_selector = attribute_types_selector
        self._conflict_resolution = conflict_resolution
        self._exporting_config = exporting_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleBasedMatchingResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuleBasedMatchingResponse of this RuleBasedMatchingResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this RuleBasedMatchingResponse.


        :return: The enabled of this RuleBasedMatchingResponse.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this RuleBasedMatchingResponse.


        :param enabled: The enabled of this RuleBasedMatchingResponse.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def matching_rules(self):
        """Gets the matching_rules of this RuleBasedMatchingResponse.


        :return: The matching_rules of this RuleBasedMatchingResponse.
        :rtype: List
        """
        return self._matching_rules

    @matching_rules.setter
    def matching_rules(self, matching_rules):
        """Sets the matching_rules of this RuleBasedMatchingResponse.


        :param matching_rules: The matching_rules of this RuleBasedMatchingResponse.
        :type matching_rules: List
        """

        self._matching_rules = matching_rules

    @property
    def status(self):
        """Gets the status of this RuleBasedMatchingResponse.


        :return: The status of this RuleBasedMatchingResponse.
        :rtype: RuleBasedMatchingStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RuleBasedMatchingResponse.


        :param status: The status of this RuleBasedMatchingResponse.
        :type status: RuleBasedMatchingStatus
        """

        self._status = status

    @property
    def max_allowed_rule_level_for_merging(self):
        """Gets the max_allowed_rule_level_for_merging of this RuleBasedMatchingResponse.


        :return: The max_allowed_rule_level_for_merging of this RuleBasedMatchingResponse.
        :rtype: int
        """
        return self._max_allowed_rule_level_for_merging

    @max_allowed_rule_level_for_merging.setter
    def max_allowed_rule_level_for_merging(self, max_allowed_rule_level_for_merging):
        """Sets the max_allowed_rule_level_for_merging of this RuleBasedMatchingResponse.


        :param max_allowed_rule_level_for_merging: The max_allowed_rule_level_for_merging of this RuleBasedMatchingResponse.
        :type max_allowed_rule_level_for_merging: int
        """

        self._max_allowed_rule_level_for_merging = max_allowed_rule_level_for_merging

    @property
    def max_allowed_rule_level_for_matching(self):
        """Gets the max_allowed_rule_level_for_matching of this RuleBasedMatchingResponse.


        :return: The max_allowed_rule_level_for_matching of this RuleBasedMatchingResponse.
        :rtype: int
        """
        return self._max_allowed_rule_level_for_matching

    @max_allowed_rule_level_for_matching.setter
    def max_allowed_rule_level_for_matching(self, max_allowed_rule_level_for_matching):
        """Sets the max_allowed_rule_level_for_matching of this RuleBasedMatchingResponse.


        :param max_allowed_rule_level_for_matching: The max_allowed_rule_level_for_matching of this RuleBasedMatchingResponse.
        :type max_allowed_rule_level_for_matching: int
        """

        self._max_allowed_rule_level_for_matching = max_allowed_rule_level_for_matching

    @property
    def attribute_types_selector(self):
        """Gets the attribute_types_selector of this RuleBasedMatchingResponse.


        :return: The attribute_types_selector of this RuleBasedMatchingResponse.
        :rtype: UpdateDomainRequestRuleBasedMatchingAttributeTypesSelector
        """
        return self._attribute_types_selector

    @attribute_types_selector.setter
    def attribute_types_selector(self, attribute_types_selector):
        """Sets the attribute_types_selector of this RuleBasedMatchingResponse.


        :param attribute_types_selector: The attribute_types_selector of this RuleBasedMatchingResponse.
        :type attribute_types_selector: UpdateDomainRequestRuleBasedMatchingAttributeTypesSelector
        """

        self._attribute_types_selector = attribute_types_selector

    @property
    def conflict_resolution(self):
        """Gets the conflict_resolution of this RuleBasedMatchingResponse.


        :return: The conflict_resolution of this RuleBasedMatchingResponse.
        :rtype: ConflictResolution
        """
        return self._conflict_resolution

    @conflict_resolution.setter
    def conflict_resolution(self, conflict_resolution):
        """Sets the conflict_resolution of this RuleBasedMatchingResponse.


        :param conflict_resolution: The conflict_resolution of this RuleBasedMatchingResponse.
        :type conflict_resolution: ConflictResolution
        """

        self._conflict_resolution = conflict_resolution

    @property
    def exporting_config(self):
        """Gets the exporting_config of this RuleBasedMatchingResponse.


        :return: The exporting_config of this RuleBasedMatchingResponse.
        :rtype: ExportingConfig
        """
        return self._exporting_config

    @exporting_config.setter
    def exporting_config(self, exporting_config):
        """Sets the exporting_config of this RuleBasedMatchingResponse.


        :param exporting_config: The exporting_config of this RuleBasedMatchingResponse.
        :type exporting_config: ExportingConfig
        """

        self._exporting_config = exporting_config
