# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.marketo_connector_operator import MarketoConnectorOperator
from openapi_server.models.s3_connector_operator import S3ConnectorOperator
from openapi_server.models.salesforce_connector_operator import SalesforceConnectorOperator
from openapi_server.models.service_now_connector_operator import ServiceNowConnectorOperator
from openapi_server.models.zendesk_connector_operator import ZendeskConnectorOperator
from openapi_server import util


class TaskConnectorOperator(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, marketo: MarketoConnectorOperator=None, s3: S3ConnectorOperator=None, salesforce: SalesforceConnectorOperator=None, service_now: ServiceNowConnectorOperator=None, zendesk: ZendeskConnectorOperator=None):
        """TaskConnectorOperator - a model defined in OpenAPI

        :param marketo: The marketo of this TaskConnectorOperator.
        :param s3: The s3 of this TaskConnectorOperator.
        :param salesforce: The salesforce of this TaskConnectorOperator.
        :param service_now: The service_now of this TaskConnectorOperator.
        :param zendesk: The zendesk of this TaskConnectorOperator.
        """
        self.openapi_types = {
            'marketo': MarketoConnectorOperator,
            's3': S3ConnectorOperator,
            'salesforce': SalesforceConnectorOperator,
            'service_now': ServiceNowConnectorOperator,
            'zendesk': ZendeskConnectorOperator
        }

        self.attribute_map = {
            'marketo': 'Marketo',
            's3': 'S3',
            'salesforce': 'Salesforce',
            'service_now': 'ServiceNow',
            'zendesk': 'Zendesk'
        }

        self._marketo = marketo
        self._s3 = s3
        self._salesforce = salesforce
        self._service_now = service_now
        self._zendesk = zendesk

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskConnectorOperator':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Task_ConnectorOperator of this TaskConnectorOperator.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def marketo(self):
        """Gets the marketo of this TaskConnectorOperator.


        :return: The marketo of this TaskConnectorOperator.
        :rtype: MarketoConnectorOperator
        """
        return self._marketo

    @marketo.setter
    def marketo(self, marketo):
        """Sets the marketo of this TaskConnectorOperator.


        :param marketo: The marketo of this TaskConnectorOperator.
        :type marketo: MarketoConnectorOperator
        """

        self._marketo = marketo

    @property
    def s3(self):
        """Gets the s3 of this TaskConnectorOperator.


        :return: The s3 of this TaskConnectorOperator.
        :rtype: S3ConnectorOperator
        """
        return self._s3

    @s3.setter
    def s3(self, s3):
        """Sets the s3 of this TaskConnectorOperator.


        :param s3: The s3 of this TaskConnectorOperator.
        :type s3: S3ConnectorOperator
        """

        self._s3 = s3

    @property
    def salesforce(self):
        """Gets the salesforce of this TaskConnectorOperator.


        :return: The salesforce of this TaskConnectorOperator.
        :rtype: SalesforceConnectorOperator
        """
        return self._salesforce

    @salesforce.setter
    def salesforce(self, salesforce):
        """Sets the salesforce of this TaskConnectorOperator.


        :param salesforce: The salesforce of this TaskConnectorOperator.
        :type salesforce: SalesforceConnectorOperator
        """

        self._salesforce = salesforce

    @property
    def service_now(self):
        """Gets the service_now of this TaskConnectorOperator.


        :return: The service_now of this TaskConnectorOperator.
        :rtype: ServiceNowConnectorOperator
        """
        return self._service_now

    @service_now.setter
    def service_now(self, service_now):
        """Sets the service_now of this TaskConnectorOperator.


        :param service_now: The service_now of this TaskConnectorOperator.
        :type service_now: ServiceNowConnectorOperator
        """

        self._service_now = service_now

    @property
    def zendesk(self):
        """Gets the zendesk of this TaskConnectorOperator.


        :return: The zendesk of this TaskConnectorOperator.
        :rtype: ZendeskConnectorOperator
        """
        return self._zendesk

    @zendesk.setter
    def zendesk(self, zendesk):
        """Sets the zendesk of this TaskConnectorOperator.


        :param zendesk: The zendesk of this TaskConnectorOperator.
        :type zendesk: ZendeskConnectorOperator
        """

        self._zendesk = zendesk
