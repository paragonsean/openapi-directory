# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DeleteProfileObjectRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, profile_id: str=None, profile_object_unique_key: str=None, object_type_name: str=None):
        """DeleteProfileObjectRequest - a model defined in OpenAPI

        :param profile_id: The profile_id of this DeleteProfileObjectRequest.
        :param profile_object_unique_key: The profile_object_unique_key of this DeleteProfileObjectRequest.
        :param object_type_name: The object_type_name of this DeleteProfileObjectRequest.
        """
        self.openapi_types = {
            'profile_id': str,
            'profile_object_unique_key': str,
            'object_type_name': str
        }

        self.attribute_map = {
            'profile_id': 'ProfileId',
            'profile_object_unique_key': 'ProfileObjectUniqueKey',
            'object_type_name': 'ObjectTypeName'
        }

        self._profile_id = profile_id
        self._profile_object_unique_key = profile_object_unique_key
        self._object_type_name = object_type_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteProfileObjectRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteProfileObject_request of this DeleteProfileObjectRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def profile_id(self):
        """Gets the profile_id of this DeleteProfileObjectRequest.

        The unique identifier of a customer profile.

        :return: The profile_id of this DeleteProfileObjectRequest.
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this DeleteProfileObjectRequest.

        The unique identifier of a customer profile.

        :param profile_id: The profile_id of this DeleteProfileObjectRequest.
        :type profile_id: str
        """
        if profile_id is None:
            raise ValueError("Invalid value for `profile_id`, must not be `None`")
        if profile_id is not None and not re.search(r'[a-f0-9]{32}', profile_id):
            raise ValueError("Invalid value for `profile_id`, must be a follow pattern or equal to `/[a-f0-9]{32}/`")

        self._profile_id = profile_id

    @property
    def profile_object_unique_key(self):
        """Gets the profile_object_unique_key of this DeleteProfileObjectRequest.

        The unique identifier of the profile object generated by the service.

        :return: The profile_object_unique_key of this DeleteProfileObjectRequest.
        :rtype: str
        """
        return self._profile_object_unique_key

    @profile_object_unique_key.setter
    def profile_object_unique_key(self, profile_object_unique_key):
        """Sets the profile_object_unique_key of this DeleteProfileObjectRequest.

        The unique identifier of the profile object generated by the service.

        :param profile_object_unique_key: The profile_object_unique_key of this DeleteProfileObjectRequest.
        :type profile_object_unique_key: str
        """
        if profile_object_unique_key is None:
            raise ValueError("Invalid value for `profile_object_unique_key`, must not be `None`")
        if profile_object_unique_key is not None and len(profile_object_unique_key) > 255:
            raise ValueError("Invalid value for `profile_object_unique_key`, length must be less than or equal to `255`")
        if profile_object_unique_key is not None and len(profile_object_unique_key) < 1:
            raise ValueError("Invalid value for `profile_object_unique_key`, length must be greater than or equal to `1`")

        self._profile_object_unique_key = profile_object_unique_key

    @property
    def object_type_name(self):
        """Gets the object_type_name of this DeleteProfileObjectRequest.

        The name of the profile object type.

        :return: The object_type_name of this DeleteProfileObjectRequest.
        :rtype: str
        """
        return self._object_type_name

    @object_type_name.setter
    def object_type_name(self, object_type_name):
        """Sets the object_type_name of this DeleteProfileObjectRequest.

        The name of the profile object type.

        :param object_type_name: The object_type_name of this DeleteProfileObjectRequest.
        :type object_type_name: str
        """
        if object_type_name is None:
            raise ValueError("Invalid value for `object_type_name`, must not be `None`")
        if object_type_name is not None and len(object_type_name) > 255:
            raise ValueError("Invalid value for `object_type_name`, length must be less than or equal to `255`")
        if object_type_name is not None and len(object_type_name) < 1:
            raise ValueError("Invalid value for `object_type_name`, length must be greater than or equal to `1`")
        if object_type_name is not None and not re.search(r'^[a-zA-Z_][a-zA-Z_0-9-]*$', object_type_name):
            raise ValueError("Invalid value for `object_type_name`, must be a follow pattern or equal to `/^[a-zA-Z_][a-zA-Z_0-9-]*$/`")

        self._object_type_name = object_type_name
