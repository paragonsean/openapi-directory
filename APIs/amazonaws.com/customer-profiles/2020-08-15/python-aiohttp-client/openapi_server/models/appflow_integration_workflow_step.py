# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status import Status
from openapi_server import util


class AppflowIntegrationWorkflowStep(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flow_name: str=None, status: Status=None, execution_message: str=None, records_processed: int=None, batch_records_start_time: str=None, batch_records_end_time: str=None, created_at: datetime=None, last_updated_at: datetime=None):
        """AppflowIntegrationWorkflowStep - a model defined in OpenAPI

        :param flow_name: The flow_name of this AppflowIntegrationWorkflowStep.
        :param status: The status of this AppflowIntegrationWorkflowStep.
        :param execution_message: The execution_message of this AppflowIntegrationWorkflowStep.
        :param records_processed: The records_processed of this AppflowIntegrationWorkflowStep.
        :param batch_records_start_time: The batch_records_start_time of this AppflowIntegrationWorkflowStep.
        :param batch_records_end_time: The batch_records_end_time of this AppflowIntegrationWorkflowStep.
        :param created_at: The created_at of this AppflowIntegrationWorkflowStep.
        :param last_updated_at: The last_updated_at of this AppflowIntegrationWorkflowStep.
        """
        self.openapi_types = {
            'flow_name': str,
            'status': Status,
            'execution_message': str,
            'records_processed': int,
            'batch_records_start_time': str,
            'batch_records_end_time': str,
            'created_at': datetime,
            'last_updated_at': datetime
        }

        self.attribute_map = {
            'flow_name': 'FlowName',
            'status': 'Status',
            'execution_message': 'ExecutionMessage',
            'records_processed': 'RecordsProcessed',
            'batch_records_start_time': 'BatchRecordsStartTime',
            'batch_records_end_time': 'BatchRecordsEndTime',
            'created_at': 'CreatedAt',
            'last_updated_at': 'LastUpdatedAt'
        }

        self._flow_name = flow_name
        self._status = status
        self._execution_message = execution_message
        self._records_processed = records_processed
        self._batch_records_start_time = batch_records_start_time
        self._batch_records_end_time = batch_records_end_time
        self._created_at = created_at
        self._last_updated_at = last_updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppflowIntegrationWorkflowStep':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppflowIntegrationWorkflowStep of this AppflowIntegrationWorkflowStep.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flow_name(self):
        """Gets the flow_name of this AppflowIntegrationWorkflowStep.


        :return: The flow_name of this AppflowIntegrationWorkflowStep.
        :rtype: str
        """
        return self._flow_name

    @flow_name.setter
    def flow_name(self, flow_name):
        """Sets the flow_name of this AppflowIntegrationWorkflowStep.


        :param flow_name: The flow_name of this AppflowIntegrationWorkflowStep.
        :type flow_name: str
        """
        if flow_name is None:
            raise ValueError("Invalid value for `flow_name`, must not be `None`")

        self._flow_name = flow_name

    @property
    def status(self):
        """Gets the status of this AppflowIntegrationWorkflowStep.


        :return: The status of this AppflowIntegrationWorkflowStep.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AppflowIntegrationWorkflowStep.


        :param status: The status of this AppflowIntegrationWorkflowStep.
        :type status: Status
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def execution_message(self):
        """Gets the execution_message of this AppflowIntegrationWorkflowStep.


        :return: The execution_message of this AppflowIntegrationWorkflowStep.
        :rtype: str
        """
        return self._execution_message

    @execution_message.setter
    def execution_message(self, execution_message):
        """Sets the execution_message of this AppflowIntegrationWorkflowStep.


        :param execution_message: The execution_message of this AppflowIntegrationWorkflowStep.
        :type execution_message: str
        """
        if execution_message is None:
            raise ValueError("Invalid value for `execution_message`, must not be `None`")

        self._execution_message = execution_message

    @property
    def records_processed(self):
        """Gets the records_processed of this AppflowIntegrationWorkflowStep.


        :return: The records_processed of this AppflowIntegrationWorkflowStep.
        :rtype: int
        """
        return self._records_processed

    @records_processed.setter
    def records_processed(self, records_processed):
        """Sets the records_processed of this AppflowIntegrationWorkflowStep.


        :param records_processed: The records_processed of this AppflowIntegrationWorkflowStep.
        :type records_processed: int
        """
        if records_processed is None:
            raise ValueError("Invalid value for `records_processed`, must not be `None`")

        self._records_processed = records_processed

    @property
    def batch_records_start_time(self):
        """Gets the batch_records_start_time of this AppflowIntegrationWorkflowStep.


        :return: The batch_records_start_time of this AppflowIntegrationWorkflowStep.
        :rtype: str
        """
        return self._batch_records_start_time

    @batch_records_start_time.setter
    def batch_records_start_time(self, batch_records_start_time):
        """Sets the batch_records_start_time of this AppflowIntegrationWorkflowStep.


        :param batch_records_start_time: The batch_records_start_time of this AppflowIntegrationWorkflowStep.
        :type batch_records_start_time: str
        """
        if batch_records_start_time is None:
            raise ValueError("Invalid value for `batch_records_start_time`, must not be `None`")

        self._batch_records_start_time = batch_records_start_time

    @property
    def batch_records_end_time(self):
        """Gets the batch_records_end_time of this AppflowIntegrationWorkflowStep.


        :return: The batch_records_end_time of this AppflowIntegrationWorkflowStep.
        :rtype: str
        """
        return self._batch_records_end_time

    @batch_records_end_time.setter
    def batch_records_end_time(self, batch_records_end_time):
        """Sets the batch_records_end_time of this AppflowIntegrationWorkflowStep.


        :param batch_records_end_time: The batch_records_end_time of this AppflowIntegrationWorkflowStep.
        :type batch_records_end_time: str
        """
        if batch_records_end_time is None:
            raise ValueError("Invalid value for `batch_records_end_time`, must not be `None`")

        self._batch_records_end_time = batch_records_end_time

    @property
    def created_at(self):
        """Gets the created_at of this AppflowIntegrationWorkflowStep.


        :return: The created_at of this AppflowIntegrationWorkflowStep.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AppflowIntegrationWorkflowStep.


        :param created_at: The created_at of this AppflowIntegrationWorkflowStep.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def last_updated_at(self):
        """Gets the last_updated_at of this AppflowIntegrationWorkflowStep.


        :return: The last_updated_at of this AppflowIntegrationWorkflowStep.
        :rtype: datetime
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """Sets the last_updated_at of this AppflowIntegrationWorkflowStep.


        :param last_updated_at: The last_updated_at of this AppflowIntegrationWorkflowStep.
        :type last_updated_at: datetime
        """
        if last_updated_at is None:
            raise ValueError("Invalid value for `last_updated_at`, must not be `None`")

        self._last_updated_at = last_updated_at
