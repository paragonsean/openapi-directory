# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_calculated_attribute_definition_request_conditions import UpdateCalculatedAttributeDefinitionRequestConditions
import re
from openapi_server import util


class UpdateCalculatedAttributeDefinitionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, description: str=None, conditions: UpdateCalculatedAttributeDefinitionRequestConditions=None):
        """UpdateCalculatedAttributeDefinitionRequest - a model defined in OpenAPI

        :param display_name: The display_name of this UpdateCalculatedAttributeDefinitionRequest.
        :param description: The description of this UpdateCalculatedAttributeDefinitionRequest.
        :param conditions: The conditions of this UpdateCalculatedAttributeDefinitionRequest.
        """
        self.openapi_types = {
            'display_name': str,
            'description': str,
            'conditions': UpdateCalculatedAttributeDefinitionRequestConditions
        }

        self.attribute_map = {
            'display_name': 'DisplayName',
            'description': 'Description',
            'conditions': 'Conditions'
        }

        self._display_name = display_name
        self._description = description
        self._conditions = conditions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateCalculatedAttributeDefinitionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateCalculatedAttributeDefinition_request of this UpdateCalculatedAttributeDefinitionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this UpdateCalculatedAttributeDefinitionRequest.

        The display name of the calculated attribute.

        :return: The display_name of this UpdateCalculatedAttributeDefinitionRequest.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UpdateCalculatedAttributeDefinitionRequest.

        The display name of the calculated attribute.

        :param display_name: The display_name of this UpdateCalculatedAttributeDefinitionRequest.
        :type display_name: str
        """
        if display_name is not None and len(display_name) > 255:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `255`")
        if display_name is not None and len(display_name) < 1:
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `1`")
        if display_name is not None and not re.search(r'^[a-zA-Z_][a-zA-Z_0-9-\s]*$', display_name):
            raise ValueError("Invalid value for `display_name`, must be a follow pattern or equal to `/^[a-zA-Z_][a-zA-Z_0-9-\s]*$/`")

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this UpdateCalculatedAttributeDefinitionRequest.

        The description of the calculated attribute.

        :return: The description of this UpdateCalculatedAttributeDefinitionRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateCalculatedAttributeDefinitionRequest.

        The description of the calculated attribute.

        :param description: The description of this UpdateCalculatedAttributeDefinitionRequest.
        :type description: str
        """
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def conditions(self):
        """Gets the conditions of this UpdateCalculatedAttributeDefinitionRequest.


        :return: The conditions of this UpdateCalculatedAttributeDefinitionRequest.
        :rtype: UpdateCalculatedAttributeDefinitionRequestConditions
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this UpdateCalculatedAttributeDefinitionRequest.


        :param conditions: The conditions of this UpdateCalculatedAttributeDefinitionRequest.
        :type conditions: UpdateCalculatedAttributeDefinitionRequestConditions
        """

        self._conditions = conditions
