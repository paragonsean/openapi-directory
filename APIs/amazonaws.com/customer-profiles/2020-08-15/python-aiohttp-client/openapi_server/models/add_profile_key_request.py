# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AddProfileKeyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, profile_id: str=None, key_name: str=None, values: List[str]=None):
        """AddProfileKeyRequest - a model defined in OpenAPI

        :param profile_id: The profile_id of this AddProfileKeyRequest.
        :param key_name: The key_name of this AddProfileKeyRequest.
        :param values: The values of this AddProfileKeyRequest.
        """
        self.openapi_types = {
            'profile_id': str,
            'key_name': str,
            'values': List[str]
        }

        self.attribute_map = {
            'profile_id': 'ProfileId',
            'key_name': 'KeyName',
            'values': 'Values'
        }

        self._profile_id = profile_id
        self._key_name = key_name
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddProfileKeyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddProfileKey_request of this AddProfileKeyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def profile_id(self):
        """Gets the profile_id of this AddProfileKeyRequest.

        The unique identifier of a customer profile.

        :return: The profile_id of this AddProfileKeyRequest.
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this AddProfileKeyRequest.

        The unique identifier of a customer profile.

        :param profile_id: The profile_id of this AddProfileKeyRequest.
        :type profile_id: str
        """
        if profile_id is None:
            raise ValueError("Invalid value for `profile_id`, must not be `None`")
        if profile_id is not None and not re.search(r'[a-f0-9]{32}', profile_id):
            raise ValueError("Invalid value for `profile_id`, must be a follow pattern or equal to `/[a-f0-9]{32}/`")

        self._profile_id = profile_id

    @property
    def key_name(self):
        """Gets the key_name of this AddProfileKeyRequest.

        A searchable identifier of a customer profile. The predefined keys you can use include: _account, _profileId, _assetId, _caseId, _orderId, _fullName, _phone, _email, _ctrContactId, _marketoLeadId, _salesforceAccountId, _salesforceContactId, _salesforceAssetId, _zendeskUserId, _zendeskExternalId, _zendeskTicketId, _serviceNowSystemId, _serviceNowIncidentId, _segmentUserId, _shopifyCustomerId, _shopifyOrderId.

        :return: The key_name of this AddProfileKeyRequest.
        :rtype: str
        """
        return self._key_name

    @key_name.setter
    def key_name(self, key_name):
        """Sets the key_name of this AddProfileKeyRequest.

        A searchable identifier of a customer profile. The predefined keys you can use include: _account, _profileId, _assetId, _caseId, _orderId, _fullName, _phone, _email, _ctrContactId, _marketoLeadId, _salesforceAccountId, _salesforceContactId, _salesforceAssetId, _zendeskUserId, _zendeskExternalId, _zendeskTicketId, _serviceNowSystemId, _serviceNowIncidentId, _segmentUserId, _shopifyCustomerId, _shopifyOrderId.

        :param key_name: The key_name of this AddProfileKeyRequest.
        :type key_name: str
        """
        if key_name is None:
            raise ValueError("Invalid value for `key_name`, must not be `None`")
        if key_name is not None and len(key_name) > 64:
            raise ValueError("Invalid value for `key_name`, length must be less than or equal to `64`")
        if key_name is not None and len(key_name) < 1:
            raise ValueError("Invalid value for `key_name`, length must be greater than or equal to `1`")
        if key_name is not None and not re.search(r'^[a-zA-Z0-9_-]+$', key_name):
            raise ValueError("Invalid value for `key_name`, must be a follow pattern or equal to `/^[a-zA-Z0-9_-]+$/`")

        self._key_name = key_name

    @property
    def values(self):
        """Gets the values of this AddProfileKeyRequest.

        A list of key values.

        :return: The values of this AddProfileKeyRequest.
        :rtype: List[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this AddProfileKeyRequest.

        A list of key values.

        :param values: The values of this AddProfileKeyRequest.
        :type values: List[str]
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")

        self._values = values
