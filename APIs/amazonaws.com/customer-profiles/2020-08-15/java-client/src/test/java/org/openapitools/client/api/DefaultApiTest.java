/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddProfileKeyRequest;
import org.openapitools.client.model.AddProfileKeyResponse;
import org.openapitools.client.model.CreateCalculatedAttributeDefinitionRequest;
import org.openapitools.client.model.CreateCalculatedAttributeDefinitionResponse;
import org.openapitools.client.model.CreateDomainRequest;
import org.openapitools.client.model.CreateDomainResponse;
import org.openapitools.client.model.CreateEventStreamRequest;
import org.openapitools.client.model.CreateEventStreamResponse;
import org.openapitools.client.model.CreateIntegrationWorkflowRequest;
import org.openapitools.client.model.CreateIntegrationWorkflowResponse;
import org.openapitools.client.model.CreateProfileRequest;
import org.openapitools.client.model.CreateProfileResponse;
import org.openapitools.client.model.DeleteDomainResponse;
import org.openapitools.client.model.DeleteIntegrationRequest;
import org.openapitools.client.model.DeleteIntegrationResponse;
import org.openapitools.client.model.DeleteProfileKeyRequest;
import org.openapitools.client.model.DeleteProfileKeyResponse;
import org.openapitools.client.model.DeleteProfileObjectRequest;
import org.openapitools.client.model.DeleteProfileObjectResponse;
import org.openapitools.client.model.DeleteProfileObjectTypeResponse;
import org.openapitools.client.model.DeleteProfileRequest;
import org.openapitools.client.model.DeleteProfileResponse;
import org.openapitools.client.model.GetAutoMergingPreviewRequest;
import org.openapitools.client.model.GetAutoMergingPreviewResponse;
import org.openapitools.client.model.GetCalculatedAttributeDefinitionResponse;
import org.openapitools.client.model.GetCalculatedAttributeForProfileResponse;
import org.openapitools.client.model.GetDomainResponse;
import org.openapitools.client.model.GetEventStreamResponse;
import org.openapitools.client.model.GetIdentityResolutionJobResponse;
import org.openapitools.client.model.GetIntegrationResponse;
import org.openapitools.client.model.GetMatchesResponse;
import org.openapitools.client.model.GetProfileObjectTypeResponse;
import org.openapitools.client.model.GetProfileObjectTypeTemplateResponse;
import org.openapitools.client.model.GetSimilarProfilesRequest;
import org.openapitools.client.model.GetSimilarProfilesResponse;
import org.openapitools.client.model.GetWorkflowResponse;
import org.openapitools.client.model.GetWorkflowStepsResponse;
import org.openapitools.client.model.ListAccountIntegrationsResponse;
import org.openapitools.client.model.ListCalculatedAttributeDefinitionsResponse;
import org.openapitools.client.model.ListCalculatedAttributesForProfileResponse;
import org.openapitools.client.model.ListDomainsResponse;
import org.openapitools.client.model.ListEventStreamsResponse;
import org.openapitools.client.model.ListIdentityResolutionJobsResponse;
import org.openapitools.client.model.ListIntegrationsResponse;
import org.openapitools.client.model.ListProfileObjectTypeTemplatesResponse;
import org.openapitools.client.model.ListProfileObjectTypesResponse;
import org.openapitools.client.model.ListProfileObjectsRequest;
import org.openapitools.client.model.ListProfileObjectsResponse;
import org.openapitools.client.model.ListRuleBasedMatchesResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListWorkflowsRequest;
import org.openapitools.client.model.ListWorkflowsResponse;
import org.openapitools.client.model.MergeProfilesRequest;
import org.openapitools.client.model.MergeProfilesResponse;
import org.openapitools.client.model.PutIntegrationRequest;
import org.openapitools.client.model.PutIntegrationResponse;
import org.openapitools.client.model.PutProfileObjectRequest;
import org.openapitools.client.model.PutProfileObjectResponse;
import org.openapitools.client.model.PutProfileObjectTypeRequest;
import org.openapitools.client.model.PutProfileObjectTypeResponse;
import org.openapitools.client.model.SearchProfilesRequest;
import org.openapitools.client.model.SearchProfilesResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateCalculatedAttributeDefinitionRequest;
import org.openapitools.client.model.UpdateCalculatedAttributeDefinitionResponse;
import org.openapitools.client.model.UpdateDomainRequest;
import org.openapitools.client.model.UpdateDomainResponse;
import org.openapitools.client.model.UpdateProfileRequest;
import org.openapitools.client.model.UpdateProfileResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Associates a new key value with a specific profile, such as a Contact Record ContactId.&lt;/p&gt; &lt;p&gt;A profile object can have a single unique key and any number of additional keys that can be used to identify the profile that it belongs to.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addProfileKeyTest() throws ApiException {
        String domainName = null;
        AddProfileKeyRequest addProfileKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddProfileKeyResponse response = api.addProfileKey(domainName, addProfileKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new calculated attribute definition. After creation, new object data ingested into Customer Profiles will be included in the calculated attribute, which can be retrieved for a profile using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetCalculatedAttributeForProfile.html\&quot;&gt;GetCalculatedAttributeForProfile&lt;/a&gt; API. Defining a calculated attribute makes it available for all profiles within a domain. Each calculated attribute can only reference one &lt;code&gt;ObjectType&lt;/code&gt; and at most, two fields from that &lt;code&gt;ObjectType&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCalculatedAttributeDefinitionTest() throws ApiException {
        String domainName = null;
        String calculatedAttributeName = null;
        CreateCalculatedAttributeDefinitionRequest createCalculatedAttributeDefinitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateCalculatedAttributeDefinitionResponse response = api.createCalculatedAttributeDefinition(domainName, calculatedAttributeName, createCalculatedAttributeDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a domain, which is a container for all customer data, such as customer profile attributes, object types, profile keys, and encryption keys. You can create multiple domains, and each domain can have multiple third-party integrations.&lt;/p&gt; &lt;p&gt;Each Amazon Connect instance can be associated with only one domain. Multiple Amazon Connect instances can be associated with one domain.&lt;/p&gt; &lt;p&gt;Use this API or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_UpdateDomain.html\&quot;&gt;UpdateDomain&lt;/a&gt; to enable &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html\&quot;&gt;identity resolution&lt;/a&gt;: set &lt;code&gt;Matching&lt;/code&gt; to true.&lt;/p&gt; &lt;p&gt;To prevent cross-service impersonation when you call this API, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/cross-service-confused-deputy-prevention.html\&quot;&gt;Cross-service confused deputy prevention&lt;/a&gt; for sample policies that you should apply. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDomainTest() throws ApiException {
        String domainName = null;
        CreateDomainRequest createDomainRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDomainResponse response = api.createDomain(domainName, createDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an event stream, which is a subscription to real-time events, such as when profiles are created and updated through Amazon Connect Customer Profiles.&lt;/p&gt; &lt;p&gt;Each event stream can be associated with only one Kinesis Data Stream destination in the same region and Amazon Web Services account as the customer profiles domain&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEventStreamTest() throws ApiException {
        String domainName = null;
        String eventStreamName = null;
        CreateEventStreamRequest createEventStreamRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateEventStreamResponse response = api.createEventStream(domainName, eventStreamName, createEventStreamRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Creates an integration workflow. An integration workflow is an async process which ingests historic data and sets up an integration for ongoing updates. The supported Amazon AppFlow sources are Salesforce, ServiceNow, and Marketo. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createIntegrationWorkflowTest() throws ApiException {
        String domainName = null;
        CreateIntegrationWorkflowRequest createIntegrationWorkflowRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateIntegrationWorkflowResponse response = api.createIntegrationWorkflow(domainName, createIntegrationWorkflowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a standard profile.&lt;/p&gt; &lt;p&gt;A standard profile represents the following attributes for a customer profile in a domain.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProfileTest() throws ApiException {
        String domainName = null;
        CreateProfileRequest createProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateProfileResponse response = api.createProfile(domainName, createProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an existing calculated attribute definition. Note that deleting a default calculated attribute is possible, however once deleted, you will be unable to undo that action and will need to recreate it on your own using the CreateCalculatedAttributeDefinition API if you want it back.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCalculatedAttributeDefinitionTest() throws ApiException {
        String domainName = null;
        String calculatedAttributeName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteCalculatedAttributeDefinition(domainName, calculatedAttributeName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a specific domain and all of its customer data, such as customer profile attributes and their related objects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDomainTest() throws ApiException {
        String domainName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteDomainResponse response = api.deleteDomain(domainName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disables and deletes the specified event stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEventStreamTest() throws ApiException {
        String domainName = null;
        String eventStreamName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteEventStream(domainName, eventStreamName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes an integration from a specific domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteIntegrationTest() throws ApiException {
        String domainName = null;
        DeleteIntegrationRequest deleteIntegrationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteIntegrationResponse response = api.deleteIntegration(domainName, deleteIntegrationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the standard customer profile and all data pertaining to the profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProfileTest() throws ApiException {
        String domainName = null;
        DeleteProfileRequest deleteProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteProfileResponse response = api.deleteProfile(domainName, deleteProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes a searchable key from a customer profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProfileKeyTest() throws ApiException {
        String domainName = null;
        DeleteProfileKeyRequest deleteProfileKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteProfileKeyResponse response = api.deleteProfileKey(domainName, deleteProfileKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes an object associated with a profile of a given ProfileObjectType.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProfileObjectTest() throws ApiException {
        String domainName = null;
        DeleteProfileObjectRequest deleteProfileObjectRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteProfileObjectResponse response = api.deleteProfileObject(domainName, deleteProfileObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes a ProfileObjectType from a specific domain as well as removes all the ProfileObjects of that type. It also disables integrations from this specific ProfileObjectType. In addition, it scrubs all of the fields of the standard profile that were populated from this ProfileObjectType.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProfileObjectTypeTest() throws ApiException {
        String domainName = null;
        String objectTypeName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteProfileObjectTypeResponse response = api.deleteProfileObjectType(domainName, objectTypeName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified workflow and all its corresponding resources. This is an async process.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWorkflowTest() throws ApiException {
        String domainName = null;
        String workflowId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteWorkflow(domainName, workflowId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Tests the auto-merging settings of your Identity Resolution Job without merging your data. It randomly selects a sample of matching groups from the existing matching results, and applies the automerging settings that you provided. You can then view the number of profiles in the sample, the number of matches, and the number of profiles identified to be merged. This enables you to evaluate the accuracy of the attributes in your matching list. &lt;/p&gt; &lt;p&gt;You can&#39;t view which profiles are matched and would be merged.&lt;/p&gt; &lt;important&gt; &lt;p&gt;We strongly recommend you use this API to do a dry run of the automerging process before running the Identity Resolution Job. Include &lt;b&gt;at least&lt;/b&gt; two matching attributes. If your matching list includes too few attributes (such as only &lt;code&gt;FirstName&lt;/code&gt; or only &lt;code&gt;LastName&lt;/code&gt;), there may be a large number of matches. This increases the chances of erroneous merges.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAutoMergingPreviewTest() throws ApiException {
        String domainName = null;
        GetAutoMergingPreviewRequest getAutoMergingPreviewRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAutoMergingPreviewResponse response = api.getAutoMergingPreview(domainName, getAutoMergingPreviewRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Provides more information on a calculated attribute definition for Customer Profiles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCalculatedAttributeDefinitionTest() throws ApiException {
        String domainName = null;
        String calculatedAttributeName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetCalculatedAttributeDefinitionResponse response = api.getCalculatedAttributeDefinition(domainName, calculatedAttributeName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieve a calculated attribute for a customer profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCalculatedAttributeForProfileTest() throws ApiException {
        String domainName = null;
        String profileId = null;
        String calculatedAttributeName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetCalculatedAttributeForProfileResponse response = api.getCalculatedAttributeForProfile(domainName, profileId, calculatedAttributeName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about a specific domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDomainTest() throws ApiException {
        String domainName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDomainResponse response = api.getDomain(domainName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about the specified event stream in a specific domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventStreamTest() throws ApiException {
        String domainName = null;
        String eventStreamName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetEventStreamResponse response = api.getEventStream(domainName, eventStreamName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about an Identity Resolution Job in a specific domain. &lt;/p&gt; &lt;p&gt;Identity Resolution Jobs are set up using the Amazon Connect admin console. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/use-identity-resolution.html\&quot;&gt;Use Identity Resolution to consolidate similar profiles&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIdentityResolutionJobTest() throws ApiException {
        String domainName = null;
        String jobId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetIdentityResolutionJobResponse response = api.getIdentityResolutionJob(domainName, jobId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns an integration for a domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIntegrationTest() throws ApiException {
        String domainName = null;
        DeleteIntegrationRequest deleteIntegrationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetIntegrationResponse response = api.getIntegration(domainName, deleteIntegrationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Before calling this API, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_CreateDomain.html\&quot;&gt;CreateDomain&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_UpdateDomain.html\&quot;&gt;UpdateDomain&lt;/a&gt; to enable identity resolution: set &lt;code&gt;Matching&lt;/code&gt; to true.&lt;/p&gt; &lt;p&gt;GetMatches returns potentially matching profiles, based on the results of the latest run of a machine learning process. &lt;/p&gt; &lt;important&gt; &lt;p&gt;The process of matching duplicate profiles. If &lt;code&gt;Matching&lt;/code&gt; &#x3D; &lt;code&gt;true&lt;/code&gt;, Amazon Connect Customer Profiles starts a weekly batch process called Identity Resolution Job. If you do not specify a date and time for Identity Resolution Job to run, by default it runs every Saturday at 12AM UTC to detect duplicate profiles in your domains. &lt;/p&gt; &lt;p&gt;After the Identity Resolution Job completes, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html\&quot;&gt;GetMatches&lt;/a&gt; API to return and review the results. Or, if you have configured &lt;code&gt;ExportingConfig&lt;/code&gt; in the &lt;code&gt;MatchingRequest&lt;/code&gt;, you can download the results from S3.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Amazon Connect uses the following profile attributes to identify matches:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;PhoneNumber&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;HomePhoneNumber&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;BusinessPhoneNumber&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;MobilePhoneNumber&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;EmailAddress&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;PersonalEmailAddress&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;BusinessEmailAddress&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;FullName&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For example, two or more profiles—with spelling mistakes such as &lt;b&gt;John Doe&lt;/b&gt; and &lt;b&gt;Jhn Doe&lt;/b&gt;, or different casing email addresses such as &lt;b&gt;JOHN_DOE@ANYCOMPANY.COM&lt;/b&gt; and &lt;b&gt;johndoe@anycompany.com&lt;/b&gt;, or different phone number formats such as &lt;b&gt;555-010-0000&lt;/b&gt; and &lt;b&gt;+1-555-010-0000&lt;/b&gt;—can be detected as belonging to the same customer &lt;b&gt;John Doe&lt;/b&gt; and merged into a unified profile.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMatchesTest() throws ApiException {
        String domainName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        GetMatchesResponse response = api.getMatches(domainName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Returns the object types for a specific domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProfileObjectTypeTest() throws ApiException {
        String domainName = null;
        String objectTypeName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetProfileObjectTypeResponse response = api.getProfileObjectType(domainName, objectTypeName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the template information for a specific object type.&lt;/p&gt; &lt;p&gt;A template is a predefined ProfileObjectType, such as “Salesforce-Account” or “Salesforce-Contact.” When a user sends a ProfileObject, using the PutProfileObject API, with an ObjectTypeName that matches one of the TemplateIds, it uses the mappings from the template.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProfileObjectTypeTemplateTest() throws ApiException {
        String templateId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetProfileObjectTypeTemplateResponse response = api.getProfileObjectTypeTemplate(templateId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a set of profiles that belong to the same matching group using the &lt;code&gt;matchId&lt;/code&gt; or &lt;code&gt;profileId&lt;/code&gt;. You can also specify the type of matching that you want for finding similar profiles using either &lt;code&gt;RULE_BASED_MATCHING&lt;/code&gt; or &lt;code&gt;ML_BASED_MATCHING&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSimilarProfilesTest() throws ApiException {
        String domainName = null;
        GetSimilarProfilesRequest getSimilarProfilesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        GetSimilarProfilesResponse response = api.getSimilarProfiles(domainName, getSimilarProfilesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Get details of specified workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkflowTest() throws ApiException {
        String domainName = null;
        String workflowId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetWorkflowResponse response = api.getWorkflow(domainName, workflowId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get granular list of steps in workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkflowStepsTest() throws ApiException {
        String domainName = null;
        String workflowId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        GetWorkflowStepsResponse response = api.getWorkflowSteps(domainName, workflowId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Lists all of the integrations associated to a specific URI in the AWS account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAccountIntegrationsTest() throws ApiException {
        DeleteIntegrationRequest deleteIntegrationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        Boolean includeHidden = null;
        ListAccountIntegrationsResponse response = api.listAccountIntegrations(deleteIntegrationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, includeHidden);
        // TODO: test validations
    }

    /**
     * Lists calculated attribute definitions for Customer Profiles
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCalculatedAttributeDefinitionsTest() throws ApiException {
        String domainName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListCalculatedAttributeDefinitionsResponse response = api.listCalculatedAttributeDefinitions(domainName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Retrieve a list of calculated attributes for a customer profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCalculatedAttributesForProfileTest() throws ApiException {
        String domainName = null;
        String profileId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListCalculatedAttributesForProfileResponse response = api.listCalculatedAttributesForProfile(domainName, profileId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Returns a list of all the domains for an AWS account that have been created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDomainsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListDomainsResponse response = api.listDomains(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Returns a list of all the event streams in a specific domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEventStreamsTest() throws ApiException {
        String domainName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListEventStreamsResponse response = api.listEventStreams(domainName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Lists all of the Identity Resolution Jobs in your domain. The response sorts the list by &lt;code&gt;JobStartTime&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listIdentityResolutionJobsTest() throws ApiException {
        String domainName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListIdentityResolutionJobsResponse response = api.listIdentityResolutionJobs(domainName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Lists all of the integrations in your domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listIntegrationsTest() throws ApiException {
        String domainName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        Boolean includeHidden = null;
        ListIntegrationsResponse response = api.listIntegrations(domainName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, includeHidden);
        // TODO: test validations
    }

    /**
     * Lists all of the template information for object types.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProfileObjectTypeTemplatesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListProfileObjectTypeTemplatesResponse response = api.listProfileObjectTypeTemplates(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Lists all of the templates available within the service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProfileObjectTypesTest() throws ApiException {
        String domainName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListProfileObjectTypesResponse response = api.listProfileObjectTypes(domainName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Returns a list of objects associated with a profile of a given ProfileObjectType.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProfileObjectsTest() throws ApiException {
        String domainName = null;
        ListProfileObjectsRequest listProfileObjectsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListProfileObjectsResponse response = api.listProfileObjects(domainName, listProfileObjectsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Returns a set of &lt;code&gt;MatchIds&lt;/code&gt; that belong to the given domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRuleBasedMatchesTest() throws ApiException {
        String domainName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListRuleBasedMatchesResponse response = api.listRuleBasedMatches(domainName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Displays the tags associated with an Amazon Connect Customer Profiles resource. In Connect Customer Profiles, domains, profile object types, and integrations can be tagged.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Query to list all workflows.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWorkflowsTest() throws ApiException {
        String domainName = null;
        ListWorkflowsRequest listWorkflowsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListWorkflowsResponse response = api.listWorkflows(domainName, listWorkflowsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Runs an AWS Lambda job that does the following:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;All the profileKeys in the &lt;code&gt;ProfileToBeMerged&lt;/code&gt; will be moved to the main profile.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;All the objects in the &lt;code&gt;ProfileToBeMerged&lt;/code&gt; will be moved to the main profile.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;All the &lt;code&gt;ProfileToBeMerged&lt;/code&gt; will be deleted at the end.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;All the profileKeys in the &lt;code&gt;ProfileIdsToBeMerged&lt;/code&gt; will be moved to the main profile.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Standard fields are merged as follows:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Fields are always \&quot;union\&quot;-ed if there are no conflicts in standard fields or attributeKeys.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When there are conflicting fields:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;If no &lt;code&gt;SourceProfileIds&lt;/code&gt; entry is specified, the main Profile value is always taken. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If a &lt;code&gt;SourceProfileIds&lt;/code&gt; entry is specified, the specified profileId is always taken, even if it is a NULL value.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;You can use MergeProfiles together with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html\&quot;&gt;GetMatches&lt;/a&gt;, which returns potentially matching profiles, or use it with the results of another matching system. After profiles have been merged, they cannot be separated (unmerged).&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mergeProfilesTest() throws ApiException {
        String domainName = null;
        MergeProfilesRequest mergeProfilesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        MergeProfilesResponse response = api.mergeProfiles(domainName, mergeProfilesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds an integration between the service and a third-party service, which includes Amazon AppFlow and Amazon Connect.&lt;/p&gt; &lt;p&gt;An integration can belong to only one domain.&lt;/p&gt; &lt;p&gt;To add or remove tags on an existing Integration, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_TagResource.html\&quot;&gt; TagResource &lt;/a&gt;/&lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_UntagResource.html\&quot;&gt; UntagResource&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putIntegrationTest() throws ApiException {
        String domainName = null;
        PutIntegrationRequest putIntegrationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutIntegrationResponse response = api.putIntegration(domainName, putIntegrationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds additional objects to customer profiles of a given ObjectType.&lt;/p&gt; &lt;p&gt;When adding a specific profile object, like a Contact Record, an inferred profile can get created if it is not mapped to an existing profile. The resulting profile will only have a phone number populated in the standard ProfileObject. Any additional Contact Records with the same phone number will be mapped to the same inferred profile.&lt;/p&gt; &lt;p&gt;When a ProfileObject is created and if a ProfileObjectType already exists for the ProfileObject, it will provide data to a standard profile depending on the ProfileObjectType definition.&lt;/p&gt; &lt;p&gt;PutProfileObject needs an ObjectType, which can be created using PutProfileObjectType.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putProfileObjectTest() throws ApiException {
        String domainName = null;
        PutProfileObjectRequest putProfileObjectRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutProfileObjectResponse response = api.putProfileObject(domainName, putProfileObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Defines a ProfileObjectType.&lt;/p&gt; &lt;p&gt;To add or remove tags on an existing ObjectType, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_TagResource.html\&quot;&gt; TagResource&lt;/a&gt;/&lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_UntagResource.html\&quot;&gt;UntagResource&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putProfileObjectTypeTest() throws ApiException {
        String domainName = null;
        String objectTypeName = null;
        PutProfileObjectTypeRequest putProfileObjectTypeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutProfileObjectTypeResponse response = api.putProfileObjectType(domainName, objectTypeName, putProfileObjectTypeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Searches for profiles within a specific domain using one or more predefined search keys (e.g., _fullName, _phone, _email, _account, etc.) and/or custom-defined search keys. A search key is a data type pair that consists of a &lt;code&gt;KeyName&lt;/code&gt; and &lt;code&gt;Values&lt;/code&gt; list.&lt;/p&gt; &lt;p&gt;This operation supports searching for profiles with a minimum of 1 key-value(s) pair and up to 5 key-value(s) pairs using either &lt;code&gt;AND&lt;/code&gt; or &lt;code&gt;OR&lt;/code&gt; logic.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchProfilesTest() throws ApiException {
        String domainName = null;
        SearchProfilesRequest searchProfilesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        SearchProfilesResponse response = api.searchProfiles(domainName, searchProfilesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Assigns one or more tags (key-value pairs) to the specified Amazon Connect Customer Profiles resource. Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values. In Connect Customer Profiles, domains, profile object types, and integrations can be tagged.&lt;/p&gt; &lt;p&gt;Tags don&#39;t have any semantic meaning to AWS and are interpreted strictly as strings of characters.&lt;/p&gt; &lt;p&gt;You can use the TagResource action with a resource that already has tags. If you specify a new tag key, this tag is appended to the list of tags associated with the resource. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces the previous value for that tag.&lt;/p&gt; &lt;p&gt;You can associate as many as 50 tags with a resource.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes one or more tags from the specified Amazon Connect Customer Profiles resource. In Connect Customer Profiles, domains, profile object types, and integrations can be tagged.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing calculated attribute definition. When updating the Conditions, note that increasing the date range of a calculated attribute will not trigger inclusion of historical data greater than the current date range.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCalculatedAttributeDefinitionTest() throws ApiException {
        String domainName = null;
        String calculatedAttributeName = null;
        UpdateCalculatedAttributeDefinitionRequest updateCalculatedAttributeDefinitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateCalculatedAttributeDefinitionResponse response = api.updateCalculatedAttributeDefinition(domainName, calculatedAttributeName, updateCalculatedAttributeDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the properties of a domain, including creating or selecting a dead letter queue or an encryption key.&lt;/p&gt; &lt;p&gt;After a domain is created, the name can’t be changed.&lt;/p&gt; &lt;p&gt;Use this API or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_CreateDomain.html\&quot;&gt;CreateDomain&lt;/a&gt; to enable &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html\&quot;&gt;identity resolution&lt;/a&gt;: set &lt;code&gt;Matching&lt;/code&gt; to true.&lt;/p&gt; &lt;p&gt;To prevent cross-service impersonation when you call this API, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/cross-service-confused-deputy-prevention.html\&quot;&gt;Cross-service confused deputy prevention&lt;/a&gt; for sample policies that you should apply. &lt;/p&gt; &lt;p&gt;To add or remove tags on an existing Domain, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_TagResource.html\&quot;&gt;TagResource&lt;/a&gt;/&lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_UntagResource.html\&quot;&gt;UntagResource&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDomainTest() throws ApiException {
        String domainName = null;
        UpdateDomainRequest updateDomainRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateDomainResponse response = api.updateDomain(domainName, updateDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the properties of a profile. The ProfileId is required for updating a customer profile.&lt;/p&gt; &lt;p&gt;When calling the UpdateProfile API, specifying an empty string value means that any existing value will be removed. Not specifying a string value means that any value already there will be kept.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProfileTest() throws ApiException {
        String domainName = null;
        UpdateProfileRequest updateProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateProfileResponse response = api.updateProfile(domainName, updateProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
