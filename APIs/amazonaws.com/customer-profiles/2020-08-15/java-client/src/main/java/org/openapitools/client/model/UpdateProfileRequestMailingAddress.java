/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateProfileRequestMailingAddress
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateProfileRequestMailingAddress {
  public static final String SERIALIZED_NAME_ADDRESS1 = "Address1";
  @SerializedName(SERIALIZED_NAME_ADDRESS1)
  private String address1;

  public static final String SERIALIZED_NAME_ADDRESS2 = "Address2";
  @SerializedName(SERIALIZED_NAME_ADDRESS2)
  private String address2;

  public static final String SERIALIZED_NAME_ADDRESS3 = "Address3";
  @SerializedName(SERIALIZED_NAME_ADDRESS3)
  private String address3;

  public static final String SERIALIZED_NAME_ADDRESS4 = "Address4";
  @SerializedName(SERIALIZED_NAME_ADDRESS4)
  private String address4;

  public static final String SERIALIZED_NAME_CITY = "City";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COUNTY = "County";
  @SerializedName(SERIALIZED_NAME_COUNTY)
  private String county;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_PROVINCE = "Province";
  @SerializedName(SERIALIZED_NAME_PROVINCE)
  private String province;

  public static final String SERIALIZED_NAME_COUNTRY = "Country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "PostalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public UpdateProfileRequestMailingAddress() {
  }

  public UpdateProfileRequestMailingAddress address1(String address1) {
    this.address1 = address1;
    return this;
  }

  /**
   * Get address1
   * @return address1
   */
  @javax.annotation.Nullable
  public String getAddress1() {
    return address1;
  }

  public void setAddress1(String address1) {
    this.address1 = address1;
  }


  public UpdateProfileRequestMailingAddress address2(String address2) {
    this.address2 = address2;
    return this;
  }

  /**
   * Get address2
   * @return address2
   */
  @javax.annotation.Nullable
  public String getAddress2() {
    return address2;
  }

  public void setAddress2(String address2) {
    this.address2 = address2;
  }


  public UpdateProfileRequestMailingAddress address3(String address3) {
    this.address3 = address3;
    return this;
  }

  /**
   * Get address3
   * @return address3
   */
  @javax.annotation.Nullable
  public String getAddress3() {
    return address3;
  }

  public void setAddress3(String address3) {
    this.address3 = address3;
  }


  public UpdateProfileRequestMailingAddress address4(String address4) {
    this.address4 = address4;
    return this;
  }

  /**
   * Get address4
   * @return address4
   */
  @javax.annotation.Nullable
  public String getAddress4() {
    return address4;
  }

  public void setAddress4(String address4) {
    this.address4 = address4;
  }


  public UpdateProfileRequestMailingAddress city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public UpdateProfileRequestMailingAddress county(String county) {
    this.county = county;
    return this;
  }

  /**
   * Get county
   * @return county
   */
  @javax.annotation.Nullable
  public String getCounty() {
    return county;
  }

  public void setCounty(String county) {
    this.county = county;
  }


  public UpdateProfileRequestMailingAddress state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public UpdateProfileRequestMailingAddress province(String province) {
    this.province = province;
    return this;
  }

  /**
   * Get province
   * @return province
   */
  @javax.annotation.Nullable
  public String getProvince() {
    return province;
  }

  public void setProvince(String province) {
    this.province = province;
  }


  public UpdateProfileRequestMailingAddress country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public UpdateProfileRequestMailingAddress postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Get postalCode
   * @return postalCode
   */
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateProfileRequestMailingAddress updateProfileRequestMailingAddress = (UpdateProfileRequestMailingAddress) o;
    return Objects.equals(this.address1, updateProfileRequestMailingAddress.address1) &&
        Objects.equals(this.address2, updateProfileRequestMailingAddress.address2) &&
        Objects.equals(this.address3, updateProfileRequestMailingAddress.address3) &&
        Objects.equals(this.address4, updateProfileRequestMailingAddress.address4) &&
        Objects.equals(this.city, updateProfileRequestMailingAddress.city) &&
        Objects.equals(this.county, updateProfileRequestMailingAddress.county) &&
        Objects.equals(this.state, updateProfileRequestMailingAddress.state) &&
        Objects.equals(this.province, updateProfileRequestMailingAddress.province) &&
        Objects.equals(this.country, updateProfileRequestMailingAddress.country) &&
        Objects.equals(this.postalCode, updateProfileRequestMailingAddress.postalCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address1, address2, address3, address4, city, county, state, province, country, postalCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateProfileRequestMailingAddress {\n");
    sb.append("    address1: ").append(toIndentedString(address1)).append("\n");
    sb.append("    address2: ").append(toIndentedString(address2)).append("\n");
    sb.append("    address3: ").append(toIndentedString(address3)).append("\n");
    sb.append("    address4: ").append(toIndentedString(address4)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    county: ").append(toIndentedString(county)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    province: ").append(toIndentedString(province)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Address1");
    openapiFields.add("Address2");
    openapiFields.add("Address3");
    openapiFields.add("Address4");
    openapiFields.add("City");
    openapiFields.add("County");
    openapiFields.add("State");
    openapiFields.add("Province");
    openapiFields.add("Country");
    openapiFields.add("PostalCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateProfileRequestMailingAddress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateProfileRequestMailingAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateProfileRequestMailingAddress is not found in the empty JSON string", UpdateProfileRequestMailingAddress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateProfileRequestMailingAddress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateProfileRequestMailingAddress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Address1`
      if (jsonObj.get("Address1") != null && !jsonObj.get("Address1").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Address1"));
      }
      // validate the optional field `Address2`
      if (jsonObj.get("Address2") != null && !jsonObj.get("Address2").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Address2"));
      }
      // validate the optional field `Address3`
      if (jsonObj.get("Address3") != null && !jsonObj.get("Address3").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Address3"));
      }
      // validate the optional field `Address4`
      if (jsonObj.get("Address4") != null && !jsonObj.get("Address4").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Address4"));
      }
      // validate the optional field `City`
      if (jsonObj.get("City") != null && !jsonObj.get("City").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("City"));
      }
      // validate the optional field `County`
      if (jsonObj.get("County") != null && !jsonObj.get("County").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("County"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("State"));
      }
      // validate the optional field `Province`
      if (jsonObj.get("Province") != null && !jsonObj.get("Province").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Province"));
      }
      // validate the optional field `Country`
      if (jsonObj.get("Country") != null && !jsonObj.get("Country").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Country"));
      }
      // validate the optional field `PostalCode`
      if (jsonObj.get("PostalCode") != null && !jsonObj.get("PostalCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PostalCode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateProfileRequestMailingAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateProfileRequestMailingAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateProfileRequestMailingAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateProfileRequestMailingAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateProfileRequestMailingAddress>() {
           @Override
           public void write(JsonWriter out, UpdateProfileRequestMailingAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateProfileRequestMailingAddress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateProfileRequestMailingAddress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateProfileRequestMailingAddress
   * @throws IOException if the JSON string is invalid with respect to UpdateProfileRequestMailingAddress
   */
  public static UpdateProfileRequestMailingAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateProfileRequestMailingAddress.class);
  }

  /**
   * Convert an instance of UpdateProfileRequestMailingAddress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

