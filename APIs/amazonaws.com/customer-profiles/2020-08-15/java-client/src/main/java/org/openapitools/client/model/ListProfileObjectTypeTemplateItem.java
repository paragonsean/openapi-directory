/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A ProfileObjectTypeTemplate in a list of ProfileObjectTypeTemplates.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListProfileObjectTypeTemplateItem {
  public static final String SERIALIZED_NAME_TEMPLATE_ID = "TemplateId";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  private String templateId;

  public static final String SERIALIZED_NAME_SOURCE_NAME = "SourceName";
  @SerializedName(SERIALIZED_NAME_SOURCE_NAME)
  private String sourceName;

  public static final String SERIALIZED_NAME_SOURCE_OBJECT = "SourceObject";
  @SerializedName(SERIALIZED_NAME_SOURCE_OBJECT)
  private String sourceObject;

  public ListProfileObjectTypeTemplateItem() {
  }

  public ListProfileObjectTypeTemplateItem templateId(String templateId) {
    this.templateId = templateId;
    return this;
  }

  /**
   * Get templateId
   * @return templateId
   */
  @javax.annotation.Nullable
  public String getTemplateId() {
    return templateId;
  }

  public void setTemplateId(String templateId) {
    this.templateId = templateId;
  }


  public ListProfileObjectTypeTemplateItem sourceName(String sourceName) {
    this.sourceName = sourceName;
    return this;
  }

  /**
   * Get sourceName
   * @return sourceName
   */
  @javax.annotation.Nullable
  public String getSourceName() {
    return sourceName;
  }

  public void setSourceName(String sourceName) {
    this.sourceName = sourceName;
  }


  public ListProfileObjectTypeTemplateItem sourceObject(String sourceObject) {
    this.sourceObject = sourceObject;
    return this;
  }

  /**
   * Get sourceObject
   * @return sourceObject
   */
  @javax.annotation.Nullable
  public String getSourceObject() {
    return sourceObject;
  }

  public void setSourceObject(String sourceObject) {
    this.sourceObject = sourceObject;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListProfileObjectTypeTemplateItem listProfileObjectTypeTemplateItem = (ListProfileObjectTypeTemplateItem) o;
    return Objects.equals(this.templateId, listProfileObjectTypeTemplateItem.templateId) &&
        Objects.equals(this.sourceName, listProfileObjectTypeTemplateItem.sourceName) &&
        Objects.equals(this.sourceObject, listProfileObjectTypeTemplateItem.sourceObject);
  }

  @Override
  public int hashCode() {
    return Objects.hash(templateId, sourceName, sourceObject);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListProfileObjectTypeTemplateItem {\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    sourceName: ").append(toIndentedString(sourceName)).append("\n");
    sb.append("    sourceObject: ").append(toIndentedString(sourceObject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TemplateId");
    openapiFields.add("SourceName");
    openapiFields.add("SourceObject");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListProfileObjectTypeTemplateItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListProfileObjectTypeTemplateItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListProfileObjectTypeTemplateItem is not found in the empty JSON string", ListProfileObjectTypeTemplateItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListProfileObjectTypeTemplateItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListProfileObjectTypeTemplateItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TemplateId`
      if (jsonObj.get("TemplateId") != null && !jsonObj.get("TemplateId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TemplateId"));
      }
      // validate the optional field `SourceName`
      if (jsonObj.get("SourceName") != null && !jsonObj.get("SourceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceName"));
      }
      // validate the optional field `SourceObject`
      if (jsonObj.get("SourceObject") != null && !jsonObj.get("SourceObject").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceObject"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListProfileObjectTypeTemplateItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListProfileObjectTypeTemplateItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListProfileObjectTypeTemplateItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListProfileObjectTypeTemplateItem.class));

       return (TypeAdapter<T>) new TypeAdapter<ListProfileObjectTypeTemplateItem>() {
           @Override
           public void write(JsonWriter out, ListProfileObjectTypeTemplateItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListProfileObjectTypeTemplateItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListProfileObjectTypeTemplateItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListProfileObjectTypeTemplateItem
   * @throws IOException if the JSON string is invalid with respect to ListProfileObjectTypeTemplateItem
   */
  public static ListProfileObjectTypeTemplateItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListProfileObjectTypeTemplateItem.class);
  }

  /**
   * Convert an instance of ListProfileObjectTypeTemplateItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

