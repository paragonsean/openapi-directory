/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CreateCalculatedAttributeDefinitionRequestAttributeDetails;
import org.openapitools.client.model.UpdateCalculatedAttributeDefinitionRequestConditions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateCalculatedAttributeDefinitionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateCalculatedAttributeDefinitionRequest {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "DisplayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ATTRIBUTE_DETAILS = "AttributeDetails";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_DETAILS)
  private CreateCalculatedAttributeDefinitionRequestAttributeDetails attributeDetails;

  public static final String SERIALIZED_NAME_CONDITIONS = "Conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private UpdateCalculatedAttributeDefinitionRequestConditions conditions;

  /**
   * The aggregation operation to perform for the calculated attribute.
   */
  @JsonAdapter(StatisticEnum.Adapter.class)
  public enum StatisticEnum {
    FIRST_OCCURRENCE("FIRST_OCCURRENCE"),
    
    LAST_OCCURRENCE("LAST_OCCURRENCE"),
    
    COUNT("COUNT"),
    
    SUM("SUM"),
    
    MINIMUM("MINIMUM"),
    
    MAXIMUM("MAXIMUM"),
    
    AVERAGE("AVERAGE"),
    
    MAX_OCCURRENCE("MAX_OCCURRENCE");

    private String value;

    StatisticEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatisticEnum fromValue(String value) {
      for (StatisticEnum b : StatisticEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatisticEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatisticEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatisticEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatisticEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatisticEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATISTIC = "Statistic";
  @SerializedName(SERIALIZED_NAME_STATISTIC)
  private StatisticEnum statistic;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateCalculatedAttributeDefinitionRequest() {
  }

  public CreateCalculatedAttributeDefinitionRequest displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name of the calculated attribute.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public CreateCalculatedAttributeDefinitionRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the calculated attribute.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateCalculatedAttributeDefinitionRequest attributeDetails(CreateCalculatedAttributeDefinitionRequestAttributeDetails attributeDetails) {
    this.attributeDetails = attributeDetails;
    return this;
  }

  /**
   * Get attributeDetails
   * @return attributeDetails
   */
  @javax.annotation.Nonnull
  public CreateCalculatedAttributeDefinitionRequestAttributeDetails getAttributeDetails() {
    return attributeDetails;
  }

  public void setAttributeDetails(CreateCalculatedAttributeDefinitionRequestAttributeDetails attributeDetails) {
    this.attributeDetails = attributeDetails;
  }


  public CreateCalculatedAttributeDefinitionRequest conditions(UpdateCalculatedAttributeDefinitionRequestConditions conditions) {
    this.conditions = conditions;
    return this;
  }

  /**
   * Get conditions
   * @return conditions
   */
  @javax.annotation.Nullable
  public UpdateCalculatedAttributeDefinitionRequestConditions getConditions() {
    return conditions;
  }

  public void setConditions(UpdateCalculatedAttributeDefinitionRequestConditions conditions) {
    this.conditions = conditions;
  }


  public CreateCalculatedAttributeDefinitionRequest statistic(StatisticEnum statistic) {
    this.statistic = statistic;
    return this;
  }

  /**
   * The aggregation operation to perform for the calculated attribute.
   * @return statistic
   */
  @javax.annotation.Nonnull
  public StatisticEnum getStatistic() {
    return statistic;
  }

  public void setStatistic(StatisticEnum statistic) {
    this.statistic = statistic;
  }


  public CreateCalculatedAttributeDefinitionRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateCalculatedAttributeDefinitionRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The tags used to organize, track, or control access for this resource.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateCalculatedAttributeDefinitionRequest createCalculatedAttributeDefinitionRequest = (CreateCalculatedAttributeDefinitionRequest) o;
    return Objects.equals(this.displayName, createCalculatedAttributeDefinitionRequest.displayName) &&
        Objects.equals(this.description, createCalculatedAttributeDefinitionRequest.description) &&
        Objects.equals(this.attributeDetails, createCalculatedAttributeDefinitionRequest.attributeDetails) &&
        Objects.equals(this.conditions, createCalculatedAttributeDefinitionRequest.conditions) &&
        Objects.equals(this.statistic, createCalculatedAttributeDefinitionRequest.statistic) &&
        Objects.equals(this.tags, createCalculatedAttributeDefinitionRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, description, attributeDetails, conditions, statistic, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateCalculatedAttributeDefinitionRequest {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    attributeDetails: ").append(toIndentedString(attributeDetails)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    statistic: ").append(toIndentedString(statistic)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DisplayName");
    openapiFields.add("Description");
    openapiFields.add("AttributeDetails");
    openapiFields.add("Conditions");
    openapiFields.add("Statistic");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AttributeDetails");
    openapiRequiredFields.add("Statistic");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateCalculatedAttributeDefinitionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateCalculatedAttributeDefinitionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateCalculatedAttributeDefinitionRequest is not found in the empty JSON string", CreateCalculatedAttributeDefinitionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateCalculatedAttributeDefinitionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateCalculatedAttributeDefinitionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateCalculatedAttributeDefinitionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DisplayName") != null && !jsonObj.get("DisplayName").isJsonNull()) && !jsonObj.get("DisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DisplayName").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      // validate the required field `AttributeDetails`
      CreateCalculatedAttributeDefinitionRequestAttributeDetails.validateJsonElement(jsonObj.get("AttributeDetails"));
      // validate the optional field `Conditions`
      if (jsonObj.get("Conditions") != null && !jsonObj.get("Conditions").isJsonNull()) {
        UpdateCalculatedAttributeDefinitionRequestConditions.validateJsonElement(jsonObj.get("Conditions"));
      }
      if (!jsonObj.get("Statistic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Statistic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Statistic").toString()));
      }
      // validate the required field `Statistic`
      StatisticEnum.validateJsonElement(jsonObj.get("Statistic"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateCalculatedAttributeDefinitionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateCalculatedAttributeDefinitionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateCalculatedAttributeDefinitionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateCalculatedAttributeDefinitionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateCalculatedAttributeDefinitionRequest>() {
           @Override
           public void write(JsonWriter out, CreateCalculatedAttributeDefinitionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateCalculatedAttributeDefinitionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateCalculatedAttributeDefinitionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateCalculatedAttributeDefinitionRequest
   * @throws IOException if the JSON string is invalid with respect to CreateCalculatedAttributeDefinitionRequest
   */
  public static CreateCalculatedAttributeDefinitionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateCalculatedAttributeDefinitionRequest.class);
  }

  /**
   * Convert an instance of CreateCalculatedAttributeDefinitionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

