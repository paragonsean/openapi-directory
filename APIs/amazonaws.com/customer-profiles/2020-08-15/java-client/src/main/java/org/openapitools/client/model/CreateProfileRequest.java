/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CreateProfileRequestAddress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateProfileRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateProfileRequest {
  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "AccountNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_ADDITIONAL_INFORMATION = "AdditionalInformation";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFORMATION)
  private String additionalInformation;

  /**
   * The type of profile used to describe the customer.
   */
  @JsonAdapter(PartyTypeEnum.Adapter.class)
  public enum PartyTypeEnum {
    INDIVIDUAL("INDIVIDUAL"),
    
    BUSINESS("BUSINESS"),
    
    OTHER("OTHER");

    private String value;

    PartyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PartyTypeEnum fromValue(String value) {
      for (PartyTypeEnum b : PartyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PartyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PartyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PartyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PartyTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PartyTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PARTY_TYPE = "PartyType";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PARTY_TYPE)
  private PartyTypeEnum partyType;

  public static final String SERIALIZED_NAME_BUSINESS_NAME = "BusinessName";
  @SerializedName(SERIALIZED_NAME_BUSINESS_NAME)
  private String businessName;

  public static final String SERIALIZED_NAME_FIRST_NAME = "FirstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "MiddleName";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  public static final String SERIALIZED_NAME_LAST_NAME = "LastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_BIRTH_DATE = "BirthDate";
  @SerializedName(SERIALIZED_NAME_BIRTH_DATE)
  private String birthDate;

  /**
   * The gender with which the customer identifies. 
   */
  @JsonAdapter(GenderEnum.Adapter.class)
  public enum GenderEnum {
    MALE("MALE"),
    
    FEMALE("FEMALE"),
    
    UNSPECIFIED("UNSPECIFIED");

    private String value;

    GenderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GenderEnum fromValue(String value) {
      for (GenderEnum b : GenderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GenderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GenderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GenderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GenderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GenderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GENDER = "Gender";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_GENDER)
  private GenderEnum gender;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "PhoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_MOBILE_PHONE_NUMBER = "MobilePhoneNumber";
  @SerializedName(SERIALIZED_NAME_MOBILE_PHONE_NUMBER)
  private String mobilePhoneNumber;

  public static final String SERIALIZED_NAME_HOME_PHONE_NUMBER = "HomePhoneNumber";
  @SerializedName(SERIALIZED_NAME_HOME_PHONE_NUMBER)
  private String homePhoneNumber;

  public static final String SERIALIZED_NAME_BUSINESS_PHONE_NUMBER = "BusinessPhoneNumber";
  @SerializedName(SERIALIZED_NAME_BUSINESS_PHONE_NUMBER)
  private String businessPhoneNumber;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "EmailAddress";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  private String emailAddress;

  public static final String SERIALIZED_NAME_PERSONAL_EMAIL_ADDRESS = "PersonalEmailAddress";
  @SerializedName(SERIALIZED_NAME_PERSONAL_EMAIL_ADDRESS)
  private String personalEmailAddress;

  public static final String SERIALIZED_NAME_BUSINESS_EMAIL_ADDRESS = "BusinessEmailAddress";
  @SerializedName(SERIALIZED_NAME_BUSINESS_EMAIL_ADDRESS)
  private String businessEmailAddress;

  public static final String SERIALIZED_NAME_ADDRESS = "Address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private CreateProfileRequestAddress address;

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESS = "ShippingAddress";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESS)
  private CreateProfileRequestAddress shippingAddress;

  public static final String SERIALIZED_NAME_MAILING_ADDRESS = "MailingAddress";
  @SerializedName(SERIALIZED_NAME_MAILING_ADDRESS)
  private CreateProfileRequestAddress mailingAddress;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS = "BillingAddress";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS)
  private CreateProfileRequestAddress billingAddress;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "Attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map<String, String> attributes = new HashMap<>();

  public static final String SERIALIZED_NAME_PARTY_TYPE_STRING = "PartyTypeString";
  @SerializedName(SERIALIZED_NAME_PARTY_TYPE_STRING)
  private String partyTypeString;

  public static final String SERIALIZED_NAME_GENDER_STRING = "GenderString";
  @SerializedName(SERIALIZED_NAME_GENDER_STRING)
  private String genderString;

  public CreateProfileRequest() {
  }

  public CreateProfileRequest accountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

  /**
   * A unique account number that you have given to the customer.
   * @return accountNumber
   */
  @javax.annotation.Nullable
  public String getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }


  public CreateProfileRequest additionalInformation(String additionalInformation) {
    this.additionalInformation = additionalInformation;
    return this;
  }

  /**
   * Any additional information relevant to the customerâ€™s profile.
   * @return additionalInformation
   */
  @javax.annotation.Nullable
  public String getAdditionalInformation() {
    return additionalInformation;
  }

  public void setAdditionalInformation(String additionalInformation) {
    this.additionalInformation = additionalInformation;
  }


  @Deprecated
  public CreateProfileRequest partyType(PartyTypeEnum partyType) {
    this.partyType = partyType;
    return this;
  }

  /**
   * The type of profile used to describe the customer.
   * @return partyType
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public PartyTypeEnum getPartyType() {
    return partyType;
  }

  @Deprecated
  public void setPartyType(PartyTypeEnum partyType) {
    this.partyType = partyType;
  }


  public CreateProfileRequest businessName(String businessName) {
    this.businessName = businessName;
    return this;
  }

  /**
   * The name of the customerâ€™s business.
   * @return businessName
   */
  @javax.annotation.Nullable
  public String getBusinessName() {
    return businessName;
  }

  public void setBusinessName(String businessName) {
    this.businessName = businessName;
  }


  public CreateProfileRequest firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * The customerâ€™s first name.
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public CreateProfileRequest middleName(String middleName) {
    this.middleName = middleName;
    return this;
  }

  /**
   * The customerâ€™s middle name.
   * @return middleName
   */
  @javax.annotation.Nullable
  public String getMiddleName() {
    return middleName;
  }

  public void setMiddleName(String middleName) {
    this.middleName = middleName;
  }


  public CreateProfileRequest lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * The customerâ€™s last name.
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public CreateProfileRequest birthDate(String birthDate) {
    this.birthDate = birthDate;
    return this;
  }

  /**
   * The customerâ€™s birth date. 
   * @return birthDate
   */
  @javax.annotation.Nullable
  public String getBirthDate() {
    return birthDate;
  }

  public void setBirthDate(String birthDate) {
    this.birthDate = birthDate;
  }


  @Deprecated
  public CreateProfileRequest gender(GenderEnum gender) {
    this.gender = gender;
    return this;
  }

  /**
   * The gender with which the customer identifies. 
   * @return gender
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public GenderEnum getGender() {
    return gender;
  }

  @Deprecated
  public void setGender(GenderEnum gender) {
    this.gender = gender;
  }


  public CreateProfileRequest phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * The customerâ€™s phone number, which has not been specified as a mobile, home, or business number. 
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public CreateProfileRequest mobilePhoneNumber(String mobilePhoneNumber) {
    this.mobilePhoneNumber = mobilePhoneNumber;
    return this;
  }

  /**
   * The customerâ€™s mobile phone number.
   * @return mobilePhoneNumber
   */
  @javax.annotation.Nullable
  public String getMobilePhoneNumber() {
    return mobilePhoneNumber;
  }

  public void setMobilePhoneNumber(String mobilePhoneNumber) {
    this.mobilePhoneNumber = mobilePhoneNumber;
  }


  public CreateProfileRequest homePhoneNumber(String homePhoneNumber) {
    this.homePhoneNumber = homePhoneNumber;
    return this;
  }

  /**
   * The customerâ€™s home phone number.
   * @return homePhoneNumber
   */
  @javax.annotation.Nullable
  public String getHomePhoneNumber() {
    return homePhoneNumber;
  }

  public void setHomePhoneNumber(String homePhoneNumber) {
    this.homePhoneNumber = homePhoneNumber;
  }


  public CreateProfileRequest businessPhoneNumber(String businessPhoneNumber) {
    this.businessPhoneNumber = businessPhoneNumber;
    return this;
  }

  /**
   * The customerâ€™s business phone number.
   * @return businessPhoneNumber
   */
  @javax.annotation.Nullable
  public String getBusinessPhoneNumber() {
    return businessPhoneNumber;
  }

  public void setBusinessPhoneNumber(String businessPhoneNumber) {
    this.businessPhoneNumber = businessPhoneNumber;
  }


  public CreateProfileRequest emailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

  /**
   * The customerâ€™s email address, which has not been specified as a personal or business address. 
   * @return emailAddress
   */
  @javax.annotation.Nullable
  public String getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
  }


  public CreateProfileRequest personalEmailAddress(String personalEmailAddress) {
    this.personalEmailAddress = personalEmailAddress;
    return this;
  }

  /**
   * The customerâ€™s personal email address.
   * @return personalEmailAddress
   */
  @javax.annotation.Nullable
  public String getPersonalEmailAddress() {
    return personalEmailAddress;
  }

  public void setPersonalEmailAddress(String personalEmailAddress) {
    this.personalEmailAddress = personalEmailAddress;
  }


  public CreateProfileRequest businessEmailAddress(String businessEmailAddress) {
    this.businessEmailAddress = businessEmailAddress;
    return this;
  }

  /**
   * The customerâ€™s business email address.
   * @return businessEmailAddress
   */
  @javax.annotation.Nullable
  public String getBusinessEmailAddress() {
    return businessEmailAddress;
  }

  public void setBusinessEmailAddress(String businessEmailAddress) {
    this.businessEmailAddress = businessEmailAddress;
  }


  public CreateProfileRequest address(CreateProfileRequestAddress address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public CreateProfileRequestAddress getAddress() {
    return address;
  }

  public void setAddress(CreateProfileRequestAddress address) {
    this.address = address;
  }


  public CreateProfileRequest shippingAddress(CreateProfileRequestAddress shippingAddress) {
    this.shippingAddress = shippingAddress;
    return this;
  }

  /**
   * Get shippingAddress
   * @return shippingAddress
   */
  @javax.annotation.Nullable
  public CreateProfileRequestAddress getShippingAddress() {
    return shippingAddress;
  }

  public void setShippingAddress(CreateProfileRequestAddress shippingAddress) {
    this.shippingAddress = shippingAddress;
  }


  public CreateProfileRequest mailingAddress(CreateProfileRequestAddress mailingAddress) {
    this.mailingAddress = mailingAddress;
    return this;
  }

  /**
   * Get mailingAddress
   * @return mailingAddress
   */
  @javax.annotation.Nullable
  public CreateProfileRequestAddress getMailingAddress() {
    return mailingAddress;
  }

  public void setMailingAddress(CreateProfileRequestAddress mailingAddress) {
    this.mailingAddress = mailingAddress;
  }


  public CreateProfileRequest billingAddress(CreateProfileRequestAddress billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

  /**
   * Get billingAddress
   * @return billingAddress
   */
  @javax.annotation.Nullable
  public CreateProfileRequestAddress getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(CreateProfileRequestAddress billingAddress) {
    this.billingAddress = billingAddress;
  }


  public CreateProfileRequest attributes(Map<String, String> attributes) {
    this.attributes = attributes;
    return this;
  }

  public CreateProfileRequest putAttributesItem(String key, String attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

  /**
   * A key value pair of attributes of a customer profile.
   * @return attributes
   */
  @javax.annotation.Nullable
  public Map<String, String> getAttributes() {
    return attributes;
  }

  public void setAttributes(Map<String, String> attributes) {
    this.attributes = attributes;
  }


  public CreateProfileRequest partyTypeString(String partyTypeString) {
    this.partyTypeString = partyTypeString;
    return this;
  }

  /**
   * An alternative to &lt;code&gt;PartyType&lt;/code&gt; which accepts any string as input.
   * @return partyTypeString
   */
  @javax.annotation.Nullable
  public String getPartyTypeString() {
    return partyTypeString;
  }

  public void setPartyTypeString(String partyTypeString) {
    this.partyTypeString = partyTypeString;
  }


  public CreateProfileRequest genderString(String genderString) {
    this.genderString = genderString;
    return this;
  }

  /**
   * An alternative to &lt;code&gt;Gender&lt;/code&gt; which accepts any string as input.
   * @return genderString
   */
  @javax.annotation.Nullable
  public String getGenderString() {
    return genderString;
  }

  public void setGenderString(String genderString) {
    this.genderString = genderString;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateProfileRequest createProfileRequest = (CreateProfileRequest) o;
    return Objects.equals(this.accountNumber, createProfileRequest.accountNumber) &&
        Objects.equals(this.additionalInformation, createProfileRequest.additionalInformation) &&
        Objects.equals(this.partyType, createProfileRequest.partyType) &&
        Objects.equals(this.businessName, createProfileRequest.businessName) &&
        Objects.equals(this.firstName, createProfileRequest.firstName) &&
        Objects.equals(this.middleName, createProfileRequest.middleName) &&
        Objects.equals(this.lastName, createProfileRequest.lastName) &&
        Objects.equals(this.birthDate, createProfileRequest.birthDate) &&
        Objects.equals(this.gender, createProfileRequest.gender) &&
        Objects.equals(this.phoneNumber, createProfileRequest.phoneNumber) &&
        Objects.equals(this.mobilePhoneNumber, createProfileRequest.mobilePhoneNumber) &&
        Objects.equals(this.homePhoneNumber, createProfileRequest.homePhoneNumber) &&
        Objects.equals(this.businessPhoneNumber, createProfileRequest.businessPhoneNumber) &&
        Objects.equals(this.emailAddress, createProfileRequest.emailAddress) &&
        Objects.equals(this.personalEmailAddress, createProfileRequest.personalEmailAddress) &&
        Objects.equals(this.businessEmailAddress, createProfileRequest.businessEmailAddress) &&
        Objects.equals(this.address, createProfileRequest.address) &&
        Objects.equals(this.shippingAddress, createProfileRequest.shippingAddress) &&
        Objects.equals(this.mailingAddress, createProfileRequest.mailingAddress) &&
        Objects.equals(this.billingAddress, createProfileRequest.billingAddress) &&
        Objects.equals(this.attributes, createProfileRequest.attributes) &&
        Objects.equals(this.partyTypeString, createProfileRequest.partyTypeString) &&
        Objects.equals(this.genderString, createProfileRequest.genderString);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountNumber, additionalInformation, partyType, businessName, firstName, middleName, lastName, birthDate, gender, phoneNumber, mobilePhoneNumber, homePhoneNumber, businessPhoneNumber, emailAddress, personalEmailAddress, businessEmailAddress, address, shippingAddress, mailingAddress, billingAddress, attributes, partyTypeString, genderString);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateProfileRequest {\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    additionalInformation: ").append(toIndentedString(additionalInformation)).append("\n");
    sb.append("    partyType: ").append(toIndentedString(partyType)).append("\n");
    sb.append("    businessName: ").append(toIndentedString(businessName)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    mobilePhoneNumber: ").append(toIndentedString(mobilePhoneNumber)).append("\n");
    sb.append("    homePhoneNumber: ").append(toIndentedString(homePhoneNumber)).append("\n");
    sb.append("    businessPhoneNumber: ").append(toIndentedString(businessPhoneNumber)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    personalEmailAddress: ").append(toIndentedString(personalEmailAddress)).append("\n");
    sb.append("    businessEmailAddress: ").append(toIndentedString(businessEmailAddress)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("    mailingAddress: ").append(toIndentedString(mailingAddress)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    partyTypeString: ").append(toIndentedString(partyTypeString)).append("\n");
    sb.append("    genderString: ").append(toIndentedString(genderString)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountNumber");
    openapiFields.add("AdditionalInformation");
    openapiFields.add("PartyType");
    openapiFields.add("BusinessName");
    openapiFields.add("FirstName");
    openapiFields.add("MiddleName");
    openapiFields.add("LastName");
    openapiFields.add("BirthDate");
    openapiFields.add("Gender");
    openapiFields.add("PhoneNumber");
    openapiFields.add("MobilePhoneNumber");
    openapiFields.add("HomePhoneNumber");
    openapiFields.add("BusinessPhoneNumber");
    openapiFields.add("EmailAddress");
    openapiFields.add("PersonalEmailAddress");
    openapiFields.add("BusinessEmailAddress");
    openapiFields.add("Address");
    openapiFields.add("ShippingAddress");
    openapiFields.add("MailingAddress");
    openapiFields.add("BillingAddress");
    openapiFields.add("Attributes");
    openapiFields.add("PartyTypeString");
    openapiFields.add("GenderString");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateProfileRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateProfileRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateProfileRequest is not found in the empty JSON string", CreateProfileRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateProfileRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateProfileRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AccountNumber") != null && !jsonObj.get("AccountNumber").isJsonNull()) && !jsonObj.get("AccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountNumber").toString()));
      }
      if ((jsonObj.get("AdditionalInformation") != null && !jsonObj.get("AdditionalInformation").isJsonNull()) && !jsonObj.get("AdditionalInformation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AdditionalInformation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AdditionalInformation").toString()));
      }
      if ((jsonObj.get("PartyType") != null && !jsonObj.get("PartyType").isJsonNull()) && !jsonObj.get("PartyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PartyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PartyType").toString()));
      }
      // validate the optional field `PartyType`
      if (jsonObj.get("PartyType") != null && !jsonObj.get("PartyType").isJsonNull()) {
        PartyTypeEnum.validateJsonElement(jsonObj.get("PartyType"));
      }
      if ((jsonObj.get("BusinessName") != null && !jsonObj.get("BusinessName").isJsonNull()) && !jsonObj.get("BusinessName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BusinessName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BusinessName").toString()));
      }
      if ((jsonObj.get("FirstName") != null && !jsonObj.get("FirstName").isJsonNull()) && !jsonObj.get("FirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstName").toString()));
      }
      if ((jsonObj.get("MiddleName") != null && !jsonObj.get("MiddleName").isJsonNull()) && !jsonObj.get("MiddleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MiddleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MiddleName").toString()));
      }
      if ((jsonObj.get("LastName") != null && !jsonObj.get("LastName").isJsonNull()) && !jsonObj.get("LastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastName").toString()));
      }
      if ((jsonObj.get("BirthDate") != null && !jsonObj.get("BirthDate").isJsonNull()) && !jsonObj.get("BirthDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BirthDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BirthDate").toString()));
      }
      if ((jsonObj.get("Gender") != null && !jsonObj.get("Gender").isJsonNull()) && !jsonObj.get("Gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Gender").toString()));
      }
      // validate the optional field `Gender`
      if (jsonObj.get("Gender") != null && !jsonObj.get("Gender").isJsonNull()) {
        GenderEnum.validateJsonElement(jsonObj.get("Gender"));
      }
      if ((jsonObj.get("PhoneNumber") != null && !jsonObj.get("PhoneNumber").isJsonNull()) && !jsonObj.get("PhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PhoneNumber").toString()));
      }
      if ((jsonObj.get("MobilePhoneNumber") != null && !jsonObj.get("MobilePhoneNumber").isJsonNull()) && !jsonObj.get("MobilePhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MobilePhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MobilePhoneNumber").toString()));
      }
      if ((jsonObj.get("HomePhoneNumber") != null && !jsonObj.get("HomePhoneNumber").isJsonNull()) && !jsonObj.get("HomePhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HomePhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HomePhoneNumber").toString()));
      }
      if ((jsonObj.get("BusinessPhoneNumber") != null && !jsonObj.get("BusinessPhoneNumber").isJsonNull()) && !jsonObj.get("BusinessPhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BusinessPhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BusinessPhoneNumber").toString()));
      }
      if ((jsonObj.get("EmailAddress") != null && !jsonObj.get("EmailAddress").isJsonNull()) && !jsonObj.get("EmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EmailAddress").toString()));
      }
      if ((jsonObj.get("PersonalEmailAddress") != null && !jsonObj.get("PersonalEmailAddress").isJsonNull()) && !jsonObj.get("PersonalEmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PersonalEmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PersonalEmailAddress").toString()));
      }
      if ((jsonObj.get("BusinessEmailAddress") != null && !jsonObj.get("BusinessEmailAddress").isJsonNull()) && !jsonObj.get("BusinessEmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BusinessEmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BusinessEmailAddress").toString()));
      }
      // validate the optional field `Address`
      if (jsonObj.get("Address") != null && !jsonObj.get("Address").isJsonNull()) {
        CreateProfileRequestAddress.validateJsonElement(jsonObj.get("Address"));
      }
      // validate the optional field `ShippingAddress`
      if (jsonObj.get("ShippingAddress") != null && !jsonObj.get("ShippingAddress").isJsonNull()) {
        CreateProfileRequestAddress.validateJsonElement(jsonObj.get("ShippingAddress"));
      }
      // validate the optional field `MailingAddress`
      if (jsonObj.get("MailingAddress") != null && !jsonObj.get("MailingAddress").isJsonNull()) {
        CreateProfileRequestAddress.validateJsonElement(jsonObj.get("MailingAddress"));
      }
      // validate the optional field `BillingAddress`
      if (jsonObj.get("BillingAddress") != null && !jsonObj.get("BillingAddress").isJsonNull()) {
        CreateProfileRequestAddress.validateJsonElement(jsonObj.get("BillingAddress"));
      }
      if ((jsonObj.get("PartyTypeString") != null && !jsonObj.get("PartyTypeString").isJsonNull()) && !jsonObj.get("PartyTypeString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PartyTypeString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PartyTypeString").toString()));
      }
      if ((jsonObj.get("GenderString") != null && !jsonObj.get("GenderString").isJsonNull()) && !jsonObj.get("GenderString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GenderString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GenderString").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateProfileRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateProfileRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateProfileRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateProfileRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateProfileRequest>() {
           @Override
           public void write(JsonWriter out, CreateProfileRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateProfileRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateProfileRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateProfileRequest
   * @throws IOException if the JSON string is invalid with respect to CreateProfileRequest
   */
  public static CreateProfileRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateProfileRequest.class);
  }

  /**
   * Convert an instance of CreateProfileRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

