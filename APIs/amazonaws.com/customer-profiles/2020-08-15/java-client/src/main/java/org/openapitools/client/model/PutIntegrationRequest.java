/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.PutIntegrationRequestFlowDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutIntegrationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutIntegrationRequest {
  public static final String SERIALIZED_NAME_URI = "Uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_OBJECT_TYPE_NAME = "ObjectTypeName";
  @SerializedName(SERIALIZED_NAME_OBJECT_TYPE_NAME)
  private String objectTypeName;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_FLOW_DEFINITION = "FlowDefinition";
  @SerializedName(SERIALIZED_NAME_FLOW_DEFINITION)
  private PutIntegrationRequestFlowDefinition flowDefinition;

  public static final String SERIALIZED_NAME_OBJECT_TYPE_NAMES = "ObjectTypeNames";
  @SerializedName(SERIALIZED_NAME_OBJECT_TYPE_NAMES)
  private Map<String, String> objectTypeNames = new HashMap<>();

  public PutIntegrationRequest() {
  }

  public PutIntegrationRequest uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * The URI of the S3 bucket or any other type of data source.
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }


  public PutIntegrationRequest objectTypeName(String objectTypeName) {
    this.objectTypeName = objectTypeName;
    return this;
  }

  /**
   * The name of the profile object type.
   * @return objectTypeName
   */
  @javax.annotation.Nullable
  public String getObjectTypeName() {
    return objectTypeName;
  }

  public void setObjectTypeName(String objectTypeName) {
    this.objectTypeName = objectTypeName;
  }


  public PutIntegrationRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public PutIntegrationRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The tags used to organize, track, or control access for this resource.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public PutIntegrationRequest flowDefinition(PutIntegrationRequestFlowDefinition flowDefinition) {
    this.flowDefinition = flowDefinition;
    return this;
  }

  /**
   * Get flowDefinition
   * @return flowDefinition
   */
  @javax.annotation.Nullable
  public PutIntegrationRequestFlowDefinition getFlowDefinition() {
    return flowDefinition;
  }

  public void setFlowDefinition(PutIntegrationRequestFlowDefinition flowDefinition) {
    this.flowDefinition = flowDefinition;
  }


  public PutIntegrationRequest objectTypeNames(Map<String, String> objectTypeNames) {
    this.objectTypeNames = objectTypeNames;
    return this;
  }

  public PutIntegrationRequest putObjectTypeNamesItem(String key, String objectTypeNamesItem) {
    if (this.objectTypeNames == null) {
      this.objectTypeNames = new HashMap<>();
    }
    this.objectTypeNames.put(key, objectTypeNamesItem);
    return this;
  }

  /**
   * A map in which each key is an event type from an external application such as Segment or Shopify, and each value is an &lt;code&gt;ObjectTypeName&lt;/code&gt; (template) used to ingest the event. It supports the following event types: &lt;code&gt;SegmentIdentify&lt;/code&gt;, &lt;code&gt;ShopifyCreateCustomers&lt;/code&gt;, &lt;code&gt;ShopifyUpdateCustomers&lt;/code&gt;, &lt;code&gt;ShopifyCreateDraftOrders&lt;/code&gt;, &lt;code&gt;ShopifyUpdateDraftOrders&lt;/code&gt;, &lt;code&gt;ShopifyCreateOrders&lt;/code&gt;, and &lt;code&gt;ShopifyUpdatedOrders&lt;/code&gt;.
   * @return objectTypeNames
   */
  @javax.annotation.Nullable
  public Map<String, String> getObjectTypeNames() {
    return objectTypeNames;
  }

  public void setObjectTypeNames(Map<String, String> objectTypeNames) {
    this.objectTypeNames = objectTypeNames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutIntegrationRequest putIntegrationRequest = (PutIntegrationRequest) o;
    return Objects.equals(this.uri, putIntegrationRequest.uri) &&
        Objects.equals(this.objectTypeName, putIntegrationRequest.objectTypeName) &&
        Objects.equals(this.tags, putIntegrationRequest.tags) &&
        Objects.equals(this.flowDefinition, putIntegrationRequest.flowDefinition) &&
        Objects.equals(this.objectTypeNames, putIntegrationRequest.objectTypeNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uri, objectTypeName, tags, flowDefinition, objectTypeNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutIntegrationRequest {\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    objectTypeName: ").append(toIndentedString(objectTypeName)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    flowDefinition: ").append(toIndentedString(flowDefinition)).append("\n");
    sb.append("    objectTypeNames: ").append(toIndentedString(objectTypeNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Uri");
    openapiFields.add("ObjectTypeName");
    openapiFields.add("Tags");
    openapiFields.add("FlowDefinition");
    openapiFields.add("ObjectTypeNames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutIntegrationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutIntegrationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutIntegrationRequest is not found in the empty JSON string", PutIntegrationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutIntegrationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutIntegrationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Uri") != null && !jsonObj.get("Uri").isJsonNull()) && !jsonObj.get("Uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Uri").toString()));
      }
      if ((jsonObj.get("ObjectTypeName") != null && !jsonObj.get("ObjectTypeName").isJsonNull()) && !jsonObj.get("ObjectTypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ObjectTypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ObjectTypeName").toString()));
      }
      // validate the optional field `FlowDefinition`
      if (jsonObj.get("FlowDefinition") != null && !jsonObj.get("FlowDefinition").isJsonNull()) {
        PutIntegrationRequestFlowDefinition.validateJsonElement(jsonObj.get("FlowDefinition"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutIntegrationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutIntegrationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutIntegrationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutIntegrationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutIntegrationRequest>() {
           @Override
           public void write(JsonWriter out, PutIntegrationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutIntegrationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutIntegrationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutIntegrationRequest
   * @throws IOException if the JSON string is invalid with respect to PutIntegrationRequest
   */
  public static PutIntegrationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutIntegrationRequest.class);
  }

  /**
   * Convert an instance of PutIntegrationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

