/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdditionalSearchKey;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SearchProfilesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchProfilesRequest {
  public static final String SERIALIZED_NAME_KEY_NAME = "KeyName";
  @SerializedName(SERIALIZED_NAME_KEY_NAME)
  private String keyName;

  public static final String SERIALIZED_NAME_VALUES = "Values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<String> values = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDITIONAL_SEARCH_KEYS = "AdditionalSearchKeys";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_SEARCH_KEYS)
  private List<AdditionalSearchKey> additionalSearchKeys = new ArrayList<>();

  /**
   * &lt;p&gt;Relationship between all specified search keys that will be used to search for profiles. This includes the required &lt;code&gt;KeyName&lt;/code&gt; and &lt;code&gt;Values&lt;/code&gt; parameters as well as any key-value(s) pairs specified in the &lt;code&gt;AdditionalSearchKeys&lt;/code&gt; list.&lt;/p&gt; &lt;p&gt;This parameter influences which profiles will be returned in the response in the following manner:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AND&lt;/code&gt; - The response only includes profiles that match all of the search keys.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;OR&lt;/code&gt; - The response includes profiles that match at least one of the search keys.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The &lt;code&gt;OR&lt;/code&gt; relationship is the default behavior if this parameter is not included in the request.&lt;/p&gt;
   */
  @JsonAdapter(LogicalOperatorEnum.Adapter.class)
  public enum LogicalOperatorEnum {
    AND("AND"),
    
    OR("OR");

    private String value;

    LogicalOperatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LogicalOperatorEnum fromValue(String value) {
      for (LogicalOperatorEnum b : LogicalOperatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LogicalOperatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LogicalOperatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LogicalOperatorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LogicalOperatorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LogicalOperatorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOGICAL_OPERATOR = "LogicalOperator";
  @SerializedName(SERIALIZED_NAME_LOGICAL_OPERATOR)
  private LogicalOperatorEnum logicalOperator;

  public SearchProfilesRequest() {
  }

  public SearchProfilesRequest keyName(String keyName) {
    this.keyName = keyName;
    return this;
  }

  /**
   * A searchable identifier of a customer profile. The predefined keys you can use to search include: _account, _profileId, _assetId, _caseId, _orderId, _fullName, _phone, _email, _ctrContactId, _marketoLeadId, _salesforceAccountId, _salesforceContactId, _salesforceAssetId, _zendeskUserId, _zendeskExternalId, _zendeskTicketId, _serviceNowSystemId, _serviceNowIncidentId, _segmentUserId, _shopifyCustomerId, _shopifyOrderId.
   * @return keyName
   */
  @javax.annotation.Nonnull
  public String getKeyName() {
    return keyName;
  }

  public void setKeyName(String keyName) {
    this.keyName = keyName;
  }


  public SearchProfilesRequest values(List<String> values) {
    this.values = values;
    return this;
  }

  public SearchProfilesRequest addValuesItem(String valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

  /**
   * A list of key values.
   * @return values
   */
  @javax.annotation.Nonnull
  public List<String> getValues() {
    return values;
  }

  public void setValues(List<String> values) {
    this.values = values;
  }


  public SearchProfilesRequest additionalSearchKeys(List<AdditionalSearchKey> additionalSearchKeys) {
    this.additionalSearchKeys = additionalSearchKeys;
    return this;
  }

  public SearchProfilesRequest addAdditionalSearchKeysItem(AdditionalSearchKey additionalSearchKeysItem) {
    if (this.additionalSearchKeys == null) {
      this.additionalSearchKeys = new ArrayList<>();
    }
    this.additionalSearchKeys.add(additionalSearchKeysItem);
    return this;
  }

  /**
   * A list of &lt;code&gt;AdditionalSearchKey&lt;/code&gt; objects that are each searchable identifiers of a profile. Each &lt;code&gt;AdditionalSearchKey&lt;/code&gt; object contains a &lt;code&gt;KeyName&lt;/code&gt; and a list of &lt;code&gt;Values&lt;/code&gt; associated with that specific key (i.e., a key-value(s) pair). These additional search keys will be used in conjunction with the &lt;code&gt;LogicalOperator&lt;/code&gt; and the required &lt;code&gt;KeyName&lt;/code&gt; and &lt;code&gt;Values&lt;/code&gt; parameters to search for profiles that satisfy the search criteria. 
   * @return additionalSearchKeys
   */
  @javax.annotation.Nullable
  public List<AdditionalSearchKey> getAdditionalSearchKeys() {
    return additionalSearchKeys;
  }

  public void setAdditionalSearchKeys(List<AdditionalSearchKey> additionalSearchKeys) {
    this.additionalSearchKeys = additionalSearchKeys;
  }


  public SearchProfilesRequest logicalOperator(LogicalOperatorEnum logicalOperator) {
    this.logicalOperator = logicalOperator;
    return this;
  }

  /**
   * &lt;p&gt;Relationship between all specified search keys that will be used to search for profiles. This includes the required &lt;code&gt;KeyName&lt;/code&gt; and &lt;code&gt;Values&lt;/code&gt; parameters as well as any key-value(s) pairs specified in the &lt;code&gt;AdditionalSearchKeys&lt;/code&gt; list.&lt;/p&gt; &lt;p&gt;This parameter influences which profiles will be returned in the response in the following manner:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AND&lt;/code&gt; - The response only includes profiles that match all of the search keys.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;OR&lt;/code&gt; - The response includes profiles that match at least one of the search keys.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The &lt;code&gt;OR&lt;/code&gt; relationship is the default behavior if this parameter is not included in the request.&lt;/p&gt;
   * @return logicalOperator
   */
  @javax.annotation.Nullable
  public LogicalOperatorEnum getLogicalOperator() {
    return logicalOperator;
  }

  public void setLogicalOperator(LogicalOperatorEnum logicalOperator) {
    this.logicalOperator = logicalOperator;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchProfilesRequest searchProfilesRequest = (SearchProfilesRequest) o;
    return Objects.equals(this.keyName, searchProfilesRequest.keyName) &&
        Objects.equals(this.values, searchProfilesRequest.values) &&
        Objects.equals(this.additionalSearchKeys, searchProfilesRequest.additionalSearchKeys) &&
        Objects.equals(this.logicalOperator, searchProfilesRequest.logicalOperator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keyName, values, additionalSearchKeys, logicalOperator);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchProfilesRequest {\n");
    sb.append("    keyName: ").append(toIndentedString(keyName)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("    additionalSearchKeys: ").append(toIndentedString(additionalSearchKeys)).append("\n");
    sb.append("    logicalOperator: ").append(toIndentedString(logicalOperator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("KeyName");
    openapiFields.add("Values");
    openapiFields.add("AdditionalSearchKeys");
    openapiFields.add("LogicalOperator");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("KeyName");
    openapiRequiredFields.add("Values");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchProfilesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchProfilesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchProfilesRequest is not found in the empty JSON string", SearchProfilesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchProfilesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchProfilesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SearchProfilesRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("KeyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `KeyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("KeyName").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("Values") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("Values").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Values` to be an array in the JSON string but got `%s`", jsonObj.get("Values").toString()));
      }
      if (jsonObj.get("AdditionalSearchKeys") != null && !jsonObj.get("AdditionalSearchKeys").isJsonNull()) {
        JsonArray jsonArrayadditionalSearchKeys = jsonObj.getAsJsonArray("AdditionalSearchKeys");
        if (jsonArrayadditionalSearchKeys != null) {
          // ensure the json data is an array
          if (!jsonObj.get("AdditionalSearchKeys").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `AdditionalSearchKeys` to be an array in the JSON string but got `%s`", jsonObj.get("AdditionalSearchKeys").toString()));
          }

          // validate the optional field `AdditionalSearchKeys` (array)
          for (int i = 0; i < jsonArrayadditionalSearchKeys.size(); i++) {
            AdditionalSearchKey.validateJsonElement(jsonArrayadditionalSearchKeys.get(i));
          };
        }
      }
      if ((jsonObj.get("LogicalOperator") != null && !jsonObj.get("LogicalOperator").isJsonNull()) && !jsonObj.get("LogicalOperator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LogicalOperator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LogicalOperator").toString()));
      }
      // validate the optional field `LogicalOperator`
      if (jsonObj.get("LogicalOperator") != null && !jsonObj.get("LogicalOperator").isJsonNull()) {
        LogicalOperatorEnum.validateJsonElement(jsonObj.get("LogicalOperator"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchProfilesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchProfilesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchProfilesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchProfilesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchProfilesRequest>() {
           @Override
           public void write(JsonWriter out, SearchProfilesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchProfilesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchProfilesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchProfilesRequest
   * @throws IOException if the JSON string is invalid with respect to SearchProfilesRequest
   */
  public static SearchProfilesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchProfilesRequest.class);
  }

  /**
   * Convert an instance of SearchProfilesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

