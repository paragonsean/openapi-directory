/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MergeProfilesRequestFieldSourceProfileIds;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MergeProfilesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MergeProfilesRequest {
  public static final String SERIALIZED_NAME_MAIN_PROFILE_ID = "MainProfileId";
  @SerializedName(SERIALIZED_NAME_MAIN_PROFILE_ID)
  private String mainProfileId;

  public static final String SERIALIZED_NAME_PROFILE_IDS_TO_BE_MERGED = "ProfileIdsToBeMerged";
  @SerializedName(SERIALIZED_NAME_PROFILE_IDS_TO_BE_MERGED)
  private List<String> profileIdsToBeMerged = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIELD_SOURCE_PROFILE_IDS = "FieldSourceProfileIds";
  @SerializedName(SERIALIZED_NAME_FIELD_SOURCE_PROFILE_IDS)
  private MergeProfilesRequestFieldSourceProfileIds fieldSourceProfileIds;

  public MergeProfilesRequest() {
  }

  public MergeProfilesRequest mainProfileId(String mainProfileId) {
    this.mainProfileId = mainProfileId;
    return this;
  }

  /**
   * The identifier of the profile to be taken.
   * @return mainProfileId
   */
  @javax.annotation.Nonnull
  public String getMainProfileId() {
    return mainProfileId;
  }

  public void setMainProfileId(String mainProfileId) {
    this.mainProfileId = mainProfileId;
  }


  public MergeProfilesRequest profileIdsToBeMerged(List<String> profileIdsToBeMerged) {
    this.profileIdsToBeMerged = profileIdsToBeMerged;
    return this;
  }

  public MergeProfilesRequest addProfileIdsToBeMergedItem(String profileIdsToBeMergedItem) {
    if (this.profileIdsToBeMerged == null) {
      this.profileIdsToBeMerged = new ArrayList<>();
    }
    this.profileIdsToBeMerged.add(profileIdsToBeMergedItem);
    return this;
  }

  /**
   * The identifier of the profile to be merged into MainProfileId.
   * @return profileIdsToBeMerged
   */
  @javax.annotation.Nonnull
  public List<String> getProfileIdsToBeMerged() {
    return profileIdsToBeMerged;
  }

  public void setProfileIdsToBeMerged(List<String> profileIdsToBeMerged) {
    this.profileIdsToBeMerged = profileIdsToBeMerged;
  }


  public MergeProfilesRequest fieldSourceProfileIds(MergeProfilesRequestFieldSourceProfileIds fieldSourceProfileIds) {
    this.fieldSourceProfileIds = fieldSourceProfileIds;
    return this;
  }

  /**
   * Get fieldSourceProfileIds
   * @return fieldSourceProfileIds
   */
  @javax.annotation.Nullable
  public MergeProfilesRequestFieldSourceProfileIds getFieldSourceProfileIds() {
    return fieldSourceProfileIds;
  }

  public void setFieldSourceProfileIds(MergeProfilesRequestFieldSourceProfileIds fieldSourceProfileIds) {
    this.fieldSourceProfileIds = fieldSourceProfileIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MergeProfilesRequest mergeProfilesRequest = (MergeProfilesRequest) o;
    return Objects.equals(this.mainProfileId, mergeProfilesRequest.mainProfileId) &&
        Objects.equals(this.profileIdsToBeMerged, mergeProfilesRequest.profileIdsToBeMerged) &&
        Objects.equals(this.fieldSourceProfileIds, mergeProfilesRequest.fieldSourceProfileIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mainProfileId, profileIdsToBeMerged, fieldSourceProfileIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MergeProfilesRequest {\n");
    sb.append("    mainProfileId: ").append(toIndentedString(mainProfileId)).append("\n");
    sb.append("    profileIdsToBeMerged: ").append(toIndentedString(profileIdsToBeMerged)).append("\n");
    sb.append("    fieldSourceProfileIds: ").append(toIndentedString(fieldSourceProfileIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MainProfileId");
    openapiFields.add("ProfileIdsToBeMerged");
    openapiFields.add("FieldSourceProfileIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("MainProfileId");
    openapiRequiredFields.add("ProfileIdsToBeMerged");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MergeProfilesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MergeProfilesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MergeProfilesRequest is not found in the empty JSON string", MergeProfilesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MergeProfilesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MergeProfilesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MergeProfilesRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("MainProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MainProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MainProfileId").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("ProfileIdsToBeMerged") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("ProfileIdsToBeMerged").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProfileIdsToBeMerged` to be an array in the JSON string but got `%s`", jsonObj.get("ProfileIdsToBeMerged").toString()));
      }
      // validate the optional field `FieldSourceProfileIds`
      if (jsonObj.get("FieldSourceProfileIds") != null && !jsonObj.get("FieldSourceProfileIds").isJsonNull()) {
        MergeProfilesRequestFieldSourceProfileIds.validateJsonElement(jsonObj.get("FieldSourceProfileIds"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MergeProfilesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MergeProfilesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MergeProfilesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MergeProfilesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<MergeProfilesRequest>() {
           @Override
           public void write(JsonWriter out, MergeProfilesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MergeProfilesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MergeProfilesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MergeProfilesRequest
   * @throws IOException if the JSON string is invalid with respect to MergeProfilesRequest
   */
  public static MergeProfilesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MergeProfilesRequest.class);
  }

  /**
   * Convert an instance of MergeProfilesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

