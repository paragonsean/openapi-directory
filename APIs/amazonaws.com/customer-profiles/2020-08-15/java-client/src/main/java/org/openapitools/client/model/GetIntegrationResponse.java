/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetIntegrationResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetIntegrationResponse {
  public static final String SERIALIZED_NAME_DOMAIN_NAME = "DomainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private String domainName;

  public static final String SERIALIZED_NAME_URI = "Uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_OBJECT_TYPE_NAME = "ObjectTypeName";
  @SerializedName(SERIALIZED_NAME_OBJECT_TYPE_NAME)
  private String objectTypeName;

  public static final String SERIALIZED_NAME_CREATED_AT = "CreatedAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_LAST_UPDATED_AT = "LastUpdatedAt";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_AT)
  private OffsetDateTime lastUpdatedAt;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_OBJECT_TYPE_NAMES = "ObjectTypeNames";
  @SerializedName(SERIALIZED_NAME_OBJECT_TYPE_NAMES)
  private Map objectTypeNames;

  public static final String SERIALIZED_NAME_WORKFLOW_ID = "WorkflowId";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_ID)
  private String workflowId;

  public static final String SERIALIZED_NAME_IS_UNSTRUCTURED = "IsUnstructured";
  @SerializedName(SERIALIZED_NAME_IS_UNSTRUCTURED)
  private Boolean isUnstructured;

  public GetIntegrationResponse() {
  }

  public GetIntegrationResponse domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * Get domainName
   * @return domainName
   */
  @javax.annotation.Nonnull
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  public GetIntegrationResponse uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * Get uri
   * @return uri
   */
  @javax.annotation.Nonnull
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }


  public GetIntegrationResponse objectTypeName(String objectTypeName) {
    this.objectTypeName = objectTypeName;
    return this;
  }

  /**
   * Get objectTypeName
   * @return objectTypeName
   */
  @javax.annotation.Nullable
  public String getObjectTypeName() {
    return objectTypeName;
  }

  public void setObjectTypeName(String objectTypeName) {
    this.objectTypeName = objectTypeName;
  }


  public GetIntegrationResponse createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public GetIntegrationResponse lastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
    return this;
  }

  /**
   * Get lastUpdatedAt
   * @return lastUpdatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastUpdatedAt() {
    return lastUpdatedAt;
  }

  public void setLastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
  }


  public GetIntegrationResponse tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public GetIntegrationResponse objectTypeNames(Map objectTypeNames) {
    this.objectTypeNames = objectTypeNames;
    return this;
  }

  /**
   * Get objectTypeNames
   * @return objectTypeNames
   */
  @javax.annotation.Nullable
  public Map getObjectTypeNames() {
    return objectTypeNames;
  }

  public void setObjectTypeNames(Map objectTypeNames) {
    this.objectTypeNames = objectTypeNames;
  }


  public GetIntegrationResponse workflowId(String workflowId) {
    this.workflowId = workflowId;
    return this;
  }

  /**
   * Get workflowId
   * @return workflowId
   */
  @javax.annotation.Nullable
  public String getWorkflowId() {
    return workflowId;
  }

  public void setWorkflowId(String workflowId) {
    this.workflowId = workflowId;
  }


  public GetIntegrationResponse isUnstructured(Boolean isUnstructured) {
    this.isUnstructured = isUnstructured;
    return this;
  }

  /**
   * Get isUnstructured
   * @return isUnstructured
   */
  @javax.annotation.Nullable
  public Boolean getIsUnstructured() {
    return isUnstructured;
  }

  public void setIsUnstructured(Boolean isUnstructured) {
    this.isUnstructured = isUnstructured;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetIntegrationResponse getIntegrationResponse = (GetIntegrationResponse) o;
    return Objects.equals(this.domainName, getIntegrationResponse.domainName) &&
        Objects.equals(this.uri, getIntegrationResponse.uri) &&
        Objects.equals(this.objectTypeName, getIntegrationResponse.objectTypeName) &&
        Objects.equals(this.createdAt, getIntegrationResponse.createdAt) &&
        Objects.equals(this.lastUpdatedAt, getIntegrationResponse.lastUpdatedAt) &&
        Objects.equals(this.tags, getIntegrationResponse.tags) &&
        Objects.equals(this.objectTypeNames, getIntegrationResponse.objectTypeNames) &&
        Objects.equals(this.workflowId, getIntegrationResponse.workflowId) &&
        Objects.equals(this.isUnstructured, getIntegrationResponse.isUnstructured);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainName, uri, objectTypeName, createdAt, lastUpdatedAt, tags, objectTypeNames, workflowId, isUnstructured);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetIntegrationResponse {\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    objectTypeName: ").append(toIndentedString(objectTypeName)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    lastUpdatedAt: ").append(toIndentedString(lastUpdatedAt)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    objectTypeNames: ").append(toIndentedString(objectTypeNames)).append("\n");
    sb.append("    workflowId: ").append(toIndentedString(workflowId)).append("\n");
    sb.append("    isUnstructured: ").append(toIndentedString(isUnstructured)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DomainName");
    openapiFields.add("Uri");
    openapiFields.add("ObjectTypeName");
    openapiFields.add("CreatedAt");
    openapiFields.add("LastUpdatedAt");
    openapiFields.add("Tags");
    openapiFields.add("ObjectTypeNames");
    openapiFields.add("WorkflowId");
    openapiFields.add("IsUnstructured");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DomainName");
    openapiRequiredFields.add("Uri");
    openapiRequiredFields.add("CreatedAt");
    openapiRequiredFields.add("LastUpdatedAt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetIntegrationResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetIntegrationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetIntegrationResponse is not found in the empty JSON string", GetIntegrationResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetIntegrationResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetIntegrationResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetIntegrationResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DomainName`
      String.validateJsonElement(jsonObj.get("DomainName"));
      // validate the required field `Uri`
      String.validateJsonElement(jsonObj.get("Uri"));
      // validate the optional field `ObjectTypeName`
      if (jsonObj.get("ObjectTypeName") != null && !jsonObj.get("ObjectTypeName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ObjectTypeName"));
      }
      // validate the required field `CreatedAt`
      OffsetDateTime.validateJsonElement(jsonObj.get("CreatedAt"));
      // validate the required field `LastUpdatedAt`
      OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdatedAt"));
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `ObjectTypeNames`
      if (jsonObj.get("ObjectTypeNames") != null && !jsonObj.get("ObjectTypeNames").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("ObjectTypeNames"));
      }
      // validate the optional field `WorkflowId`
      if (jsonObj.get("WorkflowId") != null && !jsonObj.get("WorkflowId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("WorkflowId"));
      }
      // validate the optional field `IsUnstructured`
      if (jsonObj.get("IsUnstructured") != null && !jsonObj.get("IsUnstructured").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IsUnstructured"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetIntegrationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetIntegrationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetIntegrationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetIntegrationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetIntegrationResponse>() {
           @Override
           public void write(JsonWriter out, GetIntegrationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetIntegrationResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetIntegrationResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetIntegrationResponse
   * @throws IOException if the JSON string is invalid with respect to GetIntegrationResponse
   */
  public static GetIntegrationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetIntegrationResponse.class);
  }

  /**
   * Convert an instance of GetIntegrationResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

