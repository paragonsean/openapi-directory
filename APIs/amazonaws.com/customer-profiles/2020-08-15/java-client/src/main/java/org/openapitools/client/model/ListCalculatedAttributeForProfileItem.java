/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The details of a single calculated attribute for a profile.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListCalculatedAttributeForProfileItem {
  public static final String SERIALIZED_NAME_CALCULATED_ATTRIBUTE_NAME = "CalculatedAttributeName";
  @SerializedName(SERIALIZED_NAME_CALCULATED_ATTRIBUTE_NAME)
  private String calculatedAttributeName;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "DisplayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_IS_DATA_PARTIAL = "IsDataPartial";
  @SerializedName(SERIALIZED_NAME_IS_DATA_PARTIAL)
  private String isDataPartial;

  public static final String SERIALIZED_NAME_VALUE = "Value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public ListCalculatedAttributeForProfileItem() {
  }

  public ListCalculatedAttributeForProfileItem calculatedAttributeName(String calculatedAttributeName) {
    this.calculatedAttributeName = calculatedAttributeName;
    return this;
  }

  /**
   * Get calculatedAttributeName
   * @return calculatedAttributeName
   */
  @javax.annotation.Nullable
  public String getCalculatedAttributeName() {
    return calculatedAttributeName;
  }

  public void setCalculatedAttributeName(String calculatedAttributeName) {
    this.calculatedAttributeName = calculatedAttributeName;
  }


  public ListCalculatedAttributeForProfileItem displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ListCalculatedAttributeForProfileItem isDataPartial(String isDataPartial) {
    this.isDataPartial = isDataPartial;
    return this;
  }

  /**
   * Get isDataPartial
   * @return isDataPartial
   */
  @javax.annotation.Nullable
  public String getIsDataPartial() {
    return isDataPartial;
  }

  public void setIsDataPartial(String isDataPartial) {
    this.isDataPartial = isDataPartial;
  }


  public ListCalculatedAttributeForProfileItem value(String value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListCalculatedAttributeForProfileItem listCalculatedAttributeForProfileItem = (ListCalculatedAttributeForProfileItem) o;
    return Objects.equals(this.calculatedAttributeName, listCalculatedAttributeForProfileItem.calculatedAttributeName) &&
        Objects.equals(this.displayName, listCalculatedAttributeForProfileItem.displayName) &&
        Objects.equals(this.isDataPartial, listCalculatedAttributeForProfileItem.isDataPartial) &&
        Objects.equals(this.value, listCalculatedAttributeForProfileItem.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calculatedAttributeName, displayName, isDataPartial, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListCalculatedAttributeForProfileItem {\n");
    sb.append("    calculatedAttributeName: ").append(toIndentedString(calculatedAttributeName)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    isDataPartial: ").append(toIndentedString(isDataPartial)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CalculatedAttributeName");
    openapiFields.add("DisplayName");
    openapiFields.add("IsDataPartial");
    openapiFields.add("Value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListCalculatedAttributeForProfileItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListCalculatedAttributeForProfileItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListCalculatedAttributeForProfileItem is not found in the empty JSON string", ListCalculatedAttributeForProfileItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListCalculatedAttributeForProfileItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListCalculatedAttributeForProfileItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CalculatedAttributeName`
      if (jsonObj.get("CalculatedAttributeName") != null && !jsonObj.get("CalculatedAttributeName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CalculatedAttributeName"));
      }
      // validate the optional field `DisplayName`
      if (jsonObj.get("DisplayName") != null && !jsonObj.get("DisplayName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DisplayName"));
      }
      // validate the optional field `IsDataPartial`
      if (jsonObj.get("IsDataPartial") != null && !jsonObj.get("IsDataPartial").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IsDataPartial"));
      }
      // validate the optional field `Value`
      if (jsonObj.get("Value") != null && !jsonObj.get("Value").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Value"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListCalculatedAttributeForProfileItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListCalculatedAttributeForProfileItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListCalculatedAttributeForProfileItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListCalculatedAttributeForProfileItem.class));

       return (TypeAdapter<T>) new TypeAdapter<ListCalculatedAttributeForProfileItem>() {
           @Override
           public void write(JsonWriter out, ListCalculatedAttributeForProfileItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListCalculatedAttributeForProfileItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListCalculatedAttributeForProfileItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListCalculatedAttributeForProfileItem
   * @throws IOException if the JSON string is invalid with respect to ListCalculatedAttributeForProfileItem
   */
  public static ListCalculatedAttributeForProfileItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListCalculatedAttributeForProfileItem.class);
  }

  /**
   * Convert an instance of ListCalculatedAttributeForProfileItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

