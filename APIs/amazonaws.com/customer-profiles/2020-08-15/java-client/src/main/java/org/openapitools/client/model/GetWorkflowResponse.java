/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.GetWorkflowResponseAttributes;
import org.openapitools.client.model.GetWorkflowResponseMetrics;
import org.openapitools.client.model.Status;
import org.openapitools.client.model.WorkflowType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetWorkflowResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetWorkflowResponse {
  public static final String SERIALIZED_NAME_WORKFLOW_ID = "WorkflowId";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_ID)
  private String workflowId;

  public static final String SERIALIZED_NAME_WORKFLOW_TYPE = "WorkflowType";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_TYPE)
  private WorkflowType workflowType;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status status;

  public static final String SERIALIZED_NAME_ERROR_DESCRIPTION = "ErrorDescription";
  @SerializedName(SERIALIZED_NAME_ERROR_DESCRIPTION)
  private String errorDescription;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_LAST_UPDATED_AT = "LastUpdatedAt";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_AT)
  private OffsetDateTime lastUpdatedAt;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "Attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private GetWorkflowResponseAttributes attributes;

  public static final String SERIALIZED_NAME_METRICS = "Metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private GetWorkflowResponseMetrics metrics;

  public GetWorkflowResponse() {
  }

  public GetWorkflowResponse workflowId(String workflowId) {
    this.workflowId = workflowId;
    return this;
  }

  /**
   * Get workflowId
   * @return workflowId
   */
  @javax.annotation.Nullable
  public String getWorkflowId() {
    return workflowId;
  }

  public void setWorkflowId(String workflowId) {
    this.workflowId = workflowId;
  }


  public GetWorkflowResponse workflowType(WorkflowType workflowType) {
    this.workflowType = workflowType;
    return this;
  }

  /**
   * Get workflowType
   * @return workflowType
   */
  @javax.annotation.Nullable
  public WorkflowType getWorkflowType() {
    return workflowType;
  }

  public void setWorkflowType(WorkflowType workflowType) {
    this.workflowType = workflowType;
  }


  public GetWorkflowResponse status(Status status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Status getStatus() {
    return status;
  }

  public void setStatus(Status status) {
    this.status = status;
  }


  public GetWorkflowResponse errorDescription(String errorDescription) {
    this.errorDescription = errorDescription;
    return this;
  }

  /**
   * Get errorDescription
   * @return errorDescription
   */
  @javax.annotation.Nullable
  public String getErrorDescription() {
    return errorDescription;
  }

  public void setErrorDescription(String errorDescription) {
    this.errorDescription = errorDescription;
  }


  public GetWorkflowResponse startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public GetWorkflowResponse lastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
    return this;
  }

  /**
   * Get lastUpdatedAt
   * @return lastUpdatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedAt() {
    return lastUpdatedAt;
  }

  public void setLastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
  }


  public GetWorkflowResponse attributes(GetWorkflowResponseAttributes attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public GetWorkflowResponseAttributes getAttributes() {
    return attributes;
  }

  public void setAttributes(GetWorkflowResponseAttributes attributes) {
    this.attributes = attributes;
  }


  public GetWorkflowResponse metrics(GetWorkflowResponseMetrics metrics) {
    this.metrics = metrics;
    return this;
  }

  /**
   * Get metrics
   * @return metrics
   */
  @javax.annotation.Nullable
  public GetWorkflowResponseMetrics getMetrics() {
    return metrics;
  }

  public void setMetrics(GetWorkflowResponseMetrics metrics) {
    this.metrics = metrics;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetWorkflowResponse getWorkflowResponse = (GetWorkflowResponse) o;
    return Objects.equals(this.workflowId, getWorkflowResponse.workflowId) &&
        Objects.equals(this.workflowType, getWorkflowResponse.workflowType) &&
        Objects.equals(this.status, getWorkflowResponse.status) &&
        Objects.equals(this.errorDescription, getWorkflowResponse.errorDescription) &&
        Objects.equals(this.startDate, getWorkflowResponse.startDate) &&
        Objects.equals(this.lastUpdatedAt, getWorkflowResponse.lastUpdatedAt) &&
        Objects.equals(this.attributes, getWorkflowResponse.attributes) &&
        Objects.equals(this.metrics, getWorkflowResponse.metrics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(workflowId, workflowType, status, errorDescription, startDate, lastUpdatedAt, attributes, metrics);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetWorkflowResponse {\n");
    sb.append("    workflowId: ").append(toIndentedString(workflowId)).append("\n");
    sb.append("    workflowType: ").append(toIndentedString(workflowType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    errorDescription: ").append(toIndentedString(errorDescription)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    lastUpdatedAt: ").append(toIndentedString(lastUpdatedAt)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("WorkflowId");
    openapiFields.add("WorkflowType");
    openapiFields.add("Status");
    openapiFields.add("ErrorDescription");
    openapiFields.add("StartDate");
    openapiFields.add("LastUpdatedAt");
    openapiFields.add("Attributes");
    openapiFields.add("Metrics");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetWorkflowResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetWorkflowResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetWorkflowResponse is not found in the empty JSON string", GetWorkflowResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetWorkflowResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetWorkflowResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `WorkflowId`
      if (jsonObj.get("WorkflowId") != null && !jsonObj.get("WorkflowId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("WorkflowId"));
      }
      // validate the optional field `WorkflowType`
      if (jsonObj.get("WorkflowType") != null && !jsonObj.get("WorkflowType").isJsonNull()) {
        WorkflowType.validateJsonElement(jsonObj.get("WorkflowType"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `ErrorDescription`
      if (jsonObj.get("ErrorDescription") != null && !jsonObj.get("ErrorDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ErrorDescription"));
      }
      // validate the optional field `StartDate`
      if (jsonObj.get("StartDate") != null && !jsonObj.get("StartDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartDate"));
      }
      // validate the optional field `LastUpdatedAt`
      if (jsonObj.get("LastUpdatedAt") != null && !jsonObj.get("LastUpdatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdatedAt"));
      }
      // validate the optional field `Attributes`
      if (jsonObj.get("Attributes") != null && !jsonObj.get("Attributes").isJsonNull()) {
        GetWorkflowResponseAttributes.validateJsonElement(jsonObj.get("Attributes"));
      }
      // validate the optional field `Metrics`
      if (jsonObj.get("Metrics") != null && !jsonObj.get("Metrics").isJsonNull()) {
        GetWorkflowResponseMetrics.validateJsonElement(jsonObj.get("Metrics"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetWorkflowResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetWorkflowResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetWorkflowResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetWorkflowResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetWorkflowResponse>() {
           @Override
           public void write(JsonWriter out, GetWorkflowResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetWorkflowResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetWorkflowResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetWorkflowResponse
   * @throws IOException if the JSON string is invalid with respect to GetWorkflowResponse
   */
  public static GetWorkflowResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetWorkflowResponse.class);
  }

  /**
   * Convert an instance of GetWorkflowResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

