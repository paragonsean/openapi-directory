/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UpdateCalculatedAttributeDefinitionRequestConditionsRange;
import org.openapitools.client.model.UpdateCalculatedAttributeDefinitionRequestConditionsThreshold;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateCalculatedAttributeDefinitionResponseConditions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateCalculatedAttributeDefinitionResponseConditions {
  public static final String SERIALIZED_NAME_RANGE = "Range";
  @SerializedName(SERIALIZED_NAME_RANGE)
  private UpdateCalculatedAttributeDefinitionRequestConditionsRange range;

  public static final String SERIALIZED_NAME_OBJECT_COUNT = "ObjectCount";
  @SerializedName(SERIALIZED_NAME_OBJECT_COUNT)
  private Integer objectCount;

  public static final String SERIALIZED_NAME_THRESHOLD = "Threshold";
  @SerializedName(SERIALIZED_NAME_THRESHOLD)
  private UpdateCalculatedAttributeDefinitionRequestConditionsThreshold threshold;

  public CreateCalculatedAttributeDefinitionResponseConditions() {
  }

  public CreateCalculatedAttributeDefinitionResponseConditions range(UpdateCalculatedAttributeDefinitionRequestConditionsRange range) {
    this.range = range;
    return this;
  }

  /**
   * Get range
   * @return range
   */
  @javax.annotation.Nullable
  public UpdateCalculatedAttributeDefinitionRequestConditionsRange getRange() {
    return range;
  }

  public void setRange(UpdateCalculatedAttributeDefinitionRequestConditionsRange range) {
    this.range = range;
  }


  public CreateCalculatedAttributeDefinitionResponseConditions objectCount(Integer objectCount) {
    this.objectCount = objectCount;
    return this;
  }

  /**
   * Get objectCount
   * @return objectCount
   */
  @javax.annotation.Nullable
  public Integer getObjectCount() {
    return objectCount;
  }

  public void setObjectCount(Integer objectCount) {
    this.objectCount = objectCount;
  }


  public CreateCalculatedAttributeDefinitionResponseConditions threshold(UpdateCalculatedAttributeDefinitionRequestConditionsThreshold threshold) {
    this.threshold = threshold;
    return this;
  }

  /**
   * Get threshold
   * @return threshold
   */
  @javax.annotation.Nullable
  public UpdateCalculatedAttributeDefinitionRequestConditionsThreshold getThreshold() {
    return threshold;
  }

  public void setThreshold(UpdateCalculatedAttributeDefinitionRequestConditionsThreshold threshold) {
    this.threshold = threshold;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateCalculatedAttributeDefinitionResponseConditions createCalculatedAttributeDefinitionResponseConditions = (CreateCalculatedAttributeDefinitionResponseConditions) o;
    return Objects.equals(this.range, createCalculatedAttributeDefinitionResponseConditions.range) &&
        Objects.equals(this.objectCount, createCalculatedAttributeDefinitionResponseConditions.objectCount) &&
        Objects.equals(this.threshold, createCalculatedAttributeDefinitionResponseConditions.threshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(range, objectCount, threshold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateCalculatedAttributeDefinitionResponseConditions {\n");
    sb.append("    range: ").append(toIndentedString(range)).append("\n");
    sb.append("    objectCount: ").append(toIndentedString(objectCount)).append("\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Range");
    openapiFields.add("ObjectCount");
    openapiFields.add("Threshold");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateCalculatedAttributeDefinitionResponseConditions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateCalculatedAttributeDefinitionResponseConditions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateCalculatedAttributeDefinitionResponseConditions is not found in the empty JSON string", CreateCalculatedAttributeDefinitionResponseConditions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateCalculatedAttributeDefinitionResponseConditions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateCalculatedAttributeDefinitionResponseConditions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Range`
      if (jsonObj.get("Range") != null && !jsonObj.get("Range").isJsonNull()) {
        UpdateCalculatedAttributeDefinitionRequestConditionsRange.validateJsonElement(jsonObj.get("Range"));
      }
      // validate the optional field `ObjectCount`
      if (jsonObj.get("ObjectCount") != null && !jsonObj.get("ObjectCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ObjectCount"));
      }
      // validate the optional field `Threshold`
      if (jsonObj.get("Threshold") != null && !jsonObj.get("Threshold").isJsonNull()) {
        UpdateCalculatedAttributeDefinitionRequestConditionsThreshold.validateJsonElement(jsonObj.get("Threshold"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateCalculatedAttributeDefinitionResponseConditions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateCalculatedAttributeDefinitionResponseConditions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateCalculatedAttributeDefinitionResponseConditions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateCalculatedAttributeDefinitionResponseConditions.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateCalculatedAttributeDefinitionResponseConditions>() {
           @Override
           public void write(JsonWriter out, CreateCalculatedAttributeDefinitionResponseConditions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateCalculatedAttributeDefinitionResponseConditions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateCalculatedAttributeDefinitionResponseConditions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateCalculatedAttributeDefinitionResponseConditions
   * @throws IOException if the JSON string is invalid with respect to CreateCalculatedAttributeDefinitionResponseConditions
   */
  public static CreateCalculatedAttributeDefinitionResponseConditions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateCalculatedAttributeDefinitionResponseConditions.class);
  }

  /**
   * Convert an instance of CreateCalculatedAttributeDefinitionResponseConditions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

