/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.EventStreamDestinationStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of the destination being used for the EventStream.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventStreamDestinationDetails {
  public static final String SERIALIZED_NAME_URI = "Uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EventStreamDestinationStatus status;

  public static final String SERIALIZED_NAME_UNHEALTHY_SINCE = "UnhealthySince";
  @SerializedName(SERIALIZED_NAME_UNHEALTHY_SINCE)
  private OffsetDateTime unhealthySince;

  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public EventStreamDestinationDetails() {
  }

  public EventStreamDestinationDetails uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * Get uri
   * @return uri
   */
  @javax.annotation.Nonnull
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }


  public EventStreamDestinationDetails status(EventStreamDestinationStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public EventStreamDestinationStatus getStatus() {
    return status;
  }

  public void setStatus(EventStreamDestinationStatus status) {
    this.status = status;
  }


  public EventStreamDestinationDetails unhealthySince(OffsetDateTime unhealthySince) {
    this.unhealthySince = unhealthySince;
    return this;
  }

  /**
   * Get unhealthySince
   * @return unhealthySince
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUnhealthySince() {
    return unhealthySince;
  }

  public void setUnhealthySince(OffsetDateTime unhealthySince) {
    this.unhealthySince = unhealthySince;
  }


  public EventStreamDestinationDetails message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventStreamDestinationDetails eventStreamDestinationDetails = (EventStreamDestinationDetails) o;
    return Objects.equals(this.uri, eventStreamDestinationDetails.uri) &&
        Objects.equals(this.status, eventStreamDestinationDetails.status) &&
        Objects.equals(this.unhealthySince, eventStreamDestinationDetails.unhealthySince) &&
        Objects.equals(this.message, eventStreamDestinationDetails.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uri, status, unhealthySince, message);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventStreamDestinationDetails {\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    unhealthySince: ").append(toIndentedString(unhealthySince)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Uri");
    openapiFields.add("Status");
    openapiFields.add("UnhealthySince");
    openapiFields.add("Message");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Uri");
    openapiRequiredFields.add("Status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventStreamDestinationDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventStreamDestinationDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventStreamDestinationDetails is not found in the empty JSON string", EventStreamDestinationDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventStreamDestinationDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventStreamDestinationDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EventStreamDestinationDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Uri`
      String.validateJsonElement(jsonObj.get("Uri"));
      // validate the required field `Status`
      EventStreamDestinationStatus.validateJsonElement(jsonObj.get("Status"));
      // validate the optional field `UnhealthySince`
      if (jsonObj.get("UnhealthySince") != null && !jsonObj.get("UnhealthySince").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("UnhealthySince"));
      }
      // validate the optional field `Message`
      if (jsonObj.get("Message") != null && !jsonObj.get("Message").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Message"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventStreamDestinationDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventStreamDestinationDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventStreamDestinationDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventStreamDestinationDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<EventStreamDestinationDetails>() {
           @Override
           public void write(JsonWriter out, EventStreamDestinationDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventStreamDestinationDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventStreamDestinationDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventStreamDestinationDetails
   * @throws IOException if the JSON string is invalid with respect to EventStreamDestinationDetails
   */
  public static EventStreamDestinationDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventStreamDestinationDetails.class);
  }

  /**
   * Convert an instance of EventStreamDestinationDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

