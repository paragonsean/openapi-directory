/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.JobScheduleDayOfTheWeek;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The day and time when do you want to start the Identity Resolution Job every week.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobSchedule {
  public static final String SERIALIZED_NAME_DAY_OF_THE_WEEK = "DayOfTheWeek";
  @SerializedName(SERIALIZED_NAME_DAY_OF_THE_WEEK)
  private JobScheduleDayOfTheWeek dayOfTheWeek;

  public static final String SERIALIZED_NAME_TIME = "Time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private String time;

  public JobSchedule() {
  }

  public JobSchedule dayOfTheWeek(JobScheduleDayOfTheWeek dayOfTheWeek) {
    this.dayOfTheWeek = dayOfTheWeek;
    return this;
  }

  /**
   * Get dayOfTheWeek
   * @return dayOfTheWeek
   */
  @javax.annotation.Nonnull
  public JobScheduleDayOfTheWeek getDayOfTheWeek() {
    return dayOfTheWeek;
  }

  public void setDayOfTheWeek(JobScheduleDayOfTheWeek dayOfTheWeek) {
    this.dayOfTheWeek = dayOfTheWeek;
  }


  public JobSchedule time(String time) {
    this.time = time;
    return this;
  }

  /**
   * Get time
   * @return time
   */
  @javax.annotation.Nonnull
  public String getTime() {
    return time;
  }

  public void setTime(String time) {
    this.time = time;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobSchedule jobSchedule = (JobSchedule) o;
    return Objects.equals(this.dayOfTheWeek, jobSchedule.dayOfTheWeek) &&
        Objects.equals(this.time, jobSchedule.time);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dayOfTheWeek, time);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobSchedule {\n");
    sb.append("    dayOfTheWeek: ").append(toIndentedString(dayOfTheWeek)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DayOfTheWeek");
    openapiFields.add("Time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DayOfTheWeek");
    openapiRequiredFields.add("Time");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobSchedule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobSchedule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobSchedule is not found in the empty JSON string", JobSchedule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobSchedule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobSchedule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JobSchedule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DayOfTheWeek`
      JobScheduleDayOfTheWeek.validateJsonElement(jsonObj.get("DayOfTheWeek"));
      // validate the required field `Time`
      String.validateJsonElement(jsonObj.get("Time"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobSchedule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobSchedule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobSchedule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobSchedule.class));

       return (TypeAdapter<T>) new TypeAdapter<JobSchedule>() {
           @Override
           public void write(JsonWriter out, JobSchedule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobSchedule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobSchedule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobSchedule
   * @throws IOException if the JSON string is invalid with respect to JobSchedule
   */
  public static JobSchedule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobSchedule.class);
  }

  /**
   * Convert an instance of JobSchedule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

