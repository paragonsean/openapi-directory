/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConflictResolution;
import org.openapitools.client.model.ExportingConfig;
import org.openapitools.client.model.UpdateDomainRequestRuleBasedMatchingAttributeTypesSelector;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateDomainRequestRuleBasedMatching
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateDomainRequestRuleBasedMatching {
  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_MATCHING_RULES = "MatchingRules";
  @SerializedName(SERIALIZED_NAME_MATCHING_RULES)
  private List matchingRules;

  public static final String SERIALIZED_NAME_MAX_ALLOWED_RULE_LEVEL_FOR_MERGING = "MaxAllowedRuleLevelForMerging";
  @SerializedName(SERIALIZED_NAME_MAX_ALLOWED_RULE_LEVEL_FOR_MERGING)
  private Integer maxAllowedRuleLevelForMerging;

  public static final String SERIALIZED_NAME_MAX_ALLOWED_RULE_LEVEL_FOR_MATCHING = "MaxAllowedRuleLevelForMatching";
  @SerializedName(SERIALIZED_NAME_MAX_ALLOWED_RULE_LEVEL_FOR_MATCHING)
  private Integer maxAllowedRuleLevelForMatching;

  public static final String SERIALIZED_NAME_ATTRIBUTE_TYPES_SELECTOR = "AttributeTypesSelector";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_TYPES_SELECTOR)
  private UpdateDomainRequestRuleBasedMatchingAttributeTypesSelector attributeTypesSelector;

  public static final String SERIALIZED_NAME_CONFLICT_RESOLUTION = "ConflictResolution";
  @SerializedName(SERIALIZED_NAME_CONFLICT_RESOLUTION)
  private ConflictResolution conflictResolution;

  public static final String SERIALIZED_NAME_EXPORTING_CONFIG = "ExportingConfig";
  @SerializedName(SERIALIZED_NAME_EXPORTING_CONFIG)
  private ExportingConfig exportingConfig;

  public CreateDomainRequestRuleBasedMatching() {
  }

  public CreateDomainRequestRuleBasedMatching enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public CreateDomainRequestRuleBasedMatching matchingRules(List matchingRules) {
    this.matchingRules = matchingRules;
    return this;
  }

  /**
   * Get matchingRules
   * @return matchingRules
   */
  @javax.annotation.Nullable
  public List getMatchingRules() {
    return matchingRules;
  }

  public void setMatchingRules(List matchingRules) {
    this.matchingRules = matchingRules;
  }


  public CreateDomainRequestRuleBasedMatching maxAllowedRuleLevelForMerging(Integer maxAllowedRuleLevelForMerging) {
    this.maxAllowedRuleLevelForMerging = maxAllowedRuleLevelForMerging;
    return this;
  }

  /**
   * Get maxAllowedRuleLevelForMerging
   * @return maxAllowedRuleLevelForMerging
   */
  @javax.annotation.Nullable
  public Integer getMaxAllowedRuleLevelForMerging() {
    return maxAllowedRuleLevelForMerging;
  }

  public void setMaxAllowedRuleLevelForMerging(Integer maxAllowedRuleLevelForMerging) {
    this.maxAllowedRuleLevelForMerging = maxAllowedRuleLevelForMerging;
  }


  public CreateDomainRequestRuleBasedMatching maxAllowedRuleLevelForMatching(Integer maxAllowedRuleLevelForMatching) {
    this.maxAllowedRuleLevelForMatching = maxAllowedRuleLevelForMatching;
    return this;
  }

  /**
   * Get maxAllowedRuleLevelForMatching
   * @return maxAllowedRuleLevelForMatching
   */
  @javax.annotation.Nullable
  public Integer getMaxAllowedRuleLevelForMatching() {
    return maxAllowedRuleLevelForMatching;
  }

  public void setMaxAllowedRuleLevelForMatching(Integer maxAllowedRuleLevelForMatching) {
    this.maxAllowedRuleLevelForMatching = maxAllowedRuleLevelForMatching;
  }


  public CreateDomainRequestRuleBasedMatching attributeTypesSelector(UpdateDomainRequestRuleBasedMatchingAttributeTypesSelector attributeTypesSelector) {
    this.attributeTypesSelector = attributeTypesSelector;
    return this;
  }

  /**
   * Get attributeTypesSelector
   * @return attributeTypesSelector
   */
  @javax.annotation.Nullable
  public UpdateDomainRequestRuleBasedMatchingAttributeTypesSelector getAttributeTypesSelector() {
    return attributeTypesSelector;
  }

  public void setAttributeTypesSelector(UpdateDomainRequestRuleBasedMatchingAttributeTypesSelector attributeTypesSelector) {
    this.attributeTypesSelector = attributeTypesSelector;
  }


  public CreateDomainRequestRuleBasedMatching conflictResolution(ConflictResolution conflictResolution) {
    this.conflictResolution = conflictResolution;
    return this;
  }

  /**
   * Get conflictResolution
   * @return conflictResolution
   */
  @javax.annotation.Nullable
  public ConflictResolution getConflictResolution() {
    return conflictResolution;
  }

  public void setConflictResolution(ConflictResolution conflictResolution) {
    this.conflictResolution = conflictResolution;
  }


  public CreateDomainRequestRuleBasedMatching exportingConfig(ExportingConfig exportingConfig) {
    this.exportingConfig = exportingConfig;
    return this;
  }

  /**
   * Get exportingConfig
   * @return exportingConfig
   */
  @javax.annotation.Nullable
  public ExportingConfig getExportingConfig() {
    return exportingConfig;
  }

  public void setExportingConfig(ExportingConfig exportingConfig) {
    this.exportingConfig = exportingConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDomainRequestRuleBasedMatching createDomainRequestRuleBasedMatching = (CreateDomainRequestRuleBasedMatching) o;
    return Objects.equals(this.enabled, createDomainRequestRuleBasedMatching.enabled) &&
        Objects.equals(this.matchingRules, createDomainRequestRuleBasedMatching.matchingRules) &&
        Objects.equals(this.maxAllowedRuleLevelForMerging, createDomainRequestRuleBasedMatching.maxAllowedRuleLevelForMerging) &&
        Objects.equals(this.maxAllowedRuleLevelForMatching, createDomainRequestRuleBasedMatching.maxAllowedRuleLevelForMatching) &&
        Objects.equals(this.attributeTypesSelector, createDomainRequestRuleBasedMatching.attributeTypesSelector) &&
        Objects.equals(this.conflictResolution, createDomainRequestRuleBasedMatching.conflictResolution) &&
        Objects.equals(this.exportingConfig, createDomainRequestRuleBasedMatching.exportingConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, matchingRules, maxAllowedRuleLevelForMerging, maxAllowedRuleLevelForMatching, attributeTypesSelector, conflictResolution, exportingConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDomainRequestRuleBasedMatching {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    matchingRules: ").append(toIndentedString(matchingRules)).append("\n");
    sb.append("    maxAllowedRuleLevelForMerging: ").append(toIndentedString(maxAllowedRuleLevelForMerging)).append("\n");
    sb.append("    maxAllowedRuleLevelForMatching: ").append(toIndentedString(maxAllowedRuleLevelForMatching)).append("\n");
    sb.append("    attributeTypesSelector: ").append(toIndentedString(attributeTypesSelector)).append("\n");
    sb.append("    conflictResolution: ").append(toIndentedString(conflictResolution)).append("\n");
    sb.append("    exportingConfig: ").append(toIndentedString(exportingConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Enabled");
    openapiFields.add("MatchingRules");
    openapiFields.add("MaxAllowedRuleLevelForMerging");
    openapiFields.add("MaxAllowedRuleLevelForMatching");
    openapiFields.add("AttributeTypesSelector");
    openapiFields.add("ConflictResolution");
    openapiFields.add("ExportingConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Enabled");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDomainRequestRuleBasedMatching
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDomainRequestRuleBasedMatching.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDomainRequestRuleBasedMatching is not found in the empty JSON string", CreateDomainRequestRuleBasedMatching.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDomainRequestRuleBasedMatching.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDomainRequestRuleBasedMatching` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateDomainRequestRuleBasedMatching.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Enabled`
      Boolean.validateJsonElement(jsonObj.get("Enabled"));
      // validate the optional field `MatchingRules`
      if (jsonObj.get("MatchingRules") != null && !jsonObj.get("MatchingRules").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("MatchingRules"));
      }
      // validate the optional field `MaxAllowedRuleLevelForMerging`
      if (jsonObj.get("MaxAllowedRuleLevelForMerging") != null && !jsonObj.get("MaxAllowedRuleLevelForMerging").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxAllowedRuleLevelForMerging"));
      }
      // validate the optional field `MaxAllowedRuleLevelForMatching`
      if (jsonObj.get("MaxAllowedRuleLevelForMatching") != null && !jsonObj.get("MaxAllowedRuleLevelForMatching").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxAllowedRuleLevelForMatching"));
      }
      // validate the optional field `AttributeTypesSelector`
      if (jsonObj.get("AttributeTypesSelector") != null && !jsonObj.get("AttributeTypesSelector").isJsonNull()) {
        UpdateDomainRequestRuleBasedMatchingAttributeTypesSelector.validateJsonElement(jsonObj.get("AttributeTypesSelector"));
      }
      // validate the optional field `ConflictResolution`
      if (jsonObj.get("ConflictResolution") != null && !jsonObj.get("ConflictResolution").isJsonNull()) {
        ConflictResolution.validateJsonElement(jsonObj.get("ConflictResolution"));
      }
      // validate the optional field `ExportingConfig`
      if (jsonObj.get("ExportingConfig") != null && !jsonObj.get("ExportingConfig").isJsonNull()) {
        ExportingConfig.validateJsonElement(jsonObj.get("ExportingConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDomainRequestRuleBasedMatching.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDomainRequestRuleBasedMatching' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDomainRequestRuleBasedMatching> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDomainRequestRuleBasedMatching.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDomainRequestRuleBasedMatching>() {
           @Override
           public void write(JsonWriter out, CreateDomainRequestRuleBasedMatching value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDomainRequestRuleBasedMatching read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDomainRequestRuleBasedMatching given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDomainRequestRuleBasedMatching
   * @throws IOException if the JSON string is invalid with respect to CreateDomainRequestRuleBasedMatching
   */
  public static CreateDomainRequestRuleBasedMatching fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDomainRequestRuleBasedMatching.class);
  }

  /**
   * Convert an instance of CreateDomainRequestRuleBasedMatching to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

