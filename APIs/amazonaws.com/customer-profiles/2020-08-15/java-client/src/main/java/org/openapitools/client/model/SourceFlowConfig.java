/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SourceConnectorType;
import org.openapitools.client.model.SourceFlowConfigIncrementalPullConfig;
import org.openapitools.client.model.SourceFlowConfigSourceConnectorProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about the configuration of the source connector used in the flow.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SourceFlowConfig {
  public static final String SERIALIZED_NAME_CONNECTOR_PROFILE_NAME = "ConnectorProfileName";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_PROFILE_NAME)
  private String connectorProfileName;

  public static final String SERIALIZED_NAME_CONNECTOR_TYPE = "ConnectorType";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_TYPE)
  private SourceConnectorType connectorType;

  public static final String SERIALIZED_NAME_INCREMENTAL_PULL_CONFIG = "IncrementalPullConfig";
  @SerializedName(SERIALIZED_NAME_INCREMENTAL_PULL_CONFIG)
  private SourceFlowConfigIncrementalPullConfig incrementalPullConfig;

  public static final String SERIALIZED_NAME_SOURCE_CONNECTOR_PROPERTIES = "SourceConnectorProperties";
  @SerializedName(SERIALIZED_NAME_SOURCE_CONNECTOR_PROPERTIES)
  private SourceFlowConfigSourceConnectorProperties sourceConnectorProperties;

  public SourceFlowConfig() {
  }

  public SourceFlowConfig connectorProfileName(String connectorProfileName) {
    this.connectorProfileName = connectorProfileName;
    return this;
  }

  /**
   * Get connectorProfileName
   * @return connectorProfileName
   */
  @javax.annotation.Nullable
  public String getConnectorProfileName() {
    return connectorProfileName;
  }

  public void setConnectorProfileName(String connectorProfileName) {
    this.connectorProfileName = connectorProfileName;
  }


  public SourceFlowConfig connectorType(SourceConnectorType connectorType) {
    this.connectorType = connectorType;
    return this;
  }

  /**
   * Get connectorType
   * @return connectorType
   */
  @javax.annotation.Nonnull
  public SourceConnectorType getConnectorType() {
    return connectorType;
  }

  public void setConnectorType(SourceConnectorType connectorType) {
    this.connectorType = connectorType;
  }


  public SourceFlowConfig incrementalPullConfig(SourceFlowConfigIncrementalPullConfig incrementalPullConfig) {
    this.incrementalPullConfig = incrementalPullConfig;
    return this;
  }

  /**
   * Get incrementalPullConfig
   * @return incrementalPullConfig
   */
  @javax.annotation.Nullable
  public SourceFlowConfigIncrementalPullConfig getIncrementalPullConfig() {
    return incrementalPullConfig;
  }

  public void setIncrementalPullConfig(SourceFlowConfigIncrementalPullConfig incrementalPullConfig) {
    this.incrementalPullConfig = incrementalPullConfig;
  }


  public SourceFlowConfig sourceConnectorProperties(SourceFlowConfigSourceConnectorProperties sourceConnectorProperties) {
    this.sourceConnectorProperties = sourceConnectorProperties;
    return this;
  }

  /**
   * Get sourceConnectorProperties
   * @return sourceConnectorProperties
   */
  @javax.annotation.Nonnull
  public SourceFlowConfigSourceConnectorProperties getSourceConnectorProperties() {
    return sourceConnectorProperties;
  }

  public void setSourceConnectorProperties(SourceFlowConfigSourceConnectorProperties sourceConnectorProperties) {
    this.sourceConnectorProperties = sourceConnectorProperties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceFlowConfig sourceFlowConfig = (SourceFlowConfig) o;
    return Objects.equals(this.connectorProfileName, sourceFlowConfig.connectorProfileName) &&
        Objects.equals(this.connectorType, sourceFlowConfig.connectorType) &&
        Objects.equals(this.incrementalPullConfig, sourceFlowConfig.incrementalPullConfig) &&
        Objects.equals(this.sourceConnectorProperties, sourceFlowConfig.sourceConnectorProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectorProfileName, connectorType, incrementalPullConfig, sourceConnectorProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceFlowConfig {\n");
    sb.append("    connectorProfileName: ").append(toIndentedString(connectorProfileName)).append("\n");
    sb.append("    connectorType: ").append(toIndentedString(connectorType)).append("\n");
    sb.append("    incrementalPullConfig: ").append(toIndentedString(incrementalPullConfig)).append("\n");
    sb.append("    sourceConnectorProperties: ").append(toIndentedString(sourceConnectorProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ConnectorProfileName");
    openapiFields.add("ConnectorType");
    openapiFields.add("IncrementalPullConfig");
    openapiFields.add("SourceConnectorProperties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ConnectorType");
    openapiRequiredFields.add("SourceConnectorProperties");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SourceFlowConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SourceFlowConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceFlowConfig is not found in the empty JSON string", SourceFlowConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SourceFlowConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SourceFlowConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SourceFlowConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ConnectorProfileName`
      if (jsonObj.get("ConnectorProfileName") != null && !jsonObj.get("ConnectorProfileName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ConnectorProfileName"));
      }
      // validate the required field `ConnectorType`
      SourceConnectorType.validateJsonElement(jsonObj.get("ConnectorType"));
      // validate the optional field `IncrementalPullConfig`
      if (jsonObj.get("IncrementalPullConfig") != null && !jsonObj.get("IncrementalPullConfig").isJsonNull()) {
        SourceFlowConfigIncrementalPullConfig.validateJsonElement(jsonObj.get("IncrementalPullConfig"));
      }
      // validate the required field `SourceConnectorProperties`
      SourceFlowConfigSourceConnectorProperties.validateJsonElement(jsonObj.get("SourceConnectorProperties"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceFlowConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceFlowConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceFlowConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceFlowConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceFlowConfig>() {
           @Override
           public void write(JsonWriter out, SourceFlowConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceFlowConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SourceFlowConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SourceFlowConfig
   * @throws IOException if the JSON string is invalid with respect to SourceFlowConfig
   */
  public static SourceFlowConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceFlowConfig.class);
  }

  /**
   * Convert an instance of SourceFlowConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

