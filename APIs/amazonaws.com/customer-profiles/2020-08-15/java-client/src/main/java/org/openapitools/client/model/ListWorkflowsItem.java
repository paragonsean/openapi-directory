/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Status;
import org.openapitools.client.model.WorkflowType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A workflow in list of workflows.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListWorkflowsItem {
  public static final String SERIALIZED_NAME_WORKFLOW_TYPE = "WorkflowType";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_TYPE)
  private WorkflowType workflowType;

  public static final String SERIALIZED_NAME_WORKFLOW_ID = "WorkflowId";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_ID)
  private String workflowId;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status status;

  public static final String SERIALIZED_NAME_STATUS_DESCRIPTION = "StatusDescription";
  @SerializedName(SERIALIZED_NAME_STATUS_DESCRIPTION)
  private String statusDescription;

  public static final String SERIALIZED_NAME_CREATED_AT = "CreatedAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_LAST_UPDATED_AT = "LastUpdatedAt";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_AT)
  private OffsetDateTime lastUpdatedAt;

  public ListWorkflowsItem() {
  }

  public ListWorkflowsItem workflowType(WorkflowType workflowType) {
    this.workflowType = workflowType;
    return this;
  }

  /**
   * Get workflowType
   * @return workflowType
   */
  @javax.annotation.Nonnull
  public WorkflowType getWorkflowType() {
    return workflowType;
  }

  public void setWorkflowType(WorkflowType workflowType) {
    this.workflowType = workflowType;
  }


  public ListWorkflowsItem workflowId(String workflowId) {
    this.workflowId = workflowId;
    return this;
  }

  /**
   * Get workflowId
   * @return workflowId
   */
  @javax.annotation.Nonnull
  public String getWorkflowId() {
    return workflowId;
  }

  public void setWorkflowId(String workflowId) {
    this.workflowId = workflowId;
  }


  public ListWorkflowsItem status(Status status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public Status getStatus() {
    return status;
  }

  public void setStatus(Status status) {
    this.status = status;
  }


  public ListWorkflowsItem statusDescription(String statusDescription) {
    this.statusDescription = statusDescription;
    return this;
  }

  /**
   * Get statusDescription
   * @return statusDescription
   */
  @javax.annotation.Nonnull
  public String getStatusDescription() {
    return statusDescription;
  }

  public void setStatusDescription(String statusDescription) {
    this.statusDescription = statusDescription;
  }


  public ListWorkflowsItem createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public ListWorkflowsItem lastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
    return this;
  }

  /**
   * Get lastUpdatedAt
   * @return lastUpdatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastUpdatedAt() {
    return lastUpdatedAt;
  }

  public void setLastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListWorkflowsItem listWorkflowsItem = (ListWorkflowsItem) o;
    return Objects.equals(this.workflowType, listWorkflowsItem.workflowType) &&
        Objects.equals(this.workflowId, listWorkflowsItem.workflowId) &&
        Objects.equals(this.status, listWorkflowsItem.status) &&
        Objects.equals(this.statusDescription, listWorkflowsItem.statusDescription) &&
        Objects.equals(this.createdAt, listWorkflowsItem.createdAt) &&
        Objects.equals(this.lastUpdatedAt, listWorkflowsItem.lastUpdatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(workflowType, workflowId, status, statusDescription, createdAt, lastUpdatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListWorkflowsItem {\n");
    sb.append("    workflowType: ").append(toIndentedString(workflowType)).append("\n");
    sb.append("    workflowId: ").append(toIndentedString(workflowId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusDescription: ").append(toIndentedString(statusDescription)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    lastUpdatedAt: ").append(toIndentedString(lastUpdatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("WorkflowType");
    openapiFields.add("WorkflowId");
    openapiFields.add("Status");
    openapiFields.add("StatusDescription");
    openapiFields.add("CreatedAt");
    openapiFields.add("LastUpdatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("WorkflowType");
    openapiRequiredFields.add("WorkflowId");
    openapiRequiredFields.add("Status");
    openapiRequiredFields.add("StatusDescription");
    openapiRequiredFields.add("CreatedAt");
    openapiRequiredFields.add("LastUpdatedAt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListWorkflowsItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListWorkflowsItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListWorkflowsItem is not found in the empty JSON string", ListWorkflowsItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListWorkflowsItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListWorkflowsItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListWorkflowsItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `WorkflowType`
      WorkflowType.validateJsonElement(jsonObj.get("WorkflowType"));
      // validate the required field `WorkflowId`
      String.validateJsonElement(jsonObj.get("WorkflowId"));
      // validate the required field `Status`
      Status.validateJsonElement(jsonObj.get("Status"));
      // validate the required field `StatusDescription`
      String.validateJsonElement(jsonObj.get("StatusDescription"));
      // validate the required field `CreatedAt`
      OffsetDateTime.validateJsonElement(jsonObj.get("CreatedAt"));
      // validate the required field `LastUpdatedAt`
      OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdatedAt"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListWorkflowsItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListWorkflowsItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListWorkflowsItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListWorkflowsItem.class));

       return (TypeAdapter<T>) new TypeAdapter<ListWorkflowsItem>() {
           @Override
           public void write(JsonWriter out, ListWorkflowsItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListWorkflowsItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListWorkflowsItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListWorkflowsItem
   * @throws IOException if the JSON string is invalid with respect to ListWorkflowsItem
   */
  public static ListWorkflowsItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListWorkflowsItem.class);
  }

  /**
   * Convert an instance of ListWorkflowsItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

