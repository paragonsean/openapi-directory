/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.CreateDomainResponseMatching;
import org.openapitools.client.model.CreateDomainResponseRuleBasedMatching;
import org.openapitools.client.model.GetDomainResponseStats;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetDomainResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetDomainResponse {
  public static final String SERIALIZED_NAME_DOMAIN_NAME = "DomainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private String domainName;

  public static final String SERIALIZED_NAME_DEFAULT_EXPIRATION_DAYS = "DefaultExpirationDays";
  @SerializedName(SERIALIZED_NAME_DEFAULT_EXPIRATION_DAYS)
  private Integer defaultExpirationDays;

  public static final String SERIALIZED_NAME_DEFAULT_ENCRYPTION_KEY = "DefaultEncryptionKey";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ENCRYPTION_KEY)
  private String defaultEncryptionKey;

  public static final String SERIALIZED_NAME_DEAD_LETTER_QUEUE_URL = "DeadLetterQueueUrl";
  @SerializedName(SERIALIZED_NAME_DEAD_LETTER_QUEUE_URL)
  private String deadLetterQueueUrl;

  public static final String SERIALIZED_NAME_STATS = "Stats";
  @SerializedName(SERIALIZED_NAME_STATS)
  private GetDomainResponseStats stats;

  public static final String SERIALIZED_NAME_MATCHING = "Matching";
  @SerializedName(SERIALIZED_NAME_MATCHING)
  private CreateDomainResponseMatching matching;

  public static final String SERIALIZED_NAME_RULE_BASED_MATCHING = "RuleBasedMatching";
  @SerializedName(SERIALIZED_NAME_RULE_BASED_MATCHING)
  private CreateDomainResponseRuleBasedMatching ruleBasedMatching;

  public static final String SERIALIZED_NAME_CREATED_AT = "CreatedAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_LAST_UPDATED_AT = "LastUpdatedAt";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_AT)
  private OffsetDateTime lastUpdatedAt;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public GetDomainResponse() {
  }

  public GetDomainResponse domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * Get domainName
   * @return domainName
   */
  @javax.annotation.Nonnull
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  public GetDomainResponse defaultExpirationDays(Integer defaultExpirationDays) {
    this.defaultExpirationDays = defaultExpirationDays;
    return this;
  }

  /**
   * Get defaultExpirationDays
   * @return defaultExpirationDays
   */
  @javax.annotation.Nullable
  public Integer getDefaultExpirationDays() {
    return defaultExpirationDays;
  }

  public void setDefaultExpirationDays(Integer defaultExpirationDays) {
    this.defaultExpirationDays = defaultExpirationDays;
  }


  public GetDomainResponse defaultEncryptionKey(String defaultEncryptionKey) {
    this.defaultEncryptionKey = defaultEncryptionKey;
    return this;
  }

  /**
   * Get defaultEncryptionKey
   * @return defaultEncryptionKey
   */
  @javax.annotation.Nullable
  public String getDefaultEncryptionKey() {
    return defaultEncryptionKey;
  }

  public void setDefaultEncryptionKey(String defaultEncryptionKey) {
    this.defaultEncryptionKey = defaultEncryptionKey;
  }


  public GetDomainResponse deadLetterQueueUrl(String deadLetterQueueUrl) {
    this.deadLetterQueueUrl = deadLetterQueueUrl;
    return this;
  }

  /**
   * Get deadLetterQueueUrl
   * @return deadLetterQueueUrl
   */
  @javax.annotation.Nullable
  public String getDeadLetterQueueUrl() {
    return deadLetterQueueUrl;
  }

  public void setDeadLetterQueueUrl(String deadLetterQueueUrl) {
    this.deadLetterQueueUrl = deadLetterQueueUrl;
  }


  public GetDomainResponse stats(GetDomainResponseStats stats) {
    this.stats = stats;
    return this;
  }

  /**
   * Get stats
   * @return stats
   */
  @javax.annotation.Nullable
  public GetDomainResponseStats getStats() {
    return stats;
  }

  public void setStats(GetDomainResponseStats stats) {
    this.stats = stats;
  }


  public GetDomainResponse matching(CreateDomainResponseMatching matching) {
    this.matching = matching;
    return this;
  }

  /**
   * Get matching
   * @return matching
   */
  @javax.annotation.Nullable
  public CreateDomainResponseMatching getMatching() {
    return matching;
  }

  public void setMatching(CreateDomainResponseMatching matching) {
    this.matching = matching;
  }


  public GetDomainResponse ruleBasedMatching(CreateDomainResponseRuleBasedMatching ruleBasedMatching) {
    this.ruleBasedMatching = ruleBasedMatching;
    return this;
  }

  /**
   * Get ruleBasedMatching
   * @return ruleBasedMatching
   */
  @javax.annotation.Nullable
  public CreateDomainResponseRuleBasedMatching getRuleBasedMatching() {
    return ruleBasedMatching;
  }

  public void setRuleBasedMatching(CreateDomainResponseRuleBasedMatching ruleBasedMatching) {
    this.ruleBasedMatching = ruleBasedMatching;
  }


  public GetDomainResponse createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public GetDomainResponse lastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
    return this;
  }

  /**
   * Get lastUpdatedAt
   * @return lastUpdatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastUpdatedAt() {
    return lastUpdatedAt;
  }

  public void setLastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
  }


  public GetDomainResponse tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetDomainResponse getDomainResponse = (GetDomainResponse) o;
    return Objects.equals(this.domainName, getDomainResponse.domainName) &&
        Objects.equals(this.defaultExpirationDays, getDomainResponse.defaultExpirationDays) &&
        Objects.equals(this.defaultEncryptionKey, getDomainResponse.defaultEncryptionKey) &&
        Objects.equals(this.deadLetterQueueUrl, getDomainResponse.deadLetterQueueUrl) &&
        Objects.equals(this.stats, getDomainResponse.stats) &&
        Objects.equals(this.matching, getDomainResponse.matching) &&
        Objects.equals(this.ruleBasedMatching, getDomainResponse.ruleBasedMatching) &&
        Objects.equals(this.createdAt, getDomainResponse.createdAt) &&
        Objects.equals(this.lastUpdatedAt, getDomainResponse.lastUpdatedAt) &&
        Objects.equals(this.tags, getDomainResponse.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainName, defaultExpirationDays, defaultEncryptionKey, deadLetterQueueUrl, stats, matching, ruleBasedMatching, createdAt, lastUpdatedAt, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetDomainResponse {\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    defaultExpirationDays: ").append(toIndentedString(defaultExpirationDays)).append("\n");
    sb.append("    defaultEncryptionKey: ").append(toIndentedString(defaultEncryptionKey)).append("\n");
    sb.append("    deadLetterQueueUrl: ").append(toIndentedString(deadLetterQueueUrl)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("    matching: ").append(toIndentedString(matching)).append("\n");
    sb.append("    ruleBasedMatching: ").append(toIndentedString(ruleBasedMatching)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    lastUpdatedAt: ").append(toIndentedString(lastUpdatedAt)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DomainName");
    openapiFields.add("DefaultExpirationDays");
    openapiFields.add("DefaultEncryptionKey");
    openapiFields.add("DeadLetterQueueUrl");
    openapiFields.add("Stats");
    openapiFields.add("Matching");
    openapiFields.add("RuleBasedMatching");
    openapiFields.add("CreatedAt");
    openapiFields.add("LastUpdatedAt");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DomainName");
    openapiRequiredFields.add("CreatedAt");
    openapiRequiredFields.add("LastUpdatedAt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetDomainResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetDomainResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetDomainResponse is not found in the empty JSON string", GetDomainResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetDomainResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetDomainResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetDomainResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DomainName`
      String.validateJsonElement(jsonObj.get("DomainName"));
      // validate the optional field `DefaultExpirationDays`
      if (jsonObj.get("DefaultExpirationDays") != null && !jsonObj.get("DefaultExpirationDays").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("DefaultExpirationDays"));
      }
      // validate the optional field `DefaultEncryptionKey`
      if (jsonObj.get("DefaultEncryptionKey") != null && !jsonObj.get("DefaultEncryptionKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DefaultEncryptionKey"));
      }
      // validate the optional field `DeadLetterQueueUrl`
      if (jsonObj.get("DeadLetterQueueUrl") != null && !jsonObj.get("DeadLetterQueueUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DeadLetterQueueUrl"));
      }
      // validate the optional field `Stats`
      if (jsonObj.get("Stats") != null && !jsonObj.get("Stats").isJsonNull()) {
        GetDomainResponseStats.validateJsonElement(jsonObj.get("Stats"));
      }
      // validate the optional field `Matching`
      if (jsonObj.get("Matching") != null && !jsonObj.get("Matching").isJsonNull()) {
        CreateDomainResponseMatching.validateJsonElement(jsonObj.get("Matching"));
      }
      // validate the optional field `RuleBasedMatching`
      if (jsonObj.get("RuleBasedMatching") != null && !jsonObj.get("RuleBasedMatching").isJsonNull()) {
        CreateDomainResponseRuleBasedMatching.validateJsonElement(jsonObj.get("RuleBasedMatching"));
      }
      // validate the required field `CreatedAt`
      OffsetDateTime.validateJsonElement(jsonObj.get("CreatedAt"));
      // validate the required field `LastUpdatedAt`
      OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdatedAt"));
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetDomainResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetDomainResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetDomainResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetDomainResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetDomainResponse>() {
           @Override
           public void write(JsonWriter out, GetDomainResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetDomainResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetDomainResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetDomainResponse
   * @throws IOException if the JSON string is invalid with respect to GetDomainResponse
   */
  public static GetDomainResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetDomainResponse.class);
  }

  /**
   * Convert an instance of GetDomainResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

