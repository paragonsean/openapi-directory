/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MarketoConnectorOperator;
import org.openapitools.client.model.S3ConnectorOperator;
import org.openapitools.client.model.SalesforceConnectorOperator;
import org.openapitools.client.model.ServiceNowConnectorOperator;
import org.openapitools.client.model.ZendeskConnectorOperator;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TaskConnectorOperator
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TaskConnectorOperator {
  public static final String SERIALIZED_NAME_MARKETO = "Marketo";
  @SerializedName(SERIALIZED_NAME_MARKETO)
  private MarketoConnectorOperator marketo;

  public static final String SERIALIZED_NAME_S3 = "S3";
  @SerializedName(SERIALIZED_NAME_S3)
  private S3ConnectorOperator S3;

  public static final String SERIALIZED_NAME_SALESFORCE = "Salesforce";
  @SerializedName(SERIALIZED_NAME_SALESFORCE)
  private SalesforceConnectorOperator salesforce;

  public static final String SERIALIZED_NAME_SERVICE_NOW = "ServiceNow";
  @SerializedName(SERIALIZED_NAME_SERVICE_NOW)
  private ServiceNowConnectorOperator serviceNow;

  public static final String SERIALIZED_NAME_ZENDESK = "Zendesk";
  @SerializedName(SERIALIZED_NAME_ZENDESK)
  private ZendeskConnectorOperator zendesk;

  public TaskConnectorOperator() {
  }

  public TaskConnectorOperator marketo(MarketoConnectorOperator marketo) {
    this.marketo = marketo;
    return this;
  }

  /**
   * Get marketo
   * @return marketo
   */
  @javax.annotation.Nullable
  public MarketoConnectorOperator getMarketo() {
    return marketo;
  }

  public void setMarketo(MarketoConnectorOperator marketo) {
    this.marketo = marketo;
  }


  public TaskConnectorOperator S3(S3ConnectorOperator S3) {
    this.S3 = S3;
    return this;
  }

  /**
   * Get S3
   * @return S3
   */
  @javax.annotation.Nullable
  public S3ConnectorOperator getS3() {
    return S3;
  }

  public void setS3(S3ConnectorOperator S3) {
    this.S3 = S3;
  }


  public TaskConnectorOperator salesforce(SalesforceConnectorOperator salesforce) {
    this.salesforce = salesforce;
    return this;
  }

  /**
   * Get salesforce
   * @return salesforce
   */
  @javax.annotation.Nullable
  public SalesforceConnectorOperator getSalesforce() {
    return salesforce;
  }

  public void setSalesforce(SalesforceConnectorOperator salesforce) {
    this.salesforce = salesforce;
  }


  public TaskConnectorOperator serviceNow(ServiceNowConnectorOperator serviceNow) {
    this.serviceNow = serviceNow;
    return this;
  }

  /**
   * Get serviceNow
   * @return serviceNow
   */
  @javax.annotation.Nullable
  public ServiceNowConnectorOperator getServiceNow() {
    return serviceNow;
  }

  public void setServiceNow(ServiceNowConnectorOperator serviceNow) {
    this.serviceNow = serviceNow;
  }


  public TaskConnectorOperator zendesk(ZendeskConnectorOperator zendesk) {
    this.zendesk = zendesk;
    return this;
  }

  /**
   * Get zendesk
   * @return zendesk
   */
  @javax.annotation.Nullable
  public ZendeskConnectorOperator getZendesk() {
    return zendesk;
  }

  public void setZendesk(ZendeskConnectorOperator zendesk) {
    this.zendesk = zendesk;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskConnectorOperator taskConnectorOperator = (TaskConnectorOperator) o;
    return Objects.equals(this.marketo, taskConnectorOperator.marketo) &&
        Objects.equals(this.S3, taskConnectorOperator.S3) &&
        Objects.equals(this.salesforce, taskConnectorOperator.salesforce) &&
        Objects.equals(this.serviceNow, taskConnectorOperator.serviceNow) &&
        Objects.equals(this.zendesk, taskConnectorOperator.zendesk);
  }

  @Override
  public int hashCode() {
    return Objects.hash(marketo, S3, salesforce, serviceNow, zendesk);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskConnectorOperator {\n");
    sb.append("    marketo: ").append(toIndentedString(marketo)).append("\n");
    sb.append("    S3: ").append(toIndentedString(S3)).append("\n");
    sb.append("    salesforce: ").append(toIndentedString(salesforce)).append("\n");
    sb.append("    serviceNow: ").append(toIndentedString(serviceNow)).append("\n");
    sb.append("    zendesk: ").append(toIndentedString(zendesk)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Marketo");
    openapiFields.add("S3");
    openapiFields.add("Salesforce");
    openapiFields.add("ServiceNow");
    openapiFields.add("Zendesk");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TaskConnectorOperator
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaskConnectorOperator.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaskConnectorOperator is not found in the empty JSON string", TaskConnectorOperator.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaskConnectorOperator.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaskConnectorOperator` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Marketo`
      if (jsonObj.get("Marketo") != null && !jsonObj.get("Marketo").isJsonNull()) {
        MarketoConnectorOperator.validateJsonElement(jsonObj.get("Marketo"));
      }
      // validate the optional field `S3`
      if (jsonObj.get("S3") != null && !jsonObj.get("S3").isJsonNull()) {
        S3ConnectorOperator.validateJsonElement(jsonObj.get("S3"));
      }
      // validate the optional field `Salesforce`
      if (jsonObj.get("Salesforce") != null && !jsonObj.get("Salesforce").isJsonNull()) {
        SalesforceConnectorOperator.validateJsonElement(jsonObj.get("Salesforce"));
      }
      // validate the optional field `ServiceNow`
      if (jsonObj.get("ServiceNow") != null && !jsonObj.get("ServiceNow").isJsonNull()) {
        ServiceNowConnectorOperator.validateJsonElement(jsonObj.get("ServiceNow"));
      }
      // validate the optional field `Zendesk`
      if (jsonObj.get("Zendesk") != null && !jsonObj.get("Zendesk").isJsonNull()) {
        ZendeskConnectorOperator.validateJsonElement(jsonObj.get("Zendesk"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaskConnectorOperator.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaskConnectorOperator' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaskConnectorOperator> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaskConnectorOperator.class));

       return (TypeAdapter<T>) new TypeAdapter<TaskConnectorOperator>() {
           @Override
           public void write(JsonWriter out, TaskConnectorOperator value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaskConnectorOperator read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TaskConnectorOperator given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TaskConnectorOperator
   * @throws IOException if the JSON string is invalid with respect to TaskConnectorOperator
   */
  public static TaskConnectorOperator fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaskConnectorOperator.class);
  }

  /**
   * Convert an instance of TaskConnectorOperator to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

