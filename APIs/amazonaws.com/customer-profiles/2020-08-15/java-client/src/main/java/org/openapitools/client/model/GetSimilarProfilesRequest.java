/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetSimilarProfilesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetSimilarProfilesRequest {
  /**
   * Specify the type of matching to get similar profiles for.
   */
  @JsonAdapter(MatchTypeEnum.Adapter.class)
  public enum MatchTypeEnum {
    RULE_BASED_MATCHING("RULE_BASED_MATCHING"),
    
    ML_BASED_MATCHING("ML_BASED_MATCHING");

    private String value;

    MatchTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MatchTypeEnum fromValue(String value) {
      for (MatchTypeEnum b : MatchTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MatchTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MatchTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MatchTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MatchTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MatchTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MATCH_TYPE = "MatchType";
  @SerializedName(SERIALIZED_NAME_MATCH_TYPE)
  private MatchTypeEnum matchType;

  public static final String SERIALIZED_NAME_SEARCH_KEY = "SearchKey";
  @SerializedName(SERIALIZED_NAME_SEARCH_KEY)
  private String searchKey;

  public static final String SERIALIZED_NAME_SEARCH_VALUE = "SearchValue";
  @SerializedName(SERIALIZED_NAME_SEARCH_VALUE)
  private String searchValue;

  public GetSimilarProfilesRequest() {
  }

  public GetSimilarProfilesRequest matchType(MatchTypeEnum matchType) {
    this.matchType = matchType;
    return this;
  }

  /**
   * Specify the type of matching to get similar profiles for.
   * @return matchType
   */
  @javax.annotation.Nonnull
  public MatchTypeEnum getMatchType() {
    return matchType;
  }

  public void setMatchType(MatchTypeEnum matchType) {
    this.matchType = matchType;
  }


  public GetSimilarProfilesRequest searchKey(String searchKey) {
    this.searchKey = searchKey;
    return this;
  }

  /**
   * The string indicating the search key to be used.
   * @return searchKey
   */
  @javax.annotation.Nonnull
  public String getSearchKey() {
    return searchKey;
  }

  public void setSearchKey(String searchKey) {
    this.searchKey = searchKey;
  }


  public GetSimilarProfilesRequest searchValue(String searchValue) {
    this.searchValue = searchValue;
    return this;
  }

  /**
   * The string based on &lt;code&gt;SearchKey&lt;/code&gt; to be searched for similar profiles.
   * @return searchValue
   */
  @javax.annotation.Nonnull
  public String getSearchValue() {
    return searchValue;
  }

  public void setSearchValue(String searchValue) {
    this.searchValue = searchValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetSimilarProfilesRequest getSimilarProfilesRequest = (GetSimilarProfilesRequest) o;
    return Objects.equals(this.matchType, getSimilarProfilesRequest.matchType) &&
        Objects.equals(this.searchKey, getSimilarProfilesRequest.searchKey) &&
        Objects.equals(this.searchValue, getSimilarProfilesRequest.searchValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(matchType, searchKey, searchValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetSimilarProfilesRequest {\n");
    sb.append("    matchType: ").append(toIndentedString(matchType)).append("\n");
    sb.append("    searchKey: ").append(toIndentedString(searchKey)).append("\n");
    sb.append("    searchValue: ").append(toIndentedString(searchValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MatchType");
    openapiFields.add("SearchKey");
    openapiFields.add("SearchValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("MatchType");
    openapiRequiredFields.add("SearchKey");
    openapiRequiredFields.add("SearchValue");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetSimilarProfilesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetSimilarProfilesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetSimilarProfilesRequest is not found in the empty JSON string", GetSimilarProfilesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetSimilarProfilesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetSimilarProfilesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetSimilarProfilesRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("MatchType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MatchType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MatchType").toString()));
      }
      // validate the required field `MatchType`
      MatchTypeEnum.validateJsonElement(jsonObj.get("MatchType"));
      if (!jsonObj.get("SearchKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SearchKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SearchKey").toString()));
      }
      if (!jsonObj.get("SearchValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SearchValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SearchValue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetSimilarProfilesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetSimilarProfilesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetSimilarProfilesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetSimilarProfilesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetSimilarProfilesRequest>() {
           @Override
           public void write(JsonWriter out, GetSimilarProfilesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetSimilarProfilesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetSimilarProfilesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetSimilarProfilesRequest
   * @throws IOException if the JSON string is invalid with respect to GetSimilarProfilesRequest
   */
  public static GetSimilarProfilesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetSimilarProfilesRequest.class);
  }

  /**
   * Convert an instance of GetSimilarProfilesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

