/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetAutoMergingPreviewResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetAutoMergingPreviewResponse {
  public static final String SERIALIZED_NAME_DOMAIN_NAME = "DomainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private String domainName;

  public static final String SERIALIZED_NAME_NUMBER_OF_MATCHES_IN_SAMPLE = "NumberOfMatchesInSample";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_MATCHES_IN_SAMPLE)
  private Integer numberOfMatchesInSample;

  public static final String SERIALIZED_NAME_NUMBER_OF_PROFILES_IN_SAMPLE = "NumberOfProfilesInSample";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_PROFILES_IN_SAMPLE)
  private Integer numberOfProfilesInSample;

  public static final String SERIALIZED_NAME_NUMBER_OF_PROFILES_WILL_BE_MERGED = "NumberOfProfilesWillBeMerged";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_PROFILES_WILL_BE_MERGED)
  private Integer numberOfProfilesWillBeMerged;

  public GetAutoMergingPreviewResponse() {
  }

  public GetAutoMergingPreviewResponse domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * Get domainName
   * @return domainName
   */
  @javax.annotation.Nonnull
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  public GetAutoMergingPreviewResponse numberOfMatchesInSample(Integer numberOfMatchesInSample) {
    this.numberOfMatchesInSample = numberOfMatchesInSample;
    return this;
  }

  /**
   * Get numberOfMatchesInSample
   * @return numberOfMatchesInSample
   */
  @javax.annotation.Nullable
  public Integer getNumberOfMatchesInSample() {
    return numberOfMatchesInSample;
  }

  public void setNumberOfMatchesInSample(Integer numberOfMatchesInSample) {
    this.numberOfMatchesInSample = numberOfMatchesInSample;
  }


  public GetAutoMergingPreviewResponse numberOfProfilesInSample(Integer numberOfProfilesInSample) {
    this.numberOfProfilesInSample = numberOfProfilesInSample;
    return this;
  }

  /**
   * Get numberOfProfilesInSample
   * @return numberOfProfilesInSample
   */
  @javax.annotation.Nullable
  public Integer getNumberOfProfilesInSample() {
    return numberOfProfilesInSample;
  }

  public void setNumberOfProfilesInSample(Integer numberOfProfilesInSample) {
    this.numberOfProfilesInSample = numberOfProfilesInSample;
  }


  public GetAutoMergingPreviewResponse numberOfProfilesWillBeMerged(Integer numberOfProfilesWillBeMerged) {
    this.numberOfProfilesWillBeMerged = numberOfProfilesWillBeMerged;
    return this;
  }

  /**
   * Get numberOfProfilesWillBeMerged
   * @return numberOfProfilesWillBeMerged
   */
  @javax.annotation.Nullable
  public Integer getNumberOfProfilesWillBeMerged() {
    return numberOfProfilesWillBeMerged;
  }

  public void setNumberOfProfilesWillBeMerged(Integer numberOfProfilesWillBeMerged) {
    this.numberOfProfilesWillBeMerged = numberOfProfilesWillBeMerged;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetAutoMergingPreviewResponse getAutoMergingPreviewResponse = (GetAutoMergingPreviewResponse) o;
    return Objects.equals(this.domainName, getAutoMergingPreviewResponse.domainName) &&
        Objects.equals(this.numberOfMatchesInSample, getAutoMergingPreviewResponse.numberOfMatchesInSample) &&
        Objects.equals(this.numberOfProfilesInSample, getAutoMergingPreviewResponse.numberOfProfilesInSample) &&
        Objects.equals(this.numberOfProfilesWillBeMerged, getAutoMergingPreviewResponse.numberOfProfilesWillBeMerged);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainName, numberOfMatchesInSample, numberOfProfilesInSample, numberOfProfilesWillBeMerged);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetAutoMergingPreviewResponse {\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    numberOfMatchesInSample: ").append(toIndentedString(numberOfMatchesInSample)).append("\n");
    sb.append("    numberOfProfilesInSample: ").append(toIndentedString(numberOfProfilesInSample)).append("\n");
    sb.append("    numberOfProfilesWillBeMerged: ").append(toIndentedString(numberOfProfilesWillBeMerged)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DomainName");
    openapiFields.add("NumberOfMatchesInSample");
    openapiFields.add("NumberOfProfilesInSample");
    openapiFields.add("NumberOfProfilesWillBeMerged");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DomainName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetAutoMergingPreviewResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetAutoMergingPreviewResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetAutoMergingPreviewResponse is not found in the empty JSON string", GetAutoMergingPreviewResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetAutoMergingPreviewResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetAutoMergingPreviewResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetAutoMergingPreviewResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DomainName`
      String.validateJsonElement(jsonObj.get("DomainName"));
      // validate the optional field `NumberOfMatchesInSample`
      if (jsonObj.get("NumberOfMatchesInSample") != null && !jsonObj.get("NumberOfMatchesInSample").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumberOfMatchesInSample"));
      }
      // validate the optional field `NumberOfProfilesInSample`
      if (jsonObj.get("NumberOfProfilesInSample") != null && !jsonObj.get("NumberOfProfilesInSample").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumberOfProfilesInSample"));
      }
      // validate the optional field `NumberOfProfilesWillBeMerged`
      if (jsonObj.get("NumberOfProfilesWillBeMerged") != null && !jsonObj.get("NumberOfProfilesWillBeMerged").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumberOfProfilesWillBeMerged"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetAutoMergingPreviewResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetAutoMergingPreviewResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetAutoMergingPreviewResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetAutoMergingPreviewResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetAutoMergingPreviewResponse>() {
           @Override
           public void write(JsonWriter out, GetAutoMergingPreviewResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetAutoMergingPreviewResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetAutoMergingPreviewResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetAutoMergingPreviewResponse
   * @throws IOException if the JSON string is invalid with respect to GetAutoMergingPreviewResponse
   */
  public static GetAutoMergingPreviewResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetAutoMergingPreviewResponse.class);
  }

  /**
   * Convert an instance of GetAutoMergingPreviewResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

