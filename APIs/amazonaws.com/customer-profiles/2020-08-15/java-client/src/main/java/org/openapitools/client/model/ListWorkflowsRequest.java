/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListWorkflowsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListWorkflowsRequest {
  /**
   * The type of workflow. The only supported value is APPFLOW_INTEGRATION.
   */
  @JsonAdapter(WorkflowTypeEnum.Adapter.class)
  public enum WorkflowTypeEnum {
    APPFLOW_INTEGRATION("APPFLOW_INTEGRATION");

    private String value;

    WorkflowTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WorkflowTypeEnum fromValue(String value) {
      for (WorkflowTypeEnum b : WorkflowTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WorkflowTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WorkflowTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WorkflowTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WorkflowTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WorkflowTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WORKFLOW_TYPE = "WorkflowType";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_TYPE)
  private WorkflowTypeEnum workflowType;

  /**
   * Status of workflow execution.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NOT_STARTED("NOT_STARTED"),
    
    IN_PROGRESS("IN_PROGRESS"),
    
    COMPLETE("COMPLETE"),
    
    FAILED("FAILED"),
    
    SPLIT("SPLIT"),
    
    RETRY("RETRY"),
    
    CANCELLED("CANCELLED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_QUERY_START_DATE = "QueryStartDate";
  @SerializedName(SERIALIZED_NAME_QUERY_START_DATE)
  private OffsetDateTime queryStartDate;

  public static final String SERIALIZED_NAME_QUERY_END_DATE = "QueryEndDate";
  @SerializedName(SERIALIZED_NAME_QUERY_END_DATE)
  private OffsetDateTime queryEndDate;

  public ListWorkflowsRequest() {
  }

  public ListWorkflowsRequest workflowType(WorkflowTypeEnum workflowType) {
    this.workflowType = workflowType;
    return this;
  }

  /**
   * The type of workflow. The only supported value is APPFLOW_INTEGRATION.
   * @return workflowType
   */
  @javax.annotation.Nullable
  public WorkflowTypeEnum getWorkflowType() {
    return workflowType;
  }

  public void setWorkflowType(WorkflowTypeEnum workflowType) {
    this.workflowType = workflowType;
  }


  public ListWorkflowsRequest status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Status of workflow execution.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public ListWorkflowsRequest queryStartDate(OffsetDateTime queryStartDate) {
    this.queryStartDate = queryStartDate;
    return this;
  }

  /**
   * Retrieve workflows started after timestamp.
   * @return queryStartDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getQueryStartDate() {
    return queryStartDate;
  }

  public void setQueryStartDate(OffsetDateTime queryStartDate) {
    this.queryStartDate = queryStartDate;
  }


  public ListWorkflowsRequest queryEndDate(OffsetDateTime queryEndDate) {
    this.queryEndDate = queryEndDate;
    return this;
  }

  /**
   * Retrieve workflows ended after timestamp.
   * @return queryEndDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getQueryEndDate() {
    return queryEndDate;
  }

  public void setQueryEndDate(OffsetDateTime queryEndDate) {
    this.queryEndDate = queryEndDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListWorkflowsRequest listWorkflowsRequest = (ListWorkflowsRequest) o;
    return Objects.equals(this.workflowType, listWorkflowsRequest.workflowType) &&
        Objects.equals(this.status, listWorkflowsRequest.status) &&
        Objects.equals(this.queryStartDate, listWorkflowsRequest.queryStartDate) &&
        Objects.equals(this.queryEndDate, listWorkflowsRequest.queryEndDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(workflowType, status, queryStartDate, queryEndDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListWorkflowsRequest {\n");
    sb.append("    workflowType: ").append(toIndentedString(workflowType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    queryStartDate: ").append(toIndentedString(queryStartDate)).append("\n");
    sb.append("    queryEndDate: ").append(toIndentedString(queryEndDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("WorkflowType");
    openapiFields.add("Status");
    openapiFields.add("QueryStartDate");
    openapiFields.add("QueryEndDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListWorkflowsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListWorkflowsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListWorkflowsRequest is not found in the empty JSON string", ListWorkflowsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListWorkflowsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListWorkflowsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("WorkflowType") != null && !jsonObj.get("WorkflowType").isJsonNull()) && !jsonObj.get("WorkflowType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WorkflowType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WorkflowType").toString()));
      }
      // validate the optional field `WorkflowType`
      if (jsonObj.get("WorkflowType") != null && !jsonObj.get("WorkflowType").isJsonNull()) {
        WorkflowTypeEnum.validateJsonElement(jsonObj.get("WorkflowType"));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("Status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListWorkflowsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListWorkflowsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListWorkflowsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListWorkflowsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListWorkflowsRequest>() {
           @Override
           public void write(JsonWriter out, ListWorkflowsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListWorkflowsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListWorkflowsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListWorkflowsRequest
   * @throws IOException if the JSON string is invalid with respect to ListWorkflowsRequest
   */
  public static ListWorkflowsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListWorkflowsRequest.class);
  }

  /**
   * Convert an instance of ListWorkflowsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

