/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.UpdateDomainRequestMatching;
import org.openapitools.client.model.UpdateDomainRequestRuleBasedMatching;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateDomainRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateDomainRequest {
  public static final String SERIALIZED_NAME_DEFAULT_EXPIRATION_DAYS = "DefaultExpirationDays";
  @SerializedName(SERIALIZED_NAME_DEFAULT_EXPIRATION_DAYS)
  private Integer defaultExpirationDays;

  public static final String SERIALIZED_NAME_DEFAULT_ENCRYPTION_KEY = "DefaultEncryptionKey";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ENCRYPTION_KEY)
  private String defaultEncryptionKey;

  public static final String SERIALIZED_NAME_DEAD_LETTER_QUEUE_URL = "DeadLetterQueueUrl";
  @SerializedName(SERIALIZED_NAME_DEAD_LETTER_QUEUE_URL)
  private String deadLetterQueueUrl;

  public static final String SERIALIZED_NAME_MATCHING = "Matching";
  @SerializedName(SERIALIZED_NAME_MATCHING)
  private UpdateDomainRequestMatching matching;

  public static final String SERIALIZED_NAME_RULE_BASED_MATCHING = "RuleBasedMatching";
  @SerializedName(SERIALIZED_NAME_RULE_BASED_MATCHING)
  private UpdateDomainRequestRuleBasedMatching ruleBasedMatching;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateDomainRequest() {
  }

  public CreateDomainRequest defaultExpirationDays(Integer defaultExpirationDays) {
    this.defaultExpirationDays = defaultExpirationDays;
    return this;
  }

  /**
   * The default number of days until the data within the domain expires.
   * minimum: 1
   * maximum: 1098
   * @return defaultExpirationDays
   */
  @javax.annotation.Nonnull
  public Integer getDefaultExpirationDays() {
    return defaultExpirationDays;
  }

  public void setDefaultExpirationDays(Integer defaultExpirationDays) {
    this.defaultExpirationDays = defaultExpirationDays;
  }


  public CreateDomainRequest defaultEncryptionKey(String defaultEncryptionKey) {
    this.defaultEncryptionKey = defaultEncryptionKey;
    return this;
  }

  /**
   * The default encryption key, which is an AWS managed key, is used when no specific type of encryption key is specified. It is used to encrypt all data before it is placed in permanent or semi-permanent storage.
   * @return defaultEncryptionKey
   */
  @javax.annotation.Nullable
  public String getDefaultEncryptionKey() {
    return defaultEncryptionKey;
  }

  public void setDefaultEncryptionKey(String defaultEncryptionKey) {
    this.defaultEncryptionKey = defaultEncryptionKey;
  }


  public CreateDomainRequest deadLetterQueueUrl(String deadLetterQueueUrl) {
    this.deadLetterQueueUrl = deadLetterQueueUrl;
    return this;
  }

  /**
   * The URL of the SQS dead letter queue, which is used for reporting errors associated with ingesting data from third party applications. You must set up a policy on the DeadLetterQueue for the SendMessage operation to enable Amazon Connect Customer Profiles to send messages to the DeadLetterQueue.
   * @return deadLetterQueueUrl
   */
  @javax.annotation.Nullable
  public String getDeadLetterQueueUrl() {
    return deadLetterQueueUrl;
  }

  public void setDeadLetterQueueUrl(String deadLetterQueueUrl) {
    this.deadLetterQueueUrl = deadLetterQueueUrl;
  }


  public CreateDomainRequest matching(UpdateDomainRequestMatching matching) {
    this.matching = matching;
    return this;
  }

  /**
   * Get matching
   * @return matching
   */
  @javax.annotation.Nullable
  public UpdateDomainRequestMatching getMatching() {
    return matching;
  }

  public void setMatching(UpdateDomainRequestMatching matching) {
    this.matching = matching;
  }


  public CreateDomainRequest ruleBasedMatching(UpdateDomainRequestRuleBasedMatching ruleBasedMatching) {
    this.ruleBasedMatching = ruleBasedMatching;
    return this;
  }

  /**
   * Get ruleBasedMatching
   * @return ruleBasedMatching
   */
  @javax.annotation.Nullable
  public UpdateDomainRequestRuleBasedMatching getRuleBasedMatching() {
    return ruleBasedMatching;
  }

  public void setRuleBasedMatching(UpdateDomainRequestRuleBasedMatching ruleBasedMatching) {
    this.ruleBasedMatching = ruleBasedMatching;
  }


  public CreateDomainRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateDomainRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The tags used to organize, track, or control access for this resource.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDomainRequest createDomainRequest = (CreateDomainRequest) o;
    return Objects.equals(this.defaultExpirationDays, createDomainRequest.defaultExpirationDays) &&
        Objects.equals(this.defaultEncryptionKey, createDomainRequest.defaultEncryptionKey) &&
        Objects.equals(this.deadLetterQueueUrl, createDomainRequest.deadLetterQueueUrl) &&
        Objects.equals(this.matching, createDomainRequest.matching) &&
        Objects.equals(this.ruleBasedMatching, createDomainRequest.ruleBasedMatching) &&
        Objects.equals(this.tags, createDomainRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultExpirationDays, defaultEncryptionKey, deadLetterQueueUrl, matching, ruleBasedMatching, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDomainRequest {\n");
    sb.append("    defaultExpirationDays: ").append(toIndentedString(defaultExpirationDays)).append("\n");
    sb.append("    defaultEncryptionKey: ").append(toIndentedString(defaultEncryptionKey)).append("\n");
    sb.append("    deadLetterQueueUrl: ").append(toIndentedString(deadLetterQueueUrl)).append("\n");
    sb.append("    matching: ").append(toIndentedString(matching)).append("\n");
    sb.append("    ruleBasedMatching: ").append(toIndentedString(ruleBasedMatching)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DefaultExpirationDays");
    openapiFields.add("DefaultEncryptionKey");
    openapiFields.add("DeadLetterQueueUrl");
    openapiFields.add("Matching");
    openapiFields.add("RuleBasedMatching");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DefaultExpirationDays");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDomainRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDomainRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDomainRequest is not found in the empty JSON string", CreateDomainRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDomainRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDomainRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateDomainRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DefaultEncryptionKey") != null && !jsonObj.get("DefaultEncryptionKey").isJsonNull()) && !jsonObj.get("DefaultEncryptionKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DefaultEncryptionKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DefaultEncryptionKey").toString()));
      }
      if ((jsonObj.get("DeadLetterQueueUrl") != null && !jsonObj.get("DeadLetterQueueUrl").isJsonNull()) && !jsonObj.get("DeadLetterQueueUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeadLetterQueueUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeadLetterQueueUrl").toString()));
      }
      // validate the optional field `Matching`
      if (jsonObj.get("Matching") != null && !jsonObj.get("Matching").isJsonNull()) {
        UpdateDomainRequestMatching.validateJsonElement(jsonObj.get("Matching"));
      }
      // validate the optional field `RuleBasedMatching`
      if (jsonObj.get("RuleBasedMatching") != null && !jsonObj.get("RuleBasedMatching").isJsonNull()) {
        UpdateDomainRequestRuleBasedMatching.validateJsonElement(jsonObj.get("RuleBasedMatching"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDomainRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDomainRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDomainRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDomainRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDomainRequest>() {
           @Override
           public void write(JsonWriter out, CreateDomainRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDomainRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDomainRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDomainRequest
   * @throws IOException if the JSON string is invalid with respect to CreateDomainRequest
   */
  public static CreateDomainRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDomainRequest.class);
  }

  /**
   * Convert an instance of CreateDomainRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

