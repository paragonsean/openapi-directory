/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Match group object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MatchItem {
  public static final String SERIALIZED_NAME_MATCH_ID = "MatchId";
  @SerializedName(SERIALIZED_NAME_MATCH_ID)
  private String matchId;

  public static final String SERIALIZED_NAME_PROFILE_IDS = "ProfileIds";
  @SerializedName(SERIALIZED_NAME_PROFILE_IDS)
  private List profileIds;

  public static final String SERIALIZED_NAME_CONFIDENCE_SCORE = "ConfidenceScore";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE_SCORE)
  private Double confidenceScore;

  public MatchItem() {
  }

  public MatchItem matchId(String matchId) {
    this.matchId = matchId;
    return this;
  }

  /**
   * Get matchId
   * @return matchId
   */
  @javax.annotation.Nullable
  public String getMatchId() {
    return matchId;
  }

  public void setMatchId(String matchId) {
    this.matchId = matchId;
  }


  public MatchItem profileIds(List profileIds) {
    this.profileIds = profileIds;
    return this;
  }

  /**
   * Get profileIds
   * @return profileIds
   */
  @javax.annotation.Nullable
  public List getProfileIds() {
    return profileIds;
  }

  public void setProfileIds(List profileIds) {
    this.profileIds = profileIds;
  }


  public MatchItem confidenceScore(Double confidenceScore) {
    this.confidenceScore = confidenceScore;
    return this;
  }

  /**
   * Get confidenceScore
   * @return confidenceScore
   */
  @javax.annotation.Nullable
  public Double getConfidenceScore() {
    return confidenceScore;
  }

  public void setConfidenceScore(Double confidenceScore) {
    this.confidenceScore = confidenceScore;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MatchItem matchItem = (MatchItem) o;
    return Objects.equals(this.matchId, matchItem.matchId) &&
        Objects.equals(this.profileIds, matchItem.profileIds) &&
        Objects.equals(this.confidenceScore, matchItem.confidenceScore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(matchId, profileIds, confidenceScore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MatchItem {\n");
    sb.append("    matchId: ").append(toIndentedString(matchId)).append("\n");
    sb.append("    profileIds: ").append(toIndentedString(profileIds)).append("\n");
    sb.append("    confidenceScore: ").append(toIndentedString(confidenceScore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MatchId");
    openapiFields.add("ProfileIds");
    openapiFields.add("ConfidenceScore");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MatchItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MatchItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MatchItem is not found in the empty JSON string", MatchItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MatchItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MatchItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `MatchId`
      if (jsonObj.get("MatchId") != null && !jsonObj.get("MatchId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MatchId"));
      }
      // validate the optional field `ProfileIds`
      if (jsonObj.get("ProfileIds") != null && !jsonObj.get("ProfileIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ProfileIds"));
      }
      // validate the optional field `ConfidenceScore`
      if (jsonObj.get("ConfidenceScore") != null && !jsonObj.get("ConfidenceScore").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("ConfidenceScore"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MatchItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MatchItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MatchItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MatchItem.class));

       return (TypeAdapter<T>) new TypeAdapter<MatchItem>() {
           @Override
           public void write(JsonWriter out, MatchItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MatchItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MatchItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MatchItem
   * @throws IOException if the JSON string is invalid with respect to MatchItem
   */
  public static MatchItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MatchItem.class);
  }

  /**
   * Convert an instance of MatchItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

