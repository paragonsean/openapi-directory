/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AttributeMatchingModel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Configuration information about the &lt;code&gt;AttributeTypesSelector &lt;/code&gt;where the rule-based identity resolution uses to match profiles. You can choose how profiles are compared across attribute types and which attribute to use for matching from each type. There are three attribute types you can configure:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Email type&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can choose from &lt;code&gt;Email&lt;/code&gt;, &lt;code&gt;BusinessEmail&lt;/code&gt;, and &lt;code&gt;PersonalEmail&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Phone number type&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can choose from &lt;code&gt;Phone&lt;/code&gt;, &lt;code&gt;HomePhone&lt;/code&gt;, and &lt;code&gt;MobilePhone&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Address type&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can choose from &lt;code&gt;Address&lt;/code&gt;, &lt;code&gt;BusinessAddress&lt;/code&gt;, &lt;code&gt;MaillingAddress&lt;/code&gt;, and &lt;code&gt;ShippingAddress&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can either choose &lt;code&gt;ONE_TO_ONE&lt;/code&gt; or &lt;code&gt;MANY_TO_MANY&lt;/code&gt; as the &lt;code&gt;AttributeMatchingModel&lt;/code&gt;. When choosing &lt;code&gt;MANY_TO_MANY&lt;/code&gt;, the system can match attribute across the sub-types of an attribute type. For example, if the value of the &lt;code&gt;Email&lt;/code&gt; field of Profile A and the value of &lt;code&gt;BusinessEmail&lt;/code&gt; field of Profile B matches, the two profiles are matched on the Email type. When choosing &lt;code&gt;ONE_TO_ONE&lt;/code&gt; the system can only match if the sub-types are exact matches. For example, only when the value of the &lt;code&gt;Email&lt;/code&gt; field of Profile A and the value of the &lt;code&gt;Email&lt;/code&gt; field of Profile B matches, the two profiles are matched on the Email type.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AttributeTypesSelector {
  public static final String SERIALIZED_NAME_ATTRIBUTE_MATCHING_MODEL = "AttributeMatchingModel";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_MATCHING_MODEL)
  private AttributeMatchingModel attributeMatchingModel;

  public static final String SERIALIZED_NAME_ADDRESS = "Address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private List address;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "PhoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private List phoneNumber;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "EmailAddress";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  private List emailAddress;

  public AttributeTypesSelector() {
  }

  public AttributeTypesSelector attributeMatchingModel(AttributeMatchingModel attributeMatchingModel) {
    this.attributeMatchingModel = attributeMatchingModel;
    return this;
  }

  /**
   * Get attributeMatchingModel
   * @return attributeMatchingModel
   */
  @javax.annotation.Nonnull
  public AttributeMatchingModel getAttributeMatchingModel() {
    return attributeMatchingModel;
  }

  public void setAttributeMatchingModel(AttributeMatchingModel attributeMatchingModel) {
    this.attributeMatchingModel = attributeMatchingModel;
  }


  public AttributeTypesSelector address(List address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public List getAddress() {
    return address;
  }

  public void setAddress(List address) {
    this.address = address;
  }


  public AttributeTypesSelector phoneNumber(List phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Get phoneNumber
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public List getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(List phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public AttributeTypesSelector emailAddress(List emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

  /**
   * Get emailAddress
   * @return emailAddress
   */
  @javax.annotation.Nullable
  public List getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(List emailAddress) {
    this.emailAddress = emailAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttributeTypesSelector attributeTypesSelector = (AttributeTypesSelector) o;
    return Objects.equals(this.attributeMatchingModel, attributeTypesSelector.attributeMatchingModel) &&
        Objects.equals(this.address, attributeTypesSelector.address) &&
        Objects.equals(this.phoneNumber, attributeTypesSelector.phoneNumber) &&
        Objects.equals(this.emailAddress, attributeTypesSelector.emailAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributeMatchingModel, address, phoneNumber, emailAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttributeTypesSelector {\n");
    sb.append("    attributeMatchingModel: ").append(toIndentedString(attributeMatchingModel)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AttributeMatchingModel");
    openapiFields.add("Address");
    openapiFields.add("PhoneNumber");
    openapiFields.add("EmailAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AttributeMatchingModel");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AttributeTypesSelector
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AttributeTypesSelector.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttributeTypesSelector is not found in the empty JSON string", AttributeTypesSelector.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AttributeTypesSelector.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AttributeTypesSelector` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AttributeTypesSelector.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `AttributeMatchingModel`
      AttributeMatchingModel.validateJsonElement(jsonObj.get("AttributeMatchingModel"));
      // validate the optional field `Address`
      if (jsonObj.get("Address") != null && !jsonObj.get("Address").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Address"));
      }
      // validate the optional field `PhoneNumber`
      if (jsonObj.get("PhoneNumber") != null && !jsonObj.get("PhoneNumber").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("PhoneNumber"));
      }
      // validate the optional field `EmailAddress`
      if (jsonObj.get("EmailAddress") != null && !jsonObj.get("EmailAddress").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("EmailAddress"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttributeTypesSelector.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttributeTypesSelector' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttributeTypesSelector> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttributeTypesSelector.class));

       return (TypeAdapter<T>) new TypeAdapter<AttributeTypesSelector>() {
           @Override
           public void write(JsonWriter out, AttributeTypesSelector value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AttributeTypesSelector read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AttributeTypesSelector given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AttributeTypesSelector
   * @throws IOException if the JSON string is invalid with respect to AttributeTypesSelector
   */
  public static AttributeTypesSelector fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttributeTypesSelector.class);
  }

  /**
   * Convert an instance of AttributeTypesSelector to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

