/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ListProfileObjectsRequestObjectFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListProfileObjectsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListProfileObjectsRequest {
  public static final String SERIALIZED_NAME_OBJECT_TYPE_NAME = "ObjectTypeName";
  @SerializedName(SERIALIZED_NAME_OBJECT_TYPE_NAME)
  private String objectTypeName;

  public static final String SERIALIZED_NAME_PROFILE_ID = "ProfileId";
  @SerializedName(SERIALIZED_NAME_PROFILE_ID)
  private String profileId;

  public static final String SERIALIZED_NAME_OBJECT_FILTER = "ObjectFilter";
  @SerializedName(SERIALIZED_NAME_OBJECT_FILTER)
  private ListProfileObjectsRequestObjectFilter objectFilter;

  public ListProfileObjectsRequest() {
  }

  public ListProfileObjectsRequest objectTypeName(String objectTypeName) {
    this.objectTypeName = objectTypeName;
    return this;
  }

  /**
   * The name of the profile object type.
   * @return objectTypeName
   */
  @javax.annotation.Nonnull
  public String getObjectTypeName() {
    return objectTypeName;
  }

  public void setObjectTypeName(String objectTypeName) {
    this.objectTypeName = objectTypeName;
  }


  public ListProfileObjectsRequest profileId(String profileId) {
    this.profileId = profileId;
    return this;
  }

  /**
   * The unique identifier of a customer profile.
   * @return profileId
   */
  @javax.annotation.Nonnull
  public String getProfileId() {
    return profileId;
  }

  public void setProfileId(String profileId) {
    this.profileId = profileId;
  }


  public ListProfileObjectsRequest objectFilter(ListProfileObjectsRequestObjectFilter objectFilter) {
    this.objectFilter = objectFilter;
    return this;
  }

  /**
   * Get objectFilter
   * @return objectFilter
   */
  @javax.annotation.Nullable
  public ListProfileObjectsRequestObjectFilter getObjectFilter() {
    return objectFilter;
  }

  public void setObjectFilter(ListProfileObjectsRequestObjectFilter objectFilter) {
    this.objectFilter = objectFilter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListProfileObjectsRequest listProfileObjectsRequest = (ListProfileObjectsRequest) o;
    return Objects.equals(this.objectTypeName, listProfileObjectsRequest.objectTypeName) &&
        Objects.equals(this.profileId, listProfileObjectsRequest.profileId) &&
        Objects.equals(this.objectFilter, listProfileObjectsRequest.objectFilter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(objectTypeName, profileId, objectFilter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListProfileObjectsRequest {\n");
    sb.append("    objectTypeName: ").append(toIndentedString(objectTypeName)).append("\n");
    sb.append("    profileId: ").append(toIndentedString(profileId)).append("\n");
    sb.append("    objectFilter: ").append(toIndentedString(objectFilter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ObjectTypeName");
    openapiFields.add("ProfileId");
    openapiFields.add("ObjectFilter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ObjectTypeName");
    openapiRequiredFields.add("ProfileId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListProfileObjectsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListProfileObjectsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListProfileObjectsRequest is not found in the empty JSON string", ListProfileObjectsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListProfileObjectsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListProfileObjectsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListProfileObjectsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ObjectTypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ObjectTypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ObjectTypeName").toString()));
      }
      if (!jsonObj.get("ProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProfileId").toString()));
      }
      // validate the optional field `ObjectFilter`
      if (jsonObj.get("ObjectFilter") != null && !jsonObj.get("ObjectFilter").isJsonNull()) {
        ListProfileObjectsRequestObjectFilter.validateJsonElement(jsonObj.get("ObjectFilter"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListProfileObjectsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListProfileObjectsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListProfileObjectsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListProfileObjectsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListProfileObjectsRequest>() {
           @Override
           public void write(JsonWriter out, ListProfileObjectsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListProfileObjectsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListProfileObjectsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListProfileObjectsRequest
   * @throws IOException if the JSON string is invalid with respect to ListProfileObjectsRequest
   */
  public static ListProfileObjectsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListProfileObjectsRequest.class);
  }

  /**
   * Convert an instance of ListProfileObjectsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

