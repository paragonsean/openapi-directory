/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CreateIntegrationWorkflowRequestIntegrationConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateIntegrationWorkflowRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateIntegrationWorkflowRequest {
  /**
   * The type of workflow. The only supported value is APPFLOW_INTEGRATION.
   */
  @JsonAdapter(WorkflowTypeEnum.Adapter.class)
  public enum WorkflowTypeEnum {
    APPFLOW_INTEGRATION("APPFLOW_INTEGRATION");

    private String value;

    WorkflowTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WorkflowTypeEnum fromValue(String value) {
      for (WorkflowTypeEnum b : WorkflowTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WorkflowTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WorkflowTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WorkflowTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WorkflowTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WorkflowTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WORKFLOW_TYPE = "WorkflowType";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_TYPE)
  private WorkflowTypeEnum workflowType;

  public static final String SERIALIZED_NAME_INTEGRATION_CONFIG = "IntegrationConfig";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_CONFIG)
  private CreateIntegrationWorkflowRequestIntegrationConfig integrationConfig;

  public static final String SERIALIZED_NAME_OBJECT_TYPE_NAME = "ObjectTypeName";
  @SerializedName(SERIALIZED_NAME_OBJECT_TYPE_NAME)
  private String objectTypeName;

  public static final String SERIALIZED_NAME_ROLE_ARN = "RoleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateIntegrationWorkflowRequest() {
  }

  public CreateIntegrationWorkflowRequest workflowType(WorkflowTypeEnum workflowType) {
    this.workflowType = workflowType;
    return this;
  }

  /**
   * The type of workflow. The only supported value is APPFLOW_INTEGRATION.
   * @return workflowType
   */
  @javax.annotation.Nonnull
  public WorkflowTypeEnum getWorkflowType() {
    return workflowType;
  }

  public void setWorkflowType(WorkflowTypeEnum workflowType) {
    this.workflowType = workflowType;
  }


  public CreateIntegrationWorkflowRequest integrationConfig(CreateIntegrationWorkflowRequestIntegrationConfig integrationConfig) {
    this.integrationConfig = integrationConfig;
    return this;
  }

  /**
   * Get integrationConfig
   * @return integrationConfig
   */
  @javax.annotation.Nonnull
  public CreateIntegrationWorkflowRequestIntegrationConfig getIntegrationConfig() {
    return integrationConfig;
  }

  public void setIntegrationConfig(CreateIntegrationWorkflowRequestIntegrationConfig integrationConfig) {
    this.integrationConfig = integrationConfig;
  }


  public CreateIntegrationWorkflowRequest objectTypeName(String objectTypeName) {
    this.objectTypeName = objectTypeName;
    return this;
  }

  /**
   * The name of the profile object type.
   * @return objectTypeName
   */
  @javax.annotation.Nonnull
  public String getObjectTypeName() {
    return objectTypeName;
  }

  public void setObjectTypeName(String objectTypeName) {
    this.objectTypeName = objectTypeName;
  }


  public CreateIntegrationWorkflowRequest roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of the IAM role. Customer Profiles assumes this role to create resources on your behalf as part of workflow execution.
   * @return roleArn
   */
  @javax.annotation.Nonnull
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public CreateIntegrationWorkflowRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateIntegrationWorkflowRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The tags used to organize, track, or control access for this resource.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateIntegrationWorkflowRequest createIntegrationWorkflowRequest = (CreateIntegrationWorkflowRequest) o;
    return Objects.equals(this.workflowType, createIntegrationWorkflowRequest.workflowType) &&
        Objects.equals(this.integrationConfig, createIntegrationWorkflowRequest.integrationConfig) &&
        Objects.equals(this.objectTypeName, createIntegrationWorkflowRequest.objectTypeName) &&
        Objects.equals(this.roleArn, createIntegrationWorkflowRequest.roleArn) &&
        Objects.equals(this.tags, createIntegrationWorkflowRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(workflowType, integrationConfig, objectTypeName, roleArn, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateIntegrationWorkflowRequest {\n");
    sb.append("    workflowType: ").append(toIndentedString(workflowType)).append("\n");
    sb.append("    integrationConfig: ").append(toIndentedString(integrationConfig)).append("\n");
    sb.append("    objectTypeName: ").append(toIndentedString(objectTypeName)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("WorkflowType");
    openapiFields.add("IntegrationConfig");
    openapiFields.add("ObjectTypeName");
    openapiFields.add("RoleArn");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("WorkflowType");
    openapiRequiredFields.add("IntegrationConfig");
    openapiRequiredFields.add("ObjectTypeName");
    openapiRequiredFields.add("RoleArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateIntegrationWorkflowRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateIntegrationWorkflowRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateIntegrationWorkflowRequest is not found in the empty JSON string", CreateIntegrationWorkflowRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateIntegrationWorkflowRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateIntegrationWorkflowRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateIntegrationWorkflowRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("WorkflowType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WorkflowType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WorkflowType").toString()));
      }
      // validate the required field `WorkflowType`
      WorkflowTypeEnum.validateJsonElement(jsonObj.get("WorkflowType"));
      // validate the required field `IntegrationConfig`
      CreateIntegrationWorkflowRequestIntegrationConfig.validateJsonElement(jsonObj.get("IntegrationConfig"));
      if (!jsonObj.get("ObjectTypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ObjectTypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ObjectTypeName").toString()));
      }
      if (!jsonObj.get("RoleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RoleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RoleArn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateIntegrationWorkflowRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateIntegrationWorkflowRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateIntegrationWorkflowRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateIntegrationWorkflowRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateIntegrationWorkflowRequest>() {
           @Override
           public void write(JsonWriter out, CreateIntegrationWorkflowRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateIntegrationWorkflowRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateIntegrationWorkflowRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateIntegrationWorkflowRequest
   * @throws IOException if the JSON string is invalid with respect to CreateIntegrationWorkflowRequest
   */
  public static CreateIntegrationWorkflowRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateIntegrationWorkflowRequest.class);
  }

  /**
   * Convert an instance of CreateIntegrationWorkflowRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

