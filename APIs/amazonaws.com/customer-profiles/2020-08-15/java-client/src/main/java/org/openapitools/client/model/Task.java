/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.TaskConnectorOperator;
import org.openapitools.client.model.TaskType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A class for modeling different type of tasks. Task implementation varies based on the TaskType.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Task {
  public static final String SERIALIZED_NAME_CONNECTOR_OPERATOR = "ConnectorOperator";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_OPERATOR)
  private TaskConnectorOperator connectorOperator;

  public static final String SERIALIZED_NAME_DESTINATION_FIELD = "DestinationField";
  @SerializedName(SERIALIZED_NAME_DESTINATION_FIELD)
  private String destinationField;

  public static final String SERIALIZED_NAME_SOURCE_FIELDS = "SourceFields";
  @SerializedName(SERIALIZED_NAME_SOURCE_FIELDS)
  private List sourceFields;

  public static final String SERIALIZED_NAME_TASK_PROPERTIES = "TaskProperties";
  @SerializedName(SERIALIZED_NAME_TASK_PROPERTIES)
  private Map taskProperties;

  public static final String SERIALIZED_NAME_TASK_TYPE = "TaskType";
  @SerializedName(SERIALIZED_NAME_TASK_TYPE)
  private TaskType taskType;

  public Task() {
  }

  public Task connectorOperator(TaskConnectorOperator connectorOperator) {
    this.connectorOperator = connectorOperator;
    return this;
  }

  /**
   * Get connectorOperator
   * @return connectorOperator
   */
  @javax.annotation.Nullable
  public TaskConnectorOperator getConnectorOperator() {
    return connectorOperator;
  }

  public void setConnectorOperator(TaskConnectorOperator connectorOperator) {
    this.connectorOperator = connectorOperator;
  }


  public Task destinationField(String destinationField) {
    this.destinationField = destinationField;
    return this;
  }

  /**
   * Get destinationField
   * @return destinationField
   */
  @javax.annotation.Nullable
  public String getDestinationField() {
    return destinationField;
  }

  public void setDestinationField(String destinationField) {
    this.destinationField = destinationField;
  }


  public Task sourceFields(List sourceFields) {
    this.sourceFields = sourceFields;
    return this;
  }

  /**
   * Get sourceFields
   * @return sourceFields
   */
  @javax.annotation.Nonnull
  public List getSourceFields() {
    return sourceFields;
  }

  public void setSourceFields(List sourceFields) {
    this.sourceFields = sourceFields;
  }


  public Task taskProperties(Map taskProperties) {
    this.taskProperties = taskProperties;
    return this;
  }

  /**
   * Get taskProperties
   * @return taskProperties
   */
  @javax.annotation.Nullable
  public Map getTaskProperties() {
    return taskProperties;
  }

  public void setTaskProperties(Map taskProperties) {
    this.taskProperties = taskProperties;
  }


  public Task taskType(TaskType taskType) {
    this.taskType = taskType;
    return this;
  }

  /**
   * Get taskType
   * @return taskType
   */
  @javax.annotation.Nonnull
  public TaskType getTaskType() {
    return taskType;
  }

  public void setTaskType(TaskType taskType) {
    this.taskType = taskType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Task task = (Task) o;
    return Objects.equals(this.connectorOperator, task.connectorOperator) &&
        Objects.equals(this.destinationField, task.destinationField) &&
        Objects.equals(this.sourceFields, task.sourceFields) &&
        Objects.equals(this.taskProperties, task.taskProperties) &&
        Objects.equals(this.taskType, task.taskType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectorOperator, destinationField, sourceFields, taskProperties, taskType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Task {\n");
    sb.append("    connectorOperator: ").append(toIndentedString(connectorOperator)).append("\n");
    sb.append("    destinationField: ").append(toIndentedString(destinationField)).append("\n");
    sb.append("    sourceFields: ").append(toIndentedString(sourceFields)).append("\n");
    sb.append("    taskProperties: ").append(toIndentedString(taskProperties)).append("\n");
    sb.append("    taskType: ").append(toIndentedString(taskType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ConnectorOperator");
    openapiFields.add("DestinationField");
    openapiFields.add("SourceFields");
    openapiFields.add("TaskProperties");
    openapiFields.add("TaskType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SourceFields");
    openapiRequiredFields.add("TaskType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Task
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Task.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Task is not found in the empty JSON string", Task.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Task.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Task` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Task.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ConnectorOperator`
      if (jsonObj.get("ConnectorOperator") != null && !jsonObj.get("ConnectorOperator").isJsonNull()) {
        TaskConnectorOperator.validateJsonElement(jsonObj.get("ConnectorOperator"));
      }
      // validate the optional field `DestinationField`
      if (jsonObj.get("DestinationField") != null && !jsonObj.get("DestinationField").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DestinationField"));
      }
      // validate the required field `SourceFields`
      List.validateJsonElement(jsonObj.get("SourceFields"));
      // validate the optional field `TaskProperties`
      if (jsonObj.get("TaskProperties") != null && !jsonObj.get("TaskProperties").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("TaskProperties"));
      }
      // validate the required field `TaskType`
      TaskType.validateJsonElement(jsonObj.get("TaskType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Task.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Task' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Task> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Task.class));

       return (TypeAdapter<T>) new TypeAdapter<Task>() {
           @Override
           public void write(JsonWriter out, Task value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Task read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Task given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Task
   * @throws IOException if the JSON string is invalid with respect to Task
   */
  public static Task fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Task.class);
  }

  /**
   * Convert an instance of Task to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

