/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UpdateDomainRequestMatchingAutoMerging;
import org.openapitools.client.model.UpdateDomainRequestMatchingExportingConfig;
import org.openapitools.client.model.UpdateDomainRequestMatchingJobSchedule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateDomainRequestMatching
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateDomainRequestMatching {
  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_JOB_SCHEDULE = "JobSchedule";
  @SerializedName(SERIALIZED_NAME_JOB_SCHEDULE)
  private UpdateDomainRequestMatchingJobSchedule jobSchedule;

  public static final String SERIALIZED_NAME_AUTO_MERGING = "AutoMerging";
  @SerializedName(SERIALIZED_NAME_AUTO_MERGING)
  private UpdateDomainRequestMatchingAutoMerging autoMerging;

  public static final String SERIALIZED_NAME_EXPORTING_CONFIG = "ExportingConfig";
  @SerializedName(SERIALIZED_NAME_EXPORTING_CONFIG)
  private UpdateDomainRequestMatchingExportingConfig exportingConfig;

  public CreateDomainRequestMatching() {
  }

  public CreateDomainRequestMatching enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public CreateDomainRequestMatching jobSchedule(UpdateDomainRequestMatchingJobSchedule jobSchedule) {
    this.jobSchedule = jobSchedule;
    return this;
  }

  /**
   * Get jobSchedule
   * @return jobSchedule
   */
  @javax.annotation.Nullable
  public UpdateDomainRequestMatchingJobSchedule getJobSchedule() {
    return jobSchedule;
  }

  public void setJobSchedule(UpdateDomainRequestMatchingJobSchedule jobSchedule) {
    this.jobSchedule = jobSchedule;
  }


  public CreateDomainRequestMatching autoMerging(UpdateDomainRequestMatchingAutoMerging autoMerging) {
    this.autoMerging = autoMerging;
    return this;
  }

  /**
   * Get autoMerging
   * @return autoMerging
   */
  @javax.annotation.Nullable
  public UpdateDomainRequestMatchingAutoMerging getAutoMerging() {
    return autoMerging;
  }

  public void setAutoMerging(UpdateDomainRequestMatchingAutoMerging autoMerging) {
    this.autoMerging = autoMerging;
  }


  public CreateDomainRequestMatching exportingConfig(UpdateDomainRequestMatchingExportingConfig exportingConfig) {
    this.exportingConfig = exportingConfig;
    return this;
  }

  /**
   * Get exportingConfig
   * @return exportingConfig
   */
  @javax.annotation.Nullable
  public UpdateDomainRequestMatchingExportingConfig getExportingConfig() {
    return exportingConfig;
  }

  public void setExportingConfig(UpdateDomainRequestMatchingExportingConfig exportingConfig) {
    this.exportingConfig = exportingConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDomainRequestMatching createDomainRequestMatching = (CreateDomainRequestMatching) o;
    return Objects.equals(this.enabled, createDomainRequestMatching.enabled) &&
        Objects.equals(this.jobSchedule, createDomainRequestMatching.jobSchedule) &&
        Objects.equals(this.autoMerging, createDomainRequestMatching.autoMerging) &&
        Objects.equals(this.exportingConfig, createDomainRequestMatching.exportingConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, jobSchedule, autoMerging, exportingConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDomainRequestMatching {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    jobSchedule: ").append(toIndentedString(jobSchedule)).append("\n");
    sb.append("    autoMerging: ").append(toIndentedString(autoMerging)).append("\n");
    sb.append("    exportingConfig: ").append(toIndentedString(exportingConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Enabled");
    openapiFields.add("JobSchedule");
    openapiFields.add("AutoMerging");
    openapiFields.add("ExportingConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Enabled");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDomainRequestMatching
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDomainRequestMatching.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDomainRequestMatching is not found in the empty JSON string", CreateDomainRequestMatching.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDomainRequestMatching.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDomainRequestMatching` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateDomainRequestMatching.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Enabled`
      Boolean.validateJsonElement(jsonObj.get("Enabled"));
      // validate the optional field `JobSchedule`
      if (jsonObj.get("JobSchedule") != null && !jsonObj.get("JobSchedule").isJsonNull()) {
        UpdateDomainRequestMatchingJobSchedule.validateJsonElement(jsonObj.get("JobSchedule"));
      }
      // validate the optional field `AutoMerging`
      if (jsonObj.get("AutoMerging") != null && !jsonObj.get("AutoMerging").isJsonNull()) {
        UpdateDomainRequestMatchingAutoMerging.validateJsonElement(jsonObj.get("AutoMerging"));
      }
      // validate the optional field `ExportingConfig`
      if (jsonObj.get("ExportingConfig") != null && !jsonObj.get("ExportingConfig").isJsonNull()) {
        UpdateDomainRequestMatchingExportingConfig.validateJsonElement(jsonObj.get("ExportingConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDomainRequestMatching.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDomainRequestMatching' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDomainRequestMatching> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDomainRequestMatching.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDomainRequestMatching>() {
           @Override
           public void write(JsonWriter out, CreateDomainRequestMatching value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDomainRequestMatching read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDomainRequestMatching given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDomainRequestMatching
   * @throws IOException if the JSON string is invalid with respect to CreateDomainRequestMatching
   */
  public static CreateDomainRequestMatching fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDomainRequestMatching.class);
  }

  /**
   * Convert an instance of CreateDomainRequestMatching to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

