/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DataPullMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the configuration details of a scheduled-trigger flow that you define. Currently, these settings only apply to the scheduled-trigger type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScheduledTriggerProperties {
  public static final String SERIALIZED_NAME_SCHEDULE_EXPRESSION = "ScheduleExpression";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_EXPRESSION)
  private String scheduleExpression;

  public static final String SERIALIZED_NAME_DATA_PULL_MODE = "DataPullMode";
  @SerializedName(SERIALIZED_NAME_DATA_PULL_MODE)
  private DataPullMode dataPullMode;

  public static final String SERIALIZED_NAME_SCHEDULE_START_TIME = "ScheduleStartTime";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_START_TIME)
  private OffsetDateTime scheduleStartTime;

  public static final String SERIALIZED_NAME_SCHEDULE_END_TIME = "ScheduleEndTime";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_END_TIME)
  private OffsetDateTime scheduleEndTime;

  public static final String SERIALIZED_NAME_TIMEZONE = "Timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_SCHEDULE_OFFSET = "ScheduleOffset";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_OFFSET)
  private Integer scheduleOffset;

  public static final String SERIALIZED_NAME_FIRST_EXECUTION_FROM = "FirstExecutionFrom";
  @SerializedName(SERIALIZED_NAME_FIRST_EXECUTION_FROM)
  private OffsetDateTime firstExecutionFrom;

  public ScheduledTriggerProperties() {
  }

  public ScheduledTriggerProperties scheduleExpression(String scheduleExpression) {
    this.scheduleExpression = scheduleExpression;
    return this;
  }

  /**
   * Get scheduleExpression
   * @return scheduleExpression
   */
  @javax.annotation.Nonnull
  public String getScheduleExpression() {
    return scheduleExpression;
  }

  public void setScheduleExpression(String scheduleExpression) {
    this.scheduleExpression = scheduleExpression;
  }


  public ScheduledTriggerProperties dataPullMode(DataPullMode dataPullMode) {
    this.dataPullMode = dataPullMode;
    return this;
  }

  /**
   * Get dataPullMode
   * @return dataPullMode
   */
  @javax.annotation.Nullable
  public DataPullMode getDataPullMode() {
    return dataPullMode;
  }

  public void setDataPullMode(DataPullMode dataPullMode) {
    this.dataPullMode = dataPullMode;
  }


  public ScheduledTriggerProperties scheduleStartTime(OffsetDateTime scheduleStartTime) {
    this.scheduleStartTime = scheduleStartTime;
    return this;
  }

  /**
   * Get scheduleStartTime
   * @return scheduleStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getScheduleStartTime() {
    return scheduleStartTime;
  }

  public void setScheduleStartTime(OffsetDateTime scheduleStartTime) {
    this.scheduleStartTime = scheduleStartTime;
  }


  public ScheduledTriggerProperties scheduleEndTime(OffsetDateTime scheduleEndTime) {
    this.scheduleEndTime = scheduleEndTime;
    return this;
  }

  /**
   * Get scheduleEndTime
   * @return scheduleEndTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getScheduleEndTime() {
    return scheduleEndTime;
  }

  public void setScheduleEndTime(OffsetDateTime scheduleEndTime) {
    this.scheduleEndTime = scheduleEndTime;
  }


  public ScheduledTriggerProperties timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Get timezone
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public ScheduledTriggerProperties scheduleOffset(Integer scheduleOffset) {
    this.scheduleOffset = scheduleOffset;
    return this;
  }

  /**
   * Get scheduleOffset
   * @return scheduleOffset
   */
  @javax.annotation.Nullable
  public Integer getScheduleOffset() {
    return scheduleOffset;
  }

  public void setScheduleOffset(Integer scheduleOffset) {
    this.scheduleOffset = scheduleOffset;
  }


  public ScheduledTriggerProperties firstExecutionFrom(OffsetDateTime firstExecutionFrom) {
    this.firstExecutionFrom = firstExecutionFrom;
    return this;
  }

  /**
   * Get firstExecutionFrom
   * @return firstExecutionFrom
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFirstExecutionFrom() {
    return firstExecutionFrom;
  }

  public void setFirstExecutionFrom(OffsetDateTime firstExecutionFrom) {
    this.firstExecutionFrom = firstExecutionFrom;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScheduledTriggerProperties scheduledTriggerProperties = (ScheduledTriggerProperties) o;
    return Objects.equals(this.scheduleExpression, scheduledTriggerProperties.scheduleExpression) &&
        Objects.equals(this.dataPullMode, scheduledTriggerProperties.dataPullMode) &&
        Objects.equals(this.scheduleStartTime, scheduledTriggerProperties.scheduleStartTime) &&
        Objects.equals(this.scheduleEndTime, scheduledTriggerProperties.scheduleEndTime) &&
        Objects.equals(this.timezone, scheduledTriggerProperties.timezone) &&
        Objects.equals(this.scheduleOffset, scheduledTriggerProperties.scheduleOffset) &&
        Objects.equals(this.firstExecutionFrom, scheduledTriggerProperties.firstExecutionFrom);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scheduleExpression, dataPullMode, scheduleStartTime, scheduleEndTime, timezone, scheduleOffset, firstExecutionFrom);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScheduledTriggerProperties {\n");
    sb.append("    scheduleExpression: ").append(toIndentedString(scheduleExpression)).append("\n");
    sb.append("    dataPullMode: ").append(toIndentedString(dataPullMode)).append("\n");
    sb.append("    scheduleStartTime: ").append(toIndentedString(scheduleStartTime)).append("\n");
    sb.append("    scheduleEndTime: ").append(toIndentedString(scheduleEndTime)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    scheduleOffset: ").append(toIndentedString(scheduleOffset)).append("\n");
    sb.append("    firstExecutionFrom: ").append(toIndentedString(firstExecutionFrom)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ScheduleExpression");
    openapiFields.add("DataPullMode");
    openapiFields.add("ScheduleStartTime");
    openapiFields.add("ScheduleEndTime");
    openapiFields.add("Timezone");
    openapiFields.add("ScheduleOffset");
    openapiFields.add("FirstExecutionFrom");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ScheduleExpression");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScheduledTriggerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScheduledTriggerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScheduledTriggerProperties is not found in the empty JSON string", ScheduledTriggerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScheduledTriggerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScheduledTriggerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ScheduledTriggerProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ScheduleExpression`
      String.validateJsonElement(jsonObj.get("ScheduleExpression"));
      // validate the optional field `DataPullMode`
      if (jsonObj.get("DataPullMode") != null && !jsonObj.get("DataPullMode").isJsonNull()) {
        DataPullMode.validateJsonElement(jsonObj.get("DataPullMode"));
      }
      // validate the optional field `ScheduleStartTime`
      if (jsonObj.get("ScheduleStartTime") != null && !jsonObj.get("ScheduleStartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ScheduleStartTime"));
      }
      // validate the optional field `ScheduleEndTime`
      if (jsonObj.get("ScheduleEndTime") != null && !jsonObj.get("ScheduleEndTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ScheduleEndTime"));
      }
      // validate the optional field `Timezone`
      if (jsonObj.get("Timezone") != null && !jsonObj.get("Timezone").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Timezone"));
      }
      // validate the optional field `ScheduleOffset`
      if (jsonObj.get("ScheduleOffset") != null && !jsonObj.get("ScheduleOffset").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ScheduleOffset"));
      }
      // validate the optional field `FirstExecutionFrom`
      if (jsonObj.get("FirstExecutionFrom") != null && !jsonObj.get("FirstExecutionFrom").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("FirstExecutionFrom"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScheduledTriggerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScheduledTriggerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScheduledTriggerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScheduledTriggerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ScheduledTriggerProperties>() {
           @Override
           public void write(JsonWriter out, ScheduledTriggerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScheduledTriggerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScheduledTriggerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScheduledTriggerProperties
   * @throws IOException if the JSON string is invalid with respect to ScheduledTriggerProperties
   */
  public static ScheduledTriggerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScheduledTriggerProperties.class);
  }

  /**
   * Convert an instance of ScheduledTriggerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

