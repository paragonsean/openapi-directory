/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.EventStreamState;
import org.openapitools.client.model.GetEventStreamResponseDestinationDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetEventStreamResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetEventStreamResponse {
  public static final String SERIALIZED_NAME_DOMAIN_NAME = "DomainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private String domainName;

  public static final String SERIALIZED_NAME_EVENT_STREAM_ARN = "EventStreamArn";
  @SerializedName(SERIALIZED_NAME_EVENT_STREAM_ARN)
  private String eventStreamArn;

  public static final String SERIALIZED_NAME_CREATED_AT = "CreatedAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private EventStreamState state;

  public static final String SERIALIZED_NAME_STOPPED_SINCE = "StoppedSince";
  @SerializedName(SERIALIZED_NAME_STOPPED_SINCE)
  private OffsetDateTime stoppedSince;

  public static final String SERIALIZED_NAME_DESTINATION_DETAILS = "DestinationDetails";
  @SerializedName(SERIALIZED_NAME_DESTINATION_DETAILS)
  private GetEventStreamResponseDestinationDetails destinationDetails;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public GetEventStreamResponse() {
  }

  public GetEventStreamResponse domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * Get domainName
   * @return domainName
   */
  @javax.annotation.Nonnull
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  public GetEventStreamResponse eventStreamArn(String eventStreamArn) {
    this.eventStreamArn = eventStreamArn;
    return this;
  }

  /**
   * Get eventStreamArn
   * @return eventStreamArn
   */
  @javax.annotation.Nonnull
  public String getEventStreamArn() {
    return eventStreamArn;
  }

  public void setEventStreamArn(String eventStreamArn) {
    this.eventStreamArn = eventStreamArn;
  }


  public GetEventStreamResponse createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public GetEventStreamResponse state(EventStreamState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nonnull
  public EventStreamState getState() {
    return state;
  }

  public void setState(EventStreamState state) {
    this.state = state;
  }


  public GetEventStreamResponse stoppedSince(OffsetDateTime stoppedSince) {
    this.stoppedSince = stoppedSince;
    return this;
  }

  /**
   * Get stoppedSince
   * @return stoppedSince
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStoppedSince() {
    return stoppedSince;
  }

  public void setStoppedSince(OffsetDateTime stoppedSince) {
    this.stoppedSince = stoppedSince;
  }


  public GetEventStreamResponse destinationDetails(GetEventStreamResponseDestinationDetails destinationDetails) {
    this.destinationDetails = destinationDetails;
    return this;
  }

  /**
   * Get destinationDetails
   * @return destinationDetails
   */
  @javax.annotation.Nonnull
  public GetEventStreamResponseDestinationDetails getDestinationDetails() {
    return destinationDetails;
  }

  public void setDestinationDetails(GetEventStreamResponseDestinationDetails destinationDetails) {
    this.destinationDetails = destinationDetails;
  }


  public GetEventStreamResponse tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetEventStreamResponse getEventStreamResponse = (GetEventStreamResponse) o;
    return Objects.equals(this.domainName, getEventStreamResponse.domainName) &&
        Objects.equals(this.eventStreamArn, getEventStreamResponse.eventStreamArn) &&
        Objects.equals(this.createdAt, getEventStreamResponse.createdAt) &&
        Objects.equals(this.state, getEventStreamResponse.state) &&
        Objects.equals(this.stoppedSince, getEventStreamResponse.stoppedSince) &&
        Objects.equals(this.destinationDetails, getEventStreamResponse.destinationDetails) &&
        Objects.equals(this.tags, getEventStreamResponse.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainName, eventStreamArn, createdAt, state, stoppedSince, destinationDetails, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetEventStreamResponse {\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    eventStreamArn: ").append(toIndentedString(eventStreamArn)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stoppedSince: ").append(toIndentedString(stoppedSince)).append("\n");
    sb.append("    destinationDetails: ").append(toIndentedString(destinationDetails)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DomainName");
    openapiFields.add("EventStreamArn");
    openapiFields.add("CreatedAt");
    openapiFields.add("State");
    openapiFields.add("StoppedSince");
    openapiFields.add("DestinationDetails");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DomainName");
    openapiRequiredFields.add("EventStreamArn");
    openapiRequiredFields.add("CreatedAt");
    openapiRequiredFields.add("State");
    openapiRequiredFields.add("DestinationDetails");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetEventStreamResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetEventStreamResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetEventStreamResponse is not found in the empty JSON string", GetEventStreamResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetEventStreamResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetEventStreamResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetEventStreamResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DomainName`
      String.validateJsonElement(jsonObj.get("DomainName"));
      // validate the required field `EventStreamArn`
      String.validateJsonElement(jsonObj.get("EventStreamArn"));
      // validate the required field `CreatedAt`
      OffsetDateTime.validateJsonElement(jsonObj.get("CreatedAt"));
      // validate the required field `State`
      EventStreamState.validateJsonElement(jsonObj.get("State"));
      // validate the optional field `StoppedSince`
      if (jsonObj.get("StoppedSince") != null && !jsonObj.get("StoppedSince").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StoppedSince"));
      }
      // validate the required field `DestinationDetails`
      GetEventStreamResponseDestinationDetails.validateJsonElement(jsonObj.get("DestinationDetails"));
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetEventStreamResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetEventStreamResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetEventStreamResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetEventStreamResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetEventStreamResponse>() {
           @Override
           public void write(JsonWriter out, GetEventStreamResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetEventStreamResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetEventStreamResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetEventStreamResponse
   * @throws IOException if the JSON string is invalid with respect to GetEventStreamResponse
   */
  public static GetEventStreamResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetEventStreamResponse.class);
  }

  /**
   * Convert an instance of GetEventStreamResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

