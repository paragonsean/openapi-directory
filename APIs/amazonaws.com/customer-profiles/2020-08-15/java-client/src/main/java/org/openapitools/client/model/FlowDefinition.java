/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PutIntegrationRequestFlowDefinitionSourceFlowConfig;
import org.openapitools.client.model.PutIntegrationRequestFlowDefinitionTriggerConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The configurations that control how Customer Profiles retrieves data from the source, Amazon AppFlow. Customer Profiles uses this information to create an AppFlow flow on behalf of customers.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FlowDefinition {
  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FLOW_NAME = "FlowName";
  @SerializedName(SERIALIZED_NAME_FLOW_NAME)
  private String flowName;

  public static final String SERIALIZED_NAME_KMS_ARN = "KmsArn";
  @SerializedName(SERIALIZED_NAME_KMS_ARN)
  private String kmsArn;

  public static final String SERIALIZED_NAME_SOURCE_FLOW_CONFIG = "SourceFlowConfig";
  @SerializedName(SERIALIZED_NAME_SOURCE_FLOW_CONFIG)
  private PutIntegrationRequestFlowDefinitionSourceFlowConfig sourceFlowConfig;

  public static final String SERIALIZED_NAME_TASKS = "Tasks";
  @SerializedName(SERIALIZED_NAME_TASKS)
  private List tasks;

  public static final String SERIALIZED_NAME_TRIGGER_CONFIG = "TriggerConfig";
  @SerializedName(SERIALIZED_NAME_TRIGGER_CONFIG)
  private PutIntegrationRequestFlowDefinitionTriggerConfig triggerConfig;

  public FlowDefinition() {
  }

  public FlowDefinition description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public FlowDefinition flowName(String flowName) {
    this.flowName = flowName;
    return this;
  }

  /**
   * Get flowName
   * @return flowName
   */
  @javax.annotation.Nonnull
  public String getFlowName() {
    return flowName;
  }

  public void setFlowName(String flowName) {
    this.flowName = flowName;
  }


  public FlowDefinition kmsArn(String kmsArn) {
    this.kmsArn = kmsArn;
    return this;
  }

  /**
   * Get kmsArn
   * @return kmsArn
   */
  @javax.annotation.Nonnull
  public String getKmsArn() {
    return kmsArn;
  }

  public void setKmsArn(String kmsArn) {
    this.kmsArn = kmsArn;
  }


  public FlowDefinition sourceFlowConfig(PutIntegrationRequestFlowDefinitionSourceFlowConfig sourceFlowConfig) {
    this.sourceFlowConfig = sourceFlowConfig;
    return this;
  }

  /**
   * Get sourceFlowConfig
   * @return sourceFlowConfig
   */
  @javax.annotation.Nonnull
  public PutIntegrationRequestFlowDefinitionSourceFlowConfig getSourceFlowConfig() {
    return sourceFlowConfig;
  }

  public void setSourceFlowConfig(PutIntegrationRequestFlowDefinitionSourceFlowConfig sourceFlowConfig) {
    this.sourceFlowConfig = sourceFlowConfig;
  }


  public FlowDefinition tasks(List tasks) {
    this.tasks = tasks;
    return this;
  }

  /**
   * Get tasks
   * @return tasks
   */
  @javax.annotation.Nonnull
  public List getTasks() {
    return tasks;
  }

  public void setTasks(List tasks) {
    this.tasks = tasks;
  }


  public FlowDefinition triggerConfig(PutIntegrationRequestFlowDefinitionTriggerConfig triggerConfig) {
    this.triggerConfig = triggerConfig;
    return this;
  }

  /**
   * Get triggerConfig
   * @return triggerConfig
   */
  @javax.annotation.Nonnull
  public PutIntegrationRequestFlowDefinitionTriggerConfig getTriggerConfig() {
    return triggerConfig;
  }

  public void setTriggerConfig(PutIntegrationRequestFlowDefinitionTriggerConfig triggerConfig) {
    this.triggerConfig = triggerConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlowDefinition flowDefinition = (FlowDefinition) o;
    return Objects.equals(this.description, flowDefinition.description) &&
        Objects.equals(this.flowName, flowDefinition.flowName) &&
        Objects.equals(this.kmsArn, flowDefinition.kmsArn) &&
        Objects.equals(this.sourceFlowConfig, flowDefinition.sourceFlowConfig) &&
        Objects.equals(this.tasks, flowDefinition.tasks) &&
        Objects.equals(this.triggerConfig, flowDefinition.triggerConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, flowName, kmsArn, sourceFlowConfig, tasks, triggerConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlowDefinition {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    flowName: ").append(toIndentedString(flowName)).append("\n");
    sb.append("    kmsArn: ").append(toIndentedString(kmsArn)).append("\n");
    sb.append("    sourceFlowConfig: ").append(toIndentedString(sourceFlowConfig)).append("\n");
    sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
    sb.append("    triggerConfig: ").append(toIndentedString(triggerConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Description");
    openapiFields.add("FlowName");
    openapiFields.add("KmsArn");
    openapiFields.add("SourceFlowConfig");
    openapiFields.add("Tasks");
    openapiFields.add("TriggerConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("FlowName");
    openapiRequiredFields.add("KmsArn");
    openapiRequiredFields.add("SourceFlowConfig");
    openapiRequiredFields.add("Tasks");
    openapiRequiredFields.add("TriggerConfig");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FlowDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FlowDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FlowDefinition is not found in the empty JSON string", FlowDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FlowDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FlowDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FlowDefinition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the required field `FlowName`
      String.validateJsonElement(jsonObj.get("FlowName"));
      // validate the required field `KmsArn`
      String.validateJsonElement(jsonObj.get("KmsArn"));
      // validate the required field `SourceFlowConfig`
      PutIntegrationRequestFlowDefinitionSourceFlowConfig.validateJsonElement(jsonObj.get("SourceFlowConfig"));
      // validate the required field `Tasks`
      List.validateJsonElement(jsonObj.get("Tasks"));
      // validate the required field `TriggerConfig`
      PutIntegrationRequestFlowDefinitionTriggerConfig.validateJsonElement(jsonObj.get("TriggerConfig"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FlowDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FlowDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FlowDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FlowDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<FlowDefinition>() {
           @Override
           public void write(JsonWriter out, FlowDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FlowDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FlowDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FlowDefinition
   * @throws IOException if the JSON string is invalid with respect to FlowDefinition
   */
  public static FlowDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FlowDefinition.class);
  }

  /**
   * Convert an instance of FlowDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

