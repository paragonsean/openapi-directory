/*
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object that defines the Key element of a ProfileObject. A Key is a special element that can be used to search for a customer profile.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:36.569162-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ObjectTypeKey {
  public static final String SERIALIZED_NAME_STANDARD_IDENTIFIERS = "StandardIdentifiers";
  @SerializedName(SERIALIZED_NAME_STANDARD_IDENTIFIERS)
  private List standardIdentifiers;

  public static final String SERIALIZED_NAME_FIELD_NAMES = "FieldNames";
  @SerializedName(SERIALIZED_NAME_FIELD_NAMES)
  private List fieldNames;

  public ObjectTypeKey() {
  }

  public ObjectTypeKey standardIdentifiers(List standardIdentifiers) {
    this.standardIdentifiers = standardIdentifiers;
    return this;
  }

  /**
   * Get standardIdentifiers
   * @return standardIdentifiers
   */
  @javax.annotation.Nullable
  public List getStandardIdentifiers() {
    return standardIdentifiers;
  }

  public void setStandardIdentifiers(List standardIdentifiers) {
    this.standardIdentifiers = standardIdentifiers;
  }


  public ObjectTypeKey fieldNames(List fieldNames) {
    this.fieldNames = fieldNames;
    return this;
  }

  /**
   * Get fieldNames
   * @return fieldNames
   */
  @javax.annotation.Nullable
  public List getFieldNames() {
    return fieldNames;
  }

  public void setFieldNames(List fieldNames) {
    this.fieldNames = fieldNames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectTypeKey objectTypeKey = (ObjectTypeKey) o;
    return Objects.equals(this.standardIdentifiers, objectTypeKey.standardIdentifiers) &&
        Objects.equals(this.fieldNames, objectTypeKey.fieldNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(standardIdentifiers, fieldNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectTypeKey {\n");
    sb.append("    standardIdentifiers: ").append(toIndentedString(standardIdentifiers)).append("\n");
    sb.append("    fieldNames: ").append(toIndentedString(fieldNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StandardIdentifiers");
    openapiFields.add("FieldNames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ObjectTypeKey
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ObjectTypeKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObjectTypeKey is not found in the empty JSON string", ObjectTypeKey.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ObjectTypeKey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ObjectTypeKey` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `StandardIdentifiers`
      if (jsonObj.get("StandardIdentifiers") != null && !jsonObj.get("StandardIdentifiers").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("StandardIdentifiers"));
      }
      // validate the optional field `FieldNames`
      if (jsonObj.get("FieldNames") != null && !jsonObj.get("FieldNames").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("FieldNames"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObjectTypeKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObjectTypeKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObjectTypeKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObjectTypeKey.class));

       return (TypeAdapter<T>) new TypeAdapter<ObjectTypeKey>() {
           @Override
           public void write(JsonWriter out, ObjectTypeKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ObjectTypeKey read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ObjectTypeKey given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ObjectTypeKey
   * @throws IOException if the JSON string is invalid with respect to ObjectTypeKey
   */
  public static ObjectTypeKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObjectTypeKey.class);
  }

  /**
   * Convert an instance of ObjectTypeKey to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

