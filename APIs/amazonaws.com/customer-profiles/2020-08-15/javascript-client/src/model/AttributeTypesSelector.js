/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributeMatchingModel from './AttributeMatchingModel';

/**
 * The AttributeTypesSelector model module.
 * @module model/AttributeTypesSelector
 * @version 2020-08-15
 */
class AttributeTypesSelector {
    /**
     * Constructs a new <code>AttributeTypesSelector</code>.
     * &lt;p&gt;Configuration information about the &lt;code&gt;AttributeTypesSelector &lt;/code&gt;where the rule-based identity resolution uses to match profiles. You can choose how profiles are compared across attribute types and which attribute to use for matching from each type. There are three attribute types you can configure:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Email type&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can choose from &lt;code&gt;Email&lt;/code&gt;, &lt;code&gt;BusinessEmail&lt;/code&gt;, and &lt;code&gt;PersonalEmail&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Phone number type&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can choose from &lt;code&gt;Phone&lt;/code&gt;, &lt;code&gt;HomePhone&lt;/code&gt;, and &lt;code&gt;MobilePhone&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Address type&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can choose from &lt;code&gt;Address&lt;/code&gt;, &lt;code&gt;BusinessAddress&lt;/code&gt;, &lt;code&gt;MaillingAddress&lt;/code&gt;, and &lt;code&gt;ShippingAddress&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can either choose &lt;code&gt;ONE_TO_ONE&lt;/code&gt; or &lt;code&gt;MANY_TO_MANY&lt;/code&gt; as the &lt;code&gt;AttributeMatchingModel&lt;/code&gt;. When choosing &lt;code&gt;MANY_TO_MANY&lt;/code&gt;, the system can match attribute across the sub-types of an attribute type. For example, if the value of the &lt;code&gt;Email&lt;/code&gt; field of Profile A and the value of &lt;code&gt;BusinessEmail&lt;/code&gt; field of Profile B matches, the two profiles are matched on the Email type. When choosing &lt;code&gt;ONE_TO_ONE&lt;/code&gt; the system can only match if the sub-types are exact matches. For example, only when the value of the &lt;code&gt;Email&lt;/code&gt; field of Profile A and the value of the &lt;code&gt;Email&lt;/code&gt; field of Profile B matches, the two profiles are matched on the Email type.&lt;/p&gt;
     * @alias module:model/AttributeTypesSelector
     * @param attributeMatchingModel {module:model/AttributeMatchingModel} 
     */
    constructor(attributeMatchingModel) { 
        
        AttributeTypesSelector.initialize(this, attributeMatchingModel);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attributeMatchingModel) { 
        obj['AttributeMatchingModel'] = attributeMatchingModel;
    }

    /**
     * Constructs a <code>AttributeTypesSelector</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AttributeTypesSelector} obj Optional instance to populate.
     * @return {module:model/AttributeTypesSelector} The populated <code>AttributeTypesSelector</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AttributeTypesSelector();

            if (data.hasOwnProperty('AttributeMatchingModel')) {
                obj['AttributeMatchingModel'] = ApiClient.convertToType(data['AttributeMatchingModel'], AttributeMatchingModel);
            }
            if (data.hasOwnProperty('Address')) {
                obj['Address'] = ApiClient.convertToType(data['Address'], Array);
            }
            if (data.hasOwnProperty('PhoneNumber')) {
                obj['PhoneNumber'] = ApiClient.convertToType(data['PhoneNumber'], Array);
            }
            if (data.hasOwnProperty('EmailAddress')) {
                obj['EmailAddress'] = ApiClient.convertToType(data['EmailAddress'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AttributeTypesSelector</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AttributeTypesSelector</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AttributeTypesSelector.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `AttributeMatchingModel`
        if (data['AttributeMatchingModel']) { // data not null
          AttributeMatchingModel.validateJSON(data['AttributeMatchingModel']);
        }
        // validate the optional field `Address`
        if (data['Address']) { // data not null
          Array.validateJSON(data['Address']);
        }
        // validate the optional field `PhoneNumber`
        if (data['PhoneNumber']) { // data not null
          Array.validateJSON(data['PhoneNumber']);
        }
        // validate the optional field `EmailAddress`
        if (data['EmailAddress']) { // data not null
          Array.validateJSON(data['EmailAddress']);
        }

        return true;
    }


}

AttributeTypesSelector.RequiredProperties = ["AttributeMatchingModel"];

/**
 * @member {module:model/AttributeMatchingModel} AttributeMatchingModel
 */
AttributeTypesSelector.prototype['AttributeMatchingModel'] = undefined;

/**
 * @member {Array} Address
 */
AttributeTypesSelector.prototype['Address'] = undefined;

/**
 * @member {Array} PhoneNumber
 */
AttributeTypesSelector.prototype['PhoneNumber'] = undefined;

/**
 * @member {Array} EmailAddress
 */
AttributeTypesSelector.prototype['EmailAddress'] = undefined;






export default AttributeTypesSelector;

