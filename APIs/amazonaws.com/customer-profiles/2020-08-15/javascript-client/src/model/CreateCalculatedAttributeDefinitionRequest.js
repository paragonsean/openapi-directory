/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateCalculatedAttributeDefinitionRequestAttributeDetails from './CreateCalculatedAttributeDefinitionRequestAttributeDetails';
import UpdateCalculatedAttributeDefinitionRequestConditions from './UpdateCalculatedAttributeDefinitionRequestConditions';

/**
 * The CreateCalculatedAttributeDefinitionRequest model module.
 * @module model/CreateCalculatedAttributeDefinitionRequest
 * @version 2020-08-15
 */
class CreateCalculatedAttributeDefinitionRequest {
    /**
     * Constructs a new <code>CreateCalculatedAttributeDefinitionRequest</code>.
     * @alias module:model/CreateCalculatedAttributeDefinitionRequest
     * @param attributeDetails {module:model/CreateCalculatedAttributeDefinitionRequestAttributeDetails} 
     * @param statistic {module:model/CreateCalculatedAttributeDefinitionRequest.StatisticEnum} The aggregation operation to perform for the calculated attribute.
     */
    constructor(attributeDetails, statistic) { 
        
        CreateCalculatedAttributeDefinitionRequest.initialize(this, attributeDetails, statistic);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attributeDetails, statistic) { 
        obj['AttributeDetails'] = attributeDetails;
        obj['Statistic'] = statistic;
    }

    /**
     * Constructs a <code>CreateCalculatedAttributeDefinitionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateCalculatedAttributeDefinitionRequest} obj Optional instance to populate.
     * @return {module:model/CreateCalculatedAttributeDefinitionRequest} The populated <code>CreateCalculatedAttributeDefinitionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateCalculatedAttributeDefinitionRequest();

            if (data.hasOwnProperty('DisplayName')) {
                obj['DisplayName'] = ApiClient.convertToType(data['DisplayName'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('AttributeDetails')) {
                obj['AttributeDetails'] = CreateCalculatedAttributeDefinitionRequestAttributeDetails.constructFromObject(data['AttributeDetails']);
            }
            if (data.hasOwnProperty('Conditions')) {
                obj['Conditions'] = UpdateCalculatedAttributeDefinitionRequestConditions.constructFromObject(data['Conditions']);
            }
            if (data.hasOwnProperty('Statistic')) {
                obj['Statistic'] = ApiClient.convertToType(data['Statistic'], 'String');
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateCalculatedAttributeDefinitionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateCalculatedAttributeDefinitionRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateCalculatedAttributeDefinitionRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['DisplayName'] && !(typeof data['DisplayName'] === 'string' || data['DisplayName'] instanceof String)) {
            throw new Error("Expected the field `DisplayName` to be a primitive type in the JSON string but got " + data['DisplayName']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // validate the optional field `AttributeDetails`
        if (data['AttributeDetails']) { // data not null
          CreateCalculatedAttributeDefinitionRequestAttributeDetails.validateJSON(data['AttributeDetails']);
        }
        // validate the optional field `Conditions`
        if (data['Conditions']) { // data not null
          UpdateCalculatedAttributeDefinitionRequestConditions.validateJSON(data['Conditions']);
        }
        // ensure the json data is a string
        if (data['Statistic'] && !(typeof data['Statistic'] === 'string' || data['Statistic'] instanceof String)) {
            throw new Error("Expected the field `Statistic` to be a primitive type in the JSON string but got " + data['Statistic']);
        }

        return true;
    }


}

CreateCalculatedAttributeDefinitionRequest.RequiredProperties = ["AttributeDetails", "Statistic"];

/**
 * The display name of the calculated attribute.
 * @member {String} DisplayName
 */
CreateCalculatedAttributeDefinitionRequest.prototype['DisplayName'] = undefined;

/**
 * The description of the calculated attribute.
 * @member {String} Description
 */
CreateCalculatedAttributeDefinitionRequest.prototype['Description'] = undefined;

/**
 * @member {module:model/CreateCalculatedAttributeDefinitionRequestAttributeDetails} AttributeDetails
 */
CreateCalculatedAttributeDefinitionRequest.prototype['AttributeDetails'] = undefined;

/**
 * @member {module:model/UpdateCalculatedAttributeDefinitionRequestConditions} Conditions
 */
CreateCalculatedAttributeDefinitionRequest.prototype['Conditions'] = undefined;

/**
 * The aggregation operation to perform for the calculated attribute.
 * @member {module:model/CreateCalculatedAttributeDefinitionRequest.StatisticEnum} Statistic
 */
CreateCalculatedAttributeDefinitionRequest.prototype['Statistic'] = undefined;

/**
 * The tags used to organize, track, or control access for this resource.
 * @member {Object.<String, String>} Tags
 */
CreateCalculatedAttributeDefinitionRequest.prototype['Tags'] = undefined;





/**
 * Allowed values for the <code>Statistic</code> property.
 * @enum {String}
 * @readonly
 */
CreateCalculatedAttributeDefinitionRequest['StatisticEnum'] = {

    /**
     * value: "FIRST_OCCURRENCE"
     * @const
     */
    "FIRST_OCCURRENCE": "FIRST_OCCURRENCE",

    /**
     * value: "LAST_OCCURRENCE"
     * @const
     */
    "LAST_OCCURRENCE": "LAST_OCCURRENCE",

    /**
     * value: "COUNT"
     * @const
     */
    "COUNT": "COUNT",

    /**
     * value: "SUM"
     * @const
     */
    "SUM": "SUM",

    /**
     * value: "MINIMUM"
     * @const
     */
    "MINIMUM": "MINIMUM",

    /**
     * value: "MAXIMUM"
     * @const
     */
    "MAXIMUM": "MAXIMUM",

    /**
     * value: "AVERAGE"
     * @const
     */
    "AVERAGE": "AVERAGE",

    /**
     * value: "MAX_OCCURRENCE"
     * @const
     */
    "MAX_OCCURRENCE": "MAX_OCCURRENCE"
};



export default CreateCalculatedAttributeDefinitionRequest;

