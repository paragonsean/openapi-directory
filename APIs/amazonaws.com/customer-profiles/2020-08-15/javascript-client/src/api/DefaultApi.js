/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddProfileKeyRequest from '../model/AddProfileKeyRequest';
import AddProfileKeyResponse from '../model/AddProfileKeyResponse';
import CreateCalculatedAttributeDefinitionRequest from '../model/CreateCalculatedAttributeDefinitionRequest';
import CreateCalculatedAttributeDefinitionResponse from '../model/CreateCalculatedAttributeDefinitionResponse';
import CreateDomainRequest from '../model/CreateDomainRequest';
import CreateDomainResponse from '../model/CreateDomainResponse';
import CreateEventStreamRequest from '../model/CreateEventStreamRequest';
import CreateEventStreamResponse from '../model/CreateEventStreamResponse';
import CreateIntegrationWorkflowRequest from '../model/CreateIntegrationWorkflowRequest';
import CreateIntegrationWorkflowResponse from '../model/CreateIntegrationWorkflowResponse';
import CreateProfileRequest from '../model/CreateProfileRequest';
import CreateProfileResponse from '../model/CreateProfileResponse';
import DeleteDomainResponse from '../model/DeleteDomainResponse';
import DeleteIntegrationRequest from '../model/DeleteIntegrationRequest';
import DeleteIntegrationResponse from '../model/DeleteIntegrationResponse';
import DeleteProfileKeyRequest from '../model/DeleteProfileKeyRequest';
import DeleteProfileKeyResponse from '../model/DeleteProfileKeyResponse';
import DeleteProfileObjectRequest from '../model/DeleteProfileObjectRequest';
import DeleteProfileObjectResponse from '../model/DeleteProfileObjectResponse';
import DeleteProfileObjectTypeResponse from '../model/DeleteProfileObjectTypeResponse';
import DeleteProfileRequest from '../model/DeleteProfileRequest';
import DeleteProfileResponse from '../model/DeleteProfileResponse';
import GetAutoMergingPreviewRequest from '../model/GetAutoMergingPreviewRequest';
import GetAutoMergingPreviewResponse from '../model/GetAutoMergingPreviewResponse';
import GetCalculatedAttributeDefinitionResponse from '../model/GetCalculatedAttributeDefinitionResponse';
import GetCalculatedAttributeForProfileResponse from '../model/GetCalculatedAttributeForProfileResponse';
import GetDomainResponse from '../model/GetDomainResponse';
import GetEventStreamResponse from '../model/GetEventStreamResponse';
import GetIdentityResolutionJobResponse from '../model/GetIdentityResolutionJobResponse';
import GetIntegrationResponse from '../model/GetIntegrationResponse';
import GetMatchesResponse from '../model/GetMatchesResponse';
import GetProfileObjectTypeResponse from '../model/GetProfileObjectTypeResponse';
import GetProfileObjectTypeTemplateResponse from '../model/GetProfileObjectTypeTemplateResponse';
import GetSimilarProfilesRequest from '../model/GetSimilarProfilesRequest';
import GetSimilarProfilesResponse from '../model/GetSimilarProfilesResponse';
import GetWorkflowResponse from '../model/GetWorkflowResponse';
import GetWorkflowStepsResponse from '../model/GetWorkflowStepsResponse';
import ListAccountIntegrationsResponse from '../model/ListAccountIntegrationsResponse';
import ListCalculatedAttributeDefinitionsResponse from '../model/ListCalculatedAttributeDefinitionsResponse';
import ListCalculatedAttributesForProfileResponse from '../model/ListCalculatedAttributesForProfileResponse';
import ListDomainsResponse from '../model/ListDomainsResponse';
import ListEventStreamsResponse from '../model/ListEventStreamsResponse';
import ListIdentityResolutionJobsResponse from '../model/ListIdentityResolutionJobsResponse';
import ListIntegrationsResponse from '../model/ListIntegrationsResponse';
import ListProfileObjectTypeTemplatesResponse from '../model/ListProfileObjectTypeTemplatesResponse';
import ListProfileObjectTypesResponse from '../model/ListProfileObjectTypesResponse';
import ListProfileObjectsRequest from '../model/ListProfileObjectsRequest';
import ListProfileObjectsResponse from '../model/ListProfileObjectsResponse';
import ListRuleBasedMatchesResponse from '../model/ListRuleBasedMatchesResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import ListWorkflowsRequest from '../model/ListWorkflowsRequest';
import ListWorkflowsResponse from '../model/ListWorkflowsResponse';
import MergeProfilesRequest from '../model/MergeProfilesRequest';
import MergeProfilesResponse from '../model/MergeProfilesResponse';
import PutIntegrationRequest from '../model/PutIntegrationRequest';
import PutIntegrationResponse from '../model/PutIntegrationResponse';
import PutProfileObjectRequest from '../model/PutProfileObjectRequest';
import PutProfileObjectResponse from '../model/PutProfileObjectResponse';
import PutProfileObjectTypeRequest from '../model/PutProfileObjectTypeRequest';
import PutProfileObjectTypeResponse from '../model/PutProfileObjectTypeResponse';
import SearchProfilesRequest from '../model/SearchProfilesRequest';
import SearchProfilesResponse from '../model/SearchProfilesResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateCalculatedAttributeDefinitionRequest from '../model/UpdateCalculatedAttributeDefinitionRequest';
import UpdateCalculatedAttributeDefinitionResponse from '../model/UpdateCalculatedAttributeDefinitionResponse';
import UpdateDomainRequest from '../model/UpdateDomainRequest';
import UpdateDomainResponse from '../model/UpdateDomainResponse';
import UpdateProfileRequest from '../model/UpdateProfileRequest';
import UpdateProfileResponse from '../model/UpdateProfileResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2020-08-15
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addProfileKey operation.
     * @callback module:api/DefaultApi~addProfileKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddProfileKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Associates a new key value with a specific profile, such as a Contact Record ContactId.</p> <p>A profile object can have a single unique key and any number of additional keys that can be used to identify the profile that it belongs to.</p>
     * @param {String} domainName The unique name of the domain.
     * @param {module:model/AddProfileKeyRequest} addProfileKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~addProfileKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddProfileKeyResponse}
     */
    addProfileKey(domainName, addProfileKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = addProfileKeyRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling addProfileKey");
      }
      // verify the required parameter 'addProfileKeyRequest' is set
      if (addProfileKeyRequest === undefined || addProfileKeyRequest === null) {
        throw new Error("Missing the required parameter 'addProfileKeyRequest' when calling addProfileKey");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddProfileKeyResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/profiles/keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCalculatedAttributeDefinition operation.
     * @callback module:api/DefaultApi~createCalculatedAttributeDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCalculatedAttributeDefinitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new calculated attribute definition. After creation, new object data ingested into Customer Profiles will be included in the calculated attribute, which can be retrieved for a profile using the <a href=\"https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetCalculatedAttributeForProfile.html\">GetCalculatedAttributeForProfile</a> API. Defining a calculated attribute makes it available for all profiles within a domain. Each calculated attribute can only reference one <code>ObjectType</code> and at most, two fields from that <code>ObjectType</code>.
     * @param {String} domainName The unique name of the domain.
     * @param {String} calculatedAttributeName The unique name of the calculated attribute.
     * @param {module:model/CreateCalculatedAttributeDefinitionRequest} createCalculatedAttributeDefinitionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createCalculatedAttributeDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCalculatedAttributeDefinitionResponse}
     */
    createCalculatedAttributeDefinition(domainName, calculatedAttributeName, createCalculatedAttributeDefinitionRequest, opts, callback) {
      opts = opts || {};
      let postBody = createCalculatedAttributeDefinitionRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling createCalculatedAttributeDefinition");
      }
      // verify the required parameter 'calculatedAttributeName' is set
      if (calculatedAttributeName === undefined || calculatedAttributeName === null) {
        throw new Error("Missing the required parameter 'calculatedAttributeName' when calling createCalculatedAttributeDefinition");
      }
      // verify the required parameter 'createCalculatedAttributeDefinitionRequest' is set
      if (createCalculatedAttributeDefinitionRequest === undefined || createCalculatedAttributeDefinitionRequest === null) {
        throw new Error("Missing the required parameter 'createCalculatedAttributeDefinitionRequest' when calling createCalculatedAttributeDefinition");
      }

      let pathParams = {
        'DomainName': domainName,
        'CalculatedAttributeName': calculatedAttributeName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCalculatedAttributeDefinitionResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/calculated-attributes/{CalculatedAttributeName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDomain operation.
     * @callback module:api/DefaultApi~createDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a domain, which is a container for all customer data, such as customer profile attributes, object types, profile keys, and encryption keys. You can create multiple domains, and each domain can have multiple third-party integrations.</p> <p>Each Amazon Connect instance can be associated with only one domain. Multiple Amazon Connect instances can be associated with one domain.</p> <p>Use this API or <a href=\"https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_UpdateDomain.html\">UpdateDomain</a> to enable <a href=\"https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html\">identity resolution</a>: set <code>Matching</code> to true.</p> <p>To prevent cross-service impersonation when you call this API, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/cross-service-confused-deputy-prevention.html\">Cross-service confused deputy prevention</a> for sample policies that you should apply. </p>
     * @param {String} domainName The unique name of the domain.
     * @param {module:model/CreateDomainRequest} createDomainRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDomainResponse}
     */
    createDomain(domainName, createDomainRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDomainRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling createDomain");
      }
      // verify the required parameter 'createDomainRequest' is set
      if (createDomainRequest === undefined || createDomainRequest === null) {
        throw new Error("Missing the required parameter 'createDomainRequest' when calling createDomain");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDomainResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEventStream operation.
     * @callback module:api/DefaultApi~createEventStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateEventStreamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an event stream, which is a subscription to real-time events, such as when profiles are created and updated through Amazon Connect Customer Profiles.</p> <p>Each event stream can be associated with only one Kinesis Data Stream destination in the same region and Amazon Web Services account as the customer profiles domain</p>
     * @param {String} domainName The unique name of the domain.
     * @param {String} eventStreamName The name of the event stream.
     * @param {module:model/CreateEventStreamRequest} createEventStreamRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createEventStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateEventStreamResponse}
     */
    createEventStream(domainName, eventStreamName, createEventStreamRequest, opts, callback) {
      opts = opts || {};
      let postBody = createEventStreamRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling createEventStream");
      }
      // verify the required parameter 'eventStreamName' is set
      if (eventStreamName === undefined || eventStreamName === null) {
        throw new Error("Missing the required parameter 'eventStreamName' when calling createEventStream");
      }
      // verify the required parameter 'createEventStreamRequest' is set
      if (createEventStreamRequest === undefined || createEventStreamRequest === null) {
        throw new Error("Missing the required parameter 'createEventStreamRequest' when calling createEventStream");
      }

      let pathParams = {
        'DomainName': domainName,
        'EventStreamName': eventStreamName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateEventStreamResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/event-streams/{EventStreamName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createIntegrationWorkflow operation.
     * @callback module:api/DefaultApi~createIntegrationWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateIntegrationWorkflowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Creates an integration workflow. An integration workflow is an async process which ingests historic data and sets up an integration for ongoing updates. The supported Amazon AppFlow sources are Salesforce, ServiceNow, and Marketo. 
     * @param {String} domainName The unique name of the domain.
     * @param {module:model/CreateIntegrationWorkflowRequest} createIntegrationWorkflowRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createIntegrationWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateIntegrationWorkflowResponse}
     */
    createIntegrationWorkflow(domainName, createIntegrationWorkflowRequest, opts, callback) {
      opts = opts || {};
      let postBody = createIntegrationWorkflowRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling createIntegrationWorkflow");
      }
      // verify the required parameter 'createIntegrationWorkflowRequest' is set
      if (createIntegrationWorkflowRequest === undefined || createIntegrationWorkflowRequest === null) {
        throw new Error("Missing the required parameter 'createIntegrationWorkflowRequest' when calling createIntegrationWorkflow");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateIntegrationWorkflowResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/workflows/integrations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProfile operation.
     * @callback module:api/DefaultApi~createProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a standard profile.</p> <p>A standard profile represents the following attributes for a customer profile in a domain.</p>
     * @param {String} domainName The unique name of the domain.
     * @param {module:model/CreateProfileRequest} createProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateProfileResponse}
     */
    createProfile(domainName, createProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = createProfileRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling createProfile");
      }
      // verify the required parameter 'createProfileRequest' is set
      if (createProfileRequest === undefined || createProfileRequest === null) {
        throw new Error("Missing the required parameter 'createProfileRequest' when calling createProfile");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateProfileResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/profiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCalculatedAttributeDefinition operation.
     * @callback module:api/DefaultApi~deleteCalculatedAttributeDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing calculated attribute definition. Note that deleting a default calculated attribute is possible, however once deleted, you will be unable to undo that action and will need to recreate it on your own using the CreateCalculatedAttributeDefinition API if you want it back.
     * @param {String} domainName The unique name of the domain.
     * @param {String} calculatedAttributeName The unique name of the calculated attribute.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteCalculatedAttributeDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteCalculatedAttributeDefinition(domainName, calculatedAttributeName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling deleteCalculatedAttributeDefinition");
      }
      // verify the required parameter 'calculatedAttributeName' is set
      if (calculatedAttributeName === undefined || calculatedAttributeName === null) {
        throw new Error("Missing the required parameter 'calculatedAttributeName' when calling deleteCalculatedAttributeDefinition");
      }

      let pathParams = {
        'DomainName': domainName,
        'CalculatedAttributeName': calculatedAttributeName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/domains/{DomainName}/calculated-attributes/{CalculatedAttributeName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDomain operation.
     * @callback module:api/DefaultApi~deleteDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a specific domain and all of its customer data, such as customer profile attributes and their related objects.
     * @param {String} domainName The unique name of the domain.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteDomainResponse}
     */
    deleteDomain(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling deleteDomain");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteDomainResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEventStream operation.
     * @callback module:api/DefaultApi~deleteEventStreamCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables and deletes the specified event stream.
     * @param {String} domainName The unique name of the domain.
     * @param {String} eventStreamName The name of the event stream
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteEventStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteEventStream(domainName, eventStreamName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling deleteEventStream");
      }
      // verify the required parameter 'eventStreamName' is set
      if (eventStreamName === undefined || eventStreamName === null) {
        throw new Error("Missing the required parameter 'eventStreamName' when calling deleteEventStream");
      }

      let pathParams = {
        'DomainName': domainName,
        'EventStreamName': eventStreamName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/domains/{DomainName}/event-streams/{EventStreamName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIntegration operation.
     * @callback module:api/DefaultApi~deleteIntegrationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteIntegrationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an integration from a specific domain.
     * @param {String} domainName The unique name of the domain.
     * @param {module:model/DeleteIntegrationRequest} deleteIntegrationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteIntegrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteIntegrationResponse}
     */
    deleteIntegration(domainName, deleteIntegrationRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteIntegrationRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling deleteIntegration");
      }
      // verify the required parameter 'deleteIntegrationRequest' is set
      if (deleteIntegrationRequest === undefined || deleteIntegrationRequest === null) {
        throw new Error("Missing the required parameter 'deleteIntegrationRequest' when calling deleteIntegration");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteIntegrationResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/integrations/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfile operation.
     * @callback module:api/DefaultApi~deleteProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the standard customer profile and all data pertaining to the profile.
     * @param {String} domainName The unique name of the domain.
     * @param {module:model/DeleteProfileRequest} deleteProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteProfileResponse}
     */
    deleteProfile(domainName, deleteProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteProfileRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling deleteProfile");
      }
      // verify the required parameter 'deleteProfileRequest' is set
      if (deleteProfileRequest === undefined || deleteProfileRequest === null) {
        throw new Error("Missing the required parameter 'deleteProfileRequest' when calling deleteProfile");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteProfileResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/profiles/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfileKey operation.
     * @callback module:api/DefaultApi~deleteProfileKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteProfileKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a searchable key from a customer profile.
     * @param {String} domainName The unique name of the domain.
     * @param {module:model/DeleteProfileKeyRequest} deleteProfileKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteProfileKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteProfileKeyResponse}
     */
    deleteProfileKey(domainName, deleteProfileKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteProfileKeyRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling deleteProfileKey");
      }
      // verify the required parameter 'deleteProfileKeyRequest' is set
      if (deleteProfileKeyRequest === undefined || deleteProfileKeyRequest === null) {
        throw new Error("Missing the required parameter 'deleteProfileKeyRequest' when calling deleteProfileKey");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteProfileKeyResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/profiles/keys/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfileObject operation.
     * @callback module:api/DefaultApi~deleteProfileObjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteProfileObjectResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an object associated with a profile of a given ProfileObjectType.
     * @param {String} domainName The unique name of the domain.
     * @param {module:model/DeleteProfileObjectRequest} deleteProfileObjectRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteProfileObjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteProfileObjectResponse}
     */
    deleteProfileObject(domainName, deleteProfileObjectRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteProfileObjectRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling deleteProfileObject");
      }
      // verify the required parameter 'deleteProfileObjectRequest' is set
      if (deleteProfileObjectRequest === undefined || deleteProfileObjectRequest === null) {
        throw new Error("Missing the required parameter 'deleteProfileObjectRequest' when calling deleteProfileObject");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteProfileObjectResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/profiles/objects/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfileObjectType operation.
     * @callback module:api/DefaultApi~deleteProfileObjectTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteProfileObjectTypeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a ProfileObjectType from a specific domain as well as removes all the ProfileObjects of that type. It also disables integrations from this specific ProfileObjectType. In addition, it scrubs all of the fields of the standard profile that were populated from this ProfileObjectType.
     * @param {String} domainName The unique name of the domain.
     * @param {String} objectTypeName The name of the profile object type.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteProfileObjectTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteProfileObjectTypeResponse}
     */
    deleteProfileObjectType(domainName, objectTypeName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling deleteProfileObjectType");
      }
      // verify the required parameter 'objectTypeName' is set
      if (objectTypeName === undefined || objectTypeName === null) {
        throw new Error("Missing the required parameter 'objectTypeName' when calling deleteProfileObjectType");
      }

      let pathParams = {
        'DomainName': domainName,
        'ObjectTypeName': objectTypeName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteProfileObjectTypeResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/object-types/{ObjectTypeName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWorkflow operation.
     * @callback module:api/DefaultApi~deleteWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified workflow and all its corresponding resources. This is an async process.
     * @param {String} domainName The unique name of the domain.
     * @param {String} workflowId Unique identifier for the workflow.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteWorkflow(domainName, workflowId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling deleteWorkflow");
      }
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling deleteWorkflow");
      }

      let pathParams = {
        'DomainName': domainName,
        'WorkflowId': workflowId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/domains/{DomainName}/workflows/{WorkflowId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAutoMergingPreview operation.
     * @callback module:api/DefaultApi~getAutoMergingPreviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAutoMergingPreviewResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Tests the auto-merging settings of your Identity Resolution Job without merging your data. It randomly selects a sample of matching groups from the existing matching results, and applies the automerging settings that you provided. You can then view the number of profiles in the sample, the number of matches, and the number of profiles identified to be merged. This enables you to evaluate the accuracy of the attributes in your matching list. </p> <p>You can't view which profiles are matched and would be merged.</p> <important> <p>We strongly recommend you use this API to do a dry run of the automerging process before running the Identity Resolution Job. Include <b>at least</b> two matching attributes. If your matching list includes too few attributes (such as only <code>FirstName</code> or only <code>LastName</code>), there may be a large number of matches. This increases the chances of erroneous merges.</p> </important>
     * @param {String} domainName The unique name of the domain.
     * @param {module:model/GetAutoMergingPreviewRequest} getAutoMergingPreviewRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAutoMergingPreviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAutoMergingPreviewResponse}
     */
    getAutoMergingPreview(domainName, getAutoMergingPreviewRequest, opts, callback) {
      opts = opts || {};
      let postBody = getAutoMergingPreviewRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling getAutoMergingPreview");
      }
      // verify the required parameter 'getAutoMergingPreviewRequest' is set
      if (getAutoMergingPreviewRequest === undefined || getAutoMergingPreviewRequest === null) {
        throw new Error("Missing the required parameter 'getAutoMergingPreviewRequest' when calling getAutoMergingPreview");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetAutoMergingPreviewResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/identity-resolution-jobs/auto-merging-preview', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCalculatedAttributeDefinition operation.
     * @callback module:api/DefaultApi~getCalculatedAttributeDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCalculatedAttributeDefinitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides more information on a calculated attribute definition for Customer Profiles.
     * @param {String} domainName The unique name of the domain.
     * @param {String} calculatedAttributeName The unique name of the calculated attribute.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getCalculatedAttributeDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCalculatedAttributeDefinitionResponse}
     */
    getCalculatedAttributeDefinition(domainName, calculatedAttributeName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling getCalculatedAttributeDefinition");
      }
      // verify the required parameter 'calculatedAttributeName' is set
      if (calculatedAttributeName === undefined || calculatedAttributeName === null) {
        throw new Error("Missing the required parameter 'calculatedAttributeName' when calling getCalculatedAttributeDefinition");
      }

      let pathParams = {
        'DomainName': domainName,
        'CalculatedAttributeName': calculatedAttributeName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCalculatedAttributeDefinitionResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/calculated-attributes/{CalculatedAttributeName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCalculatedAttributeForProfile operation.
     * @callback module:api/DefaultApi~getCalculatedAttributeForProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCalculatedAttributeForProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a calculated attribute for a customer profile.
     * @param {String} domainName The unique name of the domain.
     * @param {String} profileId The unique identifier of a customer profile.
     * @param {String} calculatedAttributeName The unique name of the calculated attribute.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getCalculatedAttributeForProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCalculatedAttributeForProfileResponse}
     */
    getCalculatedAttributeForProfile(domainName, profileId, calculatedAttributeName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling getCalculatedAttributeForProfile");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling getCalculatedAttributeForProfile");
      }
      // verify the required parameter 'calculatedAttributeName' is set
      if (calculatedAttributeName === undefined || calculatedAttributeName === null) {
        throw new Error("Missing the required parameter 'calculatedAttributeName' when calling getCalculatedAttributeForProfile");
      }

      let pathParams = {
        'DomainName': domainName,
        'ProfileId': profileId,
        'CalculatedAttributeName': calculatedAttributeName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCalculatedAttributeForProfileResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/profile/{ProfileId}/calculated-attributes/{CalculatedAttributeName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomain operation.
     * @callback module:api/DefaultApi~getDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a specific domain.
     * @param {String} domainName The unique name of the domain.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDomainResponse}
     */
    getDomain(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling getDomain");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDomainResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventStream operation.
     * @callback module:api/DefaultApi~getEventStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEventStreamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about the specified event stream in a specific domain.
     * @param {String} domainName The unique name of the domain.
     * @param {String} eventStreamName The name of the event stream provided during create operations.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getEventStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEventStreamResponse}
     */
    getEventStream(domainName, eventStreamName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling getEventStream");
      }
      // verify the required parameter 'eventStreamName' is set
      if (eventStreamName === undefined || eventStreamName === null) {
        throw new Error("Missing the required parameter 'eventStreamName' when calling getEventStream");
      }

      let pathParams = {
        'DomainName': domainName,
        'EventStreamName': eventStreamName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetEventStreamResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/event-streams/{EventStreamName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIdentityResolutionJob operation.
     * @callback module:api/DefaultApi~getIdentityResolutionJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetIdentityResolutionJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns information about an Identity Resolution Job in a specific domain. </p> <p>Identity Resolution Jobs are set up using the Amazon Connect admin console. For more information, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/use-identity-resolution.html\">Use Identity Resolution to consolidate similar profiles</a>.</p>
     * @param {String} domainName The unique name of the domain.
     * @param {String} jobId The unique identifier of the Identity Resolution Job.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getIdentityResolutionJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetIdentityResolutionJobResponse}
     */
    getIdentityResolutionJob(domainName, jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling getIdentityResolutionJob");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getIdentityResolutionJob");
      }

      let pathParams = {
        'DomainName': domainName,
        'JobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetIdentityResolutionJobResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/identity-resolution-jobs/{JobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIntegration operation.
     * @callback module:api/DefaultApi~getIntegrationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetIntegrationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an integration for a domain.
     * @param {String} domainName The unique name of the domain.
     * @param {module:model/DeleteIntegrationRequest} deleteIntegrationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getIntegrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetIntegrationResponse}
     */
    getIntegration(domainName, deleteIntegrationRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteIntegrationRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling getIntegration");
      }
      // verify the required parameter 'deleteIntegrationRequest' is set
      if (deleteIntegrationRequest === undefined || deleteIntegrationRequest === null) {
        throw new Error("Missing the required parameter 'deleteIntegrationRequest' when calling getIntegration");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetIntegrationResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/integrations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMatches operation.
     * @callback module:api/DefaultApi~getMatchesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMatchesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Before calling this API, use <a href=\"https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_CreateDomain.html\">CreateDomain</a> or <a href=\"https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_UpdateDomain.html\">UpdateDomain</a> to enable identity resolution: set <code>Matching</code> to true.</p> <p>GetMatches returns potentially matching profiles, based on the results of the latest run of a machine learning process. </p> <important> <p>The process of matching duplicate profiles. If <code>Matching</code> = <code>true</code>, Amazon Connect Customer Profiles starts a weekly batch process called Identity Resolution Job. If you do not specify a date and time for Identity Resolution Job to run, by default it runs every Saturday at 12AM UTC to detect duplicate profiles in your domains. </p> <p>After the Identity Resolution Job completes, use the <a href=\"https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html\">GetMatches</a> API to return and review the results. Or, if you have configured <code>ExportingConfig</code> in the <code>MatchingRequest</code>, you can download the results from S3.</p> </important> <p>Amazon Connect uses the following profile attributes to identify matches:</p> <ul> <li> <p>PhoneNumber</p> </li> <li> <p>HomePhoneNumber</p> </li> <li> <p>BusinessPhoneNumber</p> </li> <li> <p>MobilePhoneNumber</p> </li> <li> <p>EmailAddress</p> </li> <li> <p>PersonalEmailAddress</p> </li> <li> <p>BusinessEmailAddress</p> </li> <li> <p>FullName</p> </li> </ul> <p>For example, two or more profiles—with spelling mistakes such as <b>John Doe</b> and <b>Jhn Doe</b>, or different casing email addresses such as <b>JOHN_DOE@ANYCOMPANY.COM</b> and <b>johndoe@anycompany.com</b>, or different phone number formats such as <b>555-010-0000</b> and <b>+1-555-010-0000</b>—can be detected as belonging to the same customer <b>John Doe</b> and merged into a unified profile.</p>
     * @param {String} domainName The unique name of the domain.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {Number} [maxResults] The maximum number of results to return per page.
     * @param {module:api/DefaultApi~getMatchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMatchesResponse}
     */
    getMatches(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling getMatches");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
        'next-token': opts['nextToken'],
        'max-results': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMatchesResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/matches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfileObjectType operation.
     * @callback module:api/DefaultApi~getProfileObjectTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProfileObjectTypeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the object types for a specific domain.
     * @param {String} domainName The unique name of the domain.
     * @param {String} objectTypeName The name of the profile object type.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getProfileObjectTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProfileObjectTypeResponse}
     */
    getProfileObjectType(domainName, objectTypeName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling getProfileObjectType");
      }
      // verify the required parameter 'objectTypeName' is set
      if (objectTypeName === undefined || objectTypeName === null) {
        throw new Error("Missing the required parameter 'objectTypeName' when calling getProfileObjectType");
      }

      let pathParams = {
        'DomainName': domainName,
        'ObjectTypeName': objectTypeName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetProfileObjectTypeResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/object-types/{ObjectTypeName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfileObjectTypeTemplate operation.
     * @callback module:api/DefaultApi~getProfileObjectTypeTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProfileObjectTypeTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns the template information for a specific object type.</p> <p>A template is a predefined ProfileObjectType, such as “Salesforce-Account” or “Salesforce-Contact.” When a user sends a ProfileObject, using the PutProfileObject API, with an ObjectTypeName that matches one of the TemplateIds, it uses the mappings from the template.</p>
     * @param {String} templateId A unique identifier for the object template.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getProfileObjectTypeTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProfileObjectTypeTemplateResponse}
     */
    getProfileObjectTypeTemplate(templateId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling getProfileObjectTypeTemplate");
      }

      let pathParams = {
        'TemplateId': templateId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetProfileObjectTypeTemplateResponse;
      return this.apiClient.callApi(
        '/templates/{TemplateId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSimilarProfiles operation.
     * @callback module:api/DefaultApi~getSimilarProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSimilarProfilesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a set of profiles that belong to the same matching group using the <code>matchId</code> or <code>profileId</code>. You can also specify the type of matching that you want for finding similar profiles using either <code>RULE_BASED_MATCHING</code> or <code>ML_BASED_MATCHING</code>.
     * @param {String} domainName The unique name of the domain.
     * @param {module:model/GetSimilarProfilesRequest} getSimilarProfilesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The pagination token from the previous <code>GetSimilarProfiles</code> API call.
     * @param {Number} [maxResults] The maximum number of objects returned per page.
     * @param {module:api/DefaultApi~getSimilarProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSimilarProfilesResponse}
     */
    getSimilarProfiles(domainName, getSimilarProfilesRequest, opts, callback) {
      opts = opts || {};
      let postBody = getSimilarProfilesRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling getSimilarProfiles");
      }
      // verify the required parameter 'getSimilarProfilesRequest' is set
      if (getSimilarProfilesRequest === undefined || getSimilarProfilesRequest === null) {
        throw new Error("Missing the required parameter 'getSimilarProfilesRequest' when calling getSimilarProfiles");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
        'next-token': opts['nextToken'],
        'max-results': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSimilarProfilesResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/matches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkflow operation.
     * @callback module:api/DefaultApi~getWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetWorkflowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details of specified workflow.
     * @param {String} domainName The unique name of the domain.
     * @param {String} workflowId Unique identifier for the workflow.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetWorkflowResponse}
     */
    getWorkflow(domainName, workflowId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling getWorkflow");
      }
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling getWorkflow");
      }

      let pathParams = {
        'DomainName': domainName,
        'WorkflowId': workflowId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetWorkflowResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/workflows/{WorkflowId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkflowSteps operation.
     * @callback module:api/DefaultApi~getWorkflowStepsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetWorkflowStepsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get granular list of steps in workflow.
     * @param {String} domainName The unique name of the domain.
     * @param {String} workflowId Unique identifier for the workflow.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {Number} [maxResults] The maximum number of results to return per page.
     * @param {module:api/DefaultApi~getWorkflowStepsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetWorkflowStepsResponse}
     */
    getWorkflowSteps(domainName, workflowId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling getWorkflowSteps");
      }
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling getWorkflowSteps");
      }

      let pathParams = {
        'DomainName': domainName,
        'WorkflowId': workflowId
      };
      let queryParams = {
        'next-token': opts['nextToken'],
        'max-results': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetWorkflowStepsResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/workflows/{WorkflowId}/steps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAccountIntegrations operation.
     * @callback module:api/DefaultApi~listAccountIntegrationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAccountIntegrationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the integrations associated to a specific URI in the AWS account.
     * @param {module:model/DeleteIntegrationRequest} deleteIntegrationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The pagination token from the previous ListAccountIntegrations API call.
     * @param {Number} [maxResults] The maximum number of objects returned per page.
     * @param {Boolean} [includeHidden] Boolean to indicate if hidden integration should be returned. Defaults to <code>False</code>.
     * @param {module:api/DefaultApi~listAccountIntegrationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAccountIntegrationsResponse}
     */
    listAccountIntegrations(deleteIntegrationRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteIntegrationRequest;
      // verify the required parameter 'deleteIntegrationRequest' is set
      if (deleteIntegrationRequest === undefined || deleteIntegrationRequest === null) {
        throw new Error("Missing the required parameter 'deleteIntegrationRequest' when calling listAccountIntegrations");
      }

      let pathParams = {
      };
      let queryParams = {
        'next-token': opts['nextToken'],
        'max-results': opts['maxResults'],
        'include-hidden': opts['includeHidden']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAccountIntegrationsResponse;
      return this.apiClient.callApi(
        '/integrations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCalculatedAttributeDefinitions operation.
     * @callback module:api/DefaultApi~listCalculatedAttributeDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCalculatedAttributeDefinitionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists calculated attribute definitions for Customer Profiles
     * @param {String} domainName The unique name of the domain.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The pagination token from the previous call to ListCalculatedAttributeDefinitions.
     * @param {Number} [maxResults] The maximum number of calculated attribute definitions returned per page.
     * @param {module:api/DefaultApi~listCalculatedAttributeDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCalculatedAttributeDefinitionsResponse}
     */
    listCalculatedAttributeDefinitions(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling listCalculatedAttributeDefinitions");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
        'next-token': opts['nextToken'],
        'max-results': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCalculatedAttributeDefinitionsResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/calculated-attributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCalculatedAttributesForProfile operation.
     * @callback module:api/DefaultApi~listCalculatedAttributesForProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCalculatedAttributesForProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of calculated attributes for a customer profile.
     * @param {String} domainName The unique name of the domain.
     * @param {String} profileId The unique identifier of a customer profile.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The pagination token from the previous call to ListCalculatedAttributesForProfile.
     * @param {Number} [maxResults] The maximum number of calculated attributes returned per page.
     * @param {module:api/DefaultApi~listCalculatedAttributesForProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCalculatedAttributesForProfileResponse}
     */
    listCalculatedAttributesForProfile(domainName, profileId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling listCalculatedAttributesForProfile");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling listCalculatedAttributesForProfile");
      }

      let pathParams = {
        'DomainName': domainName,
        'ProfileId': profileId
      };
      let queryParams = {
        'next-token': opts['nextToken'],
        'max-results': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCalculatedAttributesForProfileResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/profile/{ProfileId}/calculated-attributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDomains operation.
     * @callback module:api/DefaultApi~listDomainsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDomainsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all the domains for an AWS account that have been created.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The pagination token from the previous ListDomain API call.
     * @param {Number} [maxResults] The maximum number of objects returned per page.
     * @param {module:api/DefaultApi~listDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDomainsResponse}
     */
    listDomains(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'next-token': opts['nextToken'],
        'max-results': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDomainsResponse;
      return this.apiClient.callApi(
        '/domains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEventStreams operation.
     * @callback module:api/DefaultApi~listEventStreamsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEventStreamsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all the event streams in a specific domain.
     * @param {String} domainName The unique name of the domain.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Identifies the next page of results to return.
     * @param {Number} [maxResults] The maximum number of objects returned per page.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listEventStreamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEventStreamsResponse}
     */
    listEventStreams(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling listEventStreams");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
        'next-token': opts['nextToken'],
        'max-results': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListEventStreamsResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/event-streams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listIdentityResolutionJobs operation.
     * @callback module:api/DefaultApi~listIdentityResolutionJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListIdentityResolutionJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the Identity Resolution Jobs in your domain. The response sorts the list by <code>JobStartTime</code>.
     * @param {String} domainName The unique name of the domain.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {Number} [maxResults] The maximum number of results to return per page.
     * @param {module:api/DefaultApi~listIdentityResolutionJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListIdentityResolutionJobsResponse}
     */
    listIdentityResolutionJobs(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling listIdentityResolutionJobs");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
        'next-token': opts['nextToken'],
        'max-results': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListIdentityResolutionJobsResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/identity-resolution-jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listIntegrations operation.
     * @callback module:api/DefaultApi~listIntegrationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListIntegrationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the integrations in your domain.
     * @param {String} domainName The unique name of the domain.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The pagination token from the previous ListIntegrations API call.
     * @param {Number} [maxResults] The maximum number of objects returned per page.
     * @param {Boolean} [includeHidden] Boolean to indicate if hidden integration should be returned. Defaults to <code>False</code>.
     * @param {module:api/DefaultApi~listIntegrationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListIntegrationsResponse}
     */
    listIntegrations(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling listIntegrations");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
        'next-token': opts['nextToken'],
        'max-results': opts['maxResults'],
        'include-hidden': opts['includeHidden']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListIntegrationsResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/integrations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProfileObjectTypeTemplates operation.
     * @callback module:api/DefaultApi~listProfileObjectTypeTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListProfileObjectTypeTemplatesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the template information for object types.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The pagination token from the previous ListObjectTypeTemplates API call.
     * @param {Number} [maxResults] The maximum number of objects returned per page.
     * @param {module:api/DefaultApi~listProfileObjectTypeTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListProfileObjectTypeTemplatesResponse}
     */
    listProfileObjectTypeTemplates(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'next-token': opts['nextToken'],
        'max-results': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListProfileObjectTypeTemplatesResponse;
      return this.apiClient.callApi(
        '/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProfileObjectTypes operation.
     * @callback module:api/DefaultApi~listProfileObjectTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListProfileObjectTypesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the templates available within the service.
     * @param {String} domainName The unique name of the domain.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Identifies the next page of results to return.
     * @param {Number} [maxResults] The maximum number of objects returned per page.
     * @param {module:api/DefaultApi~listProfileObjectTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListProfileObjectTypesResponse}
     */
    listProfileObjectTypes(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling listProfileObjectTypes");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
        'next-token': opts['nextToken'],
        'max-results': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListProfileObjectTypesResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/object-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProfileObjects operation.
     * @callback module:api/DefaultApi~listProfileObjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListProfileObjectsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of objects associated with a profile of a given ProfileObjectType.
     * @param {String} domainName The unique name of the domain.
     * @param {module:model/ListProfileObjectsRequest} listProfileObjectsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The pagination token from the previous call to ListProfileObjects.
     * @param {Number} [maxResults] The maximum number of objects returned per page.
     * @param {module:api/DefaultApi~listProfileObjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListProfileObjectsResponse}
     */
    listProfileObjects(domainName, listProfileObjectsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listProfileObjectsRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling listProfileObjects");
      }
      // verify the required parameter 'listProfileObjectsRequest' is set
      if (listProfileObjectsRequest === undefined || listProfileObjectsRequest === null) {
        throw new Error("Missing the required parameter 'listProfileObjectsRequest' when calling listProfileObjects");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
        'next-token': opts['nextToken'],
        'max-results': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListProfileObjectsResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/profiles/objects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRuleBasedMatches operation.
     * @callback module:api/DefaultApi~listRuleBasedMatchesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRuleBasedMatchesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a set of <code>MatchIds</code> that belong to the given domain.
     * @param {String} domainName The unique name of the domain.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The pagination token from the previous <code>ListRuleBasedMatches</code> API call.
     * @param {Number} [maxResults] The maximum number of <code>MatchIds</code> returned per page.
     * @param {module:api/DefaultApi~listRuleBasedMatchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRuleBasedMatchesResponse}
     */
    listRuleBasedMatches(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling listRuleBasedMatches");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
        'next-token': opts['nextToken'],
        'max-results': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRuleBasedMatchesResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/profiles/ruleBasedMatches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays the tags associated with an Amazon Connect Customer Profiles resource. In Connect Customer Profiles, domains, profile object types, and integrations can be tagged.
     * @param {String} resourceArn The ARN of the resource for which you want to view tags.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWorkflows operation.
     * @callback module:api/DefaultApi~listWorkflowsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWorkflowsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query to list all workflows.
     * @param {String} domainName The unique name of the domain.
     * @param {module:model/ListWorkflowsRequest} listWorkflowsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
     * @param {Number} [maxResults] The maximum number of results to return per page.
     * @param {module:api/DefaultApi~listWorkflowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWorkflowsResponse}
     */
    listWorkflows(domainName, listWorkflowsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listWorkflowsRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling listWorkflows");
      }
      // verify the required parameter 'listWorkflowsRequest' is set
      if (listWorkflowsRequest === undefined || listWorkflowsRequest === null) {
        throw new Error("Missing the required parameter 'listWorkflowsRequest' when calling listWorkflows");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
        'next-token': opts['nextToken'],
        'max-results': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListWorkflowsResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/workflows', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mergeProfiles operation.
     * @callback module:api/DefaultApi~mergeProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MergeProfilesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Runs an AWS Lambda job that does the following:</p> <ol> <li> <p>All the profileKeys in the <code>ProfileToBeMerged</code> will be moved to the main profile.</p> </li> <li> <p>All the objects in the <code>ProfileToBeMerged</code> will be moved to the main profile.</p> </li> <li> <p>All the <code>ProfileToBeMerged</code> will be deleted at the end.</p> </li> <li> <p>All the profileKeys in the <code>ProfileIdsToBeMerged</code> will be moved to the main profile.</p> </li> <li> <p>Standard fields are merged as follows:</p> <ol> <li> <p>Fields are always \"union\"-ed if there are no conflicts in standard fields or attributeKeys.</p> </li> <li> <p>When there are conflicting fields:</p> <ol> <li> <p>If no <code>SourceProfileIds</code> entry is specified, the main Profile value is always taken. </p> </li> <li> <p>If a <code>SourceProfileIds</code> entry is specified, the specified profileId is always taken, even if it is a NULL value.</p> </li> </ol> </li> </ol> </li> </ol> <p>You can use MergeProfiles together with <a href=\"https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html\">GetMatches</a>, which returns potentially matching profiles, or use it with the results of another matching system. After profiles have been merged, they cannot be separated (unmerged).</p>
     * @param {String} domainName The unique name of the domain.
     * @param {module:model/MergeProfilesRequest} mergeProfilesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~mergeProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MergeProfilesResponse}
     */
    mergeProfiles(domainName, mergeProfilesRequest, opts, callback) {
      opts = opts || {};
      let postBody = mergeProfilesRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling mergeProfiles");
      }
      // verify the required parameter 'mergeProfilesRequest' is set
      if (mergeProfilesRequest === undefined || mergeProfilesRequest === null) {
        throw new Error("Missing the required parameter 'mergeProfilesRequest' when calling mergeProfiles");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MergeProfilesResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/profiles/objects/merge', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putIntegration operation.
     * @callback module:api/DefaultApi~putIntegrationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutIntegrationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds an integration between the service and a third-party service, which includes Amazon AppFlow and Amazon Connect.</p> <p>An integration can belong to only one domain.</p> <p>To add or remove tags on an existing Integration, see <a href=\"https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_TagResource.html\"> TagResource </a>/<a href=\"https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_UntagResource.html\"> UntagResource</a>.</p>
     * @param {String} domainName The unique name of the domain.
     * @param {module:model/PutIntegrationRequest} putIntegrationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putIntegrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutIntegrationResponse}
     */
    putIntegration(domainName, putIntegrationRequest, opts, callback) {
      opts = opts || {};
      let postBody = putIntegrationRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling putIntegration");
      }
      // verify the required parameter 'putIntegrationRequest' is set
      if (putIntegrationRequest === undefined || putIntegrationRequest === null) {
        throw new Error("Missing the required parameter 'putIntegrationRequest' when calling putIntegration");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutIntegrationResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/integrations', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putProfileObject operation.
     * @callback module:api/DefaultApi~putProfileObjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutProfileObjectResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds additional objects to customer profiles of a given ObjectType.</p> <p>When adding a specific profile object, like a Contact Record, an inferred profile can get created if it is not mapped to an existing profile. The resulting profile will only have a phone number populated in the standard ProfileObject. Any additional Contact Records with the same phone number will be mapped to the same inferred profile.</p> <p>When a ProfileObject is created and if a ProfileObjectType already exists for the ProfileObject, it will provide data to a standard profile depending on the ProfileObjectType definition.</p> <p>PutProfileObject needs an ObjectType, which can be created using PutProfileObjectType.</p>
     * @param {String} domainName The unique name of the domain.
     * @param {module:model/PutProfileObjectRequest} putProfileObjectRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putProfileObjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutProfileObjectResponse}
     */
    putProfileObject(domainName, putProfileObjectRequest, opts, callback) {
      opts = opts || {};
      let postBody = putProfileObjectRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling putProfileObject");
      }
      // verify the required parameter 'putProfileObjectRequest' is set
      if (putProfileObjectRequest === undefined || putProfileObjectRequest === null) {
        throw new Error("Missing the required parameter 'putProfileObjectRequest' when calling putProfileObject");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutProfileObjectResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/profiles/objects', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putProfileObjectType operation.
     * @callback module:api/DefaultApi~putProfileObjectTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutProfileObjectTypeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Defines a ProfileObjectType.</p> <p>To add or remove tags on an existing ObjectType, see <a href=\"https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_TagResource.html\"> TagResource</a>/<a href=\"https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_UntagResource.html\">UntagResource</a>.</p>
     * @param {String} domainName The unique name of the domain.
     * @param {String} objectTypeName The name of the profile object type.
     * @param {module:model/PutProfileObjectTypeRequest} putProfileObjectTypeRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putProfileObjectTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutProfileObjectTypeResponse}
     */
    putProfileObjectType(domainName, objectTypeName, putProfileObjectTypeRequest, opts, callback) {
      opts = opts || {};
      let postBody = putProfileObjectTypeRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling putProfileObjectType");
      }
      // verify the required parameter 'objectTypeName' is set
      if (objectTypeName === undefined || objectTypeName === null) {
        throw new Error("Missing the required parameter 'objectTypeName' when calling putProfileObjectType");
      }
      // verify the required parameter 'putProfileObjectTypeRequest' is set
      if (putProfileObjectTypeRequest === undefined || putProfileObjectTypeRequest === null) {
        throw new Error("Missing the required parameter 'putProfileObjectTypeRequest' when calling putProfileObjectType");
      }

      let pathParams = {
        'DomainName': domainName,
        'ObjectTypeName': objectTypeName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutProfileObjectTypeResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/object-types/{ObjectTypeName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchProfiles operation.
     * @callback module:api/DefaultApi~searchProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchProfilesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Searches for profiles within a specific domain using one or more predefined search keys (e.g., _fullName, _phone, _email, _account, etc.) and/or custom-defined search keys. A search key is a data type pair that consists of a <code>KeyName</code> and <code>Values</code> list.</p> <p>This operation supports searching for profiles with a minimum of 1 key-value(s) pair and up to 5 key-value(s) pairs using either <code>AND</code> or <code>OR</code> logic.</p>
     * @param {String} domainName The unique name of the domain.
     * @param {module:model/SearchProfilesRequest} searchProfilesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The pagination token from the previous SearchProfiles API call.
     * @param {Number} [maxResults] <p>The maximum number of objects returned per page.</p> <p>The default is 20 if this parameter is not included in the request.</p>
     * @param {module:api/DefaultApi~searchProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchProfilesResponse}
     */
    searchProfiles(domainName, searchProfilesRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchProfilesRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling searchProfiles");
      }
      // verify the required parameter 'searchProfilesRequest' is set
      if (searchProfilesRequest === undefined || searchProfilesRequest === null) {
        throw new Error("Missing the required parameter 'searchProfilesRequest' when calling searchProfiles");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
        'next-token': opts['nextToken'],
        'max-results': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchProfilesResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/profiles/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Assigns one or more tags (key-value pairs) to the specified Amazon Connect Customer Profiles resource. Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values. In Connect Customer Profiles, domains, profile object types, and integrations can be tagged.</p> <p>Tags don't have any semantic meaning to AWS and are interpreted strictly as strings of characters.</p> <p>You can use the TagResource action with a resource that already has tags. If you specify a new tag key, this tag is appended to the list of tags associated with the resource. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces the previous value for that tag.</p> <p>You can associate as many as 50 tags with a resource.</p>
     * @param {String} resourceArn The ARN of the resource that you're adding tags to.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes one or more tags from the specified Amazon Connect Customer Profiles resource. In Connect Customer Profiles, domains, profile object types, and integrations can be tagged.
     * @param {String} resourceArn The ARN of the resource from which you are removing tags.
     * @param {Array.<String>} tagKeys The list of tag keys to remove from the resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCalculatedAttributeDefinition operation.
     * @callback module:api/DefaultApi~updateCalculatedAttributeDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateCalculatedAttributeDefinitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing calculated attribute definition. When updating the Conditions, note that increasing the date range of a calculated attribute will not trigger inclusion of historical data greater than the current date range.
     * @param {String} domainName The unique name of the domain.
     * @param {String} calculatedAttributeName The unique name of the calculated attribute.
     * @param {module:model/UpdateCalculatedAttributeDefinitionRequest} updateCalculatedAttributeDefinitionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateCalculatedAttributeDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateCalculatedAttributeDefinitionResponse}
     */
    updateCalculatedAttributeDefinition(domainName, calculatedAttributeName, updateCalculatedAttributeDefinitionRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateCalculatedAttributeDefinitionRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling updateCalculatedAttributeDefinition");
      }
      // verify the required parameter 'calculatedAttributeName' is set
      if (calculatedAttributeName === undefined || calculatedAttributeName === null) {
        throw new Error("Missing the required parameter 'calculatedAttributeName' when calling updateCalculatedAttributeDefinition");
      }
      // verify the required parameter 'updateCalculatedAttributeDefinitionRequest' is set
      if (updateCalculatedAttributeDefinitionRequest === undefined || updateCalculatedAttributeDefinitionRequest === null) {
        throw new Error("Missing the required parameter 'updateCalculatedAttributeDefinitionRequest' when calling updateCalculatedAttributeDefinition");
      }

      let pathParams = {
        'DomainName': domainName,
        'CalculatedAttributeName': calculatedAttributeName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateCalculatedAttributeDefinitionResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/calculated-attributes/{CalculatedAttributeName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDomain operation.
     * @callback module:api/DefaultApi~updateDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the properties of a domain, including creating or selecting a dead letter queue or an encryption key.</p> <p>After a domain is created, the name can’t be changed.</p> <p>Use this API or <a href=\"https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_CreateDomain.html\">CreateDomain</a> to enable <a href=\"https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html\">identity resolution</a>: set <code>Matching</code> to true.</p> <p>To prevent cross-service impersonation when you call this API, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/cross-service-confused-deputy-prevention.html\">Cross-service confused deputy prevention</a> for sample policies that you should apply. </p> <p>To add or remove tags on an existing Domain, see <a href=\"https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_TagResource.html\">TagResource</a>/<a href=\"https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_UntagResource.html\">UntagResource</a>.</p>
     * @param {String} domainName The unique name of the domain.
     * @param {module:model/UpdateDomainRequest} updateDomainRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateDomainResponse}
     */
    updateDomain(domainName, updateDomainRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateDomainRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling updateDomain");
      }
      // verify the required parameter 'updateDomainRequest' is set
      if (updateDomainRequest === undefined || updateDomainRequest === null) {
        throw new Error("Missing the required parameter 'updateDomainRequest' when calling updateDomain");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateDomainResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProfile operation.
     * @callback module:api/DefaultApi~updateProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the properties of a profile. The ProfileId is required for updating a customer profile.</p> <p>When calling the UpdateProfile API, specifying an empty string value means that any existing value will be removed. Not specifying a string value means that any value already there will be kept.</p>
     * @param {String} domainName The unique name of the domain.
     * @param {module:model/UpdateProfileRequest} updateProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateProfileResponse}
     */
    updateProfile(domainName, updateProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateProfileRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling updateProfile");
      }
      // verify the required parameter 'updateProfileRequest' is set
      if (updateProfileRequest === undefined || updateProfileRequest === null) {
        throw new Error("Missing the required parameter 'updateProfileRequest' when calling updateProfile");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateProfileResponse;
      return this.apiClient.callApi(
        '/domains/{DomainName}/profiles', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
