/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonConnectCustomerProfiles);
  }
}(this, function(expect, AmazonConnectCustomerProfiles) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonConnectCustomerProfiles.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('addProfileKey', function() {
      it('should call addProfileKey successfully', function(done) {
        //uncomment below and update the code to test addProfileKey
        //instance.addProfileKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCalculatedAttributeDefinition', function() {
      it('should call createCalculatedAttributeDefinition successfully', function(done) {
        //uncomment below and update the code to test createCalculatedAttributeDefinition
        //instance.createCalculatedAttributeDefinition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createDomain', function() {
      it('should call createDomain successfully', function(done) {
        //uncomment below and update the code to test createDomain
        //instance.createDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createEventStream', function() {
      it('should call createEventStream successfully', function(done) {
        //uncomment below and update the code to test createEventStream
        //instance.createEventStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createIntegrationWorkflow', function() {
      it('should call createIntegrationWorkflow successfully', function(done) {
        //uncomment below and update the code to test createIntegrationWorkflow
        //instance.createIntegrationWorkflow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createProfile', function() {
      it('should call createProfile successfully', function(done) {
        //uncomment below and update the code to test createProfile
        //instance.createProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCalculatedAttributeDefinition', function() {
      it('should call deleteCalculatedAttributeDefinition successfully', function(done) {
        //uncomment below and update the code to test deleteCalculatedAttributeDefinition
        //instance.deleteCalculatedAttributeDefinition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDomain', function() {
      it('should call deleteDomain successfully', function(done) {
        //uncomment below and update the code to test deleteDomain
        //instance.deleteDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEventStream', function() {
      it('should call deleteEventStream successfully', function(done) {
        //uncomment below and update the code to test deleteEventStream
        //instance.deleteEventStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteIntegration', function() {
      it('should call deleteIntegration successfully', function(done) {
        //uncomment below and update the code to test deleteIntegration
        //instance.deleteIntegration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProfile', function() {
      it('should call deleteProfile successfully', function(done) {
        //uncomment below and update the code to test deleteProfile
        //instance.deleteProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProfileKey', function() {
      it('should call deleteProfileKey successfully', function(done) {
        //uncomment below and update the code to test deleteProfileKey
        //instance.deleteProfileKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProfileObject', function() {
      it('should call deleteProfileObject successfully', function(done) {
        //uncomment below and update the code to test deleteProfileObject
        //instance.deleteProfileObject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProfileObjectType', function() {
      it('should call deleteProfileObjectType successfully', function(done) {
        //uncomment below and update the code to test deleteProfileObjectType
        //instance.deleteProfileObjectType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteWorkflow', function() {
      it('should call deleteWorkflow successfully', function(done) {
        //uncomment below and update the code to test deleteWorkflow
        //instance.deleteWorkflow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAutoMergingPreview', function() {
      it('should call getAutoMergingPreview successfully', function(done) {
        //uncomment below and update the code to test getAutoMergingPreview
        //instance.getAutoMergingPreview(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCalculatedAttributeDefinition', function() {
      it('should call getCalculatedAttributeDefinition successfully', function(done) {
        //uncomment below and update the code to test getCalculatedAttributeDefinition
        //instance.getCalculatedAttributeDefinition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCalculatedAttributeForProfile', function() {
      it('should call getCalculatedAttributeForProfile successfully', function(done) {
        //uncomment below and update the code to test getCalculatedAttributeForProfile
        //instance.getCalculatedAttributeForProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDomain', function() {
      it('should call getDomain successfully', function(done) {
        //uncomment below and update the code to test getDomain
        //instance.getDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEventStream', function() {
      it('should call getEventStream successfully', function(done) {
        //uncomment below and update the code to test getEventStream
        //instance.getEventStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIdentityResolutionJob', function() {
      it('should call getIdentityResolutionJob successfully', function(done) {
        //uncomment below and update the code to test getIdentityResolutionJob
        //instance.getIdentityResolutionJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIntegration', function() {
      it('should call getIntegration successfully', function(done) {
        //uncomment below and update the code to test getIntegration
        //instance.getIntegration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMatches', function() {
      it('should call getMatches successfully', function(done) {
        //uncomment below and update the code to test getMatches
        //instance.getMatches(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProfileObjectType', function() {
      it('should call getProfileObjectType successfully', function(done) {
        //uncomment below and update the code to test getProfileObjectType
        //instance.getProfileObjectType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProfileObjectTypeTemplate', function() {
      it('should call getProfileObjectTypeTemplate successfully', function(done) {
        //uncomment below and update the code to test getProfileObjectTypeTemplate
        //instance.getProfileObjectTypeTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSimilarProfiles', function() {
      it('should call getSimilarProfiles successfully', function(done) {
        //uncomment below and update the code to test getSimilarProfiles
        //instance.getSimilarProfiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWorkflow', function() {
      it('should call getWorkflow successfully', function(done) {
        //uncomment below and update the code to test getWorkflow
        //instance.getWorkflow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWorkflowSteps', function() {
      it('should call getWorkflowSteps successfully', function(done) {
        //uncomment below and update the code to test getWorkflowSteps
        //instance.getWorkflowSteps(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAccountIntegrations', function() {
      it('should call listAccountIntegrations successfully', function(done) {
        //uncomment below and update the code to test listAccountIntegrations
        //instance.listAccountIntegrations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCalculatedAttributeDefinitions', function() {
      it('should call listCalculatedAttributeDefinitions successfully', function(done) {
        //uncomment below and update the code to test listCalculatedAttributeDefinitions
        //instance.listCalculatedAttributeDefinitions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCalculatedAttributesForProfile', function() {
      it('should call listCalculatedAttributesForProfile successfully', function(done) {
        //uncomment below and update the code to test listCalculatedAttributesForProfile
        //instance.listCalculatedAttributesForProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDomains', function() {
      it('should call listDomains successfully', function(done) {
        //uncomment below and update the code to test listDomains
        //instance.listDomains(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEventStreams', function() {
      it('should call listEventStreams successfully', function(done) {
        //uncomment below and update the code to test listEventStreams
        //instance.listEventStreams(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listIdentityResolutionJobs', function() {
      it('should call listIdentityResolutionJobs successfully', function(done) {
        //uncomment below and update the code to test listIdentityResolutionJobs
        //instance.listIdentityResolutionJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listIntegrations', function() {
      it('should call listIntegrations successfully', function(done) {
        //uncomment below and update the code to test listIntegrations
        //instance.listIntegrations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listProfileObjectTypeTemplates', function() {
      it('should call listProfileObjectTypeTemplates successfully', function(done) {
        //uncomment below and update the code to test listProfileObjectTypeTemplates
        //instance.listProfileObjectTypeTemplates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listProfileObjectTypes', function() {
      it('should call listProfileObjectTypes successfully', function(done) {
        //uncomment below and update the code to test listProfileObjectTypes
        //instance.listProfileObjectTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listProfileObjects', function() {
      it('should call listProfileObjects successfully', function(done) {
        //uncomment below and update the code to test listProfileObjects
        //instance.listProfileObjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRuleBasedMatches', function() {
      it('should call listRuleBasedMatches successfully', function(done) {
        //uncomment below and update the code to test listRuleBasedMatches
        //instance.listRuleBasedMatches(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listWorkflows', function() {
      it('should call listWorkflows successfully', function(done) {
        //uncomment below and update the code to test listWorkflows
        //instance.listWorkflows(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('mergeProfiles', function() {
      it('should call mergeProfiles successfully', function(done) {
        //uncomment below and update the code to test mergeProfiles
        //instance.mergeProfiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putIntegration', function() {
      it('should call putIntegration successfully', function(done) {
        //uncomment below and update the code to test putIntegration
        //instance.putIntegration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putProfileObject', function() {
      it('should call putProfileObject successfully', function(done) {
        //uncomment below and update the code to test putProfileObject
        //instance.putProfileObject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putProfileObjectType', function() {
      it('should call putProfileObjectType successfully', function(done) {
        //uncomment below and update the code to test putProfileObjectType
        //instance.putProfileObjectType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchProfiles', function() {
      it('should call searchProfiles successfully', function(done) {
        //uncomment below and update the code to test searchProfiles
        //instance.searchProfiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCalculatedAttributeDefinition', function() {
      it('should call updateCalculatedAttributeDefinition successfully', function(done) {
        //uncomment below and update the code to test updateCalculatedAttributeDefinition
        //instance.updateCalculatedAttributeDefinition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDomain', function() {
      it('should call updateDomain successfully', function(done) {
        //uncomment below and update the code to test updateDomain
        //instance.updateDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProfile', function() {
      it('should call updateProfile successfully', function(done) {
        //uncomment below and update the code to test updateProfile
        //instance.updateProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
