/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutProfileObject_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutProfileObject_request::OAIPutProfileObject_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutProfileObject_request::OAIPutProfileObject_request() {
    this->initializeModel();
}

OAIPutProfileObject_request::~OAIPutProfileObject_request() {}

void OAIPutProfileObject_request::initializeModel() {

    m_object_type_name_isSet = false;
    m_object_type_name_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;
}

void OAIPutProfileObject_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutProfileObject_request::fromJsonObject(QJsonObject json) {

    m_object_type_name_isValid = ::OpenAPI::fromJsonValue(m_object_type_name, json[QString("ObjectTypeName")]);
    m_object_type_name_isSet = !json[QString("ObjectTypeName")].isNull() && m_object_type_name_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("Object")]);
    m_object_isSet = !json[QString("Object")].isNull() && m_object_isValid;
}

QString OAIPutProfileObject_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutProfileObject_request::asJsonObject() const {
    QJsonObject obj;
    if (m_object_type_name_isSet) {
        obj.insert(QString("ObjectTypeName"), ::OpenAPI::toJsonValue(m_object_type_name));
    }
    if (m_object_isSet) {
        obj.insert(QString("Object"), ::OpenAPI::toJsonValue(m_object));
    }
    return obj;
}

QString OAIPutProfileObject_request::getObjectTypeName() const {
    return m_object_type_name;
}
void OAIPutProfileObject_request::setObjectTypeName(const QString &object_type_name) {
    m_object_type_name = object_type_name;
    m_object_type_name_isSet = true;
}

bool OAIPutProfileObject_request::is_object_type_name_Set() const{
    return m_object_type_name_isSet;
}

bool OAIPutProfileObject_request::is_object_type_name_Valid() const{
    return m_object_type_name_isValid;
}

QString OAIPutProfileObject_request::getObject() const {
    return m_object;
}
void OAIPutProfileObject_request::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIPutProfileObject_request::is_object_Set() const{
    return m_object_isSet;
}

bool OAIPutProfileObject_request::is_object_Valid() const{
    return m_object_isValid;
}

bool OAIPutProfileObject_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_object_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutProfileObject_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_object_type_name_isValid && m_object_isValid && true;
}

} // namespace OpenAPI
