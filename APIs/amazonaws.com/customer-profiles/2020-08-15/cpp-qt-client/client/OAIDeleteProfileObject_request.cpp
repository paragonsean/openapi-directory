/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteProfileObject_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteProfileObject_request::OAIDeleteProfileObject_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteProfileObject_request::OAIDeleteProfileObject_request() {
    this->initializeModel();
}

OAIDeleteProfileObject_request::~OAIDeleteProfileObject_request() {}

void OAIDeleteProfileObject_request::initializeModel() {

    m_profile_id_isSet = false;
    m_profile_id_isValid = false;

    m_profile_object_unique_key_isSet = false;
    m_profile_object_unique_key_isValid = false;

    m_object_type_name_isSet = false;
    m_object_type_name_isValid = false;
}

void OAIDeleteProfileObject_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteProfileObject_request::fromJsonObject(QJsonObject json) {

    m_profile_id_isValid = ::OpenAPI::fromJsonValue(m_profile_id, json[QString("ProfileId")]);
    m_profile_id_isSet = !json[QString("ProfileId")].isNull() && m_profile_id_isValid;

    m_profile_object_unique_key_isValid = ::OpenAPI::fromJsonValue(m_profile_object_unique_key, json[QString("ProfileObjectUniqueKey")]);
    m_profile_object_unique_key_isSet = !json[QString("ProfileObjectUniqueKey")].isNull() && m_profile_object_unique_key_isValid;

    m_object_type_name_isValid = ::OpenAPI::fromJsonValue(m_object_type_name, json[QString("ObjectTypeName")]);
    m_object_type_name_isSet = !json[QString("ObjectTypeName")].isNull() && m_object_type_name_isValid;
}

QString OAIDeleteProfileObject_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteProfileObject_request::asJsonObject() const {
    QJsonObject obj;
    if (m_profile_id_isSet) {
        obj.insert(QString("ProfileId"), ::OpenAPI::toJsonValue(m_profile_id));
    }
    if (m_profile_object_unique_key_isSet) {
        obj.insert(QString("ProfileObjectUniqueKey"), ::OpenAPI::toJsonValue(m_profile_object_unique_key));
    }
    if (m_object_type_name_isSet) {
        obj.insert(QString("ObjectTypeName"), ::OpenAPI::toJsonValue(m_object_type_name));
    }
    return obj;
}

QString OAIDeleteProfileObject_request::getProfileId() const {
    return m_profile_id;
}
void OAIDeleteProfileObject_request::setProfileId(const QString &profile_id) {
    m_profile_id = profile_id;
    m_profile_id_isSet = true;
}

bool OAIDeleteProfileObject_request::is_profile_id_Set() const{
    return m_profile_id_isSet;
}

bool OAIDeleteProfileObject_request::is_profile_id_Valid() const{
    return m_profile_id_isValid;
}

QString OAIDeleteProfileObject_request::getProfileObjectUniqueKey() const {
    return m_profile_object_unique_key;
}
void OAIDeleteProfileObject_request::setProfileObjectUniqueKey(const QString &profile_object_unique_key) {
    m_profile_object_unique_key = profile_object_unique_key;
    m_profile_object_unique_key_isSet = true;
}

bool OAIDeleteProfileObject_request::is_profile_object_unique_key_Set() const{
    return m_profile_object_unique_key_isSet;
}

bool OAIDeleteProfileObject_request::is_profile_object_unique_key_Valid() const{
    return m_profile_object_unique_key_isValid;
}

QString OAIDeleteProfileObject_request::getObjectTypeName() const {
    return m_object_type_name;
}
void OAIDeleteProfileObject_request::setObjectTypeName(const QString &object_type_name) {
    m_object_type_name = object_type_name;
    m_object_type_name_isSet = true;
}

bool OAIDeleteProfileObject_request::is_object_type_name_Set() const{
    return m_object_type_name_isSet;
}

bool OAIDeleteProfileObject_request::is_object_type_name_Valid() const{
    return m_object_type_name_isValid;
}

bool OAIDeleteProfileObject_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_object_unique_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteProfileObject_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_profile_id_isValid && m_profile_object_unique_key_isValid && m_object_type_name_isValid && true;
}

} // namespace OpenAPI
