/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutProfileObjectResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutProfileObjectResponse::OAIPutProfileObjectResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutProfileObjectResponse::OAIPutProfileObjectResponse() {
    this->initializeModel();
}

OAIPutProfileObjectResponse::~OAIPutProfileObjectResponse() {}

void OAIPutProfileObjectResponse::initializeModel() {

    m_profile_object_unique_key_isSet = false;
    m_profile_object_unique_key_isValid = false;
}

void OAIPutProfileObjectResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutProfileObjectResponse::fromJsonObject(QJsonObject json) {

    m_profile_object_unique_key_isValid = ::OpenAPI::fromJsonValue(m_profile_object_unique_key, json[QString("ProfileObjectUniqueKey")]);
    m_profile_object_unique_key_isSet = !json[QString("ProfileObjectUniqueKey")].isNull() && m_profile_object_unique_key_isValid;
}

QString OAIPutProfileObjectResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutProfileObjectResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_profile_object_unique_key_isSet) {
        obj.insert(QString("ProfileObjectUniqueKey"), ::OpenAPI::toJsonValue(m_profile_object_unique_key));
    }
    return obj;
}

QString OAIPutProfileObjectResponse::getProfileObjectUniqueKey() const {
    return m_profile_object_unique_key;
}
void OAIPutProfileObjectResponse::setProfileObjectUniqueKey(const QString &profile_object_unique_key) {
    m_profile_object_unique_key = profile_object_unique_key;
    m_profile_object_unique_key_isSet = true;
}

bool OAIPutProfileObjectResponse::is_profile_object_unique_key_Set() const{
    return m_profile_object_unique_key_isSet;
}

bool OAIPutProfileObjectResponse::is_profile_object_unique_key_Valid() const{
    return m_profile_object_unique_key_isValid;
}

bool OAIPutProfileObjectResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_profile_object_unique_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutProfileObjectResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
