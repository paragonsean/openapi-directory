/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportingLocation_S3Exporting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportingLocation_S3Exporting::OAIExportingLocation_S3Exporting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportingLocation_S3Exporting::OAIExportingLocation_S3Exporting() {
    this->initializeModel();
}

OAIExportingLocation_S3Exporting::~OAIExportingLocation_S3Exporting() {}

void OAIExportingLocation_S3Exporting::initializeModel() {

    m_s3_bucket_name_isSet = false;
    m_s3_bucket_name_isValid = false;

    m_s3_key_name_isSet = false;
    m_s3_key_name_isValid = false;
}

void OAIExportingLocation_S3Exporting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportingLocation_S3Exporting::fromJsonObject(QJsonObject json) {

    m_s3_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket_name, json[QString("S3BucketName")]);
    m_s3_bucket_name_isSet = !json[QString("S3BucketName")].isNull() && m_s3_bucket_name_isValid;

    m_s3_key_name_isValid = ::OpenAPI::fromJsonValue(m_s3_key_name, json[QString("S3KeyName")]);
    m_s3_key_name_isSet = !json[QString("S3KeyName")].isNull() && m_s3_key_name_isValid;
}

QString OAIExportingLocation_S3Exporting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportingLocation_S3Exporting::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_bucket_name_isSet) {
        obj.insert(QString("S3BucketName"), ::OpenAPI::toJsonValue(m_s3_bucket_name));
    }
    if (m_s3_key_name_isSet) {
        obj.insert(QString("S3KeyName"), ::OpenAPI::toJsonValue(m_s3_key_name));
    }
    return obj;
}

QString OAIExportingLocation_S3Exporting::getS3BucketName() const {
    return m_s3_bucket_name;
}
void OAIExportingLocation_S3Exporting::setS3BucketName(const QString &s3_bucket_name) {
    m_s3_bucket_name = s3_bucket_name;
    m_s3_bucket_name_isSet = true;
}

bool OAIExportingLocation_S3Exporting::is_s3_bucket_name_Set() const{
    return m_s3_bucket_name_isSet;
}

bool OAIExportingLocation_S3Exporting::is_s3_bucket_name_Valid() const{
    return m_s3_bucket_name_isValid;
}

QString OAIExportingLocation_S3Exporting::getS3KeyName() const {
    return m_s3_key_name;
}
void OAIExportingLocation_S3Exporting::setS3KeyName(const QString &s3_key_name) {
    m_s3_key_name = s3_key_name;
    m_s3_key_name_isSet = true;
}

bool OAIExportingLocation_S3Exporting::is_s3_key_name_Set() const{
    return m_s3_key_name_isSet;
}

bool OAIExportingLocation_S3Exporting::is_s3_key_name_Valid() const{
    return m_s3_key_name_isValid;
}

bool OAIExportingLocation_S3Exporting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportingLocation_S3Exporting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
