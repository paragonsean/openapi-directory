/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThreshold.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThreshold::OAIThreshold(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThreshold::OAIThreshold() {
    this->initializeModel();
}

OAIThreshold::~OAIThreshold() {}

void OAIThreshold::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;
}

void OAIThreshold::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThreshold::fromJsonObject(QJsonObject json) {

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("Operator")]);
    m_r_operator_isSet = !json[QString("Operator")].isNull() && m_r_operator_isValid;
}

QString OAIThreshold::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThreshold::asJsonObject() const {
    QJsonObject obj;
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_r_operator.isSet()) {
        obj.insert(QString("Operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    return obj;
}

QString OAIThreshold::getValue() const {
    return m_value;
}
void OAIThreshold::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIThreshold::is_value_Set() const{
    return m_value_isSet;
}

bool OAIThreshold::is_value_Valid() const{
    return m_value_isValid;
}

OAIOperator OAIThreshold::getROperator() const {
    return m_r_operator;
}
void OAIThreshold::setROperator(const OAIOperator &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAIThreshold::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAIThreshold::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

bool OAIThreshold::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThreshold::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid && m_r_operator_isValid && true;
}

} // namespace OpenAPI
