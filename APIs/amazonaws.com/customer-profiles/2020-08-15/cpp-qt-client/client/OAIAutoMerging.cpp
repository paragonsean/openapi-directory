/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutoMerging.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutoMerging::OAIAutoMerging(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutoMerging::OAIAutoMerging() {
    this->initializeModel();
}

OAIAutoMerging::~OAIAutoMerging() {}

void OAIAutoMerging::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_consolidation_isSet = false;
    m_consolidation_isValid = false;

    m_conflict_resolution_isSet = false;
    m_conflict_resolution_isValid = false;

    m_min_allowed_confidence_score_for_merging_isSet = false;
    m_min_allowed_confidence_score_for_merging_isValid = false;
}

void OAIAutoMerging::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutoMerging::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("Enabled")]);
    m_enabled_isSet = !json[QString("Enabled")].isNull() && m_enabled_isValid;

    m_consolidation_isValid = ::OpenAPI::fromJsonValue(m_consolidation, json[QString("Consolidation")]);
    m_consolidation_isSet = !json[QString("Consolidation")].isNull() && m_consolidation_isValid;

    m_conflict_resolution_isValid = ::OpenAPI::fromJsonValue(m_conflict_resolution, json[QString("ConflictResolution")]);
    m_conflict_resolution_isSet = !json[QString("ConflictResolution")].isNull() && m_conflict_resolution_isValid;

    m_min_allowed_confidence_score_for_merging_isValid = ::OpenAPI::fromJsonValue(m_min_allowed_confidence_score_for_merging, json[QString("MinAllowedConfidenceScoreForMerging")]);
    m_min_allowed_confidence_score_for_merging_isSet = !json[QString("MinAllowedConfidenceScoreForMerging")].isNull() && m_min_allowed_confidence_score_for_merging_isValid;
}

QString OAIAutoMerging::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutoMerging::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("Enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_consolidation.isSet()) {
        obj.insert(QString("Consolidation"), ::OpenAPI::toJsonValue(m_consolidation));
    }
    if (m_conflict_resolution.isSet()) {
        obj.insert(QString("ConflictResolution"), ::OpenAPI::toJsonValue(m_conflict_resolution));
    }
    if (m_min_allowed_confidence_score_for_merging_isSet) {
        obj.insert(QString("MinAllowedConfidenceScoreForMerging"), ::OpenAPI::toJsonValue(m_min_allowed_confidence_score_for_merging));
    }
    return obj;
}

bool OAIAutoMerging::getEnabled() const {
    return m_enabled;
}
void OAIAutoMerging::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIAutoMerging::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIAutoMerging::is_enabled_Valid() const{
    return m_enabled_isValid;
}

OAIAutoMerging_Consolidation OAIAutoMerging::getConsolidation() const {
    return m_consolidation;
}
void OAIAutoMerging::setConsolidation(const OAIAutoMerging_Consolidation &consolidation) {
    m_consolidation = consolidation;
    m_consolidation_isSet = true;
}

bool OAIAutoMerging::is_consolidation_Set() const{
    return m_consolidation_isSet;
}

bool OAIAutoMerging::is_consolidation_Valid() const{
    return m_consolidation_isValid;
}

OAIAutoMerging_ConflictResolution OAIAutoMerging::getConflictResolution() const {
    return m_conflict_resolution;
}
void OAIAutoMerging::setConflictResolution(const OAIAutoMerging_ConflictResolution &conflict_resolution) {
    m_conflict_resolution = conflict_resolution;
    m_conflict_resolution_isSet = true;
}

bool OAIAutoMerging::is_conflict_resolution_Set() const{
    return m_conflict_resolution_isSet;
}

bool OAIAutoMerging::is_conflict_resolution_Valid() const{
    return m_conflict_resolution_isValid;
}

double OAIAutoMerging::getMinAllowedConfidenceScoreForMerging() const {
    return m_min_allowed_confidence_score_for_merging;
}
void OAIAutoMerging::setMinAllowedConfidenceScoreForMerging(const double &min_allowed_confidence_score_for_merging) {
    m_min_allowed_confidence_score_for_merging = min_allowed_confidence_score_for_merging;
    m_min_allowed_confidence_score_for_merging_isSet = true;
}

bool OAIAutoMerging::is_min_allowed_confidence_score_for_merging_Set() const{
    return m_min_allowed_confidence_score_for_merging_isSet;
}

bool OAIAutoMerging::is_min_allowed_confidence_score_for_merging_Valid() const{
    return m_min_allowed_confidence_score_for_merging_isValid;
}

bool OAIAutoMerging::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consolidation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conflict_resolution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_allowed_confidence_score_for_merging_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutoMerging::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enabled_isValid && true;
}

} // namespace OpenAPI
