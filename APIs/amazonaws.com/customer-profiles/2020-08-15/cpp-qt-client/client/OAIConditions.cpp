/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConditions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConditions::OAIConditions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConditions::OAIConditions() {
    this->initializeModel();
}

OAIConditions::~OAIConditions() {}

void OAIConditions::initializeModel() {

    m_range_isSet = false;
    m_range_isValid = false;

    m_object_count_isSet = false;
    m_object_count_isValid = false;

    m_threshold_isSet = false;
    m_threshold_isValid = false;
}

void OAIConditions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConditions::fromJsonObject(QJsonObject json) {

    m_range_isValid = ::OpenAPI::fromJsonValue(m_range, json[QString("Range")]);
    m_range_isSet = !json[QString("Range")].isNull() && m_range_isValid;

    m_object_count_isValid = ::OpenAPI::fromJsonValue(m_object_count, json[QString("ObjectCount")]);
    m_object_count_isSet = !json[QString("ObjectCount")].isNull() && m_object_count_isValid;

    m_threshold_isValid = ::OpenAPI::fromJsonValue(m_threshold, json[QString("Threshold")]);
    m_threshold_isSet = !json[QString("Threshold")].isNull() && m_threshold_isValid;
}

QString OAIConditions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConditions::asJsonObject() const {
    QJsonObject obj;
    if (m_range.isSet()) {
        obj.insert(QString("Range"), ::OpenAPI::toJsonValue(m_range));
    }
    if (m_object_count_isSet) {
        obj.insert(QString("ObjectCount"), ::OpenAPI::toJsonValue(m_object_count));
    }
    if (m_threshold.isSet()) {
        obj.insert(QString("Threshold"), ::OpenAPI::toJsonValue(m_threshold));
    }
    return obj;
}

OAIUpdateCalculatedAttributeDefinition_request_Conditions_Range OAIConditions::getRange() const {
    return m_range;
}
void OAIConditions::setRange(const OAIUpdateCalculatedAttributeDefinition_request_Conditions_Range &range) {
    m_range = range;
    m_range_isSet = true;
}

bool OAIConditions::is_range_Set() const{
    return m_range_isSet;
}

bool OAIConditions::is_range_Valid() const{
    return m_range_isValid;
}

qint32 OAIConditions::getObjectCount() const {
    return m_object_count;
}
void OAIConditions::setObjectCount(const qint32 &object_count) {
    m_object_count = object_count;
    m_object_count_isSet = true;
}

bool OAIConditions::is_object_count_Set() const{
    return m_object_count_isSet;
}

bool OAIConditions::is_object_count_Valid() const{
    return m_object_count_isValid;
}

OAIUpdateCalculatedAttributeDefinition_request_Conditions_Threshold OAIConditions::getThreshold() const {
    return m_threshold;
}
void OAIConditions::setThreshold(const OAIUpdateCalculatedAttributeDefinition_request_Conditions_Threshold &threshold) {
    m_threshold = threshold;
    m_threshold_isSet = true;
}

bool OAIConditions::is_threshold_Set() const{
    return m_threshold_isSet;
}

bool OAIConditions::is_threshold_Valid() const{
    return m_threshold_isValid;
}

bool OAIConditions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConditions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
