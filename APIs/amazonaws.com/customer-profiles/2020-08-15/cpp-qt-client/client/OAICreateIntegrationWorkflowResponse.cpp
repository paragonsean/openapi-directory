/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateIntegrationWorkflowResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateIntegrationWorkflowResponse::OAICreateIntegrationWorkflowResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateIntegrationWorkflowResponse::OAICreateIntegrationWorkflowResponse() {
    this->initializeModel();
}

OAICreateIntegrationWorkflowResponse::~OAICreateIntegrationWorkflowResponse() {}

void OAICreateIntegrationWorkflowResponse::initializeModel() {

    m_workflow_id_isSet = false;
    m_workflow_id_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAICreateIntegrationWorkflowResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateIntegrationWorkflowResponse::fromJsonObject(QJsonObject json) {

    m_workflow_id_isValid = ::OpenAPI::fromJsonValue(m_workflow_id, json[QString("WorkflowId")]);
    m_workflow_id_isSet = !json[QString("WorkflowId")].isNull() && m_workflow_id_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;
}

QString OAICreateIntegrationWorkflowResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateIntegrationWorkflowResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_workflow_id_isSet) {
        obj.insert(QString("WorkflowId"), ::OpenAPI::toJsonValue(m_workflow_id));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

QString OAICreateIntegrationWorkflowResponse::getWorkflowId() const {
    return m_workflow_id;
}
void OAICreateIntegrationWorkflowResponse::setWorkflowId(const QString &workflow_id) {
    m_workflow_id = workflow_id;
    m_workflow_id_isSet = true;
}

bool OAICreateIntegrationWorkflowResponse::is_workflow_id_Set() const{
    return m_workflow_id_isSet;
}

bool OAICreateIntegrationWorkflowResponse::is_workflow_id_Valid() const{
    return m_workflow_id_isValid;
}

QString OAICreateIntegrationWorkflowResponse::getMessage() const {
    return m_message;
}
void OAICreateIntegrationWorkflowResponse::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAICreateIntegrationWorkflowResponse::is_message_Set() const{
    return m_message_isSet;
}

bool OAICreateIntegrationWorkflowResponse::is_message_Valid() const{
    return m_message_isValid;
}

bool OAICreateIntegrationWorkflowResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_workflow_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateIntegrationWorkflowResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_workflow_id_isValid && m_message_isValid && true;
}

} // namespace OpenAPI
