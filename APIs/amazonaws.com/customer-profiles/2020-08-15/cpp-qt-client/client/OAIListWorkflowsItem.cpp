/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListWorkflowsItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListWorkflowsItem::OAIListWorkflowsItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListWorkflowsItem::OAIListWorkflowsItem() {
    this->initializeModel();
}

OAIListWorkflowsItem::~OAIListWorkflowsItem() {}

void OAIListWorkflowsItem::initializeModel() {

    m_workflow_type_isSet = false;
    m_workflow_type_isValid = false;

    m_workflow_id_isSet = false;
    m_workflow_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_description_isSet = false;
    m_status_description_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;
}

void OAIListWorkflowsItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListWorkflowsItem::fromJsonObject(QJsonObject json) {

    m_workflow_type_isValid = ::OpenAPI::fromJsonValue(m_workflow_type, json[QString("WorkflowType")]);
    m_workflow_type_isSet = !json[QString("WorkflowType")].isNull() && m_workflow_type_isValid;

    m_workflow_id_isValid = ::OpenAPI::fromJsonValue(m_workflow_id, json[QString("WorkflowId")]);
    m_workflow_id_isSet = !json[QString("WorkflowId")].isNull() && m_workflow_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_description_isValid = ::OpenAPI::fromJsonValue(m_status_description, json[QString("StatusDescription")]);
    m_status_description_isSet = !json[QString("StatusDescription")].isNull() && m_status_description_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("LastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("LastUpdatedAt")].isNull() && m_last_updated_at_isValid;
}

QString OAIListWorkflowsItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListWorkflowsItem::asJsonObject() const {
    QJsonObject obj;
    if (m_workflow_type.isSet()) {
        obj.insert(QString("WorkflowType"), ::OpenAPI::toJsonValue(m_workflow_type));
    }
    if (m_workflow_id_isSet) {
        obj.insert(QString("WorkflowId"), ::OpenAPI::toJsonValue(m_workflow_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_description_isSet) {
        obj.insert(QString("StatusDescription"), ::OpenAPI::toJsonValue(m_status_description));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("LastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    return obj;
}

OAIWorkflowType OAIListWorkflowsItem::getWorkflowType() const {
    return m_workflow_type;
}
void OAIListWorkflowsItem::setWorkflowType(const OAIWorkflowType &workflow_type) {
    m_workflow_type = workflow_type;
    m_workflow_type_isSet = true;
}

bool OAIListWorkflowsItem::is_workflow_type_Set() const{
    return m_workflow_type_isSet;
}

bool OAIListWorkflowsItem::is_workflow_type_Valid() const{
    return m_workflow_type_isValid;
}

QString OAIListWorkflowsItem::getWorkflowId() const {
    return m_workflow_id;
}
void OAIListWorkflowsItem::setWorkflowId(const QString &workflow_id) {
    m_workflow_id = workflow_id;
    m_workflow_id_isSet = true;
}

bool OAIListWorkflowsItem::is_workflow_id_Set() const{
    return m_workflow_id_isSet;
}

bool OAIListWorkflowsItem::is_workflow_id_Valid() const{
    return m_workflow_id_isValid;
}

OAIStatus OAIListWorkflowsItem::getStatus() const {
    return m_status;
}
void OAIListWorkflowsItem::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIListWorkflowsItem::is_status_Set() const{
    return m_status_isSet;
}

bool OAIListWorkflowsItem::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIListWorkflowsItem::getStatusDescription() const {
    return m_status_description;
}
void OAIListWorkflowsItem::setStatusDescription(const QString &status_description) {
    m_status_description = status_description;
    m_status_description_isSet = true;
}

bool OAIListWorkflowsItem::is_status_description_Set() const{
    return m_status_description_isSet;
}

bool OAIListWorkflowsItem::is_status_description_Valid() const{
    return m_status_description_isValid;
}

QDateTime OAIListWorkflowsItem::getCreatedAt() const {
    return m_created_at;
}
void OAIListWorkflowsItem::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIListWorkflowsItem::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIListWorkflowsItem::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIListWorkflowsItem::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIListWorkflowsItem::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIListWorkflowsItem::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIListWorkflowsItem::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

bool OAIListWorkflowsItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_workflow_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListWorkflowsItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_workflow_type_isValid && m_workflow_id_isValid && m_status_isValid && m_status_description_isValid && m_created_at_isValid && m_last_updated_at_isValid && true;
}

} // namespace OpenAPI
