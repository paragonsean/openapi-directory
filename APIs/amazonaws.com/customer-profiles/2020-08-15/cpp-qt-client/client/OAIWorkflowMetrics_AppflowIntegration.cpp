/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowMetrics_AppflowIntegration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowMetrics_AppflowIntegration::OAIWorkflowMetrics_AppflowIntegration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowMetrics_AppflowIntegration::OAIWorkflowMetrics_AppflowIntegration() {
    this->initializeModel();
}

OAIWorkflowMetrics_AppflowIntegration::~OAIWorkflowMetrics_AppflowIntegration() {}

void OAIWorkflowMetrics_AppflowIntegration::initializeModel() {

    m_records_processed_isSet = false;
    m_records_processed_isValid = false;

    m_steps_completed_isSet = false;
    m_steps_completed_isValid = false;

    m_total_steps_isSet = false;
    m_total_steps_isValid = false;
}

void OAIWorkflowMetrics_AppflowIntegration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowMetrics_AppflowIntegration::fromJsonObject(QJsonObject json) {

    m_records_processed_isValid = ::OpenAPI::fromJsonValue(m_records_processed, json[QString("RecordsProcessed")]);
    m_records_processed_isSet = !json[QString("RecordsProcessed")].isNull() && m_records_processed_isValid;

    m_steps_completed_isValid = ::OpenAPI::fromJsonValue(m_steps_completed, json[QString("StepsCompleted")]);
    m_steps_completed_isSet = !json[QString("StepsCompleted")].isNull() && m_steps_completed_isValid;

    m_total_steps_isValid = ::OpenAPI::fromJsonValue(m_total_steps, json[QString("TotalSteps")]);
    m_total_steps_isSet = !json[QString("TotalSteps")].isNull() && m_total_steps_isValid;
}

QString OAIWorkflowMetrics_AppflowIntegration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowMetrics_AppflowIntegration::asJsonObject() const {
    QJsonObject obj;
    if (m_records_processed_isSet) {
        obj.insert(QString("RecordsProcessed"), ::OpenAPI::toJsonValue(m_records_processed));
    }
    if (m_steps_completed_isSet) {
        obj.insert(QString("StepsCompleted"), ::OpenAPI::toJsonValue(m_steps_completed));
    }
    if (m_total_steps_isSet) {
        obj.insert(QString("TotalSteps"), ::OpenAPI::toJsonValue(m_total_steps));
    }
    return obj;
}

qint32 OAIWorkflowMetrics_AppflowIntegration::getRecordsProcessed() const {
    return m_records_processed;
}
void OAIWorkflowMetrics_AppflowIntegration::setRecordsProcessed(const qint32 &records_processed) {
    m_records_processed = records_processed;
    m_records_processed_isSet = true;
}

bool OAIWorkflowMetrics_AppflowIntegration::is_records_processed_Set() const{
    return m_records_processed_isSet;
}

bool OAIWorkflowMetrics_AppflowIntegration::is_records_processed_Valid() const{
    return m_records_processed_isValid;
}

qint32 OAIWorkflowMetrics_AppflowIntegration::getStepsCompleted() const {
    return m_steps_completed;
}
void OAIWorkflowMetrics_AppflowIntegration::setStepsCompleted(const qint32 &steps_completed) {
    m_steps_completed = steps_completed;
    m_steps_completed_isSet = true;
}

bool OAIWorkflowMetrics_AppflowIntegration::is_steps_completed_Set() const{
    return m_steps_completed_isSet;
}

bool OAIWorkflowMetrics_AppflowIntegration::is_steps_completed_Valid() const{
    return m_steps_completed_isValid;
}

qint32 OAIWorkflowMetrics_AppflowIntegration::getTotalSteps() const {
    return m_total_steps;
}
void OAIWorkflowMetrics_AppflowIntegration::setTotalSteps(const qint32 &total_steps) {
    m_total_steps = total_steps;
    m_total_steps_isSet = true;
}

bool OAIWorkflowMetrics_AppflowIntegration::is_total_steps_Set() const{
    return m_total_steps_isSet;
}

bool OAIWorkflowMetrics_AppflowIntegration::is_total_steps_Valid() const{
    return m_total_steps_isValid;
}

bool OAIWorkflowMetrics_AppflowIntegration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_records_processed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_steps_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_steps_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowMetrics_AppflowIntegration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_records_processed_isValid && m_steps_completed_isValid && m_total_steps_isValid && true;
}

} // namespace OpenAPI
