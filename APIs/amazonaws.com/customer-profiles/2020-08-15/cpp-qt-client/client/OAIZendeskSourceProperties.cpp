/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIZendeskSourceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIZendeskSourceProperties::OAIZendeskSourceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIZendeskSourceProperties::OAIZendeskSourceProperties() {
    this->initializeModel();
}

OAIZendeskSourceProperties::~OAIZendeskSourceProperties() {}

void OAIZendeskSourceProperties::initializeModel() {

    m_object_isSet = false;
    m_object_isValid = false;
}

void OAIZendeskSourceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIZendeskSourceProperties::fromJsonObject(QJsonObject json) {

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("Object")]);
    m_object_isSet = !json[QString("Object")].isNull() && m_object_isValid;
}

QString OAIZendeskSourceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIZendeskSourceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_object_isSet) {
        obj.insert(QString("Object"), ::OpenAPI::toJsonValue(m_object));
    }
    return obj;
}

QString OAIZendeskSourceProperties::getObject() const {
    return m_object;
}
void OAIZendeskSourceProperties::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIZendeskSourceProperties::is_object_Set() const{
    return m_object_isSet;
}

bool OAIZendeskSourceProperties::is_object_Valid() const{
    return m_object_isValid;
}

bool OAIZendeskSourceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIZendeskSourceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_object_isValid && true;
}

} // namespace OpenAPI
