/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutProfileObjectType_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutProfileObjectType_request::OAIPutProfileObjectType_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutProfileObjectType_request::OAIPutProfileObjectType_request() {
    this->initializeModel();
}

OAIPutProfileObjectType_request::~OAIPutProfileObjectType_request() {}

void OAIPutProfileObjectType_request::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_template_id_isSet = false;
    m_template_id_isValid = false;

    m_expiration_days_isSet = false;
    m_expiration_days_isValid = false;

    m_encryption_key_isSet = false;
    m_encryption_key_isValid = false;

    m_allow_profile_creation_isSet = false;
    m_allow_profile_creation_isValid = false;

    m_source_last_updated_timestamp_format_isSet = false;
    m_source_last_updated_timestamp_format_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_keys_isSet = false;
    m_keys_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIPutProfileObjectType_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutProfileObjectType_request::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_template_id_isValid = ::OpenAPI::fromJsonValue(m_template_id, json[QString("TemplateId")]);
    m_template_id_isSet = !json[QString("TemplateId")].isNull() && m_template_id_isValid;

    m_expiration_days_isValid = ::OpenAPI::fromJsonValue(m_expiration_days, json[QString("ExpirationDays")]);
    m_expiration_days_isSet = !json[QString("ExpirationDays")].isNull() && m_expiration_days_isValid;

    m_encryption_key_isValid = ::OpenAPI::fromJsonValue(m_encryption_key, json[QString("EncryptionKey")]);
    m_encryption_key_isSet = !json[QString("EncryptionKey")].isNull() && m_encryption_key_isValid;

    m_allow_profile_creation_isValid = ::OpenAPI::fromJsonValue(m_allow_profile_creation, json[QString("AllowProfileCreation")]);
    m_allow_profile_creation_isSet = !json[QString("AllowProfileCreation")].isNull() && m_allow_profile_creation_isValid;

    m_source_last_updated_timestamp_format_isValid = ::OpenAPI::fromJsonValue(m_source_last_updated_timestamp_format, json[QString("SourceLastUpdatedTimestampFormat")]);
    m_source_last_updated_timestamp_format_isSet = !json[QString("SourceLastUpdatedTimestampFormat")].isNull() && m_source_last_updated_timestamp_format_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("Fields")]);
    m_fields_isSet = !json[QString("Fields")].isNull() && m_fields_isValid;

    if(json["Keys"].isObject()){
        auto varmap = json["Keys"].toObject().toVariantMap();
        m_keys_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<OAIObjectTypeKey> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_keys_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_keys_isSet &= !jval.isNull() && m_keys_isValid;
                m_keys.insert(m_keys.end(), val, item);
            }
        }
    }

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIPutProfileObjectType_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutProfileObjectType_request::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_template_id_isSet) {
        obj.insert(QString("TemplateId"), ::OpenAPI::toJsonValue(m_template_id));
    }
    if (m_expiration_days_isSet) {
        obj.insert(QString("ExpirationDays"), ::OpenAPI::toJsonValue(m_expiration_days));
    }
    if (m_encryption_key_isSet) {
        obj.insert(QString("EncryptionKey"), ::OpenAPI::toJsonValue(m_encryption_key));
    }
    if (m_allow_profile_creation_isSet) {
        obj.insert(QString("AllowProfileCreation"), ::OpenAPI::toJsonValue(m_allow_profile_creation));
    }
    if (m_source_last_updated_timestamp_format_isSet) {
        obj.insert(QString("SourceLastUpdatedTimestampFormat"), ::OpenAPI::toJsonValue(m_source_last_updated_timestamp_format));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("Fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_keys.size() > 0) {
        
        obj.insert(QString("Keys"), toJsonValue(m_keys));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIPutProfileObjectType_request::getDescription() const {
    return m_description;
}
void OAIPutProfileObjectType_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPutProfileObjectType_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPutProfileObjectType_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPutProfileObjectType_request::getTemplateId() const {
    return m_template_id;
}
void OAIPutProfileObjectType_request::setTemplateId(const QString &template_id) {
    m_template_id = template_id;
    m_template_id_isSet = true;
}

bool OAIPutProfileObjectType_request::is_template_id_Set() const{
    return m_template_id_isSet;
}

bool OAIPutProfileObjectType_request::is_template_id_Valid() const{
    return m_template_id_isValid;
}

qint32 OAIPutProfileObjectType_request::getExpirationDays() const {
    return m_expiration_days;
}
void OAIPutProfileObjectType_request::setExpirationDays(const qint32 &expiration_days) {
    m_expiration_days = expiration_days;
    m_expiration_days_isSet = true;
}

bool OAIPutProfileObjectType_request::is_expiration_days_Set() const{
    return m_expiration_days_isSet;
}

bool OAIPutProfileObjectType_request::is_expiration_days_Valid() const{
    return m_expiration_days_isValid;
}

QString OAIPutProfileObjectType_request::getEncryptionKey() const {
    return m_encryption_key;
}
void OAIPutProfileObjectType_request::setEncryptionKey(const QString &encryption_key) {
    m_encryption_key = encryption_key;
    m_encryption_key_isSet = true;
}

bool OAIPutProfileObjectType_request::is_encryption_key_Set() const{
    return m_encryption_key_isSet;
}

bool OAIPutProfileObjectType_request::is_encryption_key_Valid() const{
    return m_encryption_key_isValid;
}

bool OAIPutProfileObjectType_request::isAllowProfileCreation() const {
    return m_allow_profile_creation;
}
void OAIPutProfileObjectType_request::setAllowProfileCreation(const bool &allow_profile_creation) {
    m_allow_profile_creation = allow_profile_creation;
    m_allow_profile_creation_isSet = true;
}

bool OAIPutProfileObjectType_request::is_allow_profile_creation_Set() const{
    return m_allow_profile_creation_isSet;
}

bool OAIPutProfileObjectType_request::is_allow_profile_creation_Valid() const{
    return m_allow_profile_creation_isValid;
}

QString OAIPutProfileObjectType_request::getSourceLastUpdatedTimestampFormat() const {
    return m_source_last_updated_timestamp_format;
}
void OAIPutProfileObjectType_request::setSourceLastUpdatedTimestampFormat(const QString &source_last_updated_timestamp_format) {
    m_source_last_updated_timestamp_format = source_last_updated_timestamp_format;
    m_source_last_updated_timestamp_format_isSet = true;
}

bool OAIPutProfileObjectType_request::is_source_last_updated_timestamp_format_Set() const{
    return m_source_last_updated_timestamp_format_isSet;
}

bool OAIPutProfileObjectType_request::is_source_last_updated_timestamp_format_Valid() const{
    return m_source_last_updated_timestamp_format_isValid;
}

QMap<QString, OAIObjectTypeField> OAIPutProfileObjectType_request::getFields() const {
    return m_fields;
}
void OAIPutProfileObjectType_request::setFields(const QMap<QString, OAIObjectTypeField> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIPutProfileObjectType_request::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIPutProfileObjectType_request::is_fields_Valid() const{
    return m_fields_isValid;
}

QMap<QString, QList> OAIPutProfileObjectType_request::getKeys() const {
    return m_keys;
}
void OAIPutProfileObjectType_request::setKeys(const QMap<QString, QList> &keys) {
    m_keys = keys;
    m_keys_isSet = true;
}

bool OAIPutProfileObjectType_request::is_keys_Set() const{
    return m_keys_isSet;
}

bool OAIPutProfileObjectType_request::is_keys_Valid() const{
    return m_keys_isValid;
}

QMap<QString, QString> OAIPutProfileObjectType_request::getTags() const {
    return m_tags;
}
void OAIPutProfileObjectType_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIPutProfileObjectType_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIPutProfileObjectType_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIPutProfileObjectType_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_profile_creation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_last_updated_timestamp_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutProfileObjectType_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && true;
}

} // namespace OpenAPI
