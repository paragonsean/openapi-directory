/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainStats::OAIDomainStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainStats::OAIDomainStats() {
    this->initializeModel();
}

OAIDomainStats::~OAIDomainStats() {}

void OAIDomainStats::initializeModel() {

    m_profile_count_isSet = false;
    m_profile_count_isValid = false;

    m_metering_profile_count_isSet = false;
    m_metering_profile_count_isValid = false;

    m_object_count_isSet = false;
    m_object_count_isValid = false;

    m_total_size_isSet = false;
    m_total_size_isValid = false;
}

void OAIDomainStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomainStats::fromJsonObject(QJsonObject json) {

    m_profile_count_isValid = ::OpenAPI::fromJsonValue(m_profile_count, json[QString("ProfileCount")]);
    m_profile_count_isSet = !json[QString("ProfileCount")].isNull() && m_profile_count_isValid;

    m_metering_profile_count_isValid = ::OpenAPI::fromJsonValue(m_metering_profile_count, json[QString("MeteringProfileCount")]);
    m_metering_profile_count_isSet = !json[QString("MeteringProfileCount")].isNull() && m_metering_profile_count_isValid;

    m_object_count_isValid = ::OpenAPI::fromJsonValue(m_object_count, json[QString("ObjectCount")]);
    m_object_count_isSet = !json[QString("ObjectCount")].isNull() && m_object_count_isValid;

    m_total_size_isValid = ::OpenAPI::fromJsonValue(m_total_size, json[QString("TotalSize")]);
    m_total_size_isSet = !json[QString("TotalSize")].isNull() && m_total_size_isValid;
}

QString OAIDomainStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomainStats::asJsonObject() const {
    QJsonObject obj;
    if (m_profile_count_isSet) {
        obj.insert(QString("ProfileCount"), ::OpenAPI::toJsonValue(m_profile_count));
    }
    if (m_metering_profile_count_isSet) {
        obj.insert(QString("MeteringProfileCount"), ::OpenAPI::toJsonValue(m_metering_profile_count));
    }
    if (m_object_count_isSet) {
        obj.insert(QString("ObjectCount"), ::OpenAPI::toJsonValue(m_object_count));
    }
    if (m_total_size_isSet) {
        obj.insert(QString("TotalSize"), ::OpenAPI::toJsonValue(m_total_size));
    }
    return obj;
}

qint32 OAIDomainStats::getProfileCount() const {
    return m_profile_count;
}
void OAIDomainStats::setProfileCount(const qint32 &profile_count) {
    m_profile_count = profile_count;
    m_profile_count_isSet = true;
}

bool OAIDomainStats::is_profile_count_Set() const{
    return m_profile_count_isSet;
}

bool OAIDomainStats::is_profile_count_Valid() const{
    return m_profile_count_isValid;
}

qint32 OAIDomainStats::getMeteringProfileCount() const {
    return m_metering_profile_count;
}
void OAIDomainStats::setMeteringProfileCount(const qint32 &metering_profile_count) {
    m_metering_profile_count = metering_profile_count;
    m_metering_profile_count_isSet = true;
}

bool OAIDomainStats::is_metering_profile_count_Set() const{
    return m_metering_profile_count_isSet;
}

bool OAIDomainStats::is_metering_profile_count_Valid() const{
    return m_metering_profile_count_isValid;
}

qint32 OAIDomainStats::getObjectCount() const {
    return m_object_count;
}
void OAIDomainStats::setObjectCount(const qint32 &object_count) {
    m_object_count = object_count;
    m_object_count_isSet = true;
}

bool OAIDomainStats::is_object_count_Set() const{
    return m_object_count_isSet;
}

bool OAIDomainStats::is_object_count_Valid() const{
    return m_object_count_isValid;
}

qint32 OAIDomainStats::getTotalSize() const {
    return m_total_size;
}
void OAIDomainStats::setTotalSize(const qint32 &total_size) {
    m_total_size = total_size;
    m_total_size_isSet = true;
}

bool OAIDomainStats::is_total_size_Set() const{
    return m_total_size_isSet;
}

bool OAIDomainStats::is_total_size_Valid() const{
    return m_total_size_isValid;
}

bool OAIDomainStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_profile_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metering_profile_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomainStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
