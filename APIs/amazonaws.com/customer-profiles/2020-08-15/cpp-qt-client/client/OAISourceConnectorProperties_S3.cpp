/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceConnectorProperties_S3.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceConnectorProperties_S3::OAISourceConnectorProperties_S3(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceConnectorProperties_S3::OAISourceConnectorProperties_S3() {
    this->initializeModel();
}

OAISourceConnectorProperties_S3::~OAISourceConnectorProperties_S3() {}

void OAISourceConnectorProperties_S3::initializeModel() {

    m_bucket_name_isSet = false;
    m_bucket_name_isValid = false;

    m_bucket_prefix_isSet = false;
    m_bucket_prefix_isValid = false;
}

void OAISourceConnectorProperties_S3::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceConnectorProperties_S3::fromJsonObject(QJsonObject json) {

    m_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_bucket_name, json[QString("BucketName")]);
    m_bucket_name_isSet = !json[QString("BucketName")].isNull() && m_bucket_name_isValid;

    m_bucket_prefix_isValid = ::OpenAPI::fromJsonValue(m_bucket_prefix, json[QString("BucketPrefix")]);
    m_bucket_prefix_isSet = !json[QString("BucketPrefix")].isNull() && m_bucket_prefix_isValid;
}

QString OAISourceConnectorProperties_S3::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceConnectorProperties_S3::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_name_isSet) {
        obj.insert(QString("BucketName"), ::OpenAPI::toJsonValue(m_bucket_name));
    }
    if (m_bucket_prefix_isSet) {
        obj.insert(QString("BucketPrefix"), ::OpenAPI::toJsonValue(m_bucket_prefix));
    }
    return obj;
}

QString OAISourceConnectorProperties_S3::getBucketName() const {
    return m_bucket_name;
}
void OAISourceConnectorProperties_S3::setBucketName(const QString &bucket_name) {
    m_bucket_name = bucket_name;
    m_bucket_name_isSet = true;
}

bool OAISourceConnectorProperties_S3::is_bucket_name_Set() const{
    return m_bucket_name_isSet;
}

bool OAISourceConnectorProperties_S3::is_bucket_name_Valid() const{
    return m_bucket_name_isValid;
}

QString OAISourceConnectorProperties_S3::getBucketPrefix() const {
    return m_bucket_prefix;
}
void OAISourceConnectorProperties_S3::setBucketPrefix(const QString &bucket_prefix) {
    m_bucket_prefix = bucket_prefix;
    m_bucket_prefix_isSet = true;
}

bool OAISourceConnectorProperties_S3::is_bucket_prefix_Set() const{
    return m_bucket_prefix_isSet;
}

bool OAISourceConnectorProperties_S3::is_bucket_prefix_Valid() const{
    return m_bucket_prefix_isValid;
}

bool OAISourceConnectorProperties_S3::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceConnectorProperties_S3::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bucket_name_isValid && true;
}

} // namespace OpenAPI
