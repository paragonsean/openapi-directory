/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAutoMergingPreview_request_ConflictResolution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAutoMergingPreview_request_ConflictResolution::OAIGetAutoMergingPreview_request_ConflictResolution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAutoMergingPreview_request_ConflictResolution::OAIGetAutoMergingPreview_request_ConflictResolution() {
    this->initializeModel();
}

OAIGetAutoMergingPreview_request_ConflictResolution::~OAIGetAutoMergingPreview_request_ConflictResolution() {}

void OAIGetAutoMergingPreview_request_ConflictResolution::initializeModel() {

    m_conflict_resolving_model_isSet = false;
    m_conflict_resolving_model_isValid = false;

    m_source_name_isSet = false;
    m_source_name_isValid = false;
}

void OAIGetAutoMergingPreview_request_ConflictResolution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAutoMergingPreview_request_ConflictResolution::fromJsonObject(QJsonObject json) {

    m_conflict_resolving_model_isValid = ::OpenAPI::fromJsonValue(m_conflict_resolving_model, json[QString("ConflictResolvingModel")]);
    m_conflict_resolving_model_isSet = !json[QString("ConflictResolvingModel")].isNull() && m_conflict_resolving_model_isValid;

    m_source_name_isValid = ::OpenAPI::fromJsonValue(m_source_name, json[QString("SourceName")]);
    m_source_name_isSet = !json[QString("SourceName")].isNull() && m_source_name_isValid;
}

QString OAIGetAutoMergingPreview_request_ConflictResolution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAutoMergingPreview_request_ConflictResolution::asJsonObject() const {
    QJsonObject obj;
    if (m_conflict_resolving_model.isSet()) {
        obj.insert(QString("ConflictResolvingModel"), ::OpenAPI::toJsonValue(m_conflict_resolving_model));
    }
    if (m_source_name_isSet) {
        obj.insert(QString("SourceName"), ::OpenAPI::toJsonValue(m_source_name));
    }
    return obj;
}

OAIConflictResolvingModel OAIGetAutoMergingPreview_request_ConflictResolution::getConflictResolvingModel() const {
    return m_conflict_resolving_model;
}
void OAIGetAutoMergingPreview_request_ConflictResolution::setConflictResolvingModel(const OAIConflictResolvingModel &conflict_resolving_model) {
    m_conflict_resolving_model = conflict_resolving_model;
    m_conflict_resolving_model_isSet = true;
}

bool OAIGetAutoMergingPreview_request_ConflictResolution::is_conflict_resolving_model_Set() const{
    return m_conflict_resolving_model_isSet;
}

bool OAIGetAutoMergingPreview_request_ConflictResolution::is_conflict_resolving_model_Valid() const{
    return m_conflict_resolving_model_isValid;
}

QString OAIGetAutoMergingPreview_request_ConflictResolution::getSourceName() const {
    return m_source_name;
}
void OAIGetAutoMergingPreview_request_ConflictResolution::setSourceName(const QString &source_name) {
    m_source_name = source_name;
    m_source_name_isSet = true;
}

bool OAIGetAutoMergingPreview_request_ConflictResolution::is_source_name_Set() const{
    return m_source_name_isSet;
}

bool OAIGetAutoMergingPreview_request_ConflictResolution::is_source_name_Valid() const{
    return m_source_name_isValid;
}

bool OAIGetAutoMergingPreview_request_ConflictResolution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conflict_resolving_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAutoMergingPreview_request_ConflictResolution::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
