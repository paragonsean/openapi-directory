/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetWorkflowResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetWorkflowResponse::OAIGetWorkflowResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetWorkflowResponse::OAIGetWorkflowResponse() {
    this->initializeModel();
}

OAIGetWorkflowResponse::~OAIGetWorkflowResponse() {}

void OAIGetWorkflowResponse::initializeModel() {

    m_workflow_id_isSet = false;
    m_workflow_id_isValid = false;

    m_workflow_type_isSet = false;
    m_workflow_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_error_description_isSet = false;
    m_error_description_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;
}

void OAIGetWorkflowResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetWorkflowResponse::fromJsonObject(QJsonObject json) {

    m_workflow_id_isValid = ::OpenAPI::fromJsonValue(m_workflow_id, json[QString("WorkflowId")]);
    m_workflow_id_isSet = !json[QString("WorkflowId")].isNull() && m_workflow_id_isValid;

    m_workflow_type_isValid = ::OpenAPI::fromJsonValue(m_workflow_type, json[QString("WorkflowType")]);
    m_workflow_type_isSet = !json[QString("WorkflowType")].isNull() && m_workflow_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_error_description_isValid = ::OpenAPI::fromJsonValue(m_error_description, json[QString("ErrorDescription")]);
    m_error_description_isSet = !json[QString("ErrorDescription")].isNull() && m_error_description_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("LastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("LastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("Metrics")]);
    m_metrics_isSet = !json[QString("Metrics")].isNull() && m_metrics_isValid;
}

QString OAIGetWorkflowResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetWorkflowResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_workflow_id_isSet) {
        obj.insert(QString("WorkflowId"), ::OpenAPI::toJsonValue(m_workflow_id));
    }
    if (m_workflow_type.isSet()) {
        obj.insert(QString("WorkflowType"), ::OpenAPI::toJsonValue(m_workflow_type));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_error_description_isSet) {
        obj.insert(QString("ErrorDescription"), ::OpenAPI::toJsonValue(m_error_description));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("LastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_metrics.isSet()) {
        obj.insert(QString("Metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    return obj;
}

QString OAIGetWorkflowResponse::getWorkflowId() const {
    return m_workflow_id;
}
void OAIGetWorkflowResponse::setWorkflowId(const QString &workflow_id) {
    m_workflow_id = workflow_id;
    m_workflow_id_isSet = true;
}

bool OAIGetWorkflowResponse::is_workflow_id_Set() const{
    return m_workflow_id_isSet;
}

bool OAIGetWorkflowResponse::is_workflow_id_Valid() const{
    return m_workflow_id_isValid;
}

OAIWorkflowType OAIGetWorkflowResponse::getWorkflowType() const {
    return m_workflow_type;
}
void OAIGetWorkflowResponse::setWorkflowType(const OAIWorkflowType &workflow_type) {
    m_workflow_type = workflow_type;
    m_workflow_type_isSet = true;
}

bool OAIGetWorkflowResponse::is_workflow_type_Set() const{
    return m_workflow_type_isSet;
}

bool OAIGetWorkflowResponse::is_workflow_type_Valid() const{
    return m_workflow_type_isValid;
}

OAIStatus OAIGetWorkflowResponse::getStatus() const {
    return m_status;
}
void OAIGetWorkflowResponse::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetWorkflowResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetWorkflowResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetWorkflowResponse::getErrorDescription() const {
    return m_error_description;
}
void OAIGetWorkflowResponse::setErrorDescription(const QString &error_description) {
    m_error_description = error_description;
    m_error_description_isSet = true;
}

bool OAIGetWorkflowResponse::is_error_description_Set() const{
    return m_error_description_isSet;
}

bool OAIGetWorkflowResponse::is_error_description_Valid() const{
    return m_error_description_isValid;
}

QDateTime OAIGetWorkflowResponse::getStartDate() const {
    return m_start_date;
}
void OAIGetWorkflowResponse::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIGetWorkflowResponse::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIGetWorkflowResponse::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QDateTime OAIGetWorkflowResponse::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIGetWorkflowResponse::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIGetWorkflowResponse::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIGetWorkflowResponse::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

OAIGetWorkflowResponse_Attributes OAIGetWorkflowResponse::getAttributes() const {
    return m_attributes;
}
void OAIGetWorkflowResponse::setAttributes(const OAIGetWorkflowResponse_Attributes &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIGetWorkflowResponse::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIGetWorkflowResponse::is_attributes_Valid() const{
    return m_attributes_isValid;
}

OAIGetWorkflowResponse_Metrics OAIGetWorkflowResponse::getMetrics() const {
    return m_metrics;
}
void OAIGetWorkflowResponse::setMetrics(const OAIGetWorkflowResponse_Metrics &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIGetWorkflowResponse::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIGetWorkflowResponse::is_metrics_Valid() const{
    return m_metrics_isValid;
}

bool OAIGetWorkflowResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_workflow_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetWorkflowResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
