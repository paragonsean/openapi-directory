/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITask_ConnectorOperator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITask_ConnectorOperator::OAITask_ConnectorOperator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITask_ConnectorOperator::OAITask_ConnectorOperator() {
    this->initializeModel();
}

OAITask_ConnectorOperator::~OAITask_ConnectorOperator() {}

void OAITask_ConnectorOperator::initializeModel() {

    m_marketo_isSet = false;
    m_marketo_isValid = false;

    m_s3_isSet = false;
    m_s3_isValid = false;

    m_salesforce_isSet = false;
    m_salesforce_isValid = false;

    m_service_now_isSet = false;
    m_service_now_isValid = false;

    m_zendesk_isSet = false;
    m_zendesk_isValid = false;
}

void OAITask_ConnectorOperator::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITask_ConnectorOperator::fromJsonObject(QJsonObject json) {

    m_marketo_isValid = ::OpenAPI::fromJsonValue(m_marketo, json[QString("Marketo")]);
    m_marketo_isSet = !json[QString("Marketo")].isNull() && m_marketo_isValid;

    m_s3_isValid = ::OpenAPI::fromJsonValue(m_s3, json[QString("S3")]);
    m_s3_isSet = !json[QString("S3")].isNull() && m_s3_isValid;

    m_salesforce_isValid = ::OpenAPI::fromJsonValue(m_salesforce, json[QString("Salesforce")]);
    m_salesforce_isSet = !json[QString("Salesforce")].isNull() && m_salesforce_isValid;

    m_service_now_isValid = ::OpenAPI::fromJsonValue(m_service_now, json[QString("ServiceNow")]);
    m_service_now_isSet = !json[QString("ServiceNow")].isNull() && m_service_now_isValid;

    m_zendesk_isValid = ::OpenAPI::fromJsonValue(m_zendesk, json[QString("Zendesk")]);
    m_zendesk_isSet = !json[QString("Zendesk")].isNull() && m_zendesk_isValid;
}

QString OAITask_ConnectorOperator::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITask_ConnectorOperator::asJsonObject() const {
    QJsonObject obj;
    if (m_marketo.isSet()) {
        obj.insert(QString("Marketo"), ::OpenAPI::toJsonValue(m_marketo));
    }
    if (m_s3.isSet()) {
        obj.insert(QString("S3"), ::OpenAPI::toJsonValue(m_s3));
    }
    if (m_salesforce.isSet()) {
        obj.insert(QString("Salesforce"), ::OpenAPI::toJsonValue(m_salesforce));
    }
    if (m_service_now.isSet()) {
        obj.insert(QString("ServiceNow"), ::OpenAPI::toJsonValue(m_service_now));
    }
    if (m_zendesk.isSet()) {
        obj.insert(QString("Zendesk"), ::OpenAPI::toJsonValue(m_zendesk));
    }
    return obj;
}

OAIMarketoConnectorOperator OAITask_ConnectorOperator::getMarketo() const {
    return m_marketo;
}
void OAITask_ConnectorOperator::setMarketo(const OAIMarketoConnectorOperator &marketo) {
    m_marketo = marketo;
    m_marketo_isSet = true;
}

bool OAITask_ConnectorOperator::is_marketo_Set() const{
    return m_marketo_isSet;
}

bool OAITask_ConnectorOperator::is_marketo_Valid() const{
    return m_marketo_isValid;
}

OAIS3ConnectorOperator OAITask_ConnectorOperator::getS3() const {
    return m_s3;
}
void OAITask_ConnectorOperator::setS3(const OAIS3ConnectorOperator &s3) {
    m_s3 = s3;
    m_s3_isSet = true;
}

bool OAITask_ConnectorOperator::is_s3_Set() const{
    return m_s3_isSet;
}

bool OAITask_ConnectorOperator::is_s3_Valid() const{
    return m_s3_isValid;
}

OAISalesforceConnectorOperator OAITask_ConnectorOperator::getSalesforce() const {
    return m_salesforce;
}
void OAITask_ConnectorOperator::setSalesforce(const OAISalesforceConnectorOperator &salesforce) {
    m_salesforce = salesforce;
    m_salesforce_isSet = true;
}

bool OAITask_ConnectorOperator::is_salesforce_Set() const{
    return m_salesforce_isSet;
}

bool OAITask_ConnectorOperator::is_salesforce_Valid() const{
    return m_salesforce_isValid;
}

OAIServiceNowConnectorOperator OAITask_ConnectorOperator::getServiceNow() const {
    return m_service_now;
}
void OAITask_ConnectorOperator::setServiceNow(const OAIServiceNowConnectorOperator &service_now) {
    m_service_now = service_now;
    m_service_now_isSet = true;
}

bool OAITask_ConnectorOperator::is_service_now_Set() const{
    return m_service_now_isSet;
}

bool OAITask_ConnectorOperator::is_service_now_Valid() const{
    return m_service_now_isValid;
}

OAIZendeskConnectorOperator OAITask_ConnectorOperator::getZendesk() const {
    return m_zendesk;
}
void OAITask_ConnectorOperator::setZendesk(const OAIZendeskConnectorOperator &zendesk) {
    m_zendesk = zendesk;
    m_zendesk_isSet = true;
}

bool OAITask_ConnectorOperator::is_zendesk_Set() const{
    return m_zendesk_isSet;
}

bool OAITask_ConnectorOperator::is_zendesk_Valid() const{
    return m_zendesk_isValid;
}

bool OAITask_ConnectorOperator::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_marketo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_salesforce.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_now.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zendesk.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITask_ConnectorOperator::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
