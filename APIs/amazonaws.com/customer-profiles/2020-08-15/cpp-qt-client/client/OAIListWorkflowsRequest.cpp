/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListWorkflowsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListWorkflowsRequest::OAIListWorkflowsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListWorkflowsRequest::OAIListWorkflowsRequest() {
    this->initializeModel();
}

OAIListWorkflowsRequest::~OAIListWorkflowsRequest() {}

void OAIListWorkflowsRequest::initializeModel() {

    m_workflow_type_isSet = false;
    m_workflow_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_query_start_date_isSet = false;
    m_query_start_date_isValid = false;

    m_query_end_date_isSet = false;
    m_query_end_date_isValid = false;
}

void OAIListWorkflowsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListWorkflowsRequest::fromJsonObject(QJsonObject json) {

    m_workflow_type_isValid = ::OpenAPI::fromJsonValue(m_workflow_type, json[QString("WorkflowType")]);
    m_workflow_type_isSet = !json[QString("WorkflowType")].isNull() && m_workflow_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_query_start_date_isValid = ::OpenAPI::fromJsonValue(m_query_start_date, json[QString("QueryStartDate")]);
    m_query_start_date_isSet = !json[QString("QueryStartDate")].isNull() && m_query_start_date_isValid;

    m_query_end_date_isValid = ::OpenAPI::fromJsonValue(m_query_end_date, json[QString("QueryEndDate")]);
    m_query_end_date_isSet = !json[QString("QueryEndDate")].isNull() && m_query_end_date_isValid;
}

QString OAIListWorkflowsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListWorkflowsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_workflow_type.isSet()) {
        obj.insert(QString("WorkflowType"), ::OpenAPI::toJsonValue(m_workflow_type));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_query_start_date_isSet) {
        obj.insert(QString("QueryStartDate"), ::OpenAPI::toJsonValue(m_query_start_date));
    }
    if (m_query_end_date_isSet) {
        obj.insert(QString("QueryEndDate"), ::OpenAPI::toJsonValue(m_query_end_date));
    }
    return obj;
}

OAIWorkflowType OAIListWorkflowsRequest::getWorkflowType() const {
    return m_workflow_type;
}
void OAIListWorkflowsRequest::setWorkflowType(const OAIWorkflowType &workflow_type) {
    m_workflow_type = workflow_type;
    m_workflow_type_isSet = true;
}

bool OAIListWorkflowsRequest::is_workflow_type_Set() const{
    return m_workflow_type_isSet;
}

bool OAIListWorkflowsRequest::is_workflow_type_Valid() const{
    return m_workflow_type_isValid;
}

OAIStatus OAIListWorkflowsRequest::getStatus() const {
    return m_status;
}
void OAIListWorkflowsRequest::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIListWorkflowsRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAIListWorkflowsRequest::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIListWorkflowsRequest::getQueryStartDate() const {
    return m_query_start_date;
}
void OAIListWorkflowsRequest::setQueryStartDate(const QDateTime &query_start_date) {
    m_query_start_date = query_start_date;
    m_query_start_date_isSet = true;
}

bool OAIListWorkflowsRequest::is_query_start_date_Set() const{
    return m_query_start_date_isSet;
}

bool OAIListWorkflowsRequest::is_query_start_date_Valid() const{
    return m_query_start_date_isValid;
}

QDateTime OAIListWorkflowsRequest::getQueryEndDate() const {
    return m_query_end_date;
}
void OAIListWorkflowsRequest::setQueryEndDate(const QDateTime &query_end_date) {
    m_query_end_date = query_end_date;
    m_query_end_date_isSet = true;
}

bool OAIListWorkflowsRequest::is_query_end_date_Set() const{
    return m_query_end_date_isSet;
}

bool OAIListWorkflowsRequest::is_query_end_date_Valid() const{
    return m_query_end_date_isValid;
}

bool OAIListWorkflowsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_workflow_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListWorkflowsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
