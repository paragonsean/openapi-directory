/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributeDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributeDetails::OAIAttributeDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributeDetails::OAIAttributeDetails() {
    this->initializeModel();
}

OAIAttributeDetails::~OAIAttributeDetails() {}

void OAIAttributeDetails::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_expression_isSet = false;
    m_expression_isValid = false;
}

void OAIAttributeDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributeDetails::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("Expression")]);
    m_expression_isSet = !json[QString("Expression")].isNull() && m_expression_isValid;
}

QString OAIAttributeDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributeDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.isSet()) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_expression_isSet) {
        obj.insert(QString("Expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    return obj;
}

QList OAIAttributeDetails::getAttributes() const {
    return m_attributes;
}
void OAIAttributeDetails::setAttributes(const QList &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIAttributeDetails::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIAttributeDetails::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIAttributeDetails::getExpression() const {
    return m_expression;
}
void OAIAttributeDetails::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIAttributeDetails::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIAttributeDetails::is_expression_Valid() const{
    return m_expression_isValid;
}

bool OAIAttributeDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributeDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attributes_isValid && m_expression_isValid && true;
}

} // namespace OpenAPI
