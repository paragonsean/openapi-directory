/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjectTypeField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjectTypeField::OAIObjectTypeField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjectTypeField::OAIObjectTypeField() {
    this->initializeModel();
}

OAIObjectTypeField::~OAIObjectTypeField() {}

void OAIObjectTypeField::initializeModel() {

    m_source_isSet = false;
    m_source_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;
}

void OAIObjectTypeField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjectTypeField::fromJsonObject(QJsonObject json) {

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("Target")]);
    m_target_isSet = !json[QString("Target")].isNull() && m_target_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("ContentType")]);
    m_content_type_isSet = !json[QString("ContentType")].isNull() && m_content_type_isValid;
}

QString OAIObjectTypeField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjectTypeField::asJsonObject() const {
    QJsonObject obj;
    if (m_source_isSet) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_target_isSet) {
        obj.insert(QString("Target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_content_type.isSet()) {
        obj.insert(QString("ContentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    return obj;
}

QString OAIObjectTypeField::getSource() const {
    return m_source;
}
void OAIObjectTypeField::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIObjectTypeField::is_source_Set() const{
    return m_source_isSet;
}

bool OAIObjectTypeField::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIObjectTypeField::getTarget() const {
    return m_target;
}
void OAIObjectTypeField::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIObjectTypeField::is_target_Set() const{
    return m_target_isSet;
}

bool OAIObjectTypeField::is_target_Valid() const{
    return m_target_isValid;
}

OAIFieldContentType OAIObjectTypeField::getContentType() const {
    return m_content_type;
}
void OAIObjectTypeField::setContentType(const OAIFieldContentType &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIObjectTypeField::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIObjectTypeField::is_content_type_Valid() const{
    return m_content_type_isValid;
}

bool OAIObjectTypeField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjectTypeField::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
