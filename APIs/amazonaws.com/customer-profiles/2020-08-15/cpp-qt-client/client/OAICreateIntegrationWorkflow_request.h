/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateIntegrationWorkflow_request.h
 *
 * 
 */

#ifndef OAICreateIntegrationWorkflow_request_H
#define OAICreateIntegrationWorkflow_request_H

#include <QJsonObject>

#include "OAICreateIntegrationWorkflow_request_IntegrationConfig.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateIntegrationWorkflow_request_IntegrationConfig;

class OAICreateIntegrationWorkflow_request : public OAIObject {
public:
    OAICreateIntegrationWorkflow_request();
    OAICreateIntegrationWorkflow_request(QString json);
    ~OAICreateIntegrationWorkflow_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getWorkflowType() const;
    void setWorkflowType(const QString &workflow_type);
    bool is_workflow_type_Set() const;
    bool is_workflow_type_Valid() const;

    OAICreateIntegrationWorkflow_request_IntegrationConfig getIntegrationConfig() const;
    void setIntegrationConfig(const OAICreateIntegrationWorkflow_request_IntegrationConfig &integration_config);
    bool is_integration_config_Set() const;
    bool is_integration_config_Valid() const;

    QString getObjectTypeName() const;
    void setObjectTypeName(const QString &object_type_name);
    bool is_object_type_name_Set() const;
    bool is_object_type_name_Valid() const;

    QString getRoleArn() const;
    void setRoleArn(const QString &role_arn);
    bool is_role_arn_Set() const;
    bool is_role_arn_Valid() const;

    QMap<QString, QString> getTags() const;
    void setTags(const QMap<QString, QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_workflow_type;
    bool m_workflow_type_isSet;
    bool m_workflow_type_isValid;

    OAICreateIntegrationWorkflow_request_IntegrationConfig m_integration_config;
    bool m_integration_config_isSet;
    bool m_integration_config_isValid;

    QString m_object_type_name;
    bool m_object_type_name_isSet;
    bool m_object_type_name_isValid;

    QString m_role_arn;
    bool m_role_arn_isSet;
    bool m_role_arn_isValid;

    QMap<QString, QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateIntegrationWorkflow_request)

#endif // OAICreateIntegrationWorkflow_request_H
