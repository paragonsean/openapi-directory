/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventStreamSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventStreamSummary::OAIEventStreamSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventStreamSummary::OAIEventStreamSummary() {
    this->initializeModel();
}

OAIEventStreamSummary::~OAIEventStreamSummary() {}

void OAIEventStreamSummary::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_event_stream_name_isSet = false;
    m_event_stream_name_isValid = false;

    m_event_stream_arn_isSet = false;
    m_event_stream_arn_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_stopped_since_isSet = false;
    m_stopped_since_isValid = false;

    m_destination_summary_isSet = false;
    m_destination_summary_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIEventStreamSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventStreamSummary::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_event_stream_name_isValid = ::OpenAPI::fromJsonValue(m_event_stream_name, json[QString("EventStreamName")]);
    m_event_stream_name_isSet = !json[QString("EventStreamName")].isNull() && m_event_stream_name_isValid;

    m_event_stream_arn_isValid = ::OpenAPI::fromJsonValue(m_event_stream_arn, json[QString("EventStreamArn")]);
    m_event_stream_arn_isSet = !json[QString("EventStreamArn")].isNull() && m_event_stream_arn_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_stopped_since_isValid = ::OpenAPI::fromJsonValue(m_stopped_since, json[QString("StoppedSince")]);
    m_stopped_since_isSet = !json[QString("StoppedSince")].isNull() && m_stopped_since_isValid;

    m_destination_summary_isValid = ::OpenAPI::fromJsonValue(m_destination_summary, json[QString("DestinationSummary")]);
    m_destination_summary_isSet = !json[QString("DestinationSummary")].isNull() && m_destination_summary_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIEventStreamSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventStreamSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_event_stream_name_isSet) {
        obj.insert(QString("EventStreamName"), ::OpenAPI::toJsonValue(m_event_stream_name));
    }
    if (m_event_stream_arn_isSet) {
        obj.insert(QString("EventStreamArn"), ::OpenAPI::toJsonValue(m_event_stream_arn));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_stopped_since_isSet) {
        obj.insert(QString("StoppedSince"), ::OpenAPI::toJsonValue(m_stopped_since));
    }
    if (m_destination_summary.isSet()) {
        obj.insert(QString("DestinationSummary"), ::OpenAPI::toJsonValue(m_destination_summary));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIEventStreamSummary::getDomainName() const {
    return m_domain_name;
}
void OAIEventStreamSummary::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIEventStreamSummary::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIEventStreamSummary::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QString OAIEventStreamSummary::getEventStreamName() const {
    return m_event_stream_name;
}
void OAIEventStreamSummary::setEventStreamName(const QString &event_stream_name) {
    m_event_stream_name = event_stream_name;
    m_event_stream_name_isSet = true;
}

bool OAIEventStreamSummary::is_event_stream_name_Set() const{
    return m_event_stream_name_isSet;
}

bool OAIEventStreamSummary::is_event_stream_name_Valid() const{
    return m_event_stream_name_isValid;
}

QString OAIEventStreamSummary::getEventStreamArn() const {
    return m_event_stream_arn;
}
void OAIEventStreamSummary::setEventStreamArn(const QString &event_stream_arn) {
    m_event_stream_arn = event_stream_arn;
    m_event_stream_arn_isSet = true;
}

bool OAIEventStreamSummary::is_event_stream_arn_Set() const{
    return m_event_stream_arn_isSet;
}

bool OAIEventStreamSummary::is_event_stream_arn_Valid() const{
    return m_event_stream_arn_isValid;
}

OAIEventStreamState OAIEventStreamSummary::getState() const {
    return m_state;
}
void OAIEventStreamSummary::setState(const OAIEventStreamState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIEventStreamSummary::is_state_Set() const{
    return m_state_isSet;
}

bool OAIEventStreamSummary::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAIEventStreamSummary::getStoppedSince() const {
    return m_stopped_since;
}
void OAIEventStreamSummary::setStoppedSince(const QDateTime &stopped_since) {
    m_stopped_since = stopped_since;
    m_stopped_since_isSet = true;
}

bool OAIEventStreamSummary::is_stopped_since_Set() const{
    return m_stopped_since_isSet;
}

bool OAIEventStreamSummary::is_stopped_since_Valid() const{
    return m_stopped_since_isValid;
}

OAIEventStreamSummary_DestinationSummary OAIEventStreamSummary::getDestinationSummary() const {
    return m_destination_summary;
}
void OAIEventStreamSummary::setDestinationSummary(const OAIEventStreamSummary_DestinationSummary &destination_summary) {
    m_destination_summary = destination_summary;
    m_destination_summary_isSet = true;
}

bool OAIEventStreamSummary::is_destination_summary_Set() const{
    return m_destination_summary_isSet;
}

bool OAIEventStreamSummary::is_destination_summary_Valid() const{
    return m_destination_summary_isValid;
}

QMap OAIEventStreamSummary::getTags() const {
    return m_tags;
}
void OAIEventStreamSummary::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIEventStreamSummary::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIEventStreamSummary::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIEventStreamSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_stream_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_stream_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stopped_since_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventStreamSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_name_isValid && m_event_stream_name_isValid && m_event_stream_arn_isValid && m_state_isValid && true;
}

} // namespace OpenAPI
