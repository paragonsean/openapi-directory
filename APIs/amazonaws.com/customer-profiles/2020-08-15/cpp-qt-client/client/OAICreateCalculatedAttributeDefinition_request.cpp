/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateCalculatedAttributeDefinition_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateCalculatedAttributeDefinition_request::OAICreateCalculatedAttributeDefinition_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateCalculatedAttributeDefinition_request::OAICreateCalculatedAttributeDefinition_request() {
    this->initializeModel();
}

OAICreateCalculatedAttributeDefinition_request::~OAICreateCalculatedAttributeDefinition_request() {}

void OAICreateCalculatedAttributeDefinition_request::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_attribute_details_isSet = false;
    m_attribute_details_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_statistic_isSet = false;
    m_statistic_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateCalculatedAttributeDefinition_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateCalculatedAttributeDefinition_request::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_attribute_details_isValid = ::OpenAPI::fromJsonValue(m_attribute_details, json[QString("AttributeDetails")]);
    m_attribute_details_isSet = !json[QString("AttributeDetails")].isNull() && m_attribute_details_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("Conditions")]);
    m_conditions_isSet = !json[QString("Conditions")].isNull() && m_conditions_isValid;

    m_statistic_isValid = ::OpenAPI::fromJsonValue(m_statistic, json[QString("Statistic")]);
    m_statistic_isSet = !json[QString("Statistic")].isNull() && m_statistic_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateCalculatedAttributeDefinition_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateCalculatedAttributeDefinition_request::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_attribute_details.isSet()) {
        obj.insert(QString("AttributeDetails"), ::OpenAPI::toJsonValue(m_attribute_details));
    }
    if (m_conditions.isSet()) {
        obj.insert(QString("Conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_statistic_isSet) {
        obj.insert(QString("Statistic"), ::OpenAPI::toJsonValue(m_statistic));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateCalculatedAttributeDefinition_request::getDisplayName() const {
    return m_display_name;
}
void OAICreateCalculatedAttributeDefinition_request::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAICreateCalculatedAttributeDefinition_request::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAICreateCalculatedAttributeDefinition_request::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAICreateCalculatedAttributeDefinition_request::getDescription() const {
    return m_description;
}
void OAICreateCalculatedAttributeDefinition_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateCalculatedAttributeDefinition_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateCalculatedAttributeDefinition_request::is_description_Valid() const{
    return m_description_isValid;
}

OAICreateCalculatedAttributeDefinition_request_AttributeDetails OAICreateCalculatedAttributeDefinition_request::getAttributeDetails() const {
    return m_attribute_details;
}
void OAICreateCalculatedAttributeDefinition_request::setAttributeDetails(const OAICreateCalculatedAttributeDefinition_request_AttributeDetails &attribute_details) {
    m_attribute_details = attribute_details;
    m_attribute_details_isSet = true;
}

bool OAICreateCalculatedAttributeDefinition_request::is_attribute_details_Set() const{
    return m_attribute_details_isSet;
}

bool OAICreateCalculatedAttributeDefinition_request::is_attribute_details_Valid() const{
    return m_attribute_details_isValid;
}

OAIUpdateCalculatedAttributeDefinition_request_Conditions OAICreateCalculatedAttributeDefinition_request::getConditions() const {
    return m_conditions;
}
void OAICreateCalculatedAttributeDefinition_request::setConditions(const OAIUpdateCalculatedAttributeDefinition_request_Conditions &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAICreateCalculatedAttributeDefinition_request::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAICreateCalculatedAttributeDefinition_request::is_conditions_Valid() const{
    return m_conditions_isValid;
}

QString OAICreateCalculatedAttributeDefinition_request::getStatistic() const {
    return m_statistic;
}
void OAICreateCalculatedAttributeDefinition_request::setStatistic(const QString &statistic) {
    m_statistic = statistic;
    m_statistic_isSet = true;
}

bool OAICreateCalculatedAttributeDefinition_request::is_statistic_Set() const{
    return m_statistic_isSet;
}

bool OAICreateCalculatedAttributeDefinition_request::is_statistic_Valid() const{
    return m_statistic_isValid;
}

QMap<QString, QString> OAICreateCalculatedAttributeDefinition_request::getTags() const {
    return m_tags;
}
void OAICreateCalculatedAttributeDefinition_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateCalculatedAttributeDefinition_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateCalculatedAttributeDefinition_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateCalculatedAttributeDefinition_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateCalculatedAttributeDefinition_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attribute_details_isValid && m_statistic_isValid && true;
}

} // namespace OpenAPI
