/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceFlowConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceFlowConfig::OAISourceFlowConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceFlowConfig::OAISourceFlowConfig() {
    this->initializeModel();
}

OAISourceFlowConfig::~OAISourceFlowConfig() {}

void OAISourceFlowConfig::initializeModel() {

    m_connector_profile_name_isSet = false;
    m_connector_profile_name_isValid = false;

    m_connector_type_isSet = false;
    m_connector_type_isValid = false;

    m_incremental_pull_config_isSet = false;
    m_incremental_pull_config_isValid = false;

    m_source_connector_properties_isSet = false;
    m_source_connector_properties_isValid = false;
}

void OAISourceFlowConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceFlowConfig::fromJsonObject(QJsonObject json) {

    m_connector_profile_name_isValid = ::OpenAPI::fromJsonValue(m_connector_profile_name, json[QString("ConnectorProfileName")]);
    m_connector_profile_name_isSet = !json[QString("ConnectorProfileName")].isNull() && m_connector_profile_name_isValid;

    m_connector_type_isValid = ::OpenAPI::fromJsonValue(m_connector_type, json[QString("ConnectorType")]);
    m_connector_type_isSet = !json[QString("ConnectorType")].isNull() && m_connector_type_isValid;

    m_incremental_pull_config_isValid = ::OpenAPI::fromJsonValue(m_incremental_pull_config, json[QString("IncrementalPullConfig")]);
    m_incremental_pull_config_isSet = !json[QString("IncrementalPullConfig")].isNull() && m_incremental_pull_config_isValid;

    m_source_connector_properties_isValid = ::OpenAPI::fromJsonValue(m_source_connector_properties, json[QString("SourceConnectorProperties")]);
    m_source_connector_properties_isSet = !json[QString("SourceConnectorProperties")].isNull() && m_source_connector_properties_isValid;
}

QString OAISourceFlowConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceFlowConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_connector_profile_name_isSet) {
        obj.insert(QString("ConnectorProfileName"), ::OpenAPI::toJsonValue(m_connector_profile_name));
    }
    if (m_connector_type.isSet()) {
        obj.insert(QString("ConnectorType"), ::OpenAPI::toJsonValue(m_connector_type));
    }
    if (m_incremental_pull_config.isSet()) {
        obj.insert(QString("IncrementalPullConfig"), ::OpenAPI::toJsonValue(m_incremental_pull_config));
    }
    if (m_source_connector_properties.isSet()) {
        obj.insert(QString("SourceConnectorProperties"), ::OpenAPI::toJsonValue(m_source_connector_properties));
    }
    return obj;
}

QString OAISourceFlowConfig::getConnectorProfileName() const {
    return m_connector_profile_name;
}
void OAISourceFlowConfig::setConnectorProfileName(const QString &connector_profile_name) {
    m_connector_profile_name = connector_profile_name;
    m_connector_profile_name_isSet = true;
}

bool OAISourceFlowConfig::is_connector_profile_name_Set() const{
    return m_connector_profile_name_isSet;
}

bool OAISourceFlowConfig::is_connector_profile_name_Valid() const{
    return m_connector_profile_name_isValid;
}

OAISourceConnectorType OAISourceFlowConfig::getConnectorType() const {
    return m_connector_type;
}
void OAISourceFlowConfig::setConnectorType(const OAISourceConnectorType &connector_type) {
    m_connector_type = connector_type;
    m_connector_type_isSet = true;
}

bool OAISourceFlowConfig::is_connector_type_Set() const{
    return m_connector_type_isSet;
}

bool OAISourceFlowConfig::is_connector_type_Valid() const{
    return m_connector_type_isValid;
}

OAISourceFlowConfig_IncrementalPullConfig OAISourceFlowConfig::getIncrementalPullConfig() const {
    return m_incremental_pull_config;
}
void OAISourceFlowConfig::setIncrementalPullConfig(const OAISourceFlowConfig_IncrementalPullConfig &incremental_pull_config) {
    m_incremental_pull_config = incremental_pull_config;
    m_incremental_pull_config_isSet = true;
}

bool OAISourceFlowConfig::is_incremental_pull_config_Set() const{
    return m_incremental_pull_config_isSet;
}

bool OAISourceFlowConfig::is_incremental_pull_config_Valid() const{
    return m_incremental_pull_config_isValid;
}

OAISourceFlowConfig_SourceConnectorProperties OAISourceFlowConfig::getSourceConnectorProperties() const {
    return m_source_connector_properties;
}
void OAISourceFlowConfig::setSourceConnectorProperties(const OAISourceFlowConfig_SourceConnectorProperties &source_connector_properties) {
    m_source_connector_properties = source_connector_properties;
    m_source_connector_properties_isSet = true;
}

bool OAISourceFlowConfig::is_source_connector_properties_Set() const{
    return m_source_connector_properties_isSet;
}

bool OAISourceFlowConfig::is_source_connector_properties_Valid() const{
    return m_source_connector_properties_isValid;
}

bool OAISourceFlowConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connector_profile_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_incremental_pull_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_connector_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceFlowConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_connector_type_isValid && m_source_connector_properties_isValid && true;
}

} // namespace OpenAPI
