/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduledTriggerProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduledTriggerProperties::OAIScheduledTriggerProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduledTriggerProperties::OAIScheduledTriggerProperties() {
    this->initializeModel();
}

OAIScheduledTriggerProperties::~OAIScheduledTriggerProperties() {}

void OAIScheduledTriggerProperties::initializeModel() {

    m_schedule_expression_isSet = false;
    m_schedule_expression_isValid = false;

    m_data_pull_mode_isSet = false;
    m_data_pull_mode_isValid = false;

    m_schedule_start_time_isSet = false;
    m_schedule_start_time_isValid = false;

    m_schedule_end_time_isSet = false;
    m_schedule_end_time_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_schedule_offset_isSet = false;
    m_schedule_offset_isValid = false;

    m_first_execution_from_isSet = false;
    m_first_execution_from_isValid = false;
}

void OAIScheduledTriggerProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduledTriggerProperties::fromJsonObject(QJsonObject json) {

    m_schedule_expression_isValid = ::OpenAPI::fromJsonValue(m_schedule_expression, json[QString("ScheduleExpression")]);
    m_schedule_expression_isSet = !json[QString("ScheduleExpression")].isNull() && m_schedule_expression_isValid;

    m_data_pull_mode_isValid = ::OpenAPI::fromJsonValue(m_data_pull_mode, json[QString("DataPullMode")]);
    m_data_pull_mode_isSet = !json[QString("DataPullMode")].isNull() && m_data_pull_mode_isValid;

    m_schedule_start_time_isValid = ::OpenAPI::fromJsonValue(m_schedule_start_time, json[QString("ScheduleStartTime")]);
    m_schedule_start_time_isSet = !json[QString("ScheduleStartTime")].isNull() && m_schedule_start_time_isValid;

    m_schedule_end_time_isValid = ::OpenAPI::fromJsonValue(m_schedule_end_time, json[QString("ScheduleEndTime")]);
    m_schedule_end_time_isSet = !json[QString("ScheduleEndTime")].isNull() && m_schedule_end_time_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("Timezone")]);
    m_timezone_isSet = !json[QString("Timezone")].isNull() && m_timezone_isValid;

    m_schedule_offset_isValid = ::OpenAPI::fromJsonValue(m_schedule_offset, json[QString("ScheduleOffset")]);
    m_schedule_offset_isSet = !json[QString("ScheduleOffset")].isNull() && m_schedule_offset_isValid;

    m_first_execution_from_isValid = ::OpenAPI::fromJsonValue(m_first_execution_from, json[QString("FirstExecutionFrom")]);
    m_first_execution_from_isSet = !json[QString("FirstExecutionFrom")].isNull() && m_first_execution_from_isValid;
}

QString OAIScheduledTriggerProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduledTriggerProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_schedule_expression_isSet) {
        obj.insert(QString("ScheduleExpression"), ::OpenAPI::toJsonValue(m_schedule_expression));
    }
    if (m_data_pull_mode.isSet()) {
        obj.insert(QString("DataPullMode"), ::OpenAPI::toJsonValue(m_data_pull_mode));
    }
    if (m_schedule_start_time_isSet) {
        obj.insert(QString("ScheduleStartTime"), ::OpenAPI::toJsonValue(m_schedule_start_time));
    }
    if (m_schedule_end_time_isSet) {
        obj.insert(QString("ScheduleEndTime"), ::OpenAPI::toJsonValue(m_schedule_end_time));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("Timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_schedule_offset_isSet) {
        obj.insert(QString("ScheduleOffset"), ::OpenAPI::toJsonValue(m_schedule_offset));
    }
    if (m_first_execution_from_isSet) {
        obj.insert(QString("FirstExecutionFrom"), ::OpenAPI::toJsonValue(m_first_execution_from));
    }
    return obj;
}

QString OAIScheduledTriggerProperties::getScheduleExpression() const {
    return m_schedule_expression;
}
void OAIScheduledTriggerProperties::setScheduleExpression(const QString &schedule_expression) {
    m_schedule_expression = schedule_expression;
    m_schedule_expression_isSet = true;
}

bool OAIScheduledTriggerProperties::is_schedule_expression_Set() const{
    return m_schedule_expression_isSet;
}

bool OAIScheduledTriggerProperties::is_schedule_expression_Valid() const{
    return m_schedule_expression_isValid;
}

OAIDataPullMode OAIScheduledTriggerProperties::getDataPullMode() const {
    return m_data_pull_mode;
}
void OAIScheduledTriggerProperties::setDataPullMode(const OAIDataPullMode &data_pull_mode) {
    m_data_pull_mode = data_pull_mode;
    m_data_pull_mode_isSet = true;
}

bool OAIScheduledTriggerProperties::is_data_pull_mode_Set() const{
    return m_data_pull_mode_isSet;
}

bool OAIScheduledTriggerProperties::is_data_pull_mode_Valid() const{
    return m_data_pull_mode_isValid;
}

QDateTime OAIScheduledTriggerProperties::getScheduleStartTime() const {
    return m_schedule_start_time;
}
void OAIScheduledTriggerProperties::setScheduleStartTime(const QDateTime &schedule_start_time) {
    m_schedule_start_time = schedule_start_time;
    m_schedule_start_time_isSet = true;
}

bool OAIScheduledTriggerProperties::is_schedule_start_time_Set() const{
    return m_schedule_start_time_isSet;
}

bool OAIScheduledTriggerProperties::is_schedule_start_time_Valid() const{
    return m_schedule_start_time_isValid;
}

QDateTime OAIScheduledTriggerProperties::getScheduleEndTime() const {
    return m_schedule_end_time;
}
void OAIScheduledTriggerProperties::setScheduleEndTime(const QDateTime &schedule_end_time) {
    m_schedule_end_time = schedule_end_time;
    m_schedule_end_time_isSet = true;
}

bool OAIScheduledTriggerProperties::is_schedule_end_time_Set() const{
    return m_schedule_end_time_isSet;
}

bool OAIScheduledTriggerProperties::is_schedule_end_time_Valid() const{
    return m_schedule_end_time_isValid;
}

QString OAIScheduledTriggerProperties::getTimezone() const {
    return m_timezone;
}
void OAIScheduledTriggerProperties::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIScheduledTriggerProperties::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIScheduledTriggerProperties::is_timezone_Valid() const{
    return m_timezone_isValid;
}

qint32 OAIScheduledTriggerProperties::getScheduleOffset() const {
    return m_schedule_offset;
}
void OAIScheduledTriggerProperties::setScheduleOffset(const qint32 &schedule_offset) {
    m_schedule_offset = schedule_offset;
    m_schedule_offset_isSet = true;
}

bool OAIScheduledTriggerProperties::is_schedule_offset_Set() const{
    return m_schedule_offset_isSet;
}

bool OAIScheduledTriggerProperties::is_schedule_offset_Valid() const{
    return m_schedule_offset_isValid;
}

QDateTime OAIScheduledTriggerProperties::getFirstExecutionFrom() const {
    return m_first_execution_from;
}
void OAIScheduledTriggerProperties::setFirstExecutionFrom(const QDateTime &first_execution_from) {
    m_first_execution_from = first_execution_from;
    m_first_execution_from_isSet = true;
}

bool OAIScheduledTriggerProperties::is_first_execution_from_Set() const{
    return m_first_execution_from_isSet;
}

bool OAIScheduledTriggerProperties::is_first_execution_from_Valid() const{
    return m_first_execution_from_isValid;
}

bool OAIScheduledTriggerProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_schedule_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_pull_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_execution_from_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduledTriggerProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_schedule_expression_isValid && true;
}

} // namespace OpenAPI
