/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAddress::OAIUpdateAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAddress::OAIUpdateAddress() {
    this->initializeModel();
}

OAIUpdateAddress::~OAIUpdateAddress() {}

void OAIUpdateAddress::initializeModel() {

    m_address1_isSet = false;
    m_address1_isValid = false;

    m_address2_isSet = false;
    m_address2_isValid = false;

    m_address3_isSet = false;
    m_address3_isValid = false;

    m_address4_isSet = false;
    m_address4_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_county_isSet = false;
    m_county_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_province_isSet = false;
    m_province_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;
}

void OAIUpdateAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAddress::fromJsonObject(QJsonObject json) {

    m_address1_isValid = ::OpenAPI::fromJsonValue(m_address1, json[QString("Address1")]);
    m_address1_isSet = !json[QString("Address1")].isNull() && m_address1_isValid;

    m_address2_isValid = ::OpenAPI::fromJsonValue(m_address2, json[QString("Address2")]);
    m_address2_isSet = !json[QString("Address2")].isNull() && m_address2_isValid;

    m_address3_isValid = ::OpenAPI::fromJsonValue(m_address3, json[QString("Address3")]);
    m_address3_isSet = !json[QString("Address3")].isNull() && m_address3_isValid;

    m_address4_isValid = ::OpenAPI::fromJsonValue(m_address4, json[QString("Address4")]);
    m_address4_isSet = !json[QString("Address4")].isNull() && m_address4_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("City")]);
    m_city_isSet = !json[QString("City")].isNull() && m_city_isValid;

    m_county_isValid = ::OpenAPI::fromJsonValue(m_county, json[QString("County")]);
    m_county_isSet = !json[QString("County")].isNull() && m_county_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_province_isValid = ::OpenAPI::fromJsonValue(m_province, json[QString("Province")]);
    m_province_isSet = !json[QString("Province")].isNull() && m_province_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("Country")]);
    m_country_isSet = !json[QString("Country")].isNull() && m_country_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("PostalCode")]);
    m_postal_code_isSet = !json[QString("PostalCode")].isNull() && m_postal_code_isValid;
}

QString OAIUpdateAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_address1_isSet) {
        obj.insert(QString("Address1"), ::OpenAPI::toJsonValue(m_address1));
    }
    if (m_address2_isSet) {
        obj.insert(QString("Address2"), ::OpenAPI::toJsonValue(m_address2));
    }
    if (m_address3_isSet) {
        obj.insert(QString("Address3"), ::OpenAPI::toJsonValue(m_address3));
    }
    if (m_address4_isSet) {
        obj.insert(QString("Address4"), ::OpenAPI::toJsonValue(m_address4));
    }
    if (m_city_isSet) {
        obj.insert(QString("City"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_county_isSet) {
        obj.insert(QString("County"), ::OpenAPI::toJsonValue(m_county));
    }
    if (m_state_isSet) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_province_isSet) {
        obj.insert(QString("Province"), ::OpenAPI::toJsonValue(m_province));
    }
    if (m_country_isSet) {
        obj.insert(QString("Country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("PostalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    return obj;
}

QString OAIUpdateAddress::getAddress1() const {
    return m_address1;
}
void OAIUpdateAddress::setAddress1(const QString &address1) {
    m_address1 = address1;
    m_address1_isSet = true;
}

bool OAIUpdateAddress::is_address1_Set() const{
    return m_address1_isSet;
}

bool OAIUpdateAddress::is_address1_Valid() const{
    return m_address1_isValid;
}

QString OAIUpdateAddress::getAddress2() const {
    return m_address2;
}
void OAIUpdateAddress::setAddress2(const QString &address2) {
    m_address2 = address2;
    m_address2_isSet = true;
}

bool OAIUpdateAddress::is_address2_Set() const{
    return m_address2_isSet;
}

bool OAIUpdateAddress::is_address2_Valid() const{
    return m_address2_isValid;
}

QString OAIUpdateAddress::getAddress3() const {
    return m_address3;
}
void OAIUpdateAddress::setAddress3(const QString &address3) {
    m_address3 = address3;
    m_address3_isSet = true;
}

bool OAIUpdateAddress::is_address3_Set() const{
    return m_address3_isSet;
}

bool OAIUpdateAddress::is_address3_Valid() const{
    return m_address3_isValid;
}

QString OAIUpdateAddress::getAddress4() const {
    return m_address4;
}
void OAIUpdateAddress::setAddress4(const QString &address4) {
    m_address4 = address4;
    m_address4_isSet = true;
}

bool OAIUpdateAddress::is_address4_Set() const{
    return m_address4_isSet;
}

bool OAIUpdateAddress::is_address4_Valid() const{
    return m_address4_isValid;
}

QString OAIUpdateAddress::getCity() const {
    return m_city;
}
void OAIUpdateAddress::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIUpdateAddress::is_city_Set() const{
    return m_city_isSet;
}

bool OAIUpdateAddress::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIUpdateAddress::getCounty() const {
    return m_county;
}
void OAIUpdateAddress::setCounty(const QString &county) {
    m_county = county;
    m_county_isSet = true;
}

bool OAIUpdateAddress::is_county_Set() const{
    return m_county_isSet;
}

bool OAIUpdateAddress::is_county_Valid() const{
    return m_county_isValid;
}

QString OAIUpdateAddress::getState() const {
    return m_state;
}
void OAIUpdateAddress::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIUpdateAddress::is_state_Set() const{
    return m_state_isSet;
}

bool OAIUpdateAddress::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIUpdateAddress::getProvince() const {
    return m_province;
}
void OAIUpdateAddress::setProvince(const QString &province) {
    m_province = province;
    m_province_isSet = true;
}

bool OAIUpdateAddress::is_province_Set() const{
    return m_province_isSet;
}

bool OAIUpdateAddress::is_province_Valid() const{
    return m_province_isValid;
}

QString OAIUpdateAddress::getCountry() const {
    return m_country;
}
void OAIUpdateAddress::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIUpdateAddress::is_country_Set() const{
    return m_country_isSet;
}

bool OAIUpdateAddress::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIUpdateAddress::getPostalCode() const {
    return m_postal_code;
}
void OAIUpdateAddress::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIUpdateAddress::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIUpdateAddress::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

bool OAIUpdateAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_county_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_province_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
