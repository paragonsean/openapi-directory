/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateIntegrationWorkflowRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateIntegrationWorkflowRequest::OAICreateIntegrationWorkflowRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateIntegrationWorkflowRequest::OAICreateIntegrationWorkflowRequest() {
    this->initializeModel();
}

OAICreateIntegrationWorkflowRequest::~OAICreateIntegrationWorkflowRequest() {}

void OAICreateIntegrationWorkflowRequest::initializeModel() {

    m_workflow_type_isSet = false;
    m_workflow_type_isValid = false;

    m_integration_config_isSet = false;
    m_integration_config_isValid = false;

    m_object_type_name_isSet = false;
    m_object_type_name_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateIntegrationWorkflowRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateIntegrationWorkflowRequest::fromJsonObject(QJsonObject json) {

    m_workflow_type_isValid = ::OpenAPI::fromJsonValue(m_workflow_type, json[QString("WorkflowType")]);
    m_workflow_type_isSet = !json[QString("WorkflowType")].isNull() && m_workflow_type_isValid;

    m_integration_config_isValid = ::OpenAPI::fromJsonValue(m_integration_config, json[QString("IntegrationConfig")]);
    m_integration_config_isSet = !json[QString("IntegrationConfig")].isNull() && m_integration_config_isValid;

    m_object_type_name_isValid = ::OpenAPI::fromJsonValue(m_object_type_name, json[QString("ObjectTypeName")]);
    m_object_type_name_isSet = !json[QString("ObjectTypeName")].isNull() && m_object_type_name_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateIntegrationWorkflowRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateIntegrationWorkflowRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_workflow_type.isSet()) {
        obj.insert(QString("WorkflowType"), ::OpenAPI::toJsonValue(m_workflow_type));
    }
    if (m_integration_config.isSet()) {
        obj.insert(QString("IntegrationConfig"), ::OpenAPI::toJsonValue(m_integration_config));
    }
    if (m_object_type_name_isSet) {
        obj.insert(QString("ObjectTypeName"), ::OpenAPI::toJsonValue(m_object_type_name));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAIWorkflowType OAICreateIntegrationWorkflowRequest::getWorkflowType() const {
    return m_workflow_type;
}
void OAICreateIntegrationWorkflowRequest::setWorkflowType(const OAIWorkflowType &workflow_type) {
    m_workflow_type = workflow_type;
    m_workflow_type_isSet = true;
}

bool OAICreateIntegrationWorkflowRequest::is_workflow_type_Set() const{
    return m_workflow_type_isSet;
}

bool OAICreateIntegrationWorkflowRequest::is_workflow_type_Valid() const{
    return m_workflow_type_isValid;
}

OAICreateIntegrationWorkflowRequest_IntegrationConfig OAICreateIntegrationWorkflowRequest::getIntegrationConfig() const {
    return m_integration_config;
}
void OAICreateIntegrationWorkflowRequest::setIntegrationConfig(const OAICreateIntegrationWorkflowRequest_IntegrationConfig &integration_config) {
    m_integration_config = integration_config;
    m_integration_config_isSet = true;
}

bool OAICreateIntegrationWorkflowRequest::is_integration_config_Set() const{
    return m_integration_config_isSet;
}

bool OAICreateIntegrationWorkflowRequest::is_integration_config_Valid() const{
    return m_integration_config_isValid;
}

QString OAICreateIntegrationWorkflowRequest::getObjectTypeName() const {
    return m_object_type_name;
}
void OAICreateIntegrationWorkflowRequest::setObjectTypeName(const QString &object_type_name) {
    m_object_type_name = object_type_name;
    m_object_type_name_isSet = true;
}

bool OAICreateIntegrationWorkflowRequest::is_object_type_name_Set() const{
    return m_object_type_name_isSet;
}

bool OAICreateIntegrationWorkflowRequest::is_object_type_name_Valid() const{
    return m_object_type_name_isValid;
}

QString OAICreateIntegrationWorkflowRequest::getRoleArn() const {
    return m_role_arn;
}
void OAICreateIntegrationWorkflowRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAICreateIntegrationWorkflowRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAICreateIntegrationWorkflowRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QMap OAICreateIntegrationWorkflowRequest::getTags() const {
    return m_tags;
}
void OAICreateIntegrationWorkflowRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateIntegrationWorkflowRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateIntegrationWorkflowRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateIntegrationWorkflowRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_workflow_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateIntegrationWorkflowRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_workflow_type_isValid && m_integration_config_isValid && m_object_type_name_isValid && m_role_arn_isValid && true;
}

} // namespace OpenAPI
