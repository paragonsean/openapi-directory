/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjectFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjectFilter::OAIObjectFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjectFilter::OAIObjectFilter() {
    this->initializeModel();
}

OAIObjectFilter::~OAIObjectFilter() {}

void OAIObjectFilter::initializeModel() {

    m_key_name_isSet = false;
    m_key_name_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIObjectFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjectFilter::fromJsonObject(QJsonObject json) {

    m_key_name_isValid = ::OpenAPI::fromJsonValue(m_key_name, json[QString("KeyName")]);
    m_key_name_isSet = !json[QString("KeyName")].isNull() && m_key_name_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("Values")]);
    m_values_isSet = !json[QString("Values")].isNull() && m_values_isValid;
}

QString OAIObjectFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjectFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_key_name_isSet) {
        obj.insert(QString("KeyName"), ::OpenAPI::toJsonValue(m_key_name));
    }
    if (m_values.isSet()) {
        obj.insert(QString("Values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QString OAIObjectFilter::getKeyName() const {
    return m_key_name;
}
void OAIObjectFilter::setKeyName(const QString &key_name) {
    m_key_name = key_name;
    m_key_name_isSet = true;
}

bool OAIObjectFilter::is_key_name_Set() const{
    return m_key_name_isSet;
}

bool OAIObjectFilter::is_key_name_Valid() const{
    return m_key_name_isValid;
}

QList OAIObjectFilter::getValues() const {
    return m_values;
}
void OAIObjectFilter::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIObjectFilter::is_values_Set() const{
    return m_values_isSet;
}

bool OAIObjectFilter::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIObjectFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjectFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_name_isValid && m_values_isValid && true;
}

} // namespace OpenAPI
