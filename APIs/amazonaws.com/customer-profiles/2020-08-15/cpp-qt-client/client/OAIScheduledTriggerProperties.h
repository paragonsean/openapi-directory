/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIScheduledTriggerProperties.h
 *
 * Specifies the configuration details of a scheduled-trigger flow that you define. Currently, these settings only apply to the scheduled-trigger type.
 */

#ifndef OAIScheduledTriggerProperties_H
#define OAIScheduledTriggerProperties_H

#include <QJsonObject>

#include "OAIDataPullMode.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIScheduledTriggerProperties : public OAIObject {
public:
    OAIScheduledTriggerProperties();
    OAIScheduledTriggerProperties(QString json);
    ~OAIScheduledTriggerProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getScheduleExpression() const;
    void setScheduleExpression(const QString &schedule_expression);
    bool is_schedule_expression_Set() const;
    bool is_schedule_expression_Valid() const;

    OAIDataPullMode getDataPullMode() const;
    void setDataPullMode(const OAIDataPullMode &data_pull_mode);
    bool is_data_pull_mode_Set() const;
    bool is_data_pull_mode_Valid() const;

    QDateTime getScheduleStartTime() const;
    void setScheduleStartTime(const QDateTime &schedule_start_time);
    bool is_schedule_start_time_Set() const;
    bool is_schedule_start_time_Valid() const;

    QDateTime getScheduleEndTime() const;
    void setScheduleEndTime(const QDateTime &schedule_end_time);
    bool is_schedule_end_time_Set() const;
    bool is_schedule_end_time_Valid() const;

    QString getTimezone() const;
    void setTimezone(const QString &timezone);
    bool is_timezone_Set() const;
    bool is_timezone_Valid() const;

    qint32 getScheduleOffset() const;
    void setScheduleOffset(const qint32 &schedule_offset);
    bool is_schedule_offset_Set() const;
    bool is_schedule_offset_Valid() const;

    QDateTime getFirstExecutionFrom() const;
    void setFirstExecutionFrom(const QDateTime &first_execution_from);
    bool is_first_execution_from_Set() const;
    bool is_first_execution_from_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_schedule_expression;
    bool m_schedule_expression_isSet;
    bool m_schedule_expression_isValid;

    OAIDataPullMode m_data_pull_mode;
    bool m_data_pull_mode_isSet;
    bool m_data_pull_mode_isValid;

    QDateTime m_schedule_start_time;
    bool m_schedule_start_time_isSet;
    bool m_schedule_start_time_isValid;

    QDateTime m_schedule_end_time;
    bool m_schedule_end_time_isSet;
    bool m_schedule_end_time_isValid;

    QString m_timezone;
    bool m_timezone_isSet;
    bool m_timezone_isValid;

    qint32 m_schedule_offset;
    bool m_schedule_offset_isSet;
    bool m_schedule_offset_isValid;

    QDateTime m_first_execution_from;
    bool m_first_execution_from_isSet;
    bool m_first_execution_from_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIScheduledTriggerProperties)

#endif // OAIScheduledTriggerProperties_H
