/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportingLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportingLocation::OAIExportingLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportingLocation::OAIExportingLocation() {
    this->initializeModel();
}

OAIExportingLocation::~OAIExportingLocation() {}

void OAIExportingLocation::initializeModel() {

    m_s3_exporting_isSet = false;
    m_s3_exporting_isValid = false;
}

void OAIExportingLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportingLocation::fromJsonObject(QJsonObject json) {

    m_s3_exporting_isValid = ::OpenAPI::fromJsonValue(m_s3_exporting, json[QString("S3Exporting")]);
    m_s3_exporting_isSet = !json[QString("S3Exporting")].isNull() && m_s3_exporting_isValid;
}

QString OAIExportingLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportingLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_exporting.isSet()) {
        obj.insert(QString("S3Exporting"), ::OpenAPI::toJsonValue(m_s3_exporting));
    }
    return obj;
}

OAIExportingLocation_S3Exporting OAIExportingLocation::getS3Exporting() const {
    return m_s3_exporting;
}
void OAIExportingLocation::setS3Exporting(const OAIExportingLocation_S3Exporting &s3_exporting) {
    m_s3_exporting = s3_exporting;
    m_s3_exporting_isSet = true;
}

bool OAIExportingLocation::is_s3_exporting_Set() const{
    return m_s3_exporting_isSet;
}

bool OAIExportingLocation::is_s3_exporting_Valid() const{
    return m_s3_exporting_isValid;
}

bool OAIExportingLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_exporting.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportingLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
