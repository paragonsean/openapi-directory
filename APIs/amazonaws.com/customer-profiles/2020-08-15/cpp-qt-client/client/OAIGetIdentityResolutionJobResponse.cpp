/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetIdentityResolutionJobResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetIdentityResolutionJobResponse::OAIGetIdentityResolutionJobResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetIdentityResolutionJobResponse::OAIGetIdentityResolutionJobResponse() {
    this->initializeModel();
}

OAIGetIdentityResolutionJobResponse::~OAIGetIdentityResolutionJobResponse() {}

void OAIGetIdentityResolutionJobResponse::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_job_start_time_isSet = false;
    m_job_start_time_isValid = false;

    m_job_end_time_isSet = false;
    m_job_end_time_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_job_expiration_time_isSet = false;
    m_job_expiration_time_isValid = false;

    m_auto_merging_isSet = false;
    m_auto_merging_isValid = false;

    m_exporting_location_isSet = false;
    m_exporting_location_isValid = false;

    m_job_stats_isSet = false;
    m_job_stats_isValid = false;
}

void OAIGetIdentityResolutionJobResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetIdentityResolutionJobResponse::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("JobId")]);
    m_job_id_isSet = !json[QString("JobId")].isNull() && m_job_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_job_start_time_isValid = ::OpenAPI::fromJsonValue(m_job_start_time, json[QString("JobStartTime")]);
    m_job_start_time_isSet = !json[QString("JobStartTime")].isNull() && m_job_start_time_isValid;

    m_job_end_time_isValid = ::OpenAPI::fromJsonValue(m_job_end_time, json[QString("JobEndTime")]);
    m_job_end_time_isSet = !json[QString("JobEndTime")].isNull() && m_job_end_time_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("LastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("LastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_job_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_job_expiration_time, json[QString("JobExpirationTime")]);
    m_job_expiration_time_isSet = !json[QString("JobExpirationTime")].isNull() && m_job_expiration_time_isValid;

    m_auto_merging_isValid = ::OpenAPI::fromJsonValue(m_auto_merging, json[QString("AutoMerging")]);
    m_auto_merging_isSet = !json[QString("AutoMerging")].isNull() && m_auto_merging_isValid;

    m_exporting_location_isValid = ::OpenAPI::fromJsonValue(m_exporting_location, json[QString("ExportingLocation")]);
    m_exporting_location_isSet = !json[QString("ExportingLocation")].isNull() && m_exporting_location_isValid;

    m_job_stats_isValid = ::OpenAPI::fromJsonValue(m_job_stats, json[QString("JobStats")]);
    m_job_stats_isSet = !json[QString("JobStats")].isNull() && m_job_stats_isValid;
}

QString OAIGetIdentityResolutionJobResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetIdentityResolutionJobResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("JobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_job_start_time_isSet) {
        obj.insert(QString("JobStartTime"), ::OpenAPI::toJsonValue(m_job_start_time));
    }
    if (m_job_end_time_isSet) {
        obj.insert(QString("JobEndTime"), ::OpenAPI::toJsonValue(m_job_end_time));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("LastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_job_expiration_time_isSet) {
        obj.insert(QString("JobExpirationTime"), ::OpenAPI::toJsonValue(m_job_expiration_time));
    }
    if (m_auto_merging.isSet()) {
        obj.insert(QString("AutoMerging"), ::OpenAPI::toJsonValue(m_auto_merging));
    }
    if (m_exporting_location.isSet()) {
        obj.insert(QString("ExportingLocation"), ::OpenAPI::toJsonValue(m_exporting_location));
    }
    if (m_job_stats.isSet()) {
        obj.insert(QString("JobStats"), ::OpenAPI::toJsonValue(m_job_stats));
    }
    return obj;
}

QString OAIGetIdentityResolutionJobResponse::getDomainName() const {
    return m_domain_name;
}
void OAIGetIdentityResolutionJobResponse::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIGetIdentityResolutionJobResponse::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIGetIdentityResolutionJobResponse::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QString OAIGetIdentityResolutionJobResponse::getJobId() const {
    return m_job_id;
}
void OAIGetIdentityResolutionJobResponse::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIGetIdentityResolutionJobResponse::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIGetIdentityResolutionJobResponse::is_job_id_Valid() const{
    return m_job_id_isValid;
}

OAIIdentityResolutionJobStatus OAIGetIdentityResolutionJobResponse::getStatus() const {
    return m_status;
}
void OAIGetIdentityResolutionJobResponse::setStatus(const OAIIdentityResolutionJobStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetIdentityResolutionJobResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetIdentityResolutionJobResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetIdentityResolutionJobResponse::getMessage() const {
    return m_message;
}
void OAIGetIdentityResolutionJobResponse::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIGetIdentityResolutionJobResponse::is_message_Set() const{
    return m_message_isSet;
}

bool OAIGetIdentityResolutionJobResponse::is_message_Valid() const{
    return m_message_isValid;
}

QDateTime OAIGetIdentityResolutionJobResponse::getJobStartTime() const {
    return m_job_start_time;
}
void OAIGetIdentityResolutionJobResponse::setJobStartTime(const QDateTime &job_start_time) {
    m_job_start_time = job_start_time;
    m_job_start_time_isSet = true;
}

bool OAIGetIdentityResolutionJobResponse::is_job_start_time_Set() const{
    return m_job_start_time_isSet;
}

bool OAIGetIdentityResolutionJobResponse::is_job_start_time_Valid() const{
    return m_job_start_time_isValid;
}

QDateTime OAIGetIdentityResolutionJobResponse::getJobEndTime() const {
    return m_job_end_time;
}
void OAIGetIdentityResolutionJobResponse::setJobEndTime(const QDateTime &job_end_time) {
    m_job_end_time = job_end_time;
    m_job_end_time_isSet = true;
}

bool OAIGetIdentityResolutionJobResponse::is_job_end_time_Set() const{
    return m_job_end_time_isSet;
}

bool OAIGetIdentityResolutionJobResponse::is_job_end_time_Valid() const{
    return m_job_end_time_isValid;
}

QDateTime OAIGetIdentityResolutionJobResponse::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIGetIdentityResolutionJobResponse::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIGetIdentityResolutionJobResponse::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIGetIdentityResolutionJobResponse::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

QDateTime OAIGetIdentityResolutionJobResponse::getJobExpirationTime() const {
    return m_job_expiration_time;
}
void OAIGetIdentityResolutionJobResponse::setJobExpirationTime(const QDateTime &job_expiration_time) {
    m_job_expiration_time = job_expiration_time;
    m_job_expiration_time_isSet = true;
}

bool OAIGetIdentityResolutionJobResponse::is_job_expiration_time_Set() const{
    return m_job_expiration_time_isSet;
}

bool OAIGetIdentityResolutionJobResponse::is_job_expiration_time_Valid() const{
    return m_job_expiration_time_isValid;
}

OAIGetIdentityResolutionJobResponse_AutoMerging OAIGetIdentityResolutionJobResponse::getAutoMerging() const {
    return m_auto_merging;
}
void OAIGetIdentityResolutionJobResponse::setAutoMerging(const OAIGetIdentityResolutionJobResponse_AutoMerging &auto_merging) {
    m_auto_merging = auto_merging;
    m_auto_merging_isSet = true;
}

bool OAIGetIdentityResolutionJobResponse::is_auto_merging_Set() const{
    return m_auto_merging_isSet;
}

bool OAIGetIdentityResolutionJobResponse::is_auto_merging_Valid() const{
    return m_auto_merging_isValid;
}

OAIGetIdentityResolutionJobResponse_ExportingLocation OAIGetIdentityResolutionJobResponse::getExportingLocation() const {
    return m_exporting_location;
}
void OAIGetIdentityResolutionJobResponse::setExportingLocation(const OAIGetIdentityResolutionJobResponse_ExportingLocation &exporting_location) {
    m_exporting_location = exporting_location;
    m_exporting_location_isSet = true;
}

bool OAIGetIdentityResolutionJobResponse::is_exporting_location_Set() const{
    return m_exporting_location_isSet;
}

bool OAIGetIdentityResolutionJobResponse::is_exporting_location_Valid() const{
    return m_exporting_location_isValid;
}

OAIGetIdentityResolutionJobResponse_JobStats OAIGetIdentityResolutionJobResponse::getJobStats() const {
    return m_job_stats;
}
void OAIGetIdentityResolutionJobResponse::setJobStats(const OAIGetIdentityResolutionJobResponse_JobStats &job_stats) {
    m_job_stats = job_stats;
    m_job_stats_isSet = true;
}

bool OAIGetIdentityResolutionJobResponse::is_job_stats_Set() const{
    return m_job_stats_isSet;
}

bool OAIGetIdentityResolutionJobResponse::is_job_stats_Valid() const{
    return m_job_stats_isValid;
}

bool OAIGetIdentityResolutionJobResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_merging.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exporting_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetIdentityResolutionJobResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
