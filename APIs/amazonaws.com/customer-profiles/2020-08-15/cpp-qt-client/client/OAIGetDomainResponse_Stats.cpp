/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDomainResponse_Stats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDomainResponse_Stats::OAIGetDomainResponse_Stats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDomainResponse_Stats::OAIGetDomainResponse_Stats() {
    this->initializeModel();
}

OAIGetDomainResponse_Stats::~OAIGetDomainResponse_Stats() {}

void OAIGetDomainResponse_Stats::initializeModel() {

    m_profile_count_isSet = false;
    m_profile_count_isValid = false;

    m_metering_profile_count_isSet = false;
    m_metering_profile_count_isValid = false;

    m_object_count_isSet = false;
    m_object_count_isValid = false;

    m_total_size_isSet = false;
    m_total_size_isValid = false;
}

void OAIGetDomainResponse_Stats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDomainResponse_Stats::fromJsonObject(QJsonObject json) {

    m_profile_count_isValid = ::OpenAPI::fromJsonValue(m_profile_count, json[QString("ProfileCount")]);
    m_profile_count_isSet = !json[QString("ProfileCount")].isNull() && m_profile_count_isValid;

    m_metering_profile_count_isValid = ::OpenAPI::fromJsonValue(m_metering_profile_count, json[QString("MeteringProfileCount")]);
    m_metering_profile_count_isSet = !json[QString("MeteringProfileCount")].isNull() && m_metering_profile_count_isValid;

    m_object_count_isValid = ::OpenAPI::fromJsonValue(m_object_count, json[QString("ObjectCount")]);
    m_object_count_isSet = !json[QString("ObjectCount")].isNull() && m_object_count_isValid;

    m_total_size_isValid = ::OpenAPI::fromJsonValue(m_total_size, json[QString("TotalSize")]);
    m_total_size_isSet = !json[QString("TotalSize")].isNull() && m_total_size_isValid;
}

QString OAIGetDomainResponse_Stats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDomainResponse_Stats::asJsonObject() const {
    QJsonObject obj;
    if (m_profile_count_isSet) {
        obj.insert(QString("ProfileCount"), ::OpenAPI::toJsonValue(m_profile_count));
    }
    if (m_metering_profile_count_isSet) {
        obj.insert(QString("MeteringProfileCount"), ::OpenAPI::toJsonValue(m_metering_profile_count));
    }
    if (m_object_count_isSet) {
        obj.insert(QString("ObjectCount"), ::OpenAPI::toJsonValue(m_object_count));
    }
    if (m_total_size_isSet) {
        obj.insert(QString("TotalSize"), ::OpenAPI::toJsonValue(m_total_size));
    }
    return obj;
}

qint32 OAIGetDomainResponse_Stats::getProfileCount() const {
    return m_profile_count;
}
void OAIGetDomainResponse_Stats::setProfileCount(const qint32 &profile_count) {
    m_profile_count = profile_count;
    m_profile_count_isSet = true;
}

bool OAIGetDomainResponse_Stats::is_profile_count_Set() const{
    return m_profile_count_isSet;
}

bool OAIGetDomainResponse_Stats::is_profile_count_Valid() const{
    return m_profile_count_isValid;
}

qint32 OAIGetDomainResponse_Stats::getMeteringProfileCount() const {
    return m_metering_profile_count;
}
void OAIGetDomainResponse_Stats::setMeteringProfileCount(const qint32 &metering_profile_count) {
    m_metering_profile_count = metering_profile_count;
    m_metering_profile_count_isSet = true;
}

bool OAIGetDomainResponse_Stats::is_metering_profile_count_Set() const{
    return m_metering_profile_count_isSet;
}

bool OAIGetDomainResponse_Stats::is_metering_profile_count_Valid() const{
    return m_metering_profile_count_isValid;
}

qint32 OAIGetDomainResponse_Stats::getObjectCount() const {
    return m_object_count;
}
void OAIGetDomainResponse_Stats::setObjectCount(const qint32 &object_count) {
    m_object_count = object_count;
    m_object_count_isSet = true;
}

bool OAIGetDomainResponse_Stats::is_object_count_Set() const{
    return m_object_count_isSet;
}

bool OAIGetDomainResponse_Stats::is_object_count_Valid() const{
    return m_object_count_isValid;
}

qint32 OAIGetDomainResponse_Stats::getTotalSize() const {
    return m_total_size;
}
void OAIGetDomainResponse_Stats::setTotalSize(const qint32 &total_size) {
    m_total_size = total_size;
    m_total_size_isSet = true;
}

bool OAIGetDomainResponse_Stats::is_total_size_Set() const{
    return m_total_size_isSet;
}

bool OAIGetDomainResponse_Stats::is_total_size_Valid() const{
    return m_total_size_isValid;
}

bool OAIGetDomainResponse_Stats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_profile_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metering_profile_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDomainResponse_Stats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
