/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchProfiles_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchProfiles_request::OAISearchProfiles_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchProfiles_request::OAISearchProfiles_request() {
    this->initializeModel();
}

OAISearchProfiles_request::~OAISearchProfiles_request() {}

void OAISearchProfiles_request::initializeModel() {

    m_key_name_isSet = false;
    m_key_name_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;

    m_additional_search_keys_isSet = false;
    m_additional_search_keys_isValid = false;

    m_logical_operator_isSet = false;
    m_logical_operator_isValid = false;
}

void OAISearchProfiles_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchProfiles_request::fromJsonObject(QJsonObject json) {

    m_key_name_isValid = ::OpenAPI::fromJsonValue(m_key_name, json[QString("KeyName")]);
    m_key_name_isSet = !json[QString("KeyName")].isNull() && m_key_name_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("Values")]);
    m_values_isSet = !json[QString("Values")].isNull() && m_values_isValid;

    m_additional_search_keys_isValid = ::OpenAPI::fromJsonValue(m_additional_search_keys, json[QString("AdditionalSearchKeys")]);
    m_additional_search_keys_isSet = !json[QString("AdditionalSearchKeys")].isNull() && m_additional_search_keys_isValid;

    m_logical_operator_isValid = ::OpenAPI::fromJsonValue(m_logical_operator, json[QString("LogicalOperator")]);
    m_logical_operator_isSet = !json[QString("LogicalOperator")].isNull() && m_logical_operator_isValid;
}

QString OAISearchProfiles_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchProfiles_request::asJsonObject() const {
    QJsonObject obj;
    if (m_key_name_isSet) {
        obj.insert(QString("KeyName"), ::OpenAPI::toJsonValue(m_key_name));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("Values"), ::OpenAPI::toJsonValue(m_values));
    }
    if (m_additional_search_keys.size() > 0) {
        obj.insert(QString("AdditionalSearchKeys"), ::OpenAPI::toJsonValue(m_additional_search_keys));
    }
    if (m_logical_operator_isSet) {
        obj.insert(QString("LogicalOperator"), ::OpenAPI::toJsonValue(m_logical_operator));
    }
    return obj;
}

QString OAISearchProfiles_request::getKeyName() const {
    return m_key_name;
}
void OAISearchProfiles_request::setKeyName(const QString &key_name) {
    m_key_name = key_name;
    m_key_name_isSet = true;
}

bool OAISearchProfiles_request::is_key_name_Set() const{
    return m_key_name_isSet;
}

bool OAISearchProfiles_request::is_key_name_Valid() const{
    return m_key_name_isValid;
}

QList<QString> OAISearchProfiles_request::getValues() const {
    return m_values;
}
void OAISearchProfiles_request::setValues(const QList<QString> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAISearchProfiles_request::is_values_Set() const{
    return m_values_isSet;
}

bool OAISearchProfiles_request::is_values_Valid() const{
    return m_values_isValid;
}

QList<OAIAdditionalSearchKey> OAISearchProfiles_request::getAdditionalSearchKeys() const {
    return m_additional_search_keys;
}
void OAISearchProfiles_request::setAdditionalSearchKeys(const QList<OAIAdditionalSearchKey> &additional_search_keys) {
    m_additional_search_keys = additional_search_keys;
    m_additional_search_keys_isSet = true;
}

bool OAISearchProfiles_request::is_additional_search_keys_Set() const{
    return m_additional_search_keys_isSet;
}

bool OAISearchProfiles_request::is_additional_search_keys_Valid() const{
    return m_additional_search_keys_isValid;
}

QString OAISearchProfiles_request::getLogicalOperator() const {
    return m_logical_operator;
}
void OAISearchProfiles_request::setLogicalOperator(const QString &logical_operator) {
    m_logical_operator = logical_operator;
    m_logical_operator_isSet = true;
}

bool OAISearchProfiles_request::is_logical_operator_Set() const{
    return m_logical_operator_isSet;
}

bool OAISearchProfiles_request::is_logical_operator_Valid() const{
    return m_logical_operator_isValid;
}

bool OAISearchProfiles_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_search_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_logical_operator_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchProfiles_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_name_isValid && m_values_isValid && true;
}

} // namespace OpenAPI
