/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarketoConnectorOperator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMarketoConnectorOperator::OAIMarketoConnectorOperator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMarketoConnectorOperator::OAIMarketoConnectorOperator() {
    this->initializeModel();
}

OAIMarketoConnectorOperator::~OAIMarketoConnectorOperator() {}

void OAIMarketoConnectorOperator::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIMarketoConnectorOperator::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIMarketoConnectorOperator::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PROJECTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMarketoConnectorOperator::PROJECTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LESS_THAN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMarketoConnectorOperator::LESS_THAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GREATER_THAN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMarketoConnectorOperator::GREATER_THAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BETWEEN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMarketoConnectorOperator::BETWEEN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADDITION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMarketoConnectorOperator::ADDITION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MULTIPLICATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMarketoConnectorOperator::MULTIPLICATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DIVISION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMarketoConnectorOperator::DIVISION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUBTRACTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMarketoConnectorOperator::SUBTRACTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MASK_ALL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMarketoConnectorOperator::MASK_ALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MASK_FIRST_N", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMarketoConnectorOperator::MASK_FIRST_N;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MASK_LAST_N", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMarketoConnectorOperator::MASK_LAST_N;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALIDATE_NON_NULL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMarketoConnectorOperator::VALIDATE_NON_NULL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALIDATE_NON_ZERO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMarketoConnectorOperator::VALIDATE_NON_ZERO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALIDATE_NON_NEGATIVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMarketoConnectorOperator::VALIDATE_NON_NEGATIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALIDATE_NUMERIC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMarketoConnectorOperator::VALIDATE_NUMERIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NO_OP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMarketoConnectorOperator::NO_OP;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIMarketoConnectorOperator::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIMarketoConnectorOperator::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIMarketoConnectorOperator::PROJECTION:
            val = "PROJECTION";
            break;
        case eOAIMarketoConnectorOperator::LESS_THAN:
            val = "LESS_THAN";
            break;
        case eOAIMarketoConnectorOperator::GREATER_THAN:
            val = "GREATER_THAN";
            break;
        case eOAIMarketoConnectorOperator::BETWEEN:
            val = "BETWEEN";
            break;
        case eOAIMarketoConnectorOperator::ADDITION:
            val = "ADDITION";
            break;
        case eOAIMarketoConnectorOperator::MULTIPLICATION:
            val = "MULTIPLICATION";
            break;
        case eOAIMarketoConnectorOperator::DIVISION:
            val = "DIVISION";
            break;
        case eOAIMarketoConnectorOperator::SUBTRACTION:
            val = "SUBTRACTION";
            break;
        case eOAIMarketoConnectorOperator::MASK_ALL:
            val = "MASK_ALL";
            break;
        case eOAIMarketoConnectorOperator::MASK_FIRST_N:
            val = "MASK_FIRST_N";
            break;
        case eOAIMarketoConnectorOperator::MASK_LAST_N:
            val = "MASK_LAST_N";
            break;
        case eOAIMarketoConnectorOperator::VALIDATE_NON_NULL:
            val = "VALIDATE_NON_NULL";
            break;
        case eOAIMarketoConnectorOperator::VALIDATE_NON_ZERO:
            val = "VALIDATE_NON_ZERO";
            break;
        case eOAIMarketoConnectorOperator::VALIDATE_NON_NEGATIVE:
            val = "VALIDATE_NON_NEGATIVE";
            break;
        case eOAIMarketoConnectorOperator::VALIDATE_NUMERIC:
            val = "VALIDATE_NUMERIC";
            break;
        case eOAIMarketoConnectorOperator::NO_OP:
            val = "NO_OP";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIMarketoConnectorOperator::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIMarketoConnectorOperator::eOAIMarketoConnectorOperator OAIMarketoConnectorOperator::getValue() const {
    return m_value;
}

void OAIMarketoConnectorOperator::setValue(const OAIMarketoConnectorOperator::eOAIMarketoConnectorOperator& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIMarketoConnectorOperator::isSet() const {
    
    return m_value_isSet;
}

bool OAIMarketoConnectorOperator::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
