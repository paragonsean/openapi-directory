/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3ConnectorOperator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3ConnectorOperator::OAIS3ConnectorOperator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3ConnectorOperator::OAIS3ConnectorOperator() {
    this->initializeModel();
}

OAIS3ConnectorOperator::~OAIS3ConnectorOperator() {}

void OAIS3ConnectorOperator::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIS3ConnectorOperator::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIS3ConnectorOperator::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PROJECTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3ConnectorOperator::PROJECTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LESS_THAN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3ConnectorOperator::LESS_THAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GREATER_THAN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3ConnectorOperator::GREATER_THAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BETWEEN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3ConnectorOperator::BETWEEN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LESS_THAN_OR_EQUAL_TO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3ConnectorOperator::LESS_THAN_OR_EQUAL_TO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GREATER_THAN_OR_EQUAL_TO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3ConnectorOperator::GREATER_THAN_OR_EQUAL_TO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EQUAL_TO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3ConnectorOperator::EQUAL_TO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NOT_EQUAL_TO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3ConnectorOperator::NOT_EQUAL_TO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADDITION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3ConnectorOperator::ADDITION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MULTIPLICATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3ConnectorOperator::MULTIPLICATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DIVISION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3ConnectorOperator::DIVISION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUBTRACTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3ConnectorOperator::SUBTRACTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MASK_ALL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3ConnectorOperator::MASK_ALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MASK_FIRST_N", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3ConnectorOperator::MASK_FIRST_N;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MASK_LAST_N", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3ConnectorOperator::MASK_LAST_N;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALIDATE_NON_NULL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3ConnectorOperator::VALIDATE_NON_NULL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALIDATE_NON_ZERO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3ConnectorOperator::VALIDATE_NON_ZERO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALIDATE_NON_NEGATIVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3ConnectorOperator::VALIDATE_NON_NEGATIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALIDATE_NUMERIC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3ConnectorOperator::VALIDATE_NUMERIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NO_OP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIS3ConnectorOperator::NO_OP;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIS3ConnectorOperator::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIS3ConnectorOperator::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIS3ConnectorOperator::PROJECTION:
            val = "PROJECTION";
            break;
        case eOAIS3ConnectorOperator::LESS_THAN:
            val = "LESS_THAN";
            break;
        case eOAIS3ConnectorOperator::GREATER_THAN:
            val = "GREATER_THAN";
            break;
        case eOAIS3ConnectorOperator::BETWEEN:
            val = "BETWEEN";
            break;
        case eOAIS3ConnectorOperator::LESS_THAN_OR_EQUAL_TO:
            val = "LESS_THAN_OR_EQUAL_TO";
            break;
        case eOAIS3ConnectorOperator::GREATER_THAN_OR_EQUAL_TO:
            val = "GREATER_THAN_OR_EQUAL_TO";
            break;
        case eOAIS3ConnectorOperator::EQUAL_TO:
            val = "EQUAL_TO";
            break;
        case eOAIS3ConnectorOperator::NOT_EQUAL_TO:
            val = "NOT_EQUAL_TO";
            break;
        case eOAIS3ConnectorOperator::ADDITION:
            val = "ADDITION";
            break;
        case eOAIS3ConnectorOperator::MULTIPLICATION:
            val = "MULTIPLICATION";
            break;
        case eOAIS3ConnectorOperator::DIVISION:
            val = "DIVISION";
            break;
        case eOAIS3ConnectorOperator::SUBTRACTION:
            val = "SUBTRACTION";
            break;
        case eOAIS3ConnectorOperator::MASK_ALL:
            val = "MASK_ALL";
            break;
        case eOAIS3ConnectorOperator::MASK_FIRST_N:
            val = "MASK_FIRST_N";
            break;
        case eOAIS3ConnectorOperator::MASK_LAST_N:
            val = "MASK_LAST_N";
            break;
        case eOAIS3ConnectorOperator::VALIDATE_NON_NULL:
            val = "VALIDATE_NON_NULL";
            break;
        case eOAIS3ConnectorOperator::VALIDATE_NON_ZERO:
            val = "VALIDATE_NON_ZERO";
            break;
        case eOAIS3ConnectorOperator::VALIDATE_NON_NEGATIVE:
            val = "VALIDATE_NON_NEGATIVE";
            break;
        case eOAIS3ConnectorOperator::VALIDATE_NUMERIC:
            val = "VALIDATE_NUMERIC";
            break;
        case eOAIS3ConnectorOperator::NO_OP:
            val = "NO_OP";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIS3ConnectorOperator::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIS3ConnectorOperator::eOAIS3ConnectorOperator OAIS3ConnectorOperator::getValue() const {
    return m_value;
}

void OAIS3ConnectorOperator::setValue(const OAIS3ConnectorOperator::eOAIS3ConnectorOperator& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIS3ConnectorOperator::isSet() const {
    
    return m_value_isSet;
}

bool OAIS3ConnectorOperator::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
