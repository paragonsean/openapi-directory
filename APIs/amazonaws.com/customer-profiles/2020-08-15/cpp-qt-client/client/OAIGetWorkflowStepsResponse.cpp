/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetWorkflowStepsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetWorkflowStepsResponse::OAIGetWorkflowStepsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetWorkflowStepsResponse::OAIGetWorkflowStepsResponse() {
    this->initializeModel();
}

OAIGetWorkflowStepsResponse::~OAIGetWorkflowStepsResponse() {}

void OAIGetWorkflowStepsResponse::initializeModel() {

    m_workflow_id_isSet = false;
    m_workflow_id_isValid = false;

    m_workflow_type_isSet = false;
    m_workflow_type_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIGetWorkflowStepsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetWorkflowStepsResponse::fromJsonObject(QJsonObject json) {

    m_workflow_id_isValid = ::OpenAPI::fromJsonValue(m_workflow_id, json[QString("WorkflowId")]);
    m_workflow_id_isSet = !json[QString("WorkflowId")].isNull() && m_workflow_id_isValid;

    m_workflow_type_isValid = ::OpenAPI::fromJsonValue(m_workflow_type, json[QString("WorkflowType")]);
    m_workflow_type_isSet = !json[QString("WorkflowType")].isNull() && m_workflow_type_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("Items")]);
    m_items_isSet = !json[QString("Items")].isNull() && m_items_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIGetWorkflowStepsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetWorkflowStepsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_workflow_id_isSet) {
        obj.insert(QString("WorkflowId"), ::OpenAPI::toJsonValue(m_workflow_id));
    }
    if (m_workflow_type.isSet()) {
        obj.insert(QString("WorkflowType"), ::OpenAPI::toJsonValue(m_workflow_type));
    }
    if (m_items.isSet()) {
        obj.insert(QString("Items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QString OAIGetWorkflowStepsResponse::getWorkflowId() const {
    return m_workflow_id;
}
void OAIGetWorkflowStepsResponse::setWorkflowId(const QString &workflow_id) {
    m_workflow_id = workflow_id;
    m_workflow_id_isSet = true;
}

bool OAIGetWorkflowStepsResponse::is_workflow_id_Set() const{
    return m_workflow_id_isSet;
}

bool OAIGetWorkflowStepsResponse::is_workflow_id_Valid() const{
    return m_workflow_id_isValid;
}

OAIWorkflowType OAIGetWorkflowStepsResponse::getWorkflowType() const {
    return m_workflow_type;
}
void OAIGetWorkflowStepsResponse::setWorkflowType(const OAIWorkflowType &workflow_type) {
    m_workflow_type = workflow_type;
    m_workflow_type_isSet = true;
}

bool OAIGetWorkflowStepsResponse::is_workflow_type_Set() const{
    return m_workflow_type_isSet;
}

bool OAIGetWorkflowStepsResponse::is_workflow_type_Valid() const{
    return m_workflow_type_isValid;
}

QList OAIGetWorkflowStepsResponse::getItems() const {
    return m_items;
}
void OAIGetWorkflowStepsResponse::setItems(const QList &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIGetWorkflowStepsResponse::is_items_Set() const{
    return m_items_isSet;
}

bool OAIGetWorkflowStepsResponse::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIGetWorkflowStepsResponse::getNextToken() const {
    return m_next_token;
}
void OAIGetWorkflowStepsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetWorkflowStepsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetWorkflowStepsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIGetWorkflowStepsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_workflow_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetWorkflowStepsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
