/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetIdentityResolutionJobResponse_JobStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetIdentityResolutionJobResponse_JobStats::OAIGetIdentityResolutionJobResponse_JobStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetIdentityResolutionJobResponse_JobStats::OAIGetIdentityResolutionJobResponse_JobStats() {
    this->initializeModel();
}

OAIGetIdentityResolutionJobResponse_JobStats::~OAIGetIdentityResolutionJobResponse_JobStats() {}

void OAIGetIdentityResolutionJobResponse_JobStats::initializeModel() {

    m_number_of_profiles_reviewed_isSet = false;
    m_number_of_profiles_reviewed_isValid = false;

    m_number_of_matches_found_isSet = false;
    m_number_of_matches_found_isValid = false;

    m_number_of_merges_done_isSet = false;
    m_number_of_merges_done_isValid = false;
}

void OAIGetIdentityResolutionJobResponse_JobStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetIdentityResolutionJobResponse_JobStats::fromJsonObject(QJsonObject json) {

    m_number_of_profiles_reviewed_isValid = ::OpenAPI::fromJsonValue(m_number_of_profiles_reviewed, json[QString("NumberOfProfilesReviewed")]);
    m_number_of_profiles_reviewed_isSet = !json[QString("NumberOfProfilesReviewed")].isNull() && m_number_of_profiles_reviewed_isValid;

    m_number_of_matches_found_isValid = ::OpenAPI::fromJsonValue(m_number_of_matches_found, json[QString("NumberOfMatchesFound")]);
    m_number_of_matches_found_isSet = !json[QString("NumberOfMatchesFound")].isNull() && m_number_of_matches_found_isValid;

    m_number_of_merges_done_isValid = ::OpenAPI::fromJsonValue(m_number_of_merges_done, json[QString("NumberOfMergesDone")]);
    m_number_of_merges_done_isSet = !json[QString("NumberOfMergesDone")].isNull() && m_number_of_merges_done_isValid;
}

QString OAIGetIdentityResolutionJobResponse_JobStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetIdentityResolutionJobResponse_JobStats::asJsonObject() const {
    QJsonObject obj;
    if (m_number_of_profiles_reviewed_isSet) {
        obj.insert(QString("NumberOfProfilesReviewed"), ::OpenAPI::toJsonValue(m_number_of_profiles_reviewed));
    }
    if (m_number_of_matches_found_isSet) {
        obj.insert(QString("NumberOfMatchesFound"), ::OpenAPI::toJsonValue(m_number_of_matches_found));
    }
    if (m_number_of_merges_done_isSet) {
        obj.insert(QString("NumberOfMergesDone"), ::OpenAPI::toJsonValue(m_number_of_merges_done));
    }
    return obj;
}

qint32 OAIGetIdentityResolutionJobResponse_JobStats::getNumberOfProfilesReviewed() const {
    return m_number_of_profiles_reviewed;
}
void OAIGetIdentityResolutionJobResponse_JobStats::setNumberOfProfilesReviewed(const qint32 &number_of_profiles_reviewed) {
    m_number_of_profiles_reviewed = number_of_profiles_reviewed;
    m_number_of_profiles_reviewed_isSet = true;
}

bool OAIGetIdentityResolutionJobResponse_JobStats::is_number_of_profiles_reviewed_Set() const{
    return m_number_of_profiles_reviewed_isSet;
}

bool OAIGetIdentityResolutionJobResponse_JobStats::is_number_of_profiles_reviewed_Valid() const{
    return m_number_of_profiles_reviewed_isValid;
}

qint32 OAIGetIdentityResolutionJobResponse_JobStats::getNumberOfMatchesFound() const {
    return m_number_of_matches_found;
}
void OAIGetIdentityResolutionJobResponse_JobStats::setNumberOfMatchesFound(const qint32 &number_of_matches_found) {
    m_number_of_matches_found = number_of_matches_found;
    m_number_of_matches_found_isSet = true;
}

bool OAIGetIdentityResolutionJobResponse_JobStats::is_number_of_matches_found_Set() const{
    return m_number_of_matches_found_isSet;
}

bool OAIGetIdentityResolutionJobResponse_JobStats::is_number_of_matches_found_Valid() const{
    return m_number_of_matches_found_isValid;
}

qint32 OAIGetIdentityResolutionJobResponse_JobStats::getNumberOfMergesDone() const {
    return m_number_of_merges_done;
}
void OAIGetIdentityResolutionJobResponse_JobStats::setNumberOfMergesDone(const qint32 &number_of_merges_done) {
    m_number_of_merges_done = number_of_merges_done;
    m_number_of_merges_done_isSet = true;
}

bool OAIGetIdentityResolutionJobResponse_JobStats::is_number_of_merges_done_Set() const{
    return m_number_of_merges_done_isSet;
}

bool OAIGetIdentityResolutionJobResponse_JobStats::is_number_of_merges_done_Valid() const{
    return m_number_of_merges_done_isValid;
}

bool OAIGetIdentityResolutionJobResponse_JobStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_number_of_profiles_reviewed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_matches_found_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_merges_done_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetIdentityResolutionJobResponse_JobStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
