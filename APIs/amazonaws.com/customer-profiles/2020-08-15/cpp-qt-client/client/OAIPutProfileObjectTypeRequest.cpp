/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutProfileObjectTypeRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutProfileObjectTypeRequest::OAIPutProfileObjectTypeRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutProfileObjectTypeRequest::OAIPutProfileObjectTypeRequest() {
    this->initializeModel();
}

OAIPutProfileObjectTypeRequest::~OAIPutProfileObjectTypeRequest() {}

void OAIPutProfileObjectTypeRequest::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_template_id_isSet = false;
    m_template_id_isValid = false;

    m_expiration_days_isSet = false;
    m_expiration_days_isValid = false;

    m_encryption_key_isSet = false;
    m_encryption_key_isValid = false;

    m_allow_profile_creation_isSet = false;
    m_allow_profile_creation_isValid = false;

    m_source_last_updated_timestamp_format_isSet = false;
    m_source_last_updated_timestamp_format_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_keys_isSet = false;
    m_keys_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIPutProfileObjectTypeRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutProfileObjectTypeRequest::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_template_id_isValid = ::OpenAPI::fromJsonValue(m_template_id, json[QString("TemplateId")]);
    m_template_id_isSet = !json[QString("TemplateId")].isNull() && m_template_id_isValid;

    m_expiration_days_isValid = ::OpenAPI::fromJsonValue(m_expiration_days, json[QString("ExpirationDays")]);
    m_expiration_days_isSet = !json[QString("ExpirationDays")].isNull() && m_expiration_days_isValid;

    m_encryption_key_isValid = ::OpenAPI::fromJsonValue(m_encryption_key, json[QString("EncryptionKey")]);
    m_encryption_key_isSet = !json[QString("EncryptionKey")].isNull() && m_encryption_key_isValid;

    m_allow_profile_creation_isValid = ::OpenAPI::fromJsonValue(m_allow_profile_creation, json[QString("AllowProfileCreation")]);
    m_allow_profile_creation_isSet = !json[QString("AllowProfileCreation")].isNull() && m_allow_profile_creation_isValid;

    m_source_last_updated_timestamp_format_isValid = ::OpenAPI::fromJsonValue(m_source_last_updated_timestamp_format, json[QString("SourceLastUpdatedTimestampFormat")]);
    m_source_last_updated_timestamp_format_isSet = !json[QString("SourceLastUpdatedTimestampFormat")].isNull() && m_source_last_updated_timestamp_format_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("Fields")]);
    m_fields_isSet = !json[QString("Fields")].isNull() && m_fields_isValid;

    m_keys_isValid = ::OpenAPI::fromJsonValue(m_keys, json[QString("Keys")]);
    m_keys_isSet = !json[QString("Keys")].isNull() && m_keys_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIPutProfileObjectTypeRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutProfileObjectTypeRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_template_id_isSet) {
        obj.insert(QString("TemplateId"), ::OpenAPI::toJsonValue(m_template_id));
    }
    if (m_expiration_days_isSet) {
        obj.insert(QString("ExpirationDays"), ::OpenAPI::toJsonValue(m_expiration_days));
    }
    if (m_encryption_key_isSet) {
        obj.insert(QString("EncryptionKey"), ::OpenAPI::toJsonValue(m_encryption_key));
    }
    if (m_allow_profile_creation_isSet) {
        obj.insert(QString("AllowProfileCreation"), ::OpenAPI::toJsonValue(m_allow_profile_creation));
    }
    if (m_source_last_updated_timestamp_format_isSet) {
        obj.insert(QString("SourceLastUpdatedTimestampFormat"), ::OpenAPI::toJsonValue(m_source_last_updated_timestamp_format));
    }
    if (m_fields.isSet()) {
        obj.insert(QString("Fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_keys.isSet()) {
        obj.insert(QString("Keys"), ::OpenAPI::toJsonValue(m_keys));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIPutProfileObjectTypeRequest::getDescription() const {
    return m_description;
}
void OAIPutProfileObjectTypeRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPutProfileObjectTypeRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPutProfileObjectTypeRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPutProfileObjectTypeRequest::getTemplateId() const {
    return m_template_id;
}
void OAIPutProfileObjectTypeRequest::setTemplateId(const QString &template_id) {
    m_template_id = template_id;
    m_template_id_isSet = true;
}

bool OAIPutProfileObjectTypeRequest::is_template_id_Set() const{
    return m_template_id_isSet;
}

bool OAIPutProfileObjectTypeRequest::is_template_id_Valid() const{
    return m_template_id_isValid;
}

qint32 OAIPutProfileObjectTypeRequest::getExpirationDays() const {
    return m_expiration_days;
}
void OAIPutProfileObjectTypeRequest::setExpirationDays(const qint32 &expiration_days) {
    m_expiration_days = expiration_days;
    m_expiration_days_isSet = true;
}

bool OAIPutProfileObjectTypeRequest::is_expiration_days_Set() const{
    return m_expiration_days_isSet;
}

bool OAIPutProfileObjectTypeRequest::is_expiration_days_Valid() const{
    return m_expiration_days_isValid;
}

QString OAIPutProfileObjectTypeRequest::getEncryptionKey() const {
    return m_encryption_key;
}
void OAIPutProfileObjectTypeRequest::setEncryptionKey(const QString &encryption_key) {
    m_encryption_key = encryption_key;
    m_encryption_key_isSet = true;
}

bool OAIPutProfileObjectTypeRequest::is_encryption_key_Set() const{
    return m_encryption_key_isSet;
}

bool OAIPutProfileObjectTypeRequest::is_encryption_key_Valid() const{
    return m_encryption_key_isValid;
}

bool OAIPutProfileObjectTypeRequest::getAllowProfileCreation() const {
    return m_allow_profile_creation;
}
void OAIPutProfileObjectTypeRequest::setAllowProfileCreation(const bool &allow_profile_creation) {
    m_allow_profile_creation = allow_profile_creation;
    m_allow_profile_creation_isSet = true;
}

bool OAIPutProfileObjectTypeRequest::is_allow_profile_creation_Set() const{
    return m_allow_profile_creation_isSet;
}

bool OAIPutProfileObjectTypeRequest::is_allow_profile_creation_Valid() const{
    return m_allow_profile_creation_isValid;
}

QString OAIPutProfileObjectTypeRequest::getSourceLastUpdatedTimestampFormat() const {
    return m_source_last_updated_timestamp_format;
}
void OAIPutProfileObjectTypeRequest::setSourceLastUpdatedTimestampFormat(const QString &source_last_updated_timestamp_format) {
    m_source_last_updated_timestamp_format = source_last_updated_timestamp_format;
    m_source_last_updated_timestamp_format_isSet = true;
}

bool OAIPutProfileObjectTypeRequest::is_source_last_updated_timestamp_format_Set() const{
    return m_source_last_updated_timestamp_format_isSet;
}

bool OAIPutProfileObjectTypeRequest::is_source_last_updated_timestamp_format_Valid() const{
    return m_source_last_updated_timestamp_format_isValid;
}

QMap OAIPutProfileObjectTypeRequest::getFields() const {
    return m_fields;
}
void OAIPutProfileObjectTypeRequest::setFields(const QMap &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIPutProfileObjectTypeRequest::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIPutProfileObjectTypeRequest::is_fields_Valid() const{
    return m_fields_isValid;
}

QMap OAIPutProfileObjectTypeRequest::getKeys() const {
    return m_keys;
}
void OAIPutProfileObjectTypeRequest::setKeys(const QMap &keys) {
    m_keys = keys;
    m_keys_isSet = true;
}

bool OAIPutProfileObjectTypeRequest::is_keys_Set() const{
    return m_keys_isSet;
}

bool OAIPutProfileObjectTypeRequest::is_keys_Valid() const{
    return m_keys_isValid;
}

QMap OAIPutProfileObjectTypeRequest::getTags() const {
    return m_tags;
}
void OAIPutProfileObjectTypeRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIPutProfileObjectTypeRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIPutProfileObjectTypeRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIPutProfileObjectTypeRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_profile_creation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_last_updated_timestamp_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutProfileObjectTypeRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && true;
}

} // namespace OpenAPI
