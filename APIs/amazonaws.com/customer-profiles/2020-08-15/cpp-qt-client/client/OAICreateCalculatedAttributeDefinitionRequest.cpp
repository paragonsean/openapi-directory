/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateCalculatedAttributeDefinitionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateCalculatedAttributeDefinitionRequest::OAICreateCalculatedAttributeDefinitionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateCalculatedAttributeDefinitionRequest::OAICreateCalculatedAttributeDefinitionRequest() {
    this->initializeModel();
}

OAICreateCalculatedAttributeDefinitionRequest::~OAICreateCalculatedAttributeDefinitionRequest() {}

void OAICreateCalculatedAttributeDefinitionRequest::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_attribute_details_isSet = false;
    m_attribute_details_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_statistic_isSet = false;
    m_statistic_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateCalculatedAttributeDefinitionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateCalculatedAttributeDefinitionRequest::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_attribute_details_isValid = ::OpenAPI::fromJsonValue(m_attribute_details, json[QString("AttributeDetails")]);
    m_attribute_details_isSet = !json[QString("AttributeDetails")].isNull() && m_attribute_details_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("Conditions")]);
    m_conditions_isSet = !json[QString("Conditions")].isNull() && m_conditions_isValid;

    m_statistic_isValid = ::OpenAPI::fromJsonValue(m_statistic, json[QString("Statistic")]);
    m_statistic_isSet = !json[QString("Statistic")].isNull() && m_statistic_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateCalculatedAttributeDefinitionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateCalculatedAttributeDefinitionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_attribute_details.isSet()) {
        obj.insert(QString("AttributeDetails"), ::OpenAPI::toJsonValue(m_attribute_details));
    }
    if (m_conditions.isSet()) {
        obj.insert(QString("Conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_statistic.isSet()) {
        obj.insert(QString("Statistic"), ::OpenAPI::toJsonValue(m_statistic));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateCalculatedAttributeDefinitionRequest::getDisplayName() const {
    return m_display_name;
}
void OAICreateCalculatedAttributeDefinitionRequest::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAICreateCalculatedAttributeDefinitionRequest::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAICreateCalculatedAttributeDefinitionRequest::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAICreateCalculatedAttributeDefinitionRequest::getDescription() const {
    return m_description;
}
void OAICreateCalculatedAttributeDefinitionRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateCalculatedAttributeDefinitionRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateCalculatedAttributeDefinitionRequest::is_description_Valid() const{
    return m_description_isValid;
}

OAICreateCalculatedAttributeDefinitionResponse_AttributeDetails OAICreateCalculatedAttributeDefinitionRequest::getAttributeDetails() const {
    return m_attribute_details;
}
void OAICreateCalculatedAttributeDefinitionRequest::setAttributeDetails(const OAICreateCalculatedAttributeDefinitionResponse_AttributeDetails &attribute_details) {
    m_attribute_details = attribute_details;
    m_attribute_details_isSet = true;
}

bool OAICreateCalculatedAttributeDefinitionRequest::is_attribute_details_Set() const{
    return m_attribute_details_isSet;
}

bool OAICreateCalculatedAttributeDefinitionRequest::is_attribute_details_Valid() const{
    return m_attribute_details_isValid;
}

OAICreateCalculatedAttributeDefinitionResponse_Conditions OAICreateCalculatedAttributeDefinitionRequest::getConditions() const {
    return m_conditions;
}
void OAICreateCalculatedAttributeDefinitionRequest::setConditions(const OAICreateCalculatedAttributeDefinitionResponse_Conditions &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAICreateCalculatedAttributeDefinitionRequest::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAICreateCalculatedAttributeDefinitionRequest::is_conditions_Valid() const{
    return m_conditions_isValid;
}

OAIStatistic OAICreateCalculatedAttributeDefinitionRequest::getStatistic() const {
    return m_statistic;
}
void OAICreateCalculatedAttributeDefinitionRequest::setStatistic(const OAIStatistic &statistic) {
    m_statistic = statistic;
    m_statistic_isSet = true;
}

bool OAICreateCalculatedAttributeDefinitionRequest::is_statistic_Set() const{
    return m_statistic_isSet;
}

bool OAICreateCalculatedAttributeDefinitionRequest::is_statistic_Valid() const{
    return m_statistic_isValid;
}

QMap OAICreateCalculatedAttributeDefinitionRequest::getTags() const {
    return m_tags;
}
void OAICreateCalculatedAttributeDefinitionRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateCalculatedAttributeDefinitionRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateCalculatedAttributeDefinitionRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateCalculatedAttributeDefinitionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistic.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateCalculatedAttributeDefinitionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attribute_details_isValid && m_statistic_isValid && true;
}

} // namespace OpenAPI
