/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetIntegrationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetIntegrationRequest::OAIGetIntegrationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetIntegrationRequest::OAIGetIntegrationRequest() {
    this->initializeModel();
}

OAIGetIntegrationRequest::~OAIGetIntegrationRequest() {}

void OAIGetIntegrationRequest::initializeModel() {

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIGetIntegrationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetIntegrationRequest::fromJsonObject(QJsonObject json) {

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("Uri")]);
    m_uri_isSet = !json[QString("Uri")].isNull() && m_uri_isValid;
}

QString OAIGetIntegrationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetIntegrationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_uri_isSet) {
        obj.insert(QString("Uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAIGetIntegrationRequest::getUri() const {
    return m_uri;
}
void OAIGetIntegrationRequest::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIGetIntegrationRequest::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIGetIntegrationRequest::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIGetIntegrationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetIntegrationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_uri_isValid && true;
}

} // namespace OpenAPI
