/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetEventStreamResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetEventStreamResponse::OAIGetEventStreamResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetEventStreamResponse::OAIGetEventStreamResponse() {
    this->initializeModel();
}

OAIGetEventStreamResponse::~OAIGetEventStreamResponse() {}

void OAIGetEventStreamResponse::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_event_stream_arn_isSet = false;
    m_event_stream_arn_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_stopped_since_isSet = false;
    m_stopped_since_isValid = false;

    m_destination_details_isSet = false;
    m_destination_details_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIGetEventStreamResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetEventStreamResponse::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_event_stream_arn_isValid = ::OpenAPI::fromJsonValue(m_event_stream_arn, json[QString("EventStreamArn")]);
    m_event_stream_arn_isSet = !json[QString("EventStreamArn")].isNull() && m_event_stream_arn_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_stopped_since_isValid = ::OpenAPI::fromJsonValue(m_stopped_since, json[QString("StoppedSince")]);
    m_stopped_since_isSet = !json[QString("StoppedSince")].isNull() && m_stopped_since_isValid;

    m_destination_details_isValid = ::OpenAPI::fromJsonValue(m_destination_details, json[QString("DestinationDetails")]);
    m_destination_details_isSet = !json[QString("DestinationDetails")].isNull() && m_destination_details_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIGetEventStreamResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetEventStreamResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_event_stream_arn_isSet) {
        obj.insert(QString("EventStreamArn"), ::OpenAPI::toJsonValue(m_event_stream_arn));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_stopped_since_isSet) {
        obj.insert(QString("StoppedSince"), ::OpenAPI::toJsonValue(m_stopped_since));
    }
    if (m_destination_details.isSet()) {
        obj.insert(QString("DestinationDetails"), ::OpenAPI::toJsonValue(m_destination_details));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIGetEventStreamResponse::getDomainName() const {
    return m_domain_name;
}
void OAIGetEventStreamResponse::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIGetEventStreamResponse::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIGetEventStreamResponse::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QString OAIGetEventStreamResponse::getEventStreamArn() const {
    return m_event_stream_arn;
}
void OAIGetEventStreamResponse::setEventStreamArn(const QString &event_stream_arn) {
    m_event_stream_arn = event_stream_arn;
    m_event_stream_arn_isSet = true;
}

bool OAIGetEventStreamResponse::is_event_stream_arn_Set() const{
    return m_event_stream_arn_isSet;
}

bool OAIGetEventStreamResponse::is_event_stream_arn_Valid() const{
    return m_event_stream_arn_isValid;
}

QDateTime OAIGetEventStreamResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIGetEventStreamResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGetEventStreamResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGetEventStreamResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIEventStreamState OAIGetEventStreamResponse::getState() const {
    return m_state;
}
void OAIGetEventStreamResponse::setState(const OAIEventStreamState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGetEventStreamResponse::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGetEventStreamResponse::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAIGetEventStreamResponse::getStoppedSince() const {
    return m_stopped_since;
}
void OAIGetEventStreamResponse::setStoppedSince(const QDateTime &stopped_since) {
    m_stopped_since = stopped_since;
    m_stopped_since_isSet = true;
}

bool OAIGetEventStreamResponse::is_stopped_since_Set() const{
    return m_stopped_since_isSet;
}

bool OAIGetEventStreamResponse::is_stopped_since_Valid() const{
    return m_stopped_since_isValid;
}

OAIGetEventStreamResponse_DestinationDetails OAIGetEventStreamResponse::getDestinationDetails() const {
    return m_destination_details;
}
void OAIGetEventStreamResponse::setDestinationDetails(const OAIGetEventStreamResponse_DestinationDetails &destination_details) {
    m_destination_details = destination_details;
    m_destination_details_isSet = true;
}

bool OAIGetEventStreamResponse::is_destination_details_Set() const{
    return m_destination_details_isSet;
}

bool OAIGetEventStreamResponse::is_destination_details_Valid() const{
    return m_destination_details_isValid;
}

QMap OAIGetEventStreamResponse::getTags() const {
    return m_tags;
}
void OAIGetEventStreamResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetEventStreamResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetEventStreamResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIGetEventStreamResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_stream_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stopped_since_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetEventStreamResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_name_isValid && m_event_stream_arn_isValid && m_created_at_isValid && m_state_isValid && m_destination_details_isValid && true;
}

} // namespace OpenAPI
