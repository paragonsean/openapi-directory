/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAttributeTypesSelector.h
 *
 * &lt;p&gt;Configuration information about the &lt;code&gt;AttributeTypesSelector &lt;/code&gt;where the rule-based identity resolution uses to match profiles. You can choose how profiles are compared across attribute types and which attribute to use for matching from each type. There are three attribute types you can configure:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Email type&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can choose from &lt;code&gt;Email&lt;/code&gt;, &lt;code&gt;BusinessEmail&lt;/code&gt;, and &lt;code&gt;PersonalEmail&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Phone number type&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can choose from &lt;code&gt;Phone&lt;/code&gt;, &lt;code&gt;HomePhone&lt;/code&gt;, and &lt;code&gt;MobilePhone&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Address type&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can choose from &lt;code&gt;Address&lt;/code&gt;, &lt;code&gt;BusinessAddress&lt;/code&gt;, &lt;code&gt;MaillingAddress&lt;/code&gt;, and &lt;code&gt;ShippingAddress&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can either choose &lt;code&gt;ONE_TO_ONE&lt;/code&gt; or &lt;code&gt;MANY_TO_MANY&lt;/code&gt; as the &lt;code&gt;AttributeMatchingModel&lt;/code&gt;. When choosing &lt;code&gt;MANY_TO_MANY&lt;/code&gt;, the system can match attribute across the sub-types of an attribute type. For example, if the value of the &lt;code&gt;Email&lt;/code&gt; field of Profile A and the value of &lt;code&gt;BusinessEmail&lt;/code&gt; field of Profile B matches, the two profiles are matched on the Email type. When choosing &lt;code&gt;ONE_TO_ONE&lt;/code&gt; the system can only match if the sub-types are exact matches. For example, only when the value of the &lt;code&gt;Email&lt;/code&gt; field of Profile A and the value of the &lt;code&gt;Email&lt;/code&gt; field of Profile B matches, the two profiles are matched on the Email type.&lt;/p&gt;
 */

#ifndef OAIAttributeTypesSelector_H
#define OAIAttributeTypesSelector_H

#include <QJsonObject>

#include "OAIAttributeMatchingModel.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAttributeTypesSelector : public OAIObject {
public:
    OAIAttributeTypesSelector();
    OAIAttributeTypesSelector(QString json);
    ~OAIAttributeTypesSelector() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAttributeMatchingModel getAttributeMatchingModel() const;
    void setAttributeMatchingModel(const OAIAttributeMatchingModel &attribute_matching_model);
    bool is_attribute_matching_model_Set() const;
    bool is_attribute_matching_model_Valid() const;

    QList getAddress() const;
    void setAddress(const QList &address);
    bool is_address_Set() const;
    bool is_address_Valid() const;

    QList getPhoneNumber() const;
    void setPhoneNumber(const QList &phone_number);
    bool is_phone_number_Set() const;
    bool is_phone_number_Valid() const;

    QList getEmailAddress() const;
    void setEmailAddress(const QList &email_address);
    bool is_email_address_Set() const;
    bool is_email_address_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAttributeMatchingModel m_attribute_matching_model;
    bool m_attribute_matching_model_isSet;
    bool m_attribute_matching_model_isValid;

    QList m_address;
    bool m_address_isSet;
    bool m_address_isValid;

    QList m_phone_number;
    bool m_phone_number_isSet;
    bool m_phone_number_isValid;

    QList m_email_address;
    bool m_email_address_isSet;
    bool m_email_address_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAttributeTypesSelector)

#endif // OAIAttributeTypesSelector_H
