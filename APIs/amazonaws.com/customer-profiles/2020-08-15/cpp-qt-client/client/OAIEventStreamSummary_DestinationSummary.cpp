/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventStreamSummary_DestinationSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventStreamSummary_DestinationSummary::OAIEventStreamSummary_DestinationSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventStreamSummary_DestinationSummary::OAIEventStreamSummary_DestinationSummary() {
    this->initializeModel();
}

OAIEventStreamSummary_DestinationSummary::~OAIEventStreamSummary_DestinationSummary() {}

void OAIEventStreamSummary_DestinationSummary::initializeModel() {

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_unhealthy_since_isSet = false;
    m_unhealthy_since_isValid = false;
}

void OAIEventStreamSummary_DestinationSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventStreamSummary_DestinationSummary::fromJsonObject(QJsonObject json) {

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("Uri")]);
    m_uri_isSet = !json[QString("Uri")].isNull() && m_uri_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_unhealthy_since_isValid = ::OpenAPI::fromJsonValue(m_unhealthy_since, json[QString("UnhealthySince")]);
    m_unhealthy_since_isSet = !json[QString("UnhealthySince")].isNull() && m_unhealthy_since_isValid;
}

QString OAIEventStreamSummary_DestinationSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventStreamSummary_DestinationSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_uri_isSet) {
        obj.insert(QString("Uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_unhealthy_since_isSet) {
        obj.insert(QString("UnhealthySince"), ::OpenAPI::toJsonValue(m_unhealthy_since));
    }
    return obj;
}

QString OAIEventStreamSummary_DestinationSummary::getUri() const {
    return m_uri;
}
void OAIEventStreamSummary_DestinationSummary::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIEventStreamSummary_DestinationSummary::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIEventStreamSummary_DestinationSummary::is_uri_Valid() const{
    return m_uri_isValid;
}

OAIEventStreamDestinationStatus OAIEventStreamSummary_DestinationSummary::getStatus() const {
    return m_status;
}
void OAIEventStreamSummary_DestinationSummary::setStatus(const OAIEventStreamDestinationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEventStreamSummary_DestinationSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEventStreamSummary_DestinationSummary::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIEventStreamSummary_DestinationSummary::getUnhealthySince() const {
    return m_unhealthy_since;
}
void OAIEventStreamSummary_DestinationSummary::setUnhealthySince(const QDateTime &unhealthy_since) {
    m_unhealthy_since = unhealthy_since;
    m_unhealthy_since_isSet = true;
}

bool OAIEventStreamSummary_DestinationSummary::is_unhealthy_since_Set() const{
    return m_unhealthy_since_isSet;
}

bool OAIEventStreamSummary_DestinationSummary::is_unhealthy_since_Valid() const{
    return m_unhealthy_since_isValid;
}

bool OAIEventStreamSummary_DestinationSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unhealthy_since_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventStreamSummary_DestinationSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_uri_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
