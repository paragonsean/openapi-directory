/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutIntegrationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutIntegrationRequest::OAIPutIntegrationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutIntegrationRequest::OAIPutIntegrationRequest() {
    this->initializeModel();
}

OAIPutIntegrationRequest::~OAIPutIntegrationRequest() {}

void OAIPutIntegrationRequest::initializeModel() {

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_object_type_name_isSet = false;
    m_object_type_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_flow_definition_isSet = false;
    m_flow_definition_isValid = false;

    m_object_type_names_isSet = false;
    m_object_type_names_isValid = false;
}

void OAIPutIntegrationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutIntegrationRequest::fromJsonObject(QJsonObject json) {

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("Uri")]);
    m_uri_isSet = !json[QString("Uri")].isNull() && m_uri_isValid;

    m_object_type_name_isValid = ::OpenAPI::fromJsonValue(m_object_type_name, json[QString("ObjectTypeName")]);
    m_object_type_name_isSet = !json[QString("ObjectTypeName")].isNull() && m_object_type_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_flow_definition_isValid = ::OpenAPI::fromJsonValue(m_flow_definition, json[QString("FlowDefinition")]);
    m_flow_definition_isSet = !json[QString("FlowDefinition")].isNull() && m_flow_definition_isValid;

    m_object_type_names_isValid = ::OpenAPI::fromJsonValue(m_object_type_names, json[QString("ObjectTypeNames")]);
    m_object_type_names_isSet = !json[QString("ObjectTypeNames")].isNull() && m_object_type_names_isValid;
}

QString OAIPutIntegrationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutIntegrationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_uri_isSet) {
        obj.insert(QString("Uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_object_type_name_isSet) {
        obj.insert(QString("ObjectTypeName"), ::OpenAPI::toJsonValue(m_object_type_name));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_flow_definition.isSet()) {
        obj.insert(QString("FlowDefinition"), ::OpenAPI::toJsonValue(m_flow_definition));
    }
    if (m_object_type_names.isSet()) {
        obj.insert(QString("ObjectTypeNames"), ::OpenAPI::toJsonValue(m_object_type_names));
    }
    return obj;
}

QString OAIPutIntegrationRequest::getUri() const {
    return m_uri;
}
void OAIPutIntegrationRequest::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIPutIntegrationRequest::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIPutIntegrationRequest::is_uri_Valid() const{
    return m_uri_isValid;
}

QString OAIPutIntegrationRequest::getObjectTypeName() const {
    return m_object_type_name;
}
void OAIPutIntegrationRequest::setObjectTypeName(const QString &object_type_name) {
    m_object_type_name = object_type_name;
    m_object_type_name_isSet = true;
}

bool OAIPutIntegrationRequest::is_object_type_name_Set() const{
    return m_object_type_name_isSet;
}

bool OAIPutIntegrationRequest::is_object_type_name_Valid() const{
    return m_object_type_name_isValid;
}

QMap OAIPutIntegrationRequest::getTags() const {
    return m_tags;
}
void OAIPutIntegrationRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIPutIntegrationRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIPutIntegrationRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIPutIntegrationRequest_FlowDefinition OAIPutIntegrationRequest::getFlowDefinition() const {
    return m_flow_definition;
}
void OAIPutIntegrationRequest::setFlowDefinition(const OAIPutIntegrationRequest_FlowDefinition &flow_definition) {
    m_flow_definition = flow_definition;
    m_flow_definition_isSet = true;
}

bool OAIPutIntegrationRequest::is_flow_definition_Set() const{
    return m_flow_definition_isSet;
}

bool OAIPutIntegrationRequest::is_flow_definition_Valid() const{
    return m_flow_definition_isValid;
}

QMap OAIPutIntegrationRequest::getObjectTypeNames() const {
    return m_object_type_names;
}
void OAIPutIntegrationRequest::setObjectTypeNames(const QMap &object_type_names) {
    m_object_type_names = object_type_names;
    m_object_type_names_isSet = true;
}

bool OAIPutIntegrationRequest::is_object_type_names_Set() const{
    return m_object_type_names_isSet;
}

bool OAIPutIntegrationRequest::is_object_type_names_Valid() const{
    return m_object_type_names_isValid;
}

bool OAIPutIntegrationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_flow_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_names.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutIntegrationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
