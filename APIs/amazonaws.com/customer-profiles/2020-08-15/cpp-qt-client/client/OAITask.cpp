/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITask.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITask::OAITask(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITask::OAITask() {
    this->initializeModel();
}

OAITask::~OAITask() {}

void OAITask::initializeModel() {

    m_connector_operator_isSet = false;
    m_connector_operator_isValid = false;

    m_destination_field_isSet = false;
    m_destination_field_isValid = false;

    m_source_fields_isSet = false;
    m_source_fields_isValid = false;

    m_task_properties_isSet = false;
    m_task_properties_isValid = false;

    m_task_type_isSet = false;
    m_task_type_isValid = false;
}

void OAITask::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITask::fromJsonObject(QJsonObject json) {

    m_connector_operator_isValid = ::OpenAPI::fromJsonValue(m_connector_operator, json[QString("ConnectorOperator")]);
    m_connector_operator_isSet = !json[QString("ConnectorOperator")].isNull() && m_connector_operator_isValid;

    m_destination_field_isValid = ::OpenAPI::fromJsonValue(m_destination_field, json[QString("DestinationField")]);
    m_destination_field_isSet = !json[QString("DestinationField")].isNull() && m_destination_field_isValid;

    m_source_fields_isValid = ::OpenAPI::fromJsonValue(m_source_fields, json[QString("SourceFields")]);
    m_source_fields_isSet = !json[QString("SourceFields")].isNull() && m_source_fields_isValid;

    m_task_properties_isValid = ::OpenAPI::fromJsonValue(m_task_properties, json[QString("TaskProperties")]);
    m_task_properties_isSet = !json[QString("TaskProperties")].isNull() && m_task_properties_isValid;

    m_task_type_isValid = ::OpenAPI::fromJsonValue(m_task_type, json[QString("TaskType")]);
    m_task_type_isSet = !json[QString("TaskType")].isNull() && m_task_type_isValid;
}

QString OAITask::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITask::asJsonObject() const {
    QJsonObject obj;
    if (m_connector_operator.isSet()) {
        obj.insert(QString("ConnectorOperator"), ::OpenAPI::toJsonValue(m_connector_operator));
    }
    if (m_destination_field_isSet) {
        obj.insert(QString("DestinationField"), ::OpenAPI::toJsonValue(m_destination_field));
    }
    if (m_source_fields.isSet()) {
        obj.insert(QString("SourceFields"), ::OpenAPI::toJsonValue(m_source_fields));
    }
    if (m_task_properties.isSet()) {
        obj.insert(QString("TaskProperties"), ::OpenAPI::toJsonValue(m_task_properties));
    }
    if (m_task_type.isSet()) {
        obj.insert(QString("TaskType"), ::OpenAPI::toJsonValue(m_task_type));
    }
    return obj;
}

OAITask_ConnectorOperator OAITask::getConnectorOperator() const {
    return m_connector_operator;
}
void OAITask::setConnectorOperator(const OAITask_ConnectorOperator &connector_operator) {
    m_connector_operator = connector_operator;
    m_connector_operator_isSet = true;
}

bool OAITask::is_connector_operator_Set() const{
    return m_connector_operator_isSet;
}

bool OAITask::is_connector_operator_Valid() const{
    return m_connector_operator_isValid;
}

QString OAITask::getDestinationField() const {
    return m_destination_field;
}
void OAITask::setDestinationField(const QString &destination_field) {
    m_destination_field = destination_field;
    m_destination_field_isSet = true;
}

bool OAITask::is_destination_field_Set() const{
    return m_destination_field_isSet;
}

bool OAITask::is_destination_field_Valid() const{
    return m_destination_field_isValid;
}

QList OAITask::getSourceFields() const {
    return m_source_fields;
}
void OAITask::setSourceFields(const QList &source_fields) {
    m_source_fields = source_fields;
    m_source_fields_isSet = true;
}

bool OAITask::is_source_fields_Set() const{
    return m_source_fields_isSet;
}

bool OAITask::is_source_fields_Valid() const{
    return m_source_fields_isValid;
}

QMap OAITask::getTaskProperties() const {
    return m_task_properties;
}
void OAITask::setTaskProperties(const QMap &task_properties) {
    m_task_properties = task_properties;
    m_task_properties_isSet = true;
}

bool OAITask::is_task_properties_Set() const{
    return m_task_properties_isSet;
}

bool OAITask::is_task_properties_Valid() const{
    return m_task_properties_isValid;
}

OAITaskType OAITask::getTaskType() const {
    return m_task_type;
}
void OAITask::setTaskType(const OAITaskType &task_type) {
    m_task_type = task_type;
    m_task_type_isSet = true;
}

bool OAITask::is_task_type_Set() const{
    return m_task_type_isSet;
}

bool OAITask::is_task_type_Valid() const{
    return m_task_type_isValid;
}

bool OAITask::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connector_operator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITask::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_fields_isValid && m_task_type_isValid && true;
}

} // namespace OpenAPI
