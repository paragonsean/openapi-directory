/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateEventStream_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateEventStream_request::OAICreateEventStream_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateEventStream_request::OAICreateEventStream_request() {
    this->initializeModel();
}

OAICreateEventStream_request::~OAICreateEventStream_request() {}

void OAICreateEventStream_request::initializeModel() {

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateEventStream_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateEventStream_request::fromJsonObject(QJsonObject json) {

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("Uri")]);
    m_uri_isSet = !json[QString("Uri")].isNull() && m_uri_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateEventStream_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateEventStream_request::asJsonObject() const {
    QJsonObject obj;
    if (m_uri_isSet) {
        obj.insert(QString("Uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateEventStream_request::getUri() const {
    return m_uri;
}
void OAICreateEventStream_request::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAICreateEventStream_request::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAICreateEventStream_request::is_uri_Valid() const{
    return m_uri_isValid;
}

QMap<QString, QString> OAICreateEventStream_request::getTags() const {
    return m_tags;
}
void OAICreateEventStream_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateEventStream_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateEventStream_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateEventStream_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateEventStream_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_uri_isValid && true;
}

} // namespace OpenAPI
