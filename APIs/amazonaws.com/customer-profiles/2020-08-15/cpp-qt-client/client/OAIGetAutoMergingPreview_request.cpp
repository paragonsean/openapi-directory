/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAutoMergingPreview_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAutoMergingPreview_request::OAIGetAutoMergingPreview_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAutoMergingPreview_request::OAIGetAutoMergingPreview_request() {
    this->initializeModel();
}

OAIGetAutoMergingPreview_request::~OAIGetAutoMergingPreview_request() {}

void OAIGetAutoMergingPreview_request::initializeModel() {

    m_consolidation_isSet = false;
    m_consolidation_isValid = false;

    m_conflict_resolution_isSet = false;
    m_conflict_resolution_isValid = false;

    m_min_allowed_confidence_score_for_merging_isSet = false;
    m_min_allowed_confidence_score_for_merging_isValid = false;
}

void OAIGetAutoMergingPreview_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAutoMergingPreview_request::fromJsonObject(QJsonObject json) {

    m_consolidation_isValid = ::OpenAPI::fromJsonValue(m_consolidation, json[QString("Consolidation")]);
    m_consolidation_isSet = !json[QString("Consolidation")].isNull() && m_consolidation_isValid;

    m_conflict_resolution_isValid = ::OpenAPI::fromJsonValue(m_conflict_resolution, json[QString("ConflictResolution")]);
    m_conflict_resolution_isSet = !json[QString("ConflictResolution")].isNull() && m_conflict_resolution_isValid;

    m_min_allowed_confidence_score_for_merging_isValid = ::OpenAPI::fromJsonValue(m_min_allowed_confidence_score_for_merging, json[QString("MinAllowedConfidenceScoreForMerging")]);
    m_min_allowed_confidence_score_for_merging_isSet = !json[QString("MinAllowedConfidenceScoreForMerging")].isNull() && m_min_allowed_confidence_score_for_merging_isValid;
}

QString OAIGetAutoMergingPreview_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAutoMergingPreview_request::asJsonObject() const {
    QJsonObject obj;
    if (m_consolidation.isSet()) {
        obj.insert(QString("Consolidation"), ::OpenAPI::toJsonValue(m_consolidation));
    }
    if (m_conflict_resolution.isSet()) {
        obj.insert(QString("ConflictResolution"), ::OpenAPI::toJsonValue(m_conflict_resolution));
    }
    if (m_min_allowed_confidence_score_for_merging_isSet) {
        obj.insert(QString("MinAllowedConfidenceScoreForMerging"), ::OpenAPI::toJsonValue(m_min_allowed_confidence_score_for_merging));
    }
    return obj;
}

OAIGetAutoMergingPreview_request_Consolidation OAIGetAutoMergingPreview_request::getConsolidation() const {
    return m_consolidation;
}
void OAIGetAutoMergingPreview_request::setConsolidation(const OAIGetAutoMergingPreview_request_Consolidation &consolidation) {
    m_consolidation = consolidation;
    m_consolidation_isSet = true;
}

bool OAIGetAutoMergingPreview_request::is_consolidation_Set() const{
    return m_consolidation_isSet;
}

bool OAIGetAutoMergingPreview_request::is_consolidation_Valid() const{
    return m_consolidation_isValid;
}

OAIGetAutoMergingPreview_request_ConflictResolution OAIGetAutoMergingPreview_request::getConflictResolution() const {
    return m_conflict_resolution;
}
void OAIGetAutoMergingPreview_request::setConflictResolution(const OAIGetAutoMergingPreview_request_ConflictResolution &conflict_resolution) {
    m_conflict_resolution = conflict_resolution;
    m_conflict_resolution_isSet = true;
}

bool OAIGetAutoMergingPreview_request::is_conflict_resolution_Set() const{
    return m_conflict_resolution_isSet;
}

bool OAIGetAutoMergingPreview_request::is_conflict_resolution_Valid() const{
    return m_conflict_resolution_isValid;
}

double OAIGetAutoMergingPreview_request::getMinAllowedConfidenceScoreForMerging() const {
    return m_min_allowed_confidence_score_for_merging;
}
void OAIGetAutoMergingPreview_request::setMinAllowedConfidenceScoreForMerging(const double &min_allowed_confidence_score_for_merging) {
    m_min_allowed_confidence_score_for_merging = min_allowed_confidence_score_for_merging;
    m_min_allowed_confidence_score_for_merging_isSet = true;
}

bool OAIGetAutoMergingPreview_request::is_min_allowed_confidence_score_for_merging_Set() const{
    return m_min_allowed_confidence_score_for_merging_isSet;
}

bool OAIGetAutoMergingPreview_request::is_min_allowed_confidence_score_for_merging_Valid() const{
    return m_min_allowed_confidence_score_for_merging_isValid;
}

bool OAIGetAutoMergingPreview_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consolidation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conflict_resolution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_allowed_confidence_score_for_merging_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAutoMergingPreview_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_consolidation_isValid && m_conflict_resolution_isValid && true;
}

} // namespace OpenAPI
