/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchProfilesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchProfilesRequest::OAISearchProfilesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchProfilesRequest::OAISearchProfilesRequest() {
    this->initializeModel();
}

OAISearchProfilesRequest::~OAISearchProfilesRequest() {}

void OAISearchProfilesRequest::initializeModel() {

    m_key_name_isSet = false;
    m_key_name_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;

    m_additional_search_keys_isSet = false;
    m_additional_search_keys_isValid = false;

    m_logical_operator_isSet = false;
    m_logical_operator_isValid = false;
}

void OAISearchProfilesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchProfilesRequest::fromJsonObject(QJsonObject json) {

    m_key_name_isValid = ::OpenAPI::fromJsonValue(m_key_name, json[QString("KeyName")]);
    m_key_name_isSet = !json[QString("KeyName")].isNull() && m_key_name_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("Values")]);
    m_values_isSet = !json[QString("Values")].isNull() && m_values_isValid;

    m_additional_search_keys_isValid = ::OpenAPI::fromJsonValue(m_additional_search_keys, json[QString("AdditionalSearchKeys")]);
    m_additional_search_keys_isSet = !json[QString("AdditionalSearchKeys")].isNull() && m_additional_search_keys_isValid;

    m_logical_operator_isValid = ::OpenAPI::fromJsonValue(m_logical_operator, json[QString("LogicalOperator")]);
    m_logical_operator_isSet = !json[QString("LogicalOperator")].isNull() && m_logical_operator_isValid;
}

QString OAISearchProfilesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchProfilesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_key_name_isSet) {
        obj.insert(QString("KeyName"), ::OpenAPI::toJsonValue(m_key_name));
    }
    if (m_values.isSet()) {
        obj.insert(QString("Values"), ::OpenAPI::toJsonValue(m_values));
    }
    if (m_additional_search_keys.isSet()) {
        obj.insert(QString("AdditionalSearchKeys"), ::OpenAPI::toJsonValue(m_additional_search_keys));
    }
    if (m_logical_operator.isSet()) {
        obj.insert(QString("LogicalOperator"), ::OpenAPI::toJsonValue(m_logical_operator));
    }
    return obj;
}

QString OAISearchProfilesRequest::getKeyName() const {
    return m_key_name;
}
void OAISearchProfilesRequest::setKeyName(const QString &key_name) {
    m_key_name = key_name;
    m_key_name_isSet = true;
}

bool OAISearchProfilesRequest::is_key_name_Set() const{
    return m_key_name_isSet;
}

bool OAISearchProfilesRequest::is_key_name_Valid() const{
    return m_key_name_isValid;
}

QList OAISearchProfilesRequest::getValues() const {
    return m_values;
}
void OAISearchProfilesRequest::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAISearchProfilesRequest::is_values_Set() const{
    return m_values_isSet;
}

bool OAISearchProfilesRequest::is_values_Valid() const{
    return m_values_isValid;
}

QList OAISearchProfilesRequest::getAdditionalSearchKeys() const {
    return m_additional_search_keys;
}
void OAISearchProfilesRequest::setAdditionalSearchKeys(const QList &additional_search_keys) {
    m_additional_search_keys = additional_search_keys;
    m_additional_search_keys_isSet = true;
}

bool OAISearchProfilesRequest::is_additional_search_keys_Set() const{
    return m_additional_search_keys_isSet;
}

bool OAISearchProfilesRequest::is_additional_search_keys_Valid() const{
    return m_additional_search_keys_isValid;
}

OAILogicalOperator OAISearchProfilesRequest::getLogicalOperator() const {
    return m_logical_operator;
}
void OAISearchProfilesRequest::setLogicalOperator(const OAILogicalOperator &logical_operator) {
    m_logical_operator = logical_operator;
    m_logical_operator_isSet = true;
}

bool OAISearchProfilesRequest::is_logical_operator_Set() const{
    return m_logical_operator_isSet;
}

bool OAISearchProfilesRequest::is_logical_operator_Valid() const{
    return m_logical_operator_isValid;
}

bool OAISearchProfilesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_search_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logical_operator.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchProfilesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_name_isValid && m_values_isValid && true;
}

} // namespace OpenAPI
