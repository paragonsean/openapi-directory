/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutIntegration_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutIntegration_request::OAIPutIntegration_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutIntegration_request::OAIPutIntegration_request() {
    this->initializeModel();
}

OAIPutIntegration_request::~OAIPutIntegration_request() {}

void OAIPutIntegration_request::initializeModel() {

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_object_type_name_isSet = false;
    m_object_type_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_flow_definition_isSet = false;
    m_flow_definition_isValid = false;

    m_object_type_names_isSet = false;
    m_object_type_names_isValid = false;
}

void OAIPutIntegration_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutIntegration_request::fromJsonObject(QJsonObject json) {

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("Uri")]);
    m_uri_isSet = !json[QString("Uri")].isNull() && m_uri_isValid;

    m_object_type_name_isValid = ::OpenAPI::fromJsonValue(m_object_type_name, json[QString("ObjectTypeName")]);
    m_object_type_name_isSet = !json[QString("ObjectTypeName")].isNull() && m_object_type_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_flow_definition_isValid = ::OpenAPI::fromJsonValue(m_flow_definition, json[QString("FlowDefinition")]);
    m_flow_definition_isSet = !json[QString("FlowDefinition")].isNull() && m_flow_definition_isValid;

    m_object_type_names_isValid = ::OpenAPI::fromJsonValue(m_object_type_names, json[QString("ObjectTypeNames")]);
    m_object_type_names_isSet = !json[QString("ObjectTypeNames")].isNull() && m_object_type_names_isValid;
}

QString OAIPutIntegration_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutIntegration_request::asJsonObject() const {
    QJsonObject obj;
    if (m_uri_isSet) {
        obj.insert(QString("Uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_object_type_name_isSet) {
        obj.insert(QString("ObjectTypeName"), ::OpenAPI::toJsonValue(m_object_type_name));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_flow_definition.isSet()) {
        obj.insert(QString("FlowDefinition"), ::OpenAPI::toJsonValue(m_flow_definition));
    }
    if (m_object_type_names.size() > 0) {
        obj.insert(QString("ObjectTypeNames"), ::OpenAPI::toJsonValue(m_object_type_names));
    }
    return obj;
}

QString OAIPutIntegration_request::getUri() const {
    return m_uri;
}
void OAIPutIntegration_request::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIPutIntegration_request::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIPutIntegration_request::is_uri_Valid() const{
    return m_uri_isValid;
}

QString OAIPutIntegration_request::getObjectTypeName() const {
    return m_object_type_name;
}
void OAIPutIntegration_request::setObjectTypeName(const QString &object_type_name) {
    m_object_type_name = object_type_name;
    m_object_type_name_isSet = true;
}

bool OAIPutIntegration_request::is_object_type_name_Set() const{
    return m_object_type_name_isSet;
}

bool OAIPutIntegration_request::is_object_type_name_Valid() const{
    return m_object_type_name_isValid;
}

QMap<QString, QString> OAIPutIntegration_request::getTags() const {
    return m_tags;
}
void OAIPutIntegration_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIPutIntegration_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIPutIntegration_request::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIPutIntegration_request_FlowDefinition OAIPutIntegration_request::getFlowDefinition() const {
    return m_flow_definition;
}
void OAIPutIntegration_request::setFlowDefinition(const OAIPutIntegration_request_FlowDefinition &flow_definition) {
    m_flow_definition = flow_definition;
    m_flow_definition_isSet = true;
}

bool OAIPutIntegration_request::is_flow_definition_Set() const{
    return m_flow_definition_isSet;
}

bool OAIPutIntegration_request::is_flow_definition_Valid() const{
    return m_flow_definition_isValid;
}

QMap<QString, QString> OAIPutIntegration_request::getObjectTypeNames() const {
    return m_object_type_names;
}
void OAIPutIntegration_request::setObjectTypeNames(const QMap<QString, QString> &object_type_names) {
    m_object_type_names = object_type_names;
    m_object_type_names_isSet = true;
}

bool OAIPutIntegration_request::is_object_type_names_Set() const{
    return m_object_type_names_isSet;
}

bool OAIPutIntegration_request::is_object_type_names_Valid() const{
    return m_object_type_names_isValid;
}

bool OAIPutIntegration_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_flow_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutIntegration_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
