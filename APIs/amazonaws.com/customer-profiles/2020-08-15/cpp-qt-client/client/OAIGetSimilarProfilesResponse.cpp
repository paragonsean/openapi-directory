/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSimilarProfilesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSimilarProfilesResponse::OAIGetSimilarProfilesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSimilarProfilesResponse::OAIGetSimilarProfilesResponse() {
    this->initializeModel();
}

OAIGetSimilarProfilesResponse::~OAIGetSimilarProfilesResponse() {}

void OAIGetSimilarProfilesResponse::initializeModel() {

    m_profile_ids_isSet = false;
    m_profile_ids_isValid = false;

    m_match_id_isSet = false;
    m_match_id_isValid = false;

    m_match_type_isSet = false;
    m_match_type_isValid = false;

    m_rule_level_isSet = false;
    m_rule_level_isValid = false;

    m_confidence_score_isSet = false;
    m_confidence_score_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIGetSimilarProfilesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSimilarProfilesResponse::fromJsonObject(QJsonObject json) {

    m_profile_ids_isValid = ::OpenAPI::fromJsonValue(m_profile_ids, json[QString("ProfileIds")]);
    m_profile_ids_isSet = !json[QString("ProfileIds")].isNull() && m_profile_ids_isValid;

    m_match_id_isValid = ::OpenAPI::fromJsonValue(m_match_id, json[QString("MatchId")]);
    m_match_id_isSet = !json[QString("MatchId")].isNull() && m_match_id_isValid;

    m_match_type_isValid = ::OpenAPI::fromJsonValue(m_match_type, json[QString("MatchType")]);
    m_match_type_isSet = !json[QString("MatchType")].isNull() && m_match_type_isValid;

    m_rule_level_isValid = ::OpenAPI::fromJsonValue(m_rule_level, json[QString("RuleLevel")]);
    m_rule_level_isSet = !json[QString("RuleLevel")].isNull() && m_rule_level_isValid;

    m_confidence_score_isValid = ::OpenAPI::fromJsonValue(m_confidence_score, json[QString("ConfidenceScore")]);
    m_confidence_score_isSet = !json[QString("ConfidenceScore")].isNull() && m_confidence_score_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIGetSimilarProfilesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSimilarProfilesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_profile_ids.isSet()) {
        obj.insert(QString("ProfileIds"), ::OpenAPI::toJsonValue(m_profile_ids));
    }
    if (m_match_id_isSet) {
        obj.insert(QString("MatchId"), ::OpenAPI::toJsonValue(m_match_id));
    }
    if (m_match_type.isSet()) {
        obj.insert(QString("MatchType"), ::OpenAPI::toJsonValue(m_match_type));
    }
    if (m_rule_level_isSet) {
        obj.insert(QString("RuleLevel"), ::OpenAPI::toJsonValue(m_rule_level));
    }
    if (m_confidence_score_isSet) {
        obj.insert(QString("ConfidenceScore"), ::OpenAPI::toJsonValue(m_confidence_score));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIGetSimilarProfilesResponse::getProfileIds() const {
    return m_profile_ids;
}
void OAIGetSimilarProfilesResponse::setProfileIds(const QList &profile_ids) {
    m_profile_ids = profile_ids;
    m_profile_ids_isSet = true;
}

bool OAIGetSimilarProfilesResponse::is_profile_ids_Set() const{
    return m_profile_ids_isSet;
}

bool OAIGetSimilarProfilesResponse::is_profile_ids_Valid() const{
    return m_profile_ids_isValid;
}

QString OAIGetSimilarProfilesResponse::getMatchId() const {
    return m_match_id;
}
void OAIGetSimilarProfilesResponse::setMatchId(const QString &match_id) {
    m_match_id = match_id;
    m_match_id_isSet = true;
}

bool OAIGetSimilarProfilesResponse::is_match_id_Set() const{
    return m_match_id_isSet;
}

bool OAIGetSimilarProfilesResponse::is_match_id_Valid() const{
    return m_match_id_isValid;
}

OAIMatchType OAIGetSimilarProfilesResponse::getMatchType() const {
    return m_match_type;
}
void OAIGetSimilarProfilesResponse::setMatchType(const OAIMatchType &match_type) {
    m_match_type = match_type;
    m_match_type_isSet = true;
}

bool OAIGetSimilarProfilesResponse::is_match_type_Set() const{
    return m_match_type_isSet;
}

bool OAIGetSimilarProfilesResponse::is_match_type_Valid() const{
    return m_match_type_isValid;
}

qint32 OAIGetSimilarProfilesResponse::getRuleLevel() const {
    return m_rule_level;
}
void OAIGetSimilarProfilesResponse::setRuleLevel(const qint32 &rule_level) {
    m_rule_level = rule_level;
    m_rule_level_isSet = true;
}

bool OAIGetSimilarProfilesResponse::is_rule_level_Set() const{
    return m_rule_level_isSet;
}

bool OAIGetSimilarProfilesResponse::is_rule_level_Valid() const{
    return m_rule_level_isValid;
}

double OAIGetSimilarProfilesResponse::getConfidenceScore() const {
    return m_confidence_score;
}
void OAIGetSimilarProfilesResponse::setConfidenceScore(const double &confidence_score) {
    m_confidence_score = confidence_score;
    m_confidence_score_isSet = true;
}

bool OAIGetSimilarProfilesResponse::is_confidence_score_Set() const{
    return m_confidence_score_isSet;
}

bool OAIGetSimilarProfilesResponse::is_confidence_score_Valid() const{
    return m_confidence_score_isValid;
}

QString OAIGetSimilarProfilesResponse::getNextToken() const {
    return m_next_token;
}
void OAIGetSimilarProfilesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetSimilarProfilesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetSimilarProfilesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIGetSimilarProfilesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_profile_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSimilarProfilesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
