/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMergeProfilesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMergeProfilesRequest::OAIMergeProfilesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMergeProfilesRequest::OAIMergeProfilesRequest() {
    this->initializeModel();
}

OAIMergeProfilesRequest::~OAIMergeProfilesRequest() {}

void OAIMergeProfilesRequest::initializeModel() {

    m_main_profile_id_isSet = false;
    m_main_profile_id_isValid = false;

    m_profile_ids_to_be_merged_isSet = false;
    m_profile_ids_to_be_merged_isValid = false;

    m_field_source_profile_ids_isSet = false;
    m_field_source_profile_ids_isValid = false;
}

void OAIMergeProfilesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMergeProfilesRequest::fromJsonObject(QJsonObject json) {

    m_main_profile_id_isValid = ::OpenAPI::fromJsonValue(m_main_profile_id, json[QString("MainProfileId")]);
    m_main_profile_id_isSet = !json[QString("MainProfileId")].isNull() && m_main_profile_id_isValid;

    m_profile_ids_to_be_merged_isValid = ::OpenAPI::fromJsonValue(m_profile_ids_to_be_merged, json[QString("ProfileIdsToBeMerged")]);
    m_profile_ids_to_be_merged_isSet = !json[QString("ProfileIdsToBeMerged")].isNull() && m_profile_ids_to_be_merged_isValid;

    m_field_source_profile_ids_isValid = ::OpenAPI::fromJsonValue(m_field_source_profile_ids, json[QString("FieldSourceProfileIds")]);
    m_field_source_profile_ids_isSet = !json[QString("FieldSourceProfileIds")].isNull() && m_field_source_profile_ids_isValid;
}

QString OAIMergeProfilesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMergeProfilesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_main_profile_id_isSet) {
        obj.insert(QString("MainProfileId"), ::OpenAPI::toJsonValue(m_main_profile_id));
    }
    if (m_profile_ids_to_be_merged.isSet()) {
        obj.insert(QString("ProfileIdsToBeMerged"), ::OpenAPI::toJsonValue(m_profile_ids_to_be_merged));
    }
    if (m_field_source_profile_ids.isSet()) {
        obj.insert(QString("FieldSourceProfileIds"), ::OpenAPI::toJsonValue(m_field_source_profile_ids));
    }
    return obj;
}

QString OAIMergeProfilesRequest::getMainProfileId() const {
    return m_main_profile_id;
}
void OAIMergeProfilesRequest::setMainProfileId(const QString &main_profile_id) {
    m_main_profile_id = main_profile_id;
    m_main_profile_id_isSet = true;
}

bool OAIMergeProfilesRequest::is_main_profile_id_Set() const{
    return m_main_profile_id_isSet;
}

bool OAIMergeProfilesRequest::is_main_profile_id_Valid() const{
    return m_main_profile_id_isValid;
}

QList OAIMergeProfilesRequest::getProfileIdsToBeMerged() const {
    return m_profile_ids_to_be_merged;
}
void OAIMergeProfilesRequest::setProfileIdsToBeMerged(const QList &profile_ids_to_be_merged) {
    m_profile_ids_to_be_merged = profile_ids_to_be_merged;
    m_profile_ids_to_be_merged_isSet = true;
}

bool OAIMergeProfilesRequest::is_profile_ids_to_be_merged_Set() const{
    return m_profile_ids_to_be_merged_isSet;
}

bool OAIMergeProfilesRequest::is_profile_ids_to_be_merged_Valid() const{
    return m_profile_ids_to_be_merged_isValid;
}

OAIMergeProfilesRequest_FieldSourceProfileIds OAIMergeProfilesRequest::getFieldSourceProfileIds() const {
    return m_field_source_profile_ids;
}
void OAIMergeProfilesRequest::setFieldSourceProfileIds(const OAIMergeProfilesRequest_FieldSourceProfileIds &field_source_profile_ids) {
    m_field_source_profile_ids = field_source_profile_ids;
    m_field_source_profile_ids_isSet = true;
}

bool OAIMergeProfilesRequest::is_field_source_profile_ids_Set() const{
    return m_field_source_profile_ids_isSet;
}

bool OAIMergeProfilesRequest::is_field_source_profile_ids_Valid() const{
    return m_field_source_profile_ids_isValid;
}

bool OAIMergeProfilesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_main_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_ids_to_be_merged.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_source_profile_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMergeProfilesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_main_profile_id_isValid && m_profile_ids_to_be_merged_isValid && true;
}

} // namespace OpenAPI
