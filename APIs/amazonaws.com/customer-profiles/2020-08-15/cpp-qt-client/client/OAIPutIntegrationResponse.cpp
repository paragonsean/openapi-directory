/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutIntegrationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutIntegrationResponse::OAIPutIntegrationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutIntegrationResponse::OAIPutIntegrationResponse() {
    this->initializeModel();
}

OAIPutIntegrationResponse::~OAIPutIntegrationResponse() {}

void OAIPutIntegrationResponse::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_object_type_name_isSet = false;
    m_object_type_name_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_object_type_names_isSet = false;
    m_object_type_names_isValid = false;

    m_workflow_id_isSet = false;
    m_workflow_id_isValid = false;

    m_is_unstructured_isSet = false;
    m_is_unstructured_isValid = false;
}

void OAIPutIntegrationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutIntegrationResponse::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("Uri")]);
    m_uri_isSet = !json[QString("Uri")].isNull() && m_uri_isValid;

    m_object_type_name_isValid = ::OpenAPI::fromJsonValue(m_object_type_name, json[QString("ObjectTypeName")]);
    m_object_type_name_isSet = !json[QString("ObjectTypeName")].isNull() && m_object_type_name_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("LastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("LastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_object_type_names_isValid = ::OpenAPI::fromJsonValue(m_object_type_names, json[QString("ObjectTypeNames")]);
    m_object_type_names_isSet = !json[QString("ObjectTypeNames")].isNull() && m_object_type_names_isValid;

    m_workflow_id_isValid = ::OpenAPI::fromJsonValue(m_workflow_id, json[QString("WorkflowId")]);
    m_workflow_id_isSet = !json[QString("WorkflowId")].isNull() && m_workflow_id_isValid;

    m_is_unstructured_isValid = ::OpenAPI::fromJsonValue(m_is_unstructured, json[QString("IsUnstructured")]);
    m_is_unstructured_isSet = !json[QString("IsUnstructured")].isNull() && m_is_unstructured_isValid;
}

QString OAIPutIntegrationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutIntegrationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_uri_isSet) {
        obj.insert(QString("Uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_object_type_name_isSet) {
        obj.insert(QString("ObjectTypeName"), ::OpenAPI::toJsonValue(m_object_type_name));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("LastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_object_type_names.isSet()) {
        obj.insert(QString("ObjectTypeNames"), ::OpenAPI::toJsonValue(m_object_type_names));
    }
    if (m_workflow_id_isSet) {
        obj.insert(QString("WorkflowId"), ::OpenAPI::toJsonValue(m_workflow_id));
    }
    if (m_is_unstructured_isSet) {
        obj.insert(QString("IsUnstructured"), ::OpenAPI::toJsonValue(m_is_unstructured));
    }
    return obj;
}

QString OAIPutIntegrationResponse::getDomainName() const {
    return m_domain_name;
}
void OAIPutIntegrationResponse::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIPutIntegrationResponse::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIPutIntegrationResponse::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QString OAIPutIntegrationResponse::getUri() const {
    return m_uri;
}
void OAIPutIntegrationResponse::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIPutIntegrationResponse::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIPutIntegrationResponse::is_uri_Valid() const{
    return m_uri_isValid;
}

QString OAIPutIntegrationResponse::getObjectTypeName() const {
    return m_object_type_name;
}
void OAIPutIntegrationResponse::setObjectTypeName(const QString &object_type_name) {
    m_object_type_name = object_type_name;
    m_object_type_name_isSet = true;
}

bool OAIPutIntegrationResponse::is_object_type_name_Set() const{
    return m_object_type_name_isSet;
}

bool OAIPutIntegrationResponse::is_object_type_name_Valid() const{
    return m_object_type_name_isValid;
}

QDateTime OAIPutIntegrationResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIPutIntegrationResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPutIntegrationResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPutIntegrationResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIPutIntegrationResponse::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIPutIntegrationResponse::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIPutIntegrationResponse::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIPutIntegrationResponse::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

QMap OAIPutIntegrationResponse::getTags() const {
    return m_tags;
}
void OAIPutIntegrationResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIPutIntegrationResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIPutIntegrationResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

QMap OAIPutIntegrationResponse::getObjectTypeNames() const {
    return m_object_type_names;
}
void OAIPutIntegrationResponse::setObjectTypeNames(const QMap &object_type_names) {
    m_object_type_names = object_type_names;
    m_object_type_names_isSet = true;
}

bool OAIPutIntegrationResponse::is_object_type_names_Set() const{
    return m_object_type_names_isSet;
}

bool OAIPutIntegrationResponse::is_object_type_names_Valid() const{
    return m_object_type_names_isValid;
}

QString OAIPutIntegrationResponse::getWorkflowId() const {
    return m_workflow_id;
}
void OAIPutIntegrationResponse::setWorkflowId(const QString &workflow_id) {
    m_workflow_id = workflow_id;
    m_workflow_id_isSet = true;
}

bool OAIPutIntegrationResponse::is_workflow_id_Set() const{
    return m_workflow_id_isSet;
}

bool OAIPutIntegrationResponse::is_workflow_id_Valid() const{
    return m_workflow_id_isValid;
}

bool OAIPutIntegrationResponse::getIsUnstructured() const {
    return m_is_unstructured;
}
void OAIPutIntegrationResponse::setIsUnstructured(const bool &is_unstructured) {
    m_is_unstructured = is_unstructured;
    m_is_unstructured_isSet = true;
}

bool OAIPutIntegrationResponse::is_is_unstructured_Set() const{
    return m_is_unstructured_isSet;
}

bool OAIPutIntegrationResponse::is_is_unstructured_Valid() const{
    return m_is_unstructured_isValid;
}

bool OAIPutIntegrationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_unstructured_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutIntegrationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_name_isValid && m_uri_isValid && m_created_at_isValid && m_last_updated_at_isValid && true;
}

} // namespace OpenAPI
