/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAutoMergingPreviewResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAutoMergingPreviewResponse::OAIGetAutoMergingPreviewResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAutoMergingPreviewResponse::OAIGetAutoMergingPreviewResponse() {
    this->initializeModel();
}

OAIGetAutoMergingPreviewResponse::~OAIGetAutoMergingPreviewResponse() {}

void OAIGetAutoMergingPreviewResponse::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_number_of_matches_in_sample_isSet = false;
    m_number_of_matches_in_sample_isValid = false;

    m_number_of_profiles_in_sample_isSet = false;
    m_number_of_profiles_in_sample_isValid = false;

    m_number_of_profiles_will_be_merged_isSet = false;
    m_number_of_profiles_will_be_merged_isValid = false;
}

void OAIGetAutoMergingPreviewResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAutoMergingPreviewResponse::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_number_of_matches_in_sample_isValid = ::OpenAPI::fromJsonValue(m_number_of_matches_in_sample, json[QString("NumberOfMatchesInSample")]);
    m_number_of_matches_in_sample_isSet = !json[QString("NumberOfMatchesInSample")].isNull() && m_number_of_matches_in_sample_isValid;

    m_number_of_profiles_in_sample_isValid = ::OpenAPI::fromJsonValue(m_number_of_profiles_in_sample, json[QString("NumberOfProfilesInSample")]);
    m_number_of_profiles_in_sample_isSet = !json[QString("NumberOfProfilesInSample")].isNull() && m_number_of_profiles_in_sample_isValid;

    m_number_of_profiles_will_be_merged_isValid = ::OpenAPI::fromJsonValue(m_number_of_profiles_will_be_merged, json[QString("NumberOfProfilesWillBeMerged")]);
    m_number_of_profiles_will_be_merged_isSet = !json[QString("NumberOfProfilesWillBeMerged")].isNull() && m_number_of_profiles_will_be_merged_isValid;
}

QString OAIGetAutoMergingPreviewResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAutoMergingPreviewResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_number_of_matches_in_sample_isSet) {
        obj.insert(QString("NumberOfMatchesInSample"), ::OpenAPI::toJsonValue(m_number_of_matches_in_sample));
    }
    if (m_number_of_profiles_in_sample_isSet) {
        obj.insert(QString("NumberOfProfilesInSample"), ::OpenAPI::toJsonValue(m_number_of_profiles_in_sample));
    }
    if (m_number_of_profiles_will_be_merged_isSet) {
        obj.insert(QString("NumberOfProfilesWillBeMerged"), ::OpenAPI::toJsonValue(m_number_of_profiles_will_be_merged));
    }
    return obj;
}

QString OAIGetAutoMergingPreviewResponse::getDomainName() const {
    return m_domain_name;
}
void OAIGetAutoMergingPreviewResponse::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIGetAutoMergingPreviewResponse::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIGetAutoMergingPreviewResponse::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

qint32 OAIGetAutoMergingPreviewResponse::getNumberOfMatchesInSample() const {
    return m_number_of_matches_in_sample;
}
void OAIGetAutoMergingPreviewResponse::setNumberOfMatchesInSample(const qint32 &number_of_matches_in_sample) {
    m_number_of_matches_in_sample = number_of_matches_in_sample;
    m_number_of_matches_in_sample_isSet = true;
}

bool OAIGetAutoMergingPreviewResponse::is_number_of_matches_in_sample_Set() const{
    return m_number_of_matches_in_sample_isSet;
}

bool OAIGetAutoMergingPreviewResponse::is_number_of_matches_in_sample_Valid() const{
    return m_number_of_matches_in_sample_isValid;
}

qint32 OAIGetAutoMergingPreviewResponse::getNumberOfProfilesInSample() const {
    return m_number_of_profiles_in_sample;
}
void OAIGetAutoMergingPreviewResponse::setNumberOfProfilesInSample(const qint32 &number_of_profiles_in_sample) {
    m_number_of_profiles_in_sample = number_of_profiles_in_sample;
    m_number_of_profiles_in_sample_isSet = true;
}

bool OAIGetAutoMergingPreviewResponse::is_number_of_profiles_in_sample_Set() const{
    return m_number_of_profiles_in_sample_isSet;
}

bool OAIGetAutoMergingPreviewResponse::is_number_of_profiles_in_sample_Valid() const{
    return m_number_of_profiles_in_sample_isValid;
}

qint32 OAIGetAutoMergingPreviewResponse::getNumberOfProfilesWillBeMerged() const {
    return m_number_of_profiles_will_be_merged;
}
void OAIGetAutoMergingPreviewResponse::setNumberOfProfilesWillBeMerged(const qint32 &number_of_profiles_will_be_merged) {
    m_number_of_profiles_will_be_merged = number_of_profiles_will_be_merged;
    m_number_of_profiles_will_be_merged_isSet = true;
}

bool OAIGetAutoMergingPreviewResponse::is_number_of_profiles_will_be_merged_Set() const{
    return m_number_of_profiles_will_be_merged_isSet;
}

bool OAIGetAutoMergingPreviewResponse::is_number_of_profiles_will_be_merged_Valid() const{
    return m_number_of_profiles_will_be_merged_isValid;
}

bool OAIGetAutoMergingPreviewResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_matches_in_sample_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_profiles_in_sample_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_profiles_will_be_merged_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAutoMergingPreviewResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_name_isValid && true;
}

} // namespace OpenAPI
