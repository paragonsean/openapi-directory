/**
 * Amazon Connect Customer Profiles
 * <fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you're new to Amazon Connect, you might find it helpful to review the <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/\">Amazon Connect Administrator Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-08-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDomainRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDomainRequest::OAICreateDomainRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDomainRequest::OAICreateDomainRequest() {
    this->initializeModel();
}

OAICreateDomainRequest::~OAICreateDomainRequest() {}

void OAICreateDomainRequest::initializeModel() {

    m_default_expiration_days_isSet = false;
    m_default_expiration_days_isValid = false;

    m_default_encryption_key_isSet = false;
    m_default_encryption_key_isValid = false;

    m_dead_letter_queue_url_isSet = false;
    m_dead_letter_queue_url_isValid = false;

    m_matching_isSet = false;
    m_matching_isValid = false;

    m_rule_based_matching_isSet = false;
    m_rule_based_matching_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateDomainRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDomainRequest::fromJsonObject(QJsonObject json) {

    m_default_expiration_days_isValid = ::OpenAPI::fromJsonValue(m_default_expiration_days, json[QString("DefaultExpirationDays")]);
    m_default_expiration_days_isSet = !json[QString("DefaultExpirationDays")].isNull() && m_default_expiration_days_isValid;

    m_default_encryption_key_isValid = ::OpenAPI::fromJsonValue(m_default_encryption_key, json[QString("DefaultEncryptionKey")]);
    m_default_encryption_key_isSet = !json[QString("DefaultEncryptionKey")].isNull() && m_default_encryption_key_isValid;

    m_dead_letter_queue_url_isValid = ::OpenAPI::fromJsonValue(m_dead_letter_queue_url, json[QString("DeadLetterQueueUrl")]);
    m_dead_letter_queue_url_isSet = !json[QString("DeadLetterQueueUrl")].isNull() && m_dead_letter_queue_url_isValid;

    m_matching_isValid = ::OpenAPI::fromJsonValue(m_matching, json[QString("Matching")]);
    m_matching_isSet = !json[QString("Matching")].isNull() && m_matching_isValid;

    m_rule_based_matching_isValid = ::OpenAPI::fromJsonValue(m_rule_based_matching, json[QString("RuleBasedMatching")]);
    m_rule_based_matching_isSet = !json[QString("RuleBasedMatching")].isNull() && m_rule_based_matching_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateDomainRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDomainRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_default_expiration_days_isSet) {
        obj.insert(QString("DefaultExpirationDays"), ::OpenAPI::toJsonValue(m_default_expiration_days));
    }
    if (m_default_encryption_key_isSet) {
        obj.insert(QString("DefaultEncryptionKey"), ::OpenAPI::toJsonValue(m_default_encryption_key));
    }
    if (m_dead_letter_queue_url_isSet) {
        obj.insert(QString("DeadLetterQueueUrl"), ::OpenAPI::toJsonValue(m_dead_letter_queue_url));
    }
    if (m_matching.isSet()) {
        obj.insert(QString("Matching"), ::OpenAPI::toJsonValue(m_matching));
    }
    if (m_rule_based_matching.isSet()) {
        obj.insert(QString("RuleBasedMatching"), ::OpenAPI::toJsonValue(m_rule_based_matching));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

qint32 OAICreateDomainRequest::getDefaultExpirationDays() const {
    return m_default_expiration_days;
}
void OAICreateDomainRequest::setDefaultExpirationDays(const qint32 &default_expiration_days) {
    m_default_expiration_days = default_expiration_days;
    m_default_expiration_days_isSet = true;
}

bool OAICreateDomainRequest::is_default_expiration_days_Set() const{
    return m_default_expiration_days_isSet;
}

bool OAICreateDomainRequest::is_default_expiration_days_Valid() const{
    return m_default_expiration_days_isValid;
}

QString OAICreateDomainRequest::getDefaultEncryptionKey() const {
    return m_default_encryption_key;
}
void OAICreateDomainRequest::setDefaultEncryptionKey(const QString &default_encryption_key) {
    m_default_encryption_key = default_encryption_key;
    m_default_encryption_key_isSet = true;
}

bool OAICreateDomainRequest::is_default_encryption_key_Set() const{
    return m_default_encryption_key_isSet;
}

bool OAICreateDomainRequest::is_default_encryption_key_Valid() const{
    return m_default_encryption_key_isValid;
}

QString OAICreateDomainRequest::getDeadLetterQueueUrl() const {
    return m_dead_letter_queue_url;
}
void OAICreateDomainRequest::setDeadLetterQueueUrl(const QString &dead_letter_queue_url) {
    m_dead_letter_queue_url = dead_letter_queue_url;
    m_dead_letter_queue_url_isSet = true;
}

bool OAICreateDomainRequest::is_dead_letter_queue_url_Set() const{
    return m_dead_letter_queue_url_isSet;
}

bool OAICreateDomainRequest::is_dead_letter_queue_url_Valid() const{
    return m_dead_letter_queue_url_isValid;
}

OAICreateDomainRequest_Matching OAICreateDomainRequest::getMatching() const {
    return m_matching;
}
void OAICreateDomainRequest::setMatching(const OAICreateDomainRequest_Matching &matching) {
    m_matching = matching;
    m_matching_isSet = true;
}

bool OAICreateDomainRequest::is_matching_Set() const{
    return m_matching_isSet;
}

bool OAICreateDomainRequest::is_matching_Valid() const{
    return m_matching_isValid;
}

OAICreateDomainRequest_RuleBasedMatching OAICreateDomainRequest::getRuleBasedMatching() const {
    return m_rule_based_matching;
}
void OAICreateDomainRequest::setRuleBasedMatching(const OAICreateDomainRequest_RuleBasedMatching &rule_based_matching) {
    m_rule_based_matching = rule_based_matching;
    m_rule_based_matching_isSet = true;
}

bool OAICreateDomainRequest::is_rule_based_matching_Set() const{
    return m_rule_based_matching_isSet;
}

bool OAICreateDomainRequest::is_rule_based_matching_Valid() const{
    return m_rule_based_matching_isValid;
}

QMap OAICreateDomainRequest::getTags() const {
    return m_tags;
}
void OAICreateDomainRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateDomainRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateDomainRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateDomainRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_expiration_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_encryption_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dead_letter_queue_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matching.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_based_matching.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDomainRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_default_expiration_days_isValid && true;
}

} // namespace OpenAPI
