/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUntagColumnOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUntagColumnOperation::OAIUntagColumnOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUntagColumnOperation::OAIUntagColumnOperation() {
    this->initializeModel();
}

OAIUntagColumnOperation::~OAIUntagColumnOperation() {}

void OAIUntagColumnOperation::initializeModel() {

    m_column_name_isSet = false;
    m_column_name_isValid = false;

    m_tag_names_isSet = false;
    m_tag_names_isValid = false;
}

void OAIUntagColumnOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUntagColumnOperation::fromJsonObject(QJsonObject json) {

    m_column_name_isValid = ::OpenAPI::fromJsonValue(m_column_name, json[QString("ColumnName")]);
    m_column_name_isSet = !json[QString("ColumnName")].isNull() && m_column_name_isValid;

    m_tag_names_isValid = ::OpenAPI::fromJsonValue(m_tag_names, json[QString("TagNames")]);
    m_tag_names_isSet = !json[QString("TagNames")].isNull() && m_tag_names_isValid;
}

QString OAIUntagColumnOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUntagColumnOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_column_name_isSet) {
        obj.insert(QString("ColumnName"), ::OpenAPI::toJsonValue(m_column_name));
    }
    if (m_tag_names.isSet()) {
        obj.insert(QString("TagNames"), ::OpenAPI::toJsonValue(m_tag_names));
    }
    return obj;
}

QString OAIUntagColumnOperation::getColumnName() const {
    return m_column_name;
}
void OAIUntagColumnOperation::setColumnName(const QString &column_name) {
    m_column_name = column_name;
    m_column_name_isSet = true;
}

bool OAIUntagColumnOperation::is_column_name_Set() const{
    return m_column_name_isSet;
}

bool OAIUntagColumnOperation::is_column_name_Valid() const{
    return m_column_name_isValid;
}

QList OAIUntagColumnOperation::getTagNames() const {
    return m_tag_names;
}
void OAIUntagColumnOperation::setTagNames(const QList &tag_names) {
    m_tag_names = tag_names;
    m_tag_names_isSet = true;
}

bool OAIUntagColumnOperation::is_tag_names_Set() const{
    return m_tag_names_isSet;
}

bool OAIUntagColumnOperation::is_tag_names_Valid() const{
    return m_tag_names_isValid;
}

bool OAIUntagColumnOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_names.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUntagColumnOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_column_name_isValid && m_tag_names_isValid && true;
}

} // namespace OpenAPI
