/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopicRefreshScheduleSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopicRefreshScheduleSummary::OAITopicRefreshScheduleSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopicRefreshScheduleSummary::OAITopicRefreshScheduleSummary() {
    this->initializeModel();
}

OAITopicRefreshScheduleSummary::~OAITopicRefreshScheduleSummary() {}

void OAITopicRefreshScheduleSummary::initializeModel() {

    m_dataset_id_isSet = false;
    m_dataset_id_isValid = false;

    m_dataset_arn_isSet = false;
    m_dataset_arn_isValid = false;

    m_dataset_name_isSet = false;
    m_dataset_name_isValid = false;

    m_refresh_schedule_isSet = false;
    m_refresh_schedule_isValid = false;
}

void OAITopicRefreshScheduleSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopicRefreshScheduleSummary::fromJsonObject(QJsonObject json) {

    m_dataset_id_isValid = ::OpenAPI::fromJsonValue(m_dataset_id, json[QString("DatasetId")]);
    m_dataset_id_isSet = !json[QString("DatasetId")].isNull() && m_dataset_id_isValid;

    m_dataset_arn_isValid = ::OpenAPI::fromJsonValue(m_dataset_arn, json[QString("DatasetArn")]);
    m_dataset_arn_isSet = !json[QString("DatasetArn")].isNull() && m_dataset_arn_isValid;

    m_dataset_name_isValid = ::OpenAPI::fromJsonValue(m_dataset_name, json[QString("DatasetName")]);
    m_dataset_name_isSet = !json[QString("DatasetName")].isNull() && m_dataset_name_isValid;

    m_refresh_schedule_isValid = ::OpenAPI::fromJsonValue(m_refresh_schedule, json[QString("RefreshSchedule")]);
    m_refresh_schedule_isSet = !json[QString("RefreshSchedule")].isNull() && m_refresh_schedule_isValid;
}

QString OAITopicRefreshScheduleSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopicRefreshScheduleSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset_id_isSet) {
        obj.insert(QString("DatasetId"), ::OpenAPI::toJsonValue(m_dataset_id));
    }
    if (m_dataset_arn_isSet) {
        obj.insert(QString("DatasetArn"), ::OpenAPI::toJsonValue(m_dataset_arn));
    }
    if (m_dataset_name_isSet) {
        obj.insert(QString("DatasetName"), ::OpenAPI::toJsonValue(m_dataset_name));
    }
    if (m_refresh_schedule.isSet()) {
        obj.insert(QString("RefreshSchedule"), ::OpenAPI::toJsonValue(m_refresh_schedule));
    }
    return obj;
}

QString OAITopicRefreshScheduleSummary::getDatasetId() const {
    return m_dataset_id;
}
void OAITopicRefreshScheduleSummary::setDatasetId(const QString &dataset_id) {
    m_dataset_id = dataset_id;
    m_dataset_id_isSet = true;
}

bool OAITopicRefreshScheduleSummary::is_dataset_id_Set() const{
    return m_dataset_id_isSet;
}

bool OAITopicRefreshScheduleSummary::is_dataset_id_Valid() const{
    return m_dataset_id_isValid;
}

QString OAITopicRefreshScheduleSummary::getDatasetArn() const {
    return m_dataset_arn;
}
void OAITopicRefreshScheduleSummary::setDatasetArn(const QString &dataset_arn) {
    m_dataset_arn = dataset_arn;
    m_dataset_arn_isSet = true;
}

bool OAITopicRefreshScheduleSummary::is_dataset_arn_Set() const{
    return m_dataset_arn_isSet;
}

bool OAITopicRefreshScheduleSummary::is_dataset_arn_Valid() const{
    return m_dataset_arn_isValid;
}

QString OAITopicRefreshScheduleSummary::getDatasetName() const {
    return m_dataset_name;
}
void OAITopicRefreshScheduleSummary::setDatasetName(const QString &dataset_name) {
    m_dataset_name = dataset_name;
    m_dataset_name_isSet = true;
}

bool OAITopicRefreshScheduleSummary::is_dataset_name_Set() const{
    return m_dataset_name_isSet;
}

bool OAITopicRefreshScheduleSummary::is_dataset_name_Valid() const{
    return m_dataset_name_isValid;
}

OAIDescribeTopicRefreshScheduleResponse_RefreshSchedule OAITopicRefreshScheduleSummary::getRefreshSchedule() const {
    return m_refresh_schedule;
}
void OAITopicRefreshScheduleSummary::setRefreshSchedule(const OAIDescribeTopicRefreshScheduleResponse_RefreshSchedule &refresh_schedule) {
    m_refresh_schedule = refresh_schedule;
    m_refresh_schedule_isSet = true;
}

bool OAITopicRefreshScheduleSummary::is_refresh_schedule_Set() const{
    return m_refresh_schedule_isSet;
}

bool OAITopicRefreshScheduleSummary::is_refresh_schedule_Valid() const{
    return m_refresh_schedule_isValid;
}

bool OAITopicRefreshScheduleSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopicRefreshScheduleSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
