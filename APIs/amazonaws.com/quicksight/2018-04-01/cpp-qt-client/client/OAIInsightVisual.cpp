/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInsightVisual.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInsightVisual::OAIInsightVisual(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInsightVisual::OAIInsightVisual() {
    this->initializeModel();
}

OAIInsightVisual::~OAIInsightVisual() {}

void OAIInsightVisual::initializeModel() {

    m_visual_id_isSet = false;
    m_visual_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_subtitle_isSet = false;
    m_subtitle_isValid = false;

    m_insight_configuration_isSet = false;
    m_insight_configuration_isValid = false;

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_data_set_identifier_isSet = false;
    m_data_set_identifier_isValid = false;
}

void OAIInsightVisual::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInsightVisual::fromJsonObject(QJsonObject json) {

    m_visual_id_isValid = ::OpenAPI::fromJsonValue(m_visual_id, json[QString("VisualId")]);
    m_visual_id_isSet = !json[QString("VisualId")].isNull() && m_visual_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_subtitle_isValid = ::OpenAPI::fromJsonValue(m_subtitle, json[QString("Subtitle")]);
    m_subtitle_isSet = !json[QString("Subtitle")].isNull() && m_subtitle_isValid;

    m_insight_configuration_isValid = ::OpenAPI::fromJsonValue(m_insight_configuration, json[QString("InsightConfiguration")]);
    m_insight_configuration_isSet = !json[QString("InsightConfiguration")].isNull() && m_insight_configuration_isValid;

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("Actions")]);
    m_actions_isSet = !json[QString("Actions")].isNull() && m_actions_isValid;

    m_data_set_identifier_isValid = ::OpenAPI::fromJsonValue(m_data_set_identifier, json[QString("DataSetIdentifier")]);
    m_data_set_identifier_isSet = !json[QString("DataSetIdentifier")].isNull() && m_data_set_identifier_isValid;
}

QString OAIInsightVisual::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInsightVisual::asJsonObject() const {
    QJsonObject obj;
    if (m_visual_id_isSet) {
        obj.insert(QString("VisualId"), ::OpenAPI::toJsonValue(m_visual_id));
    }
    if (m_title.isSet()) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_subtitle.isSet()) {
        obj.insert(QString("Subtitle"), ::OpenAPI::toJsonValue(m_subtitle));
    }
    if (m_insight_configuration.isSet()) {
        obj.insert(QString("InsightConfiguration"), ::OpenAPI::toJsonValue(m_insight_configuration));
    }
    if (m_actions.isSet()) {
        obj.insert(QString("Actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_data_set_identifier_isSet) {
        obj.insert(QString("DataSetIdentifier"), ::OpenAPI::toJsonValue(m_data_set_identifier));
    }
    return obj;
}

QString OAIInsightVisual::getVisualId() const {
    return m_visual_id;
}
void OAIInsightVisual::setVisualId(const QString &visual_id) {
    m_visual_id = visual_id;
    m_visual_id_isSet = true;
}

bool OAIInsightVisual::is_visual_id_Set() const{
    return m_visual_id_isSet;
}

bool OAIInsightVisual::is_visual_id_Valid() const{
    return m_visual_id_isValid;
}

OAIBarChartVisual_Title OAIInsightVisual::getTitle() const {
    return m_title;
}
void OAIInsightVisual::setTitle(const OAIBarChartVisual_Title &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIInsightVisual::is_title_Set() const{
    return m_title_isSet;
}

bool OAIInsightVisual::is_title_Valid() const{
    return m_title_isValid;
}

OAIBarChartVisual_Subtitle OAIInsightVisual::getSubtitle() const {
    return m_subtitle;
}
void OAIInsightVisual::setSubtitle(const OAIBarChartVisual_Subtitle &subtitle) {
    m_subtitle = subtitle;
    m_subtitle_isSet = true;
}

bool OAIInsightVisual::is_subtitle_Set() const{
    return m_subtitle_isSet;
}

bool OAIInsightVisual::is_subtitle_Valid() const{
    return m_subtitle_isValid;
}

OAIInsightVisual_InsightConfiguration OAIInsightVisual::getInsightConfiguration() const {
    return m_insight_configuration;
}
void OAIInsightVisual::setInsightConfiguration(const OAIInsightVisual_InsightConfiguration &insight_configuration) {
    m_insight_configuration = insight_configuration;
    m_insight_configuration_isSet = true;
}

bool OAIInsightVisual::is_insight_configuration_Set() const{
    return m_insight_configuration_isSet;
}

bool OAIInsightVisual::is_insight_configuration_Valid() const{
    return m_insight_configuration_isValid;
}

QList OAIInsightVisual::getActions() const {
    return m_actions;
}
void OAIInsightVisual::setActions(const QList &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIInsightVisual::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIInsightVisual::is_actions_Valid() const{
    return m_actions_isValid;
}

QString OAIInsightVisual::getDataSetIdentifier() const {
    return m_data_set_identifier;
}
void OAIInsightVisual::setDataSetIdentifier(const QString &data_set_identifier) {
    m_data_set_identifier = data_set_identifier;
    m_data_set_identifier_isSet = true;
}

bool OAIInsightVisual::is_data_set_identifier_Set() const{
    return m_data_set_identifier_isSet;
}

bool OAIInsightVisual::is_data_set_identifier_Valid() const{
    return m_data_set_identifier_isValid;
}

bool OAIInsightVisual::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_visual_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insight_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInsightVisual::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_visual_id_isValid && m_data_set_identifier_isValid && true;
}

} // namespace OpenAPI
