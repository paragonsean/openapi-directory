/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeospatialMapConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeospatialMapConfiguration::OAIGeospatialMapConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeospatialMapConfiguration::OAIGeospatialMapConfiguration() {
    this->initializeModel();
}

OAIGeospatialMapConfiguration::~OAIGeospatialMapConfiguration() {}

void OAIGeospatialMapConfiguration::initializeModel() {

    m_field_wells_isSet = false;
    m_field_wells_isValid = false;

    m_legend_isSet = false;
    m_legend_isValid = false;

    m_tooltip_isSet = false;
    m_tooltip_isValid = false;

    m_window_options_isSet = false;
    m_window_options_isValid = false;

    m_map_style_options_isSet = false;
    m_map_style_options_isValid = false;

    m_point_style_options_isSet = false;
    m_point_style_options_isValid = false;

    m_visual_palette_isSet = false;
    m_visual_palette_isValid = false;
}

void OAIGeospatialMapConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeospatialMapConfiguration::fromJsonObject(QJsonObject json) {

    m_field_wells_isValid = ::OpenAPI::fromJsonValue(m_field_wells, json[QString("FieldWells")]);
    m_field_wells_isSet = !json[QString("FieldWells")].isNull() && m_field_wells_isValid;

    m_legend_isValid = ::OpenAPI::fromJsonValue(m_legend, json[QString("Legend")]);
    m_legend_isSet = !json[QString("Legend")].isNull() && m_legend_isValid;

    m_tooltip_isValid = ::OpenAPI::fromJsonValue(m_tooltip, json[QString("Tooltip")]);
    m_tooltip_isSet = !json[QString("Tooltip")].isNull() && m_tooltip_isValid;

    m_window_options_isValid = ::OpenAPI::fromJsonValue(m_window_options, json[QString("WindowOptions")]);
    m_window_options_isSet = !json[QString("WindowOptions")].isNull() && m_window_options_isValid;

    m_map_style_options_isValid = ::OpenAPI::fromJsonValue(m_map_style_options, json[QString("MapStyleOptions")]);
    m_map_style_options_isSet = !json[QString("MapStyleOptions")].isNull() && m_map_style_options_isValid;

    m_point_style_options_isValid = ::OpenAPI::fromJsonValue(m_point_style_options, json[QString("PointStyleOptions")]);
    m_point_style_options_isSet = !json[QString("PointStyleOptions")].isNull() && m_point_style_options_isValid;

    m_visual_palette_isValid = ::OpenAPI::fromJsonValue(m_visual_palette, json[QString("VisualPalette")]);
    m_visual_palette_isSet = !json[QString("VisualPalette")].isNull() && m_visual_palette_isValid;
}

QString OAIGeospatialMapConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeospatialMapConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_field_wells.isSet()) {
        obj.insert(QString("FieldWells"), ::OpenAPI::toJsonValue(m_field_wells));
    }
    if (m_legend.isSet()) {
        obj.insert(QString("Legend"), ::OpenAPI::toJsonValue(m_legend));
    }
    if (m_tooltip.isSet()) {
        obj.insert(QString("Tooltip"), ::OpenAPI::toJsonValue(m_tooltip));
    }
    if (m_window_options.isSet()) {
        obj.insert(QString("WindowOptions"), ::OpenAPI::toJsonValue(m_window_options));
    }
    if (m_map_style_options.isSet()) {
        obj.insert(QString("MapStyleOptions"), ::OpenAPI::toJsonValue(m_map_style_options));
    }
    if (m_point_style_options.isSet()) {
        obj.insert(QString("PointStyleOptions"), ::OpenAPI::toJsonValue(m_point_style_options));
    }
    if (m_visual_palette.isSet()) {
        obj.insert(QString("VisualPalette"), ::OpenAPI::toJsonValue(m_visual_palette));
    }
    return obj;
}

OAIGeospatialMapConfiguration_FieldWells OAIGeospatialMapConfiguration::getFieldWells() const {
    return m_field_wells;
}
void OAIGeospatialMapConfiguration::setFieldWells(const OAIGeospatialMapConfiguration_FieldWells &field_wells) {
    m_field_wells = field_wells;
    m_field_wells_isSet = true;
}

bool OAIGeospatialMapConfiguration::is_field_wells_Set() const{
    return m_field_wells_isSet;
}

bool OAIGeospatialMapConfiguration::is_field_wells_Valid() const{
    return m_field_wells_isValid;
}

OAIBarChartConfiguration_Legend OAIGeospatialMapConfiguration::getLegend() const {
    return m_legend;
}
void OAIGeospatialMapConfiguration::setLegend(const OAIBarChartConfiguration_Legend &legend) {
    m_legend = legend;
    m_legend_isSet = true;
}

bool OAIGeospatialMapConfiguration::is_legend_Set() const{
    return m_legend_isSet;
}

bool OAIGeospatialMapConfiguration::is_legend_Valid() const{
    return m_legend_isValid;
}

OAIBarChartConfiguration_Tooltip OAIGeospatialMapConfiguration::getTooltip() const {
    return m_tooltip;
}
void OAIGeospatialMapConfiguration::setTooltip(const OAIBarChartConfiguration_Tooltip &tooltip) {
    m_tooltip = tooltip;
    m_tooltip_isSet = true;
}

bool OAIGeospatialMapConfiguration::is_tooltip_Set() const{
    return m_tooltip_isSet;
}

bool OAIGeospatialMapConfiguration::is_tooltip_Valid() const{
    return m_tooltip_isValid;
}

OAIGeospatialMapConfiguration_WindowOptions OAIGeospatialMapConfiguration::getWindowOptions() const {
    return m_window_options;
}
void OAIGeospatialMapConfiguration::setWindowOptions(const OAIGeospatialMapConfiguration_WindowOptions &window_options) {
    m_window_options = window_options;
    m_window_options_isSet = true;
}

bool OAIGeospatialMapConfiguration::is_window_options_Set() const{
    return m_window_options_isSet;
}

bool OAIGeospatialMapConfiguration::is_window_options_Valid() const{
    return m_window_options_isValid;
}

OAIGeospatialMapConfiguration_MapStyleOptions OAIGeospatialMapConfiguration::getMapStyleOptions() const {
    return m_map_style_options;
}
void OAIGeospatialMapConfiguration::setMapStyleOptions(const OAIGeospatialMapConfiguration_MapStyleOptions &map_style_options) {
    m_map_style_options = map_style_options;
    m_map_style_options_isSet = true;
}

bool OAIGeospatialMapConfiguration::is_map_style_options_Set() const{
    return m_map_style_options_isSet;
}

bool OAIGeospatialMapConfiguration::is_map_style_options_Valid() const{
    return m_map_style_options_isValid;
}

OAIGeospatialMapConfiguration_PointStyleOptions OAIGeospatialMapConfiguration::getPointStyleOptions() const {
    return m_point_style_options;
}
void OAIGeospatialMapConfiguration::setPointStyleOptions(const OAIGeospatialMapConfiguration_PointStyleOptions &point_style_options) {
    m_point_style_options = point_style_options;
    m_point_style_options_isSet = true;
}

bool OAIGeospatialMapConfiguration::is_point_style_options_Set() const{
    return m_point_style_options_isSet;
}

bool OAIGeospatialMapConfiguration::is_point_style_options_Valid() const{
    return m_point_style_options_isValid;
}

OAIVisualPalette OAIGeospatialMapConfiguration::getVisualPalette() const {
    return m_visual_palette;
}
void OAIGeospatialMapConfiguration::setVisualPalette(const OAIVisualPalette &visual_palette) {
    m_visual_palette = visual_palette;
    m_visual_palette_isSet = true;
}

bool OAIGeospatialMapConfiguration::is_visual_palette_Set() const{
    return m_visual_palette_isSet;
}

bool OAIGeospatialMapConfiguration::is_visual_palette_Valid() const{
    return m_visual_palette_isValid;
}

bool OAIGeospatialMapConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_wells.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tooltip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_window_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_style_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_style_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visual_palette.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeospatialMapConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
