/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParameterControl_TextField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParameterControl_TextField::OAIParameterControl_TextField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParameterControl_TextField::OAIParameterControl_TextField() {
    this->initializeModel();
}

OAIParameterControl_TextField::~OAIParameterControl_TextField() {}

void OAIParameterControl_TextField::initializeModel() {

    m_parameter_control_id_isSet = false;
    m_parameter_control_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_source_parameter_name_isSet = false;
    m_source_parameter_name_isValid = false;

    m_display_options_isSet = false;
    m_display_options_isValid = false;
}

void OAIParameterControl_TextField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParameterControl_TextField::fromJsonObject(QJsonObject json) {

    m_parameter_control_id_isValid = ::OpenAPI::fromJsonValue(m_parameter_control_id, json[QString("ParameterControlId")]);
    m_parameter_control_id_isSet = !json[QString("ParameterControlId")].isNull() && m_parameter_control_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_source_parameter_name_isValid = ::OpenAPI::fromJsonValue(m_source_parameter_name, json[QString("SourceParameterName")]);
    m_source_parameter_name_isSet = !json[QString("SourceParameterName")].isNull() && m_source_parameter_name_isValid;

    m_display_options_isValid = ::OpenAPI::fromJsonValue(m_display_options, json[QString("DisplayOptions")]);
    m_display_options_isSet = !json[QString("DisplayOptions")].isNull() && m_display_options_isValid;
}

QString OAIParameterControl_TextField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParameterControl_TextField::asJsonObject() const {
    QJsonObject obj;
    if (m_parameter_control_id_isSet) {
        obj.insert(QString("ParameterControlId"), ::OpenAPI::toJsonValue(m_parameter_control_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_source_parameter_name_isSet) {
        obj.insert(QString("SourceParameterName"), ::OpenAPI::toJsonValue(m_source_parameter_name));
    }
    if (m_display_options.isSet()) {
        obj.insert(QString("DisplayOptions"), ::OpenAPI::toJsonValue(m_display_options));
    }
    return obj;
}

QString OAIParameterControl_TextField::getParameterControlId() const {
    return m_parameter_control_id;
}
void OAIParameterControl_TextField::setParameterControlId(const QString &parameter_control_id) {
    m_parameter_control_id = parameter_control_id;
    m_parameter_control_id_isSet = true;
}

bool OAIParameterControl_TextField::is_parameter_control_id_Set() const{
    return m_parameter_control_id_isSet;
}

bool OAIParameterControl_TextField::is_parameter_control_id_Valid() const{
    return m_parameter_control_id_isValid;
}

QString OAIParameterControl_TextField::getTitle() const {
    return m_title;
}
void OAIParameterControl_TextField::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIParameterControl_TextField::is_title_Set() const{
    return m_title_isSet;
}

bool OAIParameterControl_TextField::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIParameterControl_TextField::getSourceParameterName() const {
    return m_source_parameter_name;
}
void OAIParameterControl_TextField::setSourceParameterName(const QString &source_parameter_name) {
    m_source_parameter_name = source_parameter_name;
    m_source_parameter_name_isSet = true;
}

bool OAIParameterControl_TextField::is_source_parameter_name_Set() const{
    return m_source_parameter_name_isSet;
}

bool OAIParameterControl_TextField::is_source_parameter_name_Valid() const{
    return m_source_parameter_name_isValid;
}

OAIFilterTextFieldControl_DisplayOptions OAIParameterControl_TextField::getDisplayOptions() const {
    return m_display_options;
}
void OAIParameterControl_TextField::setDisplayOptions(const OAIFilterTextFieldControl_DisplayOptions &display_options) {
    m_display_options = display_options;
    m_display_options_isSet = true;
}

bool OAIParameterControl_TextField::is_display_options_Set() const{
    return m_display_options_isSet;
}

bool OAIParameterControl_TextField::is_display_options_Valid() const{
    return m_display_options_isValid;
}

bool OAIParameterControl_TextField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parameter_control_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_parameter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParameterControl_TextField::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_parameter_control_id_isValid && m_title_isValid && m_source_parameter_name_isValid && true;
}

} // namespace OpenAPI
