/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParameterDateTimePickerControl.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParameterDateTimePickerControl::OAIParameterDateTimePickerControl(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParameterDateTimePickerControl::OAIParameterDateTimePickerControl() {
    this->initializeModel();
}

OAIParameterDateTimePickerControl::~OAIParameterDateTimePickerControl() {}

void OAIParameterDateTimePickerControl::initializeModel() {

    m_parameter_control_id_isSet = false;
    m_parameter_control_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_source_parameter_name_isSet = false;
    m_source_parameter_name_isValid = false;

    m_display_options_isSet = false;
    m_display_options_isValid = false;
}

void OAIParameterDateTimePickerControl::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParameterDateTimePickerControl::fromJsonObject(QJsonObject json) {

    m_parameter_control_id_isValid = ::OpenAPI::fromJsonValue(m_parameter_control_id, json[QString("ParameterControlId")]);
    m_parameter_control_id_isSet = !json[QString("ParameterControlId")].isNull() && m_parameter_control_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_source_parameter_name_isValid = ::OpenAPI::fromJsonValue(m_source_parameter_name, json[QString("SourceParameterName")]);
    m_source_parameter_name_isSet = !json[QString("SourceParameterName")].isNull() && m_source_parameter_name_isValid;

    m_display_options_isValid = ::OpenAPI::fromJsonValue(m_display_options, json[QString("DisplayOptions")]);
    m_display_options_isSet = !json[QString("DisplayOptions")].isNull() && m_display_options_isValid;
}

QString OAIParameterDateTimePickerControl::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParameterDateTimePickerControl::asJsonObject() const {
    QJsonObject obj;
    if (m_parameter_control_id_isSet) {
        obj.insert(QString("ParameterControlId"), ::OpenAPI::toJsonValue(m_parameter_control_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_source_parameter_name_isSet) {
        obj.insert(QString("SourceParameterName"), ::OpenAPI::toJsonValue(m_source_parameter_name));
    }
    if (m_display_options.isSet()) {
        obj.insert(QString("DisplayOptions"), ::OpenAPI::toJsonValue(m_display_options));
    }
    return obj;
}

QString OAIParameterDateTimePickerControl::getParameterControlId() const {
    return m_parameter_control_id;
}
void OAIParameterDateTimePickerControl::setParameterControlId(const QString &parameter_control_id) {
    m_parameter_control_id = parameter_control_id;
    m_parameter_control_id_isSet = true;
}

bool OAIParameterDateTimePickerControl::is_parameter_control_id_Set() const{
    return m_parameter_control_id_isSet;
}

bool OAIParameterDateTimePickerControl::is_parameter_control_id_Valid() const{
    return m_parameter_control_id_isValid;
}

QString OAIParameterDateTimePickerControl::getTitle() const {
    return m_title;
}
void OAIParameterDateTimePickerControl::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIParameterDateTimePickerControl::is_title_Set() const{
    return m_title_isSet;
}

bool OAIParameterDateTimePickerControl::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIParameterDateTimePickerControl::getSourceParameterName() const {
    return m_source_parameter_name;
}
void OAIParameterDateTimePickerControl::setSourceParameterName(const QString &source_parameter_name) {
    m_source_parameter_name = source_parameter_name;
    m_source_parameter_name_isSet = true;
}

bool OAIParameterDateTimePickerControl::is_source_parameter_name_Set() const{
    return m_source_parameter_name_isSet;
}

bool OAIParameterDateTimePickerControl::is_source_parameter_name_Valid() const{
    return m_source_parameter_name_isValid;
}

OAIFilterDateTimePickerControl_DisplayOptions OAIParameterDateTimePickerControl::getDisplayOptions() const {
    return m_display_options;
}
void OAIParameterDateTimePickerControl::setDisplayOptions(const OAIFilterDateTimePickerControl_DisplayOptions &display_options) {
    m_display_options = display_options;
    m_display_options_isSet = true;
}

bool OAIParameterDateTimePickerControl::is_display_options_Set() const{
    return m_display_options_isSet;
}

bool OAIParameterDateTimePickerControl::is_display_options_Valid() const{
    return m_display_options_isValid;
}

bool OAIParameterDateTimePickerControl::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parameter_control_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_parameter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParameterDateTimePickerControl::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_parameter_control_id_isValid && m_title_isValid && m_source_parameter_name_isValid && true;
}

} // namespace OpenAPI
