/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeFolderResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeFolderResponse::OAIDescribeFolderResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeFolderResponse::OAIDescribeFolderResponse() {
    this->initializeModel();
}

OAIDescribeFolderResponse::~OAIDescribeFolderResponse() {}

void OAIDescribeFolderResponse::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_folder_isSet = false;
    m_folder_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAIDescribeFolderResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeFolderResponse::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_folder_isValid = ::OpenAPI::fromJsonValue(m_folder, json[QString("Folder")]);
    m_folder_isSet = !json[QString("Folder")].isNull() && m_folder_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;
}

QString OAIDescribeFolderResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeFolderResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_folder.isSet()) {
        obj.insert(QString("Folder"), ::OpenAPI::toJsonValue(m_folder));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

qint32 OAIDescribeFolderResponse::getStatus() const {
    return m_status;
}
void OAIDescribeFolderResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeFolderResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeFolderResponse::is_status_Valid() const{
    return m_status_isValid;
}

OAIDescribeFolderResponse_Folder OAIDescribeFolderResponse::getFolder() const {
    return m_folder;
}
void OAIDescribeFolderResponse::setFolder(const OAIDescribeFolderResponse_Folder &folder) {
    m_folder = folder;
    m_folder_isSet = true;
}

bool OAIDescribeFolderResponse::is_folder_Set() const{
    return m_folder_isSet;
}

bool OAIDescribeFolderResponse::is_folder_Valid() const{
    return m_folder_isValid;
}

QString OAIDescribeFolderResponse::getRequestId() const {
    return m_request_id;
}
void OAIDescribeFolderResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDescribeFolderResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDescribeFolderResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIDescribeFolderResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeFolderResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
