/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMappedDataSetParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMappedDataSetParameter::OAIMappedDataSetParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMappedDataSetParameter::OAIMappedDataSetParameter() {
    this->initializeModel();
}

OAIMappedDataSetParameter::~OAIMappedDataSetParameter() {}

void OAIMappedDataSetParameter::initializeModel() {

    m_data_set_identifier_isSet = false;
    m_data_set_identifier_isValid = false;

    m_data_set_parameter_name_isSet = false;
    m_data_set_parameter_name_isValid = false;
}

void OAIMappedDataSetParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMappedDataSetParameter::fromJsonObject(QJsonObject json) {

    m_data_set_identifier_isValid = ::OpenAPI::fromJsonValue(m_data_set_identifier, json[QString("DataSetIdentifier")]);
    m_data_set_identifier_isSet = !json[QString("DataSetIdentifier")].isNull() && m_data_set_identifier_isValid;

    m_data_set_parameter_name_isValid = ::OpenAPI::fromJsonValue(m_data_set_parameter_name, json[QString("DataSetParameterName")]);
    m_data_set_parameter_name_isSet = !json[QString("DataSetParameterName")].isNull() && m_data_set_parameter_name_isValid;
}

QString OAIMappedDataSetParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMappedDataSetParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_data_set_identifier_isSet) {
        obj.insert(QString("DataSetIdentifier"), ::OpenAPI::toJsonValue(m_data_set_identifier));
    }
    if (m_data_set_parameter_name_isSet) {
        obj.insert(QString("DataSetParameterName"), ::OpenAPI::toJsonValue(m_data_set_parameter_name));
    }
    return obj;
}

QString OAIMappedDataSetParameter::getDataSetIdentifier() const {
    return m_data_set_identifier;
}
void OAIMappedDataSetParameter::setDataSetIdentifier(const QString &data_set_identifier) {
    m_data_set_identifier = data_set_identifier;
    m_data_set_identifier_isSet = true;
}

bool OAIMappedDataSetParameter::is_data_set_identifier_Set() const{
    return m_data_set_identifier_isSet;
}

bool OAIMappedDataSetParameter::is_data_set_identifier_Valid() const{
    return m_data_set_identifier_isValid;
}

QString OAIMappedDataSetParameter::getDataSetParameterName() const {
    return m_data_set_parameter_name;
}
void OAIMappedDataSetParameter::setDataSetParameterName(const QString &data_set_parameter_name) {
    m_data_set_parameter_name = data_set_parameter_name;
    m_data_set_parameter_name_isSet = true;
}

bool OAIMappedDataSetParameter::is_data_set_parameter_name_Set() const{
    return m_data_set_parameter_name_isSet;
}

bool OAIMappedDataSetParameter::is_data_set_parameter_name_Valid() const{
    return m_data_set_parameter_name_isValid;
}

bool OAIMappedDataSetParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_set_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_parameter_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMappedDataSetParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_set_identifier_isValid && m_data_set_parameter_name_isValid && true;
}

} // namespace OpenAPI
