/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDashboardPermissionsResponse_LinkSharingConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDashboardPermissionsResponse_LinkSharingConfiguration::OAIDescribeDashboardPermissionsResponse_LinkSharingConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDashboardPermissionsResponse_LinkSharingConfiguration::OAIDescribeDashboardPermissionsResponse_LinkSharingConfiguration() {
    this->initializeModel();
}

OAIDescribeDashboardPermissionsResponse_LinkSharingConfiguration::~OAIDescribeDashboardPermissionsResponse_LinkSharingConfiguration() {}

void OAIDescribeDashboardPermissionsResponse_LinkSharingConfiguration::initializeModel() {

    m_permissions_isSet = false;
    m_permissions_isValid = false;
}

void OAIDescribeDashboardPermissionsResponse_LinkSharingConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDashboardPermissionsResponse_LinkSharingConfiguration::fromJsonObject(QJsonObject json) {

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("Permissions")]);
    m_permissions_isSet = !json[QString("Permissions")].isNull() && m_permissions_isValid;
}

QString OAIDescribeDashboardPermissionsResponse_LinkSharingConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDashboardPermissionsResponse_LinkSharingConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_permissions.isSet()) {
        obj.insert(QString("Permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    return obj;
}

QList OAIDescribeDashboardPermissionsResponse_LinkSharingConfiguration::getPermissions() const {
    return m_permissions;
}
void OAIDescribeDashboardPermissionsResponse_LinkSharingConfiguration::setPermissions(const QList &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIDescribeDashboardPermissionsResponse_LinkSharingConfiguration::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIDescribeDashboardPermissionsResponse_LinkSharingConfiguration::is_permissions_Valid() const{
    return m_permissions_isValid;
}

bool OAIDescribeDashboardPermissionsResponse_LinkSharingConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDashboardPermissionsResponse_LinkSharingConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
