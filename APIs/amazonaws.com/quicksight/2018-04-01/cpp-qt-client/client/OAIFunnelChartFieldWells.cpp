/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFunnelChartFieldWells.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFunnelChartFieldWells::OAIFunnelChartFieldWells(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFunnelChartFieldWells::OAIFunnelChartFieldWells() {
    this->initializeModel();
}

OAIFunnelChartFieldWells::~OAIFunnelChartFieldWells() {}

void OAIFunnelChartFieldWells::initializeModel() {

    m_funnel_chart_aggregated_field_wells_isSet = false;
    m_funnel_chart_aggregated_field_wells_isValid = false;
}

void OAIFunnelChartFieldWells::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFunnelChartFieldWells::fromJsonObject(QJsonObject json) {

    m_funnel_chart_aggregated_field_wells_isValid = ::OpenAPI::fromJsonValue(m_funnel_chart_aggregated_field_wells, json[QString("FunnelChartAggregatedFieldWells")]);
    m_funnel_chart_aggregated_field_wells_isSet = !json[QString("FunnelChartAggregatedFieldWells")].isNull() && m_funnel_chart_aggregated_field_wells_isValid;
}

QString OAIFunnelChartFieldWells::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFunnelChartFieldWells::asJsonObject() const {
    QJsonObject obj;
    if (m_funnel_chart_aggregated_field_wells.isSet()) {
        obj.insert(QString("FunnelChartAggregatedFieldWells"), ::OpenAPI::toJsonValue(m_funnel_chart_aggregated_field_wells));
    }
    return obj;
}

OAIFunnelChartFieldWells_FunnelChartAggregatedFieldWells OAIFunnelChartFieldWells::getFunnelChartAggregatedFieldWells() const {
    return m_funnel_chart_aggregated_field_wells;
}
void OAIFunnelChartFieldWells::setFunnelChartAggregatedFieldWells(const OAIFunnelChartFieldWells_FunnelChartAggregatedFieldWells &funnel_chart_aggregated_field_wells) {
    m_funnel_chart_aggregated_field_wells = funnel_chart_aggregated_field_wells;
    m_funnel_chart_aggregated_field_wells_isSet = true;
}

bool OAIFunnelChartFieldWells::is_funnel_chart_aggregated_field_wells_Set() const{
    return m_funnel_chart_aggregated_field_wells_isSet;
}

bool OAIFunnelChartFieldWells::is_funnel_chart_aggregated_field_wells_Valid() const{
    return m_funnel_chart_aggregated_field_wells_isValid;
}

bool OAIFunnelChartFieldWells::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_funnel_chart_aggregated_field_wells.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFunnelChartFieldWells::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
