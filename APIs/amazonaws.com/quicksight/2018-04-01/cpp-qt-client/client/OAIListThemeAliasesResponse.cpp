/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListThemeAliasesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListThemeAliasesResponse::OAIListThemeAliasesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListThemeAliasesResponse::OAIListThemeAliasesResponse() {
    this->initializeModel();
}

OAIListThemeAliasesResponse::~OAIListThemeAliasesResponse() {}

void OAIListThemeAliasesResponse::initializeModel() {

    m_theme_alias_list_isSet = false;
    m_theme_alias_list_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListThemeAliasesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListThemeAliasesResponse::fromJsonObject(QJsonObject json) {

    m_theme_alias_list_isValid = ::OpenAPI::fromJsonValue(m_theme_alias_list, json[QString("ThemeAliasList")]);
    m_theme_alias_list_isSet = !json[QString("ThemeAliasList")].isNull() && m_theme_alias_list_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListThemeAliasesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListThemeAliasesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_theme_alias_list.isSet()) {
        obj.insert(QString("ThemeAliasList"), ::OpenAPI::toJsonValue(m_theme_alias_list));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListThemeAliasesResponse::getThemeAliasList() const {
    return m_theme_alias_list;
}
void OAIListThemeAliasesResponse::setThemeAliasList(const QList &theme_alias_list) {
    m_theme_alias_list = theme_alias_list;
    m_theme_alias_list_isSet = true;
}

bool OAIListThemeAliasesResponse::is_theme_alias_list_Set() const{
    return m_theme_alias_list_isSet;
}

bool OAIListThemeAliasesResponse::is_theme_alias_list_Valid() const{
    return m_theme_alias_list_isValid;
}

qint32 OAIListThemeAliasesResponse::getStatus() const {
    return m_status;
}
void OAIListThemeAliasesResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIListThemeAliasesResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIListThemeAliasesResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIListThemeAliasesResponse::getRequestId() const {
    return m_request_id;
}
void OAIListThemeAliasesResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIListThemeAliasesResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIListThemeAliasesResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAIListThemeAliasesResponse::getNextToken() const {
    return m_next_token;
}
void OAIListThemeAliasesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListThemeAliasesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListThemeAliasesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListThemeAliasesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_theme_alias_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListThemeAliasesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
