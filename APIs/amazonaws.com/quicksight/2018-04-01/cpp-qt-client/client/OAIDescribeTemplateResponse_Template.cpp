/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeTemplateResponse_Template.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeTemplateResponse_Template::OAIDescribeTemplateResponse_Template(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeTemplateResponse_Template::OAIDescribeTemplateResponse_Template() {
    this->initializeModel();
}

OAIDescribeTemplateResponse_Template::~OAIDescribeTemplateResponse_Template() {}

void OAIDescribeTemplateResponse_Template::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_template_id_isSet = false;
    m_template_id_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;
}

void OAIDescribeTemplateResponse_Template::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeTemplateResponse_Template::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;

    m_template_id_isValid = ::OpenAPI::fromJsonValue(m_template_id, json[QString("TemplateId")]);
    m_template_id_isSet = !json[QString("TemplateId")].isNull() && m_template_id_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;
}

QString OAIDescribeTemplateResponse_Template::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeTemplateResponse_Template::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_version.isSet()) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_template_id_isSet) {
        obj.insert(QString("TemplateId"), ::OpenAPI::toJsonValue(m_template_id));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    return obj;
}

QString OAIDescribeTemplateResponse_Template::getArn() const {
    return m_arn;
}
void OAIDescribeTemplateResponse_Template::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeTemplateResponse_Template::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeTemplateResponse_Template::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDescribeTemplateResponse_Template::getName() const {
    return m_name;
}
void OAIDescribeTemplateResponse_Template::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeTemplateResponse_Template::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeTemplateResponse_Template::is_name_Valid() const{
    return m_name_isValid;
}

OAITemplate_Version OAIDescribeTemplateResponse_Template::getVersion() const {
    return m_version;
}
void OAIDescribeTemplateResponse_Template::setVersion(const OAITemplate_Version &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIDescribeTemplateResponse_Template::is_version_Set() const{
    return m_version_isSet;
}

bool OAIDescribeTemplateResponse_Template::is_version_Valid() const{
    return m_version_isValid;
}

QString OAIDescribeTemplateResponse_Template::getTemplateId() const {
    return m_template_id;
}
void OAIDescribeTemplateResponse_Template::setTemplateId(const QString &template_id) {
    m_template_id = template_id;
    m_template_id_isSet = true;
}

bool OAIDescribeTemplateResponse_Template::is_template_id_Set() const{
    return m_template_id_isSet;
}

bool OAIDescribeTemplateResponse_Template::is_template_id_Valid() const{
    return m_template_id_isValid;
}

QDateTime OAIDescribeTemplateResponse_Template::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIDescribeTemplateResponse_Template::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIDescribeTemplateResponse_Template::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIDescribeTemplateResponse_Template::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QDateTime OAIDescribeTemplateResponse_Template::getCreatedTime() const {
    return m_created_time;
}
void OAIDescribeTemplateResponse_Template::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIDescribeTemplateResponse_Template::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIDescribeTemplateResponse_Template::is_created_time_Valid() const{
    return m_created_time_isValid;
}

bool OAIDescribeTemplateResponse_Template::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeTemplateResponse_Template::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
