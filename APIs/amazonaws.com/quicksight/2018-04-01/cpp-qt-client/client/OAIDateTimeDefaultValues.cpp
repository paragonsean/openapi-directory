/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDateTimeDefaultValues.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDateTimeDefaultValues::OAIDateTimeDefaultValues(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDateTimeDefaultValues::OAIDateTimeDefaultValues() {
    this->initializeModel();
}

OAIDateTimeDefaultValues::~OAIDateTimeDefaultValues() {}

void OAIDateTimeDefaultValues::initializeModel() {

    m_dynamic_value_isSet = false;
    m_dynamic_value_isValid = false;

    m_static_values_isSet = false;
    m_static_values_isValid = false;

    m_rolling_date_isSet = false;
    m_rolling_date_isValid = false;
}

void OAIDateTimeDefaultValues::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDateTimeDefaultValues::fromJsonObject(QJsonObject json) {

    m_dynamic_value_isValid = ::OpenAPI::fromJsonValue(m_dynamic_value, json[QString("DynamicValue")]);
    m_dynamic_value_isSet = !json[QString("DynamicValue")].isNull() && m_dynamic_value_isValid;

    m_static_values_isValid = ::OpenAPI::fromJsonValue(m_static_values, json[QString("StaticValues")]);
    m_static_values_isSet = !json[QString("StaticValues")].isNull() && m_static_values_isValid;

    m_rolling_date_isValid = ::OpenAPI::fromJsonValue(m_rolling_date, json[QString("RollingDate")]);
    m_rolling_date_isSet = !json[QString("RollingDate")].isNull() && m_rolling_date_isValid;
}

QString OAIDateTimeDefaultValues::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDateTimeDefaultValues::asJsonObject() const {
    QJsonObject obj;
    if (m_dynamic_value.isSet()) {
        obj.insert(QString("DynamicValue"), ::OpenAPI::toJsonValue(m_dynamic_value));
    }
    if (m_static_values.isSet()) {
        obj.insert(QString("StaticValues"), ::OpenAPI::toJsonValue(m_static_values));
    }
    if (m_rolling_date.isSet()) {
        obj.insert(QString("RollingDate"), ::OpenAPI::toJsonValue(m_rolling_date));
    }
    return obj;
}

OAIDateTimeDefaultValues_DynamicValue OAIDateTimeDefaultValues::getDynamicValue() const {
    return m_dynamic_value;
}
void OAIDateTimeDefaultValues::setDynamicValue(const OAIDateTimeDefaultValues_DynamicValue &dynamic_value) {
    m_dynamic_value = dynamic_value;
    m_dynamic_value_isSet = true;
}

bool OAIDateTimeDefaultValues::is_dynamic_value_Set() const{
    return m_dynamic_value_isSet;
}

bool OAIDateTimeDefaultValues::is_dynamic_value_Valid() const{
    return m_dynamic_value_isValid;
}

QList OAIDateTimeDefaultValues::getStaticValues() const {
    return m_static_values;
}
void OAIDateTimeDefaultValues::setStaticValues(const QList &static_values) {
    m_static_values = static_values;
    m_static_values_isSet = true;
}

bool OAIDateTimeDefaultValues::is_static_values_Set() const{
    return m_static_values_isSet;
}

bool OAIDateTimeDefaultValues::is_static_values_Valid() const{
    return m_static_values_isValid;
}

OAIDateTimeDefaultValues_RollingDate OAIDateTimeDefaultValues::getRollingDate() const {
    return m_rolling_date;
}
void OAIDateTimeDefaultValues::setRollingDate(const OAIDateTimeDefaultValues_RollingDate &rolling_date) {
    m_rolling_date = rolling_date;
    m_rolling_date_isSet = true;
}

bool OAIDateTimeDefaultValues::is_rolling_date_Set() const{
    return m_rolling_date_isSet;
}

bool OAIDateTimeDefaultValues::is_rolling_date_Valid() const{
    return m_rolling_date_isValid;
}

bool OAIDateTimeDefaultValues::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dynamic_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rolling_date.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDateTimeDefaultValues::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
