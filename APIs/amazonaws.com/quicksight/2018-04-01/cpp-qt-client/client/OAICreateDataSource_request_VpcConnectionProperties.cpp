/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDataSource_request_VpcConnectionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDataSource_request_VpcConnectionProperties::OAICreateDataSource_request_VpcConnectionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDataSource_request_VpcConnectionProperties::OAICreateDataSource_request_VpcConnectionProperties() {
    this->initializeModel();
}

OAICreateDataSource_request_VpcConnectionProperties::~OAICreateDataSource_request_VpcConnectionProperties() {}

void OAICreateDataSource_request_VpcConnectionProperties::initializeModel() {

    m_vpc_connection_arn_isSet = false;
    m_vpc_connection_arn_isValid = false;
}

void OAICreateDataSource_request_VpcConnectionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDataSource_request_VpcConnectionProperties::fromJsonObject(QJsonObject json) {

    m_vpc_connection_arn_isValid = ::OpenAPI::fromJsonValue(m_vpc_connection_arn, json[QString("VpcConnectionArn")]);
    m_vpc_connection_arn_isSet = !json[QString("VpcConnectionArn")].isNull() && m_vpc_connection_arn_isValid;
}

QString OAICreateDataSource_request_VpcConnectionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDataSource_request_VpcConnectionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_vpc_connection_arn_isSet) {
        obj.insert(QString("VpcConnectionArn"), ::OpenAPI::toJsonValue(m_vpc_connection_arn));
    }
    return obj;
}

QString OAICreateDataSource_request_VpcConnectionProperties::getVpcConnectionArn() const {
    return m_vpc_connection_arn;
}
void OAICreateDataSource_request_VpcConnectionProperties::setVpcConnectionArn(const QString &vpc_connection_arn) {
    m_vpc_connection_arn = vpc_connection_arn;
    m_vpc_connection_arn_isSet = true;
}

bool OAICreateDataSource_request_VpcConnectionProperties::is_vpc_connection_arn_Set() const{
    return m_vpc_connection_arn_isSet;
}

bool OAICreateDataSource_request_VpcConnectionProperties::is_vpc_connection_arn_Valid() const{
    return m_vpc_connection_arn_isValid;
}

bool OAICreateDataSource_request_VpcConnectionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vpc_connection_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDataSource_request_VpcConnectionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
