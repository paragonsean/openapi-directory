/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhysicalTable_S3Source.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhysicalTable_S3Source::OAIPhysicalTable_S3Source(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhysicalTable_S3Source::OAIPhysicalTable_S3Source() {
    this->initializeModel();
}

OAIPhysicalTable_S3Source::~OAIPhysicalTable_S3Source() {}

void OAIPhysicalTable_S3Source::initializeModel() {

    m_data_source_arn_isSet = false;
    m_data_source_arn_isValid = false;

    m_upload_settings_isSet = false;
    m_upload_settings_isValid = false;

    m_input_columns_isSet = false;
    m_input_columns_isValid = false;
}

void OAIPhysicalTable_S3Source::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhysicalTable_S3Source::fromJsonObject(QJsonObject json) {

    m_data_source_arn_isValid = ::OpenAPI::fromJsonValue(m_data_source_arn, json[QString("DataSourceArn")]);
    m_data_source_arn_isSet = !json[QString("DataSourceArn")].isNull() && m_data_source_arn_isValid;

    m_upload_settings_isValid = ::OpenAPI::fromJsonValue(m_upload_settings, json[QString("UploadSettings")]);
    m_upload_settings_isSet = !json[QString("UploadSettings")].isNull() && m_upload_settings_isValid;

    m_input_columns_isValid = ::OpenAPI::fromJsonValue(m_input_columns, json[QString("InputColumns")]);
    m_input_columns_isSet = !json[QString("InputColumns")].isNull() && m_input_columns_isValid;
}

QString OAIPhysicalTable_S3Source::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhysicalTable_S3Source::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_arn_isSet) {
        obj.insert(QString("DataSourceArn"), ::OpenAPI::toJsonValue(m_data_source_arn));
    }
    if (m_upload_settings.isSet()) {
        obj.insert(QString("UploadSettings"), ::OpenAPI::toJsonValue(m_upload_settings));
    }
    if (m_input_columns.isSet()) {
        obj.insert(QString("InputColumns"), ::OpenAPI::toJsonValue(m_input_columns));
    }
    return obj;
}

QString OAIPhysicalTable_S3Source::getDataSourceArn() const {
    return m_data_source_arn;
}
void OAIPhysicalTable_S3Source::setDataSourceArn(const QString &data_source_arn) {
    m_data_source_arn = data_source_arn;
    m_data_source_arn_isSet = true;
}

bool OAIPhysicalTable_S3Source::is_data_source_arn_Set() const{
    return m_data_source_arn_isSet;
}

bool OAIPhysicalTable_S3Source::is_data_source_arn_Valid() const{
    return m_data_source_arn_isValid;
}

OAIS3Source_UploadSettings OAIPhysicalTable_S3Source::getUploadSettings() const {
    return m_upload_settings;
}
void OAIPhysicalTable_S3Source::setUploadSettings(const OAIS3Source_UploadSettings &upload_settings) {
    m_upload_settings = upload_settings;
    m_upload_settings_isSet = true;
}

bool OAIPhysicalTable_S3Source::is_upload_settings_Set() const{
    return m_upload_settings_isSet;
}

bool OAIPhysicalTable_S3Source::is_upload_settings_Valid() const{
    return m_upload_settings_isValid;
}

QList OAIPhysicalTable_S3Source::getInputColumns() const {
    return m_input_columns;
}
void OAIPhysicalTable_S3Source::setInputColumns(const QList &input_columns) {
    m_input_columns = input_columns;
    m_input_columns_isSet = true;
}

bool OAIPhysicalTable_S3Source::is_input_columns_Set() const{
    return m_input_columns_isSet;
}

bool OAIPhysicalTable_S3Source::is_input_columns_Valid() const{
    return m_input_columns_isValid;
}

bool OAIPhysicalTable_S3Source::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhysicalTable_S3Source::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_source_arn_isValid && m_input_columns_isValid && true;
}

} // namespace OpenAPI
