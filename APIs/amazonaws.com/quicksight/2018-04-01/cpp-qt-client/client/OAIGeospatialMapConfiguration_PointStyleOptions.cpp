/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeospatialMapConfiguration_PointStyleOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeospatialMapConfiguration_PointStyleOptions::OAIGeospatialMapConfiguration_PointStyleOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeospatialMapConfiguration_PointStyleOptions::OAIGeospatialMapConfiguration_PointStyleOptions() {
    this->initializeModel();
}

OAIGeospatialMapConfiguration_PointStyleOptions::~OAIGeospatialMapConfiguration_PointStyleOptions() {}

void OAIGeospatialMapConfiguration_PointStyleOptions::initializeModel() {

    m_selected_point_style_isSet = false;
    m_selected_point_style_isValid = false;

    m_cluster_marker_configuration_isSet = false;
    m_cluster_marker_configuration_isValid = false;

    m_heatmap_configuration_isSet = false;
    m_heatmap_configuration_isValid = false;
}

void OAIGeospatialMapConfiguration_PointStyleOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeospatialMapConfiguration_PointStyleOptions::fromJsonObject(QJsonObject json) {

    m_selected_point_style_isValid = ::OpenAPI::fromJsonValue(m_selected_point_style, json[QString("SelectedPointStyle")]);
    m_selected_point_style_isSet = !json[QString("SelectedPointStyle")].isNull() && m_selected_point_style_isValid;

    m_cluster_marker_configuration_isValid = ::OpenAPI::fromJsonValue(m_cluster_marker_configuration, json[QString("ClusterMarkerConfiguration")]);
    m_cluster_marker_configuration_isSet = !json[QString("ClusterMarkerConfiguration")].isNull() && m_cluster_marker_configuration_isValid;

    m_heatmap_configuration_isValid = ::OpenAPI::fromJsonValue(m_heatmap_configuration, json[QString("HeatmapConfiguration")]);
    m_heatmap_configuration_isSet = !json[QString("HeatmapConfiguration")].isNull() && m_heatmap_configuration_isValid;
}

QString OAIGeospatialMapConfiguration_PointStyleOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeospatialMapConfiguration_PointStyleOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_selected_point_style.isSet()) {
        obj.insert(QString("SelectedPointStyle"), ::OpenAPI::toJsonValue(m_selected_point_style));
    }
    if (m_cluster_marker_configuration.isSet()) {
        obj.insert(QString("ClusterMarkerConfiguration"), ::OpenAPI::toJsonValue(m_cluster_marker_configuration));
    }
    if (m_heatmap_configuration.isSet()) {
        obj.insert(QString("HeatmapConfiguration"), ::OpenAPI::toJsonValue(m_heatmap_configuration));
    }
    return obj;
}

OAIGeospatialSelectedPointStyle OAIGeospatialMapConfiguration_PointStyleOptions::getSelectedPointStyle() const {
    return m_selected_point_style;
}
void OAIGeospatialMapConfiguration_PointStyleOptions::setSelectedPointStyle(const OAIGeospatialSelectedPointStyle &selected_point_style) {
    m_selected_point_style = selected_point_style;
    m_selected_point_style_isSet = true;
}

bool OAIGeospatialMapConfiguration_PointStyleOptions::is_selected_point_style_Set() const{
    return m_selected_point_style_isSet;
}

bool OAIGeospatialMapConfiguration_PointStyleOptions::is_selected_point_style_Valid() const{
    return m_selected_point_style_isValid;
}

OAIGeospatialPointStyleOptions_ClusterMarkerConfiguration OAIGeospatialMapConfiguration_PointStyleOptions::getClusterMarkerConfiguration() const {
    return m_cluster_marker_configuration;
}
void OAIGeospatialMapConfiguration_PointStyleOptions::setClusterMarkerConfiguration(const OAIGeospatialPointStyleOptions_ClusterMarkerConfiguration &cluster_marker_configuration) {
    m_cluster_marker_configuration = cluster_marker_configuration;
    m_cluster_marker_configuration_isSet = true;
}

bool OAIGeospatialMapConfiguration_PointStyleOptions::is_cluster_marker_configuration_Set() const{
    return m_cluster_marker_configuration_isSet;
}

bool OAIGeospatialMapConfiguration_PointStyleOptions::is_cluster_marker_configuration_Valid() const{
    return m_cluster_marker_configuration_isValid;
}

OAIGeospatialPointStyleOptions_HeatmapConfiguration OAIGeospatialMapConfiguration_PointStyleOptions::getHeatmapConfiguration() const {
    return m_heatmap_configuration;
}
void OAIGeospatialMapConfiguration_PointStyleOptions::setHeatmapConfiguration(const OAIGeospatialPointStyleOptions_HeatmapConfiguration &heatmap_configuration) {
    m_heatmap_configuration = heatmap_configuration;
    m_heatmap_configuration_isSet = true;
}

bool OAIGeospatialMapConfiguration_PointStyleOptions::is_heatmap_configuration_Set() const{
    return m_heatmap_configuration_isSet;
}

bool OAIGeospatialMapConfiguration_PointStyleOptions::is_heatmap_configuration_Valid() const{
    return m_heatmap_configuration_isValid;
}

bool OAIGeospatialMapConfiguration_PointStyleOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_selected_point_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_marker_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_heatmap_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeospatialMapConfiguration_PointStyleOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
