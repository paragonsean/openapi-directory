/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeIAMPolicyAssignmentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeIAMPolicyAssignmentResponse::OAIDescribeIAMPolicyAssignmentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeIAMPolicyAssignmentResponse::OAIDescribeIAMPolicyAssignmentResponse() {
    this->initializeModel();
}

OAIDescribeIAMPolicyAssignmentResponse::~OAIDescribeIAMPolicyAssignmentResponse() {}

void OAIDescribeIAMPolicyAssignmentResponse::initializeModel() {

    m_iam_policy_assignment_isSet = false;
    m_iam_policy_assignment_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDescribeIAMPolicyAssignmentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeIAMPolicyAssignmentResponse::fromJsonObject(QJsonObject json) {

    m_iam_policy_assignment_isValid = ::OpenAPI::fromJsonValue(m_iam_policy_assignment, json[QString("IAMPolicyAssignment")]);
    m_iam_policy_assignment_isSet = !json[QString("IAMPolicyAssignment")].isNull() && m_iam_policy_assignment_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIDescribeIAMPolicyAssignmentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeIAMPolicyAssignmentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_iam_policy_assignment.isSet()) {
        obj.insert(QString("IAMPolicyAssignment"), ::OpenAPI::toJsonValue(m_iam_policy_assignment));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIDescribeIAMPolicyAssignmentResponse_IAMPolicyAssignment OAIDescribeIAMPolicyAssignmentResponse::getIamPolicyAssignment() const {
    return m_iam_policy_assignment;
}
void OAIDescribeIAMPolicyAssignmentResponse::setIamPolicyAssignment(const OAIDescribeIAMPolicyAssignmentResponse_IAMPolicyAssignment &iam_policy_assignment) {
    m_iam_policy_assignment = iam_policy_assignment;
    m_iam_policy_assignment_isSet = true;
}

bool OAIDescribeIAMPolicyAssignmentResponse::is_iam_policy_assignment_Set() const{
    return m_iam_policy_assignment_isSet;
}

bool OAIDescribeIAMPolicyAssignmentResponse::is_iam_policy_assignment_Valid() const{
    return m_iam_policy_assignment_isValid;
}

QString OAIDescribeIAMPolicyAssignmentResponse::getRequestId() const {
    return m_request_id;
}
void OAIDescribeIAMPolicyAssignmentResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDescribeIAMPolicyAssignmentResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDescribeIAMPolicyAssignmentResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint32 OAIDescribeIAMPolicyAssignmentResponse::getStatus() const {
    return m_status;
}
void OAIDescribeIAMPolicyAssignmentResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeIAMPolicyAssignmentResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeIAMPolicyAssignmentResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDescribeIAMPolicyAssignmentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_iam_policy_assignment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeIAMPolicyAssignmentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
