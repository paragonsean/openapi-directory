/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPivotTableConditionalFormattingOption_Cell.h
 *
 * 
 */

#ifndef OAIPivotTableConditionalFormattingOption_Cell_H
#define OAIPivotTableConditionalFormattingOption_Cell_H

#include <QJsonObject>

#include "OAIPivotTableCellConditionalFormatting_Scope.h"
#include "OAIPivotTableCellConditionalFormatting_TextFormat.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPivotTableCellConditionalFormatting_TextFormat;
class OAIPivotTableCellConditionalFormatting_Scope;

class OAIPivotTableConditionalFormattingOption_Cell : public OAIObject {
public:
    OAIPivotTableConditionalFormattingOption_Cell();
    OAIPivotTableConditionalFormattingOption_Cell(QString json);
    ~OAIPivotTableConditionalFormattingOption_Cell() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFieldId() const;
    void setFieldId(const QString &field_id);
    bool is_field_id_Set() const;
    bool is_field_id_Valid() const;

    OAIPivotTableCellConditionalFormatting_TextFormat getTextFormat() const;
    void setTextFormat(const OAIPivotTableCellConditionalFormatting_TextFormat &text_format);
    bool is_text_format_Set() const;
    bool is_text_format_Valid() const;

    OAIPivotTableCellConditionalFormatting_Scope getScope() const;
    void setScope(const OAIPivotTableCellConditionalFormatting_Scope &scope);
    bool is_scope_Set() const;
    bool is_scope_Valid() const;

    QList getScopes() const;
    void setScopes(const QList &scopes);
    bool is_scopes_Set() const;
    bool is_scopes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_field_id;
    bool m_field_id_isSet;
    bool m_field_id_isValid;

    OAIPivotTableCellConditionalFormatting_TextFormat m_text_format;
    bool m_text_format_isSet;
    bool m_text_format_isValid;

    OAIPivotTableCellConditionalFormatting_Scope m_scope;
    bool m_scope_isSet;
    bool m_scope_isValid;

    QList m_scopes;
    bool m_scopes_isSet;
    bool m_scopes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPivotTableConditionalFormattingOption_Cell)

#endif // OAIPivotTableConditionalFormattingOption_Cell_H
