/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConditionalFormattingIcon.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConditionalFormattingIcon::OAIConditionalFormattingIcon(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConditionalFormattingIcon::OAIConditionalFormattingIcon() {
    this->initializeModel();
}

OAIConditionalFormattingIcon::~OAIConditionalFormattingIcon() {}

void OAIConditionalFormattingIcon::initializeModel() {

    m_icon_set_isSet = false;
    m_icon_set_isValid = false;

    m_custom_condition_isSet = false;
    m_custom_condition_isValid = false;
}

void OAIConditionalFormattingIcon::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConditionalFormattingIcon::fromJsonObject(QJsonObject json) {

    m_icon_set_isValid = ::OpenAPI::fromJsonValue(m_icon_set, json[QString("IconSet")]);
    m_icon_set_isSet = !json[QString("IconSet")].isNull() && m_icon_set_isValid;

    m_custom_condition_isValid = ::OpenAPI::fromJsonValue(m_custom_condition, json[QString("CustomCondition")]);
    m_custom_condition_isSet = !json[QString("CustomCondition")].isNull() && m_custom_condition_isValid;
}

QString OAIConditionalFormattingIcon::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConditionalFormattingIcon::asJsonObject() const {
    QJsonObject obj;
    if (m_icon_set.isSet()) {
        obj.insert(QString("IconSet"), ::OpenAPI::toJsonValue(m_icon_set));
    }
    if (m_custom_condition.isSet()) {
        obj.insert(QString("CustomCondition"), ::OpenAPI::toJsonValue(m_custom_condition));
    }
    return obj;
}

OAIConditionalFormattingIcon_IconSet OAIConditionalFormattingIcon::getIconSet() const {
    return m_icon_set;
}
void OAIConditionalFormattingIcon::setIconSet(const OAIConditionalFormattingIcon_IconSet &icon_set) {
    m_icon_set = icon_set;
    m_icon_set_isSet = true;
}

bool OAIConditionalFormattingIcon::is_icon_set_Set() const{
    return m_icon_set_isSet;
}

bool OAIConditionalFormattingIcon::is_icon_set_Valid() const{
    return m_icon_set_isValid;
}

OAIConditionalFormattingIcon_CustomCondition OAIConditionalFormattingIcon::getCustomCondition() const {
    return m_custom_condition;
}
void OAIConditionalFormattingIcon::setCustomCondition(const OAIConditionalFormattingIcon_CustomCondition &custom_condition) {
    m_custom_condition = custom_condition;
    m_custom_condition_isSet = true;
}

bool OAIConditionalFormattingIcon::is_custom_condition_Set() const{
    return m_custom_condition_isSet;
}

bool OAIConditionalFormattingIcon::is_custom_condition_Valid() const{
    return m_custom_condition_isValid;
}

bool OAIConditionalFormattingIcon::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_icon_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConditionalFormattingIcon::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
