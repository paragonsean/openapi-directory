/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScatterPlotConfiguration_FieldWells.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScatterPlotConfiguration_FieldWells::OAIScatterPlotConfiguration_FieldWells(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScatterPlotConfiguration_FieldWells::OAIScatterPlotConfiguration_FieldWells() {
    this->initializeModel();
}

OAIScatterPlotConfiguration_FieldWells::~OAIScatterPlotConfiguration_FieldWells() {}

void OAIScatterPlotConfiguration_FieldWells::initializeModel() {

    m_scatter_plot_categorically_aggregated_field_wells_isSet = false;
    m_scatter_plot_categorically_aggregated_field_wells_isValid = false;

    m_scatter_plot_unaggregated_field_wells_isSet = false;
    m_scatter_plot_unaggregated_field_wells_isValid = false;
}

void OAIScatterPlotConfiguration_FieldWells::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScatterPlotConfiguration_FieldWells::fromJsonObject(QJsonObject json) {

    m_scatter_plot_categorically_aggregated_field_wells_isValid = ::OpenAPI::fromJsonValue(m_scatter_plot_categorically_aggregated_field_wells, json[QString("ScatterPlotCategoricallyAggregatedFieldWells")]);
    m_scatter_plot_categorically_aggregated_field_wells_isSet = !json[QString("ScatterPlotCategoricallyAggregatedFieldWells")].isNull() && m_scatter_plot_categorically_aggregated_field_wells_isValid;

    m_scatter_plot_unaggregated_field_wells_isValid = ::OpenAPI::fromJsonValue(m_scatter_plot_unaggregated_field_wells, json[QString("ScatterPlotUnaggregatedFieldWells")]);
    m_scatter_plot_unaggregated_field_wells_isSet = !json[QString("ScatterPlotUnaggregatedFieldWells")].isNull() && m_scatter_plot_unaggregated_field_wells_isValid;
}

QString OAIScatterPlotConfiguration_FieldWells::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScatterPlotConfiguration_FieldWells::asJsonObject() const {
    QJsonObject obj;
    if (m_scatter_plot_categorically_aggregated_field_wells.isSet()) {
        obj.insert(QString("ScatterPlotCategoricallyAggregatedFieldWells"), ::OpenAPI::toJsonValue(m_scatter_plot_categorically_aggregated_field_wells));
    }
    if (m_scatter_plot_unaggregated_field_wells.isSet()) {
        obj.insert(QString("ScatterPlotUnaggregatedFieldWells"), ::OpenAPI::toJsonValue(m_scatter_plot_unaggregated_field_wells));
    }
    return obj;
}

OAIScatterPlotFieldWells_ScatterPlotCategoricallyAggregatedFieldWells OAIScatterPlotConfiguration_FieldWells::getScatterPlotCategoricallyAggregatedFieldWells() const {
    return m_scatter_plot_categorically_aggregated_field_wells;
}
void OAIScatterPlotConfiguration_FieldWells::setScatterPlotCategoricallyAggregatedFieldWells(const OAIScatterPlotFieldWells_ScatterPlotCategoricallyAggregatedFieldWells &scatter_plot_categorically_aggregated_field_wells) {
    m_scatter_plot_categorically_aggregated_field_wells = scatter_plot_categorically_aggregated_field_wells;
    m_scatter_plot_categorically_aggregated_field_wells_isSet = true;
}

bool OAIScatterPlotConfiguration_FieldWells::is_scatter_plot_categorically_aggregated_field_wells_Set() const{
    return m_scatter_plot_categorically_aggregated_field_wells_isSet;
}

bool OAIScatterPlotConfiguration_FieldWells::is_scatter_plot_categorically_aggregated_field_wells_Valid() const{
    return m_scatter_plot_categorically_aggregated_field_wells_isValid;
}

OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells OAIScatterPlotConfiguration_FieldWells::getScatterPlotUnaggregatedFieldWells() const {
    return m_scatter_plot_unaggregated_field_wells;
}
void OAIScatterPlotConfiguration_FieldWells::setScatterPlotUnaggregatedFieldWells(const OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells &scatter_plot_unaggregated_field_wells) {
    m_scatter_plot_unaggregated_field_wells = scatter_plot_unaggregated_field_wells;
    m_scatter_plot_unaggregated_field_wells_isSet = true;
}

bool OAIScatterPlotConfiguration_FieldWells::is_scatter_plot_unaggregated_field_wells_Set() const{
    return m_scatter_plot_unaggregated_field_wells_isSet;
}

bool OAIScatterPlotConfiguration_FieldWells::is_scatter_plot_unaggregated_field_wells_Valid() const{
    return m_scatter_plot_unaggregated_field_wells_isValid;
}

bool OAIScatterPlotConfiguration_FieldWells::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_scatter_plot_categorically_aggregated_field_wells.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scatter_plot_unaggregated_field_wells.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScatterPlotConfiguration_FieldWells::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
