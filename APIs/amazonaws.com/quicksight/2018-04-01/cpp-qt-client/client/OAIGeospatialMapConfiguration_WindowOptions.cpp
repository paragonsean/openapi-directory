/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeospatialMapConfiguration_WindowOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeospatialMapConfiguration_WindowOptions::OAIGeospatialMapConfiguration_WindowOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeospatialMapConfiguration_WindowOptions::OAIGeospatialMapConfiguration_WindowOptions() {
    this->initializeModel();
}

OAIGeospatialMapConfiguration_WindowOptions::~OAIGeospatialMapConfiguration_WindowOptions() {}

void OAIGeospatialMapConfiguration_WindowOptions::initializeModel() {

    m_bounds_isSet = false;
    m_bounds_isValid = false;

    m_map_zoom_mode_isSet = false;
    m_map_zoom_mode_isValid = false;
}

void OAIGeospatialMapConfiguration_WindowOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeospatialMapConfiguration_WindowOptions::fromJsonObject(QJsonObject json) {

    m_bounds_isValid = ::OpenAPI::fromJsonValue(m_bounds, json[QString("Bounds")]);
    m_bounds_isSet = !json[QString("Bounds")].isNull() && m_bounds_isValid;

    m_map_zoom_mode_isValid = ::OpenAPI::fromJsonValue(m_map_zoom_mode, json[QString("MapZoomMode")]);
    m_map_zoom_mode_isSet = !json[QString("MapZoomMode")].isNull() && m_map_zoom_mode_isValid;
}

QString OAIGeospatialMapConfiguration_WindowOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeospatialMapConfiguration_WindowOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_bounds.isSet()) {
        obj.insert(QString("Bounds"), ::OpenAPI::toJsonValue(m_bounds));
    }
    if (m_map_zoom_mode.isSet()) {
        obj.insert(QString("MapZoomMode"), ::OpenAPI::toJsonValue(m_map_zoom_mode));
    }
    return obj;
}

OAIGeospatialWindowOptions_Bounds OAIGeospatialMapConfiguration_WindowOptions::getBounds() const {
    return m_bounds;
}
void OAIGeospatialMapConfiguration_WindowOptions::setBounds(const OAIGeospatialWindowOptions_Bounds &bounds) {
    m_bounds = bounds;
    m_bounds_isSet = true;
}

bool OAIGeospatialMapConfiguration_WindowOptions::is_bounds_Set() const{
    return m_bounds_isSet;
}

bool OAIGeospatialMapConfiguration_WindowOptions::is_bounds_Valid() const{
    return m_bounds_isValid;
}

OAIMapZoomMode OAIGeospatialMapConfiguration_WindowOptions::getMapZoomMode() const {
    return m_map_zoom_mode;
}
void OAIGeospatialMapConfiguration_WindowOptions::setMapZoomMode(const OAIMapZoomMode &map_zoom_mode) {
    m_map_zoom_mode = map_zoom_mode;
    m_map_zoom_mode_isSet = true;
}

bool OAIGeospatialMapConfiguration_WindowOptions::is_map_zoom_mode_Set() const{
    return m_map_zoom_mode_isSet;
}

bool OAIGeospatialMapConfiguration_WindowOptions::is_map_zoom_mode_Valid() const{
    return m_map_zoom_mode_isValid;
}

bool OAIGeospatialMapConfiguration_WindowOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bounds.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_zoom_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeospatialMapConfiguration_WindowOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
