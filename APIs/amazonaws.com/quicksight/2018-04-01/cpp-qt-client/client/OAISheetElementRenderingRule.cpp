/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISheetElementRenderingRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISheetElementRenderingRule::OAISheetElementRenderingRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISheetElementRenderingRule::OAISheetElementRenderingRule() {
    this->initializeModel();
}

OAISheetElementRenderingRule::~OAISheetElementRenderingRule() {}

void OAISheetElementRenderingRule::initializeModel() {

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_configuration_overrides_isSet = false;
    m_configuration_overrides_isValid = false;
}

void OAISheetElementRenderingRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISheetElementRenderingRule::fromJsonObject(QJsonObject json) {

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("Expression")]);
    m_expression_isSet = !json[QString("Expression")].isNull() && m_expression_isValid;

    m_configuration_overrides_isValid = ::OpenAPI::fromJsonValue(m_configuration_overrides, json[QString("ConfigurationOverrides")]);
    m_configuration_overrides_isSet = !json[QString("ConfigurationOverrides")].isNull() && m_configuration_overrides_isValid;
}

QString OAISheetElementRenderingRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISheetElementRenderingRule::asJsonObject() const {
    QJsonObject obj;
    if (m_expression_isSet) {
        obj.insert(QString("Expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_configuration_overrides.isSet()) {
        obj.insert(QString("ConfigurationOverrides"), ::OpenAPI::toJsonValue(m_configuration_overrides));
    }
    return obj;
}

QString OAISheetElementRenderingRule::getExpression() const {
    return m_expression;
}
void OAISheetElementRenderingRule::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAISheetElementRenderingRule::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAISheetElementRenderingRule::is_expression_Valid() const{
    return m_expression_isValid;
}

OAISheetElementRenderingRule_ConfigurationOverrides OAISheetElementRenderingRule::getConfigurationOverrides() const {
    return m_configuration_overrides;
}
void OAISheetElementRenderingRule::setConfigurationOverrides(const OAISheetElementRenderingRule_ConfigurationOverrides &configuration_overrides) {
    m_configuration_overrides = configuration_overrides;
    m_configuration_overrides_isSet = true;
}

bool OAISheetElementRenderingRule::is_configuration_overrides_Set() const{
    return m_configuration_overrides_isSet;
}

bool OAISheetElementRenderingRule::is_configuration_overrides_Valid() const{
    return m_configuration_overrides_isValid;
}

bool OAISheetElementRenderingRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_overrides.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISheetElementRenderingRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expression_isValid && m_configuration_overrides_isValid && true;
}

} // namespace OpenAPI
