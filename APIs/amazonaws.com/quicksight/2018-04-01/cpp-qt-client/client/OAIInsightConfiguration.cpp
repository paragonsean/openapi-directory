/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInsightConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInsightConfiguration::OAIInsightConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInsightConfiguration::OAIInsightConfiguration() {
    this->initializeModel();
}

OAIInsightConfiguration::~OAIInsightConfiguration() {}

void OAIInsightConfiguration::initializeModel() {

    m_computations_isSet = false;
    m_computations_isValid = false;

    m_custom_narrative_isSet = false;
    m_custom_narrative_isValid = false;
}

void OAIInsightConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInsightConfiguration::fromJsonObject(QJsonObject json) {

    m_computations_isValid = ::OpenAPI::fromJsonValue(m_computations, json[QString("Computations")]);
    m_computations_isSet = !json[QString("Computations")].isNull() && m_computations_isValid;

    m_custom_narrative_isValid = ::OpenAPI::fromJsonValue(m_custom_narrative, json[QString("CustomNarrative")]);
    m_custom_narrative_isSet = !json[QString("CustomNarrative")].isNull() && m_custom_narrative_isValid;
}

QString OAIInsightConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInsightConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_computations.isSet()) {
        obj.insert(QString("Computations"), ::OpenAPI::toJsonValue(m_computations));
    }
    if (m_custom_narrative.isSet()) {
        obj.insert(QString("CustomNarrative"), ::OpenAPI::toJsonValue(m_custom_narrative));
    }
    return obj;
}

QList OAIInsightConfiguration::getComputations() const {
    return m_computations;
}
void OAIInsightConfiguration::setComputations(const QList &computations) {
    m_computations = computations;
    m_computations_isSet = true;
}

bool OAIInsightConfiguration::is_computations_Set() const{
    return m_computations_isSet;
}

bool OAIInsightConfiguration::is_computations_Valid() const{
    return m_computations_isValid;
}

OAIInsightConfiguration_CustomNarrative OAIInsightConfiguration::getCustomNarrative() const {
    return m_custom_narrative;
}
void OAIInsightConfiguration::setCustomNarrative(const OAIInsightConfiguration_CustomNarrative &custom_narrative) {
    m_custom_narrative = custom_narrative;
    m_custom_narrative_isSet = true;
}

bool OAIInsightConfiguration::is_custom_narrative_Set() const{
    return m_custom_narrative_isSet;
}

bool OAIInsightConfiguration::is_custom_narrative_Valid() const{
    return m_custom_narrative_isValid;
}

bool OAIInsightConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_computations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_narrative.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInsightConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
