/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysisError::OAIAnalysisError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysisError::OAIAnalysisError() {
    this->initializeModel();
}

OAIAnalysisError::~OAIAnalysisError() {}

void OAIAnalysisError::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_violated_entities_isSet = false;
    m_violated_entities_isValid = false;
}

void OAIAnalysisError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalysisError::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_violated_entities_isValid = ::OpenAPI::fromJsonValue(m_violated_entities, json[QString("ViolatedEntities")]);
    m_violated_entities_isSet = !json[QString("ViolatedEntities")].isNull() && m_violated_entities_isValid;
}

QString OAIAnalysisError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalysisError::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_violated_entities.isSet()) {
        obj.insert(QString("ViolatedEntities"), ::OpenAPI::toJsonValue(m_violated_entities));
    }
    return obj;
}

OAIAnalysisErrorType OAIAnalysisError::getType() const {
    return m_type;
}
void OAIAnalysisError::setType(const OAIAnalysisErrorType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAnalysisError::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAnalysisError::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIAnalysisError::getMessage() const {
    return m_message;
}
void OAIAnalysisError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIAnalysisError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIAnalysisError::is_message_Valid() const{
    return m_message_isValid;
}

QList OAIAnalysisError::getViolatedEntities() const {
    return m_violated_entities;
}
void OAIAnalysisError::setViolatedEntities(const QList &violated_entities) {
    m_violated_entities = violated_entities;
    m_violated_entities_isSet = true;
}

bool OAIAnalysisError::is_violated_entities_Set() const{
    return m_violated_entities_isSet;
}

bool OAIAnalysisError::is_violated_entities_Valid() const{
    return m_violated_entities_isValid;
}

bool OAIAnalysisError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_violated_entities.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalysisError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
