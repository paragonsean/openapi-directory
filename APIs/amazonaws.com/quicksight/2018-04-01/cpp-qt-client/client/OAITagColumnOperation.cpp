/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITagColumnOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITagColumnOperation::OAITagColumnOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITagColumnOperation::OAITagColumnOperation() {
    this->initializeModel();
}

OAITagColumnOperation::~OAITagColumnOperation() {}

void OAITagColumnOperation::initializeModel() {

    m_column_name_isSet = false;
    m_column_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAITagColumnOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITagColumnOperation::fromJsonObject(QJsonObject json) {

    m_column_name_isValid = ::OpenAPI::fromJsonValue(m_column_name, json[QString("ColumnName")]);
    m_column_name_isSet = !json[QString("ColumnName")].isNull() && m_column_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAITagColumnOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITagColumnOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_column_name_isSet) {
        obj.insert(QString("ColumnName"), ::OpenAPI::toJsonValue(m_column_name));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAITagColumnOperation::getColumnName() const {
    return m_column_name;
}
void OAITagColumnOperation::setColumnName(const QString &column_name) {
    m_column_name = column_name;
    m_column_name_isSet = true;
}

bool OAITagColumnOperation::is_column_name_Set() const{
    return m_column_name_isSet;
}

bool OAITagColumnOperation::is_column_name_Valid() const{
    return m_column_name_isValid;
}

QList OAITagColumnOperation::getTags() const {
    return m_tags;
}
void OAITagColumnOperation::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAITagColumnOperation::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAITagColumnOperation::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAITagColumnOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITagColumnOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_column_name_isValid && m_tags_isValid && true;
}

} // namespace OpenAPI
