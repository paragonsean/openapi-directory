/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComputation_PeriodToDate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComputation_PeriodToDate::OAIComputation_PeriodToDate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComputation_PeriodToDate::OAIComputation_PeriodToDate() {
    this->initializeModel();
}

OAIComputation_PeriodToDate::~OAIComputation_PeriodToDate() {}

void OAIComputation_PeriodToDate::initializeModel() {

    m_computation_id_isSet = false;
    m_computation_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_period_time_granularity_isSet = false;
    m_period_time_granularity_isValid = false;
}

void OAIComputation_PeriodToDate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComputation_PeriodToDate::fromJsonObject(QJsonObject json) {

    m_computation_id_isValid = ::OpenAPI::fromJsonValue(m_computation_id, json[QString("ComputationId")]);
    m_computation_id_isSet = !json[QString("ComputationId")].isNull() && m_computation_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("Time")]);
    m_time_isSet = !json[QString("Time")].isNull() && m_time_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_period_time_granularity_isValid = ::OpenAPI::fromJsonValue(m_period_time_granularity, json[QString("PeriodTimeGranularity")]);
    m_period_time_granularity_isSet = !json[QString("PeriodTimeGranularity")].isNull() && m_period_time_granularity_isValid;
}

QString OAIComputation_PeriodToDate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComputation_PeriodToDate::asJsonObject() const {
    QJsonObject obj;
    if (m_computation_id_isSet) {
        obj.insert(QString("ComputationId"), ::OpenAPI::toJsonValue(m_computation_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_time.isSet()) {
        obj.insert(QString("Time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_value.isSet()) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_period_time_granularity.isSet()) {
        obj.insert(QString("PeriodTimeGranularity"), ::OpenAPI::toJsonValue(m_period_time_granularity));
    }
    return obj;
}

QString OAIComputation_PeriodToDate::getComputationId() const {
    return m_computation_id;
}
void OAIComputation_PeriodToDate::setComputationId(const QString &computation_id) {
    m_computation_id = computation_id;
    m_computation_id_isSet = true;
}

bool OAIComputation_PeriodToDate::is_computation_id_Set() const{
    return m_computation_id_isSet;
}

bool OAIComputation_PeriodToDate::is_computation_id_Valid() const{
    return m_computation_id_isValid;
}

QString OAIComputation_PeriodToDate::getName() const {
    return m_name;
}
void OAIComputation_PeriodToDate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIComputation_PeriodToDate::is_name_Set() const{
    return m_name_isSet;
}

bool OAIComputation_PeriodToDate::is_name_Valid() const{
    return m_name_isValid;
}

OAITopBottomMoversComputation_Time OAIComputation_PeriodToDate::getTime() const {
    return m_time;
}
void OAIComputation_PeriodToDate::setTime(const OAITopBottomMoversComputation_Time &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIComputation_PeriodToDate::is_time_Set() const{
    return m_time_isSet;
}

bool OAIComputation_PeriodToDate::is_time_Valid() const{
    return m_time_isValid;
}

OAITopBottomRankedComputation_Value OAIComputation_PeriodToDate::getValue() const {
    return m_value;
}
void OAIComputation_PeriodToDate::setValue(const OAITopBottomRankedComputation_Value &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIComputation_PeriodToDate::is_value_Set() const{
    return m_value_isSet;
}

bool OAIComputation_PeriodToDate::is_value_Valid() const{
    return m_value_isValid;
}

OAITimeGranularity OAIComputation_PeriodToDate::getPeriodTimeGranularity() const {
    return m_period_time_granularity;
}
void OAIComputation_PeriodToDate::setPeriodTimeGranularity(const OAITimeGranularity &period_time_granularity) {
    m_period_time_granularity = period_time_granularity;
    m_period_time_granularity_isSet = true;
}

bool OAIComputation_PeriodToDate::is_period_time_granularity_Set() const{
    return m_period_time_granularity_isSet;
}

bool OAIComputation_PeriodToDate::is_period_time_granularity_Valid() const{
    return m_period_time_granularity_isValid;
}

bool OAIComputation_PeriodToDate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_computation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_time_granularity.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComputation_PeriodToDate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_computation_id_isValid && m_time_isValid && true;
}

} // namespace OpenAPI
