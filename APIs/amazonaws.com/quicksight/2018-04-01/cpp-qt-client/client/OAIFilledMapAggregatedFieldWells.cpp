/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilledMapAggregatedFieldWells.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilledMapAggregatedFieldWells::OAIFilledMapAggregatedFieldWells(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilledMapAggregatedFieldWells::OAIFilledMapAggregatedFieldWells() {
    this->initializeModel();
}

OAIFilledMapAggregatedFieldWells::~OAIFilledMapAggregatedFieldWells() {}

void OAIFilledMapAggregatedFieldWells::initializeModel() {

    m_geospatial_isSet = false;
    m_geospatial_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIFilledMapAggregatedFieldWells::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilledMapAggregatedFieldWells::fromJsonObject(QJsonObject json) {

    m_geospatial_isValid = ::OpenAPI::fromJsonValue(m_geospatial, json[QString("Geospatial")]);
    m_geospatial_isSet = !json[QString("Geospatial")].isNull() && m_geospatial_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("Values")]);
    m_values_isSet = !json[QString("Values")].isNull() && m_values_isValid;
}

QString OAIFilledMapAggregatedFieldWells::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilledMapAggregatedFieldWells::asJsonObject() const {
    QJsonObject obj;
    if (m_geospatial.isSet()) {
        obj.insert(QString("Geospatial"), ::OpenAPI::toJsonValue(m_geospatial));
    }
    if (m_values.isSet()) {
        obj.insert(QString("Values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QList OAIFilledMapAggregatedFieldWells::getGeospatial() const {
    return m_geospatial;
}
void OAIFilledMapAggregatedFieldWells::setGeospatial(const QList &geospatial) {
    m_geospatial = geospatial;
    m_geospatial_isSet = true;
}

bool OAIFilledMapAggregatedFieldWells::is_geospatial_Set() const{
    return m_geospatial_isSet;
}

bool OAIFilledMapAggregatedFieldWells::is_geospatial_Valid() const{
    return m_geospatial_isValid;
}

QList OAIFilledMapAggregatedFieldWells::getValues() const {
    return m_values;
}
void OAIFilledMapAggregatedFieldWells::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIFilledMapAggregatedFieldWells::is_values_Set() const{
    return m_values_isSet;
}

bool OAIFilledMapAggregatedFieldWells::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIFilledMapAggregatedFieldWells::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_geospatial.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilledMapAggregatedFieldWells::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
