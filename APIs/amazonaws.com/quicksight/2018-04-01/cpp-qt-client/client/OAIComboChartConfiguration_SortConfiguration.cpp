/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComboChartConfiguration_SortConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComboChartConfiguration_SortConfiguration::OAIComboChartConfiguration_SortConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComboChartConfiguration_SortConfiguration::OAIComboChartConfiguration_SortConfiguration() {
    this->initializeModel();
}

OAIComboChartConfiguration_SortConfiguration::~OAIComboChartConfiguration_SortConfiguration() {}

void OAIComboChartConfiguration_SortConfiguration::initializeModel() {

    m_category_sort_isSet = false;
    m_category_sort_isValid = false;

    m_category_items_limit_isSet = false;
    m_category_items_limit_isValid = false;

    m_color_sort_isSet = false;
    m_color_sort_isValid = false;

    m_color_items_limit_isSet = false;
    m_color_items_limit_isValid = false;
}

void OAIComboChartConfiguration_SortConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComboChartConfiguration_SortConfiguration::fromJsonObject(QJsonObject json) {

    m_category_sort_isValid = ::OpenAPI::fromJsonValue(m_category_sort, json[QString("CategorySort")]);
    m_category_sort_isSet = !json[QString("CategorySort")].isNull() && m_category_sort_isValid;

    m_category_items_limit_isValid = ::OpenAPI::fromJsonValue(m_category_items_limit, json[QString("CategoryItemsLimit")]);
    m_category_items_limit_isSet = !json[QString("CategoryItemsLimit")].isNull() && m_category_items_limit_isValid;

    m_color_sort_isValid = ::OpenAPI::fromJsonValue(m_color_sort, json[QString("ColorSort")]);
    m_color_sort_isSet = !json[QString("ColorSort")].isNull() && m_color_sort_isValid;

    m_color_items_limit_isValid = ::OpenAPI::fromJsonValue(m_color_items_limit, json[QString("ColorItemsLimit")]);
    m_color_items_limit_isSet = !json[QString("ColorItemsLimit")].isNull() && m_color_items_limit_isValid;
}

QString OAIComboChartConfiguration_SortConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComboChartConfiguration_SortConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_category_sort.isSet()) {
        obj.insert(QString("CategorySort"), ::OpenAPI::toJsonValue(m_category_sort));
    }
    if (m_category_items_limit.isSet()) {
        obj.insert(QString("CategoryItemsLimit"), ::OpenAPI::toJsonValue(m_category_items_limit));
    }
    if (m_color_sort.isSet()) {
        obj.insert(QString("ColorSort"), ::OpenAPI::toJsonValue(m_color_sort));
    }
    if (m_color_items_limit.isSet()) {
        obj.insert(QString("ColorItemsLimit"), ::OpenAPI::toJsonValue(m_color_items_limit));
    }
    return obj;
}

QList OAIComboChartConfiguration_SortConfiguration::getCategorySort() const {
    return m_category_sort;
}
void OAIComboChartConfiguration_SortConfiguration::setCategorySort(const QList &category_sort) {
    m_category_sort = category_sort;
    m_category_sort_isSet = true;
}

bool OAIComboChartConfiguration_SortConfiguration::is_category_sort_Set() const{
    return m_category_sort_isSet;
}

bool OAIComboChartConfiguration_SortConfiguration::is_category_sort_Valid() const{
    return m_category_sort_isValid;
}

OAIComboChartSortConfiguration_CategoryItemsLimit OAIComboChartConfiguration_SortConfiguration::getCategoryItemsLimit() const {
    return m_category_items_limit;
}
void OAIComboChartConfiguration_SortConfiguration::setCategoryItemsLimit(const OAIComboChartSortConfiguration_CategoryItemsLimit &category_items_limit) {
    m_category_items_limit = category_items_limit;
    m_category_items_limit_isSet = true;
}

bool OAIComboChartConfiguration_SortConfiguration::is_category_items_limit_Set() const{
    return m_category_items_limit_isSet;
}

bool OAIComboChartConfiguration_SortConfiguration::is_category_items_limit_Valid() const{
    return m_category_items_limit_isValid;
}

QList OAIComboChartConfiguration_SortConfiguration::getColorSort() const {
    return m_color_sort;
}
void OAIComboChartConfiguration_SortConfiguration::setColorSort(const QList &color_sort) {
    m_color_sort = color_sort;
    m_color_sort_isSet = true;
}

bool OAIComboChartConfiguration_SortConfiguration::is_color_sort_Set() const{
    return m_color_sort_isSet;
}

bool OAIComboChartConfiguration_SortConfiguration::is_color_sort_Valid() const{
    return m_color_sort_isValid;
}

OAIComboChartSortConfiguration_ColorItemsLimit OAIComboChartConfiguration_SortConfiguration::getColorItemsLimit() const {
    return m_color_items_limit;
}
void OAIComboChartConfiguration_SortConfiguration::setColorItemsLimit(const OAIComboChartSortConfiguration_ColorItemsLimit &color_items_limit) {
    m_color_items_limit = color_items_limit;
    m_color_items_limit_isSet = true;
}

bool OAIComboChartConfiguration_SortConfiguration::is_color_items_limit_Set() const{
    return m_color_items_limit_isSet;
}

bool OAIComboChartConfiguration_SortConfiguration::is_color_items_limit_Valid() const{
    return m_color_items_limit_isValid;
}

bool OAIComboChartConfiguration_SortConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_sort.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_items_limit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_sort.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_items_limit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComboChartConfiguration_SortConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
