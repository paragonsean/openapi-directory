/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFreeFormLayoutElement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFreeFormLayoutElement::OAIFreeFormLayoutElement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFreeFormLayoutElement::OAIFreeFormLayoutElement() {
    this->initializeModel();
}

OAIFreeFormLayoutElement::~OAIFreeFormLayoutElement() {}

void OAIFreeFormLayoutElement::initializeModel() {

    m_element_id_isSet = false;
    m_element_id_isValid = false;

    m_element_type_isSet = false;
    m_element_type_isValid = false;

    m_x_axis_location_isSet = false;
    m_x_axis_location_isValid = false;

    m_y_axis_location_isSet = false;
    m_y_axis_location_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;

    m_rendering_rules_isSet = false;
    m_rendering_rules_isValid = false;

    m_border_style_isSet = false;
    m_border_style_isValid = false;

    m_selected_border_style_isSet = false;
    m_selected_border_style_isValid = false;

    m_background_style_isSet = false;
    m_background_style_isValid = false;

    m_loading_animation_isSet = false;
    m_loading_animation_isValid = false;
}

void OAIFreeFormLayoutElement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFreeFormLayoutElement::fromJsonObject(QJsonObject json) {

    m_element_id_isValid = ::OpenAPI::fromJsonValue(m_element_id, json[QString("ElementId")]);
    m_element_id_isSet = !json[QString("ElementId")].isNull() && m_element_id_isValid;

    m_element_type_isValid = ::OpenAPI::fromJsonValue(m_element_type, json[QString("ElementType")]);
    m_element_type_isSet = !json[QString("ElementType")].isNull() && m_element_type_isValid;

    m_x_axis_location_isValid = ::OpenAPI::fromJsonValue(m_x_axis_location, json[QString("XAxisLocation")]);
    m_x_axis_location_isSet = !json[QString("XAxisLocation")].isNull() && m_x_axis_location_isValid;

    m_y_axis_location_isValid = ::OpenAPI::fromJsonValue(m_y_axis_location, json[QString("YAxisLocation")]);
    m_y_axis_location_isSet = !json[QString("YAxisLocation")].isNull() && m_y_axis_location_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("Width")]);
    m_width_isSet = !json[QString("Width")].isNull() && m_width_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("Height")]);
    m_height_isSet = !json[QString("Height")].isNull() && m_height_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("Visibility")]);
    m_visibility_isSet = !json[QString("Visibility")].isNull() && m_visibility_isValid;

    m_rendering_rules_isValid = ::OpenAPI::fromJsonValue(m_rendering_rules, json[QString("RenderingRules")]);
    m_rendering_rules_isSet = !json[QString("RenderingRules")].isNull() && m_rendering_rules_isValid;

    m_border_style_isValid = ::OpenAPI::fromJsonValue(m_border_style, json[QString("BorderStyle")]);
    m_border_style_isSet = !json[QString("BorderStyle")].isNull() && m_border_style_isValid;

    m_selected_border_style_isValid = ::OpenAPI::fromJsonValue(m_selected_border_style, json[QString("SelectedBorderStyle")]);
    m_selected_border_style_isSet = !json[QString("SelectedBorderStyle")].isNull() && m_selected_border_style_isValid;

    m_background_style_isValid = ::OpenAPI::fromJsonValue(m_background_style, json[QString("BackgroundStyle")]);
    m_background_style_isSet = !json[QString("BackgroundStyle")].isNull() && m_background_style_isValid;

    m_loading_animation_isValid = ::OpenAPI::fromJsonValue(m_loading_animation, json[QString("LoadingAnimation")]);
    m_loading_animation_isSet = !json[QString("LoadingAnimation")].isNull() && m_loading_animation_isValid;
}

QString OAIFreeFormLayoutElement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFreeFormLayoutElement::asJsonObject() const {
    QJsonObject obj;
    if (m_element_id_isSet) {
        obj.insert(QString("ElementId"), ::OpenAPI::toJsonValue(m_element_id));
    }
    if (m_element_type.isSet()) {
        obj.insert(QString("ElementType"), ::OpenAPI::toJsonValue(m_element_type));
    }
    if (m_x_axis_location_isSet) {
        obj.insert(QString("XAxisLocation"), ::OpenAPI::toJsonValue(m_x_axis_location));
    }
    if (m_y_axis_location_isSet) {
        obj.insert(QString("YAxisLocation"), ::OpenAPI::toJsonValue(m_y_axis_location));
    }
    if (m_width_isSet) {
        obj.insert(QString("Width"), ::OpenAPI::toJsonValue(m_width));
    }
    if (m_height_isSet) {
        obj.insert(QString("Height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_visibility.isSet()) {
        obj.insert(QString("Visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    if (m_rendering_rules.isSet()) {
        obj.insert(QString("RenderingRules"), ::OpenAPI::toJsonValue(m_rendering_rules));
    }
    if (m_border_style.isSet()) {
        obj.insert(QString("BorderStyle"), ::OpenAPI::toJsonValue(m_border_style));
    }
    if (m_selected_border_style.isSet()) {
        obj.insert(QString("SelectedBorderStyle"), ::OpenAPI::toJsonValue(m_selected_border_style));
    }
    if (m_background_style.isSet()) {
        obj.insert(QString("BackgroundStyle"), ::OpenAPI::toJsonValue(m_background_style));
    }
    if (m_loading_animation.isSet()) {
        obj.insert(QString("LoadingAnimation"), ::OpenAPI::toJsonValue(m_loading_animation));
    }
    return obj;
}

QString OAIFreeFormLayoutElement::getElementId() const {
    return m_element_id;
}
void OAIFreeFormLayoutElement::setElementId(const QString &element_id) {
    m_element_id = element_id;
    m_element_id_isSet = true;
}

bool OAIFreeFormLayoutElement::is_element_id_Set() const{
    return m_element_id_isSet;
}

bool OAIFreeFormLayoutElement::is_element_id_Valid() const{
    return m_element_id_isValid;
}

OAILayoutElementType OAIFreeFormLayoutElement::getElementType() const {
    return m_element_type;
}
void OAIFreeFormLayoutElement::setElementType(const OAILayoutElementType &element_type) {
    m_element_type = element_type;
    m_element_type_isSet = true;
}

bool OAIFreeFormLayoutElement::is_element_type_Set() const{
    return m_element_type_isSet;
}

bool OAIFreeFormLayoutElement::is_element_type_Valid() const{
    return m_element_type_isValid;
}

QString OAIFreeFormLayoutElement::getXAxisLocation() const {
    return m_x_axis_location;
}
void OAIFreeFormLayoutElement::setXAxisLocation(const QString &x_axis_location) {
    m_x_axis_location = x_axis_location;
    m_x_axis_location_isSet = true;
}

bool OAIFreeFormLayoutElement::is_x_axis_location_Set() const{
    return m_x_axis_location_isSet;
}

bool OAIFreeFormLayoutElement::is_x_axis_location_Valid() const{
    return m_x_axis_location_isValid;
}

QString OAIFreeFormLayoutElement::getYAxisLocation() const {
    return m_y_axis_location;
}
void OAIFreeFormLayoutElement::setYAxisLocation(const QString &y_axis_location) {
    m_y_axis_location = y_axis_location;
    m_y_axis_location_isSet = true;
}

bool OAIFreeFormLayoutElement::is_y_axis_location_Set() const{
    return m_y_axis_location_isSet;
}

bool OAIFreeFormLayoutElement::is_y_axis_location_Valid() const{
    return m_y_axis_location_isValid;
}

QString OAIFreeFormLayoutElement::getWidth() const {
    return m_width;
}
void OAIFreeFormLayoutElement::setWidth(const QString &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIFreeFormLayoutElement::is_width_Set() const{
    return m_width_isSet;
}

bool OAIFreeFormLayoutElement::is_width_Valid() const{
    return m_width_isValid;
}

QString OAIFreeFormLayoutElement::getHeight() const {
    return m_height;
}
void OAIFreeFormLayoutElement::setHeight(const QString &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIFreeFormLayoutElement::is_height_Set() const{
    return m_height_isSet;
}

bool OAIFreeFormLayoutElement::is_height_Valid() const{
    return m_height_isValid;
}

OAIVisibility OAIFreeFormLayoutElement::getVisibility() const {
    return m_visibility;
}
void OAIFreeFormLayoutElement::setVisibility(const OAIVisibility &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIFreeFormLayoutElement::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIFreeFormLayoutElement::is_visibility_Valid() const{
    return m_visibility_isValid;
}

QList OAIFreeFormLayoutElement::getRenderingRules() const {
    return m_rendering_rules;
}
void OAIFreeFormLayoutElement::setRenderingRules(const QList &rendering_rules) {
    m_rendering_rules = rendering_rules;
    m_rendering_rules_isSet = true;
}

bool OAIFreeFormLayoutElement::is_rendering_rules_Set() const{
    return m_rendering_rules_isSet;
}

bool OAIFreeFormLayoutElement::is_rendering_rules_Valid() const{
    return m_rendering_rules_isValid;
}

OAIFreeFormLayoutElement_BorderStyle OAIFreeFormLayoutElement::getBorderStyle() const {
    return m_border_style;
}
void OAIFreeFormLayoutElement::setBorderStyle(const OAIFreeFormLayoutElement_BorderStyle &border_style) {
    m_border_style = border_style;
    m_border_style_isSet = true;
}

bool OAIFreeFormLayoutElement::is_border_style_Set() const{
    return m_border_style_isSet;
}

bool OAIFreeFormLayoutElement::is_border_style_Valid() const{
    return m_border_style_isValid;
}

OAIFreeFormLayoutElement_SelectedBorderStyle OAIFreeFormLayoutElement::getSelectedBorderStyle() const {
    return m_selected_border_style;
}
void OAIFreeFormLayoutElement::setSelectedBorderStyle(const OAIFreeFormLayoutElement_SelectedBorderStyle &selected_border_style) {
    m_selected_border_style = selected_border_style;
    m_selected_border_style_isSet = true;
}

bool OAIFreeFormLayoutElement::is_selected_border_style_Set() const{
    return m_selected_border_style_isSet;
}

bool OAIFreeFormLayoutElement::is_selected_border_style_Valid() const{
    return m_selected_border_style_isValid;
}

OAIFreeFormLayoutElement_BackgroundStyle OAIFreeFormLayoutElement::getBackgroundStyle() const {
    return m_background_style;
}
void OAIFreeFormLayoutElement::setBackgroundStyle(const OAIFreeFormLayoutElement_BackgroundStyle &background_style) {
    m_background_style = background_style;
    m_background_style_isSet = true;
}

bool OAIFreeFormLayoutElement::is_background_style_Set() const{
    return m_background_style_isSet;
}

bool OAIFreeFormLayoutElement::is_background_style_Valid() const{
    return m_background_style_isValid;
}

OAIFreeFormLayoutElement_LoadingAnimation OAIFreeFormLayoutElement::getLoadingAnimation() const {
    return m_loading_animation;
}
void OAIFreeFormLayoutElement::setLoadingAnimation(const OAIFreeFormLayoutElement_LoadingAnimation &loading_animation) {
    m_loading_animation = loading_animation;
    m_loading_animation_isSet = true;
}

bool OAIFreeFormLayoutElement::is_loading_animation_Set() const{
    return m_loading_animation_isSet;
}

bool OAIFreeFormLayoutElement::is_loading_animation_Valid() const{
    return m_loading_animation_isValid;
}

bool OAIFreeFormLayoutElement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_element_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_element_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_axis_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_axis_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rendering_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_border_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_loading_animation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFreeFormLayoutElement::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_element_id_isValid && m_element_type_isValid && m_x_axis_location_isValid && m_y_axis_location_isValid && m_width_isValid && m_height_isValid && true;
}

} // namespace OpenAPI
