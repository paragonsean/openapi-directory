/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotTableConditionalFormattingOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotTableConditionalFormattingOption::OAIPivotTableConditionalFormattingOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotTableConditionalFormattingOption::OAIPivotTableConditionalFormattingOption() {
    this->initializeModel();
}

OAIPivotTableConditionalFormattingOption::~OAIPivotTableConditionalFormattingOption() {}

void OAIPivotTableConditionalFormattingOption::initializeModel() {

    m_cell_isSet = false;
    m_cell_isValid = false;
}

void OAIPivotTableConditionalFormattingOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotTableConditionalFormattingOption::fromJsonObject(QJsonObject json) {

    m_cell_isValid = ::OpenAPI::fromJsonValue(m_cell, json[QString("Cell")]);
    m_cell_isSet = !json[QString("Cell")].isNull() && m_cell_isValid;
}

QString OAIPivotTableConditionalFormattingOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotTableConditionalFormattingOption::asJsonObject() const {
    QJsonObject obj;
    if (m_cell.isSet()) {
        obj.insert(QString("Cell"), ::OpenAPI::toJsonValue(m_cell));
    }
    return obj;
}

OAIPivotTableConditionalFormattingOption_Cell OAIPivotTableConditionalFormattingOption::getCell() const {
    return m_cell;
}
void OAIPivotTableConditionalFormattingOption::setCell(const OAIPivotTableConditionalFormattingOption_Cell &cell) {
    m_cell = cell;
    m_cell_isSet = true;
}

bool OAIPivotTableConditionalFormattingOption::is_cell_Set() const{
    return m_cell_isSet;
}

bool OAIPivotTableConditionalFormattingOption::is_cell_Valid() const{
    return m_cell_isValid;
}

bool OAIPivotTableConditionalFormattingOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cell.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotTableConditionalFormattingOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
