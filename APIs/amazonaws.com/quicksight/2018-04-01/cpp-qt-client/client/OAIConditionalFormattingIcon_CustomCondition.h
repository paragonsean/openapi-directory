/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConditionalFormattingIcon_CustomCondition.h
 *
 * 
 */

#ifndef OAIConditionalFormattingIcon_CustomCondition_H
#define OAIConditionalFormattingIcon_CustomCondition_H

#include <QJsonObject>

#include "OAIConditionalFormattingCustomIconCondition_DisplayConfiguration.h"
#include "OAIConditionalFormattingCustomIconCondition_IconOptions.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIConditionalFormattingCustomIconCondition_IconOptions;
class OAIConditionalFormattingCustomIconCondition_DisplayConfiguration;

class OAIConditionalFormattingIcon_CustomCondition : public OAIObject {
public:
    OAIConditionalFormattingIcon_CustomCondition();
    OAIConditionalFormattingIcon_CustomCondition(QString json);
    ~OAIConditionalFormattingIcon_CustomCondition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getExpression() const;
    void setExpression(const QString &expression);
    bool is_expression_Set() const;
    bool is_expression_Valid() const;

    OAIConditionalFormattingCustomIconCondition_IconOptions getIconOptions() const;
    void setIconOptions(const OAIConditionalFormattingCustomIconCondition_IconOptions &icon_options);
    bool is_icon_options_Set() const;
    bool is_icon_options_Valid() const;

    QString getColor() const;
    void setColor(const QString &color);
    bool is_color_Set() const;
    bool is_color_Valid() const;

    OAIConditionalFormattingCustomIconCondition_DisplayConfiguration getDisplayConfiguration() const;
    void setDisplayConfiguration(const OAIConditionalFormattingCustomIconCondition_DisplayConfiguration &display_configuration);
    bool is_display_configuration_Set() const;
    bool is_display_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_expression;
    bool m_expression_isSet;
    bool m_expression_isValid;

    OAIConditionalFormattingCustomIconCondition_IconOptions m_icon_options;
    bool m_icon_options_isSet;
    bool m_icon_options_isValid;

    QString m_color;
    bool m_color_isSet;
    bool m_color_isValid;

    OAIConditionalFormattingCustomIconCondition_DisplayConfiguration m_display_configuration;
    bool m_display_configuration_isSet;
    bool m_display_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConditionalFormattingIcon_CustomCondition)

#endif // OAIConditionalFormattingIcon_CustomCondition_H
