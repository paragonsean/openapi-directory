/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3Source_UploadSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3Source_UploadSettings::OAIS3Source_UploadSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3Source_UploadSettings::OAIS3Source_UploadSettings() {
    this->initializeModel();
}

OAIS3Source_UploadSettings::~OAIS3Source_UploadSettings() {}

void OAIS3Source_UploadSettings::initializeModel() {

    m_format_isSet = false;
    m_format_isValid = false;

    m_start_from_row_isSet = false;
    m_start_from_row_isValid = false;

    m_contains_header_isSet = false;
    m_contains_header_isValid = false;

    m_text_qualifier_isSet = false;
    m_text_qualifier_isValid = false;

    m_delimiter_isSet = false;
    m_delimiter_isValid = false;
}

void OAIS3Source_UploadSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3Source_UploadSettings::fromJsonObject(QJsonObject json) {

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("Format")]);
    m_format_isSet = !json[QString("Format")].isNull() && m_format_isValid;

    m_start_from_row_isValid = ::OpenAPI::fromJsonValue(m_start_from_row, json[QString("StartFromRow")]);
    m_start_from_row_isSet = !json[QString("StartFromRow")].isNull() && m_start_from_row_isValid;

    m_contains_header_isValid = ::OpenAPI::fromJsonValue(m_contains_header, json[QString("ContainsHeader")]);
    m_contains_header_isSet = !json[QString("ContainsHeader")].isNull() && m_contains_header_isValid;

    m_text_qualifier_isValid = ::OpenAPI::fromJsonValue(m_text_qualifier, json[QString("TextQualifier")]);
    m_text_qualifier_isSet = !json[QString("TextQualifier")].isNull() && m_text_qualifier_isValid;

    m_delimiter_isValid = ::OpenAPI::fromJsonValue(m_delimiter, json[QString("Delimiter")]);
    m_delimiter_isSet = !json[QString("Delimiter")].isNull() && m_delimiter_isValid;
}

QString OAIS3Source_UploadSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3Source_UploadSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_format.isSet()) {
        obj.insert(QString("Format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_start_from_row_isSet) {
        obj.insert(QString("StartFromRow"), ::OpenAPI::toJsonValue(m_start_from_row));
    }
    if (m_contains_header_isSet) {
        obj.insert(QString("ContainsHeader"), ::OpenAPI::toJsonValue(m_contains_header));
    }
    if (m_text_qualifier.isSet()) {
        obj.insert(QString("TextQualifier"), ::OpenAPI::toJsonValue(m_text_qualifier));
    }
    if (m_delimiter_isSet) {
        obj.insert(QString("Delimiter"), ::OpenAPI::toJsonValue(m_delimiter));
    }
    return obj;
}

OAIFileFormat OAIS3Source_UploadSettings::getFormat() const {
    return m_format;
}
void OAIS3Source_UploadSettings::setFormat(const OAIFileFormat &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIS3Source_UploadSettings::is_format_Set() const{
    return m_format_isSet;
}

bool OAIS3Source_UploadSettings::is_format_Valid() const{
    return m_format_isValid;
}

qint32 OAIS3Source_UploadSettings::getStartFromRow() const {
    return m_start_from_row;
}
void OAIS3Source_UploadSettings::setStartFromRow(const qint32 &start_from_row) {
    m_start_from_row = start_from_row;
    m_start_from_row_isSet = true;
}

bool OAIS3Source_UploadSettings::is_start_from_row_Set() const{
    return m_start_from_row_isSet;
}

bool OAIS3Source_UploadSettings::is_start_from_row_Valid() const{
    return m_start_from_row_isValid;
}

bool OAIS3Source_UploadSettings::getContainsHeader() const {
    return m_contains_header;
}
void OAIS3Source_UploadSettings::setContainsHeader(const bool &contains_header) {
    m_contains_header = contains_header;
    m_contains_header_isSet = true;
}

bool OAIS3Source_UploadSettings::is_contains_header_Set() const{
    return m_contains_header_isSet;
}

bool OAIS3Source_UploadSettings::is_contains_header_Valid() const{
    return m_contains_header_isValid;
}

OAITextQualifier OAIS3Source_UploadSettings::getTextQualifier() const {
    return m_text_qualifier;
}
void OAIS3Source_UploadSettings::setTextQualifier(const OAITextQualifier &text_qualifier) {
    m_text_qualifier = text_qualifier;
    m_text_qualifier_isSet = true;
}

bool OAIS3Source_UploadSettings::is_text_qualifier_Set() const{
    return m_text_qualifier_isSet;
}

bool OAIS3Source_UploadSettings::is_text_qualifier_Valid() const{
    return m_text_qualifier_isValid;
}

QString OAIS3Source_UploadSettings::getDelimiter() const {
    return m_delimiter;
}
void OAIS3Source_UploadSettings::setDelimiter(const QString &delimiter) {
    m_delimiter = delimiter;
    m_delimiter_isSet = true;
}

bool OAIS3Source_UploadSettings::is_delimiter_Set() const{
    return m_delimiter_isSet;
}

bool OAIS3Source_UploadSettings::is_delimiter_Valid() const{
    return m_delimiter_isValid;
}

bool OAIS3Source_UploadSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_from_row_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contains_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_qualifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delimiter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3Source_UploadSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
