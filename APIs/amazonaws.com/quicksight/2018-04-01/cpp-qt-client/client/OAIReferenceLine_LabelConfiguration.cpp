/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReferenceLine_LabelConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReferenceLine_LabelConfiguration::OAIReferenceLine_LabelConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReferenceLine_LabelConfiguration::OAIReferenceLine_LabelConfiguration() {
    this->initializeModel();
}

OAIReferenceLine_LabelConfiguration::~OAIReferenceLine_LabelConfiguration() {}

void OAIReferenceLine_LabelConfiguration::initializeModel() {

    m_value_label_configuration_isSet = false;
    m_value_label_configuration_isValid = false;

    m_custom_label_configuration_isSet = false;
    m_custom_label_configuration_isValid = false;

    m_font_configuration_isSet = false;
    m_font_configuration_isValid = false;

    m_font_color_isSet = false;
    m_font_color_isValid = false;

    m_horizontal_position_isSet = false;
    m_horizontal_position_isValid = false;

    m_vertical_position_isSet = false;
    m_vertical_position_isValid = false;
}

void OAIReferenceLine_LabelConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReferenceLine_LabelConfiguration::fromJsonObject(QJsonObject json) {

    m_value_label_configuration_isValid = ::OpenAPI::fromJsonValue(m_value_label_configuration, json[QString("ValueLabelConfiguration")]);
    m_value_label_configuration_isSet = !json[QString("ValueLabelConfiguration")].isNull() && m_value_label_configuration_isValid;

    m_custom_label_configuration_isValid = ::OpenAPI::fromJsonValue(m_custom_label_configuration, json[QString("CustomLabelConfiguration")]);
    m_custom_label_configuration_isSet = !json[QString("CustomLabelConfiguration")].isNull() && m_custom_label_configuration_isValid;

    m_font_configuration_isValid = ::OpenAPI::fromJsonValue(m_font_configuration, json[QString("FontConfiguration")]);
    m_font_configuration_isSet = !json[QString("FontConfiguration")].isNull() && m_font_configuration_isValid;

    m_font_color_isValid = ::OpenAPI::fromJsonValue(m_font_color, json[QString("FontColor")]);
    m_font_color_isSet = !json[QString("FontColor")].isNull() && m_font_color_isValid;

    m_horizontal_position_isValid = ::OpenAPI::fromJsonValue(m_horizontal_position, json[QString("HorizontalPosition")]);
    m_horizontal_position_isSet = !json[QString("HorizontalPosition")].isNull() && m_horizontal_position_isValid;

    m_vertical_position_isValid = ::OpenAPI::fromJsonValue(m_vertical_position, json[QString("VerticalPosition")]);
    m_vertical_position_isSet = !json[QString("VerticalPosition")].isNull() && m_vertical_position_isValid;
}

QString OAIReferenceLine_LabelConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReferenceLine_LabelConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_value_label_configuration.isSet()) {
        obj.insert(QString("ValueLabelConfiguration"), ::OpenAPI::toJsonValue(m_value_label_configuration));
    }
    if (m_custom_label_configuration.isSet()) {
        obj.insert(QString("CustomLabelConfiguration"), ::OpenAPI::toJsonValue(m_custom_label_configuration));
    }
    if (m_font_configuration.isSet()) {
        obj.insert(QString("FontConfiguration"), ::OpenAPI::toJsonValue(m_font_configuration));
    }
    if (m_font_color_isSet) {
        obj.insert(QString("FontColor"), ::OpenAPI::toJsonValue(m_font_color));
    }
    if (m_horizontal_position.isSet()) {
        obj.insert(QString("HorizontalPosition"), ::OpenAPI::toJsonValue(m_horizontal_position));
    }
    if (m_vertical_position.isSet()) {
        obj.insert(QString("VerticalPosition"), ::OpenAPI::toJsonValue(m_vertical_position));
    }
    return obj;
}

OAIReferenceLineLabelConfiguration_ValueLabelConfiguration OAIReferenceLine_LabelConfiguration::getValueLabelConfiguration() const {
    return m_value_label_configuration;
}
void OAIReferenceLine_LabelConfiguration::setValueLabelConfiguration(const OAIReferenceLineLabelConfiguration_ValueLabelConfiguration &value_label_configuration) {
    m_value_label_configuration = value_label_configuration;
    m_value_label_configuration_isSet = true;
}

bool OAIReferenceLine_LabelConfiguration::is_value_label_configuration_Set() const{
    return m_value_label_configuration_isSet;
}

bool OAIReferenceLine_LabelConfiguration::is_value_label_configuration_Valid() const{
    return m_value_label_configuration_isValid;
}

OAIReferenceLineLabelConfiguration_CustomLabelConfiguration OAIReferenceLine_LabelConfiguration::getCustomLabelConfiguration() const {
    return m_custom_label_configuration;
}
void OAIReferenceLine_LabelConfiguration::setCustomLabelConfiguration(const OAIReferenceLineLabelConfiguration_CustomLabelConfiguration &custom_label_configuration) {
    m_custom_label_configuration = custom_label_configuration;
    m_custom_label_configuration_isSet = true;
}

bool OAIReferenceLine_LabelConfiguration::is_custom_label_configuration_Set() const{
    return m_custom_label_configuration_isSet;
}

bool OAIReferenceLine_LabelConfiguration::is_custom_label_configuration_Valid() const{
    return m_custom_label_configuration_isValid;
}

OAIReferenceLineLabelConfiguration_FontConfiguration OAIReferenceLine_LabelConfiguration::getFontConfiguration() const {
    return m_font_configuration;
}
void OAIReferenceLine_LabelConfiguration::setFontConfiguration(const OAIReferenceLineLabelConfiguration_FontConfiguration &font_configuration) {
    m_font_configuration = font_configuration;
    m_font_configuration_isSet = true;
}

bool OAIReferenceLine_LabelConfiguration::is_font_configuration_Set() const{
    return m_font_configuration_isSet;
}

bool OAIReferenceLine_LabelConfiguration::is_font_configuration_Valid() const{
    return m_font_configuration_isValid;
}

QString OAIReferenceLine_LabelConfiguration::getFontColor() const {
    return m_font_color;
}
void OAIReferenceLine_LabelConfiguration::setFontColor(const QString &font_color) {
    m_font_color = font_color;
    m_font_color_isSet = true;
}

bool OAIReferenceLine_LabelConfiguration::is_font_color_Set() const{
    return m_font_color_isSet;
}

bool OAIReferenceLine_LabelConfiguration::is_font_color_Valid() const{
    return m_font_color_isValid;
}

OAIReferenceLineLabelHorizontalPosition OAIReferenceLine_LabelConfiguration::getHorizontalPosition() const {
    return m_horizontal_position;
}
void OAIReferenceLine_LabelConfiguration::setHorizontalPosition(const OAIReferenceLineLabelHorizontalPosition &horizontal_position) {
    m_horizontal_position = horizontal_position;
    m_horizontal_position_isSet = true;
}

bool OAIReferenceLine_LabelConfiguration::is_horizontal_position_Set() const{
    return m_horizontal_position_isSet;
}

bool OAIReferenceLine_LabelConfiguration::is_horizontal_position_Valid() const{
    return m_horizontal_position_isValid;
}

OAIReferenceLineLabelVerticalPosition OAIReferenceLine_LabelConfiguration::getVerticalPosition() const {
    return m_vertical_position;
}
void OAIReferenceLine_LabelConfiguration::setVerticalPosition(const OAIReferenceLineLabelVerticalPosition &vertical_position) {
    m_vertical_position = vertical_position;
    m_vertical_position_isSet = true;
}

bool OAIReferenceLine_LabelConfiguration::is_vertical_position_Set() const{
    return m_vertical_position_isSet;
}

bool OAIReferenceLine_LabelConfiguration::is_vertical_position_Valid() const{
    return m_vertical_position_isValid;
}

bool OAIReferenceLine_LabelConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_value_label_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_label_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_horizontal_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vertical_position.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReferenceLine_LabelConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
