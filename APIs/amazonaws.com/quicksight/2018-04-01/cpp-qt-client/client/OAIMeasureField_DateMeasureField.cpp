/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeasureField_DateMeasureField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeasureField_DateMeasureField::OAIMeasureField_DateMeasureField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeasureField_DateMeasureField::OAIMeasureField_DateMeasureField() {
    this->initializeModel();
}

OAIMeasureField_DateMeasureField::~OAIMeasureField_DateMeasureField() {}

void OAIMeasureField_DateMeasureField::initializeModel() {

    m_field_id_isSet = false;
    m_field_id_isValid = false;

    m_column_isSet = false;
    m_column_isValid = false;

    m_aggregation_function_isSet = false;
    m_aggregation_function_isValid = false;

    m_format_configuration_isSet = false;
    m_format_configuration_isValid = false;
}

void OAIMeasureField_DateMeasureField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMeasureField_DateMeasureField::fromJsonObject(QJsonObject json) {

    m_field_id_isValid = ::OpenAPI::fromJsonValue(m_field_id, json[QString("FieldId")]);
    m_field_id_isSet = !json[QString("FieldId")].isNull() && m_field_id_isValid;

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("Column")]);
    m_column_isSet = !json[QString("Column")].isNull() && m_column_isValid;

    m_aggregation_function_isValid = ::OpenAPI::fromJsonValue(m_aggregation_function, json[QString("AggregationFunction")]);
    m_aggregation_function_isSet = !json[QString("AggregationFunction")].isNull() && m_aggregation_function_isValid;

    m_format_configuration_isValid = ::OpenAPI::fromJsonValue(m_format_configuration, json[QString("FormatConfiguration")]);
    m_format_configuration_isSet = !json[QString("FormatConfiguration")].isNull() && m_format_configuration_isValid;
}

QString OAIMeasureField_DateMeasureField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMeasureField_DateMeasureField::asJsonObject() const {
    QJsonObject obj;
    if (m_field_id_isSet) {
        obj.insert(QString("FieldId"), ::OpenAPI::toJsonValue(m_field_id));
    }
    if (m_column.isSet()) {
        obj.insert(QString("Column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_aggregation_function.isSet()) {
        obj.insert(QString("AggregationFunction"), ::OpenAPI::toJsonValue(m_aggregation_function));
    }
    if (m_format_configuration.isSet()) {
        obj.insert(QString("FormatConfiguration"), ::OpenAPI::toJsonValue(m_format_configuration));
    }
    return obj;
}

QString OAIMeasureField_DateMeasureField::getFieldId() const {
    return m_field_id;
}
void OAIMeasureField_DateMeasureField::setFieldId(const QString &field_id) {
    m_field_id = field_id;
    m_field_id_isSet = true;
}

bool OAIMeasureField_DateMeasureField::is_field_id_Set() const{
    return m_field_id_isSet;
}

bool OAIMeasureField_DateMeasureField::is_field_id_Valid() const{
    return m_field_id_isValid;
}

OAIDateMeasureField_Column OAIMeasureField_DateMeasureField::getColumn() const {
    return m_column;
}
void OAIMeasureField_DateMeasureField::setColumn(const OAIDateMeasureField_Column &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAIMeasureField_DateMeasureField::is_column_Set() const{
    return m_column_isSet;
}

bool OAIMeasureField_DateMeasureField::is_column_Valid() const{
    return m_column_isValid;
}

OAIDateAggregationFunction OAIMeasureField_DateMeasureField::getAggregationFunction() const {
    return m_aggregation_function;
}
void OAIMeasureField_DateMeasureField::setAggregationFunction(const OAIDateAggregationFunction &aggregation_function) {
    m_aggregation_function = aggregation_function;
    m_aggregation_function_isSet = true;
}

bool OAIMeasureField_DateMeasureField::is_aggregation_function_Set() const{
    return m_aggregation_function_isSet;
}

bool OAIMeasureField_DateMeasureField::is_aggregation_function_Valid() const{
    return m_aggregation_function_isValid;
}

OAIDateDimensionField_FormatConfiguration OAIMeasureField_DateMeasureField::getFormatConfiguration() const {
    return m_format_configuration;
}
void OAIMeasureField_DateMeasureField::setFormatConfiguration(const OAIDateDimensionField_FormatConfiguration &format_configuration) {
    m_format_configuration = format_configuration;
    m_format_configuration_isSet = true;
}

bool OAIMeasureField_DateMeasureField::is_format_configuration_Set() const{
    return m_format_configuration_isSet;
}

bool OAIMeasureField_DateMeasureField::is_format_configuration_Valid() const{
    return m_format_configuration_isValid;
}

bool OAIMeasureField_DateMeasureField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_aggregation_function.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMeasureField_DateMeasureField::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_field_id_isValid && m_column_isValid && true;
}

} // namespace OpenAPI
