/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeRefreshScheduleResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeRefreshScheduleResponse::OAIDescribeRefreshScheduleResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeRefreshScheduleResponse::OAIDescribeRefreshScheduleResponse() {
    this->initializeModel();
}

OAIDescribeRefreshScheduleResponse::~OAIDescribeRefreshScheduleResponse() {}

void OAIDescribeRefreshScheduleResponse::initializeModel() {

    m_refresh_schedule_isSet = false;
    m_refresh_schedule_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;
}

void OAIDescribeRefreshScheduleResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeRefreshScheduleResponse::fromJsonObject(QJsonObject json) {

    m_refresh_schedule_isValid = ::OpenAPI::fromJsonValue(m_refresh_schedule, json[QString("RefreshSchedule")]);
    m_refresh_schedule_isSet = !json[QString("RefreshSchedule")].isNull() && m_refresh_schedule_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;
}

QString OAIDescribeRefreshScheduleResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeRefreshScheduleResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_refresh_schedule.isSet()) {
        obj.insert(QString("RefreshSchedule"), ::OpenAPI::toJsonValue(m_refresh_schedule));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    return obj;
}

OAIDescribeRefreshScheduleResponse_RefreshSchedule OAIDescribeRefreshScheduleResponse::getRefreshSchedule() const {
    return m_refresh_schedule;
}
void OAIDescribeRefreshScheduleResponse::setRefreshSchedule(const OAIDescribeRefreshScheduleResponse_RefreshSchedule &refresh_schedule) {
    m_refresh_schedule = refresh_schedule;
    m_refresh_schedule_isSet = true;
}

bool OAIDescribeRefreshScheduleResponse::is_refresh_schedule_Set() const{
    return m_refresh_schedule_isSet;
}

bool OAIDescribeRefreshScheduleResponse::is_refresh_schedule_Valid() const{
    return m_refresh_schedule_isValid;
}

qint32 OAIDescribeRefreshScheduleResponse::getStatus() const {
    return m_status;
}
void OAIDescribeRefreshScheduleResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeRefreshScheduleResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeRefreshScheduleResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeRefreshScheduleResponse::getRequestId() const {
    return m_request_id;
}
void OAIDescribeRefreshScheduleResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDescribeRefreshScheduleResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDescribeRefreshScheduleResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAIDescribeRefreshScheduleResponse::getArn() const {
    return m_arn;
}
void OAIDescribeRefreshScheduleResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeRefreshScheduleResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeRefreshScheduleResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

bool OAIDescribeRefreshScheduleResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_refresh_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeRefreshScheduleResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
