/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVPCConnectionSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVPCConnectionSummary::OAIVPCConnectionSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVPCConnectionSummary::OAIVPCConnectionSummary() {
    this->initializeModel();
}

OAIVPCConnectionSummary::~OAIVPCConnectionSummary() {}

void OAIVPCConnectionSummary::initializeModel() {

    m_vpc_connection_id_isSet = false;
    m_vpc_connection_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_vpcid_isSet = false;
    m_vpcid_isValid = false;

    m_security_group_ids_isSet = false;
    m_security_group_ids_isValid = false;

    m_dns_resolvers_isSet = false;
    m_dns_resolvers_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_availability_status_isSet = false;
    m_availability_status_isValid = false;

    m_network_interfaces_isSet = false;
    m_network_interfaces_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;
}

void OAIVPCConnectionSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVPCConnectionSummary::fromJsonObject(QJsonObject json) {

    m_vpc_connection_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_connection_id, json[QString("VPCConnectionId")]);
    m_vpc_connection_id_isSet = !json[QString("VPCConnectionId")].isNull() && m_vpc_connection_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_vpcid_isValid = ::OpenAPI::fromJsonValue(m_vpcid, json[QString("VPCId")]);
    m_vpcid_isSet = !json[QString("VPCId")].isNull() && m_vpcid_isValid;

    m_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_security_group_ids, json[QString("SecurityGroupIds")]);
    m_security_group_ids_isSet = !json[QString("SecurityGroupIds")].isNull() && m_security_group_ids_isValid;

    m_dns_resolvers_isValid = ::OpenAPI::fromJsonValue(m_dns_resolvers, json[QString("DnsResolvers")]);
    m_dns_resolvers_isSet = !json[QString("DnsResolvers")].isNull() && m_dns_resolvers_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_availability_status_isValid = ::OpenAPI::fromJsonValue(m_availability_status, json[QString("AvailabilityStatus")]);
    m_availability_status_isSet = !json[QString("AvailabilityStatus")].isNull() && m_availability_status_isValid;

    m_network_interfaces_isValid = ::OpenAPI::fromJsonValue(m_network_interfaces, json[QString("NetworkInterfaces")]);
    m_network_interfaces_isSet = !json[QString("NetworkInterfaces")].isNull() && m_network_interfaces_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;
}

QString OAIVPCConnectionSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVPCConnectionSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_vpc_connection_id_isSet) {
        obj.insert(QString("VPCConnectionId"), ::OpenAPI::toJsonValue(m_vpc_connection_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_vpcid_isSet) {
        obj.insert(QString("VPCId"), ::OpenAPI::toJsonValue(m_vpcid));
    }
    if (m_security_group_ids.isSet()) {
        obj.insert(QString("SecurityGroupIds"), ::OpenAPI::toJsonValue(m_security_group_ids));
    }
    if (m_dns_resolvers.isSet()) {
        obj.insert(QString("DnsResolvers"), ::OpenAPI::toJsonValue(m_dns_resolvers));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_availability_status.isSet()) {
        obj.insert(QString("AvailabilityStatus"), ::OpenAPI::toJsonValue(m_availability_status));
    }
    if (m_network_interfaces.isSet()) {
        obj.insert(QString("NetworkInterfaces"), ::OpenAPI::toJsonValue(m_network_interfaces));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    return obj;
}

QString OAIVPCConnectionSummary::getVpcConnectionId() const {
    return m_vpc_connection_id;
}
void OAIVPCConnectionSummary::setVpcConnectionId(const QString &vpc_connection_id) {
    m_vpc_connection_id = vpc_connection_id;
    m_vpc_connection_id_isSet = true;
}

bool OAIVPCConnectionSummary::is_vpc_connection_id_Set() const{
    return m_vpc_connection_id_isSet;
}

bool OAIVPCConnectionSummary::is_vpc_connection_id_Valid() const{
    return m_vpc_connection_id_isValid;
}

QString OAIVPCConnectionSummary::getArn() const {
    return m_arn;
}
void OAIVPCConnectionSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIVPCConnectionSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIVPCConnectionSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIVPCConnectionSummary::getName() const {
    return m_name;
}
void OAIVPCConnectionSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVPCConnectionSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVPCConnectionSummary::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIVPCConnectionSummary::getVpcid() const {
    return m_vpcid;
}
void OAIVPCConnectionSummary::setVpcid(const QString &vpcid) {
    m_vpcid = vpcid;
    m_vpcid_isSet = true;
}

bool OAIVPCConnectionSummary::is_vpcid_Set() const{
    return m_vpcid_isSet;
}

bool OAIVPCConnectionSummary::is_vpcid_Valid() const{
    return m_vpcid_isValid;
}

QList OAIVPCConnectionSummary::getSecurityGroupIds() const {
    return m_security_group_ids;
}
void OAIVPCConnectionSummary::setSecurityGroupIds(const QList &security_group_ids) {
    m_security_group_ids = security_group_ids;
    m_security_group_ids_isSet = true;
}

bool OAIVPCConnectionSummary::is_security_group_ids_Set() const{
    return m_security_group_ids_isSet;
}

bool OAIVPCConnectionSummary::is_security_group_ids_Valid() const{
    return m_security_group_ids_isValid;
}

QList OAIVPCConnectionSummary::getDnsResolvers() const {
    return m_dns_resolvers;
}
void OAIVPCConnectionSummary::setDnsResolvers(const QList &dns_resolvers) {
    m_dns_resolvers = dns_resolvers;
    m_dns_resolvers_isSet = true;
}

bool OAIVPCConnectionSummary::is_dns_resolvers_Set() const{
    return m_dns_resolvers_isSet;
}

bool OAIVPCConnectionSummary::is_dns_resolvers_Valid() const{
    return m_dns_resolvers_isValid;
}

OAIVPCConnectionResourceStatus OAIVPCConnectionSummary::getStatus() const {
    return m_status;
}
void OAIVPCConnectionSummary::setStatus(const OAIVPCConnectionResourceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIVPCConnectionSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIVPCConnectionSummary::is_status_Valid() const{
    return m_status_isValid;
}

OAIVPCConnectionAvailabilityStatus OAIVPCConnectionSummary::getAvailabilityStatus() const {
    return m_availability_status;
}
void OAIVPCConnectionSummary::setAvailabilityStatus(const OAIVPCConnectionAvailabilityStatus &availability_status) {
    m_availability_status = availability_status;
    m_availability_status_isSet = true;
}

bool OAIVPCConnectionSummary::is_availability_status_Set() const{
    return m_availability_status_isSet;
}

bool OAIVPCConnectionSummary::is_availability_status_Valid() const{
    return m_availability_status_isValid;
}

QList OAIVPCConnectionSummary::getNetworkInterfaces() const {
    return m_network_interfaces;
}
void OAIVPCConnectionSummary::setNetworkInterfaces(const QList &network_interfaces) {
    m_network_interfaces = network_interfaces;
    m_network_interfaces_isSet = true;
}

bool OAIVPCConnectionSummary::is_network_interfaces_Set() const{
    return m_network_interfaces_isSet;
}

bool OAIVPCConnectionSummary::is_network_interfaces_Valid() const{
    return m_network_interfaces_isValid;
}

QString OAIVPCConnectionSummary::getRoleArn() const {
    return m_role_arn;
}
void OAIVPCConnectionSummary::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIVPCConnectionSummary::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIVPCConnectionSummary::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QDateTime OAIVPCConnectionSummary::getCreatedTime() const {
    return m_created_time;
}
void OAIVPCConnectionSummary::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIVPCConnectionSummary::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIVPCConnectionSummary::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QDateTime OAIVPCConnectionSummary::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIVPCConnectionSummary::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIVPCConnectionSummary::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIVPCConnectionSummary::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

bool OAIVPCConnectionSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vpc_connection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpcid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_resolvers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_interfaces.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVPCConnectionSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
