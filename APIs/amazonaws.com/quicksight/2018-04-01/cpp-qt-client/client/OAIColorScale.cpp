/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIColorScale.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColorScale::OAIColorScale(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColorScale::OAIColorScale() {
    this->initializeModel();
}

OAIColorScale::~OAIColorScale() {}

void OAIColorScale::initializeModel() {

    m_colors_isSet = false;
    m_colors_isValid = false;

    m_color_fill_type_isSet = false;
    m_color_fill_type_isValid = false;

    m_null_value_color_isSet = false;
    m_null_value_color_isValid = false;
}

void OAIColorScale::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIColorScale::fromJsonObject(QJsonObject json) {

    m_colors_isValid = ::OpenAPI::fromJsonValue(m_colors, json[QString("Colors")]);
    m_colors_isSet = !json[QString("Colors")].isNull() && m_colors_isValid;

    m_color_fill_type_isValid = ::OpenAPI::fromJsonValue(m_color_fill_type, json[QString("ColorFillType")]);
    m_color_fill_type_isSet = !json[QString("ColorFillType")].isNull() && m_color_fill_type_isValid;

    m_null_value_color_isValid = ::OpenAPI::fromJsonValue(m_null_value_color, json[QString("NullValueColor")]);
    m_null_value_color_isSet = !json[QString("NullValueColor")].isNull() && m_null_value_color_isValid;
}

QString OAIColorScale::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIColorScale::asJsonObject() const {
    QJsonObject obj;
    if (m_colors.isSet()) {
        obj.insert(QString("Colors"), ::OpenAPI::toJsonValue(m_colors));
    }
    if (m_color_fill_type.isSet()) {
        obj.insert(QString("ColorFillType"), ::OpenAPI::toJsonValue(m_color_fill_type));
    }
    if (m_null_value_color.isSet()) {
        obj.insert(QString("NullValueColor"), ::OpenAPI::toJsonValue(m_null_value_color));
    }
    return obj;
}

QList OAIColorScale::getColors() const {
    return m_colors;
}
void OAIColorScale::setColors(const QList &colors) {
    m_colors = colors;
    m_colors_isSet = true;
}

bool OAIColorScale::is_colors_Set() const{
    return m_colors_isSet;
}

bool OAIColorScale::is_colors_Valid() const{
    return m_colors_isValid;
}

OAIColorFillType OAIColorScale::getColorFillType() const {
    return m_color_fill_type;
}
void OAIColorScale::setColorFillType(const OAIColorFillType &color_fill_type) {
    m_color_fill_type = color_fill_type;
    m_color_fill_type_isSet = true;
}

bool OAIColorScale::is_color_fill_type_Set() const{
    return m_color_fill_type_isSet;
}

bool OAIColorScale::is_color_fill_type_Valid() const{
    return m_color_fill_type_isValid;
}

OAIColorScale_NullValueColor OAIColorScale::getNullValueColor() const {
    return m_null_value_color;
}
void OAIColorScale::setNullValueColor(const OAIColorScale_NullValueColor &null_value_color) {
    m_null_value_color = null_value_color;
    m_null_value_color_isSet = true;
}

bool OAIColorScale::is_null_value_color_Set() const{
    return m_null_value_color_isSet;
}

bool OAIColorScale::is_null_value_color_Valid() const{
    return m_null_value_color_isValid;
}

bool OAIColorScale::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_colors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_fill_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_null_value_color.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIColorScale::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_colors_isValid && m_color_fill_type_isValid && true;
}

} // namespace OpenAPI
