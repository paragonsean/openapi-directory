/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnapshotDestinationConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnapshotDestinationConfiguration::OAISnapshotDestinationConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnapshotDestinationConfiguration::OAISnapshotDestinationConfiguration() {
    this->initializeModel();
}

OAISnapshotDestinationConfiguration::~OAISnapshotDestinationConfiguration() {}

void OAISnapshotDestinationConfiguration::initializeModel() {

    m_s3_destinations_isSet = false;
    m_s3_destinations_isValid = false;
}

void OAISnapshotDestinationConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnapshotDestinationConfiguration::fromJsonObject(QJsonObject json) {

    m_s3_destinations_isValid = ::OpenAPI::fromJsonValue(m_s3_destinations, json[QString("S3Destinations")]);
    m_s3_destinations_isSet = !json[QString("S3Destinations")].isNull() && m_s3_destinations_isValid;
}

QString OAISnapshotDestinationConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnapshotDestinationConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_destinations.isSet()) {
        obj.insert(QString("S3Destinations"), ::OpenAPI::toJsonValue(m_s3_destinations));
    }
    return obj;
}

QList OAISnapshotDestinationConfiguration::getS3Destinations() const {
    return m_s3_destinations;
}
void OAISnapshotDestinationConfiguration::setS3Destinations(const QList &s3_destinations) {
    m_s3_destinations = s3_destinations;
    m_s3_destinations_isSet = true;
}

bool OAISnapshotDestinationConfiguration::is_s3_destinations_Set() const{
    return m_s3_destinations_isSet;
}

bool OAISnapshotDestinationConfiguration::is_s3_destinations_Valid() const{
    return m_s3_destinations_isValid;
}

bool OAISnapshotDestinationConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_destinations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnapshotDestinationConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
