/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateTheme_request_Configuration_UIColorPalette.h
 *
 * 
 */

#ifndef OAIUpdateTheme_request_Configuration_UIColorPalette_H
#define OAIUpdateTheme_request_Configuration_UIColorPalette_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUpdateTheme_request_Configuration_UIColorPalette : public OAIObject {
public:
    OAIUpdateTheme_request_Configuration_UIColorPalette();
    OAIUpdateTheme_request_Configuration_UIColorPalette(QString json);
    ~OAIUpdateTheme_request_Configuration_UIColorPalette() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getPrimaryForeground() const;
    void setPrimaryForeground(const QString &primary_foreground);
    bool is_primary_foreground_Set() const;
    bool is_primary_foreground_Valid() const;

    QString getPrimaryBackground() const;
    void setPrimaryBackground(const QString &primary_background);
    bool is_primary_background_Set() const;
    bool is_primary_background_Valid() const;

    QString getSecondaryForeground() const;
    void setSecondaryForeground(const QString &secondary_foreground);
    bool is_secondary_foreground_Set() const;
    bool is_secondary_foreground_Valid() const;

    QString getSecondaryBackground() const;
    void setSecondaryBackground(const QString &secondary_background);
    bool is_secondary_background_Set() const;
    bool is_secondary_background_Valid() const;

    QString getAccent() const;
    void setAccent(const QString &accent);
    bool is_accent_Set() const;
    bool is_accent_Valid() const;

    QString getAccentForeground() const;
    void setAccentForeground(const QString &accent_foreground);
    bool is_accent_foreground_Set() const;
    bool is_accent_foreground_Valid() const;

    QString getDanger() const;
    void setDanger(const QString &danger);
    bool is_danger_Set() const;
    bool is_danger_Valid() const;

    QString getDangerForeground() const;
    void setDangerForeground(const QString &danger_foreground);
    bool is_danger_foreground_Set() const;
    bool is_danger_foreground_Valid() const;

    QString getWarning() const;
    void setWarning(const QString &warning);
    bool is_warning_Set() const;
    bool is_warning_Valid() const;

    QString getWarningForeground() const;
    void setWarningForeground(const QString &warning_foreground);
    bool is_warning_foreground_Set() const;
    bool is_warning_foreground_Valid() const;

    QString getSuccess() const;
    void setSuccess(const QString &success);
    bool is_success_Set() const;
    bool is_success_Valid() const;

    QString getSuccessForeground() const;
    void setSuccessForeground(const QString &success_foreground);
    bool is_success_foreground_Set() const;
    bool is_success_foreground_Valid() const;

    QString getDimension() const;
    void setDimension(const QString &dimension);
    bool is_dimension_Set() const;
    bool is_dimension_Valid() const;

    QString getDimensionForeground() const;
    void setDimensionForeground(const QString &dimension_foreground);
    bool is_dimension_foreground_Set() const;
    bool is_dimension_foreground_Valid() const;

    QString getMeasure() const;
    void setMeasure(const QString &measure);
    bool is_measure_Set() const;
    bool is_measure_Valid() const;

    QString getMeasureForeground() const;
    void setMeasureForeground(const QString &measure_foreground);
    bool is_measure_foreground_Set() const;
    bool is_measure_foreground_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_primary_foreground;
    bool m_primary_foreground_isSet;
    bool m_primary_foreground_isValid;

    QString m_primary_background;
    bool m_primary_background_isSet;
    bool m_primary_background_isValid;

    QString m_secondary_foreground;
    bool m_secondary_foreground_isSet;
    bool m_secondary_foreground_isValid;

    QString m_secondary_background;
    bool m_secondary_background_isSet;
    bool m_secondary_background_isValid;

    QString m_accent;
    bool m_accent_isSet;
    bool m_accent_isValid;

    QString m_accent_foreground;
    bool m_accent_foreground_isSet;
    bool m_accent_foreground_isValid;

    QString m_danger;
    bool m_danger_isSet;
    bool m_danger_isValid;

    QString m_danger_foreground;
    bool m_danger_foreground_isSet;
    bool m_danger_foreground_isValid;

    QString m_warning;
    bool m_warning_isSet;
    bool m_warning_isValid;

    QString m_warning_foreground;
    bool m_warning_foreground_isSet;
    bool m_warning_foreground_isValid;

    QString m_success;
    bool m_success_isSet;
    bool m_success_isValid;

    QString m_success_foreground;
    bool m_success_foreground_isSet;
    bool m_success_foreground_isValid;

    QString m_dimension;
    bool m_dimension_isSet;
    bool m_dimension_isValid;

    QString m_dimension_foreground;
    bool m_dimension_foreground_isSet;
    bool m_dimension_foreground_isValid;

    QString m_measure;
    bool m_measure_isSet;
    bool m_measure_isValid;

    QString m_measure_foreground;
    bool m_measure_foreground_isSet;
    bool m_measure_foreground_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateTheme_request_Configuration_UIColorPalette)

#endif // OAIUpdateTheme_request_Configuration_UIColorPalette_H
