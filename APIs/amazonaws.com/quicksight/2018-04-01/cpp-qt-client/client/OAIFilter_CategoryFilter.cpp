/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilter_CategoryFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilter_CategoryFilter::OAIFilter_CategoryFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilter_CategoryFilter::OAIFilter_CategoryFilter() {
    this->initializeModel();
}

OAIFilter_CategoryFilter::~OAIFilter_CategoryFilter() {}

void OAIFilter_CategoryFilter::initializeModel() {

    m_filter_id_isSet = false;
    m_filter_id_isValid = false;

    m_column_isSet = false;
    m_column_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;
}

void OAIFilter_CategoryFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilter_CategoryFilter::fromJsonObject(QJsonObject json) {

    m_filter_id_isValid = ::OpenAPI::fromJsonValue(m_filter_id, json[QString("FilterId")]);
    m_filter_id_isSet = !json[QString("FilterId")].isNull() && m_filter_id_isValid;

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("Column")]);
    m_column_isSet = !json[QString("Column")].isNull() && m_column_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("Configuration")]);
    m_configuration_isSet = !json[QString("Configuration")].isNull() && m_configuration_isValid;
}

QString OAIFilter_CategoryFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilter_CategoryFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_id_isSet) {
        obj.insert(QString("FilterId"), ::OpenAPI::toJsonValue(m_filter_id));
    }
    if (m_column.isSet()) {
        obj.insert(QString("Column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_configuration.isSet()) {
        obj.insert(QString("Configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    return obj;
}

QString OAIFilter_CategoryFilter::getFilterId() const {
    return m_filter_id;
}
void OAIFilter_CategoryFilter::setFilterId(const QString &filter_id) {
    m_filter_id = filter_id;
    m_filter_id_isSet = true;
}

bool OAIFilter_CategoryFilter::is_filter_id_Set() const{
    return m_filter_id_isSet;
}

bool OAIFilter_CategoryFilter::is_filter_id_Valid() const{
    return m_filter_id_isValid;
}

OAICategoryDrillDownFilter_Column OAIFilter_CategoryFilter::getColumn() const {
    return m_column;
}
void OAIFilter_CategoryFilter::setColumn(const OAICategoryDrillDownFilter_Column &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAIFilter_CategoryFilter::is_column_Set() const{
    return m_column_isSet;
}

bool OAIFilter_CategoryFilter::is_column_Valid() const{
    return m_column_isValid;
}

OAICategoryFilter_Configuration OAIFilter_CategoryFilter::getConfiguration() const {
    return m_configuration;
}
void OAIFilter_CategoryFilter::setConfiguration(const OAICategoryFilter_Configuration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIFilter_CategoryFilter::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIFilter_CategoryFilter::is_configuration_Valid() const{
    return m_configuration_isValid;
}

bool OAIFilter_CategoryFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilter_CategoryFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_filter_id_isValid && m_column_isValid && m_configuration_isValid && true;
}

} // namespace OpenAPI
