/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDataSetResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDataSetResponse::OAICreateDataSetResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDataSetResponse::OAICreateDataSetResponse() {
    this->initializeModel();
}

OAICreateDataSetResponse::~OAICreateDataSetResponse() {}

void OAICreateDataSetResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_data_set_id_isSet = false;
    m_data_set_id_isValid = false;

    m_ingestion_arn_isSet = false;
    m_ingestion_arn_isValid = false;

    m_ingestion_id_isSet = false;
    m_ingestion_id_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAICreateDataSetResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDataSetResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_data_set_id_isValid = ::OpenAPI::fromJsonValue(m_data_set_id, json[QString("DataSetId")]);
    m_data_set_id_isSet = !json[QString("DataSetId")].isNull() && m_data_set_id_isValid;

    m_ingestion_arn_isValid = ::OpenAPI::fromJsonValue(m_ingestion_arn, json[QString("IngestionArn")]);
    m_ingestion_arn_isSet = !json[QString("IngestionArn")].isNull() && m_ingestion_arn_isValid;

    m_ingestion_id_isValid = ::OpenAPI::fromJsonValue(m_ingestion_id, json[QString("IngestionId")]);
    m_ingestion_id_isSet = !json[QString("IngestionId")].isNull() && m_ingestion_id_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAICreateDataSetResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDataSetResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_data_set_id_isSet) {
        obj.insert(QString("DataSetId"), ::OpenAPI::toJsonValue(m_data_set_id));
    }
    if (m_ingestion_arn_isSet) {
        obj.insert(QString("IngestionArn"), ::OpenAPI::toJsonValue(m_ingestion_arn));
    }
    if (m_ingestion_id_isSet) {
        obj.insert(QString("IngestionId"), ::OpenAPI::toJsonValue(m_ingestion_id));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAICreateDataSetResponse::getArn() const {
    return m_arn;
}
void OAICreateDataSetResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreateDataSetResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreateDataSetResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAICreateDataSetResponse::getDataSetId() const {
    return m_data_set_id;
}
void OAICreateDataSetResponse::setDataSetId(const QString &data_set_id) {
    m_data_set_id = data_set_id;
    m_data_set_id_isSet = true;
}

bool OAICreateDataSetResponse::is_data_set_id_Set() const{
    return m_data_set_id_isSet;
}

bool OAICreateDataSetResponse::is_data_set_id_Valid() const{
    return m_data_set_id_isValid;
}

QString OAICreateDataSetResponse::getIngestionArn() const {
    return m_ingestion_arn;
}
void OAICreateDataSetResponse::setIngestionArn(const QString &ingestion_arn) {
    m_ingestion_arn = ingestion_arn;
    m_ingestion_arn_isSet = true;
}

bool OAICreateDataSetResponse::is_ingestion_arn_Set() const{
    return m_ingestion_arn_isSet;
}

bool OAICreateDataSetResponse::is_ingestion_arn_Valid() const{
    return m_ingestion_arn_isValid;
}

QString OAICreateDataSetResponse::getIngestionId() const {
    return m_ingestion_id;
}
void OAICreateDataSetResponse::setIngestionId(const QString &ingestion_id) {
    m_ingestion_id = ingestion_id;
    m_ingestion_id_isSet = true;
}

bool OAICreateDataSetResponse::is_ingestion_id_Set() const{
    return m_ingestion_id_isSet;
}

bool OAICreateDataSetResponse::is_ingestion_id_Valid() const{
    return m_ingestion_id_isValid;
}

QString OAICreateDataSetResponse::getRequestId() const {
    return m_request_id;
}
void OAICreateDataSetResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAICreateDataSetResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAICreateDataSetResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint32 OAICreateDataSetResponse::getStatus() const {
    return m_status;
}
void OAICreateDataSetResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateDataSetResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateDataSetResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICreateDataSetResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingestion_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingestion_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDataSetResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
