/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateNamespace_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateNamespace_request::OAICreateNamespace_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateNamespace_request::OAICreateNamespace_request() {
    this->initializeModel();
}

OAICreateNamespace_request::~OAICreateNamespace_request() {}

void OAICreateNamespace_request::initializeModel() {

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_identity_store_isSet = false;
    m_identity_store_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateNamespace_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateNamespace_request::fromJsonObject(QJsonObject json) {

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("Namespace")]);
    m_r_namespace_isSet = !json[QString("Namespace")].isNull() && m_r_namespace_isValid;

    m_identity_store_isValid = ::OpenAPI::fromJsonValue(m_identity_store, json[QString("IdentityStore")]);
    m_identity_store_isSet = !json[QString("IdentityStore")].isNull() && m_identity_store_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateNamespace_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateNamespace_request::asJsonObject() const {
    QJsonObject obj;
    if (m_r_namespace_isSet) {
        obj.insert(QString("Namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_identity_store_isSet) {
        obj.insert(QString("IdentityStore"), ::OpenAPI::toJsonValue(m_identity_store));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateNamespace_request::getRNamespace() const {
    return m_r_namespace;
}
void OAICreateNamespace_request::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAICreateNamespace_request::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAICreateNamespace_request::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QString OAICreateNamespace_request::getIdentityStore() const {
    return m_identity_store;
}
void OAICreateNamespace_request::setIdentityStore(const QString &identity_store) {
    m_identity_store = identity_store;
    m_identity_store_isSet = true;
}

bool OAICreateNamespace_request::is_identity_store_Set() const{
    return m_identity_store_isSet;
}

bool OAICreateNamespace_request::is_identity_store_Valid() const{
    return m_identity_store_isValid;
}

QList<OAITag> OAICreateNamespace_request::getTags() const {
    return m_tags;
}
void OAICreateNamespace_request::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateNamespace_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateNamespace_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateNamespace_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_store_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateNamespace_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_r_namespace_isValid && m_identity_store_isValid && true;
}

} // namespace OpenAPI
