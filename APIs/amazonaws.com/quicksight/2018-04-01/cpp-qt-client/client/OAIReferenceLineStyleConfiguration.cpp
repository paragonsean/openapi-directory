/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReferenceLineStyleConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReferenceLineStyleConfiguration::OAIReferenceLineStyleConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReferenceLineStyleConfiguration::OAIReferenceLineStyleConfiguration() {
    this->initializeModel();
}

OAIReferenceLineStyleConfiguration::~OAIReferenceLineStyleConfiguration() {}

void OAIReferenceLineStyleConfiguration::initializeModel() {

    m_pattern_isSet = false;
    m_pattern_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;
}

void OAIReferenceLineStyleConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReferenceLineStyleConfiguration::fromJsonObject(QJsonObject json) {

    m_pattern_isValid = ::OpenAPI::fromJsonValue(m_pattern, json[QString("Pattern")]);
    m_pattern_isSet = !json[QString("Pattern")].isNull() && m_pattern_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("Color")]);
    m_color_isSet = !json[QString("Color")].isNull() && m_color_isValid;
}

QString OAIReferenceLineStyleConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReferenceLineStyleConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_pattern.isSet()) {
        obj.insert(QString("Pattern"), ::OpenAPI::toJsonValue(m_pattern));
    }
    if (m_color_isSet) {
        obj.insert(QString("Color"), ::OpenAPI::toJsonValue(m_color));
    }
    return obj;
}

OAIReferenceLinePatternType OAIReferenceLineStyleConfiguration::getPattern() const {
    return m_pattern;
}
void OAIReferenceLineStyleConfiguration::setPattern(const OAIReferenceLinePatternType &pattern) {
    m_pattern = pattern;
    m_pattern_isSet = true;
}

bool OAIReferenceLineStyleConfiguration::is_pattern_Set() const{
    return m_pattern_isSet;
}

bool OAIReferenceLineStyleConfiguration::is_pattern_Valid() const{
    return m_pattern_isValid;
}

QString OAIReferenceLineStyleConfiguration::getColor() const {
    return m_color;
}
void OAIReferenceLineStyleConfiguration::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIReferenceLineStyleConfiguration::is_color_Set() const{
    return m_color_isSet;
}

bool OAIReferenceLineStyleConfiguration::is_color_Valid() const{
    return m_color_isValid;
}

bool OAIReferenceLineStyleConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pattern.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReferenceLineStyleConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
