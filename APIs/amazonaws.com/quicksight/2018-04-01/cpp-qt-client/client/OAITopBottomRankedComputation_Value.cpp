/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopBottomRankedComputation_Value.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopBottomRankedComputation_Value::OAITopBottomRankedComputation_Value(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopBottomRankedComputation_Value::OAITopBottomRankedComputation_Value() {
    this->initializeModel();
}

OAITopBottomRankedComputation_Value::~OAITopBottomRankedComputation_Value() {}

void OAITopBottomRankedComputation_Value::initializeModel() {

    m_numerical_measure_field_isSet = false;
    m_numerical_measure_field_isValid = false;

    m_categorical_measure_field_isSet = false;
    m_categorical_measure_field_isValid = false;

    m_date_measure_field_isSet = false;
    m_date_measure_field_isValid = false;

    m_calculated_measure_field_isSet = false;
    m_calculated_measure_field_isValid = false;
}

void OAITopBottomRankedComputation_Value::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopBottomRankedComputation_Value::fromJsonObject(QJsonObject json) {

    m_numerical_measure_field_isValid = ::OpenAPI::fromJsonValue(m_numerical_measure_field, json[QString("NumericalMeasureField")]);
    m_numerical_measure_field_isSet = !json[QString("NumericalMeasureField")].isNull() && m_numerical_measure_field_isValid;

    m_categorical_measure_field_isValid = ::OpenAPI::fromJsonValue(m_categorical_measure_field, json[QString("CategoricalMeasureField")]);
    m_categorical_measure_field_isSet = !json[QString("CategoricalMeasureField")].isNull() && m_categorical_measure_field_isValid;

    m_date_measure_field_isValid = ::OpenAPI::fromJsonValue(m_date_measure_field, json[QString("DateMeasureField")]);
    m_date_measure_field_isSet = !json[QString("DateMeasureField")].isNull() && m_date_measure_field_isValid;

    m_calculated_measure_field_isValid = ::OpenAPI::fromJsonValue(m_calculated_measure_field, json[QString("CalculatedMeasureField")]);
    m_calculated_measure_field_isSet = !json[QString("CalculatedMeasureField")].isNull() && m_calculated_measure_field_isValid;
}

QString OAITopBottomRankedComputation_Value::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopBottomRankedComputation_Value::asJsonObject() const {
    QJsonObject obj;
    if (m_numerical_measure_field.isSet()) {
        obj.insert(QString("NumericalMeasureField"), ::OpenAPI::toJsonValue(m_numerical_measure_field));
    }
    if (m_categorical_measure_field.isSet()) {
        obj.insert(QString("CategoricalMeasureField"), ::OpenAPI::toJsonValue(m_categorical_measure_field));
    }
    if (m_date_measure_field.isSet()) {
        obj.insert(QString("DateMeasureField"), ::OpenAPI::toJsonValue(m_date_measure_field));
    }
    if (m_calculated_measure_field.isSet()) {
        obj.insert(QString("CalculatedMeasureField"), ::OpenAPI::toJsonValue(m_calculated_measure_field));
    }
    return obj;
}

OAIMeasureField_NumericalMeasureField OAITopBottomRankedComputation_Value::getNumericalMeasureField() const {
    return m_numerical_measure_field;
}
void OAITopBottomRankedComputation_Value::setNumericalMeasureField(const OAIMeasureField_NumericalMeasureField &numerical_measure_field) {
    m_numerical_measure_field = numerical_measure_field;
    m_numerical_measure_field_isSet = true;
}

bool OAITopBottomRankedComputation_Value::is_numerical_measure_field_Set() const{
    return m_numerical_measure_field_isSet;
}

bool OAITopBottomRankedComputation_Value::is_numerical_measure_field_Valid() const{
    return m_numerical_measure_field_isValid;
}

OAIMeasureField_CategoricalMeasureField OAITopBottomRankedComputation_Value::getCategoricalMeasureField() const {
    return m_categorical_measure_field;
}
void OAITopBottomRankedComputation_Value::setCategoricalMeasureField(const OAIMeasureField_CategoricalMeasureField &categorical_measure_field) {
    m_categorical_measure_field = categorical_measure_field;
    m_categorical_measure_field_isSet = true;
}

bool OAITopBottomRankedComputation_Value::is_categorical_measure_field_Set() const{
    return m_categorical_measure_field_isSet;
}

bool OAITopBottomRankedComputation_Value::is_categorical_measure_field_Valid() const{
    return m_categorical_measure_field_isValid;
}

OAIMeasureField_DateMeasureField OAITopBottomRankedComputation_Value::getDateMeasureField() const {
    return m_date_measure_field;
}
void OAITopBottomRankedComputation_Value::setDateMeasureField(const OAIMeasureField_DateMeasureField &date_measure_field) {
    m_date_measure_field = date_measure_field;
    m_date_measure_field_isSet = true;
}

bool OAITopBottomRankedComputation_Value::is_date_measure_field_Set() const{
    return m_date_measure_field_isSet;
}

bool OAITopBottomRankedComputation_Value::is_date_measure_field_Valid() const{
    return m_date_measure_field_isValid;
}

OAIMeasureField_CalculatedMeasureField OAITopBottomRankedComputation_Value::getCalculatedMeasureField() const {
    return m_calculated_measure_field;
}
void OAITopBottomRankedComputation_Value::setCalculatedMeasureField(const OAIMeasureField_CalculatedMeasureField &calculated_measure_field) {
    m_calculated_measure_field = calculated_measure_field;
    m_calculated_measure_field_isSet = true;
}

bool OAITopBottomRankedComputation_Value::is_calculated_measure_field_Set() const{
    return m_calculated_measure_field_isSet;
}

bool OAITopBottomRankedComputation_Value::is_calculated_measure_field_Valid() const{
    return m_calculated_measure_field_isValid;
}

bool OAITopBottomRankedComputation_Value::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_numerical_measure_field.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_categorical_measure_field.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_measure_field.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_calculated_measure_field.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopBottomRankedComputation_Value::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
