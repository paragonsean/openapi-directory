/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICalculatedColumn.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICalculatedColumn::OAICalculatedColumn(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICalculatedColumn::OAICalculatedColumn() {
    this->initializeModel();
}

OAICalculatedColumn::~OAICalculatedColumn() {}

void OAICalculatedColumn::initializeModel() {

    m_column_name_isSet = false;
    m_column_name_isValid = false;

    m_column_id_isSet = false;
    m_column_id_isValid = false;

    m_expression_isSet = false;
    m_expression_isValid = false;
}

void OAICalculatedColumn::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICalculatedColumn::fromJsonObject(QJsonObject json) {

    m_column_name_isValid = ::OpenAPI::fromJsonValue(m_column_name, json[QString("ColumnName")]);
    m_column_name_isSet = !json[QString("ColumnName")].isNull() && m_column_name_isValid;

    m_column_id_isValid = ::OpenAPI::fromJsonValue(m_column_id, json[QString("ColumnId")]);
    m_column_id_isSet = !json[QString("ColumnId")].isNull() && m_column_id_isValid;

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("Expression")]);
    m_expression_isSet = !json[QString("Expression")].isNull() && m_expression_isValid;
}

QString OAICalculatedColumn::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICalculatedColumn::asJsonObject() const {
    QJsonObject obj;
    if (m_column_name_isSet) {
        obj.insert(QString("ColumnName"), ::OpenAPI::toJsonValue(m_column_name));
    }
    if (m_column_id_isSet) {
        obj.insert(QString("ColumnId"), ::OpenAPI::toJsonValue(m_column_id));
    }
    if (m_expression_isSet) {
        obj.insert(QString("Expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    return obj;
}

QString OAICalculatedColumn::getColumnName() const {
    return m_column_name;
}
void OAICalculatedColumn::setColumnName(const QString &column_name) {
    m_column_name = column_name;
    m_column_name_isSet = true;
}

bool OAICalculatedColumn::is_column_name_Set() const{
    return m_column_name_isSet;
}

bool OAICalculatedColumn::is_column_name_Valid() const{
    return m_column_name_isValid;
}

QString OAICalculatedColumn::getColumnId() const {
    return m_column_id;
}
void OAICalculatedColumn::setColumnId(const QString &column_id) {
    m_column_id = column_id;
    m_column_id_isSet = true;
}

bool OAICalculatedColumn::is_column_id_Set() const{
    return m_column_id_isSet;
}

bool OAICalculatedColumn::is_column_id_Valid() const{
    return m_column_id_isValid;
}

QString OAICalculatedColumn::getExpression() const {
    return m_expression;
}
void OAICalculatedColumn::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAICalculatedColumn::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAICalculatedColumn::is_expression_Valid() const{
    return m_expression_isValid;
}

bool OAICalculatedColumn::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICalculatedColumn::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_column_name_isValid && m_column_id_isValid && m_expression_isValid && true;
}

} // namespace OpenAPI
