/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSource::OAIDataSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSource::OAIDataSource() {
    this->initializeModel();
}

OAIDataSource::~OAIDataSource() {}

void OAIDataSource::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_data_source_id_isSet = false;
    m_data_source_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_data_source_parameters_isSet = false;
    m_data_source_parameters_isValid = false;

    m_alternate_data_source_parameters_isSet = false;
    m_alternate_data_source_parameters_isValid = false;

    m_vpc_connection_properties_isSet = false;
    m_vpc_connection_properties_isValid = false;

    m_ssl_properties_isSet = false;
    m_ssl_properties_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_secret_arn_isSet = false;
    m_secret_arn_isValid = false;
}

void OAIDataSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSource::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_data_source_id_isValid = ::OpenAPI::fromJsonValue(m_data_source_id, json[QString("DataSourceId")]);
    m_data_source_id_isSet = !json[QString("DataSourceId")].isNull() && m_data_source_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_data_source_parameters_isValid = ::OpenAPI::fromJsonValue(m_data_source_parameters, json[QString("DataSourceParameters")]);
    m_data_source_parameters_isSet = !json[QString("DataSourceParameters")].isNull() && m_data_source_parameters_isValid;

    m_alternate_data_source_parameters_isValid = ::OpenAPI::fromJsonValue(m_alternate_data_source_parameters, json[QString("AlternateDataSourceParameters")]);
    m_alternate_data_source_parameters_isSet = !json[QString("AlternateDataSourceParameters")].isNull() && m_alternate_data_source_parameters_isValid;

    m_vpc_connection_properties_isValid = ::OpenAPI::fromJsonValue(m_vpc_connection_properties, json[QString("VpcConnectionProperties")]);
    m_vpc_connection_properties_isSet = !json[QString("VpcConnectionProperties")].isNull() && m_vpc_connection_properties_isValid;

    m_ssl_properties_isValid = ::OpenAPI::fromJsonValue(m_ssl_properties, json[QString("SslProperties")]);
    m_ssl_properties_isSet = !json[QString("SslProperties")].isNull() && m_ssl_properties_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("ErrorInfo")]);
    m_error_info_isSet = !json[QString("ErrorInfo")].isNull() && m_error_info_isValid;

    m_secret_arn_isValid = ::OpenAPI::fromJsonValue(m_secret_arn, json[QString("SecretArn")]);
    m_secret_arn_isSet = !json[QString("SecretArn")].isNull() && m_secret_arn_isValid;
}

QString OAIDataSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSource::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_data_source_id_isSet) {
        obj.insert(QString("DataSourceId"), ::OpenAPI::toJsonValue(m_data_source_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_data_source_parameters.isSet()) {
        obj.insert(QString("DataSourceParameters"), ::OpenAPI::toJsonValue(m_data_source_parameters));
    }
    if (m_alternate_data_source_parameters.isSet()) {
        obj.insert(QString("AlternateDataSourceParameters"), ::OpenAPI::toJsonValue(m_alternate_data_source_parameters));
    }
    if (m_vpc_connection_properties.isSet()) {
        obj.insert(QString("VpcConnectionProperties"), ::OpenAPI::toJsonValue(m_vpc_connection_properties));
    }
    if (m_ssl_properties.isSet()) {
        obj.insert(QString("SslProperties"), ::OpenAPI::toJsonValue(m_ssl_properties));
    }
    if (m_error_info.isSet()) {
        obj.insert(QString("ErrorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_secret_arn_isSet) {
        obj.insert(QString("SecretArn"), ::OpenAPI::toJsonValue(m_secret_arn));
    }
    return obj;
}

QString OAIDataSource::getArn() const {
    return m_arn;
}
void OAIDataSource::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDataSource::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDataSource::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDataSource::getDataSourceId() const {
    return m_data_source_id;
}
void OAIDataSource::setDataSourceId(const QString &data_source_id) {
    m_data_source_id = data_source_id;
    m_data_source_id_isSet = true;
}

bool OAIDataSource::is_data_source_id_Set() const{
    return m_data_source_id_isSet;
}

bool OAIDataSource::is_data_source_id_Valid() const{
    return m_data_source_id_isValid;
}

QString OAIDataSource::getName() const {
    return m_name;
}
void OAIDataSource::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDataSource::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDataSource::is_name_Valid() const{
    return m_name_isValid;
}

OAIDataSourceType OAIDataSource::getType() const {
    return m_type;
}
void OAIDataSource::setType(const OAIDataSourceType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDataSource::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDataSource::is_type_Valid() const{
    return m_type_isValid;
}

OAIResourceStatus OAIDataSource::getStatus() const {
    return m_status;
}
void OAIDataSource::setStatus(const OAIResourceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDataSource::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDataSource::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIDataSource::getCreatedTime() const {
    return m_created_time;
}
void OAIDataSource::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIDataSource::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIDataSource::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QDateTime OAIDataSource::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIDataSource::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIDataSource::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIDataSource::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

OAIDataSource_DataSourceParameters OAIDataSource::getDataSourceParameters() const {
    return m_data_source_parameters;
}
void OAIDataSource::setDataSourceParameters(const OAIDataSource_DataSourceParameters &data_source_parameters) {
    m_data_source_parameters = data_source_parameters;
    m_data_source_parameters_isSet = true;
}

bool OAIDataSource::is_data_source_parameters_Set() const{
    return m_data_source_parameters_isSet;
}

bool OAIDataSource::is_data_source_parameters_Valid() const{
    return m_data_source_parameters_isValid;
}

QList OAIDataSource::getAlternateDataSourceParameters() const {
    return m_alternate_data_source_parameters;
}
void OAIDataSource::setAlternateDataSourceParameters(const QList &alternate_data_source_parameters) {
    m_alternate_data_source_parameters = alternate_data_source_parameters;
    m_alternate_data_source_parameters_isSet = true;
}

bool OAIDataSource::is_alternate_data_source_parameters_Set() const{
    return m_alternate_data_source_parameters_isSet;
}

bool OAIDataSource::is_alternate_data_source_parameters_Valid() const{
    return m_alternate_data_source_parameters_isValid;
}

OAIDataSource_VpcConnectionProperties OAIDataSource::getVpcConnectionProperties() const {
    return m_vpc_connection_properties;
}
void OAIDataSource::setVpcConnectionProperties(const OAIDataSource_VpcConnectionProperties &vpc_connection_properties) {
    m_vpc_connection_properties = vpc_connection_properties;
    m_vpc_connection_properties_isSet = true;
}

bool OAIDataSource::is_vpc_connection_properties_Set() const{
    return m_vpc_connection_properties_isSet;
}

bool OAIDataSource::is_vpc_connection_properties_Valid() const{
    return m_vpc_connection_properties_isValid;
}

OAICreateDataSourceRequest_SslProperties OAIDataSource::getSslProperties() const {
    return m_ssl_properties;
}
void OAIDataSource::setSslProperties(const OAICreateDataSourceRequest_SslProperties &ssl_properties) {
    m_ssl_properties = ssl_properties;
    m_ssl_properties_isSet = true;
}

bool OAIDataSource::is_ssl_properties_Set() const{
    return m_ssl_properties_isSet;
}

bool OAIDataSource::is_ssl_properties_Valid() const{
    return m_ssl_properties_isValid;
}

OAIDataSource_ErrorInfo OAIDataSource::getErrorInfo() const {
    return m_error_info;
}
void OAIDataSource::setErrorInfo(const OAIDataSource_ErrorInfo &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIDataSource::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIDataSource::is_error_info_Valid() const{
    return m_error_info_isValid;
}

QString OAIDataSource::getSecretArn() const {
    return m_secret_arn;
}
void OAIDataSource::setSecretArn(const QString &secret_arn) {
    m_secret_arn = secret_arn;
    m_secret_arn_isSet = true;
}

bool OAIDataSource::is_secret_arn_Set() const{
    return m_secret_arn_isSet;
}

bool OAIDataSource::is_secret_arn_Valid() const{
    return m_secret_arn_isValid;
}

bool OAIDataSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate_data_source_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_connection_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
