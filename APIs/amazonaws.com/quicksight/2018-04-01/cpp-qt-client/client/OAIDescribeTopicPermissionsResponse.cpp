/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeTopicPermissionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeTopicPermissionsResponse::OAIDescribeTopicPermissionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeTopicPermissionsResponse::OAIDescribeTopicPermissionsResponse() {
    this->initializeModel();
}

OAIDescribeTopicPermissionsResponse::~OAIDescribeTopicPermissionsResponse() {}

void OAIDescribeTopicPermissionsResponse::initializeModel() {

    m_topic_id_isSet = false;
    m_topic_id_isValid = false;

    m_topic_arn_isSet = false;
    m_topic_arn_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAIDescribeTopicPermissionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeTopicPermissionsResponse::fromJsonObject(QJsonObject json) {

    m_topic_id_isValid = ::OpenAPI::fromJsonValue(m_topic_id, json[QString("TopicId")]);
    m_topic_id_isSet = !json[QString("TopicId")].isNull() && m_topic_id_isValid;

    m_topic_arn_isValid = ::OpenAPI::fromJsonValue(m_topic_arn, json[QString("TopicArn")]);
    m_topic_arn_isSet = !json[QString("TopicArn")].isNull() && m_topic_arn_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("Permissions")]);
    m_permissions_isSet = !json[QString("Permissions")].isNull() && m_permissions_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;
}

QString OAIDescribeTopicPermissionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeTopicPermissionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_topic_id_isSet) {
        obj.insert(QString("TopicId"), ::OpenAPI::toJsonValue(m_topic_id));
    }
    if (m_topic_arn_isSet) {
        obj.insert(QString("TopicArn"), ::OpenAPI::toJsonValue(m_topic_arn));
    }
    if (m_permissions.isSet()) {
        obj.insert(QString("Permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

QString OAIDescribeTopicPermissionsResponse::getTopicId() const {
    return m_topic_id;
}
void OAIDescribeTopicPermissionsResponse::setTopicId(const QString &topic_id) {
    m_topic_id = topic_id;
    m_topic_id_isSet = true;
}

bool OAIDescribeTopicPermissionsResponse::is_topic_id_Set() const{
    return m_topic_id_isSet;
}

bool OAIDescribeTopicPermissionsResponse::is_topic_id_Valid() const{
    return m_topic_id_isValid;
}

QString OAIDescribeTopicPermissionsResponse::getTopicArn() const {
    return m_topic_arn;
}
void OAIDescribeTopicPermissionsResponse::setTopicArn(const QString &topic_arn) {
    m_topic_arn = topic_arn;
    m_topic_arn_isSet = true;
}

bool OAIDescribeTopicPermissionsResponse::is_topic_arn_Set() const{
    return m_topic_arn_isSet;
}

bool OAIDescribeTopicPermissionsResponse::is_topic_arn_Valid() const{
    return m_topic_arn_isValid;
}

QList OAIDescribeTopicPermissionsResponse::getPermissions() const {
    return m_permissions;
}
void OAIDescribeTopicPermissionsResponse::setPermissions(const QList &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIDescribeTopicPermissionsResponse::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIDescribeTopicPermissionsResponse::is_permissions_Valid() const{
    return m_permissions_isValid;
}

qint32 OAIDescribeTopicPermissionsResponse::getStatus() const {
    return m_status;
}
void OAIDescribeTopicPermissionsResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeTopicPermissionsResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeTopicPermissionsResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeTopicPermissionsResponse::getRequestId() const {
    return m_request_id;
}
void OAIDescribeTopicPermissionsResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDescribeTopicPermissionsResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDescribeTopicPermissionsResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIDescribeTopicPermissionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_topic_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeTopicPermissionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
