/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnonymousUserDashboardVisualEmbeddingConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnonymousUserDashboardVisualEmbeddingConfiguration::OAIAnonymousUserDashboardVisualEmbeddingConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnonymousUserDashboardVisualEmbeddingConfiguration::OAIAnonymousUserDashboardVisualEmbeddingConfiguration() {
    this->initializeModel();
}

OAIAnonymousUserDashboardVisualEmbeddingConfiguration::~OAIAnonymousUserDashboardVisualEmbeddingConfiguration() {}

void OAIAnonymousUserDashboardVisualEmbeddingConfiguration::initializeModel() {

    m_initial_dashboard_visual_id_isSet = false;
    m_initial_dashboard_visual_id_isValid = false;
}

void OAIAnonymousUserDashboardVisualEmbeddingConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnonymousUserDashboardVisualEmbeddingConfiguration::fromJsonObject(QJsonObject json) {

    m_initial_dashboard_visual_id_isValid = ::OpenAPI::fromJsonValue(m_initial_dashboard_visual_id, json[QString("InitialDashboardVisualId")]);
    m_initial_dashboard_visual_id_isSet = !json[QString("InitialDashboardVisualId")].isNull() && m_initial_dashboard_visual_id_isValid;
}

QString OAIAnonymousUserDashboardVisualEmbeddingConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnonymousUserDashboardVisualEmbeddingConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_initial_dashboard_visual_id.isSet()) {
        obj.insert(QString("InitialDashboardVisualId"), ::OpenAPI::toJsonValue(m_initial_dashboard_visual_id));
    }
    return obj;
}

OAIAnonymousUserDashboardVisualEmbeddingConfiguration_InitialDashboardVisualId OAIAnonymousUserDashboardVisualEmbeddingConfiguration::getInitialDashboardVisualId() const {
    return m_initial_dashboard_visual_id;
}
void OAIAnonymousUserDashboardVisualEmbeddingConfiguration::setInitialDashboardVisualId(const OAIAnonymousUserDashboardVisualEmbeddingConfiguration_InitialDashboardVisualId &initial_dashboard_visual_id) {
    m_initial_dashboard_visual_id = initial_dashboard_visual_id;
    m_initial_dashboard_visual_id_isSet = true;
}

bool OAIAnonymousUserDashboardVisualEmbeddingConfiguration::is_initial_dashboard_visual_id_Set() const{
    return m_initial_dashboard_visual_id_isSet;
}

bool OAIAnonymousUserDashboardVisualEmbeddingConfiguration::is_initial_dashboard_visual_id_Valid() const{
    return m_initial_dashboard_visual_id_isValid;
}

bool OAIAnonymousUserDashboardVisualEmbeddingConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_initial_dashboard_visual_id.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnonymousUserDashboardVisualEmbeddingConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_initial_dashboard_visual_id_isValid && true;
}

} // namespace OpenAPI
