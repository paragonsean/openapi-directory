/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration() {
    this->initializeModel();
}

OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::~OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration() {}

void OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::initializeModel() {

    m_prefix_isSet = false;
    m_prefix_isValid = false;

    m_suffix_isSet = false;
    m_suffix_isValid = false;

    m_separator_configuration_isSet = false;
    m_separator_configuration_isValid = false;

    m_decimal_places_configuration_isSet = false;
    m_decimal_places_configuration_isValid = false;

    m_negative_value_configuration_isSet = false;
    m_negative_value_configuration_isValid = false;

    m_null_value_format_configuration_isSet = false;
    m_null_value_format_configuration_isValid = false;
}

void OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::fromJsonObject(QJsonObject json) {

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("Prefix")]);
    m_prefix_isSet = !json[QString("Prefix")].isNull() && m_prefix_isValid;

    m_suffix_isValid = ::OpenAPI::fromJsonValue(m_suffix, json[QString("Suffix")]);
    m_suffix_isSet = !json[QString("Suffix")].isNull() && m_suffix_isValid;

    m_separator_configuration_isValid = ::OpenAPI::fromJsonValue(m_separator_configuration, json[QString("SeparatorConfiguration")]);
    m_separator_configuration_isSet = !json[QString("SeparatorConfiguration")].isNull() && m_separator_configuration_isValid;

    m_decimal_places_configuration_isValid = ::OpenAPI::fromJsonValue(m_decimal_places_configuration, json[QString("DecimalPlacesConfiguration")]);
    m_decimal_places_configuration_isSet = !json[QString("DecimalPlacesConfiguration")].isNull() && m_decimal_places_configuration_isValid;

    m_negative_value_configuration_isValid = ::OpenAPI::fromJsonValue(m_negative_value_configuration, json[QString("NegativeValueConfiguration")]);
    m_negative_value_configuration_isSet = !json[QString("NegativeValueConfiguration")].isNull() && m_negative_value_configuration_isValid;

    m_null_value_format_configuration_isValid = ::OpenAPI::fromJsonValue(m_null_value_format_configuration, json[QString("NullValueFormatConfiguration")]);
    m_null_value_format_configuration_isSet = !json[QString("NullValueFormatConfiguration")].isNull() && m_null_value_format_configuration_isValid;
}

QString OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_prefix_isSet) {
        obj.insert(QString("Prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    if (m_suffix_isSet) {
        obj.insert(QString("Suffix"), ::OpenAPI::toJsonValue(m_suffix));
    }
    if (m_separator_configuration.isSet()) {
        obj.insert(QString("SeparatorConfiguration"), ::OpenAPI::toJsonValue(m_separator_configuration));
    }
    if (m_decimal_places_configuration.isSet()) {
        obj.insert(QString("DecimalPlacesConfiguration"), ::OpenAPI::toJsonValue(m_decimal_places_configuration));
    }
    if (m_negative_value_configuration.isSet()) {
        obj.insert(QString("NegativeValueConfiguration"), ::OpenAPI::toJsonValue(m_negative_value_configuration));
    }
    if (m_null_value_format_configuration.isSet()) {
        obj.insert(QString("NullValueFormatConfiguration"), ::OpenAPI::toJsonValue(m_null_value_format_configuration));
    }
    return obj;
}

QString OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::getPrefix() const {
    return m_prefix;
}
void OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::is_prefix_Valid() const{
    return m_prefix_isValid;
}

QString OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::getSuffix() const {
    return m_suffix;
}
void OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::setSuffix(const QString &suffix) {
    m_suffix = suffix;
    m_suffix_isSet = true;
}

bool OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::is_suffix_Set() const{
    return m_suffix_isSet;
}

bool OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::is_suffix_Valid() const{
    return m_suffix_isValid;
}

OAINumberDisplayFormatConfiguration_SeparatorConfiguration OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::getSeparatorConfiguration() const {
    return m_separator_configuration;
}
void OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::setSeparatorConfiguration(const OAINumberDisplayFormatConfiguration_SeparatorConfiguration &separator_configuration) {
    m_separator_configuration = separator_configuration;
    m_separator_configuration_isSet = true;
}

bool OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::is_separator_configuration_Set() const{
    return m_separator_configuration_isSet;
}

bool OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::is_separator_configuration_Valid() const{
    return m_separator_configuration_isValid;
}

OAINumberDisplayFormatConfiguration_DecimalPlacesConfiguration OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::getDecimalPlacesConfiguration() const {
    return m_decimal_places_configuration;
}
void OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::setDecimalPlacesConfiguration(const OAINumberDisplayFormatConfiguration_DecimalPlacesConfiguration &decimal_places_configuration) {
    m_decimal_places_configuration = decimal_places_configuration;
    m_decimal_places_configuration_isSet = true;
}

bool OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::is_decimal_places_configuration_Set() const{
    return m_decimal_places_configuration_isSet;
}

bool OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::is_decimal_places_configuration_Valid() const{
    return m_decimal_places_configuration_isValid;
}

OAINumberDisplayFormatConfiguration_NegativeValueConfiguration OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::getNegativeValueConfiguration() const {
    return m_negative_value_configuration;
}
void OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::setNegativeValueConfiguration(const OAINumberDisplayFormatConfiguration_NegativeValueConfiguration &negative_value_configuration) {
    m_negative_value_configuration = negative_value_configuration;
    m_negative_value_configuration_isSet = true;
}

bool OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::is_negative_value_configuration_Set() const{
    return m_negative_value_configuration_isSet;
}

bool OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::is_negative_value_configuration_Valid() const{
    return m_negative_value_configuration_isValid;
}

OAIStringFormatConfiguration_NullValueFormatConfiguration OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::getNullValueFormatConfiguration() const {
    return m_null_value_format_configuration;
}
void OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::setNullValueFormatConfiguration(const OAIStringFormatConfiguration_NullValueFormatConfiguration &null_value_format_configuration) {
    m_null_value_format_configuration = null_value_format_configuration;
    m_null_value_format_configuration_isSet = true;
}

bool OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::is_null_value_format_configuration_Set() const{
    return m_null_value_format_configuration_isSet;
}

bool OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::is_null_value_format_configuration_Valid() const{
    return m_null_value_format_configuration_isValid;
}

bool OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_separator_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_decimal_places_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_negative_value_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_null_value_format_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
