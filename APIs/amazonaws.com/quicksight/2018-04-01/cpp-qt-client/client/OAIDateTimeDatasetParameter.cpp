/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDateTimeDatasetParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDateTimeDatasetParameter::OAIDateTimeDatasetParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDateTimeDatasetParameter::OAIDateTimeDatasetParameter() {
    this->initializeModel();
}

OAIDateTimeDatasetParameter::~OAIDateTimeDatasetParameter() {}

void OAIDateTimeDatasetParameter::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_value_type_isSet = false;
    m_value_type_isValid = false;

    m_time_granularity_isSet = false;
    m_time_granularity_isValid = false;

    m_default_values_isSet = false;
    m_default_values_isValid = false;
}

void OAIDateTimeDatasetParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDateTimeDatasetParameter::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_value_type_isValid = ::OpenAPI::fromJsonValue(m_value_type, json[QString("ValueType")]);
    m_value_type_isSet = !json[QString("ValueType")].isNull() && m_value_type_isValid;

    m_time_granularity_isValid = ::OpenAPI::fromJsonValue(m_time_granularity, json[QString("TimeGranularity")]);
    m_time_granularity_isSet = !json[QString("TimeGranularity")].isNull() && m_time_granularity_isValid;

    m_default_values_isValid = ::OpenAPI::fromJsonValue(m_default_values, json[QString("DefaultValues")]);
    m_default_values_isSet = !json[QString("DefaultValues")].isNull() && m_default_values_isValid;
}

QString OAIDateTimeDatasetParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDateTimeDatasetParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_value_type.isSet()) {
        obj.insert(QString("ValueType"), ::OpenAPI::toJsonValue(m_value_type));
    }
    if (m_time_granularity.isSet()) {
        obj.insert(QString("TimeGranularity"), ::OpenAPI::toJsonValue(m_time_granularity));
    }
    if (m_default_values.isSet()) {
        obj.insert(QString("DefaultValues"), ::OpenAPI::toJsonValue(m_default_values));
    }
    return obj;
}

QString OAIDateTimeDatasetParameter::getId() const {
    return m_id;
}
void OAIDateTimeDatasetParameter::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDateTimeDatasetParameter::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDateTimeDatasetParameter::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDateTimeDatasetParameter::getName() const {
    return m_name;
}
void OAIDateTimeDatasetParameter::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDateTimeDatasetParameter::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDateTimeDatasetParameter::is_name_Valid() const{
    return m_name_isValid;
}

OAIDatasetParameterValueType OAIDateTimeDatasetParameter::getValueType() const {
    return m_value_type;
}
void OAIDateTimeDatasetParameter::setValueType(const OAIDatasetParameterValueType &value_type) {
    m_value_type = value_type;
    m_value_type_isSet = true;
}

bool OAIDateTimeDatasetParameter::is_value_type_Set() const{
    return m_value_type_isSet;
}

bool OAIDateTimeDatasetParameter::is_value_type_Valid() const{
    return m_value_type_isValid;
}

OAITimeGranularity OAIDateTimeDatasetParameter::getTimeGranularity() const {
    return m_time_granularity;
}
void OAIDateTimeDatasetParameter::setTimeGranularity(const OAITimeGranularity &time_granularity) {
    m_time_granularity = time_granularity;
    m_time_granularity_isSet = true;
}

bool OAIDateTimeDatasetParameter::is_time_granularity_Set() const{
    return m_time_granularity_isSet;
}

bool OAIDateTimeDatasetParameter::is_time_granularity_Valid() const{
    return m_time_granularity_isValid;
}

OAIDateTimeDatasetParameter_DefaultValues OAIDateTimeDatasetParameter::getDefaultValues() const {
    return m_default_values;
}
void OAIDateTimeDatasetParameter::setDefaultValues(const OAIDateTimeDatasetParameter_DefaultValues &default_values) {
    m_default_values = default_values;
    m_default_values_isSet = true;
}

bool OAIDateTimeDatasetParameter::is_default_values_Set() const{
    return m_default_values_isSet;
}

bool OAIDateTimeDatasetParameter::is_default_values_Valid() const{
    return m_default_values_isValid;
}

bool OAIDateTimeDatasetParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_granularity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDateTimeDatasetParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_isValid && m_value_type_isValid && true;
}

} // namespace OpenAPI
