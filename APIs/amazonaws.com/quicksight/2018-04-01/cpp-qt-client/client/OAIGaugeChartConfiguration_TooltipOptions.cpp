/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGaugeChartConfiguration_TooltipOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGaugeChartConfiguration_TooltipOptions::OAIGaugeChartConfiguration_TooltipOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGaugeChartConfiguration_TooltipOptions::OAIGaugeChartConfiguration_TooltipOptions() {
    this->initializeModel();
}

OAIGaugeChartConfiguration_TooltipOptions::~OAIGaugeChartConfiguration_TooltipOptions() {}

void OAIGaugeChartConfiguration_TooltipOptions::initializeModel() {

    m_tooltip_visibility_isSet = false;
    m_tooltip_visibility_isValid = false;

    m_selected_tooltip_type_isSet = false;
    m_selected_tooltip_type_isValid = false;

    m_field_based_tooltip_isSet = false;
    m_field_based_tooltip_isValid = false;
}

void OAIGaugeChartConfiguration_TooltipOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGaugeChartConfiguration_TooltipOptions::fromJsonObject(QJsonObject json) {

    m_tooltip_visibility_isValid = ::OpenAPI::fromJsonValue(m_tooltip_visibility, json[QString("TooltipVisibility")]);
    m_tooltip_visibility_isSet = !json[QString("TooltipVisibility")].isNull() && m_tooltip_visibility_isValid;

    m_selected_tooltip_type_isValid = ::OpenAPI::fromJsonValue(m_selected_tooltip_type, json[QString("SelectedTooltipType")]);
    m_selected_tooltip_type_isSet = !json[QString("SelectedTooltipType")].isNull() && m_selected_tooltip_type_isValid;

    m_field_based_tooltip_isValid = ::OpenAPI::fromJsonValue(m_field_based_tooltip, json[QString("FieldBasedTooltip")]);
    m_field_based_tooltip_isSet = !json[QString("FieldBasedTooltip")].isNull() && m_field_based_tooltip_isValid;
}

QString OAIGaugeChartConfiguration_TooltipOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGaugeChartConfiguration_TooltipOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_tooltip_visibility.isSet()) {
        obj.insert(QString("TooltipVisibility"), ::OpenAPI::toJsonValue(m_tooltip_visibility));
    }
    if (m_selected_tooltip_type.isSet()) {
        obj.insert(QString("SelectedTooltipType"), ::OpenAPI::toJsonValue(m_selected_tooltip_type));
    }
    if (m_field_based_tooltip.isSet()) {
        obj.insert(QString("FieldBasedTooltip"), ::OpenAPI::toJsonValue(m_field_based_tooltip));
    }
    return obj;
}

OAIVisibility OAIGaugeChartConfiguration_TooltipOptions::getTooltipVisibility() const {
    return m_tooltip_visibility;
}
void OAIGaugeChartConfiguration_TooltipOptions::setTooltipVisibility(const OAIVisibility &tooltip_visibility) {
    m_tooltip_visibility = tooltip_visibility;
    m_tooltip_visibility_isSet = true;
}

bool OAIGaugeChartConfiguration_TooltipOptions::is_tooltip_visibility_Set() const{
    return m_tooltip_visibility_isSet;
}

bool OAIGaugeChartConfiguration_TooltipOptions::is_tooltip_visibility_Valid() const{
    return m_tooltip_visibility_isValid;
}

OAISelectedTooltipType OAIGaugeChartConfiguration_TooltipOptions::getSelectedTooltipType() const {
    return m_selected_tooltip_type;
}
void OAIGaugeChartConfiguration_TooltipOptions::setSelectedTooltipType(const OAISelectedTooltipType &selected_tooltip_type) {
    m_selected_tooltip_type = selected_tooltip_type;
    m_selected_tooltip_type_isSet = true;
}

bool OAIGaugeChartConfiguration_TooltipOptions::is_selected_tooltip_type_Set() const{
    return m_selected_tooltip_type_isSet;
}

bool OAIGaugeChartConfiguration_TooltipOptions::is_selected_tooltip_type_Valid() const{
    return m_selected_tooltip_type_isValid;
}

OAITooltipOptions_FieldBasedTooltip OAIGaugeChartConfiguration_TooltipOptions::getFieldBasedTooltip() const {
    return m_field_based_tooltip;
}
void OAIGaugeChartConfiguration_TooltipOptions::setFieldBasedTooltip(const OAITooltipOptions_FieldBasedTooltip &field_based_tooltip) {
    m_field_based_tooltip = field_based_tooltip;
    m_field_based_tooltip_isSet = true;
}

bool OAIGaugeChartConfiguration_TooltipOptions::is_field_based_tooltip_Set() const{
    return m_field_based_tooltip_isSet;
}

bool OAIGaugeChartConfiguration_TooltipOptions::is_field_based_tooltip_Valid() const{
    return m_field_based_tooltip_isValid;
}

bool OAIGaugeChartConfiguration_TooltipOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tooltip_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_tooltip_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_based_tooltip.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGaugeChartConfiguration_TooltipOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
