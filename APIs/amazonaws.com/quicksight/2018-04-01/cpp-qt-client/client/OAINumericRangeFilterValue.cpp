/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINumericRangeFilterValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINumericRangeFilterValue::OAINumericRangeFilterValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINumericRangeFilterValue::OAINumericRangeFilterValue() {
    this->initializeModel();
}

OAINumericRangeFilterValue::~OAINumericRangeFilterValue() {}

void OAINumericRangeFilterValue::initializeModel() {

    m_static_value_isSet = false;
    m_static_value_isValid = false;

    m_parameter_isSet = false;
    m_parameter_isValid = false;
}

void OAINumericRangeFilterValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINumericRangeFilterValue::fromJsonObject(QJsonObject json) {

    m_static_value_isValid = ::OpenAPI::fromJsonValue(m_static_value, json[QString("StaticValue")]);
    m_static_value_isSet = !json[QString("StaticValue")].isNull() && m_static_value_isValid;

    m_parameter_isValid = ::OpenAPI::fromJsonValue(m_parameter, json[QString("Parameter")]);
    m_parameter_isSet = !json[QString("Parameter")].isNull() && m_parameter_isValid;
}

QString OAINumericRangeFilterValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINumericRangeFilterValue::asJsonObject() const {
    QJsonObject obj;
    if (m_static_value_isSet) {
        obj.insert(QString("StaticValue"), ::OpenAPI::toJsonValue(m_static_value));
    }
    if (m_parameter_isSet) {
        obj.insert(QString("Parameter"), ::OpenAPI::toJsonValue(m_parameter));
    }
    return obj;
}

double OAINumericRangeFilterValue::getStaticValue() const {
    return m_static_value;
}
void OAINumericRangeFilterValue::setStaticValue(const double &static_value) {
    m_static_value = static_value;
    m_static_value_isSet = true;
}

bool OAINumericRangeFilterValue::is_static_value_Set() const{
    return m_static_value_isSet;
}

bool OAINumericRangeFilterValue::is_static_value_Valid() const{
    return m_static_value_isValid;
}

QString OAINumericRangeFilterValue::getParameter() const {
    return m_parameter;
}
void OAINumericRangeFilterValue::setParameter(const QString &parameter) {
    m_parameter = parameter;
    m_parameter_isSet = true;
}

bool OAINumericRangeFilterValue::is_parameter_Set() const{
    return m_parameter_isSet;
}

bool OAINumericRangeFilterValue::is_parameter_Valid() const{
    return m_parameter_isValid;
}

bool OAINumericRangeFilterValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_static_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINumericRangeFilterValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
