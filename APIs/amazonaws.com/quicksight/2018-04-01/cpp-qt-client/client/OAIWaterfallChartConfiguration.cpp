/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWaterfallChartConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWaterfallChartConfiguration::OAIWaterfallChartConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWaterfallChartConfiguration::OAIWaterfallChartConfiguration() {
    this->initializeModel();
}

OAIWaterfallChartConfiguration::~OAIWaterfallChartConfiguration() {}

void OAIWaterfallChartConfiguration::initializeModel() {

    m_field_wells_isSet = false;
    m_field_wells_isValid = false;

    m_sort_configuration_isSet = false;
    m_sort_configuration_isValid = false;

    m_waterfall_chart_options_isSet = false;
    m_waterfall_chart_options_isValid = false;

    m_category_axis_label_options_isSet = false;
    m_category_axis_label_options_isValid = false;

    m_category_axis_display_options_isSet = false;
    m_category_axis_display_options_isValid = false;

    m_primary_y_axis_label_options_isSet = false;
    m_primary_y_axis_label_options_isValid = false;

    m_primary_y_axis_display_options_isSet = false;
    m_primary_y_axis_display_options_isValid = false;

    m_legend_isSet = false;
    m_legend_isValid = false;

    m_data_labels_isSet = false;
    m_data_labels_isValid = false;

    m_visual_palette_isSet = false;
    m_visual_palette_isValid = false;
}

void OAIWaterfallChartConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWaterfallChartConfiguration::fromJsonObject(QJsonObject json) {

    m_field_wells_isValid = ::OpenAPI::fromJsonValue(m_field_wells, json[QString("FieldWells")]);
    m_field_wells_isSet = !json[QString("FieldWells")].isNull() && m_field_wells_isValid;

    m_sort_configuration_isValid = ::OpenAPI::fromJsonValue(m_sort_configuration, json[QString("SortConfiguration")]);
    m_sort_configuration_isSet = !json[QString("SortConfiguration")].isNull() && m_sort_configuration_isValid;

    m_waterfall_chart_options_isValid = ::OpenAPI::fromJsonValue(m_waterfall_chart_options, json[QString("WaterfallChartOptions")]);
    m_waterfall_chart_options_isSet = !json[QString("WaterfallChartOptions")].isNull() && m_waterfall_chart_options_isValid;

    m_category_axis_label_options_isValid = ::OpenAPI::fromJsonValue(m_category_axis_label_options, json[QString("CategoryAxisLabelOptions")]);
    m_category_axis_label_options_isSet = !json[QString("CategoryAxisLabelOptions")].isNull() && m_category_axis_label_options_isValid;

    m_category_axis_display_options_isValid = ::OpenAPI::fromJsonValue(m_category_axis_display_options, json[QString("CategoryAxisDisplayOptions")]);
    m_category_axis_display_options_isSet = !json[QString("CategoryAxisDisplayOptions")].isNull() && m_category_axis_display_options_isValid;

    m_primary_y_axis_label_options_isValid = ::OpenAPI::fromJsonValue(m_primary_y_axis_label_options, json[QString("PrimaryYAxisLabelOptions")]);
    m_primary_y_axis_label_options_isSet = !json[QString("PrimaryYAxisLabelOptions")].isNull() && m_primary_y_axis_label_options_isValid;

    m_primary_y_axis_display_options_isValid = ::OpenAPI::fromJsonValue(m_primary_y_axis_display_options, json[QString("PrimaryYAxisDisplayOptions")]);
    m_primary_y_axis_display_options_isSet = !json[QString("PrimaryYAxisDisplayOptions")].isNull() && m_primary_y_axis_display_options_isValid;

    m_legend_isValid = ::OpenAPI::fromJsonValue(m_legend, json[QString("Legend")]);
    m_legend_isSet = !json[QString("Legend")].isNull() && m_legend_isValid;

    m_data_labels_isValid = ::OpenAPI::fromJsonValue(m_data_labels, json[QString("DataLabels")]);
    m_data_labels_isSet = !json[QString("DataLabels")].isNull() && m_data_labels_isValid;

    m_visual_palette_isValid = ::OpenAPI::fromJsonValue(m_visual_palette, json[QString("VisualPalette")]);
    m_visual_palette_isSet = !json[QString("VisualPalette")].isNull() && m_visual_palette_isValid;
}

QString OAIWaterfallChartConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWaterfallChartConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_field_wells.isSet()) {
        obj.insert(QString("FieldWells"), ::OpenAPI::toJsonValue(m_field_wells));
    }
    if (m_sort_configuration.isSet()) {
        obj.insert(QString("SortConfiguration"), ::OpenAPI::toJsonValue(m_sort_configuration));
    }
    if (m_waterfall_chart_options.isSet()) {
        obj.insert(QString("WaterfallChartOptions"), ::OpenAPI::toJsonValue(m_waterfall_chart_options));
    }
    if (m_category_axis_label_options.isSet()) {
        obj.insert(QString("CategoryAxisLabelOptions"), ::OpenAPI::toJsonValue(m_category_axis_label_options));
    }
    if (m_category_axis_display_options.isSet()) {
        obj.insert(QString("CategoryAxisDisplayOptions"), ::OpenAPI::toJsonValue(m_category_axis_display_options));
    }
    if (m_primary_y_axis_label_options.isSet()) {
        obj.insert(QString("PrimaryYAxisLabelOptions"), ::OpenAPI::toJsonValue(m_primary_y_axis_label_options));
    }
    if (m_primary_y_axis_display_options.isSet()) {
        obj.insert(QString("PrimaryYAxisDisplayOptions"), ::OpenAPI::toJsonValue(m_primary_y_axis_display_options));
    }
    if (m_legend.isSet()) {
        obj.insert(QString("Legend"), ::OpenAPI::toJsonValue(m_legend));
    }
    if (m_data_labels.isSet()) {
        obj.insert(QString("DataLabels"), ::OpenAPI::toJsonValue(m_data_labels));
    }
    if (m_visual_palette.isSet()) {
        obj.insert(QString("VisualPalette"), ::OpenAPI::toJsonValue(m_visual_palette));
    }
    return obj;
}

OAIWaterfallChartConfiguration_FieldWells OAIWaterfallChartConfiguration::getFieldWells() const {
    return m_field_wells;
}
void OAIWaterfallChartConfiguration::setFieldWells(const OAIWaterfallChartConfiguration_FieldWells &field_wells) {
    m_field_wells = field_wells;
    m_field_wells_isSet = true;
}

bool OAIWaterfallChartConfiguration::is_field_wells_Set() const{
    return m_field_wells_isSet;
}

bool OAIWaterfallChartConfiguration::is_field_wells_Valid() const{
    return m_field_wells_isValid;
}

OAIWaterfallChartConfiguration_SortConfiguration OAIWaterfallChartConfiguration::getSortConfiguration() const {
    return m_sort_configuration;
}
void OAIWaterfallChartConfiguration::setSortConfiguration(const OAIWaterfallChartConfiguration_SortConfiguration &sort_configuration) {
    m_sort_configuration = sort_configuration;
    m_sort_configuration_isSet = true;
}

bool OAIWaterfallChartConfiguration::is_sort_configuration_Set() const{
    return m_sort_configuration_isSet;
}

bool OAIWaterfallChartConfiguration::is_sort_configuration_Valid() const{
    return m_sort_configuration_isValid;
}

OAIWaterfallChartConfiguration_WaterfallChartOptions OAIWaterfallChartConfiguration::getWaterfallChartOptions() const {
    return m_waterfall_chart_options;
}
void OAIWaterfallChartConfiguration::setWaterfallChartOptions(const OAIWaterfallChartConfiguration_WaterfallChartOptions &waterfall_chart_options) {
    m_waterfall_chart_options = waterfall_chart_options;
    m_waterfall_chart_options_isSet = true;
}

bool OAIWaterfallChartConfiguration::is_waterfall_chart_options_Set() const{
    return m_waterfall_chart_options_isSet;
}

bool OAIWaterfallChartConfiguration::is_waterfall_chart_options_Valid() const{
    return m_waterfall_chart_options_isValid;
}

OAIWaterfallChartConfiguration_CategoryAxisLabelOptions OAIWaterfallChartConfiguration::getCategoryAxisLabelOptions() const {
    return m_category_axis_label_options;
}
void OAIWaterfallChartConfiguration::setCategoryAxisLabelOptions(const OAIWaterfallChartConfiguration_CategoryAxisLabelOptions &category_axis_label_options) {
    m_category_axis_label_options = category_axis_label_options;
    m_category_axis_label_options_isSet = true;
}

bool OAIWaterfallChartConfiguration::is_category_axis_label_options_Set() const{
    return m_category_axis_label_options_isSet;
}

bool OAIWaterfallChartConfiguration::is_category_axis_label_options_Valid() const{
    return m_category_axis_label_options_isValid;
}

OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions OAIWaterfallChartConfiguration::getCategoryAxisDisplayOptions() const {
    return m_category_axis_display_options;
}
void OAIWaterfallChartConfiguration::setCategoryAxisDisplayOptions(const OAIWaterfallChartConfiguration_CategoryAxisDisplayOptions &category_axis_display_options) {
    m_category_axis_display_options = category_axis_display_options;
    m_category_axis_display_options_isSet = true;
}

bool OAIWaterfallChartConfiguration::is_category_axis_display_options_Set() const{
    return m_category_axis_display_options_isSet;
}

bool OAIWaterfallChartConfiguration::is_category_axis_display_options_Valid() const{
    return m_category_axis_display_options_isValid;
}

OAILineChartConfiguration_PrimaryYAxisLabelOptions OAIWaterfallChartConfiguration::getPrimaryYAxisLabelOptions() const {
    return m_primary_y_axis_label_options;
}
void OAIWaterfallChartConfiguration::setPrimaryYAxisLabelOptions(const OAILineChartConfiguration_PrimaryYAxisLabelOptions &primary_y_axis_label_options) {
    m_primary_y_axis_label_options = primary_y_axis_label_options;
    m_primary_y_axis_label_options_isSet = true;
}

bool OAIWaterfallChartConfiguration::is_primary_y_axis_label_options_Set() const{
    return m_primary_y_axis_label_options_isSet;
}

bool OAIWaterfallChartConfiguration::is_primary_y_axis_label_options_Valid() const{
    return m_primary_y_axis_label_options_isValid;
}

OAIHistogramConfiguration_YAxisDisplayOptions OAIWaterfallChartConfiguration::getPrimaryYAxisDisplayOptions() const {
    return m_primary_y_axis_display_options;
}
void OAIWaterfallChartConfiguration::setPrimaryYAxisDisplayOptions(const OAIHistogramConfiguration_YAxisDisplayOptions &primary_y_axis_display_options) {
    m_primary_y_axis_display_options = primary_y_axis_display_options;
    m_primary_y_axis_display_options_isSet = true;
}

bool OAIWaterfallChartConfiguration::is_primary_y_axis_display_options_Set() const{
    return m_primary_y_axis_display_options_isSet;
}

bool OAIWaterfallChartConfiguration::is_primary_y_axis_display_options_Valid() const{
    return m_primary_y_axis_display_options_isValid;
}

OAIWaterfallChartConfiguration_Legend OAIWaterfallChartConfiguration::getLegend() const {
    return m_legend;
}
void OAIWaterfallChartConfiguration::setLegend(const OAIWaterfallChartConfiguration_Legend &legend) {
    m_legend = legend;
    m_legend_isSet = true;
}

bool OAIWaterfallChartConfiguration::is_legend_Set() const{
    return m_legend_isSet;
}

bool OAIWaterfallChartConfiguration::is_legend_Valid() const{
    return m_legend_isValid;
}

OAIWaterfallChartConfiguration_DataLabels OAIWaterfallChartConfiguration::getDataLabels() const {
    return m_data_labels;
}
void OAIWaterfallChartConfiguration::setDataLabels(const OAIWaterfallChartConfiguration_DataLabels &data_labels) {
    m_data_labels = data_labels;
    m_data_labels_isSet = true;
}

bool OAIWaterfallChartConfiguration::is_data_labels_Set() const{
    return m_data_labels_isSet;
}

bool OAIWaterfallChartConfiguration::is_data_labels_Valid() const{
    return m_data_labels_isValid;
}

OAIWaterfallChartConfiguration_VisualPalette OAIWaterfallChartConfiguration::getVisualPalette() const {
    return m_visual_palette;
}
void OAIWaterfallChartConfiguration::setVisualPalette(const OAIWaterfallChartConfiguration_VisualPalette &visual_palette) {
    m_visual_palette = visual_palette;
    m_visual_palette_isSet = true;
}

bool OAIWaterfallChartConfiguration::is_visual_palette_Set() const{
    return m_visual_palette_isSet;
}

bool OAIWaterfallChartConfiguration::is_visual_palette_Valid() const{
    return m_visual_palette_isValid;
}

bool OAIWaterfallChartConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_wells.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_waterfall_chart_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_axis_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_axis_display_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_y_axis_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_y_axis_display_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visual_palette.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWaterfallChartConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
