/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateIngestionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateIngestionRequest::OAICreateIngestionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateIngestionRequest::OAICreateIngestionRequest() {
    this->initializeModel();
}

OAICreateIngestionRequest::~OAICreateIngestionRequest() {}

void OAICreateIngestionRequest::initializeModel() {

    m_ingestion_type_isSet = false;
    m_ingestion_type_isValid = false;
}

void OAICreateIngestionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateIngestionRequest::fromJsonObject(QJsonObject json) {

    m_ingestion_type_isValid = ::OpenAPI::fromJsonValue(m_ingestion_type, json[QString("IngestionType")]);
    m_ingestion_type_isSet = !json[QString("IngestionType")].isNull() && m_ingestion_type_isValid;
}

QString OAICreateIngestionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateIngestionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_ingestion_type.isSet()) {
        obj.insert(QString("IngestionType"), ::OpenAPI::toJsonValue(m_ingestion_type));
    }
    return obj;
}

OAIIngestionType OAICreateIngestionRequest::getIngestionType() const {
    return m_ingestion_type;
}
void OAICreateIngestionRequest::setIngestionType(const OAIIngestionType &ingestion_type) {
    m_ingestion_type = ingestion_type;
    m_ingestion_type_isSet = true;
}

bool OAICreateIngestionRequest::is_ingestion_type_Set() const{
    return m_ingestion_type_isSet;
}

bool OAICreateIngestionRequest::is_ingestion_type_Valid() const{
    return m_ingestion_type_isValid;
}

bool OAICreateIngestionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ingestion_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateIngestionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
