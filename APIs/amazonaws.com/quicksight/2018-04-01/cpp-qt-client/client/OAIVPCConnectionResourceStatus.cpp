/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVPCConnectionResourceStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVPCConnectionResourceStatus::OAIVPCConnectionResourceStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVPCConnectionResourceStatus::OAIVPCConnectionResourceStatus() {
    this->initializeModel();
}

OAIVPCConnectionResourceStatus::~OAIVPCConnectionResourceStatus() {}

void OAIVPCConnectionResourceStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIVPCConnectionResourceStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIVPCConnectionResourceStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CREATION_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVPCConnectionResourceStatus::CREATION_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CREATION_SUCCESSFUL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVPCConnectionResourceStatus::CREATION_SUCCESSFUL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CREATION_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVPCConnectionResourceStatus::CREATION_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UPDATE_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVPCConnectionResourceStatus::UPDATE_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UPDATE_SUCCESSFUL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVPCConnectionResourceStatus::UPDATE_SUCCESSFUL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UPDATE_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVPCConnectionResourceStatus::UPDATE_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETION_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVPCConnectionResourceStatus::DELETION_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETION_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVPCConnectionResourceStatus::DELETION_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVPCConnectionResourceStatus::DELETED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIVPCConnectionResourceStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIVPCConnectionResourceStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIVPCConnectionResourceStatus::CREATION_IN_PROGRESS:
            val = "CREATION_IN_PROGRESS";
            break;
        case eOAIVPCConnectionResourceStatus::CREATION_SUCCESSFUL:
            val = "CREATION_SUCCESSFUL";
            break;
        case eOAIVPCConnectionResourceStatus::CREATION_FAILED:
            val = "CREATION_FAILED";
            break;
        case eOAIVPCConnectionResourceStatus::UPDATE_IN_PROGRESS:
            val = "UPDATE_IN_PROGRESS";
            break;
        case eOAIVPCConnectionResourceStatus::UPDATE_SUCCESSFUL:
            val = "UPDATE_SUCCESSFUL";
            break;
        case eOAIVPCConnectionResourceStatus::UPDATE_FAILED:
            val = "UPDATE_FAILED";
            break;
        case eOAIVPCConnectionResourceStatus::DELETION_IN_PROGRESS:
            val = "DELETION_IN_PROGRESS";
            break;
        case eOAIVPCConnectionResourceStatus::DELETION_FAILED:
            val = "DELETION_FAILED";
            break;
        case eOAIVPCConnectionResourceStatus::DELETED:
            val = "DELETED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIVPCConnectionResourceStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIVPCConnectionResourceStatus::eOAIVPCConnectionResourceStatus OAIVPCConnectionResourceStatus::getValue() const {
    return m_value;
}

void OAIVPCConnectionResourceStatus::setValue(const OAIVPCConnectionResourceStatus::eOAIVPCConnectionResourceStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIVPCConnectionResourceStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIVPCConnectionResourceStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
