/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComparisonFormatConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComparisonFormatConfiguration::OAIComparisonFormatConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComparisonFormatConfiguration::OAIComparisonFormatConfiguration() {
    this->initializeModel();
}

OAIComparisonFormatConfiguration::~OAIComparisonFormatConfiguration() {}

void OAIComparisonFormatConfiguration::initializeModel() {

    m_number_display_format_configuration_isSet = false;
    m_number_display_format_configuration_isValid = false;

    m_percentage_display_format_configuration_isSet = false;
    m_percentage_display_format_configuration_isValid = false;
}

void OAIComparisonFormatConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComparisonFormatConfiguration::fromJsonObject(QJsonObject json) {

    m_number_display_format_configuration_isValid = ::OpenAPI::fromJsonValue(m_number_display_format_configuration, json[QString("NumberDisplayFormatConfiguration")]);
    m_number_display_format_configuration_isSet = !json[QString("NumberDisplayFormatConfiguration")].isNull() && m_number_display_format_configuration_isValid;

    m_percentage_display_format_configuration_isValid = ::OpenAPI::fromJsonValue(m_percentage_display_format_configuration, json[QString("PercentageDisplayFormatConfiguration")]);
    m_percentage_display_format_configuration_isSet = !json[QString("PercentageDisplayFormatConfiguration")].isNull() && m_percentage_display_format_configuration_isValid;
}

QString OAIComparisonFormatConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComparisonFormatConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_number_display_format_configuration.isSet()) {
        obj.insert(QString("NumberDisplayFormatConfiguration"), ::OpenAPI::toJsonValue(m_number_display_format_configuration));
    }
    if (m_percentage_display_format_configuration.isSet()) {
        obj.insert(QString("PercentageDisplayFormatConfiguration"), ::OpenAPI::toJsonValue(m_percentage_display_format_configuration));
    }
    return obj;
}

OAIComparisonFormatConfiguration_NumberDisplayFormatConfiguration OAIComparisonFormatConfiguration::getNumberDisplayFormatConfiguration() const {
    return m_number_display_format_configuration;
}
void OAIComparisonFormatConfiguration::setNumberDisplayFormatConfiguration(const OAIComparisonFormatConfiguration_NumberDisplayFormatConfiguration &number_display_format_configuration) {
    m_number_display_format_configuration = number_display_format_configuration;
    m_number_display_format_configuration_isSet = true;
}

bool OAIComparisonFormatConfiguration::is_number_display_format_configuration_Set() const{
    return m_number_display_format_configuration_isSet;
}

bool OAIComparisonFormatConfiguration::is_number_display_format_configuration_Valid() const{
    return m_number_display_format_configuration_isValid;
}

OAIComparisonFormatConfiguration_PercentageDisplayFormatConfiguration OAIComparisonFormatConfiguration::getPercentageDisplayFormatConfiguration() const {
    return m_percentage_display_format_configuration;
}
void OAIComparisonFormatConfiguration::setPercentageDisplayFormatConfiguration(const OAIComparisonFormatConfiguration_PercentageDisplayFormatConfiguration &percentage_display_format_configuration) {
    m_percentage_display_format_configuration = percentage_display_format_configuration;
    m_percentage_display_format_configuration_isSet = true;
}

bool OAIComparisonFormatConfiguration::is_percentage_display_format_configuration_Set() const{
    return m_percentage_display_format_configuration_isSet;
}

bool OAIComparisonFormatConfiguration::is_percentage_display_format_configuration_Valid() const{
    return m_percentage_display_format_configuration_isValid;
}

bool OAIComparisonFormatConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_number_display_format_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_display_format_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComparisonFormatConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
