/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHeatMapAggregatedFieldWells.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHeatMapAggregatedFieldWells::OAIHeatMapAggregatedFieldWells(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHeatMapAggregatedFieldWells::OAIHeatMapAggregatedFieldWells() {
    this->initializeModel();
}

OAIHeatMapAggregatedFieldWells::~OAIHeatMapAggregatedFieldWells() {}

void OAIHeatMapAggregatedFieldWells::initializeModel() {

    m_rows_isSet = false;
    m_rows_isValid = false;

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIHeatMapAggregatedFieldWells::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHeatMapAggregatedFieldWells::fromJsonObject(QJsonObject json) {

    m_rows_isValid = ::OpenAPI::fromJsonValue(m_rows, json[QString("Rows")]);
    m_rows_isSet = !json[QString("Rows")].isNull() && m_rows_isValid;

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("Columns")]);
    m_columns_isSet = !json[QString("Columns")].isNull() && m_columns_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("Values")]);
    m_values_isSet = !json[QString("Values")].isNull() && m_values_isValid;
}

QString OAIHeatMapAggregatedFieldWells::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHeatMapAggregatedFieldWells::asJsonObject() const {
    QJsonObject obj;
    if (m_rows.isSet()) {
        obj.insert(QString("Rows"), ::OpenAPI::toJsonValue(m_rows));
    }
    if (m_columns.isSet()) {
        obj.insert(QString("Columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_values.isSet()) {
        obj.insert(QString("Values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QList OAIHeatMapAggregatedFieldWells::getRows() const {
    return m_rows;
}
void OAIHeatMapAggregatedFieldWells::setRows(const QList &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAIHeatMapAggregatedFieldWells::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAIHeatMapAggregatedFieldWells::is_rows_Valid() const{
    return m_rows_isValid;
}

QList OAIHeatMapAggregatedFieldWells::getColumns() const {
    return m_columns;
}
void OAIHeatMapAggregatedFieldWells::setColumns(const QList &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIHeatMapAggregatedFieldWells::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIHeatMapAggregatedFieldWells::is_columns_Valid() const{
    return m_columns_isValid;
}

QList OAIHeatMapAggregatedFieldWells::getValues() const {
    return m_values;
}
void OAIHeatMapAggregatedFieldWells::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIHeatMapAggregatedFieldWells::is_values_Set() const{
    return m_values_isSet;
}

bool OAIHeatMapAggregatedFieldWells::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIHeatMapAggregatedFieldWells::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rows.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHeatMapAggregatedFieldWells::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
