/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSourceParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSourceParameters::OAIDataSourceParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSourceParameters::OAIDataSourceParameters() {
    this->initializeModel();
}

OAIDataSourceParameters::~OAIDataSourceParameters() {}

void OAIDataSourceParameters::initializeModel() {

    m_amazon_elasticsearch_parameters_isSet = false;
    m_amazon_elasticsearch_parameters_isValid = false;

    m_athena_parameters_isSet = false;
    m_athena_parameters_isValid = false;

    m_aurora_parameters_isSet = false;
    m_aurora_parameters_isValid = false;

    m_aurora_postgre_sql_parameters_isSet = false;
    m_aurora_postgre_sql_parameters_isValid = false;

    m_aws_iot_analytics_parameters_isSet = false;
    m_aws_iot_analytics_parameters_isValid = false;

    m_jira_parameters_isSet = false;
    m_jira_parameters_isValid = false;

    m_maria_db_parameters_isSet = false;
    m_maria_db_parameters_isValid = false;

    m_my_sql_parameters_isSet = false;
    m_my_sql_parameters_isValid = false;

    m_oracle_parameters_isSet = false;
    m_oracle_parameters_isValid = false;

    m_postgre_sql_parameters_isSet = false;
    m_postgre_sql_parameters_isValid = false;

    m_presto_parameters_isSet = false;
    m_presto_parameters_isValid = false;

    m_rds_parameters_isSet = false;
    m_rds_parameters_isValid = false;

    m_redshift_parameters_isSet = false;
    m_redshift_parameters_isValid = false;

    m_s3_parameters_isSet = false;
    m_s3_parameters_isValid = false;

    m_service_now_parameters_isSet = false;
    m_service_now_parameters_isValid = false;

    m_snowflake_parameters_isSet = false;
    m_snowflake_parameters_isValid = false;

    m_spark_parameters_isSet = false;
    m_spark_parameters_isValid = false;

    m_sql_server_parameters_isSet = false;
    m_sql_server_parameters_isValid = false;

    m_teradata_parameters_isSet = false;
    m_teradata_parameters_isValid = false;

    m_twitter_parameters_isSet = false;
    m_twitter_parameters_isValid = false;

    m_amazon_open_search_parameters_isSet = false;
    m_amazon_open_search_parameters_isValid = false;

    m_exasol_parameters_isSet = false;
    m_exasol_parameters_isValid = false;

    m_databricks_parameters_isSet = false;
    m_databricks_parameters_isValid = false;
}

void OAIDataSourceParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSourceParameters::fromJsonObject(QJsonObject json) {

    m_amazon_elasticsearch_parameters_isValid = ::OpenAPI::fromJsonValue(m_amazon_elasticsearch_parameters, json[QString("AmazonElasticsearchParameters")]);
    m_amazon_elasticsearch_parameters_isSet = !json[QString("AmazonElasticsearchParameters")].isNull() && m_amazon_elasticsearch_parameters_isValid;

    m_athena_parameters_isValid = ::OpenAPI::fromJsonValue(m_athena_parameters, json[QString("AthenaParameters")]);
    m_athena_parameters_isSet = !json[QString("AthenaParameters")].isNull() && m_athena_parameters_isValid;

    m_aurora_parameters_isValid = ::OpenAPI::fromJsonValue(m_aurora_parameters, json[QString("AuroraParameters")]);
    m_aurora_parameters_isSet = !json[QString("AuroraParameters")].isNull() && m_aurora_parameters_isValid;

    m_aurora_postgre_sql_parameters_isValid = ::OpenAPI::fromJsonValue(m_aurora_postgre_sql_parameters, json[QString("AuroraPostgreSqlParameters")]);
    m_aurora_postgre_sql_parameters_isSet = !json[QString("AuroraPostgreSqlParameters")].isNull() && m_aurora_postgre_sql_parameters_isValid;

    m_aws_iot_analytics_parameters_isValid = ::OpenAPI::fromJsonValue(m_aws_iot_analytics_parameters, json[QString("AwsIotAnalyticsParameters")]);
    m_aws_iot_analytics_parameters_isSet = !json[QString("AwsIotAnalyticsParameters")].isNull() && m_aws_iot_analytics_parameters_isValid;

    m_jira_parameters_isValid = ::OpenAPI::fromJsonValue(m_jira_parameters, json[QString("JiraParameters")]);
    m_jira_parameters_isSet = !json[QString("JiraParameters")].isNull() && m_jira_parameters_isValid;

    m_maria_db_parameters_isValid = ::OpenAPI::fromJsonValue(m_maria_db_parameters, json[QString("MariaDbParameters")]);
    m_maria_db_parameters_isSet = !json[QString("MariaDbParameters")].isNull() && m_maria_db_parameters_isValid;

    m_my_sql_parameters_isValid = ::OpenAPI::fromJsonValue(m_my_sql_parameters, json[QString("MySqlParameters")]);
    m_my_sql_parameters_isSet = !json[QString("MySqlParameters")].isNull() && m_my_sql_parameters_isValid;

    m_oracle_parameters_isValid = ::OpenAPI::fromJsonValue(m_oracle_parameters, json[QString("OracleParameters")]);
    m_oracle_parameters_isSet = !json[QString("OracleParameters")].isNull() && m_oracle_parameters_isValid;

    m_postgre_sql_parameters_isValid = ::OpenAPI::fromJsonValue(m_postgre_sql_parameters, json[QString("PostgreSqlParameters")]);
    m_postgre_sql_parameters_isSet = !json[QString("PostgreSqlParameters")].isNull() && m_postgre_sql_parameters_isValid;

    m_presto_parameters_isValid = ::OpenAPI::fromJsonValue(m_presto_parameters, json[QString("PrestoParameters")]);
    m_presto_parameters_isSet = !json[QString("PrestoParameters")].isNull() && m_presto_parameters_isValid;

    m_rds_parameters_isValid = ::OpenAPI::fromJsonValue(m_rds_parameters, json[QString("RdsParameters")]);
    m_rds_parameters_isSet = !json[QString("RdsParameters")].isNull() && m_rds_parameters_isValid;

    m_redshift_parameters_isValid = ::OpenAPI::fromJsonValue(m_redshift_parameters, json[QString("RedshiftParameters")]);
    m_redshift_parameters_isSet = !json[QString("RedshiftParameters")].isNull() && m_redshift_parameters_isValid;

    m_s3_parameters_isValid = ::OpenAPI::fromJsonValue(m_s3_parameters, json[QString("S3Parameters")]);
    m_s3_parameters_isSet = !json[QString("S3Parameters")].isNull() && m_s3_parameters_isValid;

    m_service_now_parameters_isValid = ::OpenAPI::fromJsonValue(m_service_now_parameters, json[QString("ServiceNowParameters")]);
    m_service_now_parameters_isSet = !json[QString("ServiceNowParameters")].isNull() && m_service_now_parameters_isValid;

    m_snowflake_parameters_isValid = ::OpenAPI::fromJsonValue(m_snowflake_parameters, json[QString("SnowflakeParameters")]);
    m_snowflake_parameters_isSet = !json[QString("SnowflakeParameters")].isNull() && m_snowflake_parameters_isValid;

    m_spark_parameters_isValid = ::OpenAPI::fromJsonValue(m_spark_parameters, json[QString("SparkParameters")]);
    m_spark_parameters_isSet = !json[QString("SparkParameters")].isNull() && m_spark_parameters_isValid;

    m_sql_server_parameters_isValid = ::OpenAPI::fromJsonValue(m_sql_server_parameters, json[QString("SqlServerParameters")]);
    m_sql_server_parameters_isSet = !json[QString("SqlServerParameters")].isNull() && m_sql_server_parameters_isValid;

    m_teradata_parameters_isValid = ::OpenAPI::fromJsonValue(m_teradata_parameters, json[QString("TeradataParameters")]);
    m_teradata_parameters_isSet = !json[QString("TeradataParameters")].isNull() && m_teradata_parameters_isValid;

    m_twitter_parameters_isValid = ::OpenAPI::fromJsonValue(m_twitter_parameters, json[QString("TwitterParameters")]);
    m_twitter_parameters_isSet = !json[QString("TwitterParameters")].isNull() && m_twitter_parameters_isValid;

    m_amazon_open_search_parameters_isValid = ::OpenAPI::fromJsonValue(m_amazon_open_search_parameters, json[QString("AmazonOpenSearchParameters")]);
    m_amazon_open_search_parameters_isSet = !json[QString("AmazonOpenSearchParameters")].isNull() && m_amazon_open_search_parameters_isValid;

    m_exasol_parameters_isValid = ::OpenAPI::fromJsonValue(m_exasol_parameters, json[QString("ExasolParameters")]);
    m_exasol_parameters_isSet = !json[QString("ExasolParameters")].isNull() && m_exasol_parameters_isValid;

    m_databricks_parameters_isValid = ::OpenAPI::fromJsonValue(m_databricks_parameters, json[QString("DatabricksParameters")]);
    m_databricks_parameters_isSet = !json[QString("DatabricksParameters")].isNull() && m_databricks_parameters_isValid;
}

QString OAIDataSourceParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSourceParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_amazon_elasticsearch_parameters.isSet()) {
        obj.insert(QString("AmazonElasticsearchParameters"), ::OpenAPI::toJsonValue(m_amazon_elasticsearch_parameters));
    }
    if (m_athena_parameters.isSet()) {
        obj.insert(QString("AthenaParameters"), ::OpenAPI::toJsonValue(m_athena_parameters));
    }
    if (m_aurora_parameters.isSet()) {
        obj.insert(QString("AuroraParameters"), ::OpenAPI::toJsonValue(m_aurora_parameters));
    }
    if (m_aurora_postgre_sql_parameters.isSet()) {
        obj.insert(QString("AuroraPostgreSqlParameters"), ::OpenAPI::toJsonValue(m_aurora_postgre_sql_parameters));
    }
    if (m_aws_iot_analytics_parameters.isSet()) {
        obj.insert(QString("AwsIotAnalyticsParameters"), ::OpenAPI::toJsonValue(m_aws_iot_analytics_parameters));
    }
    if (m_jira_parameters.isSet()) {
        obj.insert(QString("JiraParameters"), ::OpenAPI::toJsonValue(m_jira_parameters));
    }
    if (m_maria_db_parameters.isSet()) {
        obj.insert(QString("MariaDbParameters"), ::OpenAPI::toJsonValue(m_maria_db_parameters));
    }
    if (m_my_sql_parameters.isSet()) {
        obj.insert(QString("MySqlParameters"), ::OpenAPI::toJsonValue(m_my_sql_parameters));
    }
    if (m_oracle_parameters.isSet()) {
        obj.insert(QString("OracleParameters"), ::OpenAPI::toJsonValue(m_oracle_parameters));
    }
    if (m_postgre_sql_parameters.isSet()) {
        obj.insert(QString("PostgreSqlParameters"), ::OpenAPI::toJsonValue(m_postgre_sql_parameters));
    }
    if (m_presto_parameters.isSet()) {
        obj.insert(QString("PrestoParameters"), ::OpenAPI::toJsonValue(m_presto_parameters));
    }
    if (m_rds_parameters.isSet()) {
        obj.insert(QString("RdsParameters"), ::OpenAPI::toJsonValue(m_rds_parameters));
    }
    if (m_redshift_parameters.isSet()) {
        obj.insert(QString("RedshiftParameters"), ::OpenAPI::toJsonValue(m_redshift_parameters));
    }
    if (m_s3_parameters.isSet()) {
        obj.insert(QString("S3Parameters"), ::OpenAPI::toJsonValue(m_s3_parameters));
    }
    if (m_service_now_parameters.isSet()) {
        obj.insert(QString("ServiceNowParameters"), ::OpenAPI::toJsonValue(m_service_now_parameters));
    }
    if (m_snowflake_parameters.isSet()) {
        obj.insert(QString("SnowflakeParameters"), ::OpenAPI::toJsonValue(m_snowflake_parameters));
    }
    if (m_spark_parameters.isSet()) {
        obj.insert(QString("SparkParameters"), ::OpenAPI::toJsonValue(m_spark_parameters));
    }
    if (m_sql_server_parameters.isSet()) {
        obj.insert(QString("SqlServerParameters"), ::OpenAPI::toJsonValue(m_sql_server_parameters));
    }
    if (m_teradata_parameters.isSet()) {
        obj.insert(QString("TeradataParameters"), ::OpenAPI::toJsonValue(m_teradata_parameters));
    }
    if (m_twitter_parameters.isSet()) {
        obj.insert(QString("TwitterParameters"), ::OpenAPI::toJsonValue(m_twitter_parameters));
    }
    if (m_amazon_open_search_parameters.isSet()) {
        obj.insert(QString("AmazonOpenSearchParameters"), ::OpenAPI::toJsonValue(m_amazon_open_search_parameters));
    }
    if (m_exasol_parameters.isSet()) {
        obj.insert(QString("ExasolParameters"), ::OpenAPI::toJsonValue(m_exasol_parameters));
    }
    if (m_databricks_parameters.isSet()) {
        obj.insert(QString("DatabricksParameters"), ::OpenAPI::toJsonValue(m_databricks_parameters));
    }
    return obj;
}

OAICreateDataSource_request_DataSourceParameters_AmazonElasticsearchParameters OAIDataSourceParameters::getAmazonElasticsearchParameters() const {
    return m_amazon_elasticsearch_parameters;
}
void OAIDataSourceParameters::setAmazonElasticsearchParameters(const OAICreateDataSource_request_DataSourceParameters_AmazonElasticsearchParameters &amazon_elasticsearch_parameters) {
    m_amazon_elasticsearch_parameters = amazon_elasticsearch_parameters;
    m_amazon_elasticsearch_parameters_isSet = true;
}

bool OAIDataSourceParameters::is_amazon_elasticsearch_parameters_Set() const{
    return m_amazon_elasticsearch_parameters_isSet;
}

bool OAIDataSourceParameters::is_amazon_elasticsearch_parameters_Valid() const{
    return m_amazon_elasticsearch_parameters_isValid;
}

OAICreateDataSource_request_DataSourceParameters_AthenaParameters OAIDataSourceParameters::getAthenaParameters() const {
    return m_athena_parameters;
}
void OAIDataSourceParameters::setAthenaParameters(const OAICreateDataSource_request_DataSourceParameters_AthenaParameters &athena_parameters) {
    m_athena_parameters = athena_parameters;
    m_athena_parameters_isSet = true;
}

bool OAIDataSourceParameters::is_athena_parameters_Set() const{
    return m_athena_parameters_isSet;
}

bool OAIDataSourceParameters::is_athena_parameters_Valid() const{
    return m_athena_parameters_isValid;
}

OAICreateDataSource_request_DataSourceParameters_AuroraParameters OAIDataSourceParameters::getAuroraParameters() const {
    return m_aurora_parameters;
}
void OAIDataSourceParameters::setAuroraParameters(const OAICreateDataSource_request_DataSourceParameters_AuroraParameters &aurora_parameters) {
    m_aurora_parameters = aurora_parameters;
    m_aurora_parameters_isSet = true;
}

bool OAIDataSourceParameters::is_aurora_parameters_Set() const{
    return m_aurora_parameters_isSet;
}

bool OAIDataSourceParameters::is_aurora_parameters_Valid() const{
    return m_aurora_parameters_isValid;
}

OAICreateDataSource_request_DataSourceParameters_AuroraPostgreSqlParameters OAIDataSourceParameters::getAuroraPostgreSqlParameters() const {
    return m_aurora_postgre_sql_parameters;
}
void OAIDataSourceParameters::setAuroraPostgreSqlParameters(const OAICreateDataSource_request_DataSourceParameters_AuroraPostgreSqlParameters &aurora_postgre_sql_parameters) {
    m_aurora_postgre_sql_parameters = aurora_postgre_sql_parameters;
    m_aurora_postgre_sql_parameters_isSet = true;
}

bool OAIDataSourceParameters::is_aurora_postgre_sql_parameters_Set() const{
    return m_aurora_postgre_sql_parameters_isSet;
}

bool OAIDataSourceParameters::is_aurora_postgre_sql_parameters_Valid() const{
    return m_aurora_postgre_sql_parameters_isValid;
}

OAICreateDataSource_request_DataSourceParameters_AwsIotAnalyticsParameters OAIDataSourceParameters::getAwsIotAnalyticsParameters() const {
    return m_aws_iot_analytics_parameters;
}
void OAIDataSourceParameters::setAwsIotAnalyticsParameters(const OAICreateDataSource_request_DataSourceParameters_AwsIotAnalyticsParameters &aws_iot_analytics_parameters) {
    m_aws_iot_analytics_parameters = aws_iot_analytics_parameters;
    m_aws_iot_analytics_parameters_isSet = true;
}

bool OAIDataSourceParameters::is_aws_iot_analytics_parameters_Set() const{
    return m_aws_iot_analytics_parameters_isSet;
}

bool OAIDataSourceParameters::is_aws_iot_analytics_parameters_Valid() const{
    return m_aws_iot_analytics_parameters_isValid;
}

OAICreateDataSource_request_DataSourceParameters_JiraParameters OAIDataSourceParameters::getJiraParameters() const {
    return m_jira_parameters;
}
void OAIDataSourceParameters::setJiraParameters(const OAICreateDataSource_request_DataSourceParameters_JiraParameters &jira_parameters) {
    m_jira_parameters = jira_parameters;
    m_jira_parameters_isSet = true;
}

bool OAIDataSourceParameters::is_jira_parameters_Set() const{
    return m_jira_parameters_isSet;
}

bool OAIDataSourceParameters::is_jira_parameters_Valid() const{
    return m_jira_parameters_isValid;
}

OAICreateDataSource_request_DataSourceParameters_MariaDbParameters OAIDataSourceParameters::getMariaDbParameters() const {
    return m_maria_db_parameters;
}
void OAIDataSourceParameters::setMariaDbParameters(const OAICreateDataSource_request_DataSourceParameters_MariaDbParameters &maria_db_parameters) {
    m_maria_db_parameters = maria_db_parameters;
    m_maria_db_parameters_isSet = true;
}

bool OAIDataSourceParameters::is_maria_db_parameters_Set() const{
    return m_maria_db_parameters_isSet;
}

bool OAIDataSourceParameters::is_maria_db_parameters_Valid() const{
    return m_maria_db_parameters_isValid;
}

OAICreateDataSource_request_DataSourceParameters_MySqlParameters OAIDataSourceParameters::getMySqlParameters() const {
    return m_my_sql_parameters;
}
void OAIDataSourceParameters::setMySqlParameters(const OAICreateDataSource_request_DataSourceParameters_MySqlParameters &my_sql_parameters) {
    m_my_sql_parameters = my_sql_parameters;
    m_my_sql_parameters_isSet = true;
}

bool OAIDataSourceParameters::is_my_sql_parameters_Set() const{
    return m_my_sql_parameters_isSet;
}

bool OAIDataSourceParameters::is_my_sql_parameters_Valid() const{
    return m_my_sql_parameters_isValid;
}

OAICreateDataSource_request_DataSourceParameters_OracleParameters OAIDataSourceParameters::getOracleParameters() const {
    return m_oracle_parameters;
}
void OAIDataSourceParameters::setOracleParameters(const OAICreateDataSource_request_DataSourceParameters_OracleParameters &oracle_parameters) {
    m_oracle_parameters = oracle_parameters;
    m_oracle_parameters_isSet = true;
}

bool OAIDataSourceParameters::is_oracle_parameters_Set() const{
    return m_oracle_parameters_isSet;
}

bool OAIDataSourceParameters::is_oracle_parameters_Valid() const{
    return m_oracle_parameters_isValid;
}

OAICreateDataSource_request_DataSourceParameters_PostgreSqlParameters OAIDataSourceParameters::getPostgreSqlParameters() const {
    return m_postgre_sql_parameters;
}
void OAIDataSourceParameters::setPostgreSqlParameters(const OAICreateDataSource_request_DataSourceParameters_PostgreSqlParameters &postgre_sql_parameters) {
    m_postgre_sql_parameters = postgre_sql_parameters;
    m_postgre_sql_parameters_isSet = true;
}

bool OAIDataSourceParameters::is_postgre_sql_parameters_Set() const{
    return m_postgre_sql_parameters_isSet;
}

bool OAIDataSourceParameters::is_postgre_sql_parameters_Valid() const{
    return m_postgre_sql_parameters_isValid;
}

OAICreateDataSource_request_DataSourceParameters_PrestoParameters OAIDataSourceParameters::getPrestoParameters() const {
    return m_presto_parameters;
}
void OAIDataSourceParameters::setPrestoParameters(const OAICreateDataSource_request_DataSourceParameters_PrestoParameters &presto_parameters) {
    m_presto_parameters = presto_parameters;
    m_presto_parameters_isSet = true;
}

bool OAIDataSourceParameters::is_presto_parameters_Set() const{
    return m_presto_parameters_isSet;
}

bool OAIDataSourceParameters::is_presto_parameters_Valid() const{
    return m_presto_parameters_isValid;
}

OAICreateDataSource_request_DataSourceParameters_RdsParameters OAIDataSourceParameters::getRdsParameters() const {
    return m_rds_parameters;
}
void OAIDataSourceParameters::setRdsParameters(const OAICreateDataSource_request_DataSourceParameters_RdsParameters &rds_parameters) {
    m_rds_parameters = rds_parameters;
    m_rds_parameters_isSet = true;
}

bool OAIDataSourceParameters::is_rds_parameters_Set() const{
    return m_rds_parameters_isSet;
}

bool OAIDataSourceParameters::is_rds_parameters_Valid() const{
    return m_rds_parameters_isValid;
}

OAICreateDataSource_request_DataSourceParameters_RedshiftParameters OAIDataSourceParameters::getRedshiftParameters() const {
    return m_redshift_parameters;
}
void OAIDataSourceParameters::setRedshiftParameters(const OAICreateDataSource_request_DataSourceParameters_RedshiftParameters &redshift_parameters) {
    m_redshift_parameters = redshift_parameters;
    m_redshift_parameters_isSet = true;
}

bool OAIDataSourceParameters::is_redshift_parameters_Set() const{
    return m_redshift_parameters_isSet;
}

bool OAIDataSourceParameters::is_redshift_parameters_Valid() const{
    return m_redshift_parameters_isValid;
}

OAICreateDataSource_request_DataSourceParameters_S3Parameters OAIDataSourceParameters::getS3Parameters() const {
    return m_s3_parameters;
}
void OAIDataSourceParameters::setS3Parameters(const OAICreateDataSource_request_DataSourceParameters_S3Parameters &s3_parameters) {
    m_s3_parameters = s3_parameters;
    m_s3_parameters_isSet = true;
}

bool OAIDataSourceParameters::is_s3_parameters_Set() const{
    return m_s3_parameters_isSet;
}

bool OAIDataSourceParameters::is_s3_parameters_Valid() const{
    return m_s3_parameters_isValid;
}

OAICreateDataSource_request_DataSourceParameters_ServiceNowParameters OAIDataSourceParameters::getServiceNowParameters() const {
    return m_service_now_parameters;
}
void OAIDataSourceParameters::setServiceNowParameters(const OAICreateDataSource_request_DataSourceParameters_ServiceNowParameters &service_now_parameters) {
    m_service_now_parameters = service_now_parameters;
    m_service_now_parameters_isSet = true;
}

bool OAIDataSourceParameters::is_service_now_parameters_Set() const{
    return m_service_now_parameters_isSet;
}

bool OAIDataSourceParameters::is_service_now_parameters_Valid() const{
    return m_service_now_parameters_isValid;
}

OAICreateDataSource_request_DataSourceParameters_SnowflakeParameters OAIDataSourceParameters::getSnowflakeParameters() const {
    return m_snowflake_parameters;
}
void OAIDataSourceParameters::setSnowflakeParameters(const OAICreateDataSource_request_DataSourceParameters_SnowflakeParameters &snowflake_parameters) {
    m_snowflake_parameters = snowflake_parameters;
    m_snowflake_parameters_isSet = true;
}

bool OAIDataSourceParameters::is_snowflake_parameters_Set() const{
    return m_snowflake_parameters_isSet;
}

bool OAIDataSourceParameters::is_snowflake_parameters_Valid() const{
    return m_snowflake_parameters_isValid;
}

OAICreateDataSource_request_DataSourceParameters_SparkParameters OAIDataSourceParameters::getSparkParameters() const {
    return m_spark_parameters;
}
void OAIDataSourceParameters::setSparkParameters(const OAICreateDataSource_request_DataSourceParameters_SparkParameters &spark_parameters) {
    m_spark_parameters = spark_parameters;
    m_spark_parameters_isSet = true;
}

bool OAIDataSourceParameters::is_spark_parameters_Set() const{
    return m_spark_parameters_isSet;
}

bool OAIDataSourceParameters::is_spark_parameters_Valid() const{
    return m_spark_parameters_isValid;
}

OAICreateDataSource_request_DataSourceParameters_SqlServerParameters OAIDataSourceParameters::getSqlServerParameters() const {
    return m_sql_server_parameters;
}
void OAIDataSourceParameters::setSqlServerParameters(const OAICreateDataSource_request_DataSourceParameters_SqlServerParameters &sql_server_parameters) {
    m_sql_server_parameters = sql_server_parameters;
    m_sql_server_parameters_isSet = true;
}

bool OAIDataSourceParameters::is_sql_server_parameters_Set() const{
    return m_sql_server_parameters_isSet;
}

bool OAIDataSourceParameters::is_sql_server_parameters_Valid() const{
    return m_sql_server_parameters_isValid;
}

OAICreateDataSource_request_DataSourceParameters_TeradataParameters OAIDataSourceParameters::getTeradataParameters() const {
    return m_teradata_parameters;
}
void OAIDataSourceParameters::setTeradataParameters(const OAICreateDataSource_request_DataSourceParameters_TeradataParameters &teradata_parameters) {
    m_teradata_parameters = teradata_parameters;
    m_teradata_parameters_isSet = true;
}

bool OAIDataSourceParameters::is_teradata_parameters_Set() const{
    return m_teradata_parameters_isSet;
}

bool OAIDataSourceParameters::is_teradata_parameters_Valid() const{
    return m_teradata_parameters_isValid;
}

OAICreateDataSource_request_DataSourceParameters_TwitterParameters OAIDataSourceParameters::getTwitterParameters() const {
    return m_twitter_parameters;
}
void OAIDataSourceParameters::setTwitterParameters(const OAICreateDataSource_request_DataSourceParameters_TwitterParameters &twitter_parameters) {
    m_twitter_parameters = twitter_parameters;
    m_twitter_parameters_isSet = true;
}

bool OAIDataSourceParameters::is_twitter_parameters_Set() const{
    return m_twitter_parameters_isSet;
}

bool OAIDataSourceParameters::is_twitter_parameters_Valid() const{
    return m_twitter_parameters_isValid;
}

OAICreateDataSource_request_DataSourceParameters_AmazonOpenSearchParameters OAIDataSourceParameters::getAmazonOpenSearchParameters() const {
    return m_amazon_open_search_parameters;
}
void OAIDataSourceParameters::setAmazonOpenSearchParameters(const OAICreateDataSource_request_DataSourceParameters_AmazonOpenSearchParameters &amazon_open_search_parameters) {
    m_amazon_open_search_parameters = amazon_open_search_parameters;
    m_amazon_open_search_parameters_isSet = true;
}

bool OAIDataSourceParameters::is_amazon_open_search_parameters_Set() const{
    return m_amazon_open_search_parameters_isSet;
}

bool OAIDataSourceParameters::is_amazon_open_search_parameters_Valid() const{
    return m_amazon_open_search_parameters_isValid;
}

OAICreateDataSource_request_DataSourceParameters_ExasolParameters OAIDataSourceParameters::getExasolParameters() const {
    return m_exasol_parameters;
}
void OAIDataSourceParameters::setExasolParameters(const OAICreateDataSource_request_DataSourceParameters_ExasolParameters &exasol_parameters) {
    m_exasol_parameters = exasol_parameters;
    m_exasol_parameters_isSet = true;
}

bool OAIDataSourceParameters::is_exasol_parameters_Set() const{
    return m_exasol_parameters_isSet;
}

bool OAIDataSourceParameters::is_exasol_parameters_Valid() const{
    return m_exasol_parameters_isValid;
}

OAICreateDataSource_request_DataSourceParameters_DatabricksParameters OAIDataSourceParameters::getDatabricksParameters() const {
    return m_databricks_parameters;
}
void OAIDataSourceParameters::setDatabricksParameters(const OAICreateDataSource_request_DataSourceParameters_DatabricksParameters &databricks_parameters) {
    m_databricks_parameters = databricks_parameters;
    m_databricks_parameters_isSet = true;
}

bool OAIDataSourceParameters::is_databricks_parameters_Set() const{
    return m_databricks_parameters_isSet;
}

bool OAIDataSourceParameters::is_databricks_parameters_Valid() const{
    return m_databricks_parameters_isValid;
}

bool OAIDataSourceParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amazon_elasticsearch_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_athena_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_aurora_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_aurora_postgre_sql_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_aws_iot_analytics_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_jira_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maria_db_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_my_sql_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_oracle_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_postgre_sql_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_presto_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rds_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redshift_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_now_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snowflake_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spark_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_server_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_teradata_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitter_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amazon_open_search_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exasol_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_databricks_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSourceParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
