/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMaximumMinimumComputation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMaximumMinimumComputation::OAIMaximumMinimumComputation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMaximumMinimumComputation::OAIMaximumMinimumComputation() {
    this->initializeModel();
}

OAIMaximumMinimumComputation::~OAIMaximumMinimumComputation() {}

void OAIMaximumMinimumComputation::initializeModel() {

    m_computation_id_isSet = false;
    m_computation_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIMaximumMinimumComputation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMaximumMinimumComputation::fromJsonObject(QJsonObject json) {

    m_computation_id_isValid = ::OpenAPI::fromJsonValue(m_computation_id, json[QString("ComputationId")]);
    m_computation_id_isSet = !json[QString("ComputationId")].isNull() && m_computation_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("Time")]);
    m_time_isSet = !json[QString("Time")].isNull() && m_time_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIMaximumMinimumComputation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMaximumMinimumComputation::asJsonObject() const {
    QJsonObject obj;
    if (m_computation_id_isSet) {
        obj.insert(QString("ComputationId"), ::OpenAPI::toJsonValue(m_computation_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_time.isSet()) {
        obj.insert(QString("Time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_value.isSet()) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIMaximumMinimumComputation::getComputationId() const {
    return m_computation_id;
}
void OAIMaximumMinimumComputation::setComputationId(const QString &computation_id) {
    m_computation_id = computation_id;
    m_computation_id_isSet = true;
}

bool OAIMaximumMinimumComputation::is_computation_id_Set() const{
    return m_computation_id_isSet;
}

bool OAIMaximumMinimumComputation::is_computation_id_Valid() const{
    return m_computation_id_isValid;
}

QString OAIMaximumMinimumComputation::getName() const {
    return m_name;
}
void OAIMaximumMinimumComputation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMaximumMinimumComputation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMaximumMinimumComputation::is_name_Valid() const{
    return m_name_isValid;
}

OAITopBottomMoversComputation_Time OAIMaximumMinimumComputation::getTime() const {
    return m_time;
}
void OAIMaximumMinimumComputation::setTime(const OAITopBottomMoversComputation_Time &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIMaximumMinimumComputation::is_time_Set() const{
    return m_time_isSet;
}

bool OAIMaximumMinimumComputation::is_time_Valid() const{
    return m_time_isValid;
}

OAITopBottomRankedComputation_Value OAIMaximumMinimumComputation::getValue() const {
    return m_value;
}
void OAIMaximumMinimumComputation::setValue(const OAITopBottomRankedComputation_Value &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIMaximumMinimumComputation::is_value_Set() const{
    return m_value_isSet;
}

bool OAIMaximumMinimumComputation::is_value_Valid() const{
    return m_value_isValid;
}

OAIMaximumMinimumComputationType OAIMaximumMinimumComputation::getType() const {
    return m_type;
}
void OAIMaximumMinimumComputation::setType(const OAIMaximumMinimumComputationType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMaximumMinimumComputation::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMaximumMinimumComputation::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIMaximumMinimumComputation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_computation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMaximumMinimumComputation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_computation_id_isValid && m_time_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
