/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopicRefreshStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopicRefreshStatus::OAITopicRefreshStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopicRefreshStatus::OAITopicRefreshStatus() {
    this->initializeModel();
}

OAITopicRefreshStatus::~OAITopicRefreshStatus() {}

void OAITopicRefreshStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITopicRefreshStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITopicRefreshStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("INITIALIZED", Qt::CaseInsensitive) == 0) {
        m_value = eOAITopicRefreshStatus::INITIALIZED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RUNNING", Qt::CaseInsensitive) == 0) {
        m_value = eOAITopicRefreshStatus::RUNNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAITopicRefreshStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COMPLETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAITopicRefreshStatus::COMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CANCELLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAITopicRefreshStatus::CANCELLED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITopicRefreshStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITopicRefreshStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITopicRefreshStatus::INITIALIZED:
            val = "INITIALIZED";
            break;
        case eOAITopicRefreshStatus::RUNNING:
            val = "RUNNING";
            break;
        case eOAITopicRefreshStatus::FAILED:
            val = "FAILED";
            break;
        case eOAITopicRefreshStatus::COMPLETED:
            val = "COMPLETED";
            break;
        case eOAITopicRefreshStatus::CANCELLED:
            val = "CANCELLED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITopicRefreshStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITopicRefreshStatus::eOAITopicRefreshStatus OAITopicRefreshStatus::getValue() const {
    return m_value;
}

void OAITopicRefreshStatus::setValue(const OAITopicRefreshStatus::eOAITopicRefreshStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITopicRefreshStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAITopicRefreshStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
