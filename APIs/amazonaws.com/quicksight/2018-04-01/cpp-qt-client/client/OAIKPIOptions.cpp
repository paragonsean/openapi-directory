/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKPIOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKPIOptions::OAIKPIOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKPIOptions::OAIKPIOptions() {
    this->initializeModel();
}

OAIKPIOptions::~OAIKPIOptions() {}

void OAIKPIOptions::initializeModel() {

    m_progress_bar_isSet = false;
    m_progress_bar_isValid = false;

    m_trend_arrows_isSet = false;
    m_trend_arrows_isValid = false;

    m_secondary_value_isSet = false;
    m_secondary_value_isValid = false;

    m_comparison_isSet = false;
    m_comparison_isValid = false;

    m_primary_value_display_type_isSet = false;
    m_primary_value_display_type_isValid = false;

    m_primary_value_font_configuration_isSet = false;
    m_primary_value_font_configuration_isValid = false;

    m_secondary_value_font_configuration_isSet = false;
    m_secondary_value_font_configuration_isValid = false;
}

void OAIKPIOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKPIOptions::fromJsonObject(QJsonObject json) {

    m_progress_bar_isValid = ::OpenAPI::fromJsonValue(m_progress_bar, json[QString("ProgressBar")]);
    m_progress_bar_isSet = !json[QString("ProgressBar")].isNull() && m_progress_bar_isValid;

    m_trend_arrows_isValid = ::OpenAPI::fromJsonValue(m_trend_arrows, json[QString("TrendArrows")]);
    m_trend_arrows_isSet = !json[QString("TrendArrows")].isNull() && m_trend_arrows_isValid;

    m_secondary_value_isValid = ::OpenAPI::fromJsonValue(m_secondary_value, json[QString("SecondaryValue")]);
    m_secondary_value_isSet = !json[QString("SecondaryValue")].isNull() && m_secondary_value_isValid;

    m_comparison_isValid = ::OpenAPI::fromJsonValue(m_comparison, json[QString("Comparison")]);
    m_comparison_isSet = !json[QString("Comparison")].isNull() && m_comparison_isValid;

    m_primary_value_display_type_isValid = ::OpenAPI::fromJsonValue(m_primary_value_display_type, json[QString("PrimaryValueDisplayType")]);
    m_primary_value_display_type_isSet = !json[QString("PrimaryValueDisplayType")].isNull() && m_primary_value_display_type_isValid;

    m_primary_value_font_configuration_isValid = ::OpenAPI::fromJsonValue(m_primary_value_font_configuration, json[QString("PrimaryValueFontConfiguration")]);
    m_primary_value_font_configuration_isSet = !json[QString("PrimaryValueFontConfiguration")].isNull() && m_primary_value_font_configuration_isValid;

    m_secondary_value_font_configuration_isValid = ::OpenAPI::fromJsonValue(m_secondary_value_font_configuration, json[QString("SecondaryValueFontConfiguration")]);
    m_secondary_value_font_configuration_isSet = !json[QString("SecondaryValueFontConfiguration")].isNull() && m_secondary_value_font_configuration_isValid;
}

QString OAIKPIOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKPIOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_progress_bar.isSet()) {
        obj.insert(QString("ProgressBar"), ::OpenAPI::toJsonValue(m_progress_bar));
    }
    if (m_trend_arrows.isSet()) {
        obj.insert(QString("TrendArrows"), ::OpenAPI::toJsonValue(m_trend_arrows));
    }
    if (m_secondary_value.isSet()) {
        obj.insert(QString("SecondaryValue"), ::OpenAPI::toJsonValue(m_secondary_value));
    }
    if (m_comparison.isSet()) {
        obj.insert(QString("Comparison"), ::OpenAPI::toJsonValue(m_comparison));
    }
    if (m_primary_value_display_type.isSet()) {
        obj.insert(QString("PrimaryValueDisplayType"), ::OpenAPI::toJsonValue(m_primary_value_display_type));
    }
    if (m_primary_value_font_configuration.isSet()) {
        obj.insert(QString("PrimaryValueFontConfiguration"), ::OpenAPI::toJsonValue(m_primary_value_font_configuration));
    }
    if (m_secondary_value_font_configuration.isSet()) {
        obj.insert(QString("SecondaryValueFontConfiguration"), ::OpenAPI::toJsonValue(m_secondary_value_font_configuration));
    }
    return obj;
}

OAIKPIOptions_ProgressBar OAIKPIOptions::getProgressBar() const {
    return m_progress_bar;
}
void OAIKPIOptions::setProgressBar(const OAIKPIOptions_ProgressBar &progress_bar) {
    m_progress_bar = progress_bar;
    m_progress_bar_isSet = true;
}

bool OAIKPIOptions::is_progress_bar_Set() const{
    return m_progress_bar_isSet;
}

bool OAIKPIOptions::is_progress_bar_Valid() const{
    return m_progress_bar_isValid;
}

OAIKPIOptions_TrendArrows OAIKPIOptions::getTrendArrows() const {
    return m_trend_arrows;
}
void OAIKPIOptions::setTrendArrows(const OAIKPIOptions_TrendArrows &trend_arrows) {
    m_trend_arrows = trend_arrows;
    m_trend_arrows_isSet = true;
}

bool OAIKPIOptions::is_trend_arrows_Set() const{
    return m_trend_arrows_isSet;
}

bool OAIKPIOptions::is_trend_arrows_Valid() const{
    return m_trend_arrows_isValid;
}

OAIKPIOptions_SecondaryValue OAIKPIOptions::getSecondaryValue() const {
    return m_secondary_value;
}
void OAIKPIOptions::setSecondaryValue(const OAIKPIOptions_SecondaryValue &secondary_value) {
    m_secondary_value = secondary_value;
    m_secondary_value_isSet = true;
}

bool OAIKPIOptions::is_secondary_value_Set() const{
    return m_secondary_value_isSet;
}

bool OAIKPIOptions::is_secondary_value_Valid() const{
    return m_secondary_value_isValid;
}

OAIKPIOptions_Comparison OAIKPIOptions::getComparison() const {
    return m_comparison;
}
void OAIKPIOptions::setComparison(const OAIKPIOptions_Comparison &comparison) {
    m_comparison = comparison;
    m_comparison_isSet = true;
}

bool OAIKPIOptions::is_comparison_Set() const{
    return m_comparison_isSet;
}

bool OAIKPIOptions::is_comparison_Valid() const{
    return m_comparison_isValid;
}

OAIPrimaryValueDisplayType OAIKPIOptions::getPrimaryValueDisplayType() const {
    return m_primary_value_display_type;
}
void OAIKPIOptions::setPrimaryValueDisplayType(const OAIPrimaryValueDisplayType &primary_value_display_type) {
    m_primary_value_display_type = primary_value_display_type;
    m_primary_value_display_type_isSet = true;
}

bool OAIKPIOptions::is_primary_value_display_type_Set() const{
    return m_primary_value_display_type_isSet;
}

bool OAIKPIOptions::is_primary_value_display_type_Valid() const{
    return m_primary_value_display_type_isValid;
}

OAIGaugeChartOptions_PrimaryValueFontConfiguration OAIKPIOptions::getPrimaryValueFontConfiguration() const {
    return m_primary_value_font_configuration;
}
void OAIKPIOptions::setPrimaryValueFontConfiguration(const OAIGaugeChartOptions_PrimaryValueFontConfiguration &primary_value_font_configuration) {
    m_primary_value_font_configuration = primary_value_font_configuration;
    m_primary_value_font_configuration_isSet = true;
}

bool OAIKPIOptions::is_primary_value_font_configuration_Set() const{
    return m_primary_value_font_configuration_isSet;
}

bool OAIKPIOptions::is_primary_value_font_configuration_Valid() const{
    return m_primary_value_font_configuration_isValid;
}

OAIKPIOptions_SecondaryValueFontConfiguration OAIKPIOptions::getSecondaryValueFontConfiguration() const {
    return m_secondary_value_font_configuration;
}
void OAIKPIOptions::setSecondaryValueFontConfiguration(const OAIKPIOptions_SecondaryValueFontConfiguration &secondary_value_font_configuration) {
    m_secondary_value_font_configuration = secondary_value_font_configuration;
    m_secondary_value_font_configuration_isSet = true;
}

bool OAIKPIOptions::is_secondary_value_font_configuration_Set() const{
    return m_secondary_value_font_configuration_isSet;
}

bool OAIKPIOptions::is_secondary_value_font_configuration_Valid() const{
    return m_secondary_value_font_configuration_isValid;
}

bool OAIKPIOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_progress_bar.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trend_arrows.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comparison.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_value_display_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_value_font_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_value_font_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKPIOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
