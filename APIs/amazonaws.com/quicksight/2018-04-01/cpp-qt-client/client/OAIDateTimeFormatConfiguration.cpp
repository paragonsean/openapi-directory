/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDateTimeFormatConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDateTimeFormatConfiguration::OAIDateTimeFormatConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDateTimeFormatConfiguration::OAIDateTimeFormatConfiguration() {
    this->initializeModel();
}

OAIDateTimeFormatConfiguration::~OAIDateTimeFormatConfiguration() {}

void OAIDateTimeFormatConfiguration::initializeModel() {

    m_date_time_format_isSet = false;
    m_date_time_format_isValid = false;

    m_null_value_format_configuration_isSet = false;
    m_null_value_format_configuration_isValid = false;

    m_numeric_format_configuration_isSet = false;
    m_numeric_format_configuration_isValid = false;
}

void OAIDateTimeFormatConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDateTimeFormatConfiguration::fromJsonObject(QJsonObject json) {

    m_date_time_format_isValid = ::OpenAPI::fromJsonValue(m_date_time_format, json[QString("DateTimeFormat")]);
    m_date_time_format_isSet = !json[QString("DateTimeFormat")].isNull() && m_date_time_format_isValid;

    m_null_value_format_configuration_isValid = ::OpenAPI::fromJsonValue(m_null_value_format_configuration, json[QString("NullValueFormatConfiguration")]);
    m_null_value_format_configuration_isSet = !json[QString("NullValueFormatConfiguration")].isNull() && m_null_value_format_configuration_isValid;

    m_numeric_format_configuration_isValid = ::OpenAPI::fromJsonValue(m_numeric_format_configuration, json[QString("NumericFormatConfiguration")]);
    m_numeric_format_configuration_isSet = !json[QString("NumericFormatConfiguration")].isNull() && m_numeric_format_configuration_isValid;
}

QString OAIDateTimeFormatConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDateTimeFormatConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_date_time_format_isSet) {
        obj.insert(QString("DateTimeFormat"), ::OpenAPI::toJsonValue(m_date_time_format));
    }
    if (m_null_value_format_configuration.isSet()) {
        obj.insert(QString("NullValueFormatConfiguration"), ::OpenAPI::toJsonValue(m_null_value_format_configuration));
    }
    if (m_numeric_format_configuration.isSet()) {
        obj.insert(QString("NumericFormatConfiguration"), ::OpenAPI::toJsonValue(m_numeric_format_configuration));
    }
    return obj;
}

QString OAIDateTimeFormatConfiguration::getDateTimeFormat() const {
    return m_date_time_format;
}
void OAIDateTimeFormatConfiguration::setDateTimeFormat(const QString &date_time_format) {
    m_date_time_format = date_time_format;
    m_date_time_format_isSet = true;
}

bool OAIDateTimeFormatConfiguration::is_date_time_format_Set() const{
    return m_date_time_format_isSet;
}

bool OAIDateTimeFormatConfiguration::is_date_time_format_Valid() const{
    return m_date_time_format_isValid;
}

OAIStringFormatConfiguration_NullValueFormatConfiguration OAIDateTimeFormatConfiguration::getNullValueFormatConfiguration() const {
    return m_null_value_format_configuration;
}
void OAIDateTimeFormatConfiguration::setNullValueFormatConfiguration(const OAIStringFormatConfiguration_NullValueFormatConfiguration &null_value_format_configuration) {
    m_null_value_format_configuration = null_value_format_configuration;
    m_null_value_format_configuration_isSet = true;
}

bool OAIDateTimeFormatConfiguration::is_null_value_format_configuration_Set() const{
    return m_null_value_format_configuration_isSet;
}

bool OAIDateTimeFormatConfiguration::is_null_value_format_configuration_Valid() const{
    return m_null_value_format_configuration_isValid;
}

OAIDateTimeFormatConfiguration_NumericFormatConfiguration OAIDateTimeFormatConfiguration::getNumericFormatConfiguration() const {
    return m_numeric_format_configuration;
}
void OAIDateTimeFormatConfiguration::setNumericFormatConfiguration(const OAIDateTimeFormatConfiguration_NumericFormatConfiguration &numeric_format_configuration) {
    m_numeric_format_configuration = numeric_format_configuration;
    m_numeric_format_configuration_isSet = true;
}

bool OAIDateTimeFormatConfiguration::is_numeric_format_configuration_Set() const{
    return m_numeric_format_configuration_isSet;
}

bool OAIDateTimeFormatConfiguration::is_numeric_format_configuration_Valid() const{
    return m_numeric_format_configuration_isValid;
}

bool OAIDateTimeFormatConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_time_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_null_value_format_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_numeric_format_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDateTimeFormatConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
