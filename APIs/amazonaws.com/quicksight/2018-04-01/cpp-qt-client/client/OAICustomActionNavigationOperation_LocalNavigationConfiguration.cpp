/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomActionNavigationOperation_LocalNavigationConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomActionNavigationOperation_LocalNavigationConfiguration::OAICustomActionNavigationOperation_LocalNavigationConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomActionNavigationOperation_LocalNavigationConfiguration::OAICustomActionNavigationOperation_LocalNavigationConfiguration() {
    this->initializeModel();
}

OAICustomActionNavigationOperation_LocalNavigationConfiguration::~OAICustomActionNavigationOperation_LocalNavigationConfiguration() {}

void OAICustomActionNavigationOperation_LocalNavigationConfiguration::initializeModel() {

    m_target_sheet_id_isSet = false;
    m_target_sheet_id_isValid = false;
}

void OAICustomActionNavigationOperation_LocalNavigationConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomActionNavigationOperation_LocalNavigationConfiguration::fromJsonObject(QJsonObject json) {

    m_target_sheet_id_isValid = ::OpenAPI::fromJsonValue(m_target_sheet_id, json[QString("TargetSheetId")]);
    m_target_sheet_id_isSet = !json[QString("TargetSheetId")].isNull() && m_target_sheet_id_isValid;
}

QString OAICustomActionNavigationOperation_LocalNavigationConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomActionNavigationOperation_LocalNavigationConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_target_sheet_id_isSet) {
        obj.insert(QString("TargetSheetId"), ::OpenAPI::toJsonValue(m_target_sheet_id));
    }
    return obj;
}

QString OAICustomActionNavigationOperation_LocalNavigationConfiguration::getTargetSheetId() const {
    return m_target_sheet_id;
}
void OAICustomActionNavigationOperation_LocalNavigationConfiguration::setTargetSheetId(const QString &target_sheet_id) {
    m_target_sheet_id = target_sheet_id;
    m_target_sheet_id_isSet = true;
}

bool OAICustomActionNavigationOperation_LocalNavigationConfiguration::is_target_sheet_id_Set() const{
    return m_target_sheet_id_isSet;
}

bool OAICustomActionNavigationOperation_LocalNavigationConfiguration::is_target_sheet_id_Valid() const{
    return m_target_sheet_id_isValid;
}

bool OAICustomActionNavigationOperation_LocalNavigationConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_sheet_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomActionNavigationOperation_LocalNavigationConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_target_sheet_id_isValid && true;
}

} // namespace OpenAPI
