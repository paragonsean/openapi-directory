/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIColumnTag.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColumnTag::OAIColumnTag(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColumnTag::OAIColumnTag() {
    this->initializeModel();
}

OAIColumnTag::~OAIColumnTag() {}

void OAIColumnTag::initializeModel() {

    m_column_geographic_role_isSet = false;
    m_column_geographic_role_isValid = false;

    m_column_description_isSet = false;
    m_column_description_isValid = false;
}

void OAIColumnTag::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIColumnTag::fromJsonObject(QJsonObject json) {

    m_column_geographic_role_isValid = ::OpenAPI::fromJsonValue(m_column_geographic_role, json[QString("ColumnGeographicRole")]);
    m_column_geographic_role_isSet = !json[QString("ColumnGeographicRole")].isNull() && m_column_geographic_role_isValid;

    m_column_description_isValid = ::OpenAPI::fromJsonValue(m_column_description, json[QString("ColumnDescription")]);
    m_column_description_isSet = !json[QString("ColumnDescription")].isNull() && m_column_description_isValid;
}

QString OAIColumnTag::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIColumnTag::asJsonObject() const {
    QJsonObject obj;
    if (m_column_geographic_role.isSet()) {
        obj.insert(QString("ColumnGeographicRole"), ::OpenAPI::toJsonValue(m_column_geographic_role));
    }
    if (m_column_description.isSet()) {
        obj.insert(QString("ColumnDescription"), ::OpenAPI::toJsonValue(m_column_description));
    }
    return obj;
}

OAIGeoSpatialDataRole OAIColumnTag::getColumnGeographicRole() const {
    return m_column_geographic_role;
}
void OAIColumnTag::setColumnGeographicRole(const OAIGeoSpatialDataRole &column_geographic_role) {
    m_column_geographic_role = column_geographic_role;
    m_column_geographic_role_isSet = true;
}

bool OAIColumnTag::is_column_geographic_role_Set() const{
    return m_column_geographic_role_isSet;
}

bool OAIColumnTag::is_column_geographic_role_Valid() const{
    return m_column_geographic_role_isValid;
}

OAIColumnTag_ColumnDescription OAIColumnTag::getColumnDescription() const {
    return m_column_description;
}
void OAIColumnTag::setColumnDescription(const OAIColumnTag_ColumnDescription &column_description) {
    m_column_description = column_description;
    m_column_description_isSet = true;
}

bool OAIColumnTag::is_column_description_Set() const{
    return m_column_description_isSet;
}

bool OAIColumnTag::is_column_description_Valid() const{
    return m_column_description_isValid;
}

bool OAIColumnTag::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_geographic_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_description.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIColumnTag::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
