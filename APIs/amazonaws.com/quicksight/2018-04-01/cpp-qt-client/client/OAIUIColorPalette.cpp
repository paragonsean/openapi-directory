/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUIColorPalette.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUIColorPalette::OAIUIColorPalette(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUIColorPalette::OAIUIColorPalette() {
    this->initializeModel();
}

OAIUIColorPalette::~OAIUIColorPalette() {}

void OAIUIColorPalette::initializeModel() {

    m_primary_foreground_isSet = false;
    m_primary_foreground_isValid = false;

    m_primary_background_isSet = false;
    m_primary_background_isValid = false;

    m_secondary_foreground_isSet = false;
    m_secondary_foreground_isValid = false;

    m_secondary_background_isSet = false;
    m_secondary_background_isValid = false;

    m_accent_isSet = false;
    m_accent_isValid = false;

    m_accent_foreground_isSet = false;
    m_accent_foreground_isValid = false;

    m_danger_isSet = false;
    m_danger_isValid = false;

    m_danger_foreground_isSet = false;
    m_danger_foreground_isValid = false;

    m_warning_isSet = false;
    m_warning_isValid = false;

    m_warning_foreground_isSet = false;
    m_warning_foreground_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;

    m_success_foreground_isSet = false;
    m_success_foreground_isValid = false;

    m_dimension_isSet = false;
    m_dimension_isValid = false;

    m_dimension_foreground_isSet = false;
    m_dimension_foreground_isValid = false;

    m_measure_isSet = false;
    m_measure_isValid = false;

    m_measure_foreground_isSet = false;
    m_measure_foreground_isValid = false;
}

void OAIUIColorPalette::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUIColorPalette::fromJsonObject(QJsonObject json) {

    m_primary_foreground_isValid = ::OpenAPI::fromJsonValue(m_primary_foreground, json[QString("PrimaryForeground")]);
    m_primary_foreground_isSet = !json[QString("PrimaryForeground")].isNull() && m_primary_foreground_isValid;

    m_primary_background_isValid = ::OpenAPI::fromJsonValue(m_primary_background, json[QString("PrimaryBackground")]);
    m_primary_background_isSet = !json[QString("PrimaryBackground")].isNull() && m_primary_background_isValid;

    m_secondary_foreground_isValid = ::OpenAPI::fromJsonValue(m_secondary_foreground, json[QString("SecondaryForeground")]);
    m_secondary_foreground_isSet = !json[QString("SecondaryForeground")].isNull() && m_secondary_foreground_isValid;

    m_secondary_background_isValid = ::OpenAPI::fromJsonValue(m_secondary_background, json[QString("SecondaryBackground")]);
    m_secondary_background_isSet = !json[QString("SecondaryBackground")].isNull() && m_secondary_background_isValid;

    m_accent_isValid = ::OpenAPI::fromJsonValue(m_accent, json[QString("Accent")]);
    m_accent_isSet = !json[QString("Accent")].isNull() && m_accent_isValid;

    m_accent_foreground_isValid = ::OpenAPI::fromJsonValue(m_accent_foreground, json[QString("AccentForeground")]);
    m_accent_foreground_isSet = !json[QString("AccentForeground")].isNull() && m_accent_foreground_isValid;

    m_danger_isValid = ::OpenAPI::fromJsonValue(m_danger, json[QString("Danger")]);
    m_danger_isSet = !json[QString("Danger")].isNull() && m_danger_isValid;

    m_danger_foreground_isValid = ::OpenAPI::fromJsonValue(m_danger_foreground, json[QString("DangerForeground")]);
    m_danger_foreground_isSet = !json[QString("DangerForeground")].isNull() && m_danger_foreground_isValid;

    m_warning_isValid = ::OpenAPI::fromJsonValue(m_warning, json[QString("Warning")]);
    m_warning_isSet = !json[QString("Warning")].isNull() && m_warning_isValid;

    m_warning_foreground_isValid = ::OpenAPI::fromJsonValue(m_warning_foreground, json[QString("WarningForeground")]);
    m_warning_foreground_isSet = !json[QString("WarningForeground")].isNull() && m_warning_foreground_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("Success")]);
    m_success_isSet = !json[QString("Success")].isNull() && m_success_isValid;

    m_success_foreground_isValid = ::OpenAPI::fromJsonValue(m_success_foreground, json[QString("SuccessForeground")]);
    m_success_foreground_isSet = !json[QString("SuccessForeground")].isNull() && m_success_foreground_isValid;

    m_dimension_isValid = ::OpenAPI::fromJsonValue(m_dimension, json[QString("Dimension")]);
    m_dimension_isSet = !json[QString("Dimension")].isNull() && m_dimension_isValid;

    m_dimension_foreground_isValid = ::OpenAPI::fromJsonValue(m_dimension_foreground, json[QString("DimensionForeground")]);
    m_dimension_foreground_isSet = !json[QString("DimensionForeground")].isNull() && m_dimension_foreground_isValid;

    m_measure_isValid = ::OpenAPI::fromJsonValue(m_measure, json[QString("Measure")]);
    m_measure_isSet = !json[QString("Measure")].isNull() && m_measure_isValid;

    m_measure_foreground_isValid = ::OpenAPI::fromJsonValue(m_measure_foreground, json[QString("MeasureForeground")]);
    m_measure_foreground_isSet = !json[QString("MeasureForeground")].isNull() && m_measure_foreground_isValid;
}

QString OAIUIColorPalette::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUIColorPalette::asJsonObject() const {
    QJsonObject obj;
    if (m_primary_foreground_isSet) {
        obj.insert(QString("PrimaryForeground"), ::OpenAPI::toJsonValue(m_primary_foreground));
    }
    if (m_primary_background_isSet) {
        obj.insert(QString("PrimaryBackground"), ::OpenAPI::toJsonValue(m_primary_background));
    }
    if (m_secondary_foreground_isSet) {
        obj.insert(QString("SecondaryForeground"), ::OpenAPI::toJsonValue(m_secondary_foreground));
    }
    if (m_secondary_background_isSet) {
        obj.insert(QString("SecondaryBackground"), ::OpenAPI::toJsonValue(m_secondary_background));
    }
    if (m_accent_isSet) {
        obj.insert(QString("Accent"), ::OpenAPI::toJsonValue(m_accent));
    }
    if (m_accent_foreground_isSet) {
        obj.insert(QString("AccentForeground"), ::OpenAPI::toJsonValue(m_accent_foreground));
    }
    if (m_danger_isSet) {
        obj.insert(QString("Danger"), ::OpenAPI::toJsonValue(m_danger));
    }
    if (m_danger_foreground_isSet) {
        obj.insert(QString("DangerForeground"), ::OpenAPI::toJsonValue(m_danger_foreground));
    }
    if (m_warning_isSet) {
        obj.insert(QString("Warning"), ::OpenAPI::toJsonValue(m_warning));
    }
    if (m_warning_foreground_isSet) {
        obj.insert(QString("WarningForeground"), ::OpenAPI::toJsonValue(m_warning_foreground));
    }
    if (m_success_isSet) {
        obj.insert(QString("Success"), ::OpenAPI::toJsonValue(m_success));
    }
    if (m_success_foreground_isSet) {
        obj.insert(QString("SuccessForeground"), ::OpenAPI::toJsonValue(m_success_foreground));
    }
    if (m_dimension_isSet) {
        obj.insert(QString("Dimension"), ::OpenAPI::toJsonValue(m_dimension));
    }
    if (m_dimension_foreground_isSet) {
        obj.insert(QString("DimensionForeground"), ::OpenAPI::toJsonValue(m_dimension_foreground));
    }
    if (m_measure_isSet) {
        obj.insert(QString("Measure"), ::OpenAPI::toJsonValue(m_measure));
    }
    if (m_measure_foreground_isSet) {
        obj.insert(QString("MeasureForeground"), ::OpenAPI::toJsonValue(m_measure_foreground));
    }
    return obj;
}

QString OAIUIColorPalette::getPrimaryForeground() const {
    return m_primary_foreground;
}
void OAIUIColorPalette::setPrimaryForeground(const QString &primary_foreground) {
    m_primary_foreground = primary_foreground;
    m_primary_foreground_isSet = true;
}

bool OAIUIColorPalette::is_primary_foreground_Set() const{
    return m_primary_foreground_isSet;
}

bool OAIUIColorPalette::is_primary_foreground_Valid() const{
    return m_primary_foreground_isValid;
}

QString OAIUIColorPalette::getPrimaryBackground() const {
    return m_primary_background;
}
void OAIUIColorPalette::setPrimaryBackground(const QString &primary_background) {
    m_primary_background = primary_background;
    m_primary_background_isSet = true;
}

bool OAIUIColorPalette::is_primary_background_Set() const{
    return m_primary_background_isSet;
}

bool OAIUIColorPalette::is_primary_background_Valid() const{
    return m_primary_background_isValid;
}

QString OAIUIColorPalette::getSecondaryForeground() const {
    return m_secondary_foreground;
}
void OAIUIColorPalette::setSecondaryForeground(const QString &secondary_foreground) {
    m_secondary_foreground = secondary_foreground;
    m_secondary_foreground_isSet = true;
}

bool OAIUIColorPalette::is_secondary_foreground_Set() const{
    return m_secondary_foreground_isSet;
}

bool OAIUIColorPalette::is_secondary_foreground_Valid() const{
    return m_secondary_foreground_isValid;
}

QString OAIUIColorPalette::getSecondaryBackground() const {
    return m_secondary_background;
}
void OAIUIColorPalette::setSecondaryBackground(const QString &secondary_background) {
    m_secondary_background = secondary_background;
    m_secondary_background_isSet = true;
}

bool OAIUIColorPalette::is_secondary_background_Set() const{
    return m_secondary_background_isSet;
}

bool OAIUIColorPalette::is_secondary_background_Valid() const{
    return m_secondary_background_isValid;
}

QString OAIUIColorPalette::getAccent() const {
    return m_accent;
}
void OAIUIColorPalette::setAccent(const QString &accent) {
    m_accent = accent;
    m_accent_isSet = true;
}

bool OAIUIColorPalette::is_accent_Set() const{
    return m_accent_isSet;
}

bool OAIUIColorPalette::is_accent_Valid() const{
    return m_accent_isValid;
}

QString OAIUIColorPalette::getAccentForeground() const {
    return m_accent_foreground;
}
void OAIUIColorPalette::setAccentForeground(const QString &accent_foreground) {
    m_accent_foreground = accent_foreground;
    m_accent_foreground_isSet = true;
}

bool OAIUIColorPalette::is_accent_foreground_Set() const{
    return m_accent_foreground_isSet;
}

bool OAIUIColorPalette::is_accent_foreground_Valid() const{
    return m_accent_foreground_isValid;
}

QString OAIUIColorPalette::getDanger() const {
    return m_danger;
}
void OAIUIColorPalette::setDanger(const QString &danger) {
    m_danger = danger;
    m_danger_isSet = true;
}

bool OAIUIColorPalette::is_danger_Set() const{
    return m_danger_isSet;
}

bool OAIUIColorPalette::is_danger_Valid() const{
    return m_danger_isValid;
}

QString OAIUIColorPalette::getDangerForeground() const {
    return m_danger_foreground;
}
void OAIUIColorPalette::setDangerForeground(const QString &danger_foreground) {
    m_danger_foreground = danger_foreground;
    m_danger_foreground_isSet = true;
}

bool OAIUIColorPalette::is_danger_foreground_Set() const{
    return m_danger_foreground_isSet;
}

bool OAIUIColorPalette::is_danger_foreground_Valid() const{
    return m_danger_foreground_isValid;
}

QString OAIUIColorPalette::getWarning() const {
    return m_warning;
}
void OAIUIColorPalette::setWarning(const QString &warning) {
    m_warning = warning;
    m_warning_isSet = true;
}

bool OAIUIColorPalette::is_warning_Set() const{
    return m_warning_isSet;
}

bool OAIUIColorPalette::is_warning_Valid() const{
    return m_warning_isValid;
}

QString OAIUIColorPalette::getWarningForeground() const {
    return m_warning_foreground;
}
void OAIUIColorPalette::setWarningForeground(const QString &warning_foreground) {
    m_warning_foreground = warning_foreground;
    m_warning_foreground_isSet = true;
}

bool OAIUIColorPalette::is_warning_foreground_Set() const{
    return m_warning_foreground_isSet;
}

bool OAIUIColorPalette::is_warning_foreground_Valid() const{
    return m_warning_foreground_isValid;
}

QString OAIUIColorPalette::getSuccess() const {
    return m_success;
}
void OAIUIColorPalette::setSuccess(const QString &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAIUIColorPalette::is_success_Set() const{
    return m_success_isSet;
}

bool OAIUIColorPalette::is_success_Valid() const{
    return m_success_isValid;
}

QString OAIUIColorPalette::getSuccessForeground() const {
    return m_success_foreground;
}
void OAIUIColorPalette::setSuccessForeground(const QString &success_foreground) {
    m_success_foreground = success_foreground;
    m_success_foreground_isSet = true;
}

bool OAIUIColorPalette::is_success_foreground_Set() const{
    return m_success_foreground_isSet;
}

bool OAIUIColorPalette::is_success_foreground_Valid() const{
    return m_success_foreground_isValid;
}

QString OAIUIColorPalette::getDimension() const {
    return m_dimension;
}
void OAIUIColorPalette::setDimension(const QString &dimension) {
    m_dimension = dimension;
    m_dimension_isSet = true;
}

bool OAIUIColorPalette::is_dimension_Set() const{
    return m_dimension_isSet;
}

bool OAIUIColorPalette::is_dimension_Valid() const{
    return m_dimension_isValid;
}

QString OAIUIColorPalette::getDimensionForeground() const {
    return m_dimension_foreground;
}
void OAIUIColorPalette::setDimensionForeground(const QString &dimension_foreground) {
    m_dimension_foreground = dimension_foreground;
    m_dimension_foreground_isSet = true;
}

bool OAIUIColorPalette::is_dimension_foreground_Set() const{
    return m_dimension_foreground_isSet;
}

bool OAIUIColorPalette::is_dimension_foreground_Valid() const{
    return m_dimension_foreground_isValid;
}

QString OAIUIColorPalette::getMeasure() const {
    return m_measure;
}
void OAIUIColorPalette::setMeasure(const QString &measure) {
    m_measure = measure;
    m_measure_isSet = true;
}

bool OAIUIColorPalette::is_measure_Set() const{
    return m_measure_isSet;
}

bool OAIUIColorPalette::is_measure_Valid() const{
    return m_measure_isValid;
}

QString OAIUIColorPalette::getMeasureForeground() const {
    return m_measure_foreground;
}
void OAIUIColorPalette::setMeasureForeground(const QString &measure_foreground) {
    m_measure_foreground = measure_foreground;
    m_measure_foreground_isSet = true;
}

bool OAIUIColorPalette::is_measure_foreground_Set() const{
    return m_measure_foreground_isSet;
}

bool OAIUIColorPalette::is_measure_foreground_Valid() const{
    return m_measure_foreground_isValid;
}

bool OAIUIColorPalette::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_primary_foreground_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_background_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_foreground_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_background_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accent_foreground_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_danger_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_danger_foreground_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warning_foreground_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_foreground_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_foreground_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measure_foreground_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUIColorPalette::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
