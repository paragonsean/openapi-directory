/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopicFilter_RelativeDateFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopicFilter_RelativeDateFilter::OAITopicFilter_RelativeDateFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopicFilter_RelativeDateFilter::OAITopicFilter_RelativeDateFilter() {
    this->initializeModel();
}

OAITopicFilter_RelativeDateFilter::~OAITopicFilter_RelativeDateFilter() {}

void OAITopicFilter_RelativeDateFilter::initializeModel() {

    m_time_granularity_isSet = false;
    m_time_granularity_isValid = false;

    m_relative_date_filter_function_isSet = false;
    m_relative_date_filter_function_isValid = false;

    m_constant_isSet = false;
    m_constant_isValid = false;
}

void OAITopicFilter_RelativeDateFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopicFilter_RelativeDateFilter::fromJsonObject(QJsonObject json) {

    m_time_granularity_isValid = ::OpenAPI::fromJsonValue(m_time_granularity, json[QString("TimeGranularity")]);
    m_time_granularity_isSet = !json[QString("TimeGranularity")].isNull() && m_time_granularity_isValid;

    m_relative_date_filter_function_isValid = ::OpenAPI::fromJsonValue(m_relative_date_filter_function, json[QString("RelativeDateFilterFunction")]);
    m_relative_date_filter_function_isSet = !json[QString("RelativeDateFilterFunction")].isNull() && m_relative_date_filter_function_isValid;

    m_constant_isValid = ::OpenAPI::fromJsonValue(m_constant, json[QString("Constant")]);
    m_constant_isSet = !json[QString("Constant")].isNull() && m_constant_isValid;
}

QString OAITopicFilter_RelativeDateFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopicFilter_RelativeDateFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_time_granularity.isSet()) {
        obj.insert(QString("TimeGranularity"), ::OpenAPI::toJsonValue(m_time_granularity));
    }
    if (m_relative_date_filter_function.isSet()) {
        obj.insert(QString("RelativeDateFilterFunction"), ::OpenAPI::toJsonValue(m_relative_date_filter_function));
    }
    if (m_constant.isSet()) {
        obj.insert(QString("Constant"), ::OpenAPI::toJsonValue(m_constant));
    }
    return obj;
}

OAITopicTimeGranularity OAITopicFilter_RelativeDateFilter::getTimeGranularity() const {
    return m_time_granularity;
}
void OAITopicFilter_RelativeDateFilter::setTimeGranularity(const OAITopicTimeGranularity &time_granularity) {
    m_time_granularity = time_granularity;
    m_time_granularity_isSet = true;
}

bool OAITopicFilter_RelativeDateFilter::is_time_granularity_Set() const{
    return m_time_granularity_isSet;
}

bool OAITopicFilter_RelativeDateFilter::is_time_granularity_Valid() const{
    return m_time_granularity_isValid;
}

OAITopicRelativeDateFilterFunction OAITopicFilter_RelativeDateFilter::getRelativeDateFilterFunction() const {
    return m_relative_date_filter_function;
}
void OAITopicFilter_RelativeDateFilter::setRelativeDateFilterFunction(const OAITopicRelativeDateFilterFunction &relative_date_filter_function) {
    m_relative_date_filter_function = relative_date_filter_function;
    m_relative_date_filter_function_isSet = true;
}

bool OAITopicFilter_RelativeDateFilter::is_relative_date_filter_function_Set() const{
    return m_relative_date_filter_function_isSet;
}

bool OAITopicFilter_RelativeDateFilter::is_relative_date_filter_function_Valid() const{
    return m_relative_date_filter_function_isValid;
}

OAITopicRelativeDateFilter_Constant OAITopicFilter_RelativeDateFilter::getConstant() const {
    return m_constant;
}
void OAITopicFilter_RelativeDateFilter::setConstant(const OAITopicRelativeDateFilter_Constant &constant) {
    m_constant = constant;
    m_constant_isSet = true;
}

bool OAITopicFilter_RelativeDateFilter::is_constant_Set() const{
    return m_constant_isSet;
}

bool OAITopicFilter_RelativeDateFilter::is_constant_Valid() const{
    return m_constant_isValid;
}

bool OAITopicFilter_RelativeDateFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_time_granularity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_date_filter_function.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_constant.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopicFilter_RelativeDateFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
