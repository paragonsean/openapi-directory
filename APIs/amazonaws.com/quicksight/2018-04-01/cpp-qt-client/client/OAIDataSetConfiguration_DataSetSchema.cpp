/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSetConfiguration_DataSetSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSetConfiguration_DataSetSchema::OAIDataSetConfiguration_DataSetSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSetConfiguration_DataSetSchema::OAIDataSetConfiguration_DataSetSchema() {
    this->initializeModel();
}

OAIDataSetConfiguration_DataSetSchema::~OAIDataSetConfiguration_DataSetSchema() {}

void OAIDataSetConfiguration_DataSetSchema::initializeModel() {

    m_column_schema_list_isSet = false;
    m_column_schema_list_isValid = false;
}

void OAIDataSetConfiguration_DataSetSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSetConfiguration_DataSetSchema::fromJsonObject(QJsonObject json) {

    m_column_schema_list_isValid = ::OpenAPI::fromJsonValue(m_column_schema_list, json[QString("ColumnSchemaList")]);
    m_column_schema_list_isSet = !json[QString("ColumnSchemaList")].isNull() && m_column_schema_list_isValid;
}

QString OAIDataSetConfiguration_DataSetSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSetConfiguration_DataSetSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_column_schema_list.isSet()) {
        obj.insert(QString("ColumnSchemaList"), ::OpenAPI::toJsonValue(m_column_schema_list));
    }
    return obj;
}

QList OAIDataSetConfiguration_DataSetSchema::getColumnSchemaList() const {
    return m_column_schema_list;
}
void OAIDataSetConfiguration_DataSetSchema::setColumnSchemaList(const QList &column_schema_list) {
    m_column_schema_list = column_schema_list;
    m_column_schema_list_isSet = true;
}

bool OAIDataSetConfiguration_DataSetSchema::is_column_schema_list_Set() const{
    return m_column_schema_list_isSet;
}

bool OAIDataSetConfiguration_DataSetSchema::is_column_schema_list_Valid() const{
    return m_column_schema_list_isValid;
}

bool OAIDataSetConfiguration_DataSetSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_schema_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSetConfiguration_DataSetSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
