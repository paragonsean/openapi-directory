/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateThemeRequest_Configuration.h
 *
 * 
 */

#ifndef OAICreateThemeRequest_Configuration_H
#define OAICreateThemeRequest_Configuration_H

#include <QJsonObject>

#include "OAITypography.h"
#include "OAIUpdateTheme_request_Configuration_DataColorPalette.h"
#include "OAIUpdateTheme_request_Configuration_Sheet.h"
#include "OAIUpdateTheme_request_Configuration_UIColorPalette.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUpdateTheme_request_Configuration_DataColorPalette;
class OAIUpdateTheme_request_Configuration_UIColorPalette;
class OAIUpdateTheme_request_Configuration_Sheet;
class OAITypography;

class OAICreateThemeRequest_Configuration : public OAIObject {
public:
    OAICreateThemeRequest_Configuration();
    OAICreateThemeRequest_Configuration(QString json);
    ~OAICreateThemeRequest_Configuration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIUpdateTheme_request_Configuration_DataColorPalette getDataColorPalette() const;
    void setDataColorPalette(const OAIUpdateTheme_request_Configuration_DataColorPalette &data_color_palette);
    bool is_data_color_palette_Set() const;
    bool is_data_color_palette_Valid() const;

    OAIUpdateTheme_request_Configuration_UIColorPalette getUiColorPalette() const;
    void setUiColorPalette(const OAIUpdateTheme_request_Configuration_UIColorPalette &ui_color_palette);
    bool is_ui_color_palette_Set() const;
    bool is_ui_color_palette_Valid() const;

    OAIUpdateTheme_request_Configuration_Sheet getSheet() const;
    void setSheet(const OAIUpdateTheme_request_Configuration_Sheet &sheet);
    bool is_sheet_Set() const;
    bool is_sheet_Valid() const;

    OAITypography getTypography() const;
    void setTypography(const OAITypography &typography);
    bool is_typography_Set() const;
    bool is_typography_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIUpdateTheme_request_Configuration_DataColorPalette m_data_color_palette;
    bool m_data_color_palette_isSet;
    bool m_data_color_palette_isValid;

    OAIUpdateTheme_request_Configuration_UIColorPalette m_ui_color_palette;
    bool m_ui_color_palette_isSet;
    bool m_ui_color_palette_isValid;

    OAIUpdateTheme_request_Configuration_Sheet m_sheet;
    bool m_sheet_isSet;
    bool m_sheet_isValid;

    OAITypography m_typography;
    bool m_typography_isSet;
    bool m_typography_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateThemeRequest_Configuration)

#endif // OAICreateThemeRequest_Configuration_H
