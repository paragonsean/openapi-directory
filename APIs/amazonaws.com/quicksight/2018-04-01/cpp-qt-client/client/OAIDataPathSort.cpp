/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataPathSort.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataPathSort::OAIDataPathSort(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataPathSort::OAIDataPathSort() {
    this->initializeModel();
}

OAIDataPathSort::~OAIDataPathSort() {}

void OAIDataPathSort::initializeModel() {

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_sort_paths_isSet = false;
    m_sort_paths_isValid = false;
}

void OAIDataPathSort::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataPathSort::fromJsonObject(QJsonObject json) {

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("Direction")]);
    m_direction_isSet = !json[QString("Direction")].isNull() && m_direction_isValid;

    m_sort_paths_isValid = ::OpenAPI::fromJsonValue(m_sort_paths, json[QString("SortPaths")]);
    m_sort_paths_isSet = !json[QString("SortPaths")].isNull() && m_sort_paths_isValid;
}

QString OAIDataPathSort::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataPathSort::asJsonObject() const {
    QJsonObject obj;
    if (m_direction.isSet()) {
        obj.insert(QString("Direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_sort_paths.isSet()) {
        obj.insert(QString("SortPaths"), ::OpenAPI::toJsonValue(m_sort_paths));
    }
    return obj;
}

OAISortDirection OAIDataPathSort::getDirection() const {
    return m_direction;
}
void OAIDataPathSort::setDirection(const OAISortDirection &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIDataPathSort::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIDataPathSort::is_direction_Valid() const{
    return m_direction_isValid;
}

QList OAIDataPathSort::getSortPaths() const {
    return m_sort_paths;
}
void OAIDataPathSort::setSortPaths(const QList &sort_paths) {
    m_sort_paths = sort_paths;
    m_sort_paths_isSet = true;
}

bool OAIDataPathSort::is_sort_paths_Set() const{
    return m_sort_paths_isSet;
}

bool OAIDataPathSort::is_sort_paths_Valid() const{
    return m_sort_paths_isValid;
}

bool OAIDataPathSort::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_paths.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataPathSort::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_direction_isValid && m_sort_paths_isValid && true;
}

} // namespace OpenAPI
