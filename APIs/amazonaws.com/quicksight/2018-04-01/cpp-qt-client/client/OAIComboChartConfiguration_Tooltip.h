/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComboChartConfiguration_Tooltip.h
 *
 * 
 */

#ifndef OAIComboChartConfiguration_Tooltip_H
#define OAIComboChartConfiguration_Tooltip_H

#include <QJsonObject>

#include "OAISelectedTooltipType.h"
#include "OAITooltipOptions_FieldBasedTooltip.h"
#include "OAIVisibility.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITooltipOptions_FieldBasedTooltip;

class OAIComboChartConfiguration_Tooltip : public OAIObject {
public:
    OAIComboChartConfiguration_Tooltip();
    OAIComboChartConfiguration_Tooltip(QString json);
    ~OAIComboChartConfiguration_Tooltip() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIVisibility getTooltipVisibility() const;
    void setTooltipVisibility(const OAIVisibility &tooltip_visibility);
    bool is_tooltip_visibility_Set() const;
    bool is_tooltip_visibility_Valid() const;

    OAISelectedTooltipType getSelectedTooltipType() const;
    void setSelectedTooltipType(const OAISelectedTooltipType &selected_tooltip_type);
    bool is_selected_tooltip_type_Set() const;
    bool is_selected_tooltip_type_Valid() const;

    OAITooltipOptions_FieldBasedTooltip getFieldBasedTooltip() const;
    void setFieldBasedTooltip(const OAITooltipOptions_FieldBasedTooltip &field_based_tooltip);
    bool is_field_based_tooltip_Set() const;
    bool is_field_based_tooltip_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIVisibility m_tooltip_visibility;
    bool m_tooltip_visibility_isSet;
    bool m_tooltip_visibility_isValid;

    OAISelectedTooltipType m_selected_tooltip_type;
    bool m_selected_tooltip_type_isSet;
    bool m_selected_tooltip_type_isValid;

    OAITooltipOptions_FieldBasedTooltip m_field_based_tooltip;
    bool m_field_based_tooltip_isSet;
    bool m_field_based_tooltip_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIComboChartConfiguration_Tooltip)

#endif // OAIComboChartConfiguration_Tooltip_H
