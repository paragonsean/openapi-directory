/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateThemeRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateThemeRequest::OAICreateThemeRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateThemeRequest::OAICreateThemeRequest() {
    this->initializeModel();
}

OAICreateThemeRequest::~OAICreateThemeRequest() {}

void OAICreateThemeRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_base_theme_id_isSet = false;
    m_base_theme_id_isValid = false;

    m_version_description_isSet = false;
    m_version_description_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateThemeRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateThemeRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_base_theme_id_isValid = ::OpenAPI::fromJsonValue(m_base_theme_id, json[QString("BaseThemeId")]);
    m_base_theme_id_isSet = !json[QString("BaseThemeId")].isNull() && m_base_theme_id_isValid;

    m_version_description_isValid = ::OpenAPI::fromJsonValue(m_version_description, json[QString("VersionDescription")]);
    m_version_description_isSet = !json[QString("VersionDescription")].isNull() && m_version_description_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("Configuration")]);
    m_configuration_isSet = !json[QString("Configuration")].isNull() && m_configuration_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("Permissions")]);
    m_permissions_isSet = !json[QString("Permissions")].isNull() && m_permissions_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateThemeRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateThemeRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_base_theme_id_isSet) {
        obj.insert(QString("BaseThemeId"), ::OpenAPI::toJsonValue(m_base_theme_id));
    }
    if (m_version_description_isSet) {
        obj.insert(QString("VersionDescription"), ::OpenAPI::toJsonValue(m_version_description));
    }
    if (m_configuration.isSet()) {
        obj.insert(QString("Configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_permissions.isSet()) {
        obj.insert(QString("Permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateThemeRequest::getName() const {
    return m_name;
}
void OAICreateThemeRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateThemeRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateThemeRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateThemeRequest::getBaseThemeId() const {
    return m_base_theme_id;
}
void OAICreateThemeRequest::setBaseThemeId(const QString &base_theme_id) {
    m_base_theme_id = base_theme_id;
    m_base_theme_id_isSet = true;
}

bool OAICreateThemeRequest::is_base_theme_id_Set() const{
    return m_base_theme_id_isSet;
}

bool OAICreateThemeRequest::is_base_theme_id_Valid() const{
    return m_base_theme_id_isValid;
}

QString OAICreateThemeRequest::getVersionDescription() const {
    return m_version_description;
}
void OAICreateThemeRequest::setVersionDescription(const QString &version_description) {
    m_version_description = version_description;
    m_version_description_isSet = true;
}

bool OAICreateThemeRequest::is_version_description_Set() const{
    return m_version_description_isSet;
}

bool OAICreateThemeRequest::is_version_description_Valid() const{
    return m_version_description_isValid;
}

OAICreateThemeRequest_Configuration OAICreateThemeRequest::getConfiguration() const {
    return m_configuration;
}
void OAICreateThemeRequest::setConfiguration(const OAICreateThemeRequest_Configuration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAICreateThemeRequest::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAICreateThemeRequest::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QList OAICreateThemeRequest::getPermissions() const {
    return m_permissions;
}
void OAICreateThemeRequest::setPermissions(const QList &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAICreateThemeRequest::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAICreateThemeRequest::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QList OAICreateThemeRequest::getTags() const {
    return m_tags;
}
void OAICreateThemeRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateThemeRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateThemeRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateThemeRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_theme_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateThemeRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_base_theme_id_isValid && m_configuration_isValid && true;
}

} // namespace OpenAPI
