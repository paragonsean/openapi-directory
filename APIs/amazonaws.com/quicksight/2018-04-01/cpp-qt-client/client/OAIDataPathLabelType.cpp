/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataPathLabelType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataPathLabelType::OAIDataPathLabelType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataPathLabelType::OAIDataPathLabelType() {
    this->initializeModel();
}

OAIDataPathLabelType::~OAIDataPathLabelType() {}

void OAIDataPathLabelType::initializeModel() {

    m_field_id_isSet = false;
    m_field_id_isValid = false;

    m_field_value_isSet = false;
    m_field_value_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIDataPathLabelType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataPathLabelType::fromJsonObject(QJsonObject json) {

    m_field_id_isValid = ::OpenAPI::fromJsonValue(m_field_id, json[QString("FieldId")]);
    m_field_id_isSet = !json[QString("FieldId")].isNull() && m_field_id_isValid;

    m_field_value_isValid = ::OpenAPI::fromJsonValue(m_field_value, json[QString("FieldValue")]);
    m_field_value_isSet = !json[QString("FieldValue")].isNull() && m_field_value_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("Visibility")]);
    m_visibility_isSet = !json[QString("Visibility")].isNull() && m_visibility_isValid;
}

QString OAIDataPathLabelType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataPathLabelType::asJsonObject() const {
    QJsonObject obj;
    if (m_field_id_isSet) {
        obj.insert(QString("FieldId"), ::OpenAPI::toJsonValue(m_field_id));
    }
    if (m_field_value_isSet) {
        obj.insert(QString("FieldValue"), ::OpenAPI::toJsonValue(m_field_value));
    }
    if (m_visibility.isSet()) {
        obj.insert(QString("Visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

QString OAIDataPathLabelType::getFieldId() const {
    return m_field_id;
}
void OAIDataPathLabelType::setFieldId(const QString &field_id) {
    m_field_id = field_id;
    m_field_id_isSet = true;
}

bool OAIDataPathLabelType::is_field_id_Set() const{
    return m_field_id_isSet;
}

bool OAIDataPathLabelType::is_field_id_Valid() const{
    return m_field_id_isValid;
}

QString OAIDataPathLabelType::getFieldValue() const {
    return m_field_value;
}
void OAIDataPathLabelType::setFieldValue(const QString &field_value) {
    m_field_value = field_value;
    m_field_value_isSet = true;
}

bool OAIDataPathLabelType::is_field_value_Set() const{
    return m_field_value_isSet;
}

bool OAIDataPathLabelType::is_field_value_Valid() const{
    return m_field_value_isValid;
}

OAIVisibility OAIDataPathLabelType::getVisibility() const {
    return m_visibility;
}
void OAIDataPathLabelType::setVisibility(const OAIVisibility &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIDataPathLabelType::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIDataPathLabelType::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIDataPathLabelType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataPathLabelType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
