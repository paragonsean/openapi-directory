/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIncrementalRefresh_LookbackWindow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIncrementalRefresh_LookbackWindow::OAIIncrementalRefresh_LookbackWindow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIncrementalRefresh_LookbackWindow::OAIIncrementalRefresh_LookbackWindow() {
    this->initializeModel();
}

OAIIncrementalRefresh_LookbackWindow::~OAIIncrementalRefresh_LookbackWindow() {}

void OAIIncrementalRefresh_LookbackWindow::initializeModel() {

    m_column_name_isSet = false;
    m_column_name_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_size_unit_isSet = false;
    m_size_unit_isValid = false;
}

void OAIIncrementalRefresh_LookbackWindow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIncrementalRefresh_LookbackWindow::fromJsonObject(QJsonObject json) {

    m_column_name_isValid = ::OpenAPI::fromJsonValue(m_column_name, json[QString("ColumnName")]);
    m_column_name_isSet = !json[QString("ColumnName")].isNull() && m_column_name_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("Size")]);
    m_size_isSet = !json[QString("Size")].isNull() && m_size_isValid;

    m_size_unit_isValid = ::OpenAPI::fromJsonValue(m_size_unit, json[QString("SizeUnit")]);
    m_size_unit_isSet = !json[QString("SizeUnit")].isNull() && m_size_unit_isValid;
}

QString OAIIncrementalRefresh_LookbackWindow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIncrementalRefresh_LookbackWindow::asJsonObject() const {
    QJsonObject obj;
    if (m_column_name_isSet) {
        obj.insert(QString("ColumnName"), ::OpenAPI::toJsonValue(m_column_name));
    }
    if (m_size_isSet) {
        obj.insert(QString("Size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_size_unit.isSet()) {
        obj.insert(QString("SizeUnit"), ::OpenAPI::toJsonValue(m_size_unit));
    }
    return obj;
}

QString OAIIncrementalRefresh_LookbackWindow::getColumnName() const {
    return m_column_name;
}
void OAIIncrementalRefresh_LookbackWindow::setColumnName(const QString &column_name) {
    m_column_name = column_name;
    m_column_name_isSet = true;
}

bool OAIIncrementalRefresh_LookbackWindow::is_column_name_Set() const{
    return m_column_name_isSet;
}

bool OAIIncrementalRefresh_LookbackWindow::is_column_name_Valid() const{
    return m_column_name_isValid;
}

qint32 OAIIncrementalRefresh_LookbackWindow::getSize() const {
    return m_size;
}
void OAIIncrementalRefresh_LookbackWindow::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIIncrementalRefresh_LookbackWindow::is_size_Set() const{
    return m_size_isSet;
}

bool OAIIncrementalRefresh_LookbackWindow::is_size_Valid() const{
    return m_size_isValid;
}

OAILookbackWindowSizeUnit OAIIncrementalRefresh_LookbackWindow::getSizeUnit() const {
    return m_size_unit;
}
void OAIIncrementalRefresh_LookbackWindow::setSizeUnit(const OAILookbackWindowSizeUnit &size_unit) {
    m_size_unit = size_unit;
    m_size_unit_isSet = true;
}

bool OAIIncrementalRefresh_LookbackWindow::is_size_unit_Set() const{
    return m_size_unit_isSet;
}

bool OAIIncrementalRefresh_LookbackWindow::is_size_unit_Valid() const{
    return m_size_unit_isValid;
}

bool OAIIncrementalRefresh_LookbackWindow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIncrementalRefresh_LookbackWindow::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_column_name_isValid && m_size_isValid && m_size_unit_isValid && true;
}

} // namespace OpenAPI
