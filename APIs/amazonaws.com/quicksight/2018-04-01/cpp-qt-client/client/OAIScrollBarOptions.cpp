/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScrollBarOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScrollBarOptions::OAIScrollBarOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScrollBarOptions::OAIScrollBarOptions() {
    this->initializeModel();
}

OAIScrollBarOptions::~OAIScrollBarOptions() {}

void OAIScrollBarOptions::initializeModel() {

    m_visibility_isSet = false;
    m_visibility_isValid = false;

    m_visible_range_isSet = false;
    m_visible_range_isValid = false;
}

void OAIScrollBarOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScrollBarOptions::fromJsonObject(QJsonObject json) {

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("Visibility")]);
    m_visibility_isSet = !json[QString("Visibility")].isNull() && m_visibility_isValid;

    m_visible_range_isValid = ::OpenAPI::fromJsonValue(m_visible_range, json[QString("VisibleRange")]);
    m_visible_range_isSet = !json[QString("VisibleRange")].isNull() && m_visible_range_isValid;
}

QString OAIScrollBarOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScrollBarOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_visibility.isSet()) {
        obj.insert(QString("Visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    if (m_visible_range.isSet()) {
        obj.insert(QString("VisibleRange"), ::OpenAPI::toJsonValue(m_visible_range));
    }
    return obj;
}

OAIVisibility OAIScrollBarOptions::getVisibility() const {
    return m_visibility;
}
void OAIScrollBarOptions::setVisibility(const OAIVisibility &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIScrollBarOptions::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIScrollBarOptions::is_visibility_Valid() const{
    return m_visibility_isValid;
}

OAIScrollBarOptions_VisibleRange OAIScrollBarOptions::getVisibleRange() const {
    return m_visible_range;
}
void OAIScrollBarOptions::setVisibleRange(const OAIScrollBarOptions_VisibleRange &visible_range) {
    m_visible_range = visible_range;
    m_visible_range_isSet = true;
}

bool OAIScrollBarOptions::is_visible_range_Set() const{
    return m_visible_range_isSet;
}

bool OAIScrollBarOptions::is_visible_range_Valid() const{
    return m_visible_range_isValid;
}

bool OAIScrollBarOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_range.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScrollBarOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
