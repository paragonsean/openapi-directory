/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchFoldersRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchFoldersRequest::OAISearchFoldersRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchFoldersRequest::OAISearchFoldersRequest() {
    this->initializeModel();
}

OAISearchFoldersRequest::~OAISearchFoldersRequest() {}

void OAISearchFoldersRequest::initializeModel() {

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAISearchFoldersRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchFoldersRequest::fromJsonObject(QJsonObject json) {

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("Filters")]);
    m_filters_isSet = !json[QString("Filters")].isNull() && m_filters_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAISearchFoldersRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchFoldersRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_filters.isSet()) {
        obj.insert(QString("Filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QList OAISearchFoldersRequest::getFilters() const {
    return m_filters;
}
void OAISearchFoldersRequest::setFilters(const QList &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAISearchFoldersRequest::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAISearchFoldersRequest::is_filters_Valid() const{
    return m_filters_isValid;
}

QString OAISearchFoldersRequest::getNextToken() const {
    return m_next_token;
}
void OAISearchFoldersRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAISearchFoldersRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAISearchFoldersRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAISearchFoldersRequest::getMaxResults() const {
    return m_max_results;
}
void OAISearchFoldersRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAISearchFoldersRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAISearchFoldersRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAISearchFoldersRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchFoldersRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_filters_isValid && true;
}

} // namespace OpenAPI
