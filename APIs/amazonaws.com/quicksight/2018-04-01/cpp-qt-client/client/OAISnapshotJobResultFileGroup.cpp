/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnapshotJobResultFileGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnapshotJobResultFileGroup::OAISnapshotJobResultFileGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnapshotJobResultFileGroup::OAISnapshotJobResultFileGroup() {
    this->initializeModel();
}

OAISnapshotJobResultFileGroup::~OAISnapshotJobResultFileGroup() {}

void OAISnapshotJobResultFileGroup::initializeModel() {

    m_files_isSet = false;
    m_files_isValid = false;

    m_s3_results_isSet = false;
    m_s3_results_isValid = false;
}

void OAISnapshotJobResultFileGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnapshotJobResultFileGroup::fromJsonObject(QJsonObject json) {

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("Files")]);
    m_files_isSet = !json[QString("Files")].isNull() && m_files_isValid;

    m_s3_results_isValid = ::OpenAPI::fromJsonValue(m_s3_results, json[QString("S3Results")]);
    m_s3_results_isSet = !json[QString("S3Results")].isNull() && m_s3_results_isValid;
}

QString OAISnapshotJobResultFileGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnapshotJobResultFileGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_files.isSet()) {
        obj.insert(QString("Files"), ::OpenAPI::toJsonValue(m_files));
    }
    if (m_s3_results.isSet()) {
        obj.insert(QString("S3Results"), ::OpenAPI::toJsonValue(m_s3_results));
    }
    return obj;
}

QList OAISnapshotJobResultFileGroup::getFiles() const {
    return m_files;
}
void OAISnapshotJobResultFileGroup::setFiles(const QList &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAISnapshotJobResultFileGroup::is_files_Set() const{
    return m_files_isSet;
}

bool OAISnapshotJobResultFileGroup::is_files_Valid() const{
    return m_files_isValid;
}

QList OAISnapshotJobResultFileGroup::getS3Results() const {
    return m_s3_results;
}
void OAISnapshotJobResultFileGroup::setS3Results(const QList &s3_results) {
    m_s3_results = s3_results;
    m_s3_results_isSet = true;
}

bool OAISnapshotJobResultFileGroup::is_s3_results_Set() const{
    return m_s3_results_isSet;
}

bool OAISnapshotJobResultFileGroup::is_s3_results_Valid() const{
    return m_s3_results_isValid;
}

bool OAISnapshotJobResultFileGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_files.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_results.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnapshotJobResultFileGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
