/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSetSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSetSchema::OAIDataSetSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSetSchema::OAIDataSetSchema() {
    this->initializeModel();
}

OAIDataSetSchema::~OAIDataSetSchema() {}

void OAIDataSetSchema::initializeModel() {

    m_column_schema_list_isSet = false;
    m_column_schema_list_isValid = false;
}

void OAIDataSetSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSetSchema::fromJsonObject(QJsonObject json) {

    m_column_schema_list_isValid = ::OpenAPI::fromJsonValue(m_column_schema_list, json[QString("ColumnSchemaList")]);
    m_column_schema_list_isSet = !json[QString("ColumnSchemaList")].isNull() && m_column_schema_list_isValid;
}

QString OAIDataSetSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSetSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_column_schema_list.isSet()) {
        obj.insert(QString("ColumnSchemaList"), ::OpenAPI::toJsonValue(m_column_schema_list));
    }
    return obj;
}

QList OAIDataSetSchema::getColumnSchemaList() const {
    return m_column_schema_list;
}
void OAIDataSetSchema::setColumnSchemaList(const QList &column_schema_list) {
    m_column_schema_list = column_schema_list;
    m_column_schema_list_isSet = true;
}

bool OAIDataSetSchema::is_column_schema_list_Set() const{
    return m_column_schema_list_isSet;
}

bool OAIDataSetSchema::is_column_schema_list_Valid() const{
    return m_column_schema_list_isValid;
}

bool OAIDataSetSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_schema_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSetSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
