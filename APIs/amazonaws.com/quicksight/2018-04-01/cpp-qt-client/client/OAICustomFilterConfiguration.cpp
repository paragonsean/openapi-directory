/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomFilterConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomFilterConfiguration::OAICustomFilterConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomFilterConfiguration::OAICustomFilterConfiguration() {
    this->initializeModel();
}

OAICustomFilterConfiguration::~OAICustomFilterConfiguration() {}

void OAICustomFilterConfiguration::initializeModel() {

    m_match_operator_isSet = false;
    m_match_operator_isValid = false;

    m_category_value_isSet = false;
    m_category_value_isValid = false;

    m_select_all_options_isSet = false;
    m_select_all_options_isValid = false;

    m_parameter_name_isSet = false;
    m_parameter_name_isValid = false;

    m_null_option_isSet = false;
    m_null_option_isValid = false;
}

void OAICustomFilterConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomFilterConfiguration::fromJsonObject(QJsonObject json) {

    m_match_operator_isValid = ::OpenAPI::fromJsonValue(m_match_operator, json[QString("MatchOperator")]);
    m_match_operator_isSet = !json[QString("MatchOperator")].isNull() && m_match_operator_isValid;

    m_category_value_isValid = ::OpenAPI::fromJsonValue(m_category_value, json[QString("CategoryValue")]);
    m_category_value_isSet = !json[QString("CategoryValue")].isNull() && m_category_value_isValid;

    m_select_all_options_isValid = ::OpenAPI::fromJsonValue(m_select_all_options, json[QString("SelectAllOptions")]);
    m_select_all_options_isSet = !json[QString("SelectAllOptions")].isNull() && m_select_all_options_isValid;

    m_parameter_name_isValid = ::OpenAPI::fromJsonValue(m_parameter_name, json[QString("ParameterName")]);
    m_parameter_name_isSet = !json[QString("ParameterName")].isNull() && m_parameter_name_isValid;

    m_null_option_isValid = ::OpenAPI::fromJsonValue(m_null_option, json[QString("NullOption")]);
    m_null_option_isSet = !json[QString("NullOption")].isNull() && m_null_option_isValid;
}

QString OAICustomFilterConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomFilterConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_match_operator.isSet()) {
        obj.insert(QString("MatchOperator"), ::OpenAPI::toJsonValue(m_match_operator));
    }
    if (m_category_value_isSet) {
        obj.insert(QString("CategoryValue"), ::OpenAPI::toJsonValue(m_category_value));
    }
    if (m_select_all_options.isSet()) {
        obj.insert(QString("SelectAllOptions"), ::OpenAPI::toJsonValue(m_select_all_options));
    }
    if (m_parameter_name_isSet) {
        obj.insert(QString("ParameterName"), ::OpenAPI::toJsonValue(m_parameter_name));
    }
    if (m_null_option.isSet()) {
        obj.insert(QString("NullOption"), ::OpenAPI::toJsonValue(m_null_option));
    }
    return obj;
}

OAICategoryFilterMatchOperator OAICustomFilterConfiguration::getMatchOperator() const {
    return m_match_operator;
}
void OAICustomFilterConfiguration::setMatchOperator(const OAICategoryFilterMatchOperator &match_operator) {
    m_match_operator = match_operator;
    m_match_operator_isSet = true;
}

bool OAICustomFilterConfiguration::is_match_operator_Set() const{
    return m_match_operator_isSet;
}

bool OAICustomFilterConfiguration::is_match_operator_Valid() const{
    return m_match_operator_isValid;
}

QString OAICustomFilterConfiguration::getCategoryValue() const {
    return m_category_value;
}
void OAICustomFilterConfiguration::setCategoryValue(const QString &category_value) {
    m_category_value = category_value;
    m_category_value_isSet = true;
}

bool OAICustomFilterConfiguration::is_category_value_Set() const{
    return m_category_value_isSet;
}

bool OAICustomFilterConfiguration::is_category_value_Valid() const{
    return m_category_value_isValid;
}

OAICategoryFilterSelectAllOptions OAICustomFilterConfiguration::getSelectAllOptions() const {
    return m_select_all_options;
}
void OAICustomFilterConfiguration::setSelectAllOptions(const OAICategoryFilterSelectAllOptions &select_all_options) {
    m_select_all_options = select_all_options;
    m_select_all_options_isSet = true;
}

bool OAICustomFilterConfiguration::is_select_all_options_Set() const{
    return m_select_all_options_isSet;
}

bool OAICustomFilterConfiguration::is_select_all_options_Valid() const{
    return m_select_all_options_isValid;
}

QString OAICustomFilterConfiguration::getParameterName() const {
    return m_parameter_name;
}
void OAICustomFilterConfiguration::setParameterName(const QString &parameter_name) {
    m_parameter_name = parameter_name;
    m_parameter_name_isSet = true;
}

bool OAICustomFilterConfiguration::is_parameter_name_Set() const{
    return m_parameter_name_isSet;
}

bool OAICustomFilterConfiguration::is_parameter_name_Valid() const{
    return m_parameter_name_isValid;
}

OAIFilterNullOption OAICustomFilterConfiguration::getNullOption() const {
    return m_null_option;
}
void OAICustomFilterConfiguration::setNullOption(const OAIFilterNullOption &null_option) {
    m_null_option = null_option;
    m_null_option_isSet = true;
}

bool OAICustomFilterConfiguration::is_null_option_Set() const{
    return m_null_option_isSet;
}

bool OAICustomFilterConfiguration::is_null_option_Valid() const{
    return m_null_option_isValid;
}

bool OAICustomFilterConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_match_operator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_select_all_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_null_option.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomFilterConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_match_operator_isValid && m_null_option_isValid && true;
}

} // namespace OpenAPI
