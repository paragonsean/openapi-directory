/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDashboardSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDashboardSummary::OAIDashboardSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDashboardSummary::OAIDashboardSummary() {
    this->initializeModel();
}

OAIDashboardSummary::~OAIDashboardSummary() {}

void OAIDashboardSummary::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_dashboard_id_isSet = false;
    m_dashboard_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_published_version_number_isSet = false;
    m_published_version_number_isValid = false;

    m_last_published_time_isSet = false;
    m_last_published_time_isValid = false;
}

void OAIDashboardSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDashboardSummary::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_dashboard_id_isValid = ::OpenAPI::fromJsonValue(m_dashboard_id, json[QString("DashboardId")]);
    m_dashboard_id_isSet = !json[QString("DashboardId")].isNull() && m_dashboard_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_published_version_number_isValid = ::OpenAPI::fromJsonValue(m_published_version_number, json[QString("PublishedVersionNumber")]);
    m_published_version_number_isSet = !json[QString("PublishedVersionNumber")].isNull() && m_published_version_number_isValid;

    m_last_published_time_isValid = ::OpenAPI::fromJsonValue(m_last_published_time, json[QString("LastPublishedTime")]);
    m_last_published_time_isSet = !json[QString("LastPublishedTime")].isNull() && m_last_published_time_isValid;
}

QString OAIDashboardSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDashboardSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_dashboard_id_isSet) {
        obj.insert(QString("DashboardId"), ::OpenAPI::toJsonValue(m_dashboard_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_published_version_number_isSet) {
        obj.insert(QString("PublishedVersionNumber"), ::OpenAPI::toJsonValue(m_published_version_number));
    }
    if (m_last_published_time_isSet) {
        obj.insert(QString("LastPublishedTime"), ::OpenAPI::toJsonValue(m_last_published_time));
    }
    return obj;
}

QString OAIDashboardSummary::getArn() const {
    return m_arn;
}
void OAIDashboardSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDashboardSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDashboardSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDashboardSummary::getDashboardId() const {
    return m_dashboard_id;
}
void OAIDashboardSummary::setDashboardId(const QString &dashboard_id) {
    m_dashboard_id = dashboard_id;
    m_dashboard_id_isSet = true;
}

bool OAIDashboardSummary::is_dashboard_id_Set() const{
    return m_dashboard_id_isSet;
}

bool OAIDashboardSummary::is_dashboard_id_Valid() const{
    return m_dashboard_id_isValid;
}

QString OAIDashboardSummary::getName() const {
    return m_name;
}
void OAIDashboardSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDashboardSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDashboardSummary::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIDashboardSummary::getCreatedTime() const {
    return m_created_time;
}
void OAIDashboardSummary::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIDashboardSummary::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIDashboardSummary::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QDateTime OAIDashboardSummary::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIDashboardSummary::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIDashboardSummary::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIDashboardSummary::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

qint32 OAIDashboardSummary::getPublishedVersionNumber() const {
    return m_published_version_number;
}
void OAIDashboardSummary::setPublishedVersionNumber(const qint32 &published_version_number) {
    m_published_version_number = published_version_number;
    m_published_version_number_isSet = true;
}

bool OAIDashboardSummary::is_published_version_number_Set() const{
    return m_published_version_number_isSet;
}

bool OAIDashboardSummary::is_published_version_number_Valid() const{
    return m_published_version_number_isValid;
}

QDateTime OAIDashboardSummary::getLastPublishedTime() const {
    return m_last_published_time;
}
void OAIDashboardSummary::setLastPublishedTime(const QDateTime &last_published_time) {
    m_last_published_time = last_published_time;
    m_last_published_time_isSet = true;
}

bool OAIDashboardSummary::is_last_published_time_Set() const{
    return m_last_published_time_isSet;
}

bool OAIDashboardSummary::is_last_published_time_Valid() const{
    return m_last_published_time_isValid;
}

bool OAIDashboardSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashboard_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_version_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_published_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDashboardSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
