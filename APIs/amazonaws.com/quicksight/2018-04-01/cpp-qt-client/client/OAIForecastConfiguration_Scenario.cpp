/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForecastConfiguration_Scenario.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForecastConfiguration_Scenario::OAIForecastConfiguration_Scenario(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForecastConfiguration_Scenario::OAIForecastConfiguration_Scenario() {
    this->initializeModel();
}

OAIForecastConfiguration_Scenario::~OAIForecastConfiguration_Scenario() {}

void OAIForecastConfiguration_Scenario::initializeModel() {

    m_what_if_point_scenario_isSet = false;
    m_what_if_point_scenario_isValid = false;

    m_what_if_range_scenario_isSet = false;
    m_what_if_range_scenario_isValid = false;
}

void OAIForecastConfiguration_Scenario::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForecastConfiguration_Scenario::fromJsonObject(QJsonObject json) {

    m_what_if_point_scenario_isValid = ::OpenAPI::fromJsonValue(m_what_if_point_scenario, json[QString("WhatIfPointScenario")]);
    m_what_if_point_scenario_isSet = !json[QString("WhatIfPointScenario")].isNull() && m_what_if_point_scenario_isValid;

    m_what_if_range_scenario_isValid = ::OpenAPI::fromJsonValue(m_what_if_range_scenario, json[QString("WhatIfRangeScenario")]);
    m_what_if_range_scenario_isSet = !json[QString("WhatIfRangeScenario")].isNull() && m_what_if_range_scenario_isValid;
}

QString OAIForecastConfiguration_Scenario::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForecastConfiguration_Scenario::asJsonObject() const {
    QJsonObject obj;
    if (m_what_if_point_scenario.isSet()) {
        obj.insert(QString("WhatIfPointScenario"), ::OpenAPI::toJsonValue(m_what_if_point_scenario));
    }
    if (m_what_if_range_scenario.isSet()) {
        obj.insert(QString("WhatIfRangeScenario"), ::OpenAPI::toJsonValue(m_what_if_range_scenario));
    }
    return obj;
}

OAIForecastScenario_WhatIfPointScenario OAIForecastConfiguration_Scenario::getWhatIfPointScenario() const {
    return m_what_if_point_scenario;
}
void OAIForecastConfiguration_Scenario::setWhatIfPointScenario(const OAIForecastScenario_WhatIfPointScenario &what_if_point_scenario) {
    m_what_if_point_scenario = what_if_point_scenario;
    m_what_if_point_scenario_isSet = true;
}

bool OAIForecastConfiguration_Scenario::is_what_if_point_scenario_Set() const{
    return m_what_if_point_scenario_isSet;
}

bool OAIForecastConfiguration_Scenario::is_what_if_point_scenario_Valid() const{
    return m_what_if_point_scenario_isValid;
}

OAIForecastScenario_WhatIfRangeScenario OAIForecastConfiguration_Scenario::getWhatIfRangeScenario() const {
    return m_what_if_range_scenario;
}
void OAIForecastConfiguration_Scenario::setWhatIfRangeScenario(const OAIForecastScenario_WhatIfRangeScenario &what_if_range_scenario) {
    m_what_if_range_scenario = what_if_range_scenario;
    m_what_if_range_scenario_isSet = true;
}

bool OAIForecastConfiguration_Scenario::is_what_if_range_scenario_Set() const{
    return m_what_if_range_scenario_isSet;
}

bool OAIForecastConfiguration_Scenario::is_what_if_range_scenario_Valid() const{
    return m_what_if_range_scenario_isValid;
}

bool OAIForecastConfiguration_Scenario::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_what_if_point_scenario.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_what_if_range_scenario.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForecastConfiguration_Scenario::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
