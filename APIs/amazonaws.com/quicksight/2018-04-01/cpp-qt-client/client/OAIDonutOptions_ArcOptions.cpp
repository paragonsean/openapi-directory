/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDonutOptions_ArcOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDonutOptions_ArcOptions::OAIDonutOptions_ArcOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDonutOptions_ArcOptions::OAIDonutOptions_ArcOptions() {
    this->initializeModel();
}

OAIDonutOptions_ArcOptions::~OAIDonutOptions_ArcOptions() {}

void OAIDonutOptions_ArcOptions::initializeModel() {

    m_arc_thickness_isSet = false;
    m_arc_thickness_isValid = false;
}

void OAIDonutOptions_ArcOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDonutOptions_ArcOptions::fromJsonObject(QJsonObject json) {

    m_arc_thickness_isValid = ::OpenAPI::fromJsonValue(m_arc_thickness, json[QString("ArcThickness")]);
    m_arc_thickness_isSet = !json[QString("ArcThickness")].isNull() && m_arc_thickness_isValid;
}

QString OAIDonutOptions_ArcOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDonutOptions_ArcOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_arc_thickness.isSet()) {
        obj.insert(QString("ArcThickness"), ::OpenAPI::toJsonValue(m_arc_thickness));
    }
    return obj;
}

OAIArcThickness OAIDonutOptions_ArcOptions::getArcThickness() const {
    return m_arc_thickness;
}
void OAIDonutOptions_ArcOptions::setArcThickness(const OAIArcThickness &arc_thickness) {
    m_arc_thickness = arc_thickness;
    m_arc_thickness_isSet = true;
}

bool OAIDonutOptions_ArcOptions::is_arc_thickness_Set() const{
    return m_arc_thickness_isSet;
}

bool OAIDonutOptions_ArcOptions::is_arc_thickness_Valid() const{
    return m_arc_thickness_isValid;
}

bool OAIDonutOptions_ArcOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arc_thickness.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDonutOptions_ArcOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
