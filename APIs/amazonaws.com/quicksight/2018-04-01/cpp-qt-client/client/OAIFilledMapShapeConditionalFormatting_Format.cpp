/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilledMapShapeConditionalFormatting_Format.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilledMapShapeConditionalFormatting_Format::OAIFilledMapShapeConditionalFormatting_Format(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilledMapShapeConditionalFormatting_Format::OAIFilledMapShapeConditionalFormatting_Format() {
    this->initializeModel();
}

OAIFilledMapShapeConditionalFormatting_Format::~OAIFilledMapShapeConditionalFormatting_Format() {}

void OAIFilledMapShapeConditionalFormatting_Format::initializeModel() {

    m_background_color_isSet = false;
    m_background_color_isValid = false;
}

void OAIFilledMapShapeConditionalFormatting_Format::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilledMapShapeConditionalFormatting_Format::fromJsonObject(QJsonObject json) {

    m_background_color_isValid = ::OpenAPI::fromJsonValue(m_background_color, json[QString("BackgroundColor")]);
    m_background_color_isSet = !json[QString("BackgroundColor")].isNull() && m_background_color_isValid;
}

QString OAIFilledMapShapeConditionalFormatting_Format::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilledMapShapeConditionalFormatting_Format::asJsonObject() const {
    QJsonObject obj;
    if (m_background_color.isSet()) {
        obj.insert(QString("BackgroundColor"), ::OpenAPI::toJsonValue(m_background_color));
    }
    return obj;
}

OAIShapeConditionalFormat_BackgroundColor OAIFilledMapShapeConditionalFormatting_Format::getBackgroundColor() const {
    return m_background_color;
}
void OAIFilledMapShapeConditionalFormatting_Format::setBackgroundColor(const OAIShapeConditionalFormat_BackgroundColor &background_color) {
    m_background_color = background_color;
    m_background_color_isSet = true;
}

bool OAIFilledMapShapeConditionalFormatting_Format::is_background_color_Set() const{
    return m_background_color_isSet;
}

bool OAIFilledMapShapeConditionalFormatting_Format::is_background_color_Valid() const{
    return m_background_color_isValid;
}

bool OAIFilledMapShapeConditionalFormatting_Format::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_color.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilledMapShapeConditionalFormatting_Format::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_background_color_isValid && true;
}

} // namespace OpenAPI
