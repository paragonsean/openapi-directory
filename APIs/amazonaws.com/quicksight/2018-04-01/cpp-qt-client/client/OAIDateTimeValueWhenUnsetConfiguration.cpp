/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDateTimeValueWhenUnsetConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDateTimeValueWhenUnsetConfiguration::OAIDateTimeValueWhenUnsetConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDateTimeValueWhenUnsetConfiguration::OAIDateTimeValueWhenUnsetConfiguration() {
    this->initializeModel();
}

OAIDateTimeValueWhenUnsetConfiguration::~OAIDateTimeValueWhenUnsetConfiguration() {}

void OAIDateTimeValueWhenUnsetConfiguration::initializeModel() {

    m_value_when_unset_option_isSet = false;
    m_value_when_unset_option_isValid = false;

    m_custom_value_isSet = false;
    m_custom_value_isValid = false;
}

void OAIDateTimeValueWhenUnsetConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDateTimeValueWhenUnsetConfiguration::fromJsonObject(QJsonObject json) {

    m_value_when_unset_option_isValid = ::OpenAPI::fromJsonValue(m_value_when_unset_option, json[QString("ValueWhenUnsetOption")]);
    m_value_when_unset_option_isSet = !json[QString("ValueWhenUnsetOption")].isNull() && m_value_when_unset_option_isValid;

    m_custom_value_isValid = ::OpenAPI::fromJsonValue(m_custom_value, json[QString("CustomValue")]);
    m_custom_value_isSet = !json[QString("CustomValue")].isNull() && m_custom_value_isValid;
}

QString OAIDateTimeValueWhenUnsetConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDateTimeValueWhenUnsetConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_value_when_unset_option.isSet()) {
        obj.insert(QString("ValueWhenUnsetOption"), ::OpenAPI::toJsonValue(m_value_when_unset_option));
    }
    if (m_custom_value_isSet) {
        obj.insert(QString("CustomValue"), ::OpenAPI::toJsonValue(m_custom_value));
    }
    return obj;
}

OAIValueWhenUnsetOption OAIDateTimeValueWhenUnsetConfiguration::getValueWhenUnsetOption() const {
    return m_value_when_unset_option;
}
void OAIDateTimeValueWhenUnsetConfiguration::setValueWhenUnsetOption(const OAIValueWhenUnsetOption &value_when_unset_option) {
    m_value_when_unset_option = value_when_unset_option;
    m_value_when_unset_option_isSet = true;
}

bool OAIDateTimeValueWhenUnsetConfiguration::is_value_when_unset_option_Set() const{
    return m_value_when_unset_option_isSet;
}

bool OAIDateTimeValueWhenUnsetConfiguration::is_value_when_unset_option_Valid() const{
    return m_value_when_unset_option_isValid;
}

QDateTime OAIDateTimeValueWhenUnsetConfiguration::getCustomValue() const {
    return m_custom_value;
}
void OAIDateTimeValueWhenUnsetConfiguration::setCustomValue(const QDateTime &custom_value) {
    m_custom_value = custom_value;
    m_custom_value_isSet = true;
}

bool OAIDateTimeValueWhenUnsetConfiguration::is_custom_value_Set() const{
    return m_custom_value_isSet;
}

bool OAIDateTimeValueWhenUnsetConfiguration::is_custom_value_Valid() const{
    return m_custom_value_isValid;
}

bool OAIDateTimeValueWhenUnsetConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_value_when_unset_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDateTimeValueWhenUnsetConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
