/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFilterSliderControl.h
 *
 * A control to display a horizontal toggle bar. This is used to change a value by sliding the toggle.
 */

#ifndef OAIFilterSliderControl_H
#define OAIFilterSliderControl_H

#include <QJsonObject>

#include "OAIFilterSliderControl_DisplayOptions.h"
#include "OAISheetControlSliderType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFilterSliderControl_DisplayOptions;

class OAIFilterSliderControl : public OAIObject {
public:
    OAIFilterSliderControl();
    OAIFilterSliderControl(QString json);
    ~OAIFilterSliderControl() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFilterControlId() const;
    void setFilterControlId(const QString &filter_control_id);
    bool is_filter_control_id_Set() const;
    bool is_filter_control_id_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QString getSourceFilterId() const;
    void setSourceFilterId(const QString &source_filter_id);
    bool is_source_filter_id_Set() const;
    bool is_source_filter_id_Valid() const;

    OAIFilterSliderControl_DisplayOptions getDisplayOptions() const;
    void setDisplayOptions(const OAIFilterSliderControl_DisplayOptions &display_options);
    bool is_display_options_Set() const;
    bool is_display_options_Valid() const;

    OAISheetControlSliderType getType() const;
    void setType(const OAISheetControlSliderType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    double getMaximumValue() const;
    void setMaximumValue(const double &maximum_value);
    bool is_maximum_value_Set() const;
    bool is_maximum_value_Valid() const;

    double getMinimumValue() const;
    void setMinimumValue(const double &minimum_value);
    bool is_minimum_value_Set() const;
    bool is_minimum_value_Valid() const;

    double getStepSize() const;
    void setStepSize(const double &step_size);
    bool is_step_size_Set() const;
    bool is_step_size_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_filter_control_id;
    bool m_filter_control_id_isSet;
    bool m_filter_control_id_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QString m_source_filter_id;
    bool m_source_filter_id_isSet;
    bool m_source_filter_id_isValid;

    OAIFilterSliderControl_DisplayOptions m_display_options;
    bool m_display_options_isSet;
    bool m_display_options_isValid;

    OAISheetControlSliderType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    double m_maximum_value;
    bool m_maximum_value_isSet;
    bool m_maximum_value_isValid;

    double m_minimum_value;
    bool m_minimum_value_isSet;
    bool m_minimum_value_isValid;

    double m_step_size;
    bool m_step_size_isSet;
    bool m_step_size_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFilterSliderControl)

#endif // OAIFilterSliderControl_H
