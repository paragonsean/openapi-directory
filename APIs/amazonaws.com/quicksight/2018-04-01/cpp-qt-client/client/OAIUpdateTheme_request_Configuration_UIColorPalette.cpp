/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateTheme_request_Configuration_UIColorPalette.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateTheme_request_Configuration_UIColorPalette::OAIUpdateTheme_request_Configuration_UIColorPalette(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateTheme_request_Configuration_UIColorPalette::OAIUpdateTheme_request_Configuration_UIColorPalette() {
    this->initializeModel();
}

OAIUpdateTheme_request_Configuration_UIColorPalette::~OAIUpdateTheme_request_Configuration_UIColorPalette() {}

void OAIUpdateTheme_request_Configuration_UIColorPalette::initializeModel() {

    m_primary_foreground_isSet = false;
    m_primary_foreground_isValid = false;

    m_primary_background_isSet = false;
    m_primary_background_isValid = false;

    m_secondary_foreground_isSet = false;
    m_secondary_foreground_isValid = false;

    m_secondary_background_isSet = false;
    m_secondary_background_isValid = false;

    m_accent_isSet = false;
    m_accent_isValid = false;

    m_accent_foreground_isSet = false;
    m_accent_foreground_isValid = false;

    m_danger_isSet = false;
    m_danger_isValid = false;

    m_danger_foreground_isSet = false;
    m_danger_foreground_isValid = false;

    m_warning_isSet = false;
    m_warning_isValid = false;

    m_warning_foreground_isSet = false;
    m_warning_foreground_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;

    m_success_foreground_isSet = false;
    m_success_foreground_isValid = false;

    m_dimension_isSet = false;
    m_dimension_isValid = false;

    m_dimension_foreground_isSet = false;
    m_dimension_foreground_isValid = false;

    m_measure_isSet = false;
    m_measure_isValid = false;

    m_measure_foreground_isSet = false;
    m_measure_foreground_isValid = false;
}

void OAIUpdateTheme_request_Configuration_UIColorPalette::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateTheme_request_Configuration_UIColorPalette::fromJsonObject(QJsonObject json) {

    m_primary_foreground_isValid = ::OpenAPI::fromJsonValue(m_primary_foreground, json[QString("PrimaryForeground")]);
    m_primary_foreground_isSet = !json[QString("PrimaryForeground")].isNull() && m_primary_foreground_isValid;

    m_primary_background_isValid = ::OpenAPI::fromJsonValue(m_primary_background, json[QString("PrimaryBackground")]);
    m_primary_background_isSet = !json[QString("PrimaryBackground")].isNull() && m_primary_background_isValid;

    m_secondary_foreground_isValid = ::OpenAPI::fromJsonValue(m_secondary_foreground, json[QString("SecondaryForeground")]);
    m_secondary_foreground_isSet = !json[QString("SecondaryForeground")].isNull() && m_secondary_foreground_isValid;

    m_secondary_background_isValid = ::OpenAPI::fromJsonValue(m_secondary_background, json[QString("SecondaryBackground")]);
    m_secondary_background_isSet = !json[QString("SecondaryBackground")].isNull() && m_secondary_background_isValid;

    m_accent_isValid = ::OpenAPI::fromJsonValue(m_accent, json[QString("Accent")]);
    m_accent_isSet = !json[QString("Accent")].isNull() && m_accent_isValid;

    m_accent_foreground_isValid = ::OpenAPI::fromJsonValue(m_accent_foreground, json[QString("AccentForeground")]);
    m_accent_foreground_isSet = !json[QString("AccentForeground")].isNull() && m_accent_foreground_isValid;

    m_danger_isValid = ::OpenAPI::fromJsonValue(m_danger, json[QString("Danger")]);
    m_danger_isSet = !json[QString("Danger")].isNull() && m_danger_isValid;

    m_danger_foreground_isValid = ::OpenAPI::fromJsonValue(m_danger_foreground, json[QString("DangerForeground")]);
    m_danger_foreground_isSet = !json[QString("DangerForeground")].isNull() && m_danger_foreground_isValid;

    m_warning_isValid = ::OpenAPI::fromJsonValue(m_warning, json[QString("Warning")]);
    m_warning_isSet = !json[QString("Warning")].isNull() && m_warning_isValid;

    m_warning_foreground_isValid = ::OpenAPI::fromJsonValue(m_warning_foreground, json[QString("WarningForeground")]);
    m_warning_foreground_isSet = !json[QString("WarningForeground")].isNull() && m_warning_foreground_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("Success")]);
    m_success_isSet = !json[QString("Success")].isNull() && m_success_isValid;

    m_success_foreground_isValid = ::OpenAPI::fromJsonValue(m_success_foreground, json[QString("SuccessForeground")]);
    m_success_foreground_isSet = !json[QString("SuccessForeground")].isNull() && m_success_foreground_isValid;

    m_dimension_isValid = ::OpenAPI::fromJsonValue(m_dimension, json[QString("Dimension")]);
    m_dimension_isSet = !json[QString("Dimension")].isNull() && m_dimension_isValid;

    m_dimension_foreground_isValid = ::OpenAPI::fromJsonValue(m_dimension_foreground, json[QString("DimensionForeground")]);
    m_dimension_foreground_isSet = !json[QString("DimensionForeground")].isNull() && m_dimension_foreground_isValid;

    m_measure_isValid = ::OpenAPI::fromJsonValue(m_measure, json[QString("Measure")]);
    m_measure_isSet = !json[QString("Measure")].isNull() && m_measure_isValid;

    m_measure_foreground_isValid = ::OpenAPI::fromJsonValue(m_measure_foreground, json[QString("MeasureForeground")]);
    m_measure_foreground_isSet = !json[QString("MeasureForeground")].isNull() && m_measure_foreground_isValid;
}

QString OAIUpdateTheme_request_Configuration_UIColorPalette::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateTheme_request_Configuration_UIColorPalette::asJsonObject() const {
    QJsonObject obj;
    if (m_primary_foreground_isSet) {
        obj.insert(QString("PrimaryForeground"), ::OpenAPI::toJsonValue(m_primary_foreground));
    }
    if (m_primary_background_isSet) {
        obj.insert(QString("PrimaryBackground"), ::OpenAPI::toJsonValue(m_primary_background));
    }
    if (m_secondary_foreground_isSet) {
        obj.insert(QString("SecondaryForeground"), ::OpenAPI::toJsonValue(m_secondary_foreground));
    }
    if (m_secondary_background_isSet) {
        obj.insert(QString("SecondaryBackground"), ::OpenAPI::toJsonValue(m_secondary_background));
    }
    if (m_accent_isSet) {
        obj.insert(QString("Accent"), ::OpenAPI::toJsonValue(m_accent));
    }
    if (m_accent_foreground_isSet) {
        obj.insert(QString("AccentForeground"), ::OpenAPI::toJsonValue(m_accent_foreground));
    }
    if (m_danger_isSet) {
        obj.insert(QString("Danger"), ::OpenAPI::toJsonValue(m_danger));
    }
    if (m_danger_foreground_isSet) {
        obj.insert(QString("DangerForeground"), ::OpenAPI::toJsonValue(m_danger_foreground));
    }
    if (m_warning_isSet) {
        obj.insert(QString("Warning"), ::OpenAPI::toJsonValue(m_warning));
    }
    if (m_warning_foreground_isSet) {
        obj.insert(QString("WarningForeground"), ::OpenAPI::toJsonValue(m_warning_foreground));
    }
    if (m_success_isSet) {
        obj.insert(QString("Success"), ::OpenAPI::toJsonValue(m_success));
    }
    if (m_success_foreground_isSet) {
        obj.insert(QString("SuccessForeground"), ::OpenAPI::toJsonValue(m_success_foreground));
    }
    if (m_dimension_isSet) {
        obj.insert(QString("Dimension"), ::OpenAPI::toJsonValue(m_dimension));
    }
    if (m_dimension_foreground_isSet) {
        obj.insert(QString("DimensionForeground"), ::OpenAPI::toJsonValue(m_dimension_foreground));
    }
    if (m_measure_isSet) {
        obj.insert(QString("Measure"), ::OpenAPI::toJsonValue(m_measure));
    }
    if (m_measure_foreground_isSet) {
        obj.insert(QString("MeasureForeground"), ::OpenAPI::toJsonValue(m_measure_foreground));
    }
    return obj;
}

QString OAIUpdateTheme_request_Configuration_UIColorPalette::getPrimaryForeground() const {
    return m_primary_foreground;
}
void OAIUpdateTheme_request_Configuration_UIColorPalette::setPrimaryForeground(const QString &primary_foreground) {
    m_primary_foreground = primary_foreground;
    m_primary_foreground_isSet = true;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_primary_foreground_Set() const{
    return m_primary_foreground_isSet;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_primary_foreground_Valid() const{
    return m_primary_foreground_isValid;
}

QString OAIUpdateTheme_request_Configuration_UIColorPalette::getPrimaryBackground() const {
    return m_primary_background;
}
void OAIUpdateTheme_request_Configuration_UIColorPalette::setPrimaryBackground(const QString &primary_background) {
    m_primary_background = primary_background;
    m_primary_background_isSet = true;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_primary_background_Set() const{
    return m_primary_background_isSet;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_primary_background_Valid() const{
    return m_primary_background_isValid;
}

QString OAIUpdateTheme_request_Configuration_UIColorPalette::getSecondaryForeground() const {
    return m_secondary_foreground;
}
void OAIUpdateTheme_request_Configuration_UIColorPalette::setSecondaryForeground(const QString &secondary_foreground) {
    m_secondary_foreground = secondary_foreground;
    m_secondary_foreground_isSet = true;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_secondary_foreground_Set() const{
    return m_secondary_foreground_isSet;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_secondary_foreground_Valid() const{
    return m_secondary_foreground_isValid;
}

QString OAIUpdateTheme_request_Configuration_UIColorPalette::getSecondaryBackground() const {
    return m_secondary_background;
}
void OAIUpdateTheme_request_Configuration_UIColorPalette::setSecondaryBackground(const QString &secondary_background) {
    m_secondary_background = secondary_background;
    m_secondary_background_isSet = true;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_secondary_background_Set() const{
    return m_secondary_background_isSet;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_secondary_background_Valid() const{
    return m_secondary_background_isValid;
}

QString OAIUpdateTheme_request_Configuration_UIColorPalette::getAccent() const {
    return m_accent;
}
void OAIUpdateTheme_request_Configuration_UIColorPalette::setAccent(const QString &accent) {
    m_accent = accent;
    m_accent_isSet = true;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_accent_Set() const{
    return m_accent_isSet;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_accent_Valid() const{
    return m_accent_isValid;
}

QString OAIUpdateTheme_request_Configuration_UIColorPalette::getAccentForeground() const {
    return m_accent_foreground;
}
void OAIUpdateTheme_request_Configuration_UIColorPalette::setAccentForeground(const QString &accent_foreground) {
    m_accent_foreground = accent_foreground;
    m_accent_foreground_isSet = true;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_accent_foreground_Set() const{
    return m_accent_foreground_isSet;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_accent_foreground_Valid() const{
    return m_accent_foreground_isValid;
}

QString OAIUpdateTheme_request_Configuration_UIColorPalette::getDanger() const {
    return m_danger;
}
void OAIUpdateTheme_request_Configuration_UIColorPalette::setDanger(const QString &danger) {
    m_danger = danger;
    m_danger_isSet = true;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_danger_Set() const{
    return m_danger_isSet;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_danger_Valid() const{
    return m_danger_isValid;
}

QString OAIUpdateTheme_request_Configuration_UIColorPalette::getDangerForeground() const {
    return m_danger_foreground;
}
void OAIUpdateTheme_request_Configuration_UIColorPalette::setDangerForeground(const QString &danger_foreground) {
    m_danger_foreground = danger_foreground;
    m_danger_foreground_isSet = true;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_danger_foreground_Set() const{
    return m_danger_foreground_isSet;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_danger_foreground_Valid() const{
    return m_danger_foreground_isValid;
}

QString OAIUpdateTheme_request_Configuration_UIColorPalette::getWarning() const {
    return m_warning;
}
void OAIUpdateTheme_request_Configuration_UIColorPalette::setWarning(const QString &warning) {
    m_warning = warning;
    m_warning_isSet = true;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_warning_Set() const{
    return m_warning_isSet;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_warning_Valid() const{
    return m_warning_isValid;
}

QString OAIUpdateTheme_request_Configuration_UIColorPalette::getWarningForeground() const {
    return m_warning_foreground;
}
void OAIUpdateTheme_request_Configuration_UIColorPalette::setWarningForeground(const QString &warning_foreground) {
    m_warning_foreground = warning_foreground;
    m_warning_foreground_isSet = true;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_warning_foreground_Set() const{
    return m_warning_foreground_isSet;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_warning_foreground_Valid() const{
    return m_warning_foreground_isValid;
}

QString OAIUpdateTheme_request_Configuration_UIColorPalette::getSuccess() const {
    return m_success;
}
void OAIUpdateTheme_request_Configuration_UIColorPalette::setSuccess(const QString &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_success_Set() const{
    return m_success_isSet;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_success_Valid() const{
    return m_success_isValid;
}

QString OAIUpdateTheme_request_Configuration_UIColorPalette::getSuccessForeground() const {
    return m_success_foreground;
}
void OAIUpdateTheme_request_Configuration_UIColorPalette::setSuccessForeground(const QString &success_foreground) {
    m_success_foreground = success_foreground;
    m_success_foreground_isSet = true;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_success_foreground_Set() const{
    return m_success_foreground_isSet;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_success_foreground_Valid() const{
    return m_success_foreground_isValid;
}

QString OAIUpdateTheme_request_Configuration_UIColorPalette::getDimension() const {
    return m_dimension;
}
void OAIUpdateTheme_request_Configuration_UIColorPalette::setDimension(const QString &dimension) {
    m_dimension = dimension;
    m_dimension_isSet = true;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_dimension_Set() const{
    return m_dimension_isSet;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_dimension_Valid() const{
    return m_dimension_isValid;
}

QString OAIUpdateTheme_request_Configuration_UIColorPalette::getDimensionForeground() const {
    return m_dimension_foreground;
}
void OAIUpdateTheme_request_Configuration_UIColorPalette::setDimensionForeground(const QString &dimension_foreground) {
    m_dimension_foreground = dimension_foreground;
    m_dimension_foreground_isSet = true;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_dimension_foreground_Set() const{
    return m_dimension_foreground_isSet;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_dimension_foreground_Valid() const{
    return m_dimension_foreground_isValid;
}

QString OAIUpdateTheme_request_Configuration_UIColorPalette::getMeasure() const {
    return m_measure;
}
void OAIUpdateTheme_request_Configuration_UIColorPalette::setMeasure(const QString &measure) {
    m_measure = measure;
    m_measure_isSet = true;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_measure_Set() const{
    return m_measure_isSet;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_measure_Valid() const{
    return m_measure_isValid;
}

QString OAIUpdateTheme_request_Configuration_UIColorPalette::getMeasureForeground() const {
    return m_measure_foreground;
}
void OAIUpdateTheme_request_Configuration_UIColorPalette::setMeasureForeground(const QString &measure_foreground) {
    m_measure_foreground = measure_foreground;
    m_measure_foreground_isSet = true;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_measure_foreground_Set() const{
    return m_measure_foreground_isSet;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::is_measure_foreground_Valid() const{
    return m_measure_foreground_isValid;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_primary_foreground_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_background_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_foreground_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_background_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accent_foreground_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_danger_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_danger_foreground_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warning_foreground_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_foreground_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_foreground_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measure_foreground_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateTheme_request_Configuration_UIColorPalette::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
