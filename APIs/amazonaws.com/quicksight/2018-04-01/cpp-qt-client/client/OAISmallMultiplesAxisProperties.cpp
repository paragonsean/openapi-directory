/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISmallMultiplesAxisProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISmallMultiplesAxisProperties::OAISmallMultiplesAxisProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISmallMultiplesAxisProperties::OAISmallMultiplesAxisProperties() {
    this->initializeModel();
}

OAISmallMultiplesAxisProperties::~OAISmallMultiplesAxisProperties() {}

void OAISmallMultiplesAxisProperties::initializeModel() {

    m_scale_isSet = false;
    m_scale_isValid = false;

    m_placement_isSet = false;
    m_placement_isValid = false;
}

void OAISmallMultiplesAxisProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISmallMultiplesAxisProperties::fromJsonObject(QJsonObject json) {

    m_scale_isValid = ::OpenAPI::fromJsonValue(m_scale, json[QString("Scale")]);
    m_scale_isSet = !json[QString("Scale")].isNull() && m_scale_isValid;

    m_placement_isValid = ::OpenAPI::fromJsonValue(m_placement, json[QString("Placement")]);
    m_placement_isSet = !json[QString("Placement")].isNull() && m_placement_isValid;
}

QString OAISmallMultiplesAxisProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISmallMultiplesAxisProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_scale.isSet()) {
        obj.insert(QString("Scale"), ::OpenAPI::toJsonValue(m_scale));
    }
    if (m_placement.isSet()) {
        obj.insert(QString("Placement"), ::OpenAPI::toJsonValue(m_placement));
    }
    return obj;
}

OAISmallMultiplesAxisScale OAISmallMultiplesAxisProperties::getScale() const {
    return m_scale;
}
void OAISmallMultiplesAxisProperties::setScale(const OAISmallMultiplesAxisScale &scale) {
    m_scale = scale;
    m_scale_isSet = true;
}

bool OAISmallMultiplesAxisProperties::is_scale_Set() const{
    return m_scale_isSet;
}

bool OAISmallMultiplesAxisProperties::is_scale_Valid() const{
    return m_scale_isValid;
}

OAISmallMultiplesAxisPlacement OAISmallMultiplesAxisProperties::getPlacement() const {
    return m_placement;
}
void OAISmallMultiplesAxisProperties::setPlacement(const OAISmallMultiplesAxisPlacement &placement) {
    m_placement = placement;
    m_placement_isSet = true;
}

bool OAISmallMultiplesAxisProperties::is_placement_Set() const{
    return m_placement_isSet;
}

bool OAISmallMultiplesAxisProperties::is_placement_Valid() const{
    return m_placement_isValid;
}

bool OAISmallMultiplesAxisProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_scale.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISmallMultiplesAxisProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
