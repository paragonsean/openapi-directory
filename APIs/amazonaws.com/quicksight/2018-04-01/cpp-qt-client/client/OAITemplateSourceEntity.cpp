/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplateSourceEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplateSourceEntity::OAITemplateSourceEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplateSourceEntity::OAITemplateSourceEntity() {
    this->initializeModel();
}

OAITemplateSourceEntity::~OAITemplateSourceEntity() {}

void OAITemplateSourceEntity::initializeModel() {

    m_source_analysis_isSet = false;
    m_source_analysis_isValid = false;

    m_source_template_isSet = false;
    m_source_template_isValid = false;
}

void OAITemplateSourceEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplateSourceEntity::fromJsonObject(QJsonObject json) {

    m_source_analysis_isValid = ::OpenAPI::fromJsonValue(m_source_analysis, json[QString("SourceAnalysis")]);
    m_source_analysis_isSet = !json[QString("SourceAnalysis")].isNull() && m_source_analysis_isValid;

    m_source_template_isValid = ::OpenAPI::fromJsonValue(m_source_template, json[QString("SourceTemplate")]);
    m_source_template_isSet = !json[QString("SourceTemplate")].isNull() && m_source_template_isValid;
}

QString OAITemplateSourceEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplateSourceEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_source_analysis.isSet()) {
        obj.insert(QString("SourceAnalysis"), ::OpenAPI::toJsonValue(m_source_analysis));
    }
    if (m_source_template.isSet()) {
        obj.insert(QString("SourceTemplate"), ::OpenAPI::toJsonValue(m_source_template));
    }
    return obj;
}

OAIUpdateTemplate_request_SourceEntity_SourceAnalysis OAITemplateSourceEntity::getSourceAnalysis() const {
    return m_source_analysis;
}
void OAITemplateSourceEntity::setSourceAnalysis(const OAIUpdateTemplate_request_SourceEntity_SourceAnalysis &source_analysis) {
    m_source_analysis = source_analysis;
    m_source_analysis_isSet = true;
}

bool OAITemplateSourceEntity::is_source_analysis_Set() const{
    return m_source_analysis_isSet;
}

bool OAITemplateSourceEntity::is_source_analysis_Valid() const{
    return m_source_analysis_isValid;
}

OAIUpdateTemplate_request_SourceEntity_SourceTemplate OAITemplateSourceEntity::getSourceTemplate() const {
    return m_source_template;
}
void OAITemplateSourceEntity::setSourceTemplate(const OAIUpdateTemplate_request_SourceEntity_SourceTemplate &source_template) {
    m_source_template = source_template;
    m_source_template_isSet = true;
}

bool OAITemplateSourceEntity::is_source_template_Set() const{
    return m_source_template_isSet;
}

bool OAITemplateSourceEntity::is_source_template_Valid() const{
    return m_source_template_isValid;
}

bool OAITemplateSourceEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_analysis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_template.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplateSourceEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
