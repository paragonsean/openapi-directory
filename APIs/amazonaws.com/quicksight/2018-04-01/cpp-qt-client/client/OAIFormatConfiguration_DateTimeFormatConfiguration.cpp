/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFormatConfiguration_DateTimeFormatConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFormatConfiguration_DateTimeFormatConfiguration::OAIFormatConfiguration_DateTimeFormatConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFormatConfiguration_DateTimeFormatConfiguration::OAIFormatConfiguration_DateTimeFormatConfiguration() {
    this->initializeModel();
}

OAIFormatConfiguration_DateTimeFormatConfiguration::~OAIFormatConfiguration_DateTimeFormatConfiguration() {}

void OAIFormatConfiguration_DateTimeFormatConfiguration::initializeModel() {

    m_date_time_format_isSet = false;
    m_date_time_format_isValid = false;

    m_null_value_format_configuration_isSet = false;
    m_null_value_format_configuration_isValid = false;

    m_numeric_format_configuration_isSet = false;
    m_numeric_format_configuration_isValid = false;
}

void OAIFormatConfiguration_DateTimeFormatConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFormatConfiguration_DateTimeFormatConfiguration::fromJsonObject(QJsonObject json) {

    m_date_time_format_isValid = ::OpenAPI::fromJsonValue(m_date_time_format, json[QString("DateTimeFormat")]);
    m_date_time_format_isSet = !json[QString("DateTimeFormat")].isNull() && m_date_time_format_isValid;

    m_null_value_format_configuration_isValid = ::OpenAPI::fromJsonValue(m_null_value_format_configuration, json[QString("NullValueFormatConfiguration")]);
    m_null_value_format_configuration_isSet = !json[QString("NullValueFormatConfiguration")].isNull() && m_null_value_format_configuration_isValid;

    m_numeric_format_configuration_isValid = ::OpenAPI::fromJsonValue(m_numeric_format_configuration, json[QString("NumericFormatConfiguration")]);
    m_numeric_format_configuration_isSet = !json[QString("NumericFormatConfiguration")].isNull() && m_numeric_format_configuration_isValid;
}

QString OAIFormatConfiguration_DateTimeFormatConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFormatConfiguration_DateTimeFormatConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_date_time_format_isSet) {
        obj.insert(QString("DateTimeFormat"), ::OpenAPI::toJsonValue(m_date_time_format));
    }
    if (m_null_value_format_configuration.isSet()) {
        obj.insert(QString("NullValueFormatConfiguration"), ::OpenAPI::toJsonValue(m_null_value_format_configuration));
    }
    if (m_numeric_format_configuration.isSet()) {
        obj.insert(QString("NumericFormatConfiguration"), ::OpenAPI::toJsonValue(m_numeric_format_configuration));
    }
    return obj;
}

QString OAIFormatConfiguration_DateTimeFormatConfiguration::getDateTimeFormat() const {
    return m_date_time_format;
}
void OAIFormatConfiguration_DateTimeFormatConfiguration::setDateTimeFormat(const QString &date_time_format) {
    m_date_time_format = date_time_format;
    m_date_time_format_isSet = true;
}

bool OAIFormatConfiguration_DateTimeFormatConfiguration::is_date_time_format_Set() const{
    return m_date_time_format_isSet;
}

bool OAIFormatConfiguration_DateTimeFormatConfiguration::is_date_time_format_Valid() const{
    return m_date_time_format_isValid;
}

OAIStringFormatConfiguration_NullValueFormatConfiguration OAIFormatConfiguration_DateTimeFormatConfiguration::getNullValueFormatConfiguration() const {
    return m_null_value_format_configuration;
}
void OAIFormatConfiguration_DateTimeFormatConfiguration::setNullValueFormatConfiguration(const OAIStringFormatConfiguration_NullValueFormatConfiguration &null_value_format_configuration) {
    m_null_value_format_configuration = null_value_format_configuration;
    m_null_value_format_configuration_isSet = true;
}

bool OAIFormatConfiguration_DateTimeFormatConfiguration::is_null_value_format_configuration_Set() const{
    return m_null_value_format_configuration_isSet;
}

bool OAIFormatConfiguration_DateTimeFormatConfiguration::is_null_value_format_configuration_Valid() const{
    return m_null_value_format_configuration_isValid;
}

OAIDateTimeFormatConfiguration_NumericFormatConfiguration OAIFormatConfiguration_DateTimeFormatConfiguration::getNumericFormatConfiguration() const {
    return m_numeric_format_configuration;
}
void OAIFormatConfiguration_DateTimeFormatConfiguration::setNumericFormatConfiguration(const OAIDateTimeFormatConfiguration_NumericFormatConfiguration &numeric_format_configuration) {
    m_numeric_format_configuration = numeric_format_configuration;
    m_numeric_format_configuration_isSet = true;
}

bool OAIFormatConfiguration_DateTimeFormatConfiguration::is_numeric_format_configuration_Set() const{
    return m_numeric_format_configuration_isSet;
}

bool OAIFormatConfiguration_DateTimeFormatConfiguration::is_numeric_format_configuration_Valid() const{
    return m_numeric_format_configuration_isValid;
}

bool OAIFormatConfiguration_DateTimeFormatConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_time_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_null_value_format_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_numeric_format_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFormatConfiguration_DateTimeFormatConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
