/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmptyVisual.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmptyVisual::OAIEmptyVisual(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmptyVisual::OAIEmptyVisual() {
    this->initializeModel();
}

OAIEmptyVisual::~OAIEmptyVisual() {}

void OAIEmptyVisual::initializeModel() {

    m_visual_id_isSet = false;
    m_visual_id_isValid = false;

    m_data_set_identifier_isSet = false;
    m_data_set_identifier_isValid = false;

    m_actions_isSet = false;
    m_actions_isValid = false;
}

void OAIEmptyVisual::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmptyVisual::fromJsonObject(QJsonObject json) {

    m_visual_id_isValid = ::OpenAPI::fromJsonValue(m_visual_id, json[QString("VisualId")]);
    m_visual_id_isSet = !json[QString("VisualId")].isNull() && m_visual_id_isValid;

    m_data_set_identifier_isValid = ::OpenAPI::fromJsonValue(m_data_set_identifier, json[QString("DataSetIdentifier")]);
    m_data_set_identifier_isSet = !json[QString("DataSetIdentifier")].isNull() && m_data_set_identifier_isValid;

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("Actions")]);
    m_actions_isSet = !json[QString("Actions")].isNull() && m_actions_isValid;
}

QString OAIEmptyVisual::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmptyVisual::asJsonObject() const {
    QJsonObject obj;
    if (m_visual_id_isSet) {
        obj.insert(QString("VisualId"), ::OpenAPI::toJsonValue(m_visual_id));
    }
    if (m_data_set_identifier_isSet) {
        obj.insert(QString("DataSetIdentifier"), ::OpenAPI::toJsonValue(m_data_set_identifier));
    }
    if (m_actions.isSet()) {
        obj.insert(QString("Actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    return obj;
}

QString OAIEmptyVisual::getVisualId() const {
    return m_visual_id;
}
void OAIEmptyVisual::setVisualId(const QString &visual_id) {
    m_visual_id = visual_id;
    m_visual_id_isSet = true;
}

bool OAIEmptyVisual::is_visual_id_Set() const{
    return m_visual_id_isSet;
}

bool OAIEmptyVisual::is_visual_id_Valid() const{
    return m_visual_id_isValid;
}

QString OAIEmptyVisual::getDataSetIdentifier() const {
    return m_data_set_identifier;
}
void OAIEmptyVisual::setDataSetIdentifier(const QString &data_set_identifier) {
    m_data_set_identifier = data_set_identifier;
    m_data_set_identifier_isSet = true;
}

bool OAIEmptyVisual::is_data_set_identifier_Set() const{
    return m_data_set_identifier_isSet;
}

bool OAIEmptyVisual::is_data_set_identifier_Valid() const{
    return m_data_set_identifier_isValid;
}

QList OAIEmptyVisual::getActions() const {
    return m_actions;
}
void OAIEmptyVisual::setActions(const QList &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIEmptyVisual::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIEmptyVisual::is_actions_Valid() const{
    return m_actions_isValid;
}

bool OAIEmptyVisual::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_visual_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmptyVisual::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_visual_id_isValid && m_data_set_identifier_isValid && true;
}

} // namespace OpenAPI
