/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistogramConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistogramConfiguration::OAIHistogramConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistogramConfiguration::OAIHistogramConfiguration() {
    this->initializeModel();
}

OAIHistogramConfiguration::~OAIHistogramConfiguration() {}

void OAIHistogramConfiguration::initializeModel() {

    m_field_wells_isSet = false;
    m_field_wells_isValid = false;

    m_x_axis_display_options_isSet = false;
    m_x_axis_display_options_isValid = false;

    m_x_axis_label_options_isSet = false;
    m_x_axis_label_options_isValid = false;

    m_y_axis_display_options_isSet = false;
    m_y_axis_display_options_isValid = false;

    m_bin_options_isSet = false;
    m_bin_options_isValid = false;

    m_data_labels_isSet = false;
    m_data_labels_isValid = false;

    m_tooltip_isSet = false;
    m_tooltip_isValid = false;

    m_visual_palette_isSet = false;
    m_visual_palette_isValid = false;
}

void OAIHistogramConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistogramConfiguration::fromJsonObject(QJsonObject json) {

    m_field_wells_isValid = ::OpenAPI::fromJsonValue(m_field_wells, json[QString("FieldWells")]);
    m_field_wells_isSet = !json[QString("FieldWells")].isNull() && m_field_wells_isValid;

    m_x_axis_display_options_isValid = ::OpenAPI::fromJsonValue(m_x_axis_display_options, json[QString("XAxisDisplayOptions")]);
    m_x_axis_display_options_isSet = !json[QString("XAxisDisplayOptions")].isNull() && m_x_axis_display_options_isValid;

    m_x_axis_label_options_isValid = ::OpenAPI::fromJsonValue(m_x_axis_label_options, json[QString("XAxisLabelOptions")]);
    m_x_axis_label_options_isSet = !json[QString("XAxisLabelOptions")].isNull() && m_x_axis_label_options_isValid;

    m_y_axis_display_options_isValid = ::OpenAPI::fromJsonValue(m_y_axis_display_options, json[QString("YAxisDisplayOptions")]);
    m_y_axis_display_options_isSet = !json[QString("YAxisDisplayOptions")].isNull() && m_y_axis_display_options_isValid;

    m_bin_options_isValid = ::OpenAPI::fromJsonValue(m_bin_options, json[QString("BinOptions")]);
    m_bin_options_isSet = !json[QString("BinOptions")].isNull() && m_bin_options_isValid;

    m_data_labels_isValid = ::OpenAPI::fromJsonValue(m_data_labels, json[QString("DataLabels")]);
    m_data_labels_isSet = !json[QString("DataLabels")].isNull() && m_data_labels_isValid;

    m_tooltip_isValid = ::OpenAPI::fromJsonValue(m_tooltip, json[QString("Tooltip")]);
    m_tooltip_isSet = !json[QString("Tooltip")].isNull() && m_tooltip_isValid;

    m_visual_palette_isValid = ::OpenAPI::fromJsonValue(m_visual_palette, json[QString("VisualPalette")]);
    m_visual_palette_isSet = !json[QString("VisualPalette")].isNull() && m_visual_palette_isValid;
}

QString OAIHistogramConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistogramConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_field_wells.isSet()) {
        obj.insert(QString("FieldWells"), ::OpenAPI::toJsonValue(m_field_wells));
    }
    if (m_x_axis_display_options.isSet()) {
        obj.insert(QString("XAxisDisplayOptions"), ::OpenAPI::toJsonValue(m_x_axis_display_options));
    }
    if (m_x_axis_label_options.isSet()) {
        obj.insert(QString("XAxisLabelOptions"), ::OpenAPI::toJsonValue(m_x_axis_label_options));
    }
    if (m_y_axis_display_options.isSet()) {
        obj.insert(QString("YAxisDisplayOptions"), ::OpenAPI::toJsonValue(m_y_axis_display_options));
    }
    if (m_bin_options.isSet()) {
        obj.insert(QString("BinOptions"), ::OpenAPI::toJsonValue(m_bin_options));
    }
    if (m_data_labels.isSet()) {
        obj.insert(QString("DataLabels"), ::OpenAPI::toJsonValue(m_data_labels));
    }
    if (m_tooltip.isSet()) {
        obj.insert(QString("Tooltip"), ::OpenAPI::toJsonValue(m_tooltip));
    }
    if (m_visual_palette.isSet()) {
        obj.insert(QString("VisualPalette"), ::OpenAPI::toJsonValue(m_visual_palette));
    }
    return obj;
}

OAIHistogramConfiguration_FieldWells OAIHistogramConfiguration::getFieldWells() const {
    return m_field_wells;
}
void OAIHistogramConfiguration::setFieldWells(const OAIHistogramConfiguration_FieldWells &field_wells) {
    m_field_wells = field_wells;
    m_field_wells_isSet = true;
}

bool OAIHistogramConfiguration::is_field_wells_Set() const{
    return m_field_wells_isSet;
}

bool OAIHistogramConfiguration::is_field_wells_Valid() const{
    return m_field_wells_isValid;
}

OAIHistogramConfiguration_XAxisDisplayOptions OAIHistogramConfiguration::getXAxisDisplayOptions() const {
    return m_x_axis_display_options;
}
void OAIHistogramConfiguration::setXAxisDisplayOptions(const OAIHistogramConfiguration_XAxisDisplayOptions &x_axis_display_options) {
    m_x_axis_display_options = x_axis_display_options;
    m_x_axis_display_options_isSet = true;
}

bool OAIHistogramConfiguration::is_x_axis_display_options_Set() const{
    return m_x_axis_display_options_isSet;
}

bool OAIHistogramConfiguration::is_x_axis_display_options_Valid() const{
    return m_x_axis_display_options_isValid;
}

OAIHistogramConfiguration_XAxisLabelOptions OAIHistogramConfiguration::getXAxisLabelOptions() const {
    return m_x_axis_label_options;
}
void OAIHistogramConfiguration::setXAxisLabelOptions(const OAIHistogramConfiguration_XAxisLabelOptions &x_axis_label_options) {
    m_x_axis_label_options = x_axis_label_options;
    m_x_axis_label_options_isSet = true;
}

bool OAIHistogramConfiguration::is_x_axis_label_options_Set() const{
    return m_x_axis_label_options_isSet;
}

bool OAIHistogramConfiguration::is_x_axis_label_options_Valid() const{
    return m_x_axis_label_options_isValid;
}

OAIHistogramConfiguration_YAxisDisplayOptions OAIHistogramConfiguration::getYAxisDisplayOptions() const {
    return m_y_axis_display_options;
}
void OAIHistogramConfiguration::setYAxisDisplayOptions(const OAIHistogramConfiguration_YAxisDisplayOptions &y_axis_display_options) {
    m_y_axis_display_options = y_axis_display_options;
    m_y_axis_display_options_isSet = true;
}

bool OAIHistogramConfiguration::is_y_axis_display_options_Set() const{
    return m_y_axis_display_options_isSet;
}

bool OAIHistogramConfiguration::is_y_axis_display_options_Valid() const{
    return m_y_axis_display_options_isValid;
}

OAIHistogramConfiguration_BinOptions OAIHistogramConfiguration::getBinOptions() const {
    return m_bin_options;
}
void OAIHistogramConfiguration::setBinOptions(const OAIHistogramConfiguration_BinOptions &bin_options) {
    m_bin_options = bin_options;
    m_bin_options_isSet = true;
}

bool OAIHistogramConfiguration::is_bin_options_Set() const{
    return m_bin_options_isSet;
}

bool OAIHistogramConfiguration::is_bin_options_Valid() const{
    return m_bin_options_isValid;
}

OAIHistogramConfiguration_DataLabels OAIHistogramConfiguration::getDataLabels() const {
    return m_data_labels;
}
void OAIHistogramConfiguration::setDataLabels(const OAIHistogramConfiguration_DataLabels &data_labels) {
    m_data_labels = data_labels;
    m_data_labels_isSet = true;
}

bool OAIHistogramConfiguration::is_data_labels_Set() const{
    return m_data_labels_isSet;
}

bool OAIHistogramConfiguration::is_data_labels_Valid() const{
    return m_data_labels_isValid;
}

OAIHistogramConfiguration_Tooltip OAIHistogramConfiguration::getTooltip() const {
    return m_tooltip;
}
void OAIHistogramConfiguration::setTooltip(const OAIHistogramConfiguration_Tooltip &tooltip) {
    m_tooltip = tooltip;
    m_tooltip_isSet = true;
}

bool OAIHistogramConfiguration::is_tooltip_Set() const{
    return m_tooltip_isSet;
}

bool OAIHistogramConfiguration::is_tooltip_Valid() const{
    return m_tooltip_isValid;
}

OAIHistogramConfiguration_VisualPalette OAIHistogramConfiguration::getVisualPalette() const {
    return m_visual_palette;
}
void OAIHistogramConfiguration::setVisualPalette(const OAIHistogramConfiguration_VisualPalette &visual_palette) {
    m_visual_palette = visual_palette;
    m_visual_palette_isSet = true;
}

bool OAIHistogramConfiguration::is_visual_palette_Set() const{
    return m_visual_palette_isSet;
}

bool OAIHistogramConfiguration::is_visual_palette_Valid() const{
    return m_visual_palette_isValid;
}

bool OAIHistogramConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_wells.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_axis_display_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_axis_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_axis_display_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bin_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tooltip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visual_palette.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistogramConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
