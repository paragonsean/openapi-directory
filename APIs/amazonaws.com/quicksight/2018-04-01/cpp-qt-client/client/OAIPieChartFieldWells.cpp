/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPieChartFieldWells.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPieChartFieldWells::OAIPieChartFieldWells(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPieChartFieldWells::OAIPieChartFieldWells() {
    this->initializeModel();
}

OAIPieChartFieldWells::~OAIPieChartFieldWells() {}

void OAIPieChartFieldWells::initializeModel() {

    m_pie_chart_aggregated_field_wells_isSet = false;
    m_pie_chart_aggregated_field_wells_isValid = false;
}

void OAIPieChartFieldWells::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPieChartFieldWells::fromJsonObject(QJsonObject json) {

    m_pie_chart_aggregated_field_wells_isValid = ::OpenAPI::fromJsonValue(m_pie_chart_aggregated_field_wells, json[QString("PieChartAggregatedFieldWells")]);
    m_pie_chart_aggregated_field_wells_isSet = !json[QString("PieChartAggregatedFieldWells")].isNull() && m_pie_chart_aggregated_field_wells_isValid;
}

QString OAIPieChartFieldWells::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPieChartFieldWells::asJsonObject() const {
    QJsonObject obj;
    if (m_pie_chart_aggregated_field_wells.isSet()) {
        obj.insert(QString("PieChartAggregatedFieldWells"), ::OpenAPI::toJsonValue(m_pie_chart_aggregated_field_wells));
    }
    return obj;
}

OAIPieChartFieldWells_PieChartAggregatedFieldWells OAIPieChartFieldWells::getPieChartAggregatedFieldWells() const {
    return m_pie_chart_aggregated_field_wells;
}
void OAIPieChartFieldWells::setPieChartAggregatedFieldWells(const OAIPieChartFieldWells_PieChartAggregatedFieldWells &pie_chart_aggregated_field_wells) {
    m_pie_chart_aggregated_field_wells = pie_chart_aggregated_field_wells;
    m_pie_chart_aggregated_field_wells_isSet = true;
}

bool OAIPieChartFieldWells::is_pie_chart_aggregated_field_wells_Set() const{
    return m_pie_chart_aggregated_field_wells_isSet;
}

bool OAIPieChartFieldWells::is_pie_chart_aggregated_field_wells_Valid() const{
    return m_pie_chart_aggregated_field_wells_isValid;
}

bool OAIPieChartFieldWells::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pie_chart_aggregated_field_wells.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPieChartFieldWells::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
