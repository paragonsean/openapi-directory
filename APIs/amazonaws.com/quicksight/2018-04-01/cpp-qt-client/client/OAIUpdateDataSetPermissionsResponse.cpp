/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDataSetPermissionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDataSetPermissionsResponse::OAIUpdateDataSetPermissionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDataSetPermissionsResponse::OAIUpdateDataSetPermissionsResponse() {
    this->initializeModel();
}

OAIUpdateDataSetPermissionsResponse::~OAIUpdateDataSetPermissionsResponse() {}

void OAIUpdateDataSetPermissionsResponse::initializeModel() {

    m_data_set_arn_isSet = false;
    m_data_set_arn_isValid = false;

    m_data_set_id_isSet = false;
    m_data_set_id_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIUpdateDataSetPermissionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDataSetPermissionsResponse::fromJsonObject(QJsonObject json) {

    m_data_set_arn_isValid = ::OpenAPI::fromJsonValue(m_data_set_arn, json[QString("DataSetArn")]);
    m_data_set_arn_isSet = !json[QString("DataSetArn")].isNull() && m_data_set_arn_isValid;

    m_data_set_id_isValid = ::OpenAPI::fromJsonValue(m_data_set_id, json[QString("DataSetId")]);
    m_data_set_id_isSet = !json[QString("DataSetId")].isNull() && m_data_set_id_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIUpdateDataSetPermissionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDataSetPermissionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_data_set_arn_isSet) {
        obj.insert(QString("DataSetArn"), ::OpenAPI::toJsonValue(m_data_set_arn));
    }
    if (m_data_set_id_isSet) {
        obj.insert(QString("DataSetId"), ::OpenAPI::toJsonValue(m_data_set_id));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIUpdateDataSetPermissionsResponse::getDataSetArn() const {
    return m_data_set_arn;
}
void OAIUpdateDataSetPermissionsResponse::setDataSetArn(const QString &data_set_arn) {
    m_data_set_arn = data_set_arn;
    m_data_set_arn_isSet = true;
}

bool OAIUpdateDataSetPermissionsResponse::is_data_set_arn_Set() const{
    return m_data_set_arn_isSet;
}

bool OAIUpdateDataSetPermissionsResponse::is_data_set_arn_Valid() const{
    return m_data_set_arn_isValid;
}

QString OAIUpdateDataSetPermissionsResponse::getDataSetId() const {
    return m_data_set_id;
}
void OAIUpdateDataSetPermissionsResponse::setDataSetId(const QString &data_set_id) {
    m_data_set_id = data_set_id;
    m_data_set_id_isSet = true;
}

bool OAIUpdateDataSetPermissionsResponse::is_data_set_id_Set() const{
    return m_data_set_id_isSet;
}

bool OAIUpdateDataSetPermissionsResponse::is_data_set_id_Valid() const{
    return m_data_set_id_isValid;
}

QString OAIUpdateDataSetPermissionsResponse::getRequestId() const {
    return m_request_id;
}
void OAIUpdateDataSetPermissionsResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIUpdateDataSetPermissionsResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIUpdateDataSetPermissionsResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint32 OAIUpdateDataSetPermissionsResponse::getStatus() const {
    return m_status;
}
void OAIUpdateDataSetPermissionsResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateDataSetPermissionsResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateDataSetPermissionsResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIUpdateDataSetPermissionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_set_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDataSetPermissionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
