/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableConfiguration::OAITableConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableConfiguration::OAITableConfiguration() {
    this->initializeModel();
}

OAITableConfiguration::~OAITableConfiguration() {}

void OAITableConfiguration::initializeModel() {

    m_field_wells_isSet = false;
    m_field_wells_isValid = false;

    m_sort_configuration_isSet = false;
    m_sort_configuration_isValid = false;

    m_table_options_isSet = false;
    m_table_options_isValid = false;

    m_total_options_isSet = false;
    m_total_options_isValid = false;

    m_field_options_isSet = false;
    m_field_options_isValid = false;

    m_paginated_report_options_isSet = false;
    m_paginated_report_options_isValid = false;

    m_table_inline_visualizations_isSet = false;
    m_table_inline_visualizations_isValid = false;
}

void OAITableConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableConfiguration::fromJsonObject(QJsonObject json) {

    m_field_wells_isValid = ::OpenAPI::fromJsonValue(m_field_wells, json[QString("FieldWells")]);
    m_field_wells_isSet = !json[QString("FieldWells")].isNull() && m_field_wells_isValid;

    m_sort_configuration_isValid = ::OpenAPI::fromJsonValue(m_sort_configuration, json[QString("SortConfiguration")]);
    m_sort_configuration_isSet = !json[QString("SortConfiguration")].isNull() && m_sort_configuration_isValid;

    m_table_options_isValid = ::OpenAPI::fromJsonValue(m_table_options, json[QString("TableOptions")]);
    m_table_options_isSet = !json[QString("TableOptions")].isNull() && m_table_options_isValid;

    m_total_options_isValid = ::OpenAPI::fromJsonValue(m_total_options, json[QString("TotalOptions")]);
    m_total_options_isSet = !json[QString("TotalOptions")].isNull() && m_total_options_isValid;

    m_field_options_isValid = ::OpenAPI::fromJsonValue(m_field_options, json[QString("FieldOptions")]);
    m_field_options_isSet = !json[QString("FieldOptions")].isNull() && m_field_options_isValid;

    m_paginated_report_options_isValid = ::OpenAPI::fromJsonValue(m_paginated_report_options, json[QString("PaginatedReportOptions")]);
    m_paginated_report_options_isSet = !json[QString("PaginatedReportOptions")].isNull() && m_paginated_report_options_isValid;

    m_table_inline_visualizations_isValid = ::OpenAPI::fromJsonValue(m_table_inline_visualizations, json[QString("TableInlineVisualizations")]);
    m_table_inline_visualizations_isSet = !json[QString("TableInlineVisualizations")].isNull() && m_table_inline_visualizations_isValid;
}

QString OAITableConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_field_wells.isSet()) {
        obj.insert(QString("FieldWells"), ::OpenAPI::toJsonValue(m_field_wells));
    }
    if (m_sort_configuration.isSet()) {
        obj.insert(QString("SortConfiguration"), ::OpenAPI::toJsonValue(m_sort_configuration));
    }
    if (m_table_options.isSet()) {
        obj.insert(QString("TableOptions"), ::OpenAPI::toJsonValue(m_table_options));
    }
    if (m_total_options.isSet()) {
        obj.insert(QString("TotalOptions"), ::OpenAPI::toJsonValue(m_total_options));
    }
    if (m_field_options.isSet()) {
        obj.insert(QString("FieldOptions"), ::OpenAPI::toJsonValue(m_field_options));
    }
    if (m_paginated_report_options.isSet()) {
        obj.insert(QString("PaginatedReportOptions"), ::OpenAPI::toJsonValue(m_paginated_report_options));
    }
    if (m_table_inline_visualizations.isSet()) {
        obj.insert(QString("TableInlineVisualizations"), ::OpenAPI::toJsonValue(m_table_inline_visualizations));
    }
    return obj;
}

OAITableConfiguration_FieldWells OAITableConfiguration::getFieldWells() const {
    return m_field_wells;
}
void OAITableConfiguration::setFieldWells(const OAITableConfiguration_FieldWells &field_wells) {
    m_field_wells = field_wells;
    m_field_wells_isSet = true;
}

bool OAITableConfiguration::is_field_wells_Set() const{
    return m_field_wells_isSet;
}

bool OAITableConfiguration::is_field_wells_Valid() const{
    return m_field_wells_isValid;
}

OAITableConfiguration_SortConfiguration OAITableConfiguration::getSortConfiguration() const {
    return m_sort_configuration;
}
void OAITableConfiguration::setSortConfiguration(const OAITableConfiguration_SortConfiguration &sort_configuration) {
    m_sort_configuration = sort_configuration;
    m_sort_configuration_isSet = true;
}

bool OAITableConfiguration::is_sort_configuration_Set() const{
    return m_sort_configuration_isSet;
}

bool OAITableConfiguration::is_sort_configuration_Valid() const{
    return m_sort_configuration_isValid;
}

OAITableConfiguration_TableOptions OAITableConfiguration::getTableOptions() const {
    return m_table_options;
}
void OAITableConfiguration::setTableOptions(const OAITableConfiguration_TableOptions &table_options) {
    m_table_options = table_options;
    m_table_options_isSet = true;
}

bool OAITableConfiguration::is_table_options_Set() const{
    return m_table_options_isSet;
}

bool OAITableConfiguration::is_table_options_Valid() const{
    return m_table_options_isValid;
}

OAITableConfiguration_TotalOptions OAITableConfiguration::getTotalOptions() const {
    return m_total_options;
}
void OAITableConfiguration::setTotalOptions(const OAITableConfiguration_TotalOptions &total_options) {
    m_total_options = total_options;
    m_total_options_isSet = true;
}

bool OAITableConfiguration::is_total_options_Set() const{
    return m_total_options_isSet;
}

bool OAITableConfiguration::is_total_options_Valid() const{
    return m_total_options_isValid;
}

OAITableConfiguration_FieldOptions OAITableConfiguration::getFieldOptions() const {
    return m_field_options;
}
void OAITableConfiguration::setFieldOptions(const OAITableConfiguration_FieldOptions &field_options) {
    m_field_options = field_options;
    m_field_options_isSet = true;
}

bool OAITableConfiguration::is_field_options_Set() const{
    return m_field_options_isSet;
}

bool OAITableConfiguration::is_field_options_Valid() const{
    return m_field_options_isValid;
}

OAITableConfiguration_PaginatedReportOptions OAITableConfiguration::getPaginatedReportOptions() const {
    return m_paginated_report_options;
}
void OAITableConfiguration::setPaginatedReportOptions(const OAITableConfiguration_PaginatedReportOptions &paginated_report_options) {
    m_paginated_report_options = paginated_report_options;
    m_paginated_report_options_isSet = true;
}

bool OAITableConfiguration::is_paginated_report_options_Set() const{
    return m_paginated_report_options_isSet;
}

bool OAITableConfiguration::is_paginated_report_options_Valid() const{
    return m_paginated_report_options_isValid;
}

QList OAITableConfiguration::getTableInlineVisualizations() const {
    return m_table_inline_visualizations;
}
void OAITableConfiguration::setTableInlineVisualizations(const QList &table_inline_visualizations) {
    m_table_inline_visualizations = table_inline_visualizations;
    m_table_inline_visualizations_isSet = true;
}

bool OAITableConfiguration::is_table_inline_visualizations_Set() const{
    return m_table_inline_visualizations_isSet;
}

bool OAITableConfiguration::is_table_inline_visualizations_Valid() const{
    return m_table_inline_visualizations_isValid;
}

bool OAITableConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_wells.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_paginated_report_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_inline_visualizations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
