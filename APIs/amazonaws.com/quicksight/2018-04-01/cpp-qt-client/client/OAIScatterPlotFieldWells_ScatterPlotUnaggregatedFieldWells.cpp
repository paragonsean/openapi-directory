/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells::OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells::OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells() {
    this->initializeModel();
}

OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells::~OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells() {}

void OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells::initializeModel() {

    m_x_axis_isSet = false;
    m_x_axis_isValid = false;

    m_y_axis_isSet = false;
    m_y_axis_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;
}

void OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells::fromJsonObject(QJsonObject json) {

    m_x_axis_isValid = ::OpenAPI::fromJsonValue(m_x_axis, json[QString("XAxis")]);
    m_x_axis_isSet = !json[QString("XAxis")].isNull() && m_x_axis_isValid;

    m_y_axis_isValid = ::OpenAPI::fromJsonValue(m_y_axis, json[QString("YAxis")]);
    m_y_axis_isSet = !json[QString("YAxis")].isNull() && m_y_axis_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("Size")]);
    m_size_isSet = !json[QString("Size")].isNull() && m_size_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("Category")]);
    m_category_isSet = !json[QString("Category")].isNull() && m_category_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("Label")]);
    m_label_isSet = !json[QString("Label")].isNull() && m_label_isValid;
}

QString OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells::asJsonObject() const {
    QJsonObject obj;
    if (m_x_axis.isSet()) {
        obj.insert(QString("XAxis"), ::OpenAPI::toJsonValue(m_x_axis));
    }
    if (m_y_axis.isSet()) {
        obj.insert(QString("YAxis"), ::OpenAPI::toJsonValue(m_y_axis));
    }
    if (m_size.isSet()) {
        obj.insert(QString("Size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_category.isSet()) {
        obj.insert(QString("Category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_label.isSet()) {
        obj.insert(QString("Label"), ::OpenAPI::toJsonValue(m_label));
    }
    return obj;
}

QList OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells::getXAxis() const {
    return m_x_axis;
}
void OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells::setXAxis(const QList &x_axis) {
    m_x_axis = x_axis;
    m_x_axis_isSet = true;
}

bool OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells::is_x_axis_Set() const{
    return m_x_axis_isSet;
}

bool OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells::is_x_axis_Valid() const{
    return m_x_axis_isValid;
}

QList OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells::getYAxis() const {
    return m_y_axis;
}
void OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells::setYAxis(const QList &y_axis) {
    m_y_axis = y_axis;
    m_y_axis_isSet = true;
}

bool OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells::is_y_axis_Set() const{
    return m_y_axis_isSet;
}

bool OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells::is_y_axis_Valid() const{
    return m_y_axis_isValid;
}

QList OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells::getSize() const {
    return m_size;
}
void OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells::setSize(const QList &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells::is_size_Set() const{
    return m_size_isSet;
}

bool OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells::is_size_Valid() const{
    return m_size_isValid;
}

QList OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells::getCategory() const {
    return m_category;
}
void OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells::setCategory(const QList &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells::is_category_Set() const{
    return m_category_isSet;
}

bool OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells::is_category_Valid() const{
    return m_category_isValid;
}

QList OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells::getLabel() const {
    return m_label;
}
void OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells::setLabel(const QList &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells::is_label_Set() const{
    return m_label_isSet;
}

bool OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells::is_label_Valid() const{
    return m_label_isValid;
}

bool OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_x_axis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_axis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScatterPlotFieldWells_ScatterPlotUnaggregatedFieldWells::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
