/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplateSourceAnalysis.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplateSourceAnalysis::OAITemplateSourceAnalysis(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplateSourceAnalysis::OAITemplateSourceAnalysis() {
    this->initializeModel();
}

OAITemplateSourceAnalysis::~OAITemplateSourceAnalysis() {}

void OAITemplateSourceAnalysis::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_data_set_references_isSet = false;
    m_data_set_references_isValid = false;
}

void OAITemplateSourceAnalysis::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplateSourceAnalysis::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_data_set_references_isValid = ::OpenAPI::fromJsonValue(m_data_set_references, json[QString("DataSetReferences")]);
    m_data_set_references_isSet = !json[QString("DataSetReferences")].isNull() && m_data_set_references_isValid;
}

QString OAITemplateSourceAnalysis::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplateSourceAnalysis::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_data_set_references.isSet()) {
        obj.insert(QString("DataSetReferences"), ::OpenAPI::toJsonValue(m_data_set_references));
    }
    return obj;
}

QString OAITemplateSourceAnalysis::getArn() const {
    return m_arn;
}
void OAITemplateSourceAnalysis::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAITemplateSourceAnalysis::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAITemplateSourceAnalysis::is_arn_Valid() const{
    return m_arn_isValid;
}

QList OAITemplateSourceAnalysis::getDataSetReferences() const {
    return m_data_set_references;
}
void OAITemplateSourceAnalysis::setDataSetReferences(const QList &data_set_references) {
    m_data_set_references = data_set_references;
    m_data_set_references_isSet = true;
}

bool OAITemplateSourceAnalysis::is_data_set_references_Set() const{
    return m_data_set_references_isSet;
}

bool OAITemplateSourceAnalysis::is_data_set_references_Valid() const{
    return m_data_set_references_isValid;
}

bool OAITemplateSourceAnalysis::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_references.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplateSourceAnalysis::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && m_data_set_references_isValid && true;
}

} // namespace OpenAPI
