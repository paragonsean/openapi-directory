/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotTableConfiguration_FieldOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotTableConfiguration_FieldOptions::OAIPivotTableConfiguration_FieldOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotTableConfiguration_FieldOptions::OAIPivotTableConfiguration_FieldOptions() {
    this->initializeModel();
}

OAIPivotTableConfiguration_FieldOptions::~OAIPivotTableConfiguration_FieldOptions() {}

void OAIPivotTableConfiguration_FieldOptions::initializeModel() {

    m_selected_field_options_isSet = false;
    m_selected_field_options_isValid = false;

    m_data_path_options_isSet = false;
    m_data_path_options_isValid = false;

    m_collapse_state_options_isSet = false;
    m_collapse_state_options_isValid = false;
}

void OAIPivotTableConfiguration_FieldOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotTableConfiguration_FieldOptions::fromJsonObject(QJsonObject json) {

    m_selected_field_options_isValid = ::OpenAPI::fromJsonValue(m_selected_field_options, json[QString("SelectedFieldOptions")]);
    m_selected_field_options_isSet = !json[QString("SelectedFieldOptions")].isNull() && m_selected_field_options_isValid;

    m_data_path_options_isValid = ::OpenAPI::fromJsonValue(m_data_path_options, json[QString("DataPathOptions")]);
    m_data_path_options_isSet = !json[QString("DataPathOptions")].isNull() && m_data_path_options_isValid;

    m_collapse_state_options_isValid = ::OpenAPI::fromJsonValue(m_collapse_state_options, json[QString("CollapseStateOptions")]);
    m_collapse_state_options_isSet = !json[QString("CollapseStateOptions")].isNull() && m_collapse_state_options_isValid;
}

QString OAIPivotTableConfiguration_FieldOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotTableConfiguration_FieldOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_selected_field_options.isSet()) {
        obj.insert(QString("SelectedFieldOptions"), ::OpenAPI::toJsonValue(m_selected_field_options));
    }
    if (m_data_path_options.isSet()) {
        obj.insert(QString("DataPathOptions"), ::OpenAPI::toJsonValue(m_data_path_options));
    }
    if (m_collapse_state_options.isSet()) {
        obj.insert(QString("CollapseStateOptions"), ::OpenAPI::toJsonValue(m_collapse_state_options));
    }
    return obj;
}

QList OAIPivotTableConfiguration_FieldOptions::getSelectedFieldOptions() const {
    return m_selected_field_options;
}
void OAIPivotTableConfiguration_FieldOptions::setSelectedFieldOptions(const QList &selected_field_options) {
    m_selected_field_options = selected_field_options;
    m_selected_field_options_isSet = true;
}

bool OAIPivotTableConfiguration_FieldOptions::is_selected_field_options_Set() const{
    return m_selected_field_options_isSet;
}

bool OAIPivotTableConfiguration_FieldOptions::is_selected_field_options_Valid() const{
    return m_selected_field_options_isValid;
}

QList OAIPivotTableConfiguration_FieldOptions::getDataPathOptions() const {
    return m_data_path_options;
}
void OAIPivotTableConfiguration_FieldOptions::setDataPathOptions(const QList &data_path_options) {
    m_data_path_options = data_path_options;
    m_data_path_options_isSet = true;
}

bool OAIPivotTableConfiguration_FieldOptions::is_data_path_options_Set() const{
    return m_data_path_options_isSet;
}

bool OAIPivotTableConfiguration_FieldOptions::is_data_path_options_Valid() const{
    return m_data_path_options_isValid;
}

QList OAIPivotTableConfiguration_FieldOptions::getCollapseStateOptions() const {
    return m_collapse_state_options;
}
void OAIPivotTableConfiguration_FieldOptions::setCollapseStateOptions(const QList &collapse_state_options) {
    m_collapse_state_options = collapse_state_options;
    m_collapse_state_options_isSet = true;
}

bool OAIPivotTableConfiguration_FieldOptions::is_collapse_state_options_Set() const{
    return m_collapse_state_options_isSet;
}

bool OAIPivotTableConfiguration_FieldOptions::is_collapse_state_options_Valid() const{
    return m_collapse_state_options_isValid;
}

bool OAIPivotTableConfiguration_FieldOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_selected_field_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_path_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_collapse_state_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotTableConfiguration_FieldOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
