/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnapshotJobErrorInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnapshotJobErrorInfo::OAISnapshotJobErrorInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnapshotJobErrorInfo::OAISnapshotJobErrorInfo() {
    this->initializeModel();
}

OAISnapshotJobErrorInfo::~OAISnapshotJobErrorInfo() {}

void OAISnapshotJobErrorInfo::initializeModel() {

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_error_type_isSet = false;
    m_error_type_isValid = false;
}

void OAISnapshotJobErrorInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnapshotJobErrorInfo::fromJsonObject(QJsonObject json) {

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("ErrorMessage")]);
    m_error_message_isSet = !json[QString("ErrorMessage")].isNull() && m_error_message_isValid;

    m_error_type_isValid = ::OpenAPI::fromJsonValue(m_error_type, json[QString("ErrorType")]);
    m_error_type_isSet = !json[QString("ErrorType")].isNull() && m_error_type_isValid;
}

QString OAISnapshotJobErrorInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnapshotJobErrorInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_error_message_isSet) {
        obj.insert(QString("ErrorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_error_type_isSet) {
        obj.insert(QString("ErrorType"), ::OpenAPI::toJsonValue(m_error_type));
    }
    return obj;
}

QString OAISnapshotJobErrorInfo::getErrorMessage() const {
    return m_error_message;
}
void OAISnapshotJobErrorInfo::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAISnapshotJobErrorInfo::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAISnapshotJobErrorInfo::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAISnapshotJobErrorInfo::getErrorType() const {
    return m_error_type;
}
void OAISnapshotJobErrorInfo::setErrorType(const QString &error_type) {
    m_error_type = error_type;
    m_error_type_isSet = true;
}

bool OAISnapshotJobErrorInfo::is_error_type_Set() const{
    return m_error_type_isSet;
}

bool OAISnapshotJobErrorInfo::is_error_type_Valid() const{
    return m_error_type_isValid;
}

bool OAISnapshotJobErrorInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnapshotJobErrorInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
