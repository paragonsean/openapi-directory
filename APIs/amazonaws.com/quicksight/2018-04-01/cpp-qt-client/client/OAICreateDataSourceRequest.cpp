/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDataSourceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDataSourceRequest::OAICreateDataSourceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDataSourceRequest::OAICreateDataSourceRequest() {
    this->initializeModel();
}

OAICreateDataSourceRequest::~OAICreateDataSourceRequest() {}

void OAICreateDataSourceRequest::initializeModel() {

    m_data_source_id_isSet = false;
    m_data_source_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_data_source_parameters_isSet = false;
    m_data_source_parameters_isValid = false;

    m_credentials_isSet = false;
    m_credentials_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_vpc_connection_properties_isSet = false;
    m_vpc_connection_properties_isValid = false;

    m_ssl_properties_isSet = false;
    m_ssl_properties_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateDataSourceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDataSourceRequest::fromJsonObject(QJsonObject json) {

    m_data_source_id_isValid = ::OpenAPI::fromJsonValue(m_data_source_id, json[QString("DataSourceId")]);
    m_data_source_id_isSet = !json[QString("DataSourceId")].isNull() && m_data_source_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_data_source_parameters_isValid = ::OpenAPI::fromJsonValue(m_data_source_parameters, json[QString("DataSourceParameters")]);
    m_data_source_parameters_isSet = !json[QString("DataSourceParameters")].isNull() && m_data_source_parameters_isValid;

    m_credentials_isValid = ::OpenAPI::fromJsonValue(m_credentials, json[QString("Credentials")]);
    m_credentials_isSet = !json[QString("Credentials")].isNull() && m_credentials_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("Permissions")]);
    m_permissions_isSet = !json[QString("Permissions")].isNull() && m_permissions_isValid;

    m_vpc_connection_properties_isValid = ::OpenAPI::fromJsonValue(m_vpc_connection_properties, json[QString("VpcConnectionProperties")]);
    m_vpc_connection_properties_isSet = !json[QString("VpcConnectionProperties")].isNull() && m_vpc_connection_properties_isValid;

    m_ssl_properties_isValid = ::OpenAPI::fromJsonValue(m_ssl_properties, json[QString("SslProperties")]);
    m_ssl_properties_isSet = !json[QString("SslProperties")].isNull() && m_ssl_properties_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateDataSourceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDataSourceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_id_isSet) {
        obj.insert(QString("DataSourceId"), ::OpenAPI::toJsonValue(m_data_source_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_data_source_parameters.isSet()) {
        obj.insert(QString("DataSourceParameters"), ::OpenAPI::toJsonValue(m_data_source_parameters));
    }
    if (m_credentials.isSet()) {
        obj.insert(QString("Credentials"), ::OpenAPI::toJsonValue(m_credentials));
    }
    if (m_permissions.isSet()) {
        obj.insert(QString("Permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_vpc_connection_properties.isSet()) {
        obj.insert(QString("VpcConnectionProperties"), ::OpenAPI::toJsonValue(m_vpc_connection_properties));
    }
    if (m_ssl_properties.isSet()) {
        obj.insert(QString("SslProperties"), ::OpenAPI::toJsonValue(m_ssl_properties));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateDataSourceRequest::getDataSourceId() const {
    return m_data_source_id;
}
void OAICreateDataSourceRequest::setDataSourceId(const QString &data_source_id) {
    m_data_source_id = data_source_id;
    m_data_source_id_isSet = true;
}

bool OAICreateDataSourceRequest::is_data_source_id_Set() const{
    return m_data_source_id_isSet;
}

bool OAICreateDataSourceRequest::is_data_source_id_Valid() const{
    return m_data_source_id_isValid;
}

QString OAICreateDataSourceRequest::getName() const {
    return m_name;
}
void OAICreateDataSourceRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateDataSourceRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateDataSourceRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAIDataSourceType OAICreateDataSourceRequest::getType() const {
    return m_type;
}
void OAICreateDataSourceRequest::setType(const OAIDataSourceType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateDataSourceRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateDataSourceRequest::is_type_Valid() const{
    return m_type_isValid;
}

OAICreateDataSourceRequest_DataSourceParameters OAICreateDataSourceRequest::getDataSourceParameters() const {
    return m_data_source_parameters;
}
void OAICreateDataSourceRequest::setDataSourceParameters(const OAICreateDataSourceRequest_DataSourceParameters &data_source_parameters) {
    m_data_source_parameters = data_source_parameters;
    m_data_source_parameters_isSet = true;
}

bool OAICreateDataSourceRequest::is_data_source_parameters_Set() const{
    return m_data_source_parameters_isSet;
}

bool OAICreateDataSourceRequest::is_data_source_parameters_Valid() const{
    return m_data_source_parameters_isValid;
}

OAICreateDataSourceRequest_Credentials OAICreateDataSourceRequest::getCredentials() const {
    return m_credentials;
}
void OAICreateDataSourceRequest::setCredentials(const OAICreateDataSourceRequest_Credentials &credentials) {
    m_credentials = credentials;
    m_credentials_isSet = true;
}

bool OAICreateDataSourceRequest::is_credentials_Set() const{
    return m_credentials_isSet;
}

bool OAICreateDataSourceRequest::is_credentials_Valid() const{
    return m_credentials_isValid;
}

QList OAICreateDataSourceRequest::getPermissions() const {
    return m_permissions;
}
void OAICreateDataSourceRequest::setPermissions(const QList &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAICreateDataSourceRequest::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAICreateDataSourceRequest::is_permissions_Valid() const{
    return m_permissions_isValid;
}

OAICreateDataSourceRequest_VpcConnectionProperties OAICreateDataSourceRequest::getVpcConnectionProperties() const {
    return m_vpc_connection_properties;
}
void OAICreateDataSourceRequest::setVpcConnectionProperties(const OAICreateDataSourceRequest_VpcConnectionProperties &vpc_connection_properties) {
    m_vpc_connection_properties = vpc_connection_properties;
    m_vpc_connection_properties_isSet = true;
}

bool OAICreateDataSourceRequest::is_vpc_connection_properties_Set() const{
    return m_vpc_connection_properties_isSet;
}

bool OAICreateDataSourceRequest::is_vpc_connection_properties_Valid() const{
    return m_vpc_connection_properties_isValid;
}

OAICreateDataSourceRequest_SslProperties OAICreateDataSourceRequest::getSslProperties() const {
    return m_ssl_properties;
}
void OAICreateDataSourceRequest::setSslProperties(const OAICreateDataSourceRequest_SslProperties &ssl_properties) {
    m_ssl_properties = ssl_properties;
    m_ssl_properties_isSet = true;
}

bool OAICreateDataSourceRequest::is_ssl_properties_Set() const{
    return m_ssl_properties_isSet;
}

bool OAICreateDataSourceRequest::is_ssl_properties_Valid() const{
    return m_ssl_properties_isValid;
}

QList OAICreateDataSourceRequest::getTags() const {
    return m_tags;
}
void OAICreateDataSourceRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateDataSourceRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateDataSourceRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateDataSourceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_connection_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDataSourceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_source_id_isValid && m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
