/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatasetMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatasetMetadata::OAIDatasetMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatasetMetadata::OAIDatasetMetadata() {
    this->initializeModel();
}

OAIDatasetMetadata::~OAIDatasetMetadata() {}

void OAIDatasetMetadata::initializeModel() {

    m_dataset_arn_isSet = false;
    m_dataset_arn_isValid = false;

    m_dataset_name_isSet = false;
    m_dataset_name_isValid = false;

    m_dataset_description_isSet = false;
    m_dataset_description_isValid = false;

    m_data_aggregation_isSet = false;
    m_data_aggregation_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_calculated_fields_isSet = false;
    m_calculated_fields_isValid = false;

    m_named_entities_isSet = false;
    m_named_entities_isValid = false;
}

void OAIDatasetMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatasetMetadata::fromJsonObject(QJsonObject json) {

    m_dataset_arn_isValid = ::OpenAPI::fromJsonValue(m_dataset_arn, json[QString("DatasetArn")]);
    m_dataset_arn_isSet = !json[QString("DatasetArn")].isNull() && m_dataset_arn_isValid;

    m_dataset_name_isValid = ::OpenAPI::fromJsonValue(m_dataset_name, json[QString("DatasetName")]);
    m_dataset_name_isSet = !json[QString("DatasetName")].isNull() && m_dataset_name_isValid;

    m_dataset_description_isValid = ::OpenAPI::fromJsonValue(m_dataset_description, json[QString("DatasetDescription")]);
    m_dataset_description_isSet = !json[QString("DatasetDescription")].isNull() && m_dataset_description_isValid;

    m_data_aggregation_isValid = ::OpenAPI::fromJsonValue(m_data_aggregation, json[QString("DataAggregation")]);
    m_data_aggregation_isSet = !json[QString("DataAggregation")].isNull() && m_data_aggregation_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("Filters")]);
    m_filters_isSet = !json[QString("Filters")].isNull() && m_filters_isValid;

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("Columns")]);
    m_columns_isSet = !json[QString("Columns")].isNull() && m_columns_isValid;

    m_calculated_fields_isValid = ::OpenAPI::fromJsonValue(m_calculated_fields, json[QString("CalculatedFields")]);
    m_calculated_fields_isSet = !json[QString("CalculatedFields")].isNull() && m_calculated_fields_isValid;

    m_named_entities_isValid = ::OpenAPI::fromJsonValue(m_named_entities, json[QString("NamedEntities")]);
    m_named_entities_isSet = !json[QString("NamedEntities")].isNull() && m_named_entities_isValid;
}

QString OAIDatasetMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatasetMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset_arn_isSet) {
        obj.insert(QString("DatasetArn"), ::OpenAPI::toJsonValue(m_dataset_arn));
    }
    if (m_dataset_name_isSet) {
        obj.insert(QString("DatasetName"), ::OpenAPI::toJsonValue(m_dataset_name));
    }
    if (m_dataset_description_isSet) {
        obj.insert(QString("DatasetDescription"), ::OpenAPI::toJsonValue(m_dataset_description));
    }
    if (m_data_aggregation.isSet()) {
        obj.insert(QString("DataAggregation"), ::OpenAPI::toJsonValue(m_data_aggregation));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("Filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_columns.isSet()) {
        obj.insert(QString("Columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_calculated_fields.isSet()) {
        obj.insert(QString("CalculatedFields"), ::OpenAPI::toJsonValue(m_calculated_fields));
    }
    if (m_named_entities.isSet()) {
        obj.insert(QString("NamedEntities"), ::OpenAPI::toJsonValue(m_named_entities));
    }
    return obj;
}

QString OAIDatasetMetadata::getDatasetArn() const {
    return m_dataset_arn;
}
void OAIDatasetMetadata::setDatasetArn(const QString &dataset_arn) {
    m_dataset_arn = dataset_arn;
    m_dataset_arn_isSet = true;
}

bool OAIDatasetMetadata::is_dataset_arn_Set() const{
    return m_dataset_arn_isSet;
}

bool OAIDatasetMetadata::is_dataset_arn_Valid() const{
    return m_dataset_arn_isValid;
}

QString OAIDatasetMetadata::getDatasetName() const {
    return m_dataset_name;
}
void OAIDatasetMetadata::setDatasetName(const QString &dataset_name) {
    m_dataset_name = dataset_name;
    m_dataset_name_isSet = true;
}

bool OAIDatasetMetadata::is_dataset_name_Set() const{
    return m_dataset_name_isSet;
}

bool OAIDatasetMetadata::is_dataset_name_Valid() const{
    return m_dataset_name_isValid;
}

QString OAIDatasetMetadata::getDatasetDescription() const {
    return m_dataset_description;
}
void OAIDatasetMetadata::setDatasetDescription(const QString &dataset_description) {
    m_dataset_description = dataset_description;
    m_dataset_description_isSet = true;
}

bool OAIDatasetMetadata::is_dataset_description_Set() const{
    return m_dataset_description_isSet;
}

bool OAIDatasetMetadata::is_dataset_description_Valid() const{
    return m_dataset_description_isValid;
}

OAIDatasetMetadata_DataAggregation OAIDatasetMetadata::getDataAggregation() const {
    return m_data_aggregation;
}
void OAIDatasetMetadata::setDataAggregation(const OAIDatasetMetadata_DataAggregation &data_aggregation) {
    m_data_aggregation = data_aggregation;
    m_data_aggregation_isSet = true;
}

bool OAIDatasetMetadata::is_data_aggregation_Set() const{
    return m_data_aggregation_isSet;
}

bool OAIDatasetMetadata::is_data_aggregation_Valid() const{
    return m_data_aggregation_isValid;
}

QList OAIDatasetMetadata::getFilters() const {
    return m_filters;
}
void OAIDatasetMetadata::setFilters(const QList &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIDatasetMetadata::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIDatasetMetadata::is_filters_Valid() const{
    return m_filters_isValid;
}

QList OAIDatasetMetadata::getColumns() const {
    return m_columns;
}
void OAIDatasetMetadata::setColumns(const QList &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIDatasetMetadata::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIDatasetMetadata::is_columns_Valid() const{
    return m_columns_isValid;
}

QList OAIDatasetMetadata::getCalculatedFields() const {
    return m_calculated_fields;
}
void OAIDatasetMetadata::setCalculatedFields(const QList &calculated_fields) {
    m_calculated_fields = calculated_fields;
    m_calculated_fields_isSet = true;
}

bool OAIDatasetMetadata::is_calculated_fields_Set() const{
    return m_calculated_fields_isSet;
}

bool OAIDatasetMetadata::is_calculated_fields_Valid() const{
    return m_calculated_fields_isValid;
}

QList OAIDatasetMetadata::getNamedEntities() const {
    return m_named_entities;
}
void OAIDatasetMetadata::setNamedEntities(const QList &named_entities) {
    m_named_entities = named_entities;
    m_named_entities_isSet = true;
}

bool OAIDatasetMetadata::is_named_entities_Set() const{
    return m_named_entities_isSet;
}

bool OAIDatasetMetadata::is_named_entities_Valid() const{
    return m_named_entities_isValid;
}

bool OAIDatasetMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_aggregation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_calculated_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_named_entities.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatasetMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dataset_arn_isValid && true;
}

} // namespace OpenAPI
