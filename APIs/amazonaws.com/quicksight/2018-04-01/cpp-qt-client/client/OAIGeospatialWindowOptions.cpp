/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeospatialWindowOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeospatialWindowOptions::OAIGeospatialWindowOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeospatialWindowOptions::OAIGeospatialWindowOptions() {
    this->initializeModel();
}

OAIGeospatialWindowOptions::~OAIGeospatialWindowOptions() {}

void OAIGeospatialWindowOptions::initializeModel() {

    m_bounds_isSet = false;
    m_bounds_isValid = false;

    m_map_zoom_mode_isSet = false;
    m_map_zoom_mode_isValid = false;
}

void OAIGeospatialWindowOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeospatialWindowOptions::fromJsonObject(QJsonObject json) {

    m_bounds_isValid = ::OpenAPI::fromJsonValue(m_bounds, json[QString("Bounds")]);
    m_bounds_isSet = !json[QString("Bounds")].isNull() && m_bounds_isValid;

    m_map_zoom_mode_isValid = ::OpenAPI::fromJsonValue(m_map_zoom_mode, json[QString("MapZoomMode")]);
    m_map_zoom_mode_isSet = !json[QString("MapZoomMode")].isNull() && m_map_zoom_mode_isValid;
}

QString OAIGeospatialWindowOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeospatialWindowOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_bounds.isSet()) {
        obj.insert(QString("Bounds"), ::OpenAPI::toJsonValue(m_bounds));
    }
    if (m_map_zoom_mode.isSet()) {
        obj.insert(QString("MapZoomMode"), ::OpenAPI::toJsonValue(m_map_zoom_mode));
    }
    return obj;
}

OAIGeospatialWindowOptions_Bounds OAIGeospatialWindowOptions::getBounds() const {
    return m_bounds;
}
void OAIGeospatialWindowOptions::setBounds(const OAIGeospatialWindowOptions_Bounds &bounds) {
    m_bounds = bounds;
    m_bounds_isSet = true;
}

bool OAIGeospatialWindowOptions::is_bounds_Set() const{
    return m_bounds_isSet;
}

bool OAIGeospatialWindowOptions::is_bounds_Valid() const{
    return m_bounds_isValid;
}

OAIMapZoomMode OAIGeospatialWindowOptions::getMapZoomMode() const {
    return m_map_zoom_mode;
}
void OAIGeospatialWindowOptions::setMapZoomMode(const OAIMapZoomMode &map_zoom_mode) {
    m_map_zoom_mode = map_zoom_mode;
    m_map_zoom_mode_isSet = true;
}

bool OAIGeospatialWindowOptions::is_map_zoom_mode_Set() const{
    return m_map_zoom_mode_isSet;
}

bool OAIGeospatialWindowOptions::is_map_zoom_mode_Valid() const{
    return m_map_zoom_mode_isValid;
}

bool OAIGeospatialWindowOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bounds.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_zoom_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeospatialWindowOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
