/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFunnelChartConfiguration_DataLabelOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFunnelChartConfiguration_DataLabelOptions::OAIFunnelChartConfiguration_DataLabelOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFunnelChartConfiguration_DataLabelOptions::OAIFunnelChartConfiguration_DataLabelOptions() {
    this->initializeModel();
}

OAIFunnelChartConfiguration_DataLabelOptions::~OAIFunnelChartConfiguration_DataLabelOptions() {}

void OAIFunnelChartConfiguration_DataLabelOptions::initializeModel() {

    m_visibility_isSet = false;
    m_visibility_isValid = false;

    m_category_label_visibility_isSet = false;
    m_category_label_visibility_isValid = false;

    m_measure_label_visibility_isSet = false;
    m_measure_label_visibility_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_label_font_configuration_isSet = false;
    m_label_font_configuration_isValid = false;

    m_label_color_isSet = false;
    m_label_color_isValid = false;

    m_measure_data_label_style_isSet = false;
    m_measure_data_label_style_isValid = false;
}

void OAIFunnelChartConfiguration_DataLabelOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFunnelChartConfiguration_DataLabelOptions::fromJsonObject(QJsonObject json) {

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("Visibility")]);
    m_visibility_isSet = !json[QString("Visibility")].isNull() && m_visibility_isValid;

    m_category_label_visibility_isValid = ::OpenAPI::fromJsonValue(m_category_label_visibility, json[QString("CategoryLabelVisibility")]);
    m_category_label_visibility_isSet = !json[QString("CategoryLabelVisibility")].isNull() && m_category_label_visibility_isValid;

    m_measure_label_visibility_isValid = ::OpenAPI::fromJsonValue(m_measure_label_visibility, json[QString("MeasureLabelVisibility")]);
    m_measure_label_visibility_isSet = !json[QString("MeasureLabelVisibility")].isNull() && m_measure_label_visibility_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_label_font_configuration_isValid = ::OpenAPI::fromJsonValue(m_label_font_configuration, json[QString("LabelFontConfiguration")]);
    m_label_font_configuration_isSet = !json[QString("LabelFontConfiguration")].isNull() && m_label_font_configuration_isValid;

    m_label_color_isValid = ::OpenAPI::fromJsonValue(m_label_color, json[QString("LabelColor")]);
    m_label_color_isSet = !json[QString("LabelColor")].isNull() && m_label_color_isValid;

    m_measure_data_label_style_isValid = ::OpenAPI::fromJsonValue(m_measure_data_label_style, json[QString("MeasureDataLabelStyle")]);
    m_measure_data_label_style_isSet = !json[QString("MeasureDataLabelStyle")].isNull() && m_measure_data_label_style_isValid;
}

QString OAIFunnelChartConfiguration_DataLabelOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFunnelChartConfiguration_DataLabelOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_visibility.isSet()) {
        obj.insert(QString("Visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    if (m_category_label_visibility.isSet()) {
        obj.insert(QString("CategoryLabelVisibility"), ::OpenAPI::toJsonValue(m_category_label_visibility));
    }
    if (m_measure_label_visibility.isSet()) {
        obj.insert(QString("MeasureLabelVisibility"), ::OpenAPI::toJsonValue(m_measure_label_visibility));
    }
    if (m_position.isSet()) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_label_font_configuration.isSet()) {
        obj.insert(QString("LabelFontConfiguration"), ::OpenAPI::toJsonValue(m_label_font_configuration));
    }
    if (m_label_color_isSet) {
        obj.insert(QString("LabelColor"), ::OpenAPI::toJsonValue(m_label_color));
    }
    if (m_measure_data_label_style.isSet()) {
        obj.insert(QString("MeasureDataLabelStyle"), ::OpenAPI::toJsonValue(m_measure_data_label_style));
    }
    return obj;
}

OAIVisibility OAIFunnelChartConfiguration_DataLabelOptions::getVisibility() const {
    return m_visibility;
}
void OAIFunnelChartConfiguration_DataLabelOptions::setVisibility(const OAIVisibility &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIFunnelChartConfiguration_DataLabelOptions::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIFunnelChartConfiguration_DataLabelOptions::is_visibility_Valid() const{
    return m_visibility_isValid;
}

OAIVisibility OAIFunnelChartConfiguration_DataLabelOptions::getCategoryLabelVisibility() const {
    return m_category_label_visibility;
}
void OAIFunnelChartConfiguration_DataLabelOptions::setCategoryLabelVisibility(const OAIVisibility &category_label_visibility) {
    m_category_label_visibility = category_label_visibility;
    m_category_label_visibility_isSet = true;
}

bool OAIFunnelChartConfiguration_DataLabelOptions::is_category_label_visibility_Set() const{
    return m_category_label_visibility_isSet;
}

bool OAIFunnelChartConfiguration_DataLabelOptions::is_category_label_visibility_Valid() const{
    return m_category_label_visibility_isValid;
}

OAIVisibility OAIFunnelChartConfiguration_DataLabelOptions::getMeasureLabelVisibility() const {
    return m_measure_label_visibility;
}
void OAIFunnelChartConfiguration_DataLabelOptions::setMeasureLabelVisibility(const OAIVisibility &measure_label_visibility) {
    m_measure_label_visibility = measure_label_visibility;
    m_measure_label_visibility_isSet = true;
}

bool OAIFunnelChartConfiguration_DataLabelOptions::is_measure_label_visibility_Set() const{
    return m_measure_label_visibility_isSet;
}

bool OAIFunnelChartConfiguration_DataLabelOptions::is_measure_label_visibility_Valid() const{
    return m_measure_label_visibility_isValid;
}

OAIDataLabelPosition OAIFunnelChartConfiguration_DataLabelOptions::getPosition() const {
    return m_position;
}
void OAIFunnelChartConfiguration_DataLabelOptions::setPosition(const OAIDataLabelPosition &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIFunnelChartConfiguration_DataLabelOptions::is_position_Set() const{
    return m_position_isSet;
}

bool OAIFunnelChartConfiguration_DataLabelOptions::is_position_Valid() const{
    return m_position_isValid;
}

OAIFunnelChartDataLabelOptions_LabelFontConfiguration OAIFunnelChartConfiguration_DataLabelOptions::getLabelFontConfiguration() const {
    return m_label_font_configuration;
}
void OAIFunnelChartConfiguration_DataLabelOptions::setLabelFontConfiguration(const OAIFunnelChartDataLabelOptions_LabelFontConfiguration &label_font_configuration) {
    m_label_font_configuration = label_font_configuration;
    m_label_font_configuration_isSet = true;
}

bool OAIFunnelChartConfiguration_DataLabelOptions::is_label_font_configuration_Set() const{
    return m_label_font_configuration_isSet;
}

bool OAIFunnelChartConfiguration_DataLabelOptions::is_label_font_configuration_Valid() const{
    return m_label_font_configuration_isValid;
}

QString OAIFunnelChartConfiguration_DataLabelOptions::getLabelColor() const {
    return m_label_color;
}
void OAIFunnelChartConfiguration_DataLabelOptions::setLabelColor(const QString &label_color) {
    m_label_color = label_color;
    m_label_color_isSet = true;
}

bool OAIFunnelChartConfiguration_DataLabelOptions::is_label_color_Set() const{
    return m_label_color_isSet;
}

bool OAIFunnelChartConfiguration_DataLabelOptions::is_label_color_Valid() const{
    return m_label_color_isValid;
}

OAIFunnelChartMeasureDataLabelStyle OAIFunnelChartConfiguration_DataLabelOptions::getMeasureDataLabelStyle() const {
    return m_measure_data_label_style;
}
void OAIFunnelChartConfiguration_DataLabelOptions::setMeasureDataLabelStyle(const OAIFunnelChartMeasureDataLabelStyle &measure_data_label_style) {
    m_measure_data_label_style = measure_data_label_style;
    m_measure_data_label_style_isSet = true;
}

bool OAIFunnelChartConfiguration_DataLabelOptions::is_measure_data_label_style_Set() const{
    return m_measure_data_label_style_isSet;
}

bool OAIFunnelChartConfiguration_DataLabelOptions::is_measure_data_label_style_Valid() const{
    return m_measure_data_label_style_isValid;
}

bool OAIFunnelChartConfiguration_DataLabelOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_label_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_measure_label_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_font_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measure_data_label_style.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFunnelChartConfiguration_DataLabelOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
