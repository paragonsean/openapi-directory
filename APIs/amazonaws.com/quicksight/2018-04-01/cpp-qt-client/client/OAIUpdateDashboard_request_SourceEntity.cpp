/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDashboard_request_SourceEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDashboard_request_SourceEntity::OAIUpdateDashboard_request_SourceEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDashboard_request_SourceEntity::OAIUpdateDashboard_request_SourceEntity() {
    this->initializeModel();
}

OAIUpdateDashboard_request_SourceEntity::~OAIUpdateDashboard_request_SourceEntity() {}

void OAIUpdateDashboard_request_SourceEntity::initializeModel() {

    m_source_template_isSet = false;
    m_source_template_isValid = false;
}

void OAIUpdateDashboard_request_SourceEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDashboard_request_SourceEntity::fromJsonObject(QJsonObject json) {

    m_source_template_isValid = ::OpenAPI::fromJsonValue(m_source_template, json[QString("SourceTemplate")]);
    m_source_template_isSet = !json[QString("SourceTemplate")].isNull() && m_source_template_isValid;
}

QString OAIUpdateDashboard_request_SourceEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDashboard_request_SourceEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_source_template.isSet()) {
        obj.insert(QString("SourceTemplate"), ::OpenAPI::toJsonValue(m_source_template));
    }
    return obj;
}

OAIUpdateDashboard_request_SourceEntity_SourceTemplate OAIUpdateDashboard_request_SourceEntity::getSourceTemplate() const {
    return m_source_template;
}
void OAIUpdateDashboard_request_SourceEntity::setSourceTemplate(const OAIUpdateDashboard_request_SourceEntity_SourceTemplate &source_template) {
    m_source_template = source_template;
    m_source_template_isSet = true;
}

bool OAIUpdateDashboard_request_SourceEntity::is_source_template_Set() const{
    return m_source_template_isSet;
}

bool OAIUpdateDashboard_request_SourceEntity::is_source_template_Valid() const{
    return m_source_template_isValid;
}

bool OAIUpdateDashboard_request_SourceEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_template.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDashboard_request_SourceEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
