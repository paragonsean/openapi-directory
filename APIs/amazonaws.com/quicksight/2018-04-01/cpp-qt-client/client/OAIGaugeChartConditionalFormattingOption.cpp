/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGaugeChartConditionalFormattingOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGaugeChartConditionalFormattingOption::OAIGaugeChartConditionalFormattingOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGaugeChartConditionalFormattingOption::OAIGaugeChartConditionalFormattingOption() {
    this->initializeModel();
}

OAIGaugeChartConditionalFormattingOption::~OAIGaugeChartConditionalFormattingOption() {}

void OAIGaugeChartConditionalFormattingOption::initializeModel() {

    m_primary_value_isSet = false;
    m_primary_value_isValid = false;

    m_arc_isSet = false;
    m_arc_isValid = false;
}

void OAIGaugeChartConditionalFormattingOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGaugeChartConditionalFormattingOption::fromJsonObject(QJsonObject json) {

    m_primary_value_isValid = ::OpenAPI::fromJsonValue(m_primary_value, json[QString("PrimaryValue")]);
    m_primary_value_isSet = !json[QString("PrimaryValue")].isNull() && m_primary_value_isValid;

    m_arc_isValid = ::OpenAPI::fromJsonValue(m_arc, json[QString("Arc")]);
    m_arc_isSet = !json[QString("Arc")].isNull() && m_arc_isValid;
}

QString OAIGaugeChartConditionalFormattingOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGaugeChartConditionalFormattingOption::asJsonObject() const {
    QJsonObject obj;
    if (m_primary_value.isSet()) {
        obj.insert(QString("PrimaryValue"), ::OpenAPI::toJsonValue(m_primary_value));
    }
    if (m_arc.isSet()) {
        obj.insert(QString("Arc"), ::OpenAPI::toJsonValue(m_arc));
    }
    return obj;
}

OAIGaugeChartConditionalFormattingOption_PrimaryValue OAIGaugeChartConditionalFormattingOption::getPrimaryValue() const {
    return m_primary_value;
}
void OAIGaugeChartConditionalFormattingOption::setPrimaryValue(const OAIGaugeChartConditionalFormattingOption_PrimaryValue &primary_value) {
    m_primary_value = primary_value;
    m_primary_value_isSet = true;
}

bool OAIGaugeChartConditionalFormattingOption::is_primary_value_Set() const{
    return m_primary_value_isSet;
}

bool OAIGaugeChartConditionalFormattingOption::is_primary_value_Valid() const{
    return m_primary_value_isValid;
}

OAIGaugeChartConditionalFormattingOption_Arc OAIGaugeChartConditionalFormattingOption::getArc() const {
    return m_arc;
}
void OAIGaugeChartConditionalFormattingOption::setArc(const OAIGaugeChartConditionalFormattingOption_Arc &arc) {
    m_arc = arc;
    m_arc_isSet = true;
}

bool OAIGaugeChartConditionalFormattingOption::is_arc_Set() const{
    return m_arc_isSet;
}

bool OAIGaugeChartConditionalFormattingOption::is_arc_Valid() const{
    return m_arc_isValid;
}

bool OAIGaugeChartConditionalFormattingOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_primary_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arc.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGaugeChartConditionalFormattingOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
