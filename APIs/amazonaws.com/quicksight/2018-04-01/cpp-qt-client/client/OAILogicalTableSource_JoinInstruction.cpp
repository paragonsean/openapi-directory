/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogicalTableSource_JoinInstruction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogicalTableSource_JoinInstruction::OAILogicalTableSource_JoinInstruction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogicalTableSource_JoinInstruction::OAILogicalTableSource_JoinInstruction() {
    this->initializeModel();
}

OAILogicalTableSource_JoinInstruction::~OAILogicalTableSource_JoinInstruction() {}

void OAILogicalTableSource_JoinInstruction::initializeModel() {

    m_left_operand_isSet = false;
    m_left_operand_isValid = false;

    m_right_operand_isSet = false;
    m_right_operand_isValid = false;

    m_left_join_key_properties_isSet = false;
    m_left_join_key_properties_isValid = false;

    m_right_join_key_properties_isSet = false;
    m_right_join_key_properties_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_on_clause_isSet = false;
    m_on_clause_isValid = false;
}

void OAILogicalTableSource_JoinInstruction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogicalTableSource_JoinInstruction::fromJsonObject(QJsonObject json) {

    m_left_operand_isValid = ::OpenAPI::fromJsonValue(m_left_operand, json[QString("LeftOperand")]);
    m_left_operand_isSet = !json[QString("LeftOperand")].isNull() && m_left_operand_isValid;

    m_right_operand_isValid = ::OpenAPI::fromJsonValue(m_right_operand, json[QString("RightOperand")]);
    m_right_operand_isSet = !json[QString("RightOperand")].isNull() && m_right_operand_isValid;

    m_left_join_key_properties_isValid = ::OpenAPI::fromJsonValue(m_left_join_key_properties, json[QString("LeftJoinKeyProperties")]);
    m_left_join_key_properties_isSet = !json[QString("LeftJoinKeyProperties")].isNull() && m_left_join_key_properties_isValid;

    m_right_join_key_properties_isValid = ::OpenAPI::fromJsonValue(m_right_join_key_properties, json[QString("RightJoinKeyProperties")]);
    m_right_join_key_properties_isSet = !json[QString("RightJoinKeyProperties")].isNull() && m_right_join_key_properties_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_on_clause_isValid = ::OpenAPI::fromJsonValue(m_on_clause, json[QString("OnClause")]);
    m_on_clause_isSet = !json[QString("OnClause")].isNull() && m_on_clause_isValid;
}

QString OAILogicalTableSource_JoinInstruction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogicalTableSource_JoinInstruction::asJsonObject() const {
    QJsonObject obj;
    if (m_left_operand_isSet) {
        obj.insert(QString("LeftOperand"), ::OpenAPI::toJsonValue(m_left_operand));
    }
    if (m_right_operand_isSet) {
        obj.insert(QString("RightOperand"), ::OpenAPI::toJsonValue(m_right_operand));
    }
    if (m_left_join_key_properties.isSet()) {
        obj.insert(QString("LeftJoinKeyProperties"), ::OpenAPI::toJsonValue(m_left_join_key_properties));
    }
    if (m_right_join_key_properties.isSet()) {
        obj.insert(QString("RightJoinKeyProperties"), ::OpenAPI::toJsonValue(m_right_join_key_properties));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_on_clause_isSet) {
        obj.insert(QString("OnClause"), ::OpenAPI::toJsonValue(m_on_clause));
    }
    return obj;
}

QString OAILogicalTableSource_JoinInstruction::getLeftOperand() const {
    return m_left_operand;
}
void OAILogicalTableSource_JoinInstruction::setLeftOperand(const QString &left_operand) {
    m_left_operand = left_operand;
    m_left_operand_isSet = true;
}

bool OAILogicalTableSource_JoinInstruction::is_left_operand_Set() const{
    return m_left_operand_isSet;
}

bool OAILogicalTableSource_JoinInstruction::is_left_operand_Valid() const{
    return m_left_operand_isValid;
}

QString OAILogicalTableSource_JoinInstruction::getRightOperand() const {
    return m_right_operand;
}
void OAILogicalTableSource_JoinInstruction::setRightOperand(const QString &right_operand) {
    m_right_operand = right_operand;
    m_right_operand_isSet = true;
}

bool OAILogicalTableSource_JoinInstruction::is_right_operand_Set() const{
    return m_right_operand_isSet;
}

bool OAILogicalTableSource_JoinInstruction::is_right_operand_Valid() const{
    return m_right_operand_isValid;
}

OAIJoinInstruction_LeftJoinKeyProperties OAILogicalTableSource_JoinInstruction::getLeftJoinKeyProperties() const {
    return m_left_join_key_properties;
}
void OAILogicalTableSource_JoinInstruction::setLeftJoinKeyProperties(const OAIJoinInstruction_LeftJoinKeyProperties &left_join_key_properties) {
    m_left_join_key_properties = left_join_key_properties;
    m_left_join_key_properties_isSet = true;
}

bool OAILogicalTableSource_JoinInstruction::is_left_join_key_properties_Set() const{
    return m_left_join_key_properties_isSet;
}

bool OAILogicalTableSource_JoinInstruction::is_left_join_key_properties_Valid() const{
    return m_left_join_key_properties_isValid;
}

OAIJoinInstruction_RightJoinKeyProperties OAILogicalTableSource_JoinInstruction::getRightJoinKeyProperties() const {
    return m_right_join_key_properties;
}
void OAILogicalTableSource_JoinInstruction::setRightJoinKeyProperties(const OAIJoinInstruction_RightJoinKeyProperties &right_join_key_properties) {
    m_right_join_key_properties = right_join_key_properties;
    m_right_join_key_properties_isSet = true;
}

bool OAILogicalTableSource_JoinInstruction::is_right_join_key_properties_Set() const{
    return m_right_join_key_properties_isSet;
}

bool OAILogicalTableSource_JoinInstruction::is_right_join_key_properties_Valid() const{
    return m_right_join_key_properties_isValid;
}

OAIJoinType OAILogicalTableSource_JoinInstruction::getType() const {
    return m_type;
}
void OAILogicalTableSource_JoinInstruction::setType(const OAIJoinType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILogicalTableSource_JoinInstruction::is_type_Set() const{
    return m_type_isSet;
}

bool OAILogicalTableSource_JoinInstruction::is_type_Valid() const{
    return m_type_isValid;
}

QString OAILogicalTableSource_JoinInstruction::getOnClause() const {
    return m_on_clause;
}
void OAILogicalTableSource_JoinInstruction::setOnClause(const QString &on_clause) {
    m_on_clause = on_clause;
    m_on_clause_isSet = true;
}

bool OAILogicalTableSource_JoinInstruction::is_on_clause_Set() const{
    return m_on_clause_isSet;
}

bool OAILogicalTableSource_JoinInstruction::is_on_clause_Valid() const{
    return m_on_clause_isValid;
}

bool OAILogicalTableSource_JoinInstruction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_left_operand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_right_operand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_left_join_key_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_right_join_key_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_clause_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogicalTableSource_JoinInstruction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_left_operand_isValid && m_right_operand_isValid && m_type_isValid && m_on_clause_isValid && true;
}

} // namespace OpenAPI
