/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISectionLayoutConfiguration_FreeFormLayout.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISectionLayoutConfiguration_FreeFormLayout::OAISectionLayoutConfiguration_FreeFormLayout(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISectionLayoutConfiguration_FreeFormLayout::OAISectionLayoutConfiguration_FreeFormLayout() {
    this->initializeModel();
}

OAISectionLayoutConfiguration_FreeFormLayout::~OAISectionLayoutConfiguration_FreeFormLayout() {}

void OAISectionLayoutConfiguration_FreeFormLayout::initializeModel() {

    m_elements_isSet = false;
    m_elements_isValid = false;
}

void OAISectionLayoutConfiguration_FreeFormLayout::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISectionLayoutConfiguration_FreeFormLayout::fromJsonObject(QJsonObject json) {

    m_elements_isValid = ::OpenAPI::fromJsonValue(m_elements, json[QString("Elements")]);
    m_elements_isSet = !json[QString("Elements")].isNull() && m_elements_isValid;
}

QString OAISectionLayoutConfiguration_FreeFormLayout::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISectionLayoutConfiguration_FreeFormLayout::asJsonObject() const {
    QJsonObject obj;
    if (m_elements.isSet()) {
        obj.insert(QString("Elements"), ::OpenAPI::toJsonValue(m_elements));
    }
    return obj;
}

QList OAISectionLayoutConfiguration_FreeFormLayout::getElements() const {
    return m_elements;
}
void OAISectionLayoutConfiguration_FreeFormLayout::setElements(const QList &elements) {
    m_elements = elements;
    m_elements_isSet = true;
}

bool OAISectionLayoutConfiguration_FreeFormLayout::is_elements_Set() const{
    return m_elements_isSet;
}

bool OAISectionLayoutConfiguration_FreeFormLayout::is_elements_Valid() const{
    return m_elements_isValid;
}

bool OAISectionLayoutConfiguration_FreeFormLayout::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_elements.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISectionLayoutConfiguration_FreeFormLayout::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_elements_isValid && true;
}

} // namespace OpenAPI
