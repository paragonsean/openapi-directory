/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeospatialPointStyleOptions_ClusterMarkerConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeospatialPointStyleOptions_ClusterMarkerConfiguration::OAIGeospatialPointStyleOptions_ClusterMarkerConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeospatialPointStyleOptions_ClusterMarkerConfiguration::OAIGeospatialPointStyleOptions_ClusterMarkerConfiguration() {
    this->initializeModel();
}

OAIGeospatialPointStyleOptions_ClusterMarkerConfiguration::~OAIGeospatialPointStyleOptions_ClusterMarkerConfiguration() {}

void OAIGeospatialPointStyleOptions_ClusterMarkerConfiguration::initializeModel() {

    m_cluster_marker_isSet = false;
    m_cluster_marker_isValid = false;
}

void OAIGeospatialPointStyleOptions_ClusterMarkerConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeospatialPointStyleOptions_ClusterMarkerConfiguration::fromJsonObject(QJsonObject json) {

    m_cluster_marker_isValid = ::OpenAPI::fromJsonValue(m_cluster_marker, json[QString("ClusterMarker")]);
    m_cluster_marker_isSet = !json[QString("ClusterMarker")].isNull() && m_cluster_marker_isValid;
}

QString OAIGeospatialPointStyleOptions_ClusterMarkerConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeospatialPointStyleOptions_ClusterMarkerConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_marker.isSet()) {
        obj.insert(QString("ClusterMarker"), ::OpenAPI::toJsonValue(m_cluster_marker));
    }
    return obj;
}

OAIClusterMarkerConfiguration_ClusterMarker OAIGeospatialPointStyleOptions_ClusterMarkerConfiguration::getClusterMarker() const {
    return m_cluster_marker;
}
void OAIGeospatialPointStyleOptions_ClusterMarkerConfiguration::setClusterMarker(const OAIClusterMarkerConfiguration_ClusterMarker &cluster_marker) {
    m_cluster_marker = cluster_marker;
    m_cluster_marker_isSet = true;
}

bool OAIGeospatialPointStyleOptions_ClusterMarkerConfiguration::is_cluster_marker_Set() const{
    return m_cluster_marker_isSet;
}

bool OAIGeospatialPointStyleOptions_ClusterMarkerConfiguration::is_cluster_marker_Valid() const{
    return m_cluster_marker_isValid;
}

bool OAIGeospatialPointStyleOptions_ClusterMarkerConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_marker.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeospatialPointStyleOptions_ClusterMarkerConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
