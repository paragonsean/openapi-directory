/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScatterPlotConfiguration_YAxisLabelOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScatterPlotConfiguration_YAxisLabelOptions::OAIScatterPlotConfiguration_YAxisLabelOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScatterPlotConfiguration_YAxisLabelOptions::OAIScatterPlotConfiguration_YAxisLabelOptions() {
    this->initializeModel();
}

OAIScatterPlotConfiguration_YAxisLabelOptions::~OAIScatterPlotConfiguration_YAxisLabelOptions() {}

void OAIScatterPlotConfiguration_YAxisLabelOptions::initializeModel() {

    m_visibility_isSet = false;
    m_visibility_isValid = false;

    m_sort_icon_visibility_isSet = false;
    m_sort_icon_visibility_isValid = false;

    m_axis_label_options_isSet = false;
    m_axis_label_options_isValid = false;
}

void OAIScatterPlotConfiguration_YAxisLabelOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScatterPlotConfiguration_YAxisLabelOptions::fromJsonObject(QJsonObject json) {

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("Visibility")]);
    m_visibility_isSet = !json[QString("Visibility")].isNull() && m_visibility_isValid;

    m_sort_icon_visibility_isValid = ::OpenAPI::fromJsonValue(m_sort_icon_visibility, json[QString("SortIconVisibility")]);
    m_sort_icon_visibility_isSet = !json[QString("SortIconVisibility")].isNull() && m_sort_icon_visibility_isValid;

    m_axis_label_options_isValid = ::OpenAPI::fromJsonValue(m_axis_label_options, json[QString("AxisLabelOptions")]);
    m_axis_label_options_isSet = !json[QString("AxisLabelOptions")].isNull() && m_axis_label_options_isValid;
}

QString OAIScatterPlotConfiguration_YAxisLabelOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScatterPlotConfiguration_YAxisLabelOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_visibility.isSet()) {
        obj.insert(QString("Visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    if (m_sort_icon_visibility.isSet()) {
        obj.insert(QString("SortIconVisibility"), ::OpenAPI::toJsonValue(m_sort_icon_visibility));
    }
    if (m_axis_label_options.isSet()) {
        obj.insert(QString("AxisLabelOptions"), ::OpenAPI::toJsonValue(m_axis_label_options));
    }
    return obj;
}

OAIVisibility OAIScatterPlotConfiguration_YAxisLabelOptions::getVisibility() const {
    return m_visibility;
}
void OAIScatterPlotConfiguration_YAxisLabelOptions::setVisibility(const OAIVisibility &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIScatterPlotConfiguration_YAxisLabelOptions::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIScatterPlotConfiguration_YAxisLabelOptions::is_visibility_Valid() const{
    return m_visibility_isValid;
}

OAIVisibility OAIScatterPlotConfiguration_YAxisLabelOptions::getSortIconVisibility() const {
    return m_sort_icon_visibility;
}
void OAIScatterPlotConfiguration_YAxisLabelOptions::setSortIconVisibility(const OAIVisibility &sort_icon_visibility) {
    m_sort_icon_visibility = sort_icon_visibility;
    m_sort_icon_visibility_isSet = true;
}

bool OAIScatterPlotConfiguration_YAxisLabelOptions::is_sort_icon_visibility_Set() const{
    return m_sort_icon_visibility_isSet;
}

bool OAIScatterPlotConfiguration_YAxisLabelOptions::is_sort_icon_visibility_Valid() const{
    return m_sort_icon_visibility_isValid;
}

QList OAIScatterPlotConfiguration_YAxisLabelOptions::getAxisLabelOptions() const {
    return m_axis_label_options;
}
void OAIScatterPlotConfiguration_YAxisLabelOptions::setAxisLabelOptions(const QList &axis_label_options) {
    m_axis_label_options = axis_label_options;
    m_axis_label_options_isSet = true;
}

bool OAIScatterPlotConfiguration_YAxisLabelOptions::is_axis_label_options_Set() const{
    return m_axis_label_options_isSet;
}

bool OAIScatterPlotConfiguration_YAxisLabelOptions::is_axis_label_options_Valid() const{
    return m_axis_label_options_isValid;
}

bool OAIScatterPlotConfiguration_YAxisLabelOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_icon_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_axis_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScatterPlotConfiguration_YAxisLabelOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
