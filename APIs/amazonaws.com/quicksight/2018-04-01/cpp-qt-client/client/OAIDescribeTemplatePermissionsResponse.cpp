/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeTemplatePermissionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeTemplatePermissionsResponse::OAIDescribeTemplatePermissionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeTemplatePermissionsResponse::OAIDescribeTemplatePermissionsResponse() {
    this->initializeModel();
}

OAIDescribeTemplatePermissionsResponse::~OAIDescribeTemplatePermissionsResponse() {}

void OAIDescribeTemplatePermissionsResponse::initializeModel() {

    m_template_id_isSet = false;
    m_template_id_isValid = false;

    m_template_arn_isSet = false;
    m_template_arn_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDescribeTemplatePermissionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeTemplatePermissionsResponse::fromJsonObject(QJsonObject json) {

    m_template_id_isValid = ::OpenAPI::fromJsonValue(m_template_id, json[QString("TemplateId")]);
    m_template_id_isSet = !json[QString("TemplateId")].isNull() && m_template_id_isValid;

    m_template_arn_isValid = ::OpenAPI::fromJsonValue(m_template_arn, json[QString("TemplateArn")]);
    m_template_arn_isSet = !json[QString("TemplateArn")].isNull() && m_template_arn_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("Permissions")]);
    m_permissions_isSet = !json[QString("Permissions")].isNull() && m_permissions_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIDescribeTemplatePermissionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeTemplatePermissionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_template_id_isSet) {
        obj.insert(QString("TemplateId"), ::OpenAPI::toJsonValue(m_template_id));
    }
    if (m_template_arn_isSet) {
        obj.insert(QString("TemplateArn"), ::OpenAPI::toJsonValue(m_template_arn));
    }
    if (m_permissions.isSet()) {
        obj.insert(QString("Permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIDescribeTemplatePermissionsResponse::getTemplateId() const {
    return m_template_id;
}
void OAIDescribeTemplatePermissionsResponse::setTemplateId(const QString &template_id) {
    m_template_id = template_id;
    m_template_id_isSet = true;
}

bool OAIDescribeTemplatePermissionsResponse::is_template_id_Set() const{
    return m_template_id_isSet;
}

bool OAIDescribeTemplatePermissionsResponse::is_template_id_Valid() const{
    return m_template_id_isValid;
}

QString OAIDescribeTemplatePermissionsResponse::getTemplateArn() const {
    return m_template_arn;
}
void OAIDescribeTemplatePermissionsResponse::setTemplateArn(const QString &template_arn) {
    m_template_arn = template_arn;
    m_template_arn_isSet = true;
}

bool OAIDescribeTemplatePermissionsResponse::is_template_arn_Set() const{
    return m_template_arn_isSet;
}

bool OAIDescribeTemplatePermissionsResponse::is_template_arn_Valid() const{
    return m_template_arn_isValid;
}

QList OAIDescribeTemplatePermissionsResponse::getPermissions() const {
    return m_permissions;
}
void OAIDescribeTemplatePermissionsResponse::setPermissions(const QList &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIDescribeTemplatePermissionsResponse::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIDescribeTemplatePermissionsResponse::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString OAIDescribeTemplatePermissionsResponse::getRequestId() const {
    return m_request_id;
}
void OAIDescribeTemplatePermissionsResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDescribeTemplatePermissionsResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDescribeTemplatePermissionsResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint32 OAIDescribeTemplatePermissionsResponse::getStatus() const {
    return m_status;
}
void OAIDescribeTemplatePermissionsResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeTemplatePermissionsResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeTemplatePermissionsResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDescribeTemplatePermissionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeTemplatePermissionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
