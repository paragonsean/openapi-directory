/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISheetVisualScopingConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISheetVisualScopingConfiguration::OAISheetVisualScopingConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISheetVisualScopingConfiguration::OAISheetVisualScopingConfiguration() {
    this->initializeModel();
}

OAISheetVisualScopingConfiguration::~OAISheetVisualScopingConfiguration() {}

void OAISheetVisualScopingConfiguration::initializeModel() {

    m_sheet_id_isSet = false;
    m_sheet_id_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_visual_ids_isSet = false;
    m_visual_ids_isValid = false;
}

void OAISheetVisualScopingConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISheetVisualScopingConfiguration::fromJsonObject(QJsonObject json) {

    m_sheet_id_isValid = ::OpenAPI::fromJsonValue(m_sheet_id, json[QString("SheetId")]);
    m_sheet_id_isSet = !json[QString("SheetId")].isNull() && m_sheet_id_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("Scope")]);
    m_scope_isSet = !json[QString("Scope")].isNull() && m_scope_isValid;

    m_visual_ids_isValid = ::OpenAPI::fromJsonValue(m_visual_ids, json[QString("VisualIds")]);
    m_visual_ids_isSet = !json[QString("VisualIds")].isNull() && m_visual_ids_isValid;
}

QString OAISheetVisualScopingConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISheetVisualScopingConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_sheet_id_isSet) {
        obj.insert(QString("SheetId"), ::OpenAPI::toJsonValue(m_sheet_id));
    }
    if (m_scope.isSet()) {
        obj.insert(QString("Scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_visual_ids.isSet()) {
        obj.insert(QString("VisualIds"), ::OpenAPI::toJsonValue(m_visual_ids));
    }
    return obj;
}

QString OAISheetVisualScopingConfiguration::getSheetId() const {
    return m_sheet_id;
}
void OAISheetVisualScopingConfiguration::setSheetId(const QString &sheet_id) {
    m_sheet_id = sheet_id;
    m_sheet_id_isSet = true;
}

bool OAISheetVisualScopingConfiguration::is_sheet_id_Set() const{
    return m_sheet_id_isSet;
}

bool OAISheetVisualScopingConfiguration::is_sheet_id_Valid() const{
    return m_sheet_id_isValid;
}

OAIFilterVisualScope OAISheetVisualScopingConfiguration::getScope() const {
    return m_scope;
}
void OAISheetVisualScopingConfiguration::setScope(const OAIFilterVisualScope &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAISheetVisualScopingConfiguration::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAISheetVisualScopingConfiguration::is_scope_Valid() const{
    return m_scope_isValid;
}

QList OAISheetVisualScopingConfiguration::getVisualIds() const {
    return m_visual_ids;
}
void OAISheetVisualScopingConfiguration::setVisualIds(const QList &visual_ids) {
    m_visual_ids = visual_ids;
    m_visual_ids_isSet = true;
}

bool OAISheetVisualScopingConfiguration::is_visual_ids_Set() const{
    return m_visual_ids_isSet;
}

bool OAISheetVisualScopingConfiguration::is_visual_ids_Valid() const{
    return m_visual_ids_isValid;
}

bool OAISheetVisualScopingConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sheet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visual_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISheetVisualScopingConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sheet_id_isValid && m_scope_isValid && true;
}

} // namespace OpenAPI
