/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHeaderFooterSectionConfiguration_Style.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHeaderFooterSectionConfiguration_Style::OAIHeaderFooterSectionConfiguration_Style(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHeaderFooterSectionConfiguration_Style::OAIHeaderFooterSectionConfiguration_Style() {
    this->initializeModel();
}

OAIHeaderFooterSectionConfiguration_Style::~OAIHeaderFooterSectionConfiguration_Style() {}

void OAIHeaderFooterSectionConfiguration_Style::initializeModel() {

    m_height_isSet = false;
    m_height_isValid = false;

    m_padding_isSet = false;
    m_padding_isValid = false;
}

void OAIHeaderFooterSectionConfiguration_Style::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHeaderFooterSectionConfiguration_Style::fromJsonObject(QJsonObject json) {

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("Height")]);
    m_height_isSet = !json[QString("Height")].isNull() && m_height_isValid;

    m_padding_isValid = ::OpenAPI::fromJsonValue(m_padding, json[QString("Padding")]);
    m_padding_isSet = !json[QString("Padding")].isNull() && m_padding_isValid;
}

QString OAIHeaderFooterSectionConfiguration_Style::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHeaderFooterSectionConfiguration_Style::asJsonObject() const {
    QJsonObject obj;
    if (m_height_isSet) {
        obj.insert(QString("Height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_padding.isSet()) {
        obj.insert(QString("Padding"), ::OpenAPI::toJsonValue(m_padding));
    }
    return obj;
}

QString OAIHeaderFooterSectionConfiguration_Style::getHeight() const {
    return m_height;
}
void OAIHeaderFooterSectionConfiguration_Style::setHeight(const QString &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIHeaderFooterSectionConfiguration_Style::is_height_Set() const{
    return m_height_isSet;
}

bool OAIHeaderFooterSectionConfiguration_Style::is_height_Valid() const{
    return m_height_isValid;
}

OAISectionStyle_Padding OAIHeaderFooterSectionConfiguration_Style::getPadding() const {
    return m_padding;
}
void OAIHeaderFooterSectionConfiguration_Style::setPadding(const OAISectionStyle_Padding &padding) {
    m_padding = padding;
    m_padding_isSet = true;
}

bool OAIHeaderFooterSectionConfiguration_Style::is_padding_Set() const{
    return m_padding_isSet;
}

bool OAIHeaderFooterSectionConfiguration_Style::is_padding_Valid() const{
    return m_padding_isValid;
}

bool OAIHeaderFooterSectionConfiguration_Style::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_padding.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHeaderFooterSectionConfiguration_Style::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
