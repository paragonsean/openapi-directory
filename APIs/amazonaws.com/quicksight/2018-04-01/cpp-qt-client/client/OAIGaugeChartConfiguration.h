/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGaugeChartConfiguration.h
 *
 * The configuration of a &lt;code&gt;GaugeChartVisual&lt;/code&gt;.
 */

#ifndef OAIGaugeChartConfiguration_H
#define OAIGaugeChartConfiguration_H

#include <QJsonObject>

#include "OAIGaugeChartConfiguration_DataLabels.h"
#include "OAIGaugeChartConfiguration_FieldWells.h"
#include "OAIGaugeChartConfiguration_GaugeChartOptions.h"
#include "OAIGaugeChartConfiguration_TooltipOptions.h"
#include "OAIGaugeChartConfiguration_VisualPalette.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGaugeChartConfiguration_FieldWells;
class OAIGaugeChartConfiguration_GaugeChartOptions;
class OAIGaugeChartConfiguration_DataLabels;
class OAIGaugeChartConfiguration_TooltipOptions;
class OAIGaugeChartConfiguration_VisualPalette;

class OAIGaugeChartConfiguration : public OAIObject {
public:
    OAIGaugeChartConfiguration();
    OAIGaugeChartConfiguration(QString json);
    ~OAIGaugeChartConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGaugeChartConfiguration_FieldWells getFieldWells() const;
    void setFieldWells(const OAIGaugeChartConfiguration_FieldWells &field_wells);
    bool is_field_wells_Set() const;
    bool is_field_wells_Valid() const;

    OAIGaugeChartConfiguration_GaugeChartOptions getGaugeChartOptions() const;
    void setGaugeChartOptions(const OAIGaugeChartConfiguration_GaugeChartOptions &gauge_chart_options);
    bool is_gauge_chart_options_Set() const;
    bool is_gauge_chart_options_Valid() const;

    OAIGaugeChartConfiguration_DataLabels getDataLabels() const;
    void setDataLabels(const OAIGaugeChartConfiguration_DataLabels &data_labels);
    bool is_data_labels_Set() const;
    bool is_data_labels_Valid() const;

    OAIGaugeChartConfiguration_TooltipOptions getTooltipOptions() const;
    void setTooltipOptions(const OAIGaugeChartConfiguration_TooltipOptions &tooltip_options);
    bool is_tooltip_options_Set() const;
    bool is_tooltip_options_Valid() const;

    OAIGaugeChartConfiguration_VisualPalette getVisualPalette() const;
    void setVisualPalette(const OAIGaugeChartConfiguration_VisualPalette &visual_palette);
    bool is_visual_palette_Set() const;
    bool is_visual_palette_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGaugeChartConfiguration_FieldWells m_field_wells;
    bool m_field_wells_isSet;
    bool m_field_wells_isValid;

    OAIGaugeChartConfiguration_GaugeChartOptions m_gauge_chart_options;
    bool m_gauge_chart_options_isSet;
    bool m_gauge_chart_options_isValid;

    OAIGaugeChartConfiguration_DataLabels m_data_labels;
    bool m_data_labels_isSet;
    bool m_data_labels_isValid;

    OAIGaugeChartConfiguration_TooltipOptions m_tooltip_options;
    bool m_tooltip_options_isSet;
    bool m_tooltip_options_isValid;

    OAIGaugeChartConfiguration_VisualPalette m_visual_palette;
    bool m_visual_palette_isSet;
    bool m_visual_palette_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGaugeChartConfiguration)

#endif // OAIGaugeChartConfiguration_H
