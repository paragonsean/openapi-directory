/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReferenceLineDataConfiguration_DynamicConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReferenceLineDataConfiguration_DynamicConfiguration::OAIReferenceLineDataConfiguration_DynamicConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReferenceLineDataConfiguration_DynamicConfiguration::OAIReferenceLineDataConfiguration_DynamicConfiguration() {
    this->initializeModel();
}

OAIReferenceLineDataConfiguration_DynamicConfiguration::~OAIReferenceLineDataConfiguration_DynamicConfiguration() {}

void OAIReferenceLineDataConfiguration_DynamicConfiguration::initializeModel() {

    m_column_isSet = false;
    m_column_isValid = false;

    m_measure_aggregation_function_isSet = false;
    m_measure_aggregation_function_isValid = false;

    m_calculation_isSet = false;
    m_calculation_isValid = false;
}

void OAIReferenceLineDataConfiguration_DynamicConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReferenceLineDataConfiguration_DynamicConfiguration::fromJsonObject(QJsonObject json) {

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("Column")]);
    m_column_isSet = !json[QString("Column")].isNull() && m_column_isValid;

    m_measure_aggregation_function_isValid = ::OpenAPI::fromJsonValue(m_measure_aggregation_function, json[QString("MeasureAggregationFunction")]);
    m_measure_aggregation_function_isSet = !json[QString("MeasureAggregationFunction")].isNull() && m_measure_aggregation_function_isValid;

    m_calculation_isValid = ::OpenAPI::fromJsonValue(m_calculation, json[QString("Calculation")]);
    m_calculation_isSet = !json[QString("Calculation")].isNull() && m_calculation_isValid;
}

QString OAIReferenceLineDataConfiguration_DynamicConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReferenceLineDataConfiguration_DynamicConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_column.isSet()) {
        obj.insert(QString("Column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_measure_aggregation_function.isSet()) {
        obj.insert(QString("MeasureAggregationFunction"), ::OpenAPI::toJsonValue(m_measure_aggregation_function));
    }
    if (m_calculation.isSet()) {
        obj.insert(QString("Calculation"), ::OpenAPI::toJsonValue(m_calculation));
    }
    return obj;
}

OAIReferenceLineDynamicDataConfiguration_Column OAIReferenceLineDataConfiguration_DynamicConfiguration::getColumn() const {
    return m_column;
}
void OAIReferenceLineDataConfiguration_DynamicConfiguration::setColumn(const OAIReferenceLineDynamicDataConfiguration_Column &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAIReferenceLineDataConfiguration_DynamicConfiguration::is_column_Set() const{
    return m_column_isSet;
}

bool OAIReferenceLineDataConfiguration_DynamicConfiguration::is_column_Valid() const{
    return m_column_isValid;
}

OAIReferenceLineDynamicDataConfiguration_MeasureAggregationFunction OAIReferenceLineDataConfiguration_DynamicConfiguration::getMeasureAggregationFunction() const {
    return m_measure_aggregation_function;
}
void OAIReferenceLineDataConfiguration_DynamicConfiguration::setMeasureAggregationFunction(const OAIReferenceLineDynamicDataConfiguration_MeasureAggregationFunction &measure_aggregation_function) {
    m_measure_aggregation_function = measure_aggregation_function;
    m_measure_aggregation_function_isSet = true;
}

bool OAIReferenceLineDataConfiguration_DynamicConfiguration::is_measure_aggregation_function_Set() const{
    return m_measure_aggregation_function_isSet;
}

bool OAIReferenceLineDataConfiguration_DynamicConfiguration::is_measure_aggregation_function_Valid() const{
    return m_measure_aggregation_function_isValid;
}

OAIReferenceLineDynamicDataConfiguration_Calculation OAIReferenceLineDataConfiguration_DynamicConfiguration::getCalculation() const {
    return m_calculation;
}
void OAIReferenceLineDataConfiguration_DynamicConfiguration::setCalculation(const OAIReferenceLineDynamicDataConfiguration_Calculation &calculation) {
    m_calculation = calculation;
    m_calculation_isSet = true;
}

bool OAIReferenceLineDataConfiguration_DynamicConfiguration::is_calculation_Set() const{
    return m_calculation_isSet;
}

bool OAIReferenceLineDataConfiguration_DynamicConfiguration::is_calculation_Valid() const{
    return m_calculation_isValid;
}

bool OAIReferenceLineDataConfiguration_DynamicConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_measure_aggregation_function.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_calculation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReferenceLineDataConfiguration_DynamicConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_column_isValid && m_calculation_isValid && true;
}

} // namespace OpenAPI
