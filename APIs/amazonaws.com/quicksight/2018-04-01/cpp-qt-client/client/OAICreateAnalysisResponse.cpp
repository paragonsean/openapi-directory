/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAnalysisResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAnalysisResponse::OAICreateAnalysisResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAnalysisResponse::OAICreateAnalysisResponse() {
    this->initializeModel();
}

OAICreateAnalysisResponse::~OAICreateAnalysisResponse() {}

void OAICreateAnalysisResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_analysis_id_isSet = false;
    m_analysis_id_isValid = false;

    m_creation_status_isSet = false;
    m_creation_status_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAICreateAnalysisResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAnalysisResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_analysis_id_isValid = ::OpenAPI::fromJsonValue(m_analysis_id, json[QString("AnalysisId")]);
    m_analysis_id_isSet = !json[QString("AnalysisId")].isNull() && m_analysis_id_isValid;

    m_creation_status_isValid = ::OpenAPI::fromJsonValue(m_creation_status, json[QString("CreationStatus")]);
    m_creation_status_isSet = !json[QString("CreationStatus")].isNull() && m_creation_status_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;
}

QString OAICreateAnalysisResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAnalysisResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_analysis_id_isSet) {
        obj.insert(QString("AnalysisId"), ::OpenAPI::toJsonValue(m_analysis_id));
    }
    if (m_creation_status.isSet()) {
        obj.insert(QString("CreationStatus"), ::OpenAPI::toJsonValue(m_creation_status));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

QString OAICreateAnalysisResponse::getArn() const {
    return m_arn;
}
void OAICreateAnalysisResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreateAnalysisResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreateAnalysisResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAICreateAnalysisResponse::getAnalysisId() const {
    return m_analysis_id;
}
void OAICreateAnalysisResponse::setAnalysisId(const QString &analysis_id) {
    m_analysis_id = analysis_id;
    m_analysis_id_isSet = true;
}

bool OAICreateAnalysisResponse::is_analysis_id_Set() const{
    return m_analysis_id_isSet;
}

bool OAICreateAnalysisResponse::is_analysis_id_Valid() const{
    return m_analysis_id_isValid;
}

OAIResourceStatus OAICreateAnalysisResponse::getCreationStatus() const {
    return m_creation_status;
}
void OAICreateAnalysisResponse::setCreationStatus(const OAIResourceStatus &creation_status) {
    m_creation_status = creation_status;
    m_creation_status_isSet = true;
}

bool OAICreateAnalysisResponse::is_creation_status_Set() const{
    return m_creation_status_isSet;
}

bool OAICreateAnalysisResponse::is_creation_status_Valid() const{
    return m_creation_status_isValid;
}

qint32 OAICreateAnalysisResponse::getStatus() const {
    return m_status;
}
void OAICreateAnalysisResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateAnalysisResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateAnalysisResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICreateAnalysisResponse::getRequestId() const {
    return m_request_id;
}
void OAICreateAnalysisResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAICreateAnalysisResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAICreateAnalysisResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAICreateAnalysisResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAnalysisResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
