/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAccountSubscription_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAccountSubscription_request::OAICreateAccountSubscription_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAccountSubscription_request::OAICreateAccountSubscription_request() {
    this->initializeModel();
}

OAICreateAccountSubscription_request::~OAICreateAccountSubscription_request() {}

void OAICreateAccountSubscription_request::initializeModel() {

    m_edition_isSet = false;
    m_edition_isValid = false;

    m_authentication_method_isSet = false;
    m_authentication_method_isValid = false;

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_notification_email_isSet = false;
    m_notification_email_isValid = false;

    m_active_directory_name_isSet = false;
    m_active_directory_name_isValid = false;

    m_realm_isSet = false;
    m_realm_isValid = false;

    m_directory_id_isSet = false;
    m_directory_id_isValid = false;

    m_admin_group_isSet = false;
    m_admin_group_isValid = false;

    m_author_group_isSet = false;
    m_author_group_isValid = false;

    m_reader_group_isSet = false;
    m_reader_group_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_contact_number_isSet = false;
    m_contact_number_isValid = false;
}

void OAICreateAccountSubscription_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAccountSubscription_request::fromJsonObject(QJsonObject json) {

    m_edition_isValid = ::OpenAPI::fromJsonValue(m_edition, json[QString("Edition")]);
    m_edition_isSet = !json[QString("Edition")].isNull() && m_edition_isValid;

    m_authentication_method_isValid = ::OpenAPI::fromJsonValue(m_authentication_method, json[QString("AuthenticationMethod")]);
    m_authentication_method_isSet = !json[QString("AuthenticationMethod")].isNull() && m_authentication_method_isValid;

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("AccountName")]);
    m_account_name_isSet = !json[QString("AccountName")].isNull() && m_account_name_isValid;

    m_notification_email_isValid = ::OpenAPI::fromJsonValue(m_notification_email, json[QString("NotificationEmail")]);
    m_notification_email_isSet = !json[QString("NotificationEmail")].isNull() && m_notification_email_isValid;

    m_active_directory_name_isValid = ::OpenAPI::fromJsonValue(m_active_directory_name, json[QString("ActiveDirectoryName")]);
    m_active_directory_name_isSet = !json[QString("ActiveDirectoryName")].isNull() && m_active_directory_name_isValid;

    m_realm_isValid = ::OpenAPI::fromJsonValue(m_realm, json[QString("Realm")]);
    m_realm_isSet = !json[QString("Realm")].isNull() && m_realm_isValid;

    m_directory_id_isValid = ::OpenAPI::fromJsonValue(m_directory_id, json[QString("DirectoryId")]);
    m_directory_id_isSet = !json[QString("DirectoryId")].isNull() && m_directory_id_isValid;

    m_admin_group_isValid = ::OpenAPI::fromJsonValue(m_admin_group, json[QString("AdminGroup")]);
    m_admin_group_isSet = !json[QString("AdminGroup")].isNull() && m_admin_group_isValid;

    m_author_group_isValid = ::OpenAPI::fromJsonValue(m_author_group, json[QString("AuthorGroup")]);
    m_author_group_isSet = !json[QString("AuthorGroup")].isNull() && m_author_group_isValid;

    m_reader_group_isValid = ::OpenAPI::fromJsonValue(m_reader_group, json[QString("ReaderGroup")]);
    m_reader_group_isSet = !json[QString("ReaderGroup")].isNull() && m_reader_group_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("FirstName")]);
    m_first_name_isSet = !json[QString("FirstName")].isNull() && m_first_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("LastName")]);
    m_last_name_isSet = !json[QString("LastName")].isNull() && m_last_name_isValid;

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("EmailAddress")]);
    m_email_address_isSet = !json[QString("EmailAddress")].isNull() && m_email_address_isValid;

    m_contact_number_isValid = ::OpenAPI::fromJsonValue(m_contact_number, json[QString("ContactNumber")]);
    m_contact_number_isSet = !json[QString("ContactNumber")].isNull() && m_contact_number_isValid;
}

QString OAICreateAccountSubscription_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAccountSubscription_request::asJsonObject() const {
    QJsonObject obj;
    if (m_edition_isSet) {
        obj.insert(QString("Edition"), ::OpenAPI::toJsonValue(m_edition));
    }
    if (m_authentication_method_isSet) {
        obj.insert(QString("AuthenticationMethod"), ::OpenAPI::toJsonValue(m_authentication_method));
    }
    if (m_account_name_isSet) {
        obj.insert(QString("AccountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_notification_email_isSet) {
        obj.insert(QString("NotificationEmail"), ::OpenAPI::toJsonValue(m_notification_email));
    }
    if (m_active_directory_name_isSet) {
        obj.insert(QString("ActiveDirectoryName"), ::OpenAPI::toJsonValue(m_active_directory_name));
    }
    if (m_realm_isSet) {
        obj.insert(QString("Realm"), ::OpenAPI::toJsonValue(m_realm));
    }
    if (m_directory_id_isSet) {
        obj.insert(QString("DirectoryId"), ::OpenAPI::toJsonValue(m_directory_id));
    }
    if (m_admin_group.size() > 0) {
        obj.insert(QString("AdminGroup"), ::OpenAPI::toJsonValue(m_admin_group));
    }
    if (m_author_group.size() > 0) {
        obj.insert(QString("AuthorGroup"), ::OpenAPI::toJsonValue(m_author_group));
    }
    if (m_reader_group.size() > 0) {
        obj.insert(QString("ReaderGroup"), ::OpenAPI::toJsonValue(m_reader_group));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("FirstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("LastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_email_address_isSet) {
        obj.insert(QString("EmailAddress"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_contact_number_isSet) {
        obj.insert(QString("ContactNumber"), ::OpenAPI::toJsonValue(m_contact_number));
    }
    return obj;
}

QString OAICreateAccountSubscription_request::getEdition() const {
    return m_edition;
}
void OAICreateAccountSubscription_request::setEdition(const QString &edition) {
    m_edition = edition;
    m_edition_isSet = true;
}

bool OAICreateAccountSubscription_request::is_edition_Set() const{
    return m_edition_isSet;
}

bool OAICreateAccountSubscription_request::is_edition_Valid() const{
    return m_edition_isValid;
}

QString OAICreateAccountSubscription_request::getAuthenticationMethod() const {
    return m_authentication_method;
}
void OAICreateAccountSubscription_request::setAuthenticationMethod(const QString &authentication_method) {
    m_authentication_method = authentication_method;
    m_authentication_method_isSet = true;
}

bool OAICreateAccountSubscription_request::is_authentication_method_Set() const{
    return m_authentication_method_isSet;
}

bool OAICreateAccountSubscription_request::is_authentication_method_Valid() const{
    return m_authentication_method_isValid;
}

QString OAICreateAccountSubscription_request::getAccountName() const {
    return m_account_name;
}
void OAICreateAccountSubscription_request::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAICreateAccountSubscription_request::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAICreateAccountSubscription_request::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAICreateAccountSubscription_request::getNotificationEmail() const {
    return m_notification_email;
}
void OAICreateAccountSubscription_request::setNotificationEmail(const QString &notification_email) {
    m_notification_email = notification_email;
    m_notification_email_isSet = true;
}

bool OAICreateAccountSubscription_request::is_notification_email_Set() const{
    return m_notification_email_isSet;
}

bool OAICreateAccountSubscription_request::is_notification_email_Valid() const{
    return m_notification_email_isValid;
}

QString OAICreateAccountSubscription_request::getActiveDirectoryName() const {
    return m_active_directory_name;
}
void OAICreateAccountSubscription_request::setActiveDirectoryName(const QString &active_directory_name) {
    m_active_directory_name = active_directory_name;
    m_active_directory_name_isSet = true;
}

bool OAICreateAccountSubscription_request::is_active_directory_name_Set() const{
    return m_active_directory_name_isSet;
}

bool OAICreateAccountSubscription_request::is_active_directory_name_Valid() const{
    return m_active_directory_name_isValid;
}

QString OAICreateAccountSubscription_request::getRealm() const {
    return m_realm;
}
void OAICreateAccountSubscription_request::setRealm(const QString &realm) {
    m_realm = realm;
    m_realm_isSet = true;
}

bool OAICreateAccountSubscription_request::is_realm_Set() const{
    return m_realm_isSet;
}

bool OAICreateAccountSubscription_request::is_realm_Valid() const{
    return m_realm_isValid;
}

QString OAICreateAccountSubscription_request::getDirectoryId() const {
    return m_directory_id;
}
void OAICreateAccountSubscription_request::setDirectoryId(const QString &directory_id) {
    m_directory_id = directory_id;
    m_directory_id_isSet = true;
}

bool OAICreateAccountSubscription_request::is_directory_id_Set() const{
    return m_directory_id_isSet;
}

bool OAICreateAccountSubscription_request::is_directory_id_Valid() const{
    return m_directory_id_isValid;
}

QList<QString> OAICreateAccountSubscription_request::getAdminGroup() const {
    return m_admin_group;
}
void OAICreateAccountSubscription_request::setAdminGroup(const QList<QString> &admin_group) {
    m_admin_group = admin_group;
    m_admin_group_isSet = true;
}

bool OAICreateAccountSubscription_request::is_admin_group_Set() const{
    return m_admin_group_isSet;
}

bool OAICreateAccountSubscription_request::is_admin_group_Valid() const{
    return m_admin_group_isValid;
}

QList<QString> OAICreateAccountSubscription_request::getAuthorGroup() const {
    return m_author_group;
}
void OAICreateAccountSubscription_request::setAuthorGroup(const QList<QString> &author_group) {
    m_author_group = author_group;
    m_author_group_isSet = true;
}

bool OAICreateAccountSubscription_request::is_author_group_Set() const{
    return m_author_group_isSet;
}

bool OAICreateAccountSubscription_request::is_author_group_Valid() const{
    return m_author_group_isValid;
}

QList<QString> OAICreateAccountSubscription_request::getReaderGroup() const {
    return m_reader_group;
}
void OAICreateAccountSubscription_request::setReaderGroup(const QList<QString> &reader_group) {
    m_reader_group = reader_group;
    m_reader_group_isSet = true;
}

bool OAICreateAccountSubscription_request::is_reader_group_Set() const{
    return m_reader_group_isSet;
}

bool OAICreateAccountSubscription_request::is_reader_group_Valid() const{
    return m_reader_group_isValid;
}

QString OAICreateAccountSubscription_request::getFirstName() const {
    return m_first_name;
}
void OAICreateAccountSubscription_request::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAICreateAccountSubscription_request::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAICreateAccountSubscription_request::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAICreateAccountSubscription_request::getLastName() const {
    return m_last_name;
}
void OAICreateAccountSubscription_request::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAICreateAccountSubscription_request::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAICreateAccountSubscription_request::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAICreateAccountSubscription_request::getEmailAddress() const {
    return m_email_address;
}
void OAICreateAccountSubscription_request::setEmailAddress(const QString &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAICreateAccountSubscription_request::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAICreateAccountSubscription_request::is_email_address_Valid() const{
    return m_email_address_isValid;
}

QString OAICreateAccountSubscription_request::getContactNumber() const {
    return m_contact_number;
}
void OAICreateAccountSubscription_request::setContactNumber(const QString &contact_number) {
    m_contact_number = contact_number;
    m_contact_number_isSet = true;
}

bool OAICreateAccountSubscription_request::is_contact_number_Set() const{
    return m_contact_number_isSet;
}

bool OAICreateAccountSubscription_request::is_contact_number_Valid() const{
    return m_contact_number_isValid;
}

bool OAICreateAccountSubscription_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_edition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_directory_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_realm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directory_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_group.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_group.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reader_group.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAccountSubscription_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_edition_isValid && m_authentication_method_isValid && m_account_name_isValid && m_notification_email_isValid && true;
}

} // namespace OpenAPI
