/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteThemeAliasResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteThemeAliasResponse::OAIDeleteThemeAliasResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteThemeAliasResponse::OAIDeleteThemeAliasResponse() {
    this->initializeModel();
}

OAIDeleteThemeAliasResponse::~OAIDeleteThemeAliasResponse() {}

void OAIDeleteThemeAliasResponse::initializeModel() {

    m_alias_name_isSet = false;
    m_alias_name_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_theme_id_isSet = false;
    m_theme_id_isValid = false;
}

void OAIDeleteThemeAliasResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteThemeAliasResponse::fromJsonObject(QJsonObject json) {

    m_alias_name_isValid = ::OpenAPI::fromJsonValue(m_alias_name, json[QString("AliasName")]);
    m_alias_name_isSet = !json[QString("AliasName")].isNull() && m_alias_name_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_theme_id_isValid = ::OpenAPI::fromJsonValue(m_theme_id, json[QString("ThemeId")]);
    m_theme_id_isSet = !json[QString("ThemeId")].isNull() && m_theme_id_isValid;
}

QString OAIDeleteThemeAliasResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteThemeAliasResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_alias_name_isSet) {
        obj.insert(QString("AliasName"), ::OpenAPI::toJsonValue(m_alias_name));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_theme_id_isSet) {
        obj.insert(QString("ThemeId"), ::OpenAPI::toJsonValue(m_theme_id));
    }
    return obj;
}

QString OAIDeleteThemeAliasResponse::getAliasName() const {
    return m_alias_name;
}
void OAIDeleteThemeAliasResponse::setAliasName(const QString &alias_name) {
    m_alias_name = alias_name;
    m_alias_name_isSet = true;
}

bool OAIDeleteThemeAliasResponse::is_alias_name_Set() const{
    return m_alias_name_isSet;
}

bool OAIDeleteThemeAliasResponse::is_alias_name_Valid() const{
    return m_alias_name_isValid;
}

QString OAIDeleteThemeAliasResponse::getArn() const {
    return m_arn;
}
void OAIDeleteThemeAliasResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDeleteThemeAliasResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDeleteThemeAliasResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDeleteThemeAliasResponse::getRequestId() const {
    return m_request_id;
}
void OAIDeleteThemeAliasResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDeleteThemeAliasResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDeleteThemeAliasResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint32 OAIDeleteThemeAliasResponse::getStatus() const {
    return m_status;
}
void OAIDeleteThemeAliasResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDeleteThemeAliasResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDeleteThemeAliasResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDeleteThemeAliasResponse::getThemeId() const {
    return m_theme_id;
}
void OAIDeleteThemeAliasResponse::setThemeId(const QString &theme_id) {
    m_theme_id = theme_id;
    m_theme_id_isSet = true;
}

bool OAIDeleteThemeAliasResponse::is_theme_id_Set() const{
    return m_theme_id_isSet;
}

bool OAIDeleteThemeAliasResponse::is_theme_id_Valid() const{
    return m_theme_id_isValid;
}

bool OAIDeleteThemeAliasResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alias_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteThemeAliasResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
