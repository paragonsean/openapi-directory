/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterScopeConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterScopeConfiguration::OAIFilterScopeConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterScopeConfiguration::OAIFilterScopeConfiguration() {
    this->initializeModel();
}

OAIFilterScopeConfiguration::~OAIFilterScopeConfiguration() {}

void OAIFilterScopeConfiguration::initializeModel() {

    m_selected_sheets_isSet = false;
    m_selected_sheets_isValid = false;
}

void OAIFilterScopeConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilterScopeConfiguration::fromJsonObject(QJsonObject json) {

    m_selected_sheets_isValid = ::OpenAPI::fromJsonValue(m_selected_sheets, json[QString("SelectedSheets")]);
    m_selected_sheets_isSet = !json[QString("SelectedSheets")].isNull() && m_selected_sheets_isValid;
}

QString OAIFilterScopeConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilterScopeConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_selected_sheets.isSet()) {
        obj.insert(QString("SelectedSheets"), ::OpenAPI::toJsonValue(m_selected_sheets));
    }
    return obj;
}

OAIFilterScopeConfiguration_SelectedSheets OAIFilterScopeConfiguration::getSelectedSheets() const {
    return m_selected_sheets;
}
void OAIFilterScopeConfiguration::setSelectedSheets(const OAIFilterScopeConfiguration_SelectedSheets &selected_sheets) {
    m_selected_sheets = selected_sheets;
    m_selected_sheets_isSet = true;
}

bool OAIFilterScopeConfiguration::is_selected_sheets_Set() const{
    return m_selected_sheets_isSet;
}

bool OAIFilterScopeConfiguration::is_selected_sheets_Valid() const{
    return m_selected_sheets_isValid;
}

bool OAIFilterScopeConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_selected_sheets.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilterScopeConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
