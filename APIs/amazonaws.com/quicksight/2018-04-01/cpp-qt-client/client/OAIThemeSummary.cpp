/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThemeSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThemeSummary::OAIThemeSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThemeSummary::OAIThemeSummary() {
    this->initializeModel();
}

OAIThemeSummary::~OAIThemeSummary() {}

void OAIThemeSummary::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_theme_id_isSet = false;
    m_theme_id_isValid = false;

    m_latest_version_number_isSet = false;
    m_latest_version_number_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;
}

void OAIThemeSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThemeSummary::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_theme_id_isValid = ::OpenAPI::fromJsonValue(m_theme_id, json[QString("ThemeId")]);
    m_theme_id_isSet = !json[QString("ThemeId")].isNull() && m_theme_id_isValid;

    m_latest_version_number_isValid = ::OpenAPI::fromJsonValue(m_latest_version_number, json[QString("LatestVersionNumber")]);
    m_latest_version_number_isSet = !json[QString("LatestVersionNumber")].isNull() && m_latest_version_number_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;
}

QString OAIThemeSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThemeSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_theme_id_isSet) {
        obj.insert(QString("ThemeId"), ::OpenAPI::toJsonValue(m_theme_id));
    }
    if (m_latest_version_number_isSet) {
        obj.insert(QString("LatestVersionNumber"), ::OpenAPI::toJsonValue(m_latest_version_number));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    return obj;
}

QString OAIThemeSummary::getArn() const {
    return m_arn;
}
void OAIThemeSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIThemeSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIThemeSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIThemeSummary::getName() const {
    return m_name;
}
void OAIThemeSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIThemeSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIThemeSummary::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIThemeSummary::getThemeId() const {
    return m_theme_id;
}
void OAIThemeSummary::setThemeId(const QString &theme_id) {
    m_theme_id = theme_id;
    m_theme_id_isSet = true;
}

bool OAIThemeSummary::is_theme_id_Set() const{
    return m_theme_id_isSet;
}

bool OAIThemeSummary::is_theme_id_Valid() const{
    return m_theme_id_isValid;
}

qint32 OAIThemeSummary::getLatestVersionNumber() const {
    return m_latest_version_number;
}
void OAIThemeSummary::setLatestVersionNumber(const qint32 &latest_version_number) {
    m_latest_version_number = latest_version_number;
    m_latest_version_number_isSet = true;
}

bool OAIThemeSummary::is_latest_version_number_Set() const{
    return m_latest_version_number_isSet;
}

bool OAIThemeSummary::is_latest_version_number_Valid() const{
    return m_latest_version_number_isValid;
}

QDateTime OAIThemeSummary::getCreatedTime() const {
    return m_created_time;
}
void OAIThemeSummary::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIThemeSummary::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIThemeSummary::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QDateTime OAIThemeSummary::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIThemeSummary::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIThemeSummary::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIThemeSummary::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

bool OAIThemeSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_version_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThemeSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
