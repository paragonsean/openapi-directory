/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComputation_TotalAggregation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComputation_TotalAggregation::OAIComputation_TotalAggregation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComputation_TotalAggregation::OAIComputation_TotalAggregation() {
    this->initializeModel();
}

OAIComputation_TotalAggregation::~OAIComputation_TotalAggregation() {}

void OAIComputation_TotalAggregation::initializeModel() {

    m_computation_id_isSet = false;
    m_computation_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIComputation_TotalAggregation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComputation_TotalAggregation::fromJsonObject(QJsonObject json) {

    m_computation_id_isValid = ::OpenAPI::fromJsonValue(m_computation_id, json[QString("ComputationId")]);
    m_computation_id_isSet = !json[QString("ComputationId")].isNull() && m_computation_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;
}

QString OAIComputation_TotalAggregation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComputation_TotalAggregation::asJsonObject() const {
    QJsonObject obj;
    if (m_computation_id_isSet) {
        obj.insert(QString("ComputationId"), ::OpenAPI::toJsonValue(m_computation_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_value.isSet()) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIComputation_TotalAggregation::getComputationId() const {
    return m_computation_id;
}
void OAIComputation_TotalAggregation::setComputationId(const QString &computation_id) {
    m_computation_id = computation_id;
    m_computation_id_isSet = true;
}

bool OAIComputation_TotalAggregation::is_computation_id_Set() const{
    return m_computation_id_isSet;
}

bool OAIComputation_TotalAggregation::is_computation_id_Valid() const{
    return m_computation_id_isValid;
}

QString OAIComputation_TotalAggregation::getName() const {
    return m_name;
}
void OAIComputation_TotalAggregation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIComputation_TotalAggregation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIComputation_TotalAggregation::is_name_Valid() const{
    return m_name_isValid;
}

OAITopBottomRankedComputation_Value OAIComputation_TotalAggregation::getValue() const {
    return m_value;
}
void OAIComputation_TotalAggregation::setValue(const OAITopBottomRankedComputation_Value &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIComputation_TotalAggregation::is_value_Set() const{
    return m_value_isSet;
}

bool OAIComputation_TotalAggregation::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIComputation_TotalAggregation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_computation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComputation_TotalAggregation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_computation_id_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
