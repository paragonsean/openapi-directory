/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeTopicResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeTopicResponse::OAIDescribeTopicResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeTopicResponse::OAIDescribeTopicResponse() {
    this->initializeModel();
}

OAIDescribeTopicResponse::~OAIDescribeTopicResponse() {}

void OAIDescribeTopicResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_topic_id_isSet = false;
    m_topic_id_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDescribeTopicResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeTopicResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_topic_id_isValid = ::OpenAPI::fromJsonValue(m_topic_id, json[QString("TopicId")]);
    m_topic_id_isSet = !json[QString("TopicId")].isNull() && m_topic_id_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(m_topic, json[QString("Topic")]);
    m_topic_isSet = !json[QString("Topic")].isNull() && m_topic_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIDescribeTopicResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeTopicResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_topic_id_isSet) {
        obj.insert(QString("TopicId"), ::OpenAPI::toJsonValue(m_topic_id));
    }
    if (m_topic.isSet()) {
        obj.insert(QString("Topic"), ::OpenAPI::toJsonValue(m_topic));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIDescribeTopicResponse::getArn() const {
    return m_arn;
}
void OAIDescribeTopicResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeTopicResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeTopicResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDescribeTopicResponse::getTopicId() const {
    return m_topic_id;
}
void OAIDescribeTopicResponse::setTopicId(const QString &topic_id) {
    m_topic_id = topic_id;
    m_topic_id_isSet = true;
}

bool OAIDescribeTopicResponse::is_topic_id_Set() const{
    return m_topic_id_isSet;
}

bool OAIDescribeTopicResponse::is_topic_id_Valid() const{
    return m_topic_id_isValid;
}

OAIDescribeTopicResponse_Topic OAIDescribeTopicResponse::getTopic() const {
    return m_topic;
}
void OAIDescribeTopicResponse::setTopic(const OAIDescribeTopicResponse_Topic &topic) {
    m_topic = topic;
    m_topic_isSet = true;
}

bool OAIDescribeTopicResponse::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAIDescribeTopicResponse::is_topic_Valid() const{
    return m_topic_isValid;
}

QString OAIDescribeTopicResponse::getRequestId() const {
    return m_request_id;
}
void OAIDescribeTopicResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDescribeTopicResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDescribeTopicResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

qint32 OAIDescribeTopicResponse::getStatus() const {
    return m_status;
}
void OAIDescribeTopicResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeTopicResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeTopicResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDescribeTopicResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeTopicResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
