/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITileLayoutStyle_Gutter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITileLayoutStyle_Gutter::OAITileLayoutStyle_Gutter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITileLayoutStyle_Gutter::OAITileLayoutStyle_Gutter() {
    this->initializeModel();
}

OAITileLayoutStyle_Gutter::~OAITileLayoutStyle_Gutter() {}

void OAITileLayoutStyle_Gutter::initializeModel() {

    m_show_isSet = false;
    m_show_isValid = false;
}

void OAITileLayoutStyle_Gutter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITileLayoutStyle_Gutter::fromJsonObject(QJsonObject json) {

    m_show_isValid = ::OpenAPI::fromJsonValue(m_show, json[QString("Show")]);
    m_show_isSet = !json[QString("Show")].isNull() && m_show_isValid;
}

QString OAITileLayoutStyle_Gutter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITileLayoutStyle_Gutter::asJsonObject() const {
    QJsonObject obj;
    if (m_show_isSet) {
        obj.insert(QString("Show"), ::OpenAPI::toJsonValue(m_show));
    }
    return obj;
}

bool OAITileLayoutStyle_Gutter::getShow() const {
    return m_show;
}
void OAITileLayoutStyle_Gutter::setShow(const bool &show) {
    m_show = show;
    m_show_isSet = true;
}

bool OAITileLayoutStyle_Gutter::is_show_Set() const{
    return m_show_isSet;
}

bool OAITileLayoutStyle_Gutter::is_show_Valid() const{
    return m_show_isValid;
}

bool OAITileLayoutStyle_Gutter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_show_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITileLayoutStyle_Gutter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
