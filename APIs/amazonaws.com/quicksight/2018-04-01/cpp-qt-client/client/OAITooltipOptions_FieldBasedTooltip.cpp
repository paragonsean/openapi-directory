/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITooltipOptions_FieldBasedTooltip.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITooltipOptions_FieldBasedTooltip::OAITooltipOptions_FieldBasedTooltip(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITooltipOptions_FieldBasedTooltip::OAITooltipOptions_FieldBasedTooltip() {
    this->initializeModel();
}

OAITooltipOptions_FieldBasedTooltip::~OAITooltipOptions_FieldBasedTooltip() {}

void OAITooltipOptions_FieldBasedTooltip::initializeModel() {

    m_aggregation_visibility_isSet = false;
    m_aggregation_visibility_isValid = false;

    m_tooltip_title_type_isSet = false;
    m_tooltip_title_type_isValid = false;

    m_tooltip_fields_isSet = false;
    m_tooltip_fields_isValid = false;
}

void OAITooltipOptions_FieldBasedTooltip::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITooltipOptions_FieldBasedTooltip::fromJsonObject(QJsonObject json) {

    m_aggregation_visibility_isValid = ::OpenAPI::fromJsonValue(m_aggregation_visibility, json[QString("AggregationVisibility")]);
    m_aggregation_visibility_isSet = !json[QString("AggregationVisibility")].isNull() && m_aggregation_visibility_isValid;

    m_tooltip_title_type_isValid = ::OpenAPI::fromJsonValue(m_tooltip_title_type, json[QString("TooltipTitleType")]);
    m_tooltip_title_type_isSet = !json[QString("TooltipTitleType")].isNull() && m_tooltip_title_type_isValid;

    m_tooltip_fields_isValid = ::OpenAPI::fromJsonValue(m_tooltip_fields, json[QString("TooltipFields")]);
    m_tooltip_fields_isSet = !json[QString("TooltipFields")].isNull() && m_tooltip_fields_isValid;
}

QString OAITooltipOptions_FieldBasedTooltip::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITooltipOptions_FieldBasedTooltip::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregation_visibility.isSet()) {
        obj.insert(QString("AggregationVisibility"), ::OpenAPI::toJsonValue(m_aggregation_visibility));
    }
    if (m_tooltip_title_type.isSet()) {
        obj.insert(QString("TooltipTitleType"), ::OpenAPI::toJsonValue(m_tooltip_title_type));
    }
    if (m_tooltip_fields.isSet()) {
        obj.insert(QString("TooltipFields"), ::OpenAPI::toJsonValue(m_tooltip_fields));
    }
    return obj;
}

OAIVisibility OAITooltipOptions_FieldBasedTooltip::getAggregationVisibility() const {
    return m_aggregation_visibility;
}
void OAITooltipOptions_FieldBasedTooltip::setAggregationVisibility(const OAIVisibility &aggregation_visibility) {
    m_aggregation_visibility = aggregation_visibility;
    m_aggregation_visibility_isSet = true;
}

bool OAITooltipOptions_FieldBasedTooltip::is_aggregation_visibility_Set() const{
    return m_aggregation_visibility_isSet;
}

bool OAITooltipOptions_FieldBasedTooltip::is_aggregation_visibility_Valid() const{
    return m_aggregation_visibility_isValid;
}

OAITooltipTitleType OAITooltipOptions_FieldBasedTooltip::getTooltipTitleType() const {
    return m_tooltip_title_type;
}
void OAITooltipOptions_FieldBasedTooltip::setTooltipTitleType(const OAITooltipTitleType &tooltip_title_type) {
    m_tooltip_title_type = tooltip_title_type;
    m_tooltip_title_type_isSet = true;
}

bool OAITooltipOptions_FieldBasedTooltip::is_tooltip_title_type_Set() const{
    return m_tooltip_title_type_isSet;
}

bool OAITooltipOptions_FieldBasedTooltip::is_tooltip_title_type_Valid() const{
    return m_tooltip_title_type_isValid;
}

QList OAITooltipOptions_FieldBasedTooltip::getTooltipFields() const {
    return m_tooltip_fields;
}
void OAITooltipOptions_FieldBasedTooltip::setTooltipFields(const QList &tooltip_fields) {
    m_tooltip_fields = tooltip_fields;
    m_tooltip_fields_isSet = true;
}

bool OAITooltipOptions_FieldBasedTooltip::is_tooltip_fields_Set() const{
    return m_tooltip_fields_isSet;
}

bool OAITooltipOptions_FieldBasedTooltip::is_tooltip_fields_Valid() const{
    return m_tooltip_fields_isValid;
}

bool OAITooltipOptions_FieldBasedTooltip::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregation_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tooltip_title_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tooltip_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITooltipOptions_FieldBasedTooltip::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
