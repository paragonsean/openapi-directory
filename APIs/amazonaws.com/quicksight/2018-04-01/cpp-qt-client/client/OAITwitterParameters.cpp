/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITwitterParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITwitterParameters::OAITwitterParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITwitterParameters::OAITwitterParameters() {
    this->initializeModel();
}

OAITwitterParameters::~OAITwitterParameters() {}

void OAITwitterParameters::initializeModel() {

    m_query_isSet = false;
    m_query_isValid = false;

    m_max_rows_isSet = false;
    m_max_rows_isValid = false;
}

void OAITwitterParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITwitterParameters::fromJsonObject(QJsonObject json) {

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("Query")]);
    m_query_isSet = !json[QString("Query")].isNull() && m_query_isValid;

    m_max_rows_isValid = ::OpenAPI::fromJsonValue(m_max_rows, json[QString("MaxRows")]);
    m_max_rows_isSet = !json[QString("MaxRows")].isNull() && m_max_rows_isValid;
}

QString OAITwitterParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITwitterParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_query_isSet) {
        obj.insert(QString("Query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_max_rows_isSet) {
        obj.insert(QString("MaxRows"), ::OpenAPI::toJsonValue(m_max_rows));
    }
    return obj;
}

QString OAITwitterParameters::getQuery() const {
    return m_query;
}
void OAITwitterParameters::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAITwitterParameters::is_query_Set() const{
    return m_query_isSet;
}

bool OAITwitterParameters::is_query_Valid() const{
    return m_query_isValid;
}

qint32 OAITwitterParameters::getMaxRows() const {
    return m_max_rows;
}
void OAITwitterParameters::setMaxRows(const qint32 &max_rows) {
    m_max_rows = max_rows;
    m_max_rows_isSet = true;
}

bool OAITwitterParameters::is_max_rows_Set() const{
    return m_max_rows_isSet;
}

bool OAITwitterParameters::is_max_rows_Valid() const{
    return m_max_rows_isValid;
}

bool OAITwitterParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_rows_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITwitterParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_query_isValid && m_max_rows_isValid && true;
}

} // namespace OpenAPI
