/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISectionBasedLayoutConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISectionBasedLayoutConfiguration::OAISectionBasedLayoutConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISectionBasedLayoutConfiguration::OAISectionBasedLayoutConfiguration() {
    this->initializeModel();
}

OAISectionBasedLayoutConfiguration::~OAISectionBasedLayoutConfiguration() {}

void OAISectionBasedLayoutConfiguration::initializeModel() {

    m_header_sections_isSet = false;
    m_header_sections_isValid = false;

    m_body_sections_isSet = false;
    m_body_sections_isValid = false;

    m_footer_sections_isSet = false;
    m_footer_sections_isValid = false;

    m_canvas_size_options_isSet = false;
    m_canvas_size_options_isValid = false;
}

void OAISectionBasedLayoutConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISectionBasedLayoutConfiguration::fromJsonObject(QJsonObject json) {

    m_header_sections_isValid = ::OpenAPI::fromJsonValue(m_header_sections, json[QString("HeaderSections")]);
    m_header_sections_isSet = !json[QString("HeaderSections")].isNull() && m_header_sections_isValid;

    m_body_sections_isValid = ::OpenAPI::fromJsonValue(m_body_sections, json[QString("BodySections")]);
    m_body_sections_isSet = !json[QString("BodySections")].isNull() && m_body_sections_isValid;

    m_footer_sections_isValid = ::OpenAPI::fromJsonValue(m_footer_sections, json[QString("FooterSections")]);
    m_footer_sections_isSet = !json[QString("FooterSections")].isNull() && m_footer_sections_isValid;

    m_canvas_size_options_isValid = ::OpenAPI::fromJsonValue(m_canvas_size_options, json[QString("CanvasSizeOptions")]);
    m_canvas_size_options_isSet = !json[QString("CanvasSizeOptions")].isNull() && m_canvas_size_options_isValid;
}

QString OAISectionBasedLayoutConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISectionBasedLayoutConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_header_sections.isSet()) {
        obj.insert(QString("HeaderSections"), ::OpenAPI::toJsonValue(m_header_sections));
    }
    if (m_body_sections.isSet()) {
        obj.insert(QString("BodySections"), ::OpenAPI::toJsonValue(m_body_sections));
    }
    if (m_footer_sections.isSet()) {
        obj.insert(QString("FooterSections"), ::OpenAPI::toJsonValue(m_footer_sections));
    }
    if (m_canvas_size_options.isSet()) {
        obj.insert(QString("CanvasSizeOptions"), ::OpenAPI::toJsonValue(m_canvas_size_options));
    }
    return obj;
}

QList OAISectionBasedLayoutConfiguration::getHeaderSections() const {
    return m_header_sections;
}
void OAISectionBasedLayoutConfiguration::setHeaderSections(const QList &header_sections) {
    m_header_sections = header_sections;
    m_header_sections_isSet = true;
}

bool OAISectionBasedLayoutConfiguration::is_header_sections_Set() const{
    return m_header_sections_isSet;
}

bool OAISectionBasedLayoutConfiguration::is_header_sections_Valid() const{
    return m_header_sections_isValid;
}

QList OAISectionBasedLayoutConfiguration::getBodySections() const {
    return m_body_sections;
}
void OAISectionBasedLayoutConfiguration::setBodySections(const QList &body_sections) {
    m_body_sections = body_sections;
    m_body_sections_isSet = true;
}

bool OAISectionBasedLayoutConfiguration::is_body_sections_Set() const{
    return m_body_sections_isSet;
}

bool OAISectionBasedLayoutConfiguration::is_body_sections_Valid() const{
    return m_body_sections_isValid;
}

QList OAISectionBasedLayoutConfiguration::getFooterSections() const {
    return m_footer_sections;
}
void OAISectionBasedLayoutConfiguration::setFooterSections(const QList &footer_sections) {
    m_footer_sections = footer_sections;
    m_footer_sections_isSet = true;
}

bool OAISectionBasedLayoutConfiguration::is_footer_sections_Set() const{
    return m_footer_sections_isSet;
}

bool OAISectionBasedLayoutConfiguration::is_footer_sections_Valid() const{
    return m_footer_sections_isValid;
}

OAISectionBasedLayoutConfiguration_CanvasSizeOptions OAISectionBasedLayoutConfiguration::getCanvasSizeOptions() const {
    return m_canvas_size_options;
}
void OAISectionBasedLayoutConfiguration::setCanvasSizeOptions(const OAISectionBasedLayoutConfiguration_CanvasSizeOptions &canvas_size_options) {
    m_canvas_size_options = canvas_size_options;
    m_canvas_size_options_isSet = true;
}

bool OAISectionBasedLayoutConfiguration::is_canvas_size_options_Set() const{
    return m_canvas_size_options_isSet;
}

bool OAISectionBasedLayoutConfiguration::is_canvas_size_options_Valid() const{
    return m_canvas_size_options_isValid;
}

bool OAISectionBasedLayoutConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_header_sections.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_sections.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_footer_sections.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_canvas_size_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISectionBasedLayoutConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_header_sections_isValid && m_body_sections_isValid && m_footer_sections_isValid && m_canvas_size_options_isValid && true;
}

} // namespace OpenAPI
