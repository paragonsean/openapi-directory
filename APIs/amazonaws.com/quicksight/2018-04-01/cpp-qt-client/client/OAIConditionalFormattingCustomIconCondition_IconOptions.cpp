/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConditionalFormattingCustomIconCondition_IconOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConditionalFormattingCustomIconCondition_IconOptions::OAIConditionalFormattingCustomIconCondition_IconOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConditionalFormattingCustomIconCondition_IconOptions::OAIConditionalFormattingCustomIconCondition_IconOptions() {
    this->initializeModel();
}

OAIConditionalFormattingCustomIconCondition_IconOptions::~OAIConditionalFormattingCustomIconCondition_IconOptions() {}

void OAIConditionalFormattingCustomIconCondition_IconOptions::initializeModel() {

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_unicode_icon_isSet = false;
    m_unicode_icon_isValid = false;
}

void OAIConditionalFormattingCustomIconCondition_IconOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConditionalFormattingCustomIconCondition_IconOptions::fromJsonObject(QJsonObject json) {

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("Icon")]);
    m_icon_isSet = !json[QString("Icon")].isNull() && m_icon_isValid;

    m_unicode_icon_isValid = ::OpenAPI::fromJsonValue(m_unicode_icon, json[QString("UnicodeIcon")]);
    m_unicode_icon_isSet = !json[QString("UnicodeIcon")].isNull() && m_unicode_icon_isValid;
}

QString OAIConditionalFormattingCustomIconCondition_IconOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConditionalFormattingCustomIconCondition_IconOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_icon.isSet()) {
        obj.insert(QString("Icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_unicode_icon_isSet) {
        obj.insert(QString("UnicodeIcon"), ::OpenAPI::toJsonValue(m_unicode_icon));
    }
    return obj;
}

OAIIcon OAIConditionalFormattingCustomIconCondition_IconOptions::getIcon() const {
    return m_icon;
}
void OAIConditionalFormattingCustomIconCondition_IconOptions::setIcon(const OAIIcon &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAIConditionalFormattingCustomIconCondition_IconOptions::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAIConditionalFormattingCustomIconCondition_IconOptions::is_icon_Valid() const{
    return m_icon_isValid;
}

QString OAIConditionalFormattingCustomIconCondition_IconOptions::getUnicodeIcon() const {
    return m_unicode_icon;
}
void OAIConditionalFormattingCustomIconCondition_IconOptions::setUnicodeIcon(const QString &unicode_icon) {
    m_unicode_icon = unicode_icon;
    m_unicode_icon_isSet = true;
}

bool OAIConditionalFormattingCustomIconCondition_IconOptions::is_unicode_icon_Set() const{
    return m_unicode_icon_isSet;
}

bool OAIConditionalFormattingCustomIconCondition_IconOptions::is_unicode_icon_Valid() const{
    return m_unicode_icon_isValid;
}

bool OAIConditionalFormattingCustomIconCondition_IconOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_icon.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unicode_icon_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConditionalFormattingCustomIconCondition_IconOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
