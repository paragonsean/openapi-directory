/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReferenceLineValueLabelConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReferenceLineValueLabelConfiguration::OAIReferenceLineValueLabelConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReferenceLineValueLabelConfiguration::OAIReferenceLineValueLabelConfiguration() {
    this->initializeModel();
}

OAIReferenceLineValueLabelConfiguration::~OAIReferenceLineValueLabelConfiguration() {}

void OAIReferenceLineValueLabelConfiguration::initializeModel() {

    m_relative_position_isSet = false;
    m_relative_position_isValid = false;

    m_format_configuration_isSet = false;
    m_format_configuration_isValid = false;
}

void OAIReferenceLineValueLabelConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReferenceLineValueLabelConfiguration::fromJsonObject(QJsonObject json) {

    m_relative_position_isValid = ::OpenAPI::fromJsonValue(m_relative_position, json[QString("RelativePosition")]);
    m_relative_position_isSet = !json[QString("RelativePosition")].isNull() && m_relative_position_isValid;

    m_format_configuration_isValid = ::OpenAPI::fromJsonValue(m_format_configuration, json[QString("FormatConfiguration")]);
    m_format_configuration_isSet = !json[QString("FormatConfiguration")].isNull() && m_format_configuration_isValid;
}

QString OAIReferenceLineValueLabelConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReferenceLineValueLabelConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_relative_position.isSet()) {
        obj.insert(QString("RelativePosition"), ::OpenAPI::toJsonValue(m_relative_position));
    }
    if (m_format_configuration.isSet()) {
        obj.insert(QString("FormatConfiguration"), ::OpenAPI::toJsonValue(m_format_configuration));
    }
    return obj;
}

OAIReferenceLineValueLabelRelativePosition OAIReferenceLineValueLabelConfiguration::getRelativePosition() const {
    return m_relative_position;
}
void OAIReferenceLineValueLabelConfiguration::setRelativePosition(const OAIReferenceLineValueLabelRelativePosition &relative_position) {
    m_relative_position = relative_position;
    m_relative_position_isSet = true;
}

bool OAIReferenceLineValueLabelConfiguration::is_relative_position_Set() const{
    return m_relative_position_isSet;
}

bool OAIReferenceLineValueLabelConfiguration::is_relative_position_Valid() const{
    return m_relative_position_isValid;
}

OAIReferenceLineValueLabelConfiguration_FormatConfiguration OAIReferenceLineValueLabelConfiguration::getFormatConfiguration() const {
    return m_format_configuration;
}
void OAIReferenceLineValueLabelConfiguration::setFormatConfiguration(const OAIReferenceLineValueLabelConfiguration_FormatConfiguration &format_configuration) {
    m_format_configuration = format_configuration;
    m_format_configuration_isSet = true;
}

bool OAIReferenceLineValueLabelConfiguration::is_format_configuration_Set() const{
    return m_format_configuration_isSet;
}

bool OAIReferenceLineValueLabelConfiguration::is_format_configuration_Valid() const{
    return m_format_configuration_isValid;
}

bool OAIReferenceLineValueLabelConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_relative_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReferenceLineValueLabelConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
