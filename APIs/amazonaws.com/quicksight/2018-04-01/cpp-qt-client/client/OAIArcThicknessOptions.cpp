/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArcThicknessOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArcThicknessOptions::OAIArcThicknessOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArcThicknessOptions::OAIArcThicknessOptions() {
    this->initializeModel();
}

OAIArcThicknessOptions::~OAIArcThicknessOptions() {}

void OAIArcThicknessOptions::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIArcThicknessOptions::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIArcThicknessOptions::fromJson(QString jsonString) {
    
    if ( jsonString.compare("SMALL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArcThicknessOptions::SMALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MEDIUM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArcThicknessOptions::MEDIUM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LARGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIArcThicknessOptions::LARGE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIArcThicknessOptions::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIArcThicknessOptions::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIArcThicknessOptions::SMALL:
            val = "SMALL";
            break;
        case eOAIArcThicknessOptions::MEDIUM:
            val = "MEDIUM";
            break;
        case eOAIArcThicknessOptions::LARGE:
            val = "LARGE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIArcThicknessOptions::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIArcThicknessOptions::eOAIArcThicknessOptions OAIArcThicknessOptions::getValue() const {
    return m_value;
}

void OAIArcThicknessOptions::setValue(const OAIArcThicknessOptions::eOAIArcThicknessOptions& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIArcThicknessOptions::isSet() const {
    
    return m_value_isSet;
}

bool OAIArcThicknessOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
