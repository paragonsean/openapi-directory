/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistogramConfiguration_YAxisDisplayOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistogramConfiguration_YAxisDisplayOptions::OAIHistogramConfiguration_YAxisDisplayOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistogramConfiguration_YAxisDisplayOptions::OAIHistogramConfiguration_YAxisDisplayOptions() {
    this->initializeModel();
}

OAIHistogramConfiguration_YAxisDisplayOptions::~OAIHistogramConfiguration_YAxisDisplayOptions() {}

void OAIHistogramConfiguration_YAxisDisplayOptions::initializeModel() {

    m_tick_label_options_isSet = false;
    m_tick_label_options_isValid = false;

    m_axis_line_visibility_isSet = false;
    m_axis_line_visibility_isValid = false;

    m_grid_line_visibility_isSet = false;
    m_grid_line_visibility_isValid = false;

    m_data_options_isSet = false;
    m_data_options_isValid = false;

    m_scrollbar_options_isSet = false;
    m_scrollbar_options_isValid = false;

    m_axis_offset_isSet = false;
    m_axis_offset_isValid = false;
}

void OAIHistogramConfiguration_YAxisDisplayOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistogramConfiguration_YAxisDisplayOptions::fromJsonObject(QJsonObject json) {

    m_tick_label_options_isValid = ::OpenAPI::fromJsonValue(m_tick_label_options, json[QString("TickLabelOptions")]);
    m_tick_label_options_isSet = !json[QString("TickLabelOptions")].isNull() && m_tick_label_options_isValid;

    m_axis_line_visibility_isValid = ::OpenAPI::fromJsonValue(m_axis_line_visibility, json[QString("AxisLineVisibility")]);
    m_axis_line_visibility_isSet = !json[QString("AxisLineVisibility")].isNull() && m_axis_line_visibility_isValid;

    m_grid_line_visibility_isValid = ::OpenAPI::fromJsonValue(m_grid_line_visibility, json[QString("GridLineVisibility")]);
    m_grid_line_visibility_isSet = !json[QString("GridLineVisibility")].isNull() && m_grid_line_visibility_isValid;

    m_data_options_isValid = ::OpenAPI::fromJsonValue(m_data_options, json[QString("DataOptions")]);
    m_data_options_isSet = !json[QString("DataOptions")].isNull() && m_data_options_isValid;

    m_scrollbar_options_isValid = ::OpenAPI::fromJsonValue(m_scrollbar_options, json[QString("ScrollbarOptions")]);
    m_scrollbar_options_isSet = !json[QString("ScrollbarOptions")].isNull() && m_scrollbar_options_isValid;

    m_axis_offset_isValid = ::OpenAPI::fromJsonValue(m_axis_offset, json[QString("AxisOffset")]);
    m_axis_offset_isSet = !json[QString("AxisOffset")].isNull() && m_axis_offset_isValid;
}

QString OAIHistogramConfiguration_YAxisDisplayOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistogramConfiguration_YAxisDisplayOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_tick_label_options.isSet()) {
        obj.insert(QString("TickLabelOptions"), ::OpenAPI::toJsonValue(m_tick_label_options));
    }
    if (m_axis_line_visibility.isSet()) {
        obj.insert(QString("AxisLineVisibility"), ::OpenAPI::toJsonValue(m_axis_line_visibility));
    }
    if (m_grid_line_visibility.isSet()) {
        obj.insert(QString("GridLineVisibility"), ::OpenAPI::toJsonValue(m_grid_line_visibility));
    }
    if (m_data_options.isSet()) {
        obj.insert(QString("DataOptions"), ::OpenAPI::toJsonValue(m_data_options));
    }
    if (m_scrollbar_options.isSet()) {
        obj.insert(QString("ScrollbarOptions"), ::OpenAPI::toJsonValue(m_scrollbar_options));
    }
    if (m_axis_offset_isSet) {
        obj.insert(QString("AxisOffset"), ::OpenAPI::toJsonValue(m_axis_offset));
    }
    return obj;
}

OAIAxisDisplayOptions_TickLabelOptions OAIHistogramConfiguration_YAxisDisplayOptions::getTickLabelOptions() const {
    return m_tick_label_options;
}
void OAIHistogramConfiguration_YAxisDisplayOptions::setTickLabelOptions(const OAIAxisDisplayOptions_TickLabelOptions &tick_label_options) {
    m_tick_label_options = tick_label_options;
    m_tick_label_options_isSet = true;
}

bool OAIHistogramConfiguration_YAxisDisplayOptions::is_tick_label_options_Set() const{
    return m_tick_label_options_isSet;
}

bool OAIHistogramConfiguration_YAxisDisplayOptions::is_tick_label_options_Valid() const{
    return m_tick_label_options_isValid;
}

OAIVisibility OAIHistogramConfiguration_YAxisDisplayOptions::getAxisLineVisibility() const {
    return m_axis_line_visibility;
}
void OAIHistogramConfiguration_YAxisDisplayOptions::setAxisLineVisibility(const OAIVisibility &axis_line_visibility) {
    m_axis_line_visibility = axis_line_visibility;
    m_axis_line_visibility_isSet = true;
}

bool OAIHistogramConfiguration_YAxisDisplayOptions::is_axis_line_visibility_Set() const{
    return m_axis_line_visibility_isSet;
}

bool OAIHistogramConfiguration_YAxisDisplayOptions::is_axis_line_visibility_Valid() const{
    return m_axis_line_visibility_isValid;
}

OAIVisibility OAIHistogramConfiguration_YAxisDisplayOptions::getGridLineVisibility() const {
    return m_grid_line_visibility;
}
void OAIHistogramConfiguration_YAxisDisplayOptions::setGridLineVisibility(const OAIVisibility &grid_line_visibility) {
    m_grid_line_visibility = grid_line_visibility;
    m_grid_line_visibility_isSet = true;
}

bool OAIHistogramConfiguration_YAxisDisplayOptions::is_grid_line_visibility_Set() const{
    return m_grid_line_visibility_isSet;
}

bool OAIHistogramConfiguration_YAxisDisplayOptions::is_grid_line_visibility_Valid() const{
    return m_grid_line_visibility_isValid;
}

OAIAxisDisplayOptions_DataOptions OAIHistogramConfiguration_YAxisDisplayOptions::getDataOptions() const {
    return m_data_options;
}
void OAIHistogramConfiguration_YAxisDisplayOptions::setDataOptions(const OAIAxisDisplayOptions_DataOptions &data_options) {
    m_data_options = data_options;
    m_data_options_isSet = true;
}

bool OAIHistogramConfiguration_YAxisDisplayOptions::is_data_options_Set() const{
    return m_data_options_isSet;
}

bool OAIHistogramConfiguration_YAxisDisplayOptions::is_data_options_Valid() const{
    return m_data_options_isValid;
}

OAIAxisDisplayOptions_ScrollbarOptions OAIHistogramConfiguration_YAxisDisplayOptions::getScrollbarOptions() const {
    return m_scrollbar_options;
}
void OAIHistogramConfiguration_YAxisDisplayOptions::setScrollbarOptions(const OAIAxisDisplayOptions_ScrollbarOptions &scrollbar_options) {
    m_scrollbar_options = scrollbar_options;
    m_scrollbar_options_isSet = true;
}

bool OAIHistogramConfiguration_YAxisDisplayOptions::is_scrollbar_options_Set() const{
    return m_scrollbar_options_isSet;
}

bool OAIHistogramConfiguration_YAxisDisplayOptions::is_scrollbar_options_Valid() const{
    return m_scrollbar_options_isValid;
}

QString OAIHistogramConfiguration_YAxisDisplayOptions::getAxisOffset() const {
    return m_axis_offset;
}
void OAIHistogramConfiguration_YAxisDisplayOptions::setAxisOffset(const QString &axis_offset) {
    m_axis_offset = axis_offset;
    m_axis_offset_isSet = true;
}

bool OAIHistogramConfiguration_YAxisDisplayOptions::is_axis_offset_Set() const{
    return m_axis_offset_isSet;
}

bool OAIHistogramConfiguration_YAxisDisplayOptions::is_axis_offset_Valid() const{
    return m_axis_offset_isValid;
}

bool OAIHistogramConfiguration_YAxisDisplayOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tick_label_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_axis_line_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_grid_line_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scrollbar_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_axis_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistogramConfiguration_YAxisDisplayOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
