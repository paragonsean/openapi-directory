/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterClass.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterClass::OAIFilterClass(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterClass::OAIFilterClass() {
    this->initializeModel();
}

OAIFilterClass::~OAIFilterClass() {}

void OAIFilterClass::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIFilterClass::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIFilterClass::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ENFORCED_VALUE_FILTER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFilterClass::ENFORCED_VALUE_FILTER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONDITIONAL_VALUE_FILTER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFilterClass::CONDITIONAL_VALUE_FILTER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NAMED_VALUE_FILTER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFilterClass::NAMED_VALUE_FILTER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIFilterClass::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIFilterClass::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIFilterClass::ENFORCED_VALUE_FILTER:
            val = "ENFORCED_VALUE_FILTER";
            break;
        case eOAIFilterClass::CONDITIONAL_VALUE_FILTER:
            val = "CONDITIONAL_VALUE_FILTER";
            break;
        case eOAIFilterClass::NAMED_VALUE_FILTER:
            val = "NAMED_VALUE_FILTER";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIFilterClass::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIFilterClass::eOAIFilterClass OAIFilterClass::getValue() const {
    return m_value;
}

void OAIFilterClass::setValue(const OAIFilterClass::eOAIFilterClass& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIFilterClass::isSet() const {
    
    return m_value_isSet;
}

bool OAIFilterClass::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
