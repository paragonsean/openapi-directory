/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourcePermission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourcePermission::OAIResourcePermission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourcePermission::OAIResourcePermission() {
    this->initializeModel();
}

OAIResourcePermission::~OAIResourcePermission() {}

void OAIResourcePermission::initializeModel() {

    m_principal_isSet = false;
    m_principal_isValid = false;

    m_actions_isSet = false;
    m_actions_isValid = false;
}

void OAIResourcePermission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourcePermission::fromJsonObject(QJsonObject json) {

    m_principal_isValid = ::OpenAPI::fromJsonValue(m_principal, json[QString("Principal")]);
    m_principal_isSet = !json[QString("Principal")].isNull() && m_principal_isValid;

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("Actions")]);
    m_actions_isSet = !json[QString("Actions")].isNull() && m_actions_isValid;
}

QString OAIResourcePermission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourcePermission::asJsonObject() const {
    QJsonObject obj;
    if (m_principal_isSet) {
        obj.insert(QString("Principal"), ::OpenAPI::toJsonValue(m_principal));
    }
    if (m_actions.isSet()) {
        obj.insert(QString("Actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    return obj;
}

QString OAIResourcePermission::getPrincipal() const {
    return m_principal;
}
void OAIResourcePermission::setPrincipal(const QString &principal) {
    m_principal = principal;
    m_principal_isSet = true;
}

bool OAIResourcePermission::is_principal_Set() const{
    return m_principal_isSet;
}

bool OAIResourcePermission::is_principal_Valid() const{
    return m_principal_isValid;
}

QList OAIResourcePermission::getActions() const {
    return m_actions;
}
void OAIResourcePermission::setActions(const QList &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIResourcePermission::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIResourcePermission::is_actions_Valid() const{
    return m_actions_isValid;
}

bool OAIResourcePermission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_principal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourcePermission::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_principal_isValid && m_actions_isValid && true;
}

} // namespace OpenAPI
