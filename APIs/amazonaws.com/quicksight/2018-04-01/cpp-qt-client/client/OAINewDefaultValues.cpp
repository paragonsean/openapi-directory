/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewDefaultValues.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewDefaultValues::OAINewDefaultValues(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewDefaultValues::OAINewDefaultValues() {
    this->initializeModel();
}

OAINewDefaultValues::~OAINewDefaultValues() {}

void OAINewDefaultValues::initializeModel() {

    m_string_static_values_isSet = false;
    m_string_static_values_isValid = false;

    m_decimal_static_values_isSet = false;
    m_decimal_static_values_isValid = false;

    m_date_time_static_values_isSet = false;
    m_date_time_static_values_isValid = false;

    m_integer_static_values_isSet = false;
    m_integer_static_values_isValid = false;
}

void OAINewDefaultValues::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewDefaultValues::fromJsonObject(QJsonObject json) {

    m_string_static_values_isValid = ::OpenAPI::fromJsonValue(m_string_static_values, json[QString("StringStaticValues")]);
    m_string_static_values_isSet = !json[QString("StringStaticValues")].isNull() && m_string_static_values_isValid;

    m_decimal_static_values_isValid = ::OpenAPI::fromJsonValue(m_decimal_static_values, json[QString("DecimalStaticValues")]);
    m_decimal_static_values_isSet = !json[QString("DecimalStaticValues")].isNull() && m_decimal_static_values_isValid;

    m_date_time_static_values_isValid = ::OpenAPI::fromJsonValue(m_date_time_static_values, json[QString("DateTimeStaticValues")]);
    m_date_time_static_values_isSet = !json[QString("DateTimeStaticValues")].isNull() && m_date_time_static_values_isValid;

    m_integer_static_values_isValid = ::OpenAPI::fromJsonValue(m_integer_static_values, json[QString("IntegerStaticValues")]);
    m_integer_static_values_isSet = !json[QString("IntegerStaticValues")].isNull() && m_integer_static_values_isValid;
}

QString OAINewDefaultValues::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewDefaultValues::asJsonObject() const {
    QJsonObject obj;
    if (m_string_static_values.isSet()) {
        obj.insert(QString("StringStaticValues"), ::OpenAPI::toJsonValue(m_string_static_values));
    }
    if (m_decimal_static_values.isSet()) {
        obj.insert(QString("DecimalStaticValues"), ::OpenAPI::toJsonValue(m_decimal_static_values));
    }
    if (m_date_time_static_values.isSet()) {
        obj.insert(QString("DateTimeStaticValues"), ::OpenAPI::toJsonValue(m_date_time_static_values));
    }
    if (m_integer_static_values.isSet()) {
        obj.insert(QString("IntegerStaticValues"), ::OpenAPI::toJsonValue(m_integer_static_values));
    }
    return obj;
}

QList OAINewDefaultValues::getStringStaticValues() const {
    return m_string_static_values;
}
void OAINewDefaultValues::setStringStaticValues(const QList &string_static_values) {
    m_string_static_values = string_static_values;
    m_string_static_values_isSet = true;
}

bool OAINewDefaultValues::is_string_static_values_Set() const{
    return m_string_static_values_isSet;
}

bool OAINewDefaultValues::is_string_static_values_Valid() const{
    return m_string_static_values_isValid;
}

QList OAINewDefaultValues::getDecimalStaticValues() const {
    return m_decimal_static_values;
}
void OAINewDefaultValues::setDecimalStaticValues(const QList &decimal_static_values) {
    m_decimal_static_values = decimal_static_values;
    m_decimal_static_values_isSet = true;
}

bool OAINewDefaultValues::is_decimal_static_values_Set() const{
    return m_decimal_static_values_isSet;
}

bool OAINewDefaultValues::is_decimal_static_values_Valid() const{
    return m_decimal_static_values_isValid;
}

QList OAINewDefaultValues::getDateTimeStaticValues() const {
    return m_date_time_static_values;
}
void OAINewDefaultValues::setDateTimeStaticValues(const QList &date_time_static_values) {
    m_date_time_static_values = date_time_static_values;
    m_date_time_static_values_isSet = true;
}

bool OAINewDefaultValues::is_date_time_static_values_Set() const{
    return m_date_time_static_values_isSet;
}

bool OAINewDefaultValues::is_date_time_static_values_Valid() const{
    return m_date_time_static_values_isValid;
}

QList OAINewDefaultValues::getIntegerStaticValues() const {
    return m_integer_static_values;
}
void OAINewDefaultValues::setIntegerStaticValues(const QList &integer_static_values) {
    m_integer_static_values = integer_static_values;
    m_integer_static_values_isSet = true;
}

bool OAINewDefaultValues::is_integer_static_values_Set() const{
    return m_integer_static_values_isSet;
}

bool OAINewDefaultValues::is_integer_static_values_Valid() const{
    return m_integer_static_values_isValid;
}

bool OAINewDefaultValues::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_string_static_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_decimal_static_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_static_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_integer_static_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewDefaultValues::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
