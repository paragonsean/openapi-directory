/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGaugeChartConfiguration_GaugeChartOptions.h
 *
 * 
 */

#ifndef OAIGaugeChartConfiguration_GaugeChartOptions_H
#define OAIGaugeChartConfiguration_GaugeChartOptions_H

#include <QJsonObject>

#include "OAIGaugeChartOptions_Arc.h"
#include "OAIGaugeChartOptions_ArcAxis.h"
#include "OAIGaugeChartOptions_Comparison.h"
#include "OAIGaugeChartOptions_PrimaryValueFontConfiguration.h"
#include "OAIPrimaryValueDisplayType.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGaugeChartOptions_Comparison;
class OAIGaugeChartOptions_ArcAxis;
class OAIGaugeChartOptions_Arc;
class OAIGaugeChartOptions_PrimaryValueFontConfiguration;

class OAIGaugeChartConfiguration_GaugeChartOptions : public OAIObject {
public:
    OAIGaugeChartConfiguration_GaugeChartOptions();
    OAIGaugeChartConfiguration_GaugeChartOptions(QString json);
    ~OAIGaugeChartConfiguration_GaugeChartOptions() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIPrimaryValueDisplayType getPrimaryValueDisplayType() const;
    void setPrimaryValueDisplayType(const OAIPrimaryValueDisplayType &primary_value_display_type);
    bool is_primary_value_display_type_Set() const;
    bool is_primary_value_display_type_Valid() const;

    OAIGaugeChartOptions_Comparison getComparison() const;
    void setComparison(const OAIGaugeChartOptions_Comparison &comparison);
    bool is_comparison_Set() const;
    bool is_comparison_Valid() const;

    OAIGaugeChartOptions_ArcAxis getArcAxis() const;
    void setArcAxis(const OAIGaugeChartOptions_ArcAxis &arc_axis);
    bool is_arc_axis_Set() const;
    bool is_arc_axis_Valid() const;

    OAIGaugeChartOptions_Arc getArc() const;
    void setArc(const OAIGaugeChartOptions_Arc &arc);
    bool is_arc_Set() const;
    bool is_arc_Valid() const;

    OAIGaugeChartOptions_PrimaryValueFontConfiguration getPrimaryValueFontConfiguration() const;
    void setPrimaryValueFontConfiguration(const OAIGaugeChartOptions_PrimaryValueFontConfiguration &primary_value_font_configuration);
    bool is_primary_value_font_configuration_Set() const;
    bool is_primary_value_font_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIPrimaryValueDisplayType m_primary_value_display_type;
    bool m_primary_value_display_type_isSet;
    bool m_primary_value_display_type_isValid;

    OAIGaugeChartOptions_Comparison m_comparison;
    bool m_comparison_isSet;
    bool m_comparison_isValid;

    OAIGaugeChartOptions_ArcAxis m_arc_axis;
    bool m_arc_axis_isSet;
    bool m_arc_axis_isValid;

    OAIGaugeChartOptions_Arc m_arc;
    bool m_arc_isSet;
    bool m_arc_isValid;

    OAIGaugeChartOptions_PrimaryValueFontConfiguration m_primary_value_font_configuration;
    bool m_primary_value_font_configuration_isSet;
    bool m_primary_value_font_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGaugeChartConfiguration_GaugeChartOptions)

#endif // OAIGaugeChartConfiguration_GaugeChartOptions_H
