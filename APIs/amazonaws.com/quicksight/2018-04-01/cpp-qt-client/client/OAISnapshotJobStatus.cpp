/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnapshotJobStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnapshotJobStatus::OAISnapshotJobStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnapshotJobStatus::OAISnapshotJobStatus() {
    this->initializeModel();
}

OAISnapshotJobStatus::~OAISnapshotJobStatus() {}

void OAISnapshotJobStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISnapshotJobStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISnapshotJobStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("QUEUED", Qt::CaseInsensitive) == 0) {
        m_value = eOAISnapshotJobStatus::QUEUED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RUNNING", Qt::CaseInsensitive) == 0) {
        m_value = eOAISnapshotJobStatus::RUNNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COMPLETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAISnapshotJobStatus::COMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAISnapshotJobStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISnapshotJobStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISnapshotJobStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISnapshotJobStatus::QUEUED:
            val = "QUEUED";
            break;
        case eOAISnapshotJobStatus::RUNNING:
            val = "RUNNING";
            break;
        case eOAISnapshotJobStatus::COMPLETED:
            val = "COMPLETED";
            break;
        case eOAISnapshotJobStatus::FAILED:
            val = "FAILED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISnapshotJobStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISnapshotJobStatus::eOAISnapshotJobStatus OAISnapshotJobStatus::getValue() const {
    return m_value;
}

void OAISnapshotJobStatus::setValue(const OAISnapshotJobStatus::eOAISnapshotJobStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISnapshotJobStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAISnapshotJobStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
