/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComputation_MetricComparison.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComputation_MetricComparison::OAIComputation_MetricComparison(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComputation_MetricComparison::OAIComputation_MetricComparison() {
    this->initializeModel();
}

OAIComputation_MetricComparison::~OAIComputation_MetricComparison() {}

void OAIComputation_MetricComparison::initializeModel() {

    m_computation_id_isSet = false;
    m_computation_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_from_value_isSet = false;
    m_from_value_isValid = false;

    m_target_value_isSet = false;
    m_target_value_isValid = false;
}

void OAIComputation_MetricComparison::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComputation_MetricComparison::fromJsonObject(QJsonObject json) {

    m_computation_id_isValid = ::OpenAPI::fromJsonValue(m_computation_id, json[QString("ComputationId")]);
    m_computation_id_isSet = !json[QString("ComputationId")].isNull() && m_computation_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("Time")]);
    m_time_isSet = !json[QString("Time")].isNull() && m_time_isValid;

    m_from_value_isValid = ::OpenAPI::fromJsonValue(m_from_value, json[QString("FromValue")]);
    m_from_value_isSet = !json[QString("FromValue")].isNull() && m_from_value_isValid;

    m_target_value_isValid = ::OpenAPI::fromJsonValue(m_target_value, json[QString("TargetValue")]);
    m_target_value_isSet = !json[QString("TargetValue")].isNull() && m_target_value_isValid;
}

QString OAIComputation_MetricComparison::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComputation_MetricComparison::asJsonObject() const {
    QJsonObject obj;
    if (m_computation_id_isSet) {
        obj.insert(QString("ComputationId"), ::OpenAPI::toJsonValue(m_computation_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_time.isSet()) {
        obj.insert(QString("Time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_from_value.isSet()) {
        obj.insert(QString("FromValue"), ::OpenAPI::toJsonValue(m_from_value));
    }
    if (m_target_value.isSet()) {
        obj.insert(QString("TargetValue"), ::OpenAPI::toJsonValue(m_target_value));
    }
    return obj;
}

QString OAIComputation_MetricComparison::getComputationId() const {
    return m_computation_id;
}
void OAIComputation_MetricComparison::setComputationId(const QString &computation_id) {
    m_computation_id = computation_id;
    m_computation_id_isSet = true;
}

bool OAIComputation_MetricComparison::is_computation_id_Set() const{
    return m_computation_id_isSet;
}

bool OAIComputation_MetricComparison::is_computation_id_Valid() const{
    return m_computation_id_isValid;
}

QString OAIComputation_MetricComparison::getName() const {
    return m_name;
}
void OAIComputation_MetricComparison::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIComputation_MetricComparison::is_name_Set() const{
    return m_name_isSet;
}

bool OAIComputation_MetricComparison::is_name_Valid() const{
    return m_name_isValid;
}

OAITopBottomMoversComputation_Time OAIComputation_MetricComparison::getTime() const {
    return m_time;
}
void OAIComputation_MetricComparison::setTime(const OAITopBottomMoversComputation_Time &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIComputation_MetricComparison::is_time_Set() const{
    return m_time_isSet;
}

bool OAIComputation_MetricComparison::is_time_Valid() const{
    return m_time_isValid;
}

OAIMetricComparisonComputation_FromValue OAIComputation_MetricComparison::getFromValue() const {
    return m_from_value;
}
void OAIComputation_MetricComparison::setFromValue(const OAIMetricComparisonComputation_FromValue &from_value) {
    m_from_value = from_value;
    m_from_value_isSet = true;
}

bool OAIComputation_MetricComparison::is_from_value_Set() const{
    return m_from_value_isSet;
}

bool OAIComputation_MetricComparison::is_from_value_Valid() const{
    return m_from_value_isValid;
}

OAIMetricComparisonComputation_TargetValue OAIComputation_MetricComparison::getTargetValue() const {
    return m_target_value;
}
void OAIComputation_MetricComparison::setTargetValue(const OAIMetricComparisonComputation_TargetValue &target_value) {
    m_target_value = target_value;
    m_target_value_isSet = true;
}

bool OAIComputation_MetricComparison::is_target_value_Set() const{
    return m_target_value_isSet;
}

bool OAIComputation_MetricComparison::is_target_value_Valid() const{
    return m_target_value_isValid;
}

bool OAIComputation_MetricComparison::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_computation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComputation_MetricComparison::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_computation_id_isValid && m_time_isValid && m_from_value_isValid && m_target_value_isValid && true;
}

} // namespace OpenAPI
