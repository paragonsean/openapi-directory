/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBoxPlotFieldWells_BoxPlotAggregatedFieldWells.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBoxPlotFieldWells_BoxPlotAggregatedFieldWells::OAIBoxPlotFieldWells_BoxPlotAggregatedFieldWells(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBoxPlotFieldWells_BoxPlotAggregatedFieldWells::OAIBoxPlotFieldWells_BoxPlotAggregatedFieldWells() {
    this->initializeModel();
}

OAIBoxPlotFieldWells_BoxPlotAggregatedFieldWells::~OAIBoxPlotFieldWells_BoxPlotAggregatedFieldWells() {}

void OAIBoxPlotFieldWells_BoxPlotAggregatedFieldWells::initializeModel() {

    m_group_by_isSet = false;
    m_group_by_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIBoxPlotFieldWells_BoxPlotAggregatedFieldWells::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBoxPlotFieldWells_BoxPlotAggregatedFieldWells::fromJsonObject(QJsonObject json) {

    m_group_by_isValid = ::OpenAPI::fromJsonValue(m_group_by, json[QString("GroupBy")]);
    m_group_by_isSet = !json[QString("GroupBy")].isNull() && m_group_by_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("Values")]);
    m_values_isSet = !json[QString("Values")].isNull() && m_values_isValid;
}

QString OAIBoxPlotFieldWells_BoxPlotAggregatedFieldWells::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBoxPlotFieldWells_BoxPlotAggregatedFieldWells::asJsonObject() const {
    QJsonObject obj;
    if (m_group_by.isSet()) {
        obj.insert(QString("GroupBy"), ::OpenAPI::toJsonValue(m_group_by));
    }
    if (m_values.isSet()) {
        obj.insert(QString("Values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QList OAIBoxPlotFieldWells_BoxPlotAggregatedFieldWells::getGroupBy() const {
    return m_group_by;
}
void OAIBoxPlotFieldWells_BoxPlotAggregatedFieldWells::setGroupBy(const QList &group_by) {
    m_group_by = group_by;
    m_group_by_isSet = true;
}

bool OAIBoxPlotFieldWells_BoxPlotAggregatedFieldWells::is_group_by_Set() const{
    return m_group_by_isSet;
}

bool OAIBoxPlotFieldWells_BoxPlotAggregatedFieldWells::is_group_by_Valid() const{
    return m_group_by_isValid;
}

QList OAIBoxPlotFieldWells_BoxPlotAggregatedFieldWells::getValues() const {
    return m_values;
}
void OAIBoxPlotFieldWells_BoxPlotAggregatedFieldWells::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIBoxPlotFieldWells_BoxPlotAggregatedFieldWells::is_values_Set() const{
    return m_values_isSet;
}

bool OAIBoxPlotFieldWells_BoxPlotAggregatedFieldWells::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIBoxPlotFieldWells_BoxPlotAggregatedFieldWells::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBoxPlotFieldWells_BoxPlotAggregatedFieldWells::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
