/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKPIVisual.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKPIVisual::OAIKPIVisual(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKPIVisual::OAIKPIVisual() {
    this->initializeModel();
}

OAIKPIVisual::~OAIKPIVisual() {}

void OAIKPIVisual::initializeModel() {

    m_visual_id_isSet = false;
    m_visual_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_subtitle_isSet = false;
    m_subtitle_isValid = false;

    m_chart_configuration_isSet = false;
    m_chart_configuration_isValid = false;

    m_conditional_formatting_isSet = false;
    m_conditional_formatting_isValid = false;

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_column_hierarchies_isSet = false;
    m_column_hierarchies_isValid = false;
}

void OAIKPIVisual::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKPIVisual::fromJsonObject(QJsonObject json) {

    m_visual_id_isValid = ::OpenAPI::fromJsonValue(m_visual_id, json[QString("VisualId")]);
    m_visual_id_isSet = !json[QString("VisualId")].isNull() && m_visual_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_subtitle_isValid = ::OpenAPI::fromJsonValue(m_subtitle, json[QString("Subtitle")]);
    m_subtitle_isSet = !json[QString("Subtitle")].isNull() && m_subtitle_isValid;

    m_chart_configuration_isValid = ::OpenAPI::fromJsonValue(m_chart_configuration, json[QString("ChartConfiguration")]);
    m_chart_configuration_isSet = !json[QString("ChartConfiguration")].isNull() && m_chart_configuration_isValid;

    m_conditional_formatting_isValid = ::OpenAPI::fromJsonValue(m_conditional_formatting, json[QString("ConditionalFormatting")]);
    m_conditional_formatting_isSet = !json[QString("ConditionalFormatting")].isNull() && m_conditional_formatting_isValid;

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("Actions")]);
    m_actions_isSet = !json[QString("Actions")].isNull() && m_actions_isValid;

    m_column_hierarchies_isValid = ::OpenAPI::fromJsonValue(m_column_hierarchies, json[QString("ColumnHierarchies")]);
    m_column_hierarchies_isSet = !json[QString("ColumnHierarchies")].isNull() && m_column_hierarchies_isValid;
}

QString OAIKPIVisual::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKPIVisual::asJsonObject() const {
    QJsonObject obj;
    if (m_visual_id_isSet) {
        obj.insert(QString("VisualId"), ::OpenAPI::toJsonValue(m_visual_id));
    }
    if (m_title.isSet()) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_subtitle.isSet()) {
        obj.insert(QString("Subtitle"), ::OpenAPI::toJsonValue(m_subtitle));
    }
    if (m_chart_configuration.isSet()) {
        obj.insert(QString("ChartConfiguration"), ::OpenAPI::toJsonValue(m_chart_configuration));
    }
    if (m_conditional_formatting.isSet()) {
        obj.insert(QString("ConditionalFormatting"), ::OpenAPI::toJsonValue(m_conditional_formatting));
    }
    if (m_actions.isSet()) {
        obj.insert(QString("Actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_column_hierarchies.isSet()) {
        obj.insert(QString("ColumnHierarchies"), ::OpenAPI::toJsonValue(m_column_hierarchies));
    }
    return obj;
}

QString OAIKPIVisual::getVisualId() const {
    return m_visual_id;
}
void OAIKPIVisual::setVisualId(const QString &visual_id) {
    m_visual_id = visual_id;
    m_visual_id_isSet = true;
}

bool OAIKPIVisual::is_visual_id_Set() const{
    return m_visual_id_isSet;
}

bool OAIKPIVisual::is_visual_id_Valid() const{
    return m_visual_id_isValid;
}

OAIBarChartVisual_Title OAIKPIVisual::getTitle() const {
    return m_title;
}
void OAIKPIVisual::setTitle(const OAIBarChartVisual_Title &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIKPIVisual::is_title_Set() const{
    return m_title_isSet;
}

bool OAIKPIVisual::is_title_Valid() const{
    return m_title_isValid;
}

OAIBarChartVisual_Subtitle OAIKPIVisual::getSubtitle() const {
    return m_subtitle;
}
void OAIKPIVisual::setSubtitle(const OAIBarChartVisual_Subtitle &subtitle) {
    m_subtitle = subtitle;
    m_subtitle_isSet = true;
}

bool OAIKPIVisual::is_subtitle_Set() const{
    return m_subtitle_isSet;
}

bool OAIKPIVisual::is_subtitle_Valid() const{
    return m_subtitle_isValid;
}

OAIKPIVisual_ChartConfiguration OAIKPIVisual::getChartConfiguration() const {
    return m_chart_configuration;
}
void OAIKPIVisual::setChartConfiguration(const OAIKPIVisual_ChartConfiguration &chart_configuration) {
    m_chart_configuration = chart_configuration;
    m_chart_configuration_isSet = true;
}

bool OAIKPIVisual::is_chart_configuration_Set() const{
    return m_chart_configuration_isSet;
}

bool OAIKPIVisual::is_chart_configuration_Valid() const{
    return m_chart_configuration_isValid;
}

OAIKPIVisual_ConditionalFormatting OAIKPIVisual::getConditionalFormatting() const {
    return m_conditional_formatting;
}
void OAIKPIVisual::setConditionalFormatting(const OAIKPIVisual_ConditionalFormatting &conditional_formatting) {
    m_conditional_formatting = conditional_formatting;
    m_conditional_formatting_isSet = true;
}

bool OAIKPIVisual::is_conditional_formatting_Set() const{
    return m_conditional_formatting_isSet;
}

bool OAIKPIVisual::is_conditional_formatting_Valid() const{
    return m_conditional_formatting_isValid;
}

QList OAIKPIVisual::getActions() const {
    return m_actions;
}
void OAIKPIVisual::setActions(const QList &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIKPIVisual::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIKPIVisual::is_actions_Valid() const{
    return m_actions_isValid;
}

QList OAIKPIVisual::getColumnHierarchies() const {
    return m_column_hierarchies;
}
void OAIKPIVisual::setColumnHierarchies(const QList &column_hierarchies) {
    m_column_hierarchies = column_hierarchies;
    m_column_hierarchies_isSet = true;
}

bool OAIKPIVisual::is_column_hierarchies_Set() const{
    return m_column_hierarchies_isSet;
}

bool OAIKPIVisual::is_column_hierarchies_Valid() const{
    return m_column_hierarchies_isValid;
}

bool OAIKPIVisual::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_visual_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_chart_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditional_formatting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_hierarchies.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKPIVisual::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_visual_id_isValid && true;
}

} // namespace OpenAPI
