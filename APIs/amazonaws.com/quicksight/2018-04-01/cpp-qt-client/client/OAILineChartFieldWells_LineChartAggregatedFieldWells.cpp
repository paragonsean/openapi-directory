/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILineChartFieldWells_LineChartAggregatedFieldWells.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILineChartFieldWells_LineChartAggregatedFieldWells::OAILineChartFieldWells_LineChartAggregatedFieldWells(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILineChartFieldWells_LineChartAggregatedFieldWells::OAILineChartFieldWells_LineChartAggregatedFieldWells() {
    this->initializeModel();
}

OAILineChartFieldWells_LineChartAggregatedFieldWells::~OAILineChartFieldWells_LineChartAggregatedFieldWells() {}

void OAILineChartFieldWells_LineChartAggregatedFieldWells::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;

    m_colors_isSet = false;
    m_colors_isValid = false;

    m_small_multiples_isSet = false;
    m_small_multiples_isValid = false;
}

void OAILineChartFieldWells_LineChartAggregatedFieldWells::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILineChartFieldWells_LineChartAggregatedFieldWells::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("Category")]);
    m_category_isSet = !json[QString("Category")].isNull() && m_category_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("Values")]);
    m_values_isSet = !json[QString("Values")].isNull() && m_values_isValid;

    m_colors_isValid = ::OpenAPI::fromJsonValue(m_colors, json[QString("Colors")]);
    m_colors_isSet = !json[QString("Colors")].isNull() && m_colors_isValid;

    m_small_multiples_isValid = ::OpenAPI::fromJsonValue(m_small_multiples, json[QString("SmallMultiples")]);
    m_small_multiples_isSet = !json[QString("SmallMultiples")].isNull() && m_small_multiples_isValid;
}

QString OAILineChartFieldWells_LineChartAggregatedFieldWells::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILineChartFieldWells_LineChartAggregatedFieldWells::asJsonObject() const {
    QJsonObject obj;
    if (m_category.isSet()) {
        obj.insert(QString("Category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_values.isSet()) {
        obj.insert(QString("Values"), ::OpenAPI::toJsonValue(m_values));
    }
    if (m_colors.isSet()) {
        obj.insert(QString("Colors"), ::OpenAPI::toJsonValue(m_colors));
    }
    if (m_small_multiples.isSet()) {
        obj.insert(QString("SmallMultiples"), ::OpenAPI::toJsonValue(m_small_multiples));
    }
    return obj;
}

QList OAILineChartFieldWells_LineChartAggregatedFieldWells::getCategory() const {
    return m_category;
}
void OAILineChartFieldWells_LineChartAggregatedFieldWells::setCategory(const QList &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAILineChartFieldWells_LineChartAggregatedFieldWells::is_category_Set() const{
    return m_category_isSet;
}

bool OAILineChartFieldWells_LineChartAggregatedFieldWells::is_category_Valid() const{
    return m_category_isValid;
}

QList OAILineChartFieldWells_LineChartAggregatedFieldWells::getValues() const {
    return m_values;
}
void OAILineChartFieldWells_LineChartAggregatedFieldWells::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAILineChartFieldWells_LineChartAggregatedFieldWells::is_values_Set() const{
    return m_values_isSet;
}

bool OAILineChartFieldWells_LineChartAggregatedFieldWells::is_values_Valid() const{
    return m_values_isValid;
}

QList OAILineChartFieldWells_LineChartAggregatedFieldWells::getColors() const {
    return m_colors;
}
void OAILineChartFieldWells_LineChartAggregatedFieldWells::setColors(const QList &colors) {
    m_colors = colors;
    m_colors_isSet = true;
}

bool OAILineChartFieldWells_LineChartAggregatedFieldWells::is_colors_Set() const{
    return m_colors_isSet;
}

bool OAILineChartFieldWells_LineChartAggregatedFieldWells::is_colors_Valid() const{
    return m_colors_isValid;
}

QList OAILineChartFieldWells_LineChartAggregatedFieldWells::getSmallMultiples() const {
    return m_small_multiples;
}
void OAILineChartFieldWells_LineChartAggregatedFieldWells::setSmallMultiples(const QList &small_multiples) {
    m_small_multiples = small_multiples;
    m_small_multiples_isSet = true;
}

bool OAILineChartFieldWells_LineChartAggregatedFieldWells::is_small_multiples_Set() const{
    return m_small_multiples_isSet;
}

bool OAILineChartFieldWells_LineChartAggregatedFieldWells::is_small_multiples_Valid() const{
    return m_small_multiples_isValid;
}

bool OAILineChartFieldWells_LineChartAggregatedFieldWells::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_colors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_multiples.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILineChartFieldWells_LineChartAggregatedFieldWells::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
