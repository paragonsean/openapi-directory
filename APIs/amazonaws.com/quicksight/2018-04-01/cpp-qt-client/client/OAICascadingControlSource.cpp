/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICascadingControlSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICascadingControlSource::OAICascadingControlSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICascadingControlSource::OAICascadingControlSource() {
    this->initializeModel();
}

OAICascadingControlSource::~OAICascadingControlSource() {}

void OAICascadingControlSource::initializeModel() {

    m_source_sheet_control_id_isSet = false;
    m_source_sheet_control_id_isValid = false;

    m_column_to_match_isSet = false;
    m_column_to_match_isValid = false;
}

void OAICascadingControlSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICascadingControlSource::fromJsonObject(QJsonObject json) {

    m_source_sheet_control_id_isValid = ::OpenAPI::fromJsonValue(m_source_sheet_control_id, json[QString("SourceSheetControlId")]);
    m_source_sheet_control_id_isSet = !json[QString("SourceSheetControlId")].isNull() && m_source_sheet_control_id_isValid;

    m_column_to_match_isValid = ::OpenAPI::fromJsonValue(m_column_to_match, json[QString("ColumnToMatch")]);
    m_column_to_match_isSet = !json[QString("ColumnToMatch")].isNull() && m_column_to_match_isValid;
}

QString OAICascadingControlSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICascadingControlSource::asJsonObject() const {
    QJsonObject obj;
    if (m_source_sheet_control_id_isSet) {
        obj.insert(QString("SourceSheetControlId"), ::OpenAPI::toJsonValue(m_source_sheet_control_id));
    }
    if (m_column_to_match.isSet()) {
        obj.insert(QString("ColumnToMatch"), ::OpenAPI::toJsonValue(m_column_to_match));
    }
    return obj;
}

QString OAICascadingControlSource::getSourceSheetControlId() const {
    return m_source_sheet_control_id;
}
void OAICascadingControlSource::setSourceSheetControlId(const QString &source_sheet_control_id) {
    m_source_sheet_control_id = source_sheet_control_id;
    m_source_sheet_control_id_isSet = true;
}

bool OAICascadingControlSource::is_source_sheet_control_id_Set() const{
    return m_source_sheet_control_id_isSet;
}

bool OAICascadingControlSource::is_source_sheet_control_id_Valid() const{
    return m_source_sheet_control_id_isValid;
}

OAICascadingControlSource_ColumnToMatch OAICascadingControlSource::getColumnToMatch() const {
    return m_column_to_match;
}
void OAICascadingControlSource::setColumnToMatch(const OAICascadingControlSource_ColumnToMatch &column_to_match) {
    m_column_to_match = column_to_match;
    m_column_to_match_isSet = true;
}

bool OAICascadingControlSource::is_column_to_match_Set() const{
    return m_column_to_match_isSet;
}

bool OAICascadingControlSource::is_column_to_match_Valid() const{
    return m_column_to_match_isValid;
}

bool OAICascadingControlSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_sheet_control_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_to_match.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICascadingControlSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
