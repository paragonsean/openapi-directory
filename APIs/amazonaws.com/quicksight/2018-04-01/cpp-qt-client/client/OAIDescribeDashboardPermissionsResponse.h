/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeDashboardPermissionsResponse.h
 *
 * 
 */

#ifndef OAIDescribeDashboardPermissionsResponse_H
#define OAIDescribeDashboardPermissionsResponse_H

#include <QJsonObject>

#include "OAIDescribeDashboardPermissionsResponse_LinkSharingConfiguration.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDescribeDashboardPermissionsResponse_LinkSharingConfiguration;

class OAIDescribeDashboardPermissionsResponse : public OAIObject {
public:
    OAIDescribeDashboardPermissionsResponse();
    OAIDescribeDashboardPermissionsResponse(QString json);
    ~OAIDescribeDashboardPermissionsResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDashboardId() const;
    void setDashboardId(const QString &dashboard_id);
    bool is_dashboard_id_Set() const;
    bool is_dashboard_id_Valid() const;

    QString getDashboardArn() const;
    void setDashboardArn(const QString &dashboard_arn);
    bool is_dashboard_arn_Set() const;
    bool is_dashboard_arn_Valid() const;

    QList getPermissions() const;
    void setPermissions(const QList &permissions);
    bool is_permissions_Set() const;
    bool is_permissions_Valid() const;

    qint32 getStatus() const;
    void setStatus(const qint32 &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getRequestId() const;
    void setRequestId(const QString &request_id);
    bool is_request_id_Set() const;
    bool is_request_id_Valid() const;

    OAIDescribeDashboardPermissionsResponse_LinkSharingConfiguration getLinkSharingConfiguration() const;
    void setLinkSharingConfiguration(const OAIDescribeDashboardPermissionsResponse_LinkSharingConfiguration &link_sharing_configuration);
    bool is_link_sharing_configuration_Set() const;
    bool is_link_sharing_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_dashboard_id;
    bool m_dashboard_id_isSet;
    bool m_dashboard_id_isValid;

    QString m_dashboard_arn;
    bool m_dashboard_arn_isSet;
    bool m_dashboard_arn_isValid;

    QList m_permissions;
    bool m_permissions_isSet;
    bool m_permissions_isValid;

    qint32 m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_request_id;
    bool m_request_id_isSet;
    bool m_request_id_isValid;

    OAIDescribeDashboardPermissionsResponse_LinkSharingConfiguration m_link_sharing_configuration;
    bool m_link_sharing_configuration_isSet;
    bool m_link_sharing_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeDashboardPermissionsResponse)

#endif // OAIDescribeDashboardPermissionsResponse_H
