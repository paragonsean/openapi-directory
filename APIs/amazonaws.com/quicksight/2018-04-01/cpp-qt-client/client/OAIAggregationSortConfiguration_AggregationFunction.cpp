/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAggregationSortConfiguration_AggregationFunction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAggregationSortConfiguration_AggregationFunction::OAIAggregationSortConfiguration_AggregationFunction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAggregationSortConfiguration_AggregationFunction::OAIAggregationSortConfiguration_AggregationFunction() {
    this->initializeModel();
}

OAIAggregationSortConfiguration_AggregationFunction::~OAIAggregationSortConfiguration_AggregationFunction() {}

void OAIAggregationSortConfiguration_AggregationFunction::initializeModel() {

    m_numerical_aggregation_function_isSet = false;
    m_numerical_aggregation_function_isValid = false;

    m_categorical_aggregation_function_isSet = false;
    m_categorical_aggregation_function_isValid = false;

    m_date_aggregation_function_isSet = false;
    m_date_aggregation_function_isValid = false;

    m_attribute_aggregation_function_isSet = false;
    m_attribute_aggregation_function_isValid = false;
}

void OAIAggregationSortConfiguration_AggregationFunction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAggregationSortConfiguration_AggregationFunction::fromJsonObject(QJsonObject json) {

    m_numerical_aggregation_function_isValid = ::OpenAPI::fromJsonValue(m_numerical_aggregation_function, json[QString("NumericalAggregationFunction")]);
    m_numerical_aggregation_function_isSet = !json[QString("NumericalAggregationFunction")].isNull() && m_numerical_aggregation_function_isValid;

    m_categorical_aggregation_function_isValid = ::OpenAPI::fromJsonValue(m_categorical_aggregation_function, json[QString("CategoricalAggregationFunction")]);
    m_categorical_aggregation_function_isSet = !json[QString("CategoricalAggregationFunction")].isNull() && m_categorical_aggregation_function_isValid;

    m_date_aggregation_function_isValid = ::OpenAPI::fromJsonValue(m_date_aggregation_function, json[QString("DateAggregationFunction")]);
    m_date_aggregation_function_isSet = !json[QString("DateAggregationFunction")].isNull() && m_date_aggregation_function_isValid;

    m_attribute_aggregation_function_isValid = ::OpenAPI::fromJsonValue(m_attribute_aggregation_function, json[QString("AttributeAggregationFunction")]);
    m_attribute_aggregation_function_isSet = !json[QString("AttributeAggregationFunction")].isNull() && m_attribute_aggregation_function_isValid;
}

QString OAIAggregationSortConfiguration_AggregationFunction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAggregationSortConfiguration_AggregationFunction::asJsonObject() const {
    QJsonObject obj;
    if (m_numerical_aggregation_function.isSet()) {
        obj.insert(QString("NumericalAggregationFunction"), ::OpenAPI::toJsonValue(m_numerical_aggregation_function));
    }
    if (m_categorical_aggregation_function.isSet()) {
        obj.insert(QString("CategoricalAggregationFunction"), ::OpenAPI::toJsonValue(m_categorical_aggregation_function));
    }
    if (m_date_aggregation_function.isSet()) {
        obj.insert(QString("DateAggregationFunction"), ::OpenAPI::toJsonValue(m_date_aggregation_function));
    }
    if (m_attribute_aggregation_function.isSet()) {
        obj.insert(QString("AttributeAggregationFunction"), ::OpenAPI::toJsonValue(m_attribute_aggregation_function));
    }
    return obj;
}

OAIAggregationFunction_NumericalAggregationFunction OAIAggregationSortConfiguration_AggregationFunction::getNumericalAggregationFunction() const {
    return m_numerical_aggregation_function;
}
void OAIAggregationSortConfiguration_AggregationFunction::setNumericalAggregationFunction(const OAIAggregationFunction_NumericalAggregationFunction &numerical_aggregation_function) {
    m_numerical_aggregation_function = numerical_aggregation_function;
    m_numerical_aggregation_function_isSet = true;
}

bool OAIAggregationSortConfiguration_AggregationFunction::is_numerical_aggregation_function_Set() const{
    return m_numerical_aggregation_function_isSet;
}

bool OAIAggregationSortConfiguration_AggregationFunction::is_numerical_aggregation_function_Valid() const{
    return m_numerical_aggregation_function_isValid;
}

OAICategoricalAggregationFunction OAIAggregationSortConfiguration_AggregationFunction::getCategoricalAggregationFunction() const {
    return m_categorical_aggregation_function;
}
void OAIAggregationSortConfiguration_AggregationFunction::setCategoricalAggregationFunction(const OAICategoricalAggregationFunction &categorical_aggregation_function) {
    m_categorical_aggregation_function = categorical_aggregation_function;
    m_categorical_aggregation_function_isSet = true;
}

bool OAIAggregationSortConfiguration_AggregationFunction::is_categorical_aggregation_function_Set() const{
    return m_categorical_aggregation_function_isSet;
}

bool OAIAggregationSortConfiguration_AggregationFunction::is_categorical_aggregation_function_Valid() const{
    return m_categorical_aggregation_function_isValid;
}

OAIDateAggregationFunction OAIAggregationSortConfiguration_AggregationFunction::getDateAggregationFunction() const {
    return m_date_aggregation_function;
}
void OAIAggregationSortConfiguration_AggregationFunction::setDateAggregationFunction(const OAIDateAggregationFunction &date_aggregation_function) {
    m_date_aggregation_function = date_aggregation_function;
    m_date_aggregation_function_isSet = true;
}

bool OAIAggregationSortConfiguration_AggregationFunction::is_date_aggregation_function_Set() const{
    return m_date_aggregation_function_isSet;
}

bool OAIAggregationSortConfiguration_AggregationFunction::is_date_aggregation_function_Valid() const{
    return m_date_aggregation_function_isValid;
}

OAIAggregationFunction_AttributeAggregationFunction OAIAggregationSortConfiguration_AggregationFunction::getAttributeAggregationFunction() const {
    return m_attribute_aggregation_function;
}
void OAIAggregationSortConfiguration_AggregationFunction::setAttributeAggregationFunction(const OAIAggregationFunction_AttributeAggregationFunction &attribute_aggregation_function) {
    m_attribute_aggregation_function = attribute_aggregation_function;
    m_attribute_aggregation_function_isSet = true;
}

bool OAIAggregationSortConfiguration_AggregationFunction::is_attribute_aggregation_function_Set() const{
    return m_attribute_aggregation_function_isSet;
}

bool OAIAggregationSortConfiguration_AggregationFunction::is_attribute_aggregation_function_Valid() const{
    return m_attribute_aggregation_function_isValid;
}

bool OAIAggregationSortConfiguration_AggregationFunction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_numerical_aggregation_function.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_categorical_aggregation_function.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_aggregation_function.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_aggregation_function.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAggregationSortConfiguration_AggregationFunction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
