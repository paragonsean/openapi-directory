/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHeaderFooterSectionConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHeaderFooterSectionConfiguration::OAIHeaderFooterSectionConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHeaderFooterSectionConfiguration::OAIHeaderFooterSectionConfiguration() {
    this->initializeModel();
}

OAIHeaderFooterSectionConfiguration::~OAIHeaderFooterSectionConfiguration() {}

void OAIHeaderFooterSectionConfiguration::initializeModel() {

    m_section_id_isSet = false;
    m_section_id_isValid = false;

    m_layout_isSet = false;
    m_layout_isValid = false;

    m_style_isSet = false;
    m_style_isValid = false;
}

void OAIHeaderFooterSectionConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHeaderFooterSectionConfiguration::fromJsonObject(QJsonObject json) {

    m_section_id_isValid = ::OpenAPI::fromJsonValue(m_section_id, json[QString("SectionId")]);
    m_section_id_isSet = !json[QString("SectionId")].isNull() && m_section_id_isValid;

    m_layout_isValid = ::OpenAPI::fromJsonValue(m_layout, json[QString("Layout")]);
    m_layout_isSet = !json[QString("Layout")].isNull() && m_layout_isValid;

    m_style_isValid = ::OpenAPI::fromJsonValue(m_style, json[QString("Style")]);
    m_style_isSet = !json[QString("Style")].isNull() && m_style_isValid;
}

QString OAIHeaderFooterSectionConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHeaderFooterSectionConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_section_id_isSet) {
        obj.insert(QString("SectionId"), ::OpenAPI::toJsonValue(m_section_id));
    }
    if (m_layout.isSet()) {
        obj.insert(QString("Layout"), ::OpenAPI::toJsonValue(m_layout));
    }
    if (m_style.isSet()) {
        obj.insert(QString("Style"), ::OpenAPI::toJsonValue(m_style));
    }
    return obj;
}

QString OAIHeaderFooterSectionConfiguration::getSectionId() const {
    return m_section_id;
}
void OAIHeaderFooterSectionConfiguration::setSectionId(const QString &section_id) {
    m_section_id = section_id;
    m_section_id_isSet = true;
}

bool OAIHeaderFooterSectionConfiguration::is_section_id_Set() const{
    return m_section_id_isSet;
}

bool OAIHeaderFooterSectionConfiguration::is_section_id_Valid() const{
    return m_section_id_isValid;
}

OAIHeaderFooterSectionConfiguration_Layout OAIHeaderFooterSectionConfiguration::getLayout() const {
    return m_layout;
}
void OAIHeaderFooterSectionConfiguration::setLayout(const OAIHeaderFooterSectionConfiguration_Layout &layout) {
    m_layout = layout;
    m_layout_isSet = true;
}

bool OAIHeaderFooterSectionConfiguration::is_layout_Set() const{
    return m_layout_isSet;
}

bool OAIHeaderFooterSectionConfiguration::is_layout_Valid() const{
    return m_layout_isValid;
}

OAIHeaderFooterSectionConfiguration_Style OAIHeaderFooterSectionConfiguration::getStyle() const {
    return m_style;
}
void OAIHeaderFooterSectionConfiguration::setStyle(const OAIHeaderFooterSectionConfiguration_Style &style) {
    m_style = style;
    m_style_isSet = true;
}

bool OAIHeaderFooterSectionConfiguration::is_style_Set() const{
    return m_style_isSet;
}

bool OAIHeaderFooterSectionConfiguration::is_style_Valid() const{
    return m_style_isValid;
}

bool OAIHeaderFooterSectionConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_section_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_layout.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_style.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHeaderFooterSectionConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_section_id_isValid && m_layout_isValid && true;
}

} // namespace OpenAPI
