/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSourceType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSourceType::OAIDataSourceType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSourceType::OAIDataSourceType() {
    this->initializeModel();
}

OAIDataSourceType::~OAIDataSourceType() {}

void OAIDataSourceType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDataSourceType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDataSourceType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ADOBE_ANALYTICS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::ADOBE_ANALYTICS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AMAZON_ELASTICSEARCH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::AMAZON_ELASTICSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ATHENA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::ATHENA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AURORA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::AURORA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AURORA_POSTGRESQL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::AURORA_POSTGRESQL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AWS_IOT_ANALYTICS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::AWS_IOT_ANALYTICS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GITHUB", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::GITHUB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("JIRA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::JIRA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MARIADB", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::MARIADB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MYSQL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::MYSQL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ORACLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::ORACLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("POSTGRESQL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::POSTGRESQL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PRESTO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::PRESTO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REDSHIFT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::REDSHIFT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("S3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::S3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SALESFORCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::SALESFORCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SERVICENOW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::SERVICENOW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SNOWFLAKE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::SNOWFLAKE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SPARK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::SPARK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SQLSERVER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::SQLSERVER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TERADATA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::TERADATA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TWITTER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::TWITTER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TIMESTREAM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::TIMESTREAM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AMAZON_OPENSEARCH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::AMAZON_OPENSEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXASOL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::EXASOL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DATABRICKS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::DATABRICKS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDataSourceType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDataSourceType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDataSourceType::ADOBE_ANALYTICS:
            val = "ADOBE_ANALYTICS";
            break;
        case eOAIDataSourceType::AMAZON_ELASTICSEARCH:
            val = "AMAZON_ELASTICSEARCH";
            break;
        case eOAIDataSourceType::ATHENA:
            val = "ATHENA";
            break;
        case eOAIDataSourceType::AURORA:
            val = "AURORA";
            break;
        case eOAIDataSourceType::AURORA_POSTGRESQL:
            val = "AURORA_POSTGRESQL";
            break;
        case eOAIDataSourceType::AWS_IOT_ANALYTICS:
            val = "AWS_IOT_ANALYTICS";
            break;
        case eOAIDataSourceType::GITHUB:
            val = "GITHUB";
            break;
        case eOAIDataSourceType::JIRA:
            val = "JIRA";
            break;
        case eOAIDataSourceType::MARIADB:
            val = "MARIADB";
            break;
        case eOAIDataSourceType::MYSQL:
            val = "MYSQL";
            break;
        case eOAIDataSourceType::ORACLE:
            val = "ORACLE";
            break;
        case eOAIDataSourceType::POSTGRESQL:
            val = "POSTGRESQL";
            break;
        case eOAIDataSourceType::PRESTO:
            val = "PRESTO";
            break;
        case eOAIDataSourceType::REDSHIFT:
            val = "REDSHIFT";
            break;
        case eOAIDataSourceType::S3:
            val = "S3";
            break;
        case eOAIDataSourceType::SALESFORCE:
            val = "SALESFORCE";
            break;
        case eOAIDataSourceType::SERVICENOW:
            val = "SERVICENOW";
            break;
        case eOAIDataSourceType::SNOWFLAKE:
            val = "SNOWFLAKE";
            break;
        case eOAIDataSourceType::SPARK:
            val = "SPARK";
            break;
        case eOAIDataSourceType::SQLSERVER:
            val = "SQLSERVER";
            break;
        case eOAIDataSourceType::TERADATA:
            val = "TERADATA";
            break;
        case eOAIDataSourceType::TWITTER:
            val = "TWITTER";
            break;
        case eOAIDataSourceType::TIMESTREAM:
            val = "TIMESTREAM";
            break;
        case eOAIDataSourceType::AMAZON_OPENSEARCH:
            val = "AMAZON_OPENSEARCH";
            break;
        case eOAIDataSourceType::EXASOL:
            val = "EXASOL";
            break;
        case eOAIDataSourceType::DATABRICKS:
            val = "DATABRICKS";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDataSourceType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDataSourceType::eOAIDataSourceType OAIDataSourceType::getValue() const {
    return m_value;
}

void OAIDataSourceType::setValue(const OAIDataSourceType::eOAIDataSourceType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDataSourceType::isSet() const {
    
    return m_value_isSet;
}

bool OAIDataSourceType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
