/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHeatMapFieldWells_HeatMapAggregatedFieldWells.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHeatMapFieldWells_HeatMapAggregatedFieldWells::OAIHeatMapFieldWells_HeatMapAggregatedFieldWells(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHeatMapFieldWells_HeatMapAggregatedFieldWells::OAIHeatMapFieldWells_HeatMapAggregatedFieldWells() {
    this->initializeModel();
}

OAIHeatMapFieldWells_HeatMapAggregatedFieldWells::~OAIHeatMapFieldWells_HeatMapAggregatedFieldWells() {}

void OAIHeatMapFieldWells_HeatMapAggregatedFieldWells::initializeModel() {

    m_rows_isSet = false;
    m_rows_isValid = false;

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIHeatMapFieldWells_HeatMapAggregatedFieldWells::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHeatMapFieldWells_HeatMapAggregatedFieldWells::fromJsonObject(QJsonObject json) {

    m_rows_isValid = ::OpenAPI::fromJsonValue(m_rows, json[QString("Rows")]);
    m_rows_isSet = !json[QString("Rows")].isNull() && m_rows_isValid;

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("Columns")]);
    m_columns_isSet = !json[QString("Columns")].isNull() && m_columns_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("Values")]);
    m_values_isSet = !json[QString("Values")].isNull() && m_values_isValid;
}

QString OAIHeatMapFieldWells_HeatMapAggregatedFieldWells::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHeatMapFieldWells_HeatMapAggregatedFieldWells::asJsonObject() const {
    QJsonObject obj;
    if (m_rows.isSet()) {
        obj.insert(QString("Rows"), ::OpenAPI::toJsonValue(m_rows));
    }
    if (m_columns.isSet()) {
        obj.insert(QString("Columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_values.isSet()) {
        obj.insert(QString("Values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QList OAIHeatMapFieldWells_HeatMapAggregatedFieldWells::getRows() const {
    return m_rows;
}
void OAIHeatMapFieldWells_HeatMapAggregatedFieldWells::setRows(const QList &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAIHeatMapFieldWells_HeatMapAggregatedFieldWells::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAIHeatMapFieldWells_HeatMapAggregatedFieldWells::is_rows_Valid() const{
    return m_rows_isValid;
}

QList OAIHeatMapFieldWells_HeatMapAggregatedFieldWells::getColumns() const {
    return m_columns;
}
void OAIHeatMapFieldWells_HeatMapAggregatedFieldWells::setColumns(const QList &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIHeatMapFieldWells_HeatMapAggregatedFieldWells::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIHeatMapFieldWells_HeatMapAggregatedFieldWells::is_columns_Valid() const{
    return m_columns_isValid;
}

QList OAIHeatMapFieldWells_HeatMapAggregatedFieldWells::getValues() const {
    return m_values;
}
void OAIHeatMapFieldWells_HeatMapAggregatedFieldWells::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIHeatMapFieldWells_HeatMapAggregatedFieldWells::is_values_Set() const{
    return m_values_isSet;
}

bool OAIHeatMapFieldWells_HeatMapAggregatedFieldWells::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIHeatMapFieldWells_HeatMapAggregatedFieldWells::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rows.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHeatMapFieldWells_HeatMapAggregatedFieldWells::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
