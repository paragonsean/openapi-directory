/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkInterface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkInterface::OAINetworkInterface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkInterface::OAINetworkInterface() {
    this->initializeModel();
}

OAINetworkInterface::~OAINetworkInterface() {}

void OAINetworkInterface::initializeModel() {

    m_subnet_id_isSet = false;
    m_subnet_id_isValid = false;

    m_availability_zone_isSet = false;
    m_availability_zone_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_network_interface_id_isSet = false;
    m_network_interface_id_isValid = false;
}

void OAINetworkInterface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkInterface::fromJsonObject(QJsonObject json) {

    m_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_subnet_id, json[QString("SubnetId")]);
    m_subnet_id_isSet = !json[QString("SubnetId")].isNull() && m_subnet_id_isValid;

    m_availability_zone_isValid = ::OpenAPI::fromJsonValue(m_availability_zone, json[QString("AvailabilityZone")]);
    m_availability_zone_isSet = !json[QString("AvailabilityZone")].isNull() && m_availability_zone_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("ErrorMessage")]);
    m_error_message_isSet = !json[QString("ErrorMessage")].isNull() && m_error_message_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_network_interface_id_isValid = ::OpenAPI::fromJsonValue(m_network_interface_id, json[QString("NetworkInterfaceId")]);
    m_network_interface_id_isSet = !json[QString("NetworkInterfaceId")].isNull() && m_network_interface_id_isValid;
}

QString OAINetworkInterface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkInterface::asJsonObject() const {
    QJsonObject obj;
    if (m_subnet_id_isSet) {
        obj.insert(QString("SubnetId"), ::OpenAPI::toJsonValue(m_subnet_id));
    }
    if (m_availability_zone_isSet) {
        obj.insert(QString("AvailabilityZone"), ::OpenAPI::toJsonValue(m_availability_zone));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("ErrorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_network_interface_id_isSet) {
        obj.insert(QString("NetworkInterfaceId"), ::OpenAPI::toJsonValue(m_network_interface_id));
    }
    return obj;
}

QString OAINetworkInterface::getSubnetId() const {
    return m_subnet_id;
}
void OAINetworkInterface::setSubnetId(const QString &subnet_id) {
    m_subnet_id = subnet_id;
    m_subnet_id_isSet = true;
}

bool OAINetworkInterface::is_subnet_id_Set() const{
    return m_subnet_id_isSet;
}

bool OAINetworkInterface::is_subnet_id_Valid() const{
    return m_subnet_id_isValid;
}

QString OAINetworkInterface::getAvailabilityZone() const {
    return m_availability_zone;
}
void OAINetworkInterface::setAvailabilityZone(const QString &availability_zone) {
    m_availability_zone = availability_zone;
    m_availability_zone_isSet = true;
}

bool OAINetworkInterface::is_availability_zone_Set() const{
    return m_availability_zone_isSet;
}

bool OAINetworkInterface::is_availability_zone_Valid() const{
    return m_availability_zone_isValid;
}

QString OAINetworkInterface::getErrorMessage() const {
    return m_error_message;
}
void OAINetworkInterface::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAINetworkInterface::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAINetworkInterface::is_error_message_Valid() const{
    return m_error_message_isValid;
}

OAINetworkInterfaceStatus OAINetworkInterface::getStatus() const {
    return m_status;
}
void OAINetworkInterface::setStatus(const OAINetworkInterfaceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAINetworkInterface::is_status_Set() const{
    return m_status_isSet;
}

bool OAINetworkInterface::is_status_Valid() const{
    return m_status_isValid;
}

QString OAINetworkInterface::getNetworkInterfaceId() const {
    return m_network_interface_id;
}
void OAINetworkInterface::setNetworkInterfaceId(const QString &network_interface_id) {
    m_network_interface_id = network_interface_id;
    m_network_interface_id_isSet = true;
}

bool OAINetworkInterface::is_network_interface_id_Set() const{
    return m_network_interface_id_isSet;
}

bool OAINetworkInterface::is_network_interface_id_Valid() const{
    return m_network_interface_id_isValid;
}

bool OAINetworkInterface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_interface_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkInterface::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
