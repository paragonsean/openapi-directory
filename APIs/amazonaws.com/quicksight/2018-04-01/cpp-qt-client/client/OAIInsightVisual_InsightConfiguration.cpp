/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInsightVisual_InsightConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInsightVisual_InsightConfiguration::OAIInsightVisual_InsightConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInsightVisual_InsightConfiguration::OAIInsightVisual_InsightConfiguration() {
    this->initializeModel();
}

OAIInsightVisual_InsightConfiguration::~OAIInsightVisual_InsightConfiguration() {}

void OAIInsightVisual_InsightConfiguration::initializeModel() {

    m_computations_isSet = false;
    m_computations_isValid = false;

    m_custom_narrative_isSet = false;
    m_custom_narrative_isValid = false;
}

void OAIInsightVisual_InsightConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInsightVisual_InsightConfiguration::fromJsonObject(QJsonObject json) {

    m_computations_isValid = ::OpenAPI::fromJsonValue(m_computations, json[QString("Computations")]);
    m_computations_isSet = !json[QString("Computations")].isNull() && m_computations_isValid;

    m_custom_narrative_isValid = ::OpenAPI::fromJsonValue(m_custom_narrative, json[QString("CustomNarrative")]);
    m_custom_narrative_isSet = !json[QString("CustomNarrative")].isNull() && m_custom_narrative_isValid;
}

QString OAIInsightVisual_InsightConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInsightVisual_InsightConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_computations.isSet()) {
        obj.insert(QString("Computations"), ::OpenAPI::toJsonValue(m_computations));
    }
    if (m_custom_narrative.isSet()) {
        obj.insert(QString("CustomNarrative"), ::OpenAPI::toJsonValue(m_custom_narrative));
    }
    return obj;
}

QList OAIInsightVisual_InsightConfiguration::getComputations() const {
    return m_computations;
}
void OAIInsightVisual_InsightConfiguration::setComputations(const QList &computations) {
    m_computations = computations;
    m_computations_isSet = true;
}

bool OAIInsightVisual_InsightConfiguration::is_computations_Set() const{
    return m_computations_isSet;
}

bool OAIInsightVisual_InsightConfiguration::is_computations_Valid() const{
    return m_computations_isValid;
}

OAIInsightConfiguration_CustomNarrative OAIInsightVisual_InsightConfiguration::getCustomNarrative() const {
    return m_custom_narrative;
}
void OAIInsightVisual_InsightConfiguration::setCustomNarrative(const OAIInsightConfiguration_CustomNarrative &custom_narrative) {
    m_custom_narrative = custom_narrative;
    m_custom_narrative_isSet = true;
}

bool OAIInsightVisual_InsightConfiguration::is_custom_narrative_Set() const{
    return m_custom_narrative_isSet;
}

bool OAIInsightVisual_InsightConfiguration::is_custom_narrative_Valid() const{
    return m_custom_narrative_isValid;
}

bool OAIInsightVisual_InsightConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_computations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_narrative.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInsightVisual_InsightConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
