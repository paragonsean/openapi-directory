/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableInlineVisualization_DataBars.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableInlineVisualization_DataBars::OAITableInlineVisualization_DataBars(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableInlineVisualization_DataBars::OAITableInlineVisualization_DataBars() {
    this->initializeModel();
}

OAITableInlineVisualization_DataBars::~OAITableInlineVisualization_DataBars() {}

void OAITableInlineVisualization_DataBars::initializeModel() {

    m_field_id_isSet = false;
    m_field_id_isValid = false;

    m_positive_color_isSet = false;
    m_positive_color_isValid = false;

    m_negative_color_isSet = false;
    m_negative_color_isValid = false;
}

void OAITableInlineVisualization_DataBars::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableInlineVisualization_DataBars::fromJsonObject(QJsonObject json) {

    m_field_id_isValid = ::OpenAPI::fromJsonValue(m_field_id, json[QString("FieldId")]);
    m_field_id_isSet = !json[QString("FieldId")].isNull() && m_field_id_isValid;

    m_positive_color_isValid = ::OpenAPI::fromJsonValue(m_positive_color, json[QString("PositiveColor")]);
    m_positive_color_isSet = !json[QString("PositiveColor")].isNull() && m_positive_color_isValid;

    m_negative_color_isValid = ::OpenAPI::fromJsonValue(m_negative_color, json[QString("NegativeColor")]);
    m_negative_color_isSet = !json[QString("NegativeColor")].isNull() && m_negative_color_isValid;
}

QString OAITableInlineVisualization_DataBars::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableInlineVisualization_DataBars::asJsonObject() const {
    QJsonObject obj;
    if (m_field_id_isSet) {
        obj.insert(QString("FieldId"), ::OpenAPI::toJsonValue(m_field_id));
    }
    if (m_positive_color_isSet) {
        obj.insert(QString("PositiveColor"), ::OpenAPI::toJsonValue(m_positive_color));
    }
    if (m_negative_color_isSet) {
        obj.insert(QString("NegativeColor"), ::OpenAPI::toJsonValue(m_negative_color));
    }
    return obj;
}

QString OAITableInlineVisualization_DataBars::getFieldId() const {
    return m_field_id;
}
void OAITableInlineVisualization_DataBars::setFieldId(const QString &field_id) {
    m_field_id = field_id;
    m_field_id_isSet = true;
}

bool OAITableInlineVisualization_DataBars::is_field_id_Set() const{
    return m_field_id_isSet;
}

bool OAITableInlineVisualization_DataBars::is_field_id_Valid() const{
    return m_field_id_isValid;
}

QString OAITableInlineVisualization_DataBars::getPositiveColor() const {
    return m_positive_color;
}
void OAITableInlineVisualization_DataBars::setPositiveColor(const QString &positive_color) {
    m_positive_color = positive_color;
    m_positive_color_isSet = true;
}

bool OAITableInlineVisualization_DataBars::is_positive_color_Set() const{
    return m_positive_color_isSet;
}

bool OAITableInlineVisualization_DataBars::is_positive_color_Valid() const{
    return m_positive_color_isValid;
}

QString OAITableInlineVisualization_DataBars::getNegativeColor() const {
    return m_negative_color;
}
void OAITableInlineVisualization_DataBars::setNegativeColor(const QString &negative_color) {
    m_negative_color = negative_color;
    m_negative_color_isSet = true;
}

bool OAITableInlineVisualization_DataBars::is_negative_color_Set() const{
    return m_negative_color_isSet;
}

bool OAITableInlineVisualization_DataBars::is_negative_color_Valid() const{
    return m_negative_color_isValid;
}

bool OAITableInlineVisualization_DataBars::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_positive_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_negative_color_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableInlineVisualization_DataBars::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_field_id_isValid && true;
}

} // namespace OpenAPI
