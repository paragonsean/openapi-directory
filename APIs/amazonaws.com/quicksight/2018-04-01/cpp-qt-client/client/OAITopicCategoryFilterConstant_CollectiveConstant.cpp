/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopicCategoryFilterConstant_CollectiveConstant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopicCategoryFilterConstant_CollectiveConstant::OAITopicCategoryFilterConstant_CollectiveConstant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopicCategoryFilterConstant_CollectiveConstant::OAITopicCategoryFilterConstant_CollectiveConstant() {
    this->initializeModel();
}

OAITopicCategoryFilterConstant_CollectiveConstant::~OAITopicCategoryFilterConstant_CollectiveConstant() {}

void OAITopicCategoryFilterConstant_CollectiveConstant::initializeModel() {

    m_value_list_isSet = false;
    m_value_list_isValid = false;
}

void OAITopicCategoryFilterConstant_CollectiveConstant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopicCategoryFilterConstant_CollectiveConstant::fromJsonObject(QJsonObject json) {

    m_value_list_isValid = ::OpenAPI::fromJsonValue(m_value_list, json[QString("ValueList")]);
    m_value_list_isSet = !json[QString("ValueList")].isNull() && m_value_list_isValid;
}

QString OAITopicCategoryFilterConstant_CollectiveConstant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopicCategoryFilterConstant_CollectiveConstant::asJsonObject() const {
    QJsonObject obj;
    if (m_value_list.isSet()) {
        obj.insert(QString("ValueList"), ::OpenAPI::toJsonValue(m_value_list));
    }
    return obj;
}

QList OAITopicCategoryFilterConstant_CollectiveConstant::getValueList() const {
    return m_value_list;
}
void OAITopicCategoryFilterConstant_CollectiveConstant::setValueList(const QList &value_list) {
    m_value_list = value_list;
    m_value_list_isSet = true;
}

bool OAITopicCategoryFilterConstant_CollectiveConstant::is_value_list_Set() const{
    return m_value_list_isSet;
}

bool OAITopicCategoryFilterConstant_CollectiveConstant::is_value_list_Valid() const{
    return m_value_list_isValid;
}

bool OAITopicCategoryFilterConstant_CollectiveConstant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_value_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopicCategoryFilterConstant_CollectiveConstant::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
