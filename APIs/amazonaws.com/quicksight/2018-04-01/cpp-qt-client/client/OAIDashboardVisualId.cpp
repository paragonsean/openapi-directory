/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDashboardVisualId.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDashboardVisualId::OAIDashboardVisualId(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDashboardVisualId::OAIDashboardVisualId() {
    this->initializeModel();
}

OAIDashboardVisualId::~OAIDashboardVisualId() {}

void OAIDashboardVisualId::initializeModel() {

    m_dashboard_id_isSet = false;
    m_dashboard_id_isValid = false;

    m_sheet_id_isSet = false;
    m_sheet_id_isValid = false;

    m_visual_id_isSet = false;
    m_visual_id_isValid = false;
}

void OAIDashboardVisualId::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDashboardVisualId::fromJsonObject(QJsonObject json) {

    m_dashboard_id_isValid = ::OpenAPI::fromJsonValue(m_dashboard_id, json[QString("DashboardId")]);
    m_dashboard_id_isSet = !json[QString("DashboardId")].isNull() && m_dashboard_id_isValid;

    m_sheet_id_isValid = ::OpenAPI::fromJsonValue(m_sheet_id, json[QString("SheetId")]);
    m_sheet_id_isSet = !json[QString("SheetId")].isNull() && m_sheet_id_isValid;

    m_visual_id_isValid = ::OpenAPI::fromJsonValue(m_visual_id, json[QString("VisualId")]);
    m_visual_id_isSet = !json[QString("VisualId")].isNull() && m_visual_id_isValid;
}

QString OAIDashboardVisualId::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDashboardVisualId::asJsonObject() const {
    QJsonObject obj;
    if (m_dashboard_id_isSet) {
        obj.insert(QString("DashboardId"), ::OpenAPI::toJsonValue(m_dashboard_id));
    }
    if (m_sheet_id_isSet) {
        obj.insert(QString("SheetId"), ::OpenAPI::toJsonValue(m_sheet_id));
    }
    if (m_visual_id_isSet) {
        obj.insert(QString("VisualId"), ::OpenAPI::toJsonValue(m_visual_id));
    }
    return obj;
}

QString OAIDashboardVisualId::getDashboardId() const {
    return m_dashboard_id;
}
void OAIDashboardVisualId::setDashboardId(const QString &dashboard_id) {
    m_dashboard_id = dashboard_id;
    m_dashboard_id_isSet = true;
}

bool OAIDashboardVisualId::is_dashboard_id_Set() const{
    return m_dashboard_id_isSet;
}

bool OAIDashboardVisualId::is_dashboard_id_Valid() const{
    return m_dashboard_id_isValid;
}

QString OAIDashboardVisualId::getSheetId() const {
    return m_sheet_id;
}
void OAIDashboardVisualId::setSheetId(const QString &sheet_id) {
    m_sheet_id = sheet_id;
    m_sheet_id_isSet = true;
}

bool OAIDashboardVisualId::is_sheet_id_Set() const{
    return m_sheet_id_isSet;
}

bool OAIDashboardVisualId::is_sheet_id_Valid() const{
    return m_sheet_id_isValid;
}

QString OAIDashboardVisualId::getVisualId() const {
    return m_visual_id;
}
void OAIDashboardVisualId::setVisualId(const QString &visual_id) {
    m_visual_id = visual_id;
    m_visual_id_isSet = true;
}

bool OAIDashboardVisualId::is_visual_id_Set() const{
    return m_visual_id_isSet;
}

bool OAIDashboardVisualId::is_visual_id_Valid() const{
    return m_visual_id_isValid;
}

bool OAIDashboardVisualId::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dashboard_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sheet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visual_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDashboardVisualId::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dashboard_id_isValid && m_sheet_id_isValid && m_visual_id_isValid && true;
}

} // namespace OpenAPI
