/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGaugeChartConditionalFormattingOption_Arc.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGaugeChartConditionalFormattingOption_Arc::OAIGaugeChartConditionalFormattingOption_Arc(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGaugeChartConditionalFormattingOption_Arc::OAIGaugeChartConditionalFormattingOption_Arc() {
    this->initializeModel();
}

OAIGaugeChartConditionalFormattingOption_Arc::~OAIGaugeChartConditionalFormattingOption_Arc() {}

void OAIGaugeChartConditionalFormattingOption_Arc::initializeModel() {

    m_foreground_color_isSet = false;
    m_foreground_color_isValid = false;
}

void OAIGaugeChartConditionalFormattingOption_Arc::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGaugeChartConditionalFormattingOption_Arc::fromJsonObject(QJsonObject json) {

    m_foreground_color_isValid = ::OpenAPI::fromJsonValue(m_foreground_color, json[QString("ForegroundColor")]);
    m_foreground_color_isSet = !json[QString("ForegroundColor")].isNull() && m_foreground_color_isValid;
}

QString OAIGaugeChartConditionalFormattingOption_Arc::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGaugeChartConditionalFormattingOption_Arc::asJsonObject() const {
    QJsonObject obj;
    if (m_foreground_color.isSet()) {
        obj.insert(QString("ForegroundColor"), ::OpenAPI::toJsonValue(m_foreground_color));
    }
    return obj;
}

OAIGaugeChartArcConditionalFormatting_ForegroundColor OAIGaugeChartConditionalFormattingOption_Arc::getForegroundColor() const {
    return m_foreground_color;
}
void OAIGaugeChartConditionalFormattingOption_Arc::setForegroundColor(const OAIGaugeChartArcConditionalFormatting_ForegroundColor &foreground_color) {
    m_foreground_color = foreground_color;
    m_foreground_color_isSet = true;
}

bool OAIGaugeChartConditionalFormattingOption_Arc::is_foreground_color_Set() const{
    return m_foreground_color_isSet;
}

bool OAIGaugeChartConditionalFormattingOption_Arc::is_foreground_color_Valid() const{
    return m_foreground_color_isValid;
}

bool OAIGaugeChartConditionalFormattingOption_Arc::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_foreground_color.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGaugeChartConditionalFormattingOption_Arc::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
