/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISheetControlLayoutConfiguration_GridLayout.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISheetControlLayoutConfiguration_GridLayout::OAISheetControlLayoutConfiguration_GridLayout(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISheetControlLayoutConfiguration_GridLayout::OAISheetControlLayoutConfiguration_GridLayout() {
    this->initializeModel();
}

OAISheetControlLayoutConfiguration_GridLayout::~OAISheetControlLayoutConfiguration_GridLayout() {}

void OAISheetControlLayoutConfiguration_GridLayout::initializeModel() {

    m_elements_isSet = false;
    m_elements_isValid = false;

    m_canvas_size_options_isSet = false;
    m_canvas_size_options_isValid = false;
}

void OAISheetControlLayoutConfiguration_GridLayout::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISheetControlLayoutConfiguration_GridLayout::fromJsonObject(QJsonObject json) {

    m_elements_isValid = ::OpenAPI::fromJsonValue(m_elements, json[QString("Elements")]);
    m_elements_isSet = !json[QString("Elements")].isNull() && m_elements_isValid;

    m_canvas_size_options_isValid = ::OpenAPI::fromJsonValue(m_canvas_size_options, json[QString("CanvasSizeOptions")]);
    m_canvas_size_options_isSet = !json[QString("CanvasSizeOptions")].isNull() && m_canvas_size_options_isValid;
}

QString OAISheetControlLayoutConfiguration_GridLayout::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISheetControlLayoutConfiguration_GridLayout::asJsonObject() const {
    QJsonObject obj;
    if (m_elements.isSet()) {
        obj.insert(QString("Elements"), ::OpenAPI::toJsonValue(m_elements));
    }
    if (m_canvas_size_options.isSet()) {
        obj.insert(QString("CanvasSizeOptions"), ::OpenAPI::toJsonValue(m_canvas_size_options));
    }
    return obj;
}

QList OAISheetControlLayoutConfiguration_GridLayout::getElements() const {
    return m_elements;
}
void OAISheetControlLayoutConfiguration_GridLayout::setElements(const QList &elements) {
    m_elements = elements;
    m_elements_isSet = true;
}

bool OAISheetControlLayoutConfiguration_GridLayout::is_elements_Set() const{
    return m_elements_isSet;
}

bool OAISheetControlLayoutConfiguration_GridLayout::is_elements_Valid() const{
    return m_elements_isValid;
}

OAIGridLayoutCanvasSizeOptions OAISheetControlLayoutConfiguration_GridLayout::getCanvasSizeOptions() const {
    return m_canvas_size_options;
}
void OAISheetControlLayoutConfiguration_GridLayout::setCanvasSizeOptions(const OAIGridLayoutCanvasSizeOptions &canvas_size_options) {
    m_canvas_size_options = canvas_size_options;
    m_canvas_size_options_isSet = true;
}

bool OAISheetControlLayoutConfiguration_GridLayout::is_canvas_size_options_Set() const{
    return m_canvas_size_options_isSet;
}

bool OAISheetControlLayoutConfiguration_GridLayout::is_canvas_size_options_Valid() const{
    return m_canvas_size_options_isValid;
}

bool OAISheetControlLayoutConfiguration_GridLayout::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_elements.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_canvas_size_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISheetControlLayoutConfiguration_GridLayout::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_elements_isValid && true;
}

} // namespace OpenAPI
