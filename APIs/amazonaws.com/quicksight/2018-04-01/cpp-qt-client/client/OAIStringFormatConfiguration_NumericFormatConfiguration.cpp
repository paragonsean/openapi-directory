/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStringFormatConfiguration_NumericFormatConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStringFormatConfiguration_NumericFormatConfiguration::OAIStringFormatConfiguration_NumericFormatConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStringFormatConfiguration_NumericFormatConfiguration::OAIStringFormatConfiguration_NumericFormatConfiguration() {
    this->initializeModel();
}

OAIStringFormatConfiguration_NumericFormatConfiguration::~OAIStringFormatConfiguration_NumericFormatConfiguration() {}

void OAIStringFormatConfiguration_NumericFormatConfiguration::initializeModel() {

    m_number_display_format_configuration_isSet = false;
    m_number_display_format_configuration_isValid = false;

    m_currency_display_format_configuration_isSet = false;
    m_currency_display_format_configuration_isValid = false;

    m_percentage_display_format_configuration_isSet = false;
    m_percentage_display_format_configuration_isValid = false;
}

void OAIStringFormatConfiguration_NumericFormatConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStringFormatConfiguration_NumericFormatConfiguration::fromJsonObject(QJsonObject json) {

    m_number_display_format_configuration_isValid = ::OpenAPI::fromJsonValue(m_number_display_format_configuration, json[QString("NumberDisplayFormatConfiguration")]);
    m_number_display_format_configuration_isSet = !json[QString("NumberDisplayFormatConfiguration")].isNull() && m_number_display_format_configuration_isValid;

    m_currency_display_format_configuration_isValid = ::OpenAPI::fromJsonValue(m_currency_display_format_configuration, json[QString("CurrencyDisplayFormatConfiguration")]);
    m_currency_display_format_configuration_isSet = !json[QString("CurrencyDisplayFormatConfiguration")].isNull() && m_currency_display_format_configuration_isValid;

    m_percentage_display_format_configuration_isValid = ::OpenAPI::fromJsonValue(m_percentage_display_format_configuration, json[QString("PercentageDisplayFormatConfiguration")]);
    m_percentage_display_format_configuration_isSet = !json[QString("PercentageDisplayFormatConfiguration")].isNull() && m_percentage_display_format_configuration_isValid;
}

QString OAIStringFormatConfiguration_NumericFormatConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStringFormatConfiguration_NumericFormatConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_number_display_format_configuration.isSet()) {
        obj.insert(QString("NumberDisplayFormatConfiguration"), ::OpenAPI::toJsonValue(m_number_display_format_configuration));
    }
    if (m_currency_display_format_configuration.isSet()) {
        obj.insert(QString("CurrencyDisplayFormatConfiguration"), ::OpenAPI::toJsonValue(m_currency_display_format_configuration));
    }
    if (m_percentage_display_format_configuration.isSet()) {
        obj.insert(QString("PercentageDisplayFormatConfiguration"), ::OpenAPI::toJsonValue(m_percentage_display_format_configuration));
    }
    return obj;
}

OAINumericFormatConfiguration_NumberDisplayFormatConfiguration OAIStringFormatConfiguration_NumericFormatConfiguration::getNumberDisplayFormatConfiguration() const {
    return m_number_display_format_configuration;
}
void OAIStringFormatConfiguration_NumericFormatConfiguration::setNumberDisplayFormatConfiguration(const OAINumericFormatConfiguration_NumberDisplayFormatConfiguration &number_display_format_configuration) {
    m_number_display_format_configuration = number_display_format_configuration;
    m_number_display_format_configuration_isSet = true;
}

bool OAIStringFormatConfiguration_NumericFormatConfiguration::is_number_display_format_configuration_Set() const{
    return m_number_display_format_configuration_isSet;
}

bool OAIStringFormatConfiguration_NumericFormatConfiguration::is_number_display_format_configuration_Valid() const{
    return m_number_display_format_configuration_isValid;
}

OAINumericFormatConfiguration_CurrencyDisplayFormatConfiguration OAIStringFormatConfiguration_NumericFormatConfiguration::getCurrencyDisplayFormatConfiguration() const {
    return m_currency_display_format_configuration;
}
void OAIStringFormatConfiguration_NumericFormatConfiguration::setCurrencyDisplayFormatConfiguration(const OAINumericFormatConfiguration_CurrencyDisplayFormatConfiguration &currency_display_format_configuration) {
    m_currency_display_format_configuration = currency_display_format_configuration;
    m_currency_display_format_configuration_isSet = true;
}

bool OAIStringFormatConfiguration_NumericFormatConfiguration::is_currency_display_format_configuration_Set() const{
    return m_currency_display_format_configuration_isSet;
}

bool OAIStringFormatConfiguration_NumericFormatConfiguration::is_currency_display_format_configuration_Valid() const{
    return m_currency_display_format_configuration_isValid;
}

OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration OAIStringFormatConfiguration_NumericFormatConfiguration::getPercentageDisplayFormatConfiguration() const {
    return m_percentage_display_format_configuration;
}
void OAIStringFormatConfiguration_NumericFormatConfiguration::setPercentageDisplayFormatConfiguration(const OAINumericFormatConfiguration_PercentageDisplayFormatConfiguration &percentage_display_format_configuration) {
    m_percentage_display_format_configuration = percentage_display_format_configuration;
    m_percentage_display_format_configuration_isSet = true;
}

bool OAIStringFormatConfiguration_NumericFormatConfiguration::is_percentage_display_format_configuration_Set() const{
    return m_percentage_display_format_configuration_isSet;
}

bool OAIStringFormatConfiguration_NumericFormatConfiguration::is_percentage_display_format_configuration_Valid() const{
    return m_percentage_display_format_configuration_isValid;
}

bool OAIStringFormatConfiguration_NumericFormatConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_number_display_format_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_display_format_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_display_format_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStringFormatConfiguration_NumericFormatConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
