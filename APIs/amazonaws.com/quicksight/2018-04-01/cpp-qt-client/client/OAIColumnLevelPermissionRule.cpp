/**
 * Amazon QuickSight
 * <fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIColumnLevelPermissionRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColumnLevelPermissionRule::OAIColumnLevelPermissionRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColumnLevelPermissionRule::OAIColumnLevelPermissionRule() {
    this->initializeModel();
}

OAIColumnLevelPermissionRule::~OAIColumnLevelPermissionRule() {}

void OAIColumnLevelPermissionRule::initializeModel() {

    m_principals_isSet = false;
    m_principals_isValid = false;

    m_column_names_isSet = false;
    m_column_names_isValid = false;
}

void OAIColumnLevelPermissionRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIColumnLevelPermissionRule::fromJsonObject(QJsonObject json) {

    m_principals_isValid = ::OpenAPI::fromJsonValue(m_principals, json[QString("Principals")]);
    m_principals_isSet = !json[QString("Principals")].isNull() && m_principals_isValid;

    m_column_names_isValid = ::OpenAPI::fromJsonValue(m_column_names, json[QString("ColumnNames")]);
    m_column_names_isSet = !json[QString("ColumnNames")].isNull() && m_column_names_isValid;
}

QString OAIColumnLevelPermissionRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIColumnLevelPermissionRule::asJsonObject() const {
    QJsonObject obj;
    if (m_principals.isSet()) {
        obj.insert(QString("Principals"), ::OpenAPI::toJsonValue(m_principals));
    }
    if (m_column_names.isSet()) {
        obj.insert(QString("ColumnNames"), ::OpenAPI::toJsonValue(m_column_names));
    }
    return obj;
}

QList OAIColumnLevelPermissionRule::getPrincipals() const {
    return m_principals;
}
void OAIColumnLevelPermissionRule::setPrincipals(const QList &principals) {
    m_principals = principals;
    m_principals_isSet = true;
}

bool OAIColumnLevelPermissionRule::is_principals_Set() const{
    return m_principals_isSet;
}

bool OAIColumnLevelPermissionRule::is_principals_Valid() const{
    return m_principals_isValid;
}

QList OAIColumnLevelPermissionRule::getColumnNames() const {
    return m_column_names;
}
void OAIColumnLevelPermissionRule::setColumnNames(const QList &column_names) {
    m_column_names = column_names;
    m_column_names_isSet = true;
}

bool OAIColumnLevelPermissionRule::is_column_names_Set() const{
    return m_column_names_isSet;
}

bool OAIColumnLevelPermissionRule::is_column_names_Valid() const{
    return m_column_names_isValid;
}

bool OAIColumnLevelPermissionRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_principals.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_names.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIColumnLevelPermissionRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
